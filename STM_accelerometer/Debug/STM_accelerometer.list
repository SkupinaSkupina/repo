
STM_accelerometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d30  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08007ec8  08007ec8  00008ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f24  08007f24  000090fc  2**0
                  CONTENTS
  4 .ARM          00000008  08007f24  08007f24  00008f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f2c  08007f2c  000090fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f2c  08007f2c  00008f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f30  08007f30  00008f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  08007f34  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c58  200000fc  08008030  000090fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d54  08008030  00009d54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000090fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000105d5  00000000  00000000  0000912c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dde  00000000  00000000  00019701  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  0001c4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ab5  00000000  00000000  0001d308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018288  00000000  00000000  0001ddbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001354f  00000000  00000000  00036045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089925  00000000  00000000  00049594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d2eb9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a1c  00000000  00000000  000d2efc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000d6918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000fc 	.word	0x200000fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007eb0 	.word	0x08007eb0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000100 	.word	0x20000100
 80001d4:	08007eb0 	.word	0x08007eb0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <i2c1_pisiRegister>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t i2c1_pisiRegister(uint8_t naprava, uint8_t reg, uint8_t podatek) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af04      	add	r7, sp, #16
 80004ce:	4603      	mov	r3, r0
 80004d0:	71fb      	strb	r3, [r7, #7]
 80004d2:	460b      	mov	r3, r1
 80004d4:	71bb      	strb	r3, [r7, #6]
 80004d6:	4613      	mov	r3, r2
 80004d8:	717b      	strb	r3, [r7, #5]
    naprava <<= 1;
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	005b      	lsls	r3, r3, #1
 80004de:	71fb      	strb	r3, [r7, #7]
    return HAL_I2C_Mem_Write(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, &podatek, 1, 10);
 80004e0:	79fb      	ldrb	r3, [r7, #7]
 80004e2:	b299      	uxth	r1, r3
 80004e4:	79bb      	ldrb	r3, [r7, #6]
 80004e6:	b29a      	uxth	r2, r3
 80004e8:	230a      	movs	r3, #10
 80004ea:	9302      	str	r3, [sp, #8]
 80004ec:	2301      	movs	r3, #1
 80004ee:	9301      	str	r3, [sp, #4]
 80004f0:	1d7b      	adds	r3, r7, #5
 80004f2:	9300      	str	r3, [sp, #0]
 80004f4:	2301      	movs	r3, #1
 80004f6:	4804      	ldr	r0, [pc, #16]	@ (8000508 <i2c1_pisiRegister+0x40>)
 80004f8:	f000 ff0e 	bl	8001318 <HAL_I2C_Mem_Write>
 80004fc:	4603      	mov	r3, r0
}
 80004fe:	4618      	mov	r0, r3
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	20000118 	.word	0x20000118

0800050c <i2c1_beriRegistre>:

void i2c1_beriRegistre(uint8_t naprava, uint8_t reg, uint8_t* podatek, uint8_t dolzina) {
 800050c:	b580      	push	{r7, lr}
 800050e:	b086      	sub	sp, #24
 8000510:	af04      	add	r7, sp, #16
 8000512:	603a      	str	r2, [r7, #0]
 8000514:	461a      	mov	r2, r3
 8000516:	4603      	mov	r3, r0
 8000518:	71fb      	strb	r3, [r7, #7]
 800051a:	460b      	mov	r3, r1
 800051c:	71bb      	strb	r3, [r7, #6]
 800051e:	4613      	mov	r3, r2
 8000520:	717b      	strb	r3, [r7, #5]
    if ((dolzina>1)&&(naprava==0x19))  // ce je naprava 0x19 moramo postaviti ta bit, ce zelimo brati vec zlogov
 8000522:	797b      	ldrb	r3, [r7, #5]
 8000524:	2b01      	cmp	r3, #1
 8000526:	d906      	bls.n	8000536 <i2c1_beriRegistre+0x2a>
 8000528:	79fb      	ldrb	r3, [r7, #7]
 800052a:	2b19      	cmp	r3, #25
 800052c:	d103      	bne.n	8000536 <i2c1_beriRegistre+0x2a>
        reg |= 0x80;
 800052e:	79bb      	ldrb	r3, [r7, #6]
 8000530:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000534:	71bb      	strb	r3, [r7, #6]
    naprava <<= 1;
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	005b      	lsls	r3, r3, #1
 800053a:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Read(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, podatek, dolzina, dolzina);
 800053c:	79fb      	ldrb	r3, [r7, #7]
 800053e:	b299      	uxth	r1, r3
 8000540:	79bb      	ldrb	r3, [r7, #6]
 8000542:	b298      	uxth	r0, r3
 8000544:	797b      	ldrb	r3, [r7, #5]
 8000546:	b29b      	uxth	r3, r3
 8000548:	797a      	ldrb	r2, [r7, #5]
 800054a:	9202      	str	r2, [sp, #8]
 800054c:	9301      	str	r3, [sp, #4]
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	9300      	str	r3, [sp, #0]
 8000552:	2301      	movs	r3, #1
 8000554:	4602      	mov	r2, r0
 8000556:	4803      	ldr	r0, [pc, #12]	@ (8000564 <i2c1_beriRegistre+0x58>)
 8000558:	f000 ffd8 	bl	800150c <HAL_I2C_Mem_Read>
}
 800055c:	bf00      	nop
 800055e:	3708      	adds	r7, #8
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20000118 	.word	0x20000118

08000568 <initOrientation>:

void initOrientation() { // ne pozabit klicati te funkcije
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
    // inicializiraj pospeskometer
    i2c1_pisiRegister(0x19, 0x20, 0x27);  // zbudi pospeskometer in omogoci osi
 800056c:	2227      	movs	r2, #39	@ 0x27
 800056e:	2120      	movs	r1, #32
 8000570:	2019      	movs	r0, #25
 8000572:	f7ff ffa9 	bl	80004c8 <i2c1_pisiRegister>
    i2c1_pisiRegister(0x19, 0x23, 0x88);  // nastavi posodobitev samo ko se prebere vrednost ter visoko locljivost
 8000576:	2288      	movs	r2, #136	@ 0x88
 8000578:	2123      	movs	r1, #35	@ 0x23
 800057a:	2019      	movs	r0, #25
 800057c:	f7ff ffa4 	bl	80004c8 <i2c1_pisiRegister>
}
 8000580:	bf00      	nop
 8000582:	bd80      	pop	{r7, pc}

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f000 fa21 	bl	80009d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f82d 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 f8c3 	bl	800071c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000596:	f000 f891 	bl	80006bc <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 800059a:	f006 ff4d 	bl	8007438 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  __HAL_I2C_ENABLE(&hi2c1);
 800059e:	4b11      	ldr	r3, [pc, #68]	@ (80005e4 <main+0x60>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	681a      	ldr	r2, [r3, #0]
 80005a4:	4b0f      	ldr	r3, [pc, #60]	@ (80005e4 <main+0x60>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f042 0201 	orr.w	r2, r2, #1
 80005ac:	601a      	str	r2, [r3, #0]

  int16_t meritev[4];
  meritev[0] = 0xaaab;// glava za zaznamek zacetek paketa
 80005ae:	f64a 23ab 	movw	r3, #43691	@ 0xaaab
 80005b2:	803b      	strh	r3, [r7, #0]

  initOrientation();
 80005b4:	f7ff ffd8 	bl	8000568 <initOrientation>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(100);
 80005b8:	2064      	movs	r0, #100	@ 0x64
 80005ba:	f000 fa7b 	bl	8000ab4 <HAL_Delay>

	  i2c1_beriRegistre(0x19, 0x28,(uint8_t*)&meritev[1], 6);
 80005be:	463b      	mov	r3, r7
 80005c0:	1c9a      	adds	r2, r3, #2
 80005c2:	2306      	movs	r3, #6
 80005c4:	2128      	movs	r1, #40	@ 0x28
 80005c6:	2019      	movs	r0, #25
 80005c8:	f7ff ffa0 	bl	800050c <i2c1_beriRegistre>

	  CDC_Transmit_FS((uint8_t*)&meritev, 8);
 80005cc:	463b      	mov	r3, r7
 80005ce:	2108      	movs	r1, #8
 80005d0:	4618      	mov	r0, r3
 80005d2:	f006 ffef 	bl	80075b4 <CDC_Transmit_FS>

	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80005d6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005da:	4803      	ldr	r0, [pc, #12]	@ (80005e8 <main+0x64>)
 80005dc:	f000 fd3d 	bl	800105a <HAL_GPIO_TogglePin>
  {
 80005e0:	bf00      	nop
 80005e2:	e7e9      	b.n	80005b8 <main+0x34>
 80005e4:	20000118 	.word	0x20000118
 80005e8:	40020c00 	.word	0x40020c00

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b094      	sub	sp, #80	@ 0x50
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0320 	add.w	r3, r7, #32
 80005f6:	2230      	movs	r2, #48	@ 0x30
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f007 fc2c 	bl	8007e58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000610:	2300      	movs	r3, #0
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	4b27      	ldr	r3, [pc, #156]	@ (80006b4 <SystemClock_Config+0xc8>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000618:	4a26      	ldr	r2, [pc, #152]	@ (80006b4 <SystemClock_Config+0xc8>)
 800061a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800061e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000620:	4b24      	ldr	r3, [pc, #144]	@ (80006b4 <SystemClock_Config+0xc8>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000624:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800062c:	2300      	movs	r3, #0
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	4b21      	ldr	r3, [pc, #132]	@ (80006b8 <SystemClock_Config+0xcc>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a20      	ldr	r2, [pc, #128]	@ (80006b8 <SystemClock_Config+0xcc>)
 8000636:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800063a:	6013      	str	r3, [r2, #0]
 800063c:	4b1e      	ldr	r3, [pc, #120]	@ (80006b8 <SystemClock_Config+0xcc>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000648:	2302      	movs	r3, #2
 800064a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800064c:	2301      	movs	r3, #1
 800064e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000650:	2310      	movs	r3, #16
 8000652:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000654:	2302      	movs	r3, #2
 8000656:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000658:	2300      	movs	r3, #0
 800065a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800065c:	2310      	movs	r3, #16
 800065e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000660:	23c0      	movs	r3, #192	@ 0xc0
 8000662:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000664:	2302      	movs	r3, #2
 8000666:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000668:	2304      	movs	r3, #4
 800066a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066c:	f107 0320 	add.w	r3, r7, #32
 8000670:	4618      	mov	r0, r3
 8000672:	f002 ff83 	bl	800357c <HAL_RCC_OscConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800067c:	f000 f8bc 	bl	80007f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000680:	230f      	movs	r3, #15
 8000682:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000684:	2300      	movs	r3, #0
 8000686:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f003 f9e6 	bl	8003a6c <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80006a6:	f000 f8a7 	bl	80007f8 <Error_Handler>
  }
}
 80006aa:	bf00      	nop
 80006ac:	3750      	adds	r7, #80	@ 0x50
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40007000 	.word	0x40007000

080006bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006c0:	4b13      	ldr	r3, [pc, #76]	@ (8000710 <MX_I2C1_Init+0x54>)
 80006c2:	4a14      	ldr	r2, [pc, #80]	@ (8000714 <MX_I2C1_Init+0x58>)
 80006c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80006c6:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <MX_I2C1_Init+0x54>)
 80006c8:	4a13      	ldr	r2, [pc, #76]	@ (8000718 <MX_I2C1_Init+0x5c>)
 80006ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 80006cc:	4b10      	ldr	r3, [pc, #64]	@ (8000710 <MX_I2C1_Init+0x54>)
 80006ce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006d2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000710 <MX_I2C1_Init+0x54>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006da:	4b0d      	ldr	r3, [pc, #52]	@ (8000710 <MX_I2C1_Init+0x54>)
 80006dc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000710 <MX_I2C1_Init+0x54>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006e8:	4b09      	ldr	r3, [pc, #36]	@ (8000710 <MX_I2C1_Init+0x54>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ee:	4b08      	ldr	r3, [pc, #32]	@ (8000710 <MX_I2C1_Init+0x54>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f4:	4b06      	ldr	r3, [pc, #24]	@ (8000710 <MX_I2C1_Init+0x54>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006fa:	4805      	ldr	r0, [pc, #20]	@ (8000710 <MX_I2C1_Init+0x54>)
 80006fc:	f000 fcc8 	bl	8001090 <HAL_I2C_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8000706:	f000 f877 	bl	80007f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000118 	.word	0x20000118
 8000714:	40005400 	.word	0x40005400
 8000718:	00061a80 	.word	0x00061a80

0800071c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08a      	sub	sp, #40	@ 0x28
 8000720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	613b      	str	r3, [r7, #16]
 8000736:	4b2e      	ldr	r3, [pc, #184]	@ (80007f0 <MX_GPIO_Init+0xd4>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	4a2d      	ldr	r2, [pc, #180]	@ (80007f0 <MX_GPIO_Init+0xd4>)
 800073c:	f043 0304 	orr.w	r3, r3, #4
 8000740:	6313      	str	r3, [r2, #48]	@ 0x30
 8000742:	4b2b      	ldr	r3, [pc, #172]	@ (80007f0 <MX_GPIO_Init+0xd4>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	f003 0304 	and.w	r3, r3, #4
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	4b27      	ldr	r3, [pc, #156]	@ (80007f0 <MX_GPIO_Init+0xd4>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	4a26      	ldr	r2, [pc, #152]	@ (80007f0 <MX_GPIO_Init+0xd4>)
 8000758:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800075c:	6313      	str	r3, [r2, #48]	@ 0x30
 800075e:	4b24      	ldr	r3, [pc, #144]	@ (80007f0 <MX_GPIO_Init+0xd4>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	4b20      	ldr	r3, [pc, #128]	@ (80007f0 <MX_GPIO_Init+0xd4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	4a1f      	ldr	r2, [pc, #124]	@ (80007f0 <MX_GPIO_Init+0xd4>)
 8000774:	f043 0308 	orr.w	r3, r3, #8
 8000778:	6313      	str	r3, [r2, #48]	@ 0x30
 800077a:	4b1d      	ldr	r3, [pc, #116]	@ (80007f0 <MX_GPIO_Init+0xd4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	f003 0308 	and.w	r3, r3, #8
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	4b19      	ldr	r3, [pc, #100]	@ (80007f0 <MX_GPIO_Init+0xd4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	4a18      	ldr	r2, [pc, #96]	@ (80007f0 <MX_GPIO_Init+0xd4>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	6313      	str	r3, [r2, #48]	@ 0x30
 8000796:	4b16      	ldr	r3, [pc, #88]	@ (80007f0 <MX_GPIO_Init+0xd4>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	603b      	str	r3, [r7, #0]
 80007a6:	4b12      	ldr	r3, [pc, #72]	@ (80007f0 <MX_GPIO_Init+0xd4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	4a11      	ldr	r2, [pc, #68]	@ (80007f0 <MX_GPIO_Init+0xd4>)
 80007ac:	f043 0302 	orr.w	r3, r3, #2
 80007b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b2:	4b0f      	ldr	r3, [pc, #60]	@ (80007f0 <MX_GPIO_Init+0xd4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	f003 0302 	and.w	r3, r3, #2
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007c4:	480b      	ldr	r0, [pc, #44]	@ (80007f4 <MX_GPIO_Init+0xd8>)
 80007c6:	f000 fc2f 	bl	8001028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80007ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d0:	2301      	movs	r3, #1
 80007d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d8:	2300      	movs	r3, #0
 80007da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	4619      	mov	r1, r3
 80007e2:	4804      	ldr	r0, [pc, #16]	@ (80007f4 <MX_GPIO_Init+0xd8>)
 80007e4:	f000 fa9c 	bl	8000d20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007e8:	bf00      	nop
 80007ea:	3728      	adds	r7, #40	@ 0x28
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40020c00 	.word	0x40020c00

080007f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007fc:	b672      	cpsid	i
}
 80007fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000800:	bf00      	nop
 8000802:	e7fd      	b.n	8000800 <Error_Handler+0x8>

08000804 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	4b10      	ldr	r3, [pc, #64]	@ (8000850 <HAL_MspInit+0x4c>)
 8000810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000812:	4a0f      	ldr	r2, [pc, #60]	@ (8000850 <HAL_MspInit+0x4c>)
 8000814:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000818:	6453      	str	r3, [r2, #68]	@ 0x44
 800081a:	4b0d      	ldr	r3, [pc, #52]	@ (8000850 <HAL_MspInit+0x4c>)
 800081c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800081e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	603b      	str	r3, [r7, #0]
 800082a:	4b09      	ldr	r3, [pc, #36]	@ (8000850 <HAL_MspInit+0x4c>)
 800082c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800082e:	4a08      	ldr	r2, [pc, #32]	@ (8000850 <HAL_MspInit+0x4c>)
 8000830:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000834:	6413      	str	r3, [r2, #64]	@ 0x40
 8000836:	4b06      	ldr	r3, [pc, #24]	@ (8000850 <HAL_MspInit+0x4c>)
 8000838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800083a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000842:	bf00      	nop
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	40023800 	.word	0x40023800

08000854 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08a      	sub	sp, #40	@ 0x28
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a19      	ldr	r2, [pc, #100]	@ (80008d8 <HAL_I2C_MspInit+0x84>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d12b      	bne.n	80008ce <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	613b      	str	r3, [r7, #16]
 800087a:	4b18      	ldr	r3, [pc, #96]	@ (80008dc <HAL_I2C_MspInit+0x88>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a17      	ldr	r2, [pc, #92]	@ (80008dc <HAL_I2C_MspInit+0x88>)
 8000880:	f043 0302 	orr.w	r3, r3, #2
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b15      	ldr	r3, [pc, #84]	@ (80008dc <HAL_I2C_MspInit+0x88>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f003 0302 	and.w	r3, r3, #2
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000892:	23c0      	movs	r3, #192	@ 0xc0
 8000894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000896:	2312      	movs	r3, #18
 8000898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089e:	2303      	movs	r3, #3
 80008a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008a2:	2304      	movs	r3, #4
 80008a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	4619      	mov	r1, r3
 80008ac:	480c      	ldr	r0, [pc, #48]	@ (80008e0 <HAL_I2C_MspInit+0x8c>)
 80008ae:	f000 fa37 	bl	8000d20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
 80008b6:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <HAL_I2C_MspInit+0x88>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ba:	4a08      	ldr	r2, [pc, #32]	@ (80008dc <HAL_I2C_MspInit+0x88>)
 80008bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80008c2:	4b06      	ldr	r3, [pc, #24]	@ (80008dc <HAL_I2C_MspInit+0x88>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80008ce:	bf00      	nop
 80008d0:	3728      	adds	r7, #40	@ 0x28
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40005400 	.word	0x40005400
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40020400 	.word	0x40020400

080008e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <NMI_Handler+0x4>

080008ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f0:	bf00      	nop
 80008f2:	e7fd      	b.n	80008f0 <HardFault_Handler+0x4>

080008f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <MemManage_Handler+0x4>

080008fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <BusFault_Handler+0x4>

08000904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <UsageFault_Handler+0x4>

0800090c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr

0800091a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr

08000936 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000936:	b580      	push	{r7, lr}
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800093a:	f000 f89b 	bl	8000a74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
	...

08000944 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000948:	4802      	ldr	r0, [pc, #8]	@ (8000954 <OTG_FS_IRQHandler+0x10>)
 800094a:	f001 fd09 	bl	8002360 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20001650 	.word	0x20001650

08000958 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800095c:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <SystemInit+0x20>)
 800095e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000962:	4a05      	ldr	r2, [pc, #20]	@ (8000978 <SystemInit+0x20>)
 8000964:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000968:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	e000ed00 	.word	0xe000ed00

0800097c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800097c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000980:	f7ff ffea 	bl	8000958 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000984:	480c      	ldr	r0, [pc, #48]	@ (80009b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000986:	490d      	ldr	r1, [pc, #52]	@ (80009bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000988:	4a0d      	ldr	r2, [pc, #52]	@ (80009c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800098a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800098c:	e002      	b.n	8000994 <LoopCopyDataInit>

0800098e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800098e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000992:	3304      	adds	r3, #4

08000994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000998:	d3f9      	bcc.n	800098e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099a:	4a0a      	ldr	r2, [pc, #40]	@ (80009c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800099c:	4c0a      	ldr	r4, [pc, #40]	@ (80009c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800099e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a0:	e001      	b.n	80009a6 <LoopFillZerobss>

080009a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a4:	3204      	adds	r2, #4

080009a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a8:	d3fb      	bcc.n	80009a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009aa:	f007 fa5d 	bl	8007e68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ae:	f7ff fde9 	bl	8000584 <main>
  bx  lr    
 80009b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80009b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009bc:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 80009c0:	08007f34 	.word	0x08007f34
  ldr r2, =_sbss
 80009c4:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 80009c8:	20001d54 	.word	0x20001d54

080009cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009cc:	e7fe      	b.n	80009cc <ADC_IRQHandler>
	...

080009d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000a10 <HAL_Init+0x40>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000a10 <HAL_Init+0x40>)
 80009da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000a10 <HAL_Init+0x40>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a0a      	ldr	r2, [pc, #40]	@ (8000a10 <HAL_Init+0x40>)
 80009e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009ec:	4b08      	ldr	r3, [pc, #32]	@ (8000a10 <HAL_Init+0x40>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a07      	ldr	r2, [pc, #28]	@ (8000a10 <HAL_Init+0x40>)
 80009f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f8:	2003      	movs	r0, #3
 80009fa:	f000 f94f 	bl	8000c9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009fe:	200f      	movs	r0, #15
 8000a00:	f000 f808 	bl	8000a14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a04:	f7ff fefe 	bl	8000804 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023c00 	.word	0x40023c00

08000a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a1c:	4b12      	ldr	r3, [pc, #72]	@ (8000a68 <HAL_InitTick+0x54>)
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	4b12      	ldr	r3, [pc, #72]	@ (8000a6c <HAL_InitTick+0x58>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	4619      	mov	r1, r3
 8000a26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 f967 	bl	8000d06 <HAL_SYSTICK_Config>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e00e      	b.n	8000a60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2b0f      	cmp	r3, #15
 8000a46:	d80a      	bhi.n	8000a5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	6879      	ldr	r1, [r7, #4]
 8000a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a50:	f000 f92f 	bl	8000cb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a54:	4a06      	ldr	r2, [pc, #24]	@ (8000a70 <HAL_InitTick+0x5c>)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	e000      	b.n	8000a60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20000000 	.word	0x20000000
 8000a6c:	20000008 	.word	0x20000008
 8000a70:	20000004 	.word	0x20000004

08000a74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a78:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <HAL_IncTick+0x20>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4b06      	ldr	r3, [pc, #24]	@ (8000a98 <HAL_IncTick+0x24>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4413      	add	r3, r2
 8000a84:	4a04      	ldr	r2, [pc, #16]	@ (8000a98 <HAL_IncTick+0x24>)
 8000a86:	6013      	str	r3, [r2, #0]
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	20000008 	.word	0x20000008
 8000a98:	2000016c 	.word	0x2000016c

08000a9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa0:	4b03      	ldr	r3, [pc, #12]	@ (8000ab0 <HAL_GetTick+0x14>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	2000016c 	.word	0x2000016c

08000ab4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000abc:	f7ff ffee 	bl	8000a9c <HAL_GetTick>
 8000ac0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000acc:	d005      	beq.n	8000ada <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ace:	4b0a      	ldr	r3, [pc, #40]	@ (8000af8 <HAL_Delay+0x44>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ada:	bf00      	nop
 8000adc:	f7ff ffde 	bl	8000a9c <HAL_GetTick>
 8000ae0:	4602      	mov	r2, r0
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	68fa      	ldr	r2, [r7, #12]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d8f7      	bhi.n	8000adc <HAL_Delay+0x28>
  {
  }
}
 8000aec:	bf00      	nop
 8000aee:	bf00      	nop
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000008 	.word	0x20000008

08000afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f003 0307 	and.w	r3, r3, #7
 8000b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b40 <__NVIC_SetPriorityGrouping+0x44>)
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b18:	4013      	ands	r3, r2
 8000b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b2e:	4a04      	ldr	r2, [pc, #16]	@ (8000b40 <__NVIC_SetPriorityGrouping+0x44>)
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	60d3      	str	r3, [r2, #12]
}
 8000b34:	bf00      	nop
 8000b36:	3714      	adds	r7, #20
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b48:	4b04      	ldr	r3, [pc, #16]	@ (8000b5c <__NVIC_GetPriorityGrouping+0x18>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	0a1b      	lsrs	r3, r3, #8
 8000b4e:	f003 0307 	and.w	r3, r3, #7
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	db0b      	blt.n	8000b8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	f003 021f 	and.w	r2, r3, #31
 8000b78:	4907      	ldr	r1, [pc, #28]	@ (8000b98 <__NVIC_EnableIRQ+0x38>)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	095b      	lsrs	r3, r3, #5
 8000b80:	2001      	movs	r0, #1
 8000b82:	fa00 f202 	lsl.w	r2, r0, r2
 8000b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	e000e100 	.word	0xe000e100

08000b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	6039      	str	r1, [r7, #0]
 8000ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	db0a      	blt.n	8000bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	490c      	ldr	r1, [pc, #48]	@ (8000be8 <__NVIC_SetPriority+0x4c>)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	0112      	lsls	r2, r2, #4
 8000bbc:	b2d2      	uxtb	r2, r2
 8000bbe:	440b      	add	r3, r1
 8000bc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc4:	e00a      	b.n	8000bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	4908      	ldr	r1, [pc, #32]	@ (8000bec <__NVIC_SetPriority+0x50>)
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	f003 030f 	and.w	r3, r3, #15
 8000bd2:	3b04      	subs	r3, #4
 8000bd4:	0112      	lsls	r2, r2, #4
 8000bd6:	b2d2      	uxtb	r2, r2
 8000bd8:	440b      	add	r3, r1
 8000bda:	761a      	strb	r2, [r3, #24]
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000e100 	.word	0xe000e100
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b089      	sub	sp, #36	@ 0x24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	f1c3 0307 	rsb	r3, r3, #7
 8000c0a:	2b04      	cmp	r3, #4
 8000c0c:	bf28      	it	cs
 8000c0e:	2304      	movcs	r3, #4
 8000c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	3304      	adds	r3, #4
 8000c16:	2b06      	cmp	r3, #6
 8000c18:	d902      	bls.n	8000c20 <NVIC_EncodePriority+0x30>
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	3b03      	subs	r3, #3
 8000c1e:	e000      	b.n	8000c22 <NVIC_EncodePriority+0x32>
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c24:	f04f 32ff 	mov.w	r2, #4294967295
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	43da      	mvns	r2, r3
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	401a      	ands	r2, r3
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c38:	f04f 31ff 	mov.w	r1, #4294967295
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c42:	43d9      	mvns	r1, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c48:	4313      	orrs	r3, r2
         );
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3724      	adds	r7, #36	@ 0x24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
	...

08000c58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3b01      	subs	r3, #1
 8000c64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c68:	d301      	bcc.n	8000c6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e00f      	b.n	8000c8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c98 <SysTick_Config+0x40>)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c76:	210f      	movs	r1, #15
 8000c78:	f04f 30ff 	mov.w	r0, #4294967295
 8000c7c:	f7ff ff8e 	bl	8000b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c80:	4b05      	ldr	r3, [pc, #20]	@ (8000c98 <SysTick_Config+0x40>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c86:	4b04      	ldr	r3, [pc, #16]	@ (8000c98 <SysTick_Config+0x40>)
 8000c88:	2207      	movs	r2, #7
 8000c8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	e000e010 	.word	0xe000e010

08000c9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f7ff ff29 	bl	8000afc <__NVIC_SetPriorityGrouping>
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b086      	sub	sp, #24
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	4603      	mov	r3, r0
 8000cba:	60b9      	str	r1, [r7, #8]
 8000cbc:	607a      	str	r2, [r7, #4]
 8000cbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc4:	f7ff ff3e 	bl	8000b44 <__NVIC_GetPriorityGrouping>
 8000cc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	68b9      	ldr	r1, [r7, #8]
 8000cce:	6978      	ldr	r0, [r7, #20]
 8000cd0:	f7ff ff8e 	bl	8000bf0 <NVIC_EncodePriority>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cda:	4611      	mov	r1, r2
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff ff5d 	bl	8000b9c <__NVIC_SetPriority>
}
 8000ce2:	bf00      	nop
 8000ce4:	3718      	adds	r7, #24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff ff31 	bl	8000b60 <__NVIC_EnableIRQ>
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b082      	sub	sp, #8
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f7ff ffa2 	bl	8000c58 <SysTick_Config>
 8000d14:	4603      	mov	r3, r0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
	...

08000d20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b089      	sub	sp, #36	@ 0x24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
 8000d3a:	e159      	b.n	8000ff0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	697a      	ldr	r2, [r7, #20]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	f040 8148 	bne.w	8000fea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f003 0303 	and.w	r3, r3, #3
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d005      	beq.n	8000d72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	d130      	bne.n	8000dd4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	2203      	movs	r2, #3
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43db      	mvns	r3, r3
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	4013      	ands	r3, r2
 8000d88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	68da      	ldr	r2, [r3, #12]
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000da8:	2201      	movs	r2, #1
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	4013      	ands	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	091b      	lsrs	r3, r3, #4
 8000dbe:	f003 0201 	and.w	r2, r3, #1
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f003 0303 	and.w	r3, r3, #3
 8000ddc:	2b03      	cmp	r3, #3
 8000dde:	d017      	beq.n	8000e10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	2203      	movs	r2, #3
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	43db      	mvns	r3, r3
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4013      	ands	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	689a      	ldr	r2, [r3, #8]
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f003 0303 	and.w	r3, r3, #3
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d123      	bne.n	8000e64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	08da      	lsrs	r2, r3, #3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3208      	adds	r2, #8
 8000e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	f003 0307 	and.w	r3, r3, #7
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	220f      	movs	r2, #15
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	691a      	ldr	r2, [r3, #16]
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	08da      	lsrs	r2, r3, #3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	3208      	adds	r2, #8
 8000e5e:	69b9      	ldr	r1, [r7, #24]
 8000e60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	2203      	movs	r2, #3
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f003 0203 	and.w	r2, r3, #3
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	f000 80a2 	beq.w	8000fea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	4b57      	ldr	r3, [pc, #348]	@ (8001008 <HAL_GPIO_Init+0x2e8>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eae:	4a56      	ldr	r2, [pc, #344]	@ (8001008 <HAL_GPIO_Init+0x2e8>)
 8000eb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eb6:	4b54      	ldr	r3, [pc, #336]	@ (8001008 <HAL_GPIO_Init+0x2e8>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ec2:	4a52      	ldr	r2, [pc, #328]	@ (800100c <HAL_GPIO_Init+0x2ec>)
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	089b      	lsrs	r3, r3, #2
 8000ec8:	3302      	adds	r3, #2
 8000eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	f003 0303 	and.w	r3, r3, #3
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	220f      	movs	r2, #15
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a49      	ldr	r2, [pc, #292]	@ (8001010 <HAL_GPIO_Init+0x2f0>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d019      	beq.n	8000f22 <HAL_GPIO_Init+0x202>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a48      	ldr	r2, [pc, #288]	@ (8001014 <HAL_GPIO_Init+0x2f4>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d013      	beq.n	8000f1e <HAL_GPIO_Init+0x1fe>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a47      	ldr	r2, [pc, #284]	@ (8001018 <HAL_GPIO_Init+0x2f8>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d00d      	beq.n	8000f1a <HAL_GPIO_Init+0x1fa>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a46      	ldr	r2, [pc, #280]	@ (800101c <HAL_GPIO_Init+0x2fc>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d007      	beq.n	8000f16 <HAL_GPIO_Init+0x1f6>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a45      	ldr	r2, [pc, #276]	@ (8001020 <HAL_GPIO_Init+0x300>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d101      	bne.n	8000f12 <HAL_GPIO_Init+0x1f2>
 8000f0e:	2304      	movs	r3, #4
 8000f10:	e008      	b.n	8000f24 <HAL_GPIO_Init+0x204>
 8000f12:	2307      	movs	r3, #7
 8000f14:	e006      	b.n	8000f24 <HAL_GPIO_Init+0x204>
 8000f16:	2303      	movs	r3, #3
 8000f18:	e004      	b.n	8000f24 <HAL_GPIO_Init+0x204>
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	e002      	b.n	8000f24 <HAL_GPIO_Init+0x204>
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e000      	b.n	8000f24 <HAL_GPIO_Init+0x204>
 8000f22:	2300      	movs	r3, #0
 8000f24:	69fa      	ldr	r2, [r7, #28]
 8000f26:	f002 0203 	and.w	r2, r2, #3
 8000f2a:	0092      	lsls	r2, r2, #2
 8000f2c:	4093      	lsls	r3, r2
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f34:	4935      	ldr	r1, [pc, #212]	@ (800100c <HAL_GPIO_Init+0x2ec>)
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	089b      	lsrs	r3, r3, #2
 8000f3a:	3302      	adds	r3, #2
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f42:	4b38      	ldr	r3, [pc, #224]	@ (8001024 <HAL_GPIO_Init+0x304>)
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d003      	beq.n	8000f66 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f66:	4a2f      	ldr	r2, [pc, #188]	@ (8001024 <HAL_GPIO_Init+0x304>)
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f6c:	4b2d      	ldr	r3, [pc, #180]	@ (8001024 <HAL_GPIO_Init+0x304>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	43db      	mvns	r3, r3
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d003      	beq.n	8000f90 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f90:	4a24      	ldr	r2, [pc, #144]	@ (8001024 <HAL_GPIO_Init+0x304>)
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f96:	4b23      	ldr	r3, [pc, #140]	@ (8001024 <HAL_GPIO_Init+0x304>)
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d003      	beq.n	8000fba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fba:	4a1a      	ldr	r2, [pc, #104]	@ (8001024 <HAL_GPIO_Init+0x304>)
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fc0:	4b18      	ldr	r3, [pc, #96]	@ (8001024 <HAL_GPIO_Init+0x304>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d003      	beq.n	8000fe4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fe4:	4a0f      	ldr	r2, [pc, #60]	@ (8001024 <HAL_GPIO_Init+0x304>)
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	3301      	adds	r3, #1
 8000fee:	61fb      	str	r3, [r7, #28]
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	2b0f      	cmp	r3, #15
 8000ff4:	f67f aea2 	bls.w	8000d3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ff8:	bf00      	nop
 8000ffa:	bf00      	nop
 8000ffc:	3724      	adds	r7, #36	@ 0x24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	40023800 	.word	0x40023800
 800100c:	40013800 	.word	0x40013800
 8001010:	40020000 	.word	0x40020000
 8001014:	40020400 	.word	0x40020400
 8001018:	40020800 	.word	0x40020800
 800101c:	40020c00 	.word	0x40020c00
 8001020:	40021000 	.word	0x40021000
 8001024:	40013c00 	.word	0x40013c00

08001028 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	460b      	mov	r3, r1
 8001032:	807b      	strh	r3, [r7, #2]
 8001034:	4613      	mov	r3, r2
 8001036:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001038:	787b      	ldrb	r3, [r7, #1]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d003      	beq.n	8001046 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800103e:	887a      	ldrh	r2, [r7, #2]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001044:	e003      	b.n	800104e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001046:	887b      	ldrh	r3, [r7, #2]
 8001048:	041a      	lsls	r2, r3, #16
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	619a      	str	r2, [r3, #24]
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800105a:	b480      	push	{r7}
 800105c:	b085      	sub	sp, #20
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
 8001062:	460b      	mov	r3, r1
 8001064:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800106c:	887a      	ldrh	r2, [r7, #2]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	4013      	ands	r3, r2
 8001072:	041a      	lsls	r2, r3, #16
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	43d9      	mvns	r1, r3
 8001078:	887b      	ldrh	r3, [r7, #2]
 800107a:	400b      	ands	r3, r1
 800107c:	431a      	orrs	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	619a      	str	r2, [r3, #24]
}
 8001082:	bf00      	nop
 8001084:	3714      	adds	r7, #20
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
	...

08001090 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d101      	bne.n	80010a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e12b      	b.n	80012fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d106      	bne.n	80010bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff fbcc 	bl	8000854 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2224      	movs	r2, #36	@ 0x24
 80010c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f022 0201 	bic.w	r2, r2, #1
 80010d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80010e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80010f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80010f4:	f002 fe72 	bl	8003ddc <HAL_RCC_GetPCLK1Freq>
 80010f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	4a81      	ldr	r2, [pc, #516]	@ (8001304 <HAL_I2C_Init+0x274>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d807      	bhi.n	8001114 <HAL_I2C_Init+0x84>
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	4a80      	ldr	r2, [pc, #512]	@ (8001308 <HAL_I2C_Init+0x278>)
 8001108:	4293      	cmp	r3, r2
 800110a:	bf94      	ite	ls
 800110c:	2301      	movls	r3, #1
 800110e:	2300      	movhi	r3, #0
 8001110:	b2db      	uxtb	r3, r3
 8001112:	e006      	b.n	8001122 <HAL_I2C_Init+0x92>
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4a7d      	ldr	r2, [pc, #500]	@ (800130c <HAL_I2C_Init+0x27c>)
 8001118:	4293      	cmp	r3, r2
 800111a:	bf94      	ite	ls
 800111c:	2301      	movls	r3, #1
 800111e:	2300      	movhi	r3, #0
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e0e7      	b.n	80012fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	4a78      	ldr	r2, [pc, #480]	@ (8001310 <HAL_I2C_Init+0x280>)
 800112e:	fba2 2303 	umull	r2, r3, r2, r3
 8001132:	0c9b      	lsrs	r3, r3, #18
 8001134:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	68ba      	ldr	r2, [r7, #8]
 8001146:	430a      	orrs	r2, r1
 8001148:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	6a1b      	ldr	r3, [r3, #32]
 8001150:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	4a6a      	ldr	r2, [pc, #424]	@ (8001304 <HAL_I2C_Init+0x274>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d802      	bhi.n	8001164 <HAL_I2C_Init+0xd4>
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	3301      	adds	r3, #1
 8001162:	e009      	b.n	8001178 <HAL_I2C_Init+0xe8>
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800116a:	fb02 f303 	mul.w	r3, r2, r3
 800116e:	4a69      	ldr	r2, [pc, #420]	@ (8001314 <HAL_I2C_Init+0x284>)
 8001170:	fba2 2303 	umull	r2, r3, r2, r3
 8001174:	099b      	lsrs	r3, r3, #6
 8001176:	3301      	adds	r3, #1
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	6812      	ldr	r2, [r2, #0]
 800117c:	430b      	orrs	r3, r1
 800117e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	69db      	ldr	r3, [r3, #28]
 8001186:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800118a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	495c      	ldr	r1, [pc, #368]	@ (8001304 <HAL_I2C_Init+0x274>)
 8001194:	428b      	cmp	r3, r1
 8001196:	d819      	bhi.n	80011cc <HAL_I2C_Init+0x13c>
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	1e59      	subs	r1, r3, #1
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80011a6:	1c59      	adds	r1, r3, #1
 80011a8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80011ac:	400b      	ands	r3, r1
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d00a      	beq.n	80011c8 <HAL_I2C_Init+0x138>
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	1e59      	subs	r1, r3, #1
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80011c0:	3301      	adds	r3, #1
 80011c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011c6:	e051      	b.n	800126c <HAL_I2C_Init+0x1dc>
 80011c8:	2304      	movs	r3, #4
 80011ca:	e04f      	b.n	800126c <HAL_I2C_Init+0x1dc>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d111      	bne.n	80011f8 <HAL_I2C_Init+0x168>
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	1e58      	subs	r0, r3, #1
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6859      	ldr	r1, [r3, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	440b      	add	r3, r1
 80011e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80011e6:	3301      	adds	r3, #1
 80011e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	bf0c      	ite	eq
 80011f0:	2301      	moveq	r3, #1
 80011f2:	2300      	movne	r3, #0
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	e012      	b.n	800121e <HAL_I2C_Init+0x18e>
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	1e58      	subs	r0, r3, #1
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6859      	ldr	r1, [r3, #4]
 8001200:	460b      	mov	r3, r1
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	440b      	add	r3, r1
 8001206:	0099      	lsls	r1, r3, #2
 8001208:	440b      	add	r3, r1
 800120a:	fbb0 f3f3 	udiv	r3, r0, r3
 800120e:	3301      	adds	r3, #1
 8001210:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001214:	2b00      	cmp	r3, #0
 8001216:	bf0c      	ite	eq
 8001218:	2301      	moveq	r3, #1
 800121a:	2300      	movne	r3, #0
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <HAL_I2C_Init+0x196>
 8001222:	2301      	movs	r3, #1
 8001224:	e022      	b.n	800126c <HAL_I2C_Init+0x1dc>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d10e      	bne.n	800124c <HAL_I2C_Init+0x1bc>
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	1e58      	subs	r0, r3, #1
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6859      	ldr	r1, [r3, #4]
 8001236:	460b      	mov	r3, r1
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	440b      	add	r3, r1
 800123c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001240:	3301      	adds	r3, #1
 8001242:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001246:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800124a:	e00f      	b.n	800126c <HAL_I2C_Init+0x1dc>
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	1e58      	subs	r0, r3, #1
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6859      	ldr	r1, [r3, #4]
 8001254:	460b      	mov	r3, r1
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	440b      	add	r3, r1
 800125a:	0099      	lsls	r1, r3, #2
 800125c:	440b      	add	r3, r1
 800125e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001262:	3301      	adds	r3, #1
 8001264:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001268:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800126c:	6879      	ldr	r1, [r7, #4]
 800126e:	6809      	ldr	r1, [r1, #0]
 8001270:	4313      	orrs	r3, r2
 8001272:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	69da      	ldr	r2, [r3, #28]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6a1b      	ldr	r3, [r3, #32]
 8001286:	431a      	orrs	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	430a      	orrs	r2, r1
 800128e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800129a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	6911      	ldr	r1, [r2, #16]
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	68d2      	ldr	r2, [r2, #12]
 80012a6:	4311      	orrs	r1, r2
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	6812      	ldr	r2, [r2, #0]
 80012ac:	430b      	orrs	r3, r1
 80012ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	695a      	ldr	r2, [r3, #20]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	431a      	orrs	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	430a      	orrs	r2, r1
 80012ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f042 0201 	orr.w	r2, r2, #1
 80012da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2220      	movs	r2, #32
 80012e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	000186a0 	.word	0x000186a0
 8001308:	001e847f 	.word	0x001e847f
 800130c:	003d08ff 	.word	0x003d08ff
 8001310:	431bde83 	.word	0x431bde83
 8001314:	10624dd3 	.word	0x10624dd3

08001318 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b088      	sub	sp, #32
 800131c:	af02      	add	r7, sp, #8
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	4608      	mov	r0, r1
 8001322:	4611      	mov	r1, r2
 8001324:	461a      	mov	r2, r3
 8001326:	4603      	mov	r3, r0
 8001328:	817b      	strh	r3, [r7, #10]
 800132a:	460b      	mov	r3, r1
 800132c:	813b      	strh	r3, [r7, #8]
 800132e:	4613      	mov	r3, r2
 8001330:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001332:	f7ff fbb3 	bl	8000a9c <HAL_GetTick>
 8001336:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800133e:	b2db      	uxtb	r3, r3
 8001340:	2b20      	cmp	r3, #32
 8001342:	f040 80d9 	bne.w	80014f8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	2319      	movs	r3, #25
 800134c:	2201      	movs	r2, #1
 800134e:	496d      	ldr	r1, [pc, #436]	@ (8001504 <HAL_I2C_Mem_Write+0x1ec>)
 8001350:	68f8      	ldr	r0, [r7, #12]
 8001352:	f000 fc8b 	bl	8001c6c <I2C_WaitOnFlagUntilTimeout>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800135c:	2302      	movs	r3, #2
 800135e:	e0cc      	b.n	80014fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001366:	2b01      	cmp	r3, #1
 8001368:	d101      	bne.n	800136e <HAL_I2C_Mem_Write+0x56>
 800136a:	2302      	movs	r3, #2
 800136c:	e0c5      	b.n	80014fa <HAL_I2C_Mem_Write+0x1e2>
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	2201      	movs	r2, #1
 8001372:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	2b01      	cmp	r3, #1
 8001382:	d007      	beq.n	8001394 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f042 0201 	orr.w	r2, r2, #1
 8001392:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80013a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2221      	movs	r2, #33	@ 0x21
 80013a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2240      	movs	r2, #64	@ 0x40
 80013b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2200      	movs	r2, #0
 80013b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	6a3a      	ldr	r2, [r7, #32]
 80013be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	4a4d      	ldr	r2, [pc, #308]	@ (8001508 <HAL_I2C_Mem_Write+0x1f0>)
 80013d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80013d6:	88f8      	ldrh	r0, [r7, #6]
 80013d8:	893a      	ldrh	r2, [r7, #8]
 80013da:	8979      	ldrh	r1, [r7, #10]
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	9301      	str	r3, [sp, #4]
 80013e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	4603      	mov	r3, r0
 80013e6:	68f8      	ldr	r0, [r7, #12]
 80013e8:	f000 fac2 	bl	8001970 <I2C_RequestMemoryWrite>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d052      	beq.n	8001498 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e081      	b.n	80014fa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013f6:	697a      	ldr	r2, [r7, #20]
 80013f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80013fa:	68f8      	ldr	r0, [r7, #12]
 80013fc:	f000 fd50 	bl	8001ea0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d00d      	beq.n	8001422 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140a:	2b04      	cmp	r3, #4
 800140c:	d107      	bne.n	800141e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800141c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e06b      	b.n	80014fa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001426:	781a      	ldrb	r2, [r3, #0]
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001432:	1c5a      	adds	r2, r3, #1
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800143c:	3b01      	subs	r3, #1
 800143e:	b29a      	uxth	r2, r3
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001448:	b29b      	uxth	r3, r3
 800144a:	3b01      	subs	r3, #1
 800144c:	b29a      	uxth	r2, r3
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	695b      	ldr	r3, [r3, #20]
 8001458:	f003 0304 	and.w	r3, r3, #4
 800145c:	2b04      	cmp	r3, #4
 800145e:	d11b      	bne.n	8001498 <HAL_I2C_Mem_Write+0x180>
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001464:	2b00      	cmp	r3, #0
 8001466:	d017      	beq.n	8001498 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800146c:	781a      	ldrb	r2, [r3, #0]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001478:	1c5a      	adds	r2, r3, #1
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001482:	3b01      	subs	r3, #1
 8001484:	b29a      	uxth	r2, r3
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800148e:	b29b      	uxth	r3, r3
 8001490:	3b01      	subs	r3, #1
 8001492:	b29a      	uxth	r2, r3
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800149c:	2b00      	cmp	r3, #0
 800149e:	d1aa      	bne.n	80013f6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014a0:	697a      	ldr	r2, [r7, #20]
 80014a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80014a4:	68f8      	ldr	r0, [r7, #12]
 80014a6:	f000 fd43 	bl	8001f30 <I2C_WaitOnBTFFlagUntilTimeout>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d00d      	beq.n	80014cc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b4:	2b04      	cmp	r3, #4
 80014b6:	d107      	bne.n	80014c8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80014c6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e016      	b.n	80014fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80014da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2220      	movs	r2, #32
 80014e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	2200      	movs	r2, #0
 80014e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2200      	movs	r2, #0
 80014f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80014f4:	2300      	movs	r3, #0
 80014f6:	e000      	b.n	80014fa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80014f8:	2302      	movs	r3, #2
  }
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3718      	adds	r7, #24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	00100002 	.word	0x00100002
 8001508:	ffff0000 	.word	0xffff0000

0800150c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08c      	sub	sp, #48	@ 0x30
 8001510:	af02      	add	r7, sp, #8
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	4608      	mov	r0, r1
 8001516:	4611      	mov	r1, r2
 8001518:	461a      	mov	r2, r3
 800151a:	4603      	mov	r3, r0
 800151c:	817b      	strh	r3, [r7, #10]
 800151e:	460b      	mov	r3, r1
 8001520:	813b      	strh	r3, [r7, #8]
 8001522:	4613      	mov	r3, r2
 8001524:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001526:	f7ff fab9 	bl	8000a9c <HAL_GetTick>
 800152a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001532:	b2db      	uxtb	r3, r3
 8001534:	2b20      	cmp	r3, #32
 8001536:	f040 8214 	bne.w	8001962 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800153a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	2319      	movs	r3, #25
 8001540:	2201      	movs	r2, #1
 8001542:	497b      	ldr	r1, [pc, #492]	@ (8001730 <HAL_I2C_Mem_Read+0x224>)
 8001544:	68f8      	ldr	r0, [r7, #12]
 8001546:	f000 fb91 	bl	8001c6c <I2C_WaitOnFlagUntilTimeout>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001550:	2302      	movs	r3, #2
 8001552:	e207      	b.n	8001964 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800155a:	2b01      	cmp	r3, #1
 800155c:	d101      	bne.n	8001562 <HAL_I2C_Mem_Read+0x56>
 800155e:	2302      	movs	r3, #2
 8001560:	e200      	b.n	8001964 <HAL_I2C_Mem_Read+0x458>
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2201      	movs	r2, #1
 8001566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	2b01      	cmp	r3, #1
 8001576:	d007      	beq.n	8001588 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f042 0201 	orr.w	r2, r2, #1
 8001586:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001596:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2222      	movs	r2, #34	@ 0x22
 800159c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2240      	movs	r2, #64	@ 0x40
 80015a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	2200      	movs	r2, #0
 80015ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80015b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80015b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015be:	b29a      	uxth	r2, r3
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	4a5b      	ldr	r2, [pc, #364]	@ (8001734 <HAL_I2C_Mem_Read+0x228>)
 80015c8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80015ca:	88f8      	ldrh	r0, [r7, #6]
 80015cc:	893a      	ldrh	r2, [r7, #8]
 80015ce:	8979      	ldrh	r1, [r7, #10]
 80015d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d2:	9301      	str	r3, [sp, #4]
 80015d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015d6:	9300      	str	r3, [sp, #0]
 80015d8:	4603      	mov	r3, r0
 80015da:	68f8      	ldr	r0, [r7, #12]
 80015dc:	f000 fa5e 	bl	8001a9c <I2C_RequestMemoryRead>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e1bc      	b.n	8001964 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d113      	bne.n	800161a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015f2:	2300      	movs	r3, #0
 80015f4:	623b      	str	r3, [r7, #32]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	695b      	ldr	r3, [r3, #20]
 80015fc:	623b      	str	r3, [r7, #32]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	623b      	str	r3, [r7, #32]
 8001606:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	e190      	b.n	800193c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800161e:	2b01      	cmp	r3, #1
 8001620:	d11b      	bne.n	800165a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001630:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001632:	2300      	movs	r3, #0
 8001634:	61fb      	str	r3, [r7, #28]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	695b      	ldr	r3, [r3, #20]
 800163c:	61fb      	str	r3, [r7, #28]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	61fb      	str	r3, [r7, #28]
 8001646:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	e170      	b.n	800193c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800165e:	2b02      	cmp	r3, #2
 8001660:	d11b      	bne.n	800169a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001670:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001680:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001682:	2300      	movs	r3, #0
 8001684:	61bb      	str	r3, [r7, #24]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	695b      	ldr	r3, [r3, #20]
 800168c:	61bb      	str	r3, [r7, #24]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	61bb      	str	r3, [r7, #24]
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	e150      	b.n	800193c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	695b      	ldr	r3, [r3, #20]
 80016a4:	617b      	str	r3, [r7, #20]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	617b      	str	r3, [r7, #20]
 80016ae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80016b0:	e144      	b.n	800193c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016b6:	2b03      	cmp	r3, #3
 80016b8:	f200 80f1 	bhi.w	800189e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d123      	bne.n	800170c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016c6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80016c8:	68f8      	ldr	r0, [r7, #12]
 80016ca:	f000 fc79 	bl	8001fc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e145      	b.n	8001964 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	691a      	ldr	r2, [r3, #16]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016e2:	b2d2      	uxtb	r2, r2
 80016e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ea:	1c5a      	adds	r2, r3, #1
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016f4:	3b01      	subs	r3, #1
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001700:	b29b      	uxth	r3, r3
 8001702:	3b01      	subs	r3, #1
 8001704:	b29a      	uxth	r2, r3
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800170a:	e117      	b.n	800193c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001710:	2b02      	cmp	r3, #2
 8001712:	d14e      	bne.n	80017b2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800171a:	2200      	movs	r2, #0
 800171c:	4906      	ldr	r1, [pc, #24]	@ (8001738 <HAL_I2C_Mem_Read+0x22c>)
 800171e:	68f8      	ldr	r0, [r7, #12]
 8001720:	f000 faa4 	bl	8001c6c <I2C_WaitOnFlagUntilTimeout>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d008      	beq.n	800173c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e11a      	b.n	8001964 <HAL_I2C_Mem_Read+0x458>
 800172e:	bf00      	nop
 8001730:	00100002 	.word	0x00100002
 8001734:	ffff0000 	.word	0xffff0000
 8001738:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800174a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	691a      	ldr	r2, [r3, #16]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001756:	b2d2      	uxtb	r2, r2
 8001758:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800175e:	1c5a      	adds	r2, r3, #1
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001768:	3b01      	subs	r3, #1
 800176a:	b29a      	uxth	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001774:	b29b      	uxth	r3, r3
 8001776:	3b01      	subs	r3, #1
 8001778:	b29a      	uxth	r2, r3
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	691a      	ldr	r2, [r3, #16]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001788:	b2d2      	uxtb	r2, r2
 800178a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001790:	1c5a      	adds	r2, r3, #1
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800179a:	3b01      	subs	r3, #1
 800179c:	b29a      	uxth	r2, r3
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	3b01      	subs	r3, #1
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80017b0:	e0c4      	b.n	800193c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80017b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017b8:	2200      	movs	r2, #0
 80017ba:	496c      	ldr	r1, [pc, #432]	@ (800196c <HAL_I2C_Mem_Read+0x460>)
 80017bc:	68f8      	ldr	r0, [r7, #12]
 80017be:	f000 fa55 	bl	8001c6c <I2C_WaitOnFlagUntilTimeout>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e0cb      	b.n	8001964 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80017da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	691a      	ldr	r2, [r3, #16]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e6:	b2d2      	uxtb	r2, r2
 80017e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ee:	1c5a      	adds	r2, r3, #1
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017f8:	3b01      	subs	r3, #1
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001804:	b29b      	uxth	r3, r3
 8001806:	3b01      	subs	r3, #1
 8001808:	b29a      	uxth	r2, r3
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800180e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001814:	2200      	movs	r2, #0
 8001816:	4955      	ldr	r1, [pc, #340]	@ (800196c <HAL_I2C_Mem_Read+0x460>)
 8001818:	68f8      	ldr	r0, [r7, #12]
 800181a:	f000 fa27 	bl	8001c6c <I2C_WaitOnFlagUntilTimeout>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e09d      	b.n	8001964 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001836:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	691a      	ldr	r2, [r3, #16]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800184a:	1c5a      	adds	r2, r3, #1
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001854:	3b01      	subs	r3, #1
 8001856:	b29a      	uxth	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001860:	b29b      	uxth	r3, r3
 8001862:	3b01      	subs	r3, #1
 8001864:	b29a      	uxth	r2, r3
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	691a      	ldr	r2, [r3, #16]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001874:	b2d2      	uxtb	r2, r2
 8001876:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187c:	1c5a      	adds	r2, r3, #1
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001886:	3b01      	subs	r3, #1
 8001888:	b29a      	uxth	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001892:	b29b      	uxth	r3, r3
 8001894:	3b01      	subs	r3, #1
 8001896:	b29a      	uxth	r2, r3
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800189c:	e04e      	b.n	800193c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800189e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018a0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80018a2:	68f8      	ldr	r0, [r7, #12]
 80018a4:	f000 fb8c 	bl	8001fc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e058      	b.n	8001964 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	691a      	ldr	r2, [r3, #16]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018bc:	b2d2      	uxtb	r2, r2
 80018be:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c4:	1c5a      	adds	r2, r3, #1
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018ce:	3b01      	subs	r3, #1
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018da:	b29b      	uxth	r3, r3
 80018dc:	3b01      	subs	r3, #1
 80018de:	b29a      	uxth	r2, r3
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	f003 0304 	and.w	r3, r3, #4
 80018ee:	2b04      	cmp	r3, #4
 80018f0:	d124      	bne.n	800193c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018f6:	2b03      	cmp	r3, #3
 80018f8:	d107      	bne.n	800190a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001908:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	691a      	ldr	r2, [r3, #16]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001914:	b2d2      	uxtb	r2, r2
 8001916:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800191c:	1c5a      	adds	r2, r3, #1
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001926:	3b01      	subs	r3, #1
 8001928:	b29a      	uxth	r2, r3
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001932:	b29b      	uxth	r3, r3
 8001934:	3b01      	subs	r3, #1
 8001936:	b29a      	uxth	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001940:	2b00      	cmp	r3, #0
 8001942:	f47f aeb6 	bne.w	80016b2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2220      	movs	r2, #32
 800194a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800195e:	2300      	movs	r3, #0
 8001960:	e000      	b.n	8001964 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001962:	2302      	movs	r3, #2
  }
}
 8001964:	4618      	mov	r0, r3
 8001966:	3728      	adds	r7, #40	@ 0x28
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	00010004 	.word	0x00010004

08001970 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b088      	sub	sp, #32
 8001974:	af02      	add	r7, sp, #8
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	4608      	mov	r0, r1
 800197a:	4611      	mov	r1, r2
 800197c:	461a      	mov	r2, r3
 800197e:	4603      	mov	r3, r0
 8001980:	817b      	strh	r3, [r7, #10]
 8001982:	460b      	mov	r3, r1
 8001984:	813b      	strh	r3, [r7, #8]
 8001986:	4613      	mov	r3, r2
 8001988:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001998:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800199a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	6a3b      	ldr	r3, [r7, #32]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80019a6:	68f8      	ldr	r0, [r7, #12]
 80019a8:	f000 f960 	bl	8001c6c <I2C_WaitOnFlagUntilTimeout>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d00d      	beq.n	80019ce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80019c0:	d103      	bne.n	80019ca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019c8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e05f      	b.n	8001a8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80019ce:	897b      	ldrh	r3, [r7, #10]
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	461a      	mov	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80019dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e0:	6a3a      	ldr	r2, [r7, #32]
 80019e2:	492d      	ldr	r1, [pc, #180]	@ (8001a98 <I2C_RequestMemoryWrite+0x128>)
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f000 f9bb 	bl	8001d60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e04c      	b.n	8001a8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	617b      	str	r3, [r7, #20]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	617b      	str	r3, [r7, #20]
 8001a08:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a0c:	6a39      	ldr	r1, [r7, #32]
 8001a0e:	68f8      	ldr	r0, [r7, #12]
 8001a10:	f000 fa46 	bl	8001ea0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00d      	beq.n	8001a36 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1e:	2b04      	cmp	r3, #4
 8001a20:	d107      	bne.n	8001a32 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a30:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e02b      	b.n	8001a8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a36:	88fb      	ldrh	r3, [r7, #6]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d105      	bne.n	8001a48 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001a3c:	893b      	ldrh	r3, [r7, #8]
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	611a      	str	r2, [r3, #16]
 8001a46:	e021      	b.n	8001a8c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001a48:	893b      	ldrh	r3, [r7, #8]
 8001a4a:	0a1b      	lsrs	r3, r3, #8
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a58:	6a39      	ldr	r1, [r7, #32]
 8001a5a:	68f8      	ldr	r0, [r7, #12]
 8001a5c:	f000 fa20 	bl	8001ea0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d00d      	beq.n	8001a82 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6a:	2b04      	cmp	r3, #4
 8001a6c:	d107      	bne.n	8001a7e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a7c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e005      	b.n	8001a8e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001a82:	893b      	ldrh	r3, [r7, #8]
 8001a84:	b2da      	uxtb	r2, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	00010002 	.word	0x00010002

08001a9c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b088      	sub	sp, #32
 8001aa0:	af02      	add	r7, sp, #8
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	4608      	mov	r0, r1
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4603      	mov	r3, r0
 8001aac:	817b      	strh	r3, [r7, #10]
 8001aae:	460b      	mov	r3, r1
 8001ab0:	813b      	strh	r3, [r7, #8]
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001ac4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ad4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	6a3b      	ldr	r3, [r7, #32]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001ae2:	68f8      	ldr	r0, [r7, #12]
 8001ae4:	f000 f8c2 	bl	8001c6c <I2C_WaitOnFlagUntilTimeout>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d00d      	beq.n	8001b0a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001af8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001afc:	d103      	bne.n	8001b06 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b04:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e0aa      	b.n	8001c60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b0a:	897b      	ldrh	r3, [r7, #10]
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	461a      	mov	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001b18:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1c:	6a3a      	ldr	r2, [r7, #32]
 8001b1e:	4952      	ldr	r1, [pc, #328]	@ (8001c68 <I2C_RequestMemoryRead+0x1cc>)
 8001b20:	68f8      	ldr	r0, [r7, #12]
 8001b22:	f000 f91d 	bl	8001d60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e097      	b.n	8001c60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	617b      	str	r3, [r7, #20]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	617b      	str	r3, [r7, #20]
 8001b44:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b48:	6a39      	ldr	r1, [r7, #32]
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f000 f9a8 	bl	8001ea0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d00d      	beq.n	8001b72 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5a:	2b04      	cmp	r3, #4
 8001b5c:	d107      	bne.n	8001b6e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b6c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e076      	b.n	8001c60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b72:	88fb      	ldrh	r3, [r7, #6]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d105      	bne.n	8001b84 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001b78:	893b      	ldrh	r3, [r7, #8]
 8001b7a:	b2da      	uxtb	r2, r3
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	611a      	str	r2, [r3, #16]
 8001b82:	e021      	b.n	8001bc8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001b84:	893b      	ldrh	r3, [r7, #8]
 8001b86:	0a1b      	lsrs	r3, r3, #8
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b94:	6a39      	ldr	r1, [r7, #32]
 8001b96:	68f8      	ldr	r0, [r7, #12]
 8001b98:	f000 f982 	bl	8001ea0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00d      	beq.n	8001bbe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	d107      	bne.n	8001bba <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bb8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e050      	b.n	8001c60 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001bbe:	893b      	ldrh	r3, [r7, #8]
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bca:	6a39      	ldr	r1, [r7, #32]
 8001bcc:	68f8      	ldr	r0, [r7, #12]
 8001bce:	f000 f967 	bl	8001ea0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d00d      	beq.n	8001bf4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bdc:	2b04      	cmp	r3, #4
 8001bde:	d107      	bne.n	8001bf0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e035      	b.n	8001c60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c02:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c06:	9300      	str	r3, [sp, #0]
 8001c08:	6a3b      	ldr	r3, [r7, #32]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001c10:	68f8      	ldr	r0, [r7, #12]
 8001c12:	f000 f82b 	bl	8001c6c <I2C_WaitOnFlagUntilTimeout>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d00d      	beq.n	8001c38 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c2a:	d103      	bne.n	8001c34 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c32:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e013      	b.n	8001c60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001c38:	897b      	ldrh	r3, [r7, #10]
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c4a:	6a3a      	ldr	r2, [r7, #32]
 8001c4c:	4906      	ldr	r1, [pc, #24]	@ (8001c68 <I2C_RequestMemoryRead+0x1cc>)
 8001c4e:	68f8      	ldr	r0, [r7, #12]
 8001c50:	f000 f886 	bl	8001d60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e000      	b.n	8001c60 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	00010002 	.word	0x00010002

08001c6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	603b      	str	r3, [r7, #0]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c7c:	e048      	b.n	8001d10 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c84:	d044      	beq.n	8001d10 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c86:	f7fe ff09 	bl	8000a9c <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d302      	bcc.n	8001c9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d139      	bne.n	8001d10 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	0c1b      	lsrs	r3, r3, #16
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d10d      	bne.n	8001cc2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	695b      	ldr	r3, [r3, #20]
 8001cac:	43da      	mvns	r2, r3
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	bf0c      	ite	eq
 8001cb8:	2301      	moveq	r3, #1
 8001cba:	2300      	movne	r3, #0
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	e00c      	b.n	8001cdc <I2C_WaitOnFlagUntilTimeout+0x70>
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	43da      	mvns	r2, r3
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	bf0c      	ite	eq
 8001cd4:	2301      	moveq	r3, #1
 8001cd6:	2300      	movne	r3, #0
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	461a      	mov	r2, r3
 8001cdc:	79fb      	ldrb	r3, [r7, #7]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d116      	bne.n	8001d10 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2220      	movs	r2, #32
 8001cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfc:	f043 0220 	orr.w	r2, r3, #32
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e023      	b.n	8001d58 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	0c1b      	lsrs	r3, r3, #16
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d10d      	bne.n	8001d36 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	695b      	ldr	r3, [r3, #20]
 8001d20:	43da      	mvns	r2, r3
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	4013      	ands	r3, r2
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	bf0c      	ite	eq
 8001d2c:	2301      	moveq	r3, #1
 8001d2e:	2300      	movne	r3, #0
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	461a      	mov	r2, r3
 8001d34:	e00c      	b.n	8001d50 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	43da      	mvns	r2, r3
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	4013      	ands	r3, r2
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	bf0c      	ite	eq
 8001d48:	2301      	moveq	r3, #1
 8001d4a:	2300      	movne	r3, #0
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	461a      	mov	r2, r3
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d093      	beq.n	8001c7e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3710      	adds	r7, #16
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
 8001d6c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d6e:	e071      	b.n	8001e54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d7e:	d123      	bne.n	8001dc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d8e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001d98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2220      	movs	r2, #32
 8001da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db4:	f043 0204 	orr.w	r2, r3, #4
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e067      	b.n	8001e98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dce:	d041      	beq.n	8001e54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dd0:	f7fe fe64 	bl	8000a9c <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d302      	bcc.n	8001de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d136      	bne.n	8001e54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	0c1b      	lsrs	r3, r3, #16
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d10c      	bne.n	8001e0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	43da      	mvns	r2, r3
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	bf14      	ite	ne
 8001e02:	2301      	movne	r3, #1
 8001e04:	2300      	moveq	r3, #0
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	e00b      	b.n	8001e22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	43da      	mvns	r2, r3
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	4013      	ands	r3, r2
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	bf14      	ite	ne
 8001e1c:	2301      	movne	r3, #1
 8001e1e:	2300      	moveq	r3, #0
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d016      	beq.n	8001e54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2220      	movs	r2, #32
 8001e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e40:	f043 0220 	orr.w	r2, r3, #32
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e021      	b.n	8001e98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	0c1b      	lsrs	r3, r3, #16
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d10c      	bne.n	8001e78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	695b      	ldr	r3, [r3, #20]
 8001e64:	43da      	mvns	r2, r3
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	bf14      	ite	ne
 8001e70:	2301      	movne	r3, #1
 8001e72:	2300      	moveq	r3, #0
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	e00b      	b.n	8001e90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	43da      	mvns	r2, r3
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	4013      	ands	r3, r2
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	bf14      	ite	ne
 8001e8a:	2301      	movne	r3, #1
 8001e8c:	2300      	moveq	r3, #0
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f47f af6d 	bne.w	8001d70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3710      	adds	r7, #16
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001eac:	e034      	b.n	8001f18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f000 f8e3 	bl	800207a <I2C_IsAcknowledgeFailed>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e034      	b.n	8001f28 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec4:	d028      	beq.n	8001f18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ec6:	f7fe fde9 	bl	8000a9c <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	68ba      	ldr	r2, [r7, #8]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d302      	bcc.n	8001edc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d11d      	bne.n	8001f18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ee6:	2b80      	cmp	r3, #128	@ 0x80
 8001ee8:	d016      	beq.n	8001f18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2200      	movs	r2, #0
 8001eee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2220      	movs	r2, #32
 8001ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f04:	f043 0220 	orr.w	r2, r3, #32
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e007      	b.n	8001f28 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f22:	2b80      	cmp	r3, #128	@ 0x80
 8001f24:	d1c3      	bne.n	8001eae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f3c:	e034      	b.n	8001fa8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f3e:	68f8      	ldr	r0, [r7, #12]
 8001f40:	f000 f89b 	bl	800207a <I2C_IsAcknowledgeFailed>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e034      	b.n	8001fb8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f54:	d028      	beq.n	8001fa8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f56:	f7fe fda1 	bl	8000a9c <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	68ba      	ldr	r2, [r7, #8]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d302      	bcc.n	8001f6c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d11d      	bne.n	8001fa8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	f003 0304 	and.w	r3, r3, #4
 8001f76:	2b04      	cmp	r3, #4
 8001f78:	d016      	beq.n	8001fa8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2220      	movs	r2, #32
 8001f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f94:	f043 0220 	orr.w	r2, r3, #32
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e007      	b.n	8001fb8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	f003 0304 	and.w	r3, r3, #4
 8001fb2:	2b04      	cmp	r3, #4
 8001fb4:	d1c3      	bne.n	8001f3e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3710      	adds	r7, #16
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001fcc:	e049      	b.n	8002062 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	695b      	ldr	r3, [r3, #20]
 8001fd4:	f003 0310 	and.w	r3, r3, #16
 8001fd8:	2b10      	cmp	r3, #16
 8001fda:	d119      	bne.n	8002010 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f06f 0210 	mvn.w	r2, #16
 8001fe4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2220      	movs	r2, #32
 8001ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e030      	b.n	8002072 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002010:	f7fe fd44 	bl	8000a9c <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	68ba      	ldr	r2, [r7, #8]
 800201c:	429a      	cmp	r2, r3
 800201e:	d302      	bcc.n	8002026 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d11d      	bne.n	8002062 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	695b      	ldr	r3, [r3, #20]
 800202c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002030:	2b40      	cmp	r3, #64	@ 0x40
 8002032:	d016      	beq.n	8002062 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2200      	movs	r2, #0
 8002038:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2220      	movs	r2, #32
 800203e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204e:	f043 0220 	orr.w	r2, r3, #32
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e007      	b.n	8002072 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	695b      	ldr	r3, [r3, #20]
 8002068:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800206c:	2b40      	cmp	r3, #64	@ 0x40
 800206e:	d1ae      	bne.n	8001fce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	695b      	ldr	r3, [r3, #20]
 8002088:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800208c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002090:	d11b      	bne.n	80020ca <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800209a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2220      	movs	r2, #32
 80020a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b6:	f043 0204 	orr.w	r2, r3, #4
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e000      	b.n	80020cc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af02      	add	r7, sp, #8
 80020de:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e101      	b.n	80022ee <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d106      	bne.n	800210a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f005 fb9d 	bl	8007844 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2203      	movs	r2, #3
 800210e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002118:	d102      	bne.n	8002120 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f001 ff84 	bl	8004032 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6818      	ldr	r0, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	7c1a      	ldrb	r2, [r3, #16]
 8002132:	f88d 2000 	strb.w	r2, [sp]
 8002136:	3304      	adds	r3, #4
 8002138:	cb0e      	ldmia	r3, {r1, r2, r3}
 800213a:	f001 fe63 	bl	8003e04 <USB_CoreInit>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d005      	beq.n	8002150 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2202      	movs	r2, #2
 8002148:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e0ce      	b.n	80022ee <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2100      	movs	r1, #0
 8002156:	4618      	mov	r0, r3
 8002158:	f001 ff7c 	bl	8004054 <USB_SetCurrentMode>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d005      	beq.n	800216e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2202      	movs	r2, #2
 8002166:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e0bf      	b.n	80022ee <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800216e:	2300      	movs	r3, #0
 8002170:	73fb      	strb	r3, [r7, #15]
 8002172:	e04a      	b.n	800220a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002174:	7bfa      	ldrb	r2, [r7, #15]
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	4613      	mov	r3, r2
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	4413      	add	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	440b      	add	r3, r1
 8002182:	3315      	adds	r3, #21
 8002184:	2201      	movs	r2, #1
 8002186:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002188:	7bfa      	ldrb	r2, [r7, #15]
 800218a:	6879      	ldr	r1, [r7, #4]
 800218c:	4613      	mov	r3, r2
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	4413      	add	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	440b      	add	r3, r1
 8002196:	3314      	adds	r3, #20
 8002198:	7bfa      	ldrb	r2, [r7, #15]
 800219a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800219c:	7bfa      	ldrb	r2, [r7, #15]
 800219e:	7bfb      	ldrb	r3, [r7, #15]
 80021a0:	b298      	uxth	r0, r3
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	4613      	mov	r3, r2
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	4413      	add	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	440b      	add	r3, r1
 80021ae:	332e      	adds	r3, #46	@ 0x2e
 80021b0:	4602      	mov	r2, r0
 80021b2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021b4:	7bfa      	ldrb	r2, [r7, #15]
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	4613      	mov	r3, r2
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	4413      	add	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	3318      	adds	r3, #24
 80021c4:	2200      	movs	r2, #0
 80021c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021c8:	7bfa      	ldrb	r2, [r7, #15]
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	4613      	mov	r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	4413      	add	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	440b      	add	r3, r1
 80021d6:	331c      	adds	r3, #28
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021dc:	7bfa      	ldrb	r2, [r7, #15]
 80021de:	6879      	ldr	r1, [r7, #4]
 80021e0:	4613      	mov	r3, r2
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	4413      	add	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	440b      	add	r3, r1
 80021ea:	3320      	adds	r3, #32
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021f0:	7bfa      	ldrb	r2, [r7, #15]
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	4613      	mov	r3, r2
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	4413      	add	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	440b      	add	r3, r1
 80021fe:	3324      	adds	r3, #36	@ 0x24
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002204:	7bfb      	ldrb	r3, [r7, #15]
 8002206:	3301      	adds	r3, #1
 8002208:	73fb      	strb	r3, [r7, #15]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	791b      	ldrb	r3, [r3, #4]
 800220e:	7bfa      	ldrb	r2, [r7, #15]
 8002210:	429a      	cmp	r2, r3
 8002212:	d3af      	bcc.n	8002174 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002214:	2300      	movs	r3, #0
 8002216:	73fb      	strb	r3, [r7, #15]
 8002218:	e044      	b.n	80022a4 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800221a:	7bfa      	ldrb	r2, [r7, #15]
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	4613      	mov	r3, r2
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	4413      	add	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	440b      	add	r3, r1
 8002228:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800222c:	2200      	movs	r2, #0
 800222e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002230:	7bfa      	ldrb	r2, [r7, #15]
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	4613      	mov	r3, r2
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	4413      	add	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	440b      	add	r3, r1
 800223e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002242:	7bfa      	ldrb	r2, [r7, #15]
 8002244:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002246:	7bfa      	ldrb	r2, [r7, #15]
 8002248:	6879      	ldr	r1, [r7, #4]
 800224a:	4613      	mov	r3, r2
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	4413      	add	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	440b      	add	r3, r1
 8002254:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002258:	2200      	movs	r2, #0
 800225a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800225c:	7bfa      	ldrb	r2, [r7, #15]
 800225e:	6879      	ldr	r1, [r7, #4]
 8002260:	4613      	mov	r3, r2
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	4413      	add	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	440b      	add	r3, r1
 800226a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800226e:	2200      	movs	r2, #0
 8002270:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002272:	7bfa      	ldrb	r2, [r7, #15]
 8002274:	6879      	ldr	r1, [r7, #4]
 8002276:	4613      	mov	r3, r2
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	4413      	add	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	440b      	add	r3, r1
 8002280:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002288:	7bfa      	ldrb	r2, [r7, #15]
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	4613      	mov	r3, r2
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	4413      	add	r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	440b      	add	r3, r1
 8002296:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800229e:	7bfb      	ldrb	r3, [r7, #15]
 80022a0:	3301      	adds	r3, #1
 80022a2:	73fb      	strb	r3, [r7, #15]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	791b      	ldrb	r3, [r3, #4]
 80022a8:	7bfa      	ldrb	r2, [r7, #15]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d3b5      	bcc.n	800221a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6818      	ldr	r0, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	7c1a      	ldrb	r2, [r3, #16]
 80022b6:	f88d 2000 	strb.w	r2, [sp]
 80022ba:	3304      	adds	r3, #4
 80022bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022be:	f001 ff15 	bl	80040ec <USB_DevInit>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d005      	beq.n	80022d4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2202      	movs	r2, #2
 80022cc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e00c      	b.n	80022ee <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f002 ff5f 	bl	80051aa <USB_DevDisconnect>

  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b084      	sub	sp, #16
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800230a:	2b01      	cmp	r3, #1
 800230c:	d101      	bne.n	8002312 <HAL_PCD_Start+0x1c>
 800230e:	2302      	movs	r3, #2
 8002310:	e022      	b.n	8002358 <HAL_PCD_Start+0x62>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002322:	2b00      	cmp	r3, #0
 8002324:	d009      	beq.n	800233a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800232a:	2b01      	cmp	r3, #1
 800232c:	d105      	bne.n	800233a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002332:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f001 fe66 	bl	8004010 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4618      	mov	r0, r3
 800234a:	f002 ff0d 	bl	8005168 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002360:	b590      	push	{r4, r7, lr}
 8002362:	b08d      	sub	sp, #52	@ 0x34
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800236e:	6a3b      	ldr	r3, [r7, #32]
 8002370:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f002 ffcb 	bl	8005312 <USB_GetMode>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	f040 848c 	bne.w	8002c9c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4618      	mov	r0, r3
 800238a:	f002 ff2f 	bl	80051ec <USB_ReadInterrupts>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	f000 8482 	beq.w	8002c9a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	0a1b      	lsrs	r3, r3, #8
 80023a0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f002 ff1c 	bl	80051ec <USB_ReadInterrupts>
 80023b4:	4603      	mov	r3, r0
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d107      	bne.n	80023ce <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	695a      	ldr	r2, [r3, #20]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f002 0202 	and.w	r2, r2, #2
 80023cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f002 ff0a 	bl	80051ec <USB_ReadInterrupts>
 80023d8:	4603      	mov	r3, r0
 80023da:	f003 0310 	and.w	r3, r3, #16
 80023de:	2b10      	cmp	r3, #16
 80023e0:	d161      	bne.n	80024a6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	699a      	ldr	r2, [r3, #24]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f022 0210 	bic.w	r2, r2, #16
 80023f0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80023f2:	6a3b      	ldr	r3, [r7, #32]
 80023f4:	6a1b      	ldr	r3, [r3, #32]
 80023f6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	f003 020f 	and.w	r2, r3, #15
 80023fe:	4613      	mov	r3, r2
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	4413      	add	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	4413      	add	r3, r2
 800240e:	3304      	adds	r3, #4
 8002410:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	0c5b      	lsrs	r3, r3, #17
 8002416:	f003 030f 	and.w	r3, r3, #15
 800241a:	2b02      	cmp	r3, #2
 800241c:	d124      	bne.n	8002468 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002424:	4013      	ands	r3, r2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d035      	beq.n	8002496 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	091b      	lsrs	r3, r3, #4
 8002432:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002434:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002438:	b29b      	uxth	r3, r3
 800243a:	461a      	mov	r2, r3
 800243c:	6a38      	ldr	r0, [r7, #32]
 800243e:	f002 fd41 	bl	8004ec4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	68da      	ldr	r2, [r3, #12]
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	091b      	lsrs	r3, r3, #4
 800244a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800244e:	441a      	add	r2, r3
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	695a      	ldr	r2, [r3, #20]
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	091b      	lsrs	r3, r3, #4
 800245c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002460:	441a      	add	r2, r3
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	615a      	str	r2, [r3, #20]
 8002466:	e016      	b.n	8002496 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	0c5b      	lsrs	r3, r3, #17
 800246c:	f003 030f 	and.w	r3, r3, #15
 8002470:	2b06      	cmp	r3, #6
 8002472:	d110      	bne.n	8002496 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800247a:	2208      	movs	r2, #8
 800247c:	4619      	mov	r1, r3
 800247e:	6a38      	ldr	r0, [r7, #32]
 8002480:	f002 fd20 	bl	8004ec4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	695a      	ldr	r2, [r3, #20]
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	091b      	lsrs	r3, r3, #4
 800248c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002490:	441a      	add	r2, r3
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	699a      	ldr	r2, [r3, #24]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f042 0210 	orr.w	r2, r2, #16
 80024a4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f002 fe9e 	bl	80051ec <USB_ReadInterrupts>
 80024b0:	4603      	mov	r3, r0
 80024b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024b6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80024ba:	f040 80a7 	bne.w	800260c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80024be:	2300      	movs	r3, #0
 80024c0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f002 fea3 	bl	8005212 <USB_ReadDevAllOutEpInterrupt>
 80024cc:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80024ce:	e099      	b.n	8002604 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80024d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f000 808e 	beq.w	80025f8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024e2:	b2d2      	uxtb	r2, r2
 80024e4:	4611      	mov	r1, r2
 80024e6:	4618      	mov	r0, r3
 80024e8:	f002 fec7 	bl	800527a <USB_ReadDevOutEPInterrupt>
 80024ec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00c      	beq.n	8002512 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80024f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024fa:	015a      	lsls	r2, r3, #5
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	4413      	add	r3, r2
 8002500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002504:	461a      	mov	r2, r3
 8002506:	2301      	movs	r3, #1
 8002508:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800250a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 fea3 	bl	8003258 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	f003 0308 	and.w	r3, r3, #8
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00c      	beq.n	8002536 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800251c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251e:	015a      	lsls	r2, r3, #5
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	4413      	add	r3, r2
 8002524:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002528:	461a      	mov	r2, r3
 800252a:	2308      	movs	r3, #8
 800252c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800252e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 ff79 	bl	8003428 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	f003 0310 	and.w	r3, r3, #16
 800253c:	2b00      	cmp	r3, #0
 800253e:	d008      	beq.n	8002552 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002542:	015a      	lsls	r2, r3, #5
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	4413      	add	r3, r2
 8002548:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800254c:	461a      	mov	r2, r3
 800254e:	2310      	movs	r3, #16
 8002550:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d030      	beq.n	80025be <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800255c:	6a3b      	ldr	r3, [r7, #32]
 800255e:	695b      	ldr	r3, [r3, #20]
 8002560:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002564:	2b80      	cmp	r3, #128	@ 0x80
 8002566:	d109      	bne.n	800257c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	69fa      	ldr	r2, [r7, #28]
 8002572:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002576:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800257a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800257c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800257e:	4613      	mov	r3, r2
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	4413      	add	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	4413      	add	r3, r2
 800258e:	3304      	adds	r3, #4
 8002590:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	78db      	ldrb	r3, [r3, #3]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d108      	bne.n	80025ac <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	2200      	movs	r2, #0
 800259e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80025a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	4619      	mov	r1, r3
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f005 fa48 	bl	8007a3c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80025ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ae:	015a      	lsls	r2, r3, #5
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	4413      	add	r3, r2
 80025b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025b8:	461a      	mov	r2, r3
 80025ba:	2302      	movs	r3, #2
 80025bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	f003 0320 	and.w	r3, r3, #32
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d008      	beq.n	80025da <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80025c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ca:	015a      	lsls	r2, r3, #5
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	4413      	add	r3, r2
 80025d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025d4:	461a      	mov	r2, r3
 80025d6:	2320      	movs	r3, #32
 80025d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d009      	beq.n	80025f8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80025e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e6:	015a      	lsls	r2, r3, #5
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	4413      	add	r3, r2
 80025ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025f0:	461a      	mov	r2, r3
 80025f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80025f6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80025f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fa:	3301      	adds	r3, #1
 80025fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80025fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002600:	085b      	lsrs	r3, r3, #1
 8002602:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002606:	2b00      	cmp	r3, #0
 8002608:	f47f af62 	bne.w	80024d0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4618      	mov	r0, r3
 8002612:	f002 fdeb 	bl	80051ec <USB_ReadInterrupts>
 8002616:	4603      	mov	r3, r0
 8002618:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800261c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002620:	f040 80db 	bne.w	80027da <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f002 fe0c 	bl	8005246 <USB_ReadDevAllInEpInterrupt>
 800262e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002630:	2300      	movs	r3, #0
 8002632:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002634:	e0cd      	b.n	80027d2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	2b00      	cmp	r3, #0
 800263e:	f000 80c2 	beq.w	80027c6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002648:	b2d2      	uxtb	r2, r2
 800264a:	4611      	mov	r1, r2
 800264c:	4618      	mov	r0, r3
 800264e:	f002 fe32 	bl	80052b6 <USB_ReadDevInEPInterrupt>
 8002652:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b00      	cmp	r3, #0
 800265c:	d057      	beq.n	800270e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800265e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002660:	f003 030f 	and.w	r3, r3, #15
 8002664:	2201      	movs	r2, #1
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002672:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	43db      	mvns	r3, r3
 8002678:	69f9      	ldr	r1, [r7, #28]
 800267a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800267e:	4013      	ands	r3, r2
 8002680:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002684:	015a      	lsls	r2, r3, #5
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	4413      	add	r3, r2
 800268a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800268e:	461a      	mov	r2, r3
 8002690:	2301      	movs	r3, #1
 8002692:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	799b      	ldrb	r3, [r3, #6]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d132      	bne.n	8002702 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800269c:	6879      	ldr	r1, [r7, #4]
 800269e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026a0:	4613      	mov	r3, r2
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	4413      	add	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	440b      	add	r3, r1
 80026aa:	3320      	adds	r3, #32
 80026ac:	6819      	ldr	r1, [r3, #0]
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026b2:	4613      	mov	r3, r2
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	4413      	add	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	4403      	add	r3, r0
 80026bc:	331c      	adds	r3, #28
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4419      	add	r1, r3
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026c6:	4613      	mov	r3, r2
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	4413      	add	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	4403      	add	r3, r0
 80026d0:	3320      	adds	r3, #32
 80026d2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80026d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d113      	bne.n	8002702 <HAL_PCD_IRQHandler+0x3a2>
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026de:	4613      	mov	r3, r2
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	4413      	add	r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	440b      	add	r3, r1
 80026e8:	3324      	adds	r3, #36	@ 0x24
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d108      	bne.n	8002702 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6818      	ldr	r0, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80026fa:	461a      	mov	r2, r3
 80026fc:	2101      	movs	r1, #1
 80026fe:	f002 fe39 	bl	8005374 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002704:	b2db      	uxtb	r3, r3
 8002706:	4619      	mov	r1, r3
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f005 f91c 	bl	8007946 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	f003 0308 	and.w	r3, r3, #8
 8002714:	2b00      	cmp	r3, #0
 8002716:	d008      	beq.n	800272a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271a:	015a      	lsls	r2, r3, #5
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	4413      	add	r3, r2
 8002720:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002724:	461a      	mov	r2, r3
 8002726:	2308      	movs	r3, #8
 8002728:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	f003 0310 	and.w	r3, r3, #16
 8002730:	2b00      	cmp	r3, #0
 8002732:	d008      	beq.n	8002746 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002736:	015a      	lsls	r2, r3, #5
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	4413      	add	r3, r2
 800273c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002740:	461a      	mov	r2, r3
 8002742:	2310      	movs	r3, #16
 8002744:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800274c:	2b00      	cmp	r3, #0
 800274e:	d008      	beq.n	8002762 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002752:	015a      	lsls	r2, r3, #5
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	4413      	add	r3, r2
 8002758:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800275c:	461a      	mov	r2, r3
 800275e:	2340      	movs	r3, #64	@ 0x40
 8002760:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d023      	beq.n	80027b4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800276c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800276e:	6a38      	ldr	r0, [r7, #32]
 8002770:	f001 fe20 	bl	80043b4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002774:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002776:	4613      	mov	r3, r2
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	4413      	add	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	3310      	adds	r3, #16
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	4413      	add	r3, r2
 8002784:	3304      	adds	r3, #4
 8002786:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	78db      	ldrb	r3, [r3, #3]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d108      	bne.n	80027a2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	2200      	movs	r2, #0
 8002794:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002798:	b2db      	uxtb	r3, r3
 800279a:	4619      	mov	r1, r3
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f005 f95f 	bl	8007a60 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80027a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a4:	015a      	lsls	r2, r3, #5
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	4413      	add	r3, r2
 80027aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80027ae:	461a      	mov	r2, r3
 80027b0:	2302      	movs	r3, #2
 80027b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80027be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 fcbd 	bl	8003140 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80027c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c8:	3301      	adds	r3, #1
 80027ca:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80027cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ce:	085b      	lsrs	r3, r3, #1
 80027d0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80027d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f47f af2e 	bne.w	8002636 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f002 fd04 	bl	80051ec <USB_ReadInterrupts>
 80027e4:	4603      	mov	r3, r0
 80027e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80027ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80027ee:	d122      	bne.n	8002836 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	69fa      	ldr	r2, [r7, #28]
 80027fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80027fe:	f023 0301 	bic.w	r3, r3, #1
 8002802:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800280a:	2b01      	cmp	r3, #1
 800280c:	d108      	bne.n	8002820 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002816:	2100      	movs	r1, #0
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 fea3 	bl	8003564 <HAL_PCDEx_LPM_Callback>
 800281e:	e002      	b.n	8002826 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f005 f8fd 	bl	8007a20 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	695a      	ldr	r2, [r3, #20]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002834:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f002 fcd6 	bl	80051ec <USB_ReadInterrupts>
 8002840:	4603      	mov	r3, r0
 8002842:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002846:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800284a:	d112      	bne.n	8002872 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	2b01      	cmp	r3, #1
 800285a:	d102      	bne.n	8002862 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f005 f8b9 	bl	80079d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	695a      	ldr	r2, [r3, #20]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002870:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f002 fcb8 	bl	80051ec <USB_ReadInterrupts>
 800287c:	4603      	mov	r3, r0
 800287e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002882:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002886:	f040 80b7 	bne.w	80029f8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	69fa      	ldr	r2, [r7, #28]
 8002894:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002898:	f023 0301 	bic.w	r3, r3, #1
 800289c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2110      	movs	r1, #16
 80028a4:	4618      	mov	r0, r3
 80028a6:	f001 fd85 	bl	80043b4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028aa:	2300      	movs	r3, #0
 80028ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028ae:	e046      	b.n	800293e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80028b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028b2:	015a      	lsls	r2, r3, #5
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	4413      	add	r3, r2
 80028b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80028bc:	461a      	mov	r2, r3
 80028be:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80028c2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80028c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028c6:	015a      	lsls	r2, r3, #5
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	4413      	add	r3, r2
 80028cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028d4:	0151      	lsls	r1, r2, #5
 80028d6:	69fa      	ldr	r2, [r7, #28]
 80028d8:	440a      	add	r2, r1
 80028da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80028de:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80028e2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80028e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028e6:	015a      	lsls	r2, r3, #5
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	4413      	add	r3, r2
 80028ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028f0:	461a      	mov	r2, r3
 80028f2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80028f6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80028f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028fa:	015a      	lsls	r2, r3, #5
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	4413      	add	r3, r2
 8002900:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002908:	0151      	lsls	r1, r2, #5
 800290a:	69fa      	ldr	r2, [r7, #28]
 800290c:	440a      	add	r2, r1
 800290e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002912:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002916:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800291a:	015a      	lsls	r2, r3, #5
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	4413      	add	r3, r2
 8002920:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002928:	0151      	lsls	r1, r2, #5
 800292a:	69fa      	ldr	r2, [r7, #28]
 800292c:	440a      	add	r2, r1
 800292e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002932:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002936:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800293a:	3301      	adds	r3, #1
 800293c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	791b      	ldrb	r3, [r3, #4]
 8002942:	461a      	mov	r2, r3
 8002944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002946:	4293      	cmp	r3, r2
 8002948:	d3b2      	bcc.n	80028b0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002950:	69db      	ldr	r3, [r3, #28]
 8002952:	69fa      	ldr	r2, [r7, #28]
 8002954:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002958:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800295c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	7bdb      	ldrb	r3, [r3, #15]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d016      	beq.n	8002994 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800296c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002970:	69fa      	ldr	r2, [r7, #28]
 8002972:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002976:	f043 030b 	orr.w	r3, r3, #11
 800297a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002986:	69fa      	ldr	r2, [r7, #28]
 8002988:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800298c:	f043 030b 	orr.w	r3, r3, #11
 8002990:	6453      	str	r3, [r2, #68]	@ 0x44
 8002992:	e015      	b.n	80029c0 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800299a:	695b      	ldr	r3, [r3, #20]
 800299c:	69fa      	ldr	r2, [r7, #28]
 800299e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80029a2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80029a6:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80029aa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	69fa      	ldr	r2, [r7, #28]
 80029b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80029ba:	f043 030b 	orr.w	r3, r3, #11
 80029be:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	69fa      	ldr	r2, [r7, #28]
 80029ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80029ce:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80029d2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6818      	ldr	r0, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80029e2:	461a      	mov	r2, r3
 80029e4:	f002 fcc6 	bl	8005374 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	695a      	ldr	r2, [r3, #20]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80029f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f002 fbf5 	bl	80051ec <USB_ReadInterrupts>
 8002a02:	4603      	mov	r3, r0
 8002a04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a0c:	d123      	bne.n	8002a56 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f002 fc8b 	bl	800532e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f001 fd42 	bl	80044a6 <USB_GetDevSpeed>
 8002a22:	4603      	mov	r3, r0
 8002a24:	461a      	mov	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681c      	ldr	r4, [r3, #0]
 8002a2e:	f001 f9c9 	bl	8003dc4 <HAL_RCC_GetHCLKFreq>
 8002a32:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a38:	461a      	mov	r2, r3
 8002a3a:	4620      	mov	r0, r4
 8002a3c:	f001 fa46 	bl	8003ecc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f004 ffa8 	bl	8007996 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	695a      	ldr	r2, [r3, #20]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002a54:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f002 fbc6 	bl	80051ec <USB_ReadInterrupts>
 8002a60:	4603      	mov	r3, r0
 8002a62:	f003 0308 	and.w	r3, r3, #8
 8002a66:	2b08      	cmp	r3, #8
 8002a68:	d10a      	bne.n	8002a80 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f004 ff85 	bl	800797a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	695a      	ldr	r2, [r3, #20]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f002 0208 	and.w	r2, r2, #8
 8002a7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f002 fbb1 	bl	80051ec <USB_ReadInterrupts>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a90:	2b80      	cmp	r3, #128	@ 0x80
 8002a92:	d123      	bne.n	8002adc <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002a94:	6a3b      	ldr	r3, [r7, #32]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a9c:	6a3b      	ldr	r3, [r7, #32]
 8002a9e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aa4:	e014      	b.n	8002ad0 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aaa:	4613      	mov	r3, r2
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	4413      	add	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	440b      	add	r3, r1
 8002ab4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d105      	bne.n	8002aca <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 fb0a 	bl	80030de <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002acc:	3301      	adds	r3, #1
 8002ace:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	791b      	ldrb	r3, [r3, #4]
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d3e4      	bcc.n	8002aa6 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f002 fb83 	bl	80051ec <USB_ReadInterrupts>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002aec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002af0:	d13c      	bne.n	8002b6c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002af2:	2301      	movs	r3, #1
 8002af4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002af6:	e02b      	b.n	8002b50 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afa:	015a      	lsls	r2, r3, #5
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	4413      	add	r3, r2
 8002b00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b08:	6879      	ldr	r1, [r7, #4]
 8002b0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	4413      	add	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	440b      	add	r3, r1
 8002b16:	3318      	adds	r3, #24
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d115      	bne.n	8002b4a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002b1e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	da12      	bge.n	8002b4a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b28:	4613      	mov	r3, r2
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	440b      	add	r3, r1
 8002b32:	3317      	adds	r3, #23
 8002b34:	2201      	movs	r2, #1
 8002b36:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	4619      	mov	r1, r3
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 faca 	bl	80030de <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	791b      	ldrb	r3, [r3, #4]
 8002b54:	461a      	mov	r2, r3
 8002b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d3cd      	bcc.n	8002af8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	695a      	ldr	r2, [r3, #20]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002b6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f002 fb3b 	bl	80051ec <USB_ReadInterrupts>
 8002b76:	4603      	mov	r3, r0
 8002b78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b7c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b80:	d156      	bne.n	8002c30 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b82:	2301      	movs	r3, #1
 8002b84:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b86:	e045      	b.n	8002c14 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b8a:	015a      	lsls	r2, r3, #5
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	4413      	add	r3, r2
 8002b90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b98:	6879      	ldr	r1, [r7, #4]
 8002b9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	4413      	add	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d12e      	bne.n	8002c0e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002bb0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	da2b      	bge.n	8002c0e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002bc2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d121      	bne.n	8002c0e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bce:	4613      	mov	r3, r2
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	440b      	add	r3, r1
 8002bd8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002bdc:	2201      	movs	r2, #1
 8002bde:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002be0:	6a3b      	ldr	r3, [r7, #32]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002be8:	6a3b      	ldr	r3, [r7, #32]
 8002bea:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002bec:	6a3b      	ldr	r3, [r7, #32]
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10a      	bne.n	8002c0e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	69fa      	ldr	r2, [r7, #28]
 8002c02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c0a:	6053      	str	r3, [r2, #4]
            break;
 8002c0c:	e008      	b.n	8002c20 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c10:	3301      	adds	r3, #1
 8002c12:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	791b      	ldrb	r3, [r3, #4]
 8002c18:	461a      	mov	r2, r3
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d3b3      	bcc.n	8002b88 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	695a      	ldr	r2, [r3, #20]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002c2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f002 fad9 	bl	80051ec <USB_ReadInterrupts>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002c40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c44:	d10a      	bne.n	8002c5c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f004 ff1c 	bl	8007a84 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	695a      	ldr	r2, [r3, #20]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002c5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f002 fac3 	bl	80051ec <USB_ReadInterrupts>
 8002c66:	4603      	mov	r3, r0
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	2b04      	cmp	r3, #4
 8002c6e:	d115      	bne.n	8002c9c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	f003 0304 	and.w	r3, r3, #4
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d002      	beq.n	8002c88 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f004 ff0c 	bl	8007aa0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	6859      	ldr	r1, [r3, #4]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	430a      	orrs	r2, r1
 8002c96:	605a      	str	r2, [r3, #4]
 8002c98:	e000      	b.n	8002c9c <HAL_PCD_IRQHandler+0x93c>
      return;
 8002c9a:	bf00      	nop
    }
  }
}
 8002c9c:	3734      	adds	r7, #52	@ 0x34
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd90      	pop	{r4, r7, pc}

08002ca2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b082      	sub	sp, #8
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
 8002caa:	460b      	mov	r3, r1
 8002cac:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d101      	bne.n	8002cbc <HAL_PCD_SetAddress+0x1a>
 8002cb8:	2302      	movs	r3, #2
 8002cba:	e012      	b.n	8002ce2 <HAL_PCD_SetAddress+0x40>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	78fa      	ldrb	r2, [r7, #3]
 8002cc8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	78fa      	ldrb	r2, [r7, #3]
 8002cd0:	4611      	mov	r1, r2
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f002 fa22 	bl	800511c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b084      	sub	sp, #16
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
 8002cf2:	4608      	mov	r0, r1
 8002cf4:	4611      	mov	r1, r2
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	70fb      	strb	r3, [r7, #3]
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	803b      	strh	r3, [r7, #0]
 8002d00:	4613      	mov	r3, r2
 8002d02:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002d04:	2300      	movs	r3, #0
 8002d06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	da0f      	bge.n	8002d30 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d10:	78fb      	ldrb	r3, [r7, #3]
 8002d12:	f003 020f 	and.w	r2, r3, #15
 8002d16:	4613      	mov	r3, r2
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	4413      	add	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	3310      	adds	r3, #16
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	4413      	add	r3, r2
 8002d24:	3304      	adds	r3, #4
 8002d26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	705a      	strb	r2, [r3, #1]
 8002d2e:	e00f      	b.n	8002d50 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d30:	78fb      	ldrb	r3, [r7, #3]
 8002d32:	f003 020f 	and.w	r2, r3, #15
 8002d36:	4613      	mov	r3, r2
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	4413      	add	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	4413      	add	r3, r2
 8002d46:	3304      	adds	r3, #4
 8002d48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002d50:	78fb      	ldrb	r3, [r7, #3]
 8002d52:	f003 030f 	and.w	r3, r3, #15
 8002d56:	b2da      	uxtb	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002d5c:	883b      	ldrh	r3, [r7, #0]
 8002d5e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	78ba      	ldrb	r2, [r7, #2]
 8002d6a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	785b      	ldrb	r3, [r3, #1]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d004      	beq.n	8002d7e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	461a      	mov	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d7e:	78bb      	ldrb	r3, [r7, #2]
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d102      	bne.n	8002d8a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d101      	bne.n	8002d98 <HAL_PCD_EP_Open+0xae>
 8002d94:	2302      	movs	r3, #2
 8002d96:	e00e      	b.n	8002db6 <HAL_PCD_EP_Open+0xcc>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68f9      	ldr	r1, [r7, #12]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f001 fba2 	bl	80044f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002db4:	7afb      	ldrb	r3, [r7, #11]
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b084      	sub	sp, #16
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002dca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	da0f      	bge.n	8002df2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dd2:	78fb      	ldrb	r3, [r7, #3]
 8002dd4:	f003 020f 	and.w	r2, r3, #15
 8002dd8:	4613      	mov	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	4413      	add	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	3310      	adds	r3, #16
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	4413      	add	r3, r2
 8002de6:	3304      	adds	r3, #4
 8002de8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2201      	movs	r2, #1
 8002dee:	705a      	strb	r2, [r3, #1]
 8002df0:	e00f      	b.n	8002e12 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002df2:	78fb      	ldrb	r3, [r7, #3]
 8002df4:	f003 020f 	and.w	r2, r3, #15
 8002df8:	4613      	mov	r3, r2
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	4413      	add	r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	4413      	add	r3, r2
 8002e08:	3304      	adds	r3, #4
 8002e0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e12:	78fb      	ldrb	r3, [r7, #3]
 8002e14:	f003 030f 	and.w	r3, r3, #15
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d101      	bne.n	8002e2c <HAL_PCD_EP_Close+0x6e>
 8002e28:	2302      	movs	r3, #2
 8002e2a:	e00e      	b.n	8002e4a <HAL_PCD_EP_Close+0x8c>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68f9      	ldr	r1, [r7, #12]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f001 fbe0 	bl	8004600 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b086      	sub	sp, #24
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	60f8      	str	r0, [r7, #12]
 8002e5a:	607a      	str	r2, [r7, #4]
 8002e5c:	603b      	str	r3, [r7, #0]
 8002e5e:	460b      	mov	r3, r1
 8002e60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e62:	7afb      	ldrb	r3, [r7, #11]
 8002e64:	f003 020f 	and.w	r2, r3, #15
 8002e68:	4613      	mov	r3, r2
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	4413      	add	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	4413      	add	r3, r2
 8002e78:	3304      	adds	r3, #4
 8002e7a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	2200      	movs	r2, #0
 8002e92:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e94:	7afb      	ldrb	r3, [r7, #11]
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	799b      	ldrb	r3, [r3, #6]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d102      	bne.n	8002eae <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6818      	ldr	r0, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	799b      	ldrb	r3, [r3, #6]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	6979      	ldr	r1, [r7, #20]
 8002eba:	f001 fc7d 	bl	80047b8 <USB_EPStartXfer>

  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3718      	adds	r7, #24
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002ed4:	78fb      	ldrb	r3, [r7, #3]
 8002ed6:	f003 020f 	and.w	r2, r3, #15
 8002eda:	6879      	ldr	r1, [r7, #4]
 8002edc:	4613      	mov	r3, r2
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	4413      	add	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	440b      	add	r3, r1
 8002ee6:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002eea:	681b      	ldr	r3, [r3, #0]
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	607a      	str	r2, [r7, #4]
 8002f02:	603b      	str	r3, [r7, #0]
 8002f04:	460b      	mov	r3, r1
 8002f06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f08:	7afb      	ldrb	r3, [r7, #11]
 8002f0a:	f003 020f 	and.w	r2, r3, #15
 8002f0e:	4613      	mov	r3, r2
 8002f10:	00db      	lsls	r3, r3, #3
 8002f12:	4413      	add	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	3310      	adds	r3, #16
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	3304      	adds	r3, #4
 8002f1e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	2201      	movs	r2, #1
 8002f36:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f38:	7afb      	ldrb	r3, [r7, #11]
 8002f3a:	f003 030f 	and.w	r3, r3, #15
 8002f3e:	b2da      	uxtb	r2, r3
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	799b      	ldrb	r3, [r3, #6]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d102      	bne.n	8002f52 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6818      	ldr	r0, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	799b      	ldrb	r3, [r3, #6]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	6979      	ldr	r1, [r7, #20]
 8002f5e:	f001 fc2b 	bl	80047b8 <USB_EPStartXfer>

  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3718      	adds	r7, #24
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	460b      	mov	r3, r1
 8002f76:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f78:	78fb      	ldrb	r3, [r7, #3]
 8002f7a:	f003 030f 	and.w	r3, r3, #15
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	7912      	ldrb	r2, [r2, #4]
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d901      	bls.n	8002f8a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e04f      	b.n	800302a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	da0f      	bge.n	8002fb2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f92:	78fb      	ldrb	r3, [r7, #3]
 8002f94:	f003 020f 	and.w	r2, r3, #15
 8002f98:	4613      	mov	r3, r2
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	4413      	add	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	3310      	adds	r3, #16
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	3304      	adds	r3, #4
 8002fa8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2201      	movs	r2, #1
 8002fae:	705a      	strb	r2, [r3, #1]
 8002fb0:	e00d      	b.n	8002fce <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002fb2:	78fa      	ldrb	r2, [r7, #3]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	4413      	add	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	3304      	adds	r3, #4
 8002fc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fd4:	78fb      	ldrb	r3, [r7, #3]
 8002fd6:	f003 030f 	and.w	r3, r3, #15
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d101      	bne.n	8002fee <HAL_PCD_EP_SetStall+0x82>
 8002fea:	2302      	movs	r3, #2
 8002fec:	e01d      	b.n	800302a <HAL_PCD_EP_SetStall+0xbe>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68f9      	ldr	r1, [r7, #12]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f001 ffb9 	bl	8004f74 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003002:	78fb      	ldrb	r3, [r7, #3]
 8003004:	f003 030f 	and.w	r3, r3, #15
 8003008:	2b00      	cmp	r3, #0
 800300a:	d109      	bne.n	8003020 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6818      	ldr	r0, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	7999      	ldrb	r1, [r3, #6]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800301a:	461a      	mov	r2, r3
 800301c:	f002 f9aa 	bl	8005374 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b084      	sub	sp, #16
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
 800303a:	460b      	mov	r3, r1
 800303c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800303e:	78fb      	ldrb	r3, [r7, #3]
 8003040:	f003 030f 	and.w	r3, r3, #15
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	7912      	ldrb	r2, [r2, #4]
 8003048:	4293      	cmp	r3, r2
 800304a:	d901      	bls.n	8003050 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e042      	b.n	80030d6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003050:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003054:	2b00      	cmp	r3, #0
 8003056:	da0f      	bge.n	8003078 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003058:	78fb      	ldrb	r3, [r7, #3]
 800305a:	f003 020f 	and.w	r2, r3, #15
 800305e:	4613      	mov	r3, r2
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	4413      	add	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	3310      	adds	r3, #16
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	4413      	add	r3, r2
 800306c:	3304      	adds	r3, #4
 800306e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2201      	movs	r2, #1
 8003074:	705a      	strb	r2, [r3, #1]
 8003076:	e00f      	b.n	8003098 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003078:	78fb      	ldrb	r3, [r7, #3]
 800307a:	f003 020f 	and.w	r2, r3, #15
 800307e:	4613      	mov	r3, r2
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	4413      	add	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	4413      	add	r3, r2
 800308e:	3304      	adds	r3, #4
 8003090:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800309e:	78fb      	ldrb	r3, [r7, #3]
 80030a0:	f003 030f 	and.w	r3, r3, #15
 80030a4:	b2da      	uxtb	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d101      	bne.n	80030b8 <HAL_PCD_EP_ClrStall+0x86>
 80030b4:	2302      	movs	r3, #2
 80030b6:	e00e      	b.n	80030d6 <HAL_PCD_EP_ClrStall+0xa4>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68f9      	ldr	r1, [r7, #12]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f001 ffc2 	bl	8005050 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b084      	sub	sp, #16
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
 80030e6:	460b      	mov	r3, r1
 80030e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80030ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	da0c      	bge.n	800310c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030f2:	78fb      	ldrb	r3, [r7, #3]
 80030f4:	f003 020f 	and.w	r2, r3, #15
 80030f8:	4613      	mov	r3, r2
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	4413      	add	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	3310      	adds	r3, #16
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	4413      	add	r3, r2
 8003106:	3304      	adds	r3, #4
 8003108:	60fb      	str	r3, [r7, #12]
 800310a:	e00c      	b.n	8003126 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800310c:	78fb      	ldrb	r3, [r7, #3]
 800310e:	f003 020f 	and.w	r2, r3, #15
 8003112:	4613      	mov	r3, r2
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	4413      	add	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	4413      	add	r3, r2
 8003122:	3304      	adds	r3, #4
 8003124:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68f9      	ldr	r1, [r7, #12]
 800312c:	4618      	mov	r0, r3
 800312e:	f001 fde1 	bl	8004cf4 <USB_EPStopXfer>
 8003132:	4603      	mov	r3, r0
 8003134:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003136:	7afb      	ldrb	r3, [r7, #11]
}
 8003138:	4618      	mov	r0, r3
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b08a      	sub	sp, #40	@ 0x28
 8003144:	af02      	add	r7, sp, #8
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	4613      	mov	r3, r2
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	4413      	add	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	3310      	adds	r3, #16
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	4413      	add	r3, r2
 8003164:	3304      	adds	r3, #4
 8003166:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	695a      	ldr	r2, [r3, #20]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	429a      	cmp	r2, r3
 8003172:	d901      	bls.n	8003178 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e06b      	b.n	8003250 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	691a      	ldr	r2, [r3, #16]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	69fa      	ldr	r2, [r7, #28]
 800318a:	429a      	cmp	r2, r3
 800318c:	d902      	bls.n	8003194 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	3303      	adds	r3, #3
 8003198:	089b      	lsrs	r3, r3, #2
 800319a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800319c:	e02a      	b.n	80031f4 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	691a      	ldr	r2, [r3, #16]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	69fa      	ldr	r2, [r7, #28]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d902      	bls.n	80031ba <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	3303      	adds	r3, #3
 80031be:	089b      	lsrs	r3, r3, #2
 80031c0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	68d9      	ldr	r1, [r3, #12]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	4603      	mov	r3, r0
 80031d6:	6978      	ldr	r0, [r7, #20]
 80031d8:	f001 fe36 	bl	8004e48 <USB_WritePacket>

    ep->xfer_buff  += len;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	441a      	add	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	695a      	ldr	r2, [r3, #20]
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	441a      	add	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	015a      	lsls	r2, r3, #5
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	4413      	add	r3, r2
 80031fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	429a      	cmp	r2, r3
 8003208:	d809      	bhi.n	800321e <PCD_WriteEmptyTxFifo+0xde>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	695a      	ldr	r2, [r3, #20]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003212:	429a      	cmp	r2, r3
 8003214:	d203      	bcs.n	800321e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1bf      	bne.n	800319e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	691a      	ldr	r2, [r3, #16]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	429a      	cmp	r2, r3
 8003228:	d811      	bhi.n	800324e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	f003 030f 	and.w	r3, r3, #15
 8003230:	2201      	movs	r2, #1
 8003232:	fa02 f303 	lsl.w	r3, r2, r3
 8003236:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800323e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	43db      	mvns	r3, r3
 8003244:	6939      	ldr	r1, [r7, #16]
 8003246:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800324a:	4013      	ands	r3, r2
 800324c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3720      	adds	r7, #32
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b088      	sub	sp, #32
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	333c      	adds	r3, #60	@ 0x3c
 8003270:	3304      	adds	r3, #4
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	015a      	lsls	r2, r3, #5
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	4413      	add	r3, r2
 800327e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	799b      	ldrb	r3, [r3, #6]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d17b      	bne.n	8003386 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	f003 0308 	and.w	r3, r3, #8
 8003294:	2b00      	cmp	r3, #0
 8003296:	d015      	beq.n	80032c4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	4a61      	ldr	r2, [pc, #388]	@ (8003420 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800329c:	4293      	cmp	r3, r2
 800329e:	f240 80b9 	bls.w	8003414 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f000 80b3 	beq.w	8003414 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	015a      	lsls	r2, r3, #5
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	4413      	add	r3, r2
 80032b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032ba:	461a      	mov	r2, r3
 80032bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032c0:	6093      	str	r3, [r2, #8]
 80032c2:	e0a7      	b.n	8003414 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	f003 0320 	and.w	r3, r3, #32
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d009      	beq.n	80032e2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	015a      	lsls	r2, r3, #5
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	4413      	add	r3, r2
 80032d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032da:	461a      	mov	r2, r3
 80032dc:	2320      	movs	r3, #32
 80032de:	6093      	str	r3, [r2, #8]
 80032e0:	e098      	b.n	8003414 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f040 8093 	bne.w	8003414 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	4a4b      	ldr	r2, [pc, #300]	@ (8003420 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d90f      	bls.n	8003316 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00a      	beq.n	8003316 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	015a      	lsls	r2, r3, #5
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	4413      	add	r3, r2
 8003308:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800330c:	461a      	mov	r2, r3
 800330e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003312:	6093      	str	r3, [r2, #8]
 8003314:	e07e      	b.n	8003414 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	4613      	mov	r3, r2
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	4413      	add	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	4413      	add	r3, r2
 8003328:	3304      	adds	r3, #4
 800332a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6a1a      	ldr	r2, [r3, #32]
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	0159      	lsls	r1, r3, #5
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	440b      	add	r3, r1
 8003338:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003342:	1ad2      	subs	r2, r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d114      	bne.n	8003378 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d109      	bne.n	800336a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6818      	ldr	r0, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003360:	461a      	mov	r2, r3
 8003362:	2101      	movs	r1, #1
 8003364:	f002 f806 	bl	8005374 <USB_EP0_OutStart>
 8003368:	e006      	b.n	8003378 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	68da      	ldr	r2, [r3, #12]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	441a      	add	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	b2db      	uxtb	r3, r3
 800337c:	4619      	mov	r1, r3
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f004 fac6 	bl	8007910 <HAL_PCD_DataOutStageCallback>
 8003384:	e046      	b.n	8003414 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	4a26      	ldr	r2, [pc, #152]	@ (8003424 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d124      	bne.n	80033d8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00a      	beq.n	80033ae <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	015a      	lsls	r2, r3, #5
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	4413      	add	r3, r2
 80033a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033a4:	461a      	mov	r2, r3
 80033a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033aa:	6093      	str	r3, [r2, #8]
 80033ac:	e032      	b.n	8003414 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	f003 0320 	and.w	r3, r3, #32
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d008      	beq.n	80033ca <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	015a      	lsls	r2, r3, #5
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	4413      	add	r3, r2
 80033c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033c4:	461a      	mov	r2, r3
 80033c6:	2320      	movs	r3, #32
 80033c8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	4619      	mov	r1, r3
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f004 fa9d 	bl	8007910 <HAL_PCD_DataOutStageCallback>
 80033d6:	e01d      	b.n	8003414 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d114      	bne.n	8003408 <PCD_EP_OutXfrComplete_int+0x1b0>
 80033de:	6879      	ldr	r1, [r7, #4]
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	4613      	mov	r3, r2
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	4413      	add	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	440b      	add	r3, r1
 80033ec:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d108      	bne.n	8003408 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6818      	ldr	r0, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003400:	461a      	mov	r2, r3
 8003402:	2100      	movs	r1, #0
 8003404:	f001 ffb6 	bl	8005374 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	b2db      	uxtb	r3, r3
 800340c:	4619      	mov	r1, r3
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f004 fa7e 	bl	8007910 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3720      	adds	r7, #32
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	4f54300a 	.word	0x4f54300a
 8003424:	4f54310a 	.word	0x4f54310a

08003428 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	333c      	adds	r3, #60	@ 0x3c
 8003440:	3304      	adds	r3, #4
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	015a      	lsls	r2, r3, #5
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	4413      	add	r3, r2
 800344e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	4a15      	ldr	r2, [pc, #84]	@ (80034b0 <PCD_EP_OutSetupPacket_int+0x88>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d90e      	bls.n	800347c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003464:	2b00      	cmp	r3, #0
 8003466:	d009      	beq.n	800347c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	015a      	lsls	r2, r3, #5
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	4413      	add	r3, r2
 8003470:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003474:	461a      	mov	r2, r3
 8003476:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800347a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f004 fa35 	bl	80078ec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	4a0a      	ldr	r2, [pc, #40]	@ (80034b0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d90c      	bls.n	80034a4 <PCD_EP_OutSetupPacket_int+0x7c>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	799b      	ldrb	r3, [r3, #6]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d108      	bne.n	80034a4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6818      	ldr	r0, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800349c:	461a      	mov	r2, r3
 800349e:	2101      	movs	r1, #1
 80034a0:	f001 ff68 	bl	8005374 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3718      	adds	r7, #24
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	4f54300a 	.word	0x4f54300a

080034b4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	460b      	mov	r3, r1
 80034be:	70fb      	strb	r3, [r7, #3]
 80034c0:	4613      	mov	r3, r2
 80034c2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ca:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80034cc:	78fb      	ldrb	r3, [r7, #3]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d107      	bne.n	80034e2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80034d2:	883b      	ldrh	r3, [r7, #0]
 80034d4:	0419      	lsls	r1, r3, #16
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68ba      	ldr	r2, [r7, #8]
 80034dc:	430a      	orrs	r2, r1
 80034de:	629a      	str	r2, [r3, #40]	@ 0x28
 80034e0:	e028      	b.n	8003534 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e8:	0c1b      	lsrs	r3, r3, #16
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	4413      	add	r3, r2
 80034ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80034f0:	2300      	movs	r3, #0
 80034f2:	73fb      	strb	r3, [r7, #15]
 80034f4:	e00d      	b.n	8003512 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	7bfb      	ldrb	r3, [r7, #15]
 80034fc:	3340      	adds	r3, #64	@ 0x40
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4413      	add	r3, r2
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	0c1b      	lsrs	r3, r3, #16
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	4413      	add	r3, r2
 800350a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800350c:	7bfb      	ldrb	r3, [r7, #15]
 800350e:	3301      	adds	r3, #1
 8003510:	73fb      	strb	r3, [r7, #15]
 8003512:	7bfa      	ldrb	r2, [r7, #15]
 8003514:	78fb      	ldrb	r3, [r7, #3]
 8003516:	3b01      	subs	r3, #1
 8003518:	429a      	cmp	r2, r3
 800351a:	d3ec      	bcc.n	80034f6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800351c:	883b      	ldrh	r3, [r7, #0]
 800351e:	0418      	lsls	r0, r3, #16
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6819      	ldr	r1, [r3, #0]
 8003524:	78fb      	ldrb	r3, [r7, #3]
 8003526:	3b01      	subs	r3, #1
 8003528:	68ba      	ldr	r2, [r7, #8]
 800352a:	4302      	orrs	r2, r0
 800352c:	3340      	adds	r3, #64	@ 0x40
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	440b      	add	r3, r1
 8003532:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3714      	adds	r7, #20
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr

08003542 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003542:	b480      	push	{r7}
 8003544:	b083      	sub	sp, #12
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
 800354a:	460b      	mov	r3, r1
 800354c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	887a      	ldrh	r2, [r7, #2]
 8003554:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	460b      	mov	r3, r1
 800356e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e267      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b00      	cmp	r3, #0
 8003598:	d075      	beq.n	8003686 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800359a:	4b88      	ldr	r3, [pc, #544]	@ (80037bc <HAL_RCC_OscConfig+0x240>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 030c 	and.w	r3, r3, #12
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	d00c      	beq.n	80035c0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035a6:	4b85      	ldr	r3, [pc, #532]	@ (80037bc <HAL_RCC_OscConfig+0x240>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80035ae:	2b08      	cmp	r3, #8
 80035b0:	d112      	bne.n	80035d8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035b2:	4b82      	ldr	r3, [pc, #520]	@ (80037bc <HAL_RCC_OscConfig+0x240>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035be:	d10b      	bne.n	80035d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c0:	4b7e      	ldr	r3, [pc, #504]	@ (80037bc <HAL_RCC_OscConfig+0x240>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d05b      	beq.n	8003684 <HAL_RCC_OscConfig+0x108>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d157      	bne.n	8003684 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e242      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035e0:	d106      	bne.n	80035f0 <HAL_RCC_OscConfig+0x74>
 80035e2:	4b76      	ldr	r3, [pc, #472]	@ (80037bc <HAL_RCC_OscConfig+0x240>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a75      	ldr	r2, [pc, #468]	@ (80037bc <HAL_RCC_OscConfig+0x240>)
 80035e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035ec:	6013      	str	r3, [r2, #0]
 80035ee:	e01d      	b.n	800362c <HAL_RCC_OscConfig+0xb0>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035f8:	d10c      	bne.n	8003614 <HAL_RCC_OscConfig+0x98>
 80035fa:	4b70      	ldr	r3, [pc, #448]	@ (80037bc <HAL_RCC_OscConfig+0x240>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a6f      	ldr	r2, [pc, #444]	@ (80037bc <HAL_RCC_OscConfig+0x240>)
 8003600:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003604:	6013      	str	r3, [r2, #0]
 8003606:	4b6d      	ldr	r3, [pc, #436]	@ (80037bc <HAL_RCC_OscConfig+0x240>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a6c      	ldr	r2, [pc, #432]	@ (80037bc <HAL_RCC_OscConfig+0x240>)
 800360c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	e00b      	b.n	800362c <HAL_RCC_OscConfig+0xb0>
 8003614:	4b69      	ldr	r3, [pc, #420]	@ (80037bc <HAL_RCC_OscConfig+0x240>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a68      	ldr	r2, [pc, #416]	@ (80037bc <HAL_RCC_OscConfig+0x240>)
 800361a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800361e:	6013      	str	r3, [r2, #0]
 8003620:	4b66      	ldr	r3, [pc, #408]	@ (80037bc <HAL_RCC_OscConfig+0x240>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a65      	ldr	r2, [pc, #404]	@ (80037bc <HAL_RCC_OscConfig+0x240>)
 8003626:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800362a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d013      	beq.n	800365c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003634:	f7fd fa32 	bl	8000a9c <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800363c:	f7fd fa2e 	bl	8000a9c <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b64      	cmp	r3, #100	@ 0x64
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e207      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800364e:	4b5b      	ldr	r3, [pc, #364]	@ (80037bc <HAL_RCC_OscConfig+0x240>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d0f0      	beq.n	800363c <HAL_RCC_OscConfig+0xc0>
 800365a:	e014      	b.n	8003686 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365c:	f7fd fa1e 	bl	8000a9c <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003664:	f7fd fa1a 	bl	8000a9c <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b64      	cmp	r3, #100	@ 0x64
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e1f3      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003676:	4b51      	ldr	r3, [pc, #324]	@ (80037bc <HAL_RCC_OscConfig+0x240>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1f0      	bne.n	8003664 <HAL_RCC_OscConfig+0xe8>
 8003682:	e000      	b.n	8003686 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d063      	beq.n	800375a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003692:	4b4a      	ldr	r3, [pc, #296]	@ (80037bc <HAL_RCC_OscConfig+0x240>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 030c 	and.w	r3, r3, #12
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00b      	beq.n	80036b6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800369e:	4b47      	ldr	r3, [pc, #284]	@ (80037bc <HAL_RCC_OscConfig+0x240>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80036a6:	2b08      	cmp	r3, #8
 80036a8:	d11c      	bne.n	80036e4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036aa:	4b44      	ldr	r3, [pc, #272]	@ (80037bc <HAL_RCC_OscConfig+0x240>)
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d116      	bne.n	80036e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036b6:	4b41      	ldr	r3, [pc, #260]	@ (80037bc <HAL_RCC_OscConfig+0x240>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d005      	beq.n	80036ce <HAL_RCC_OscConfig+0x152>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d001      	beq.n	80036ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e1c7      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ce:	4b3b      	ldr	r3, [pc, #236]	@ (80037bc <HAL_RCC_OscConfig+0x240>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	4937      	ldr	r1, [pc, #220]	@ (80037bc <HAL_RCC_OscConfig+0x240>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036e2:	e03a      	b.n	800375a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d020      	beq.n	800372e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036ec:	4b34      	ldr	r3, [pc, #208]	@ (80037c0 <HAL_RCC_OscConfig+0x244>)
 80036ee:	2201      	movs	r2, #1
 80036f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f2:	f7fd f9d3 	bl	8000a9c <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f8:	e008      	b.n	800370c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036fa:	f7fd f9cf 	bl	8000a9c <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e1a8      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800370c:	4b2b      	ldr	r3, [pc, #172]	@ (80037bc <HAL_RCC_OscConfig+0x240>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d0f0      	beq.n	80036fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003718:	4b28      	ldr	r3, [pc, #160]	@ (80037bc <HAL_RCC_OscConfig+0x240>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	00db      	lsls	r3, r3, #3
 8003726:	4925      	ldr	r1, [pc, #148]	@ (80037bc <HAL_RCC_OscConfig+0x240>)
 8003728:	4313      	orrs	r3, r2
 800372a:	600b      	str	r3, [r1, #0]
 800372c:	e015      	b.n	800375a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800372e:	4b24      	ldr	r3, [pc, #144]	@ (80037c0 <HAL_RCC_OscConfig+0x244>)
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003734:	f7fd f9b2 	bl	8000a9c <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800373c:	f7fd f9ae 	bl	8000a9c <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e187      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800374e:	4b1b      	ldr	r3, [pc, #108]	@ (80037bc <HAL_RCC_OscConfig+0x240>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1f0      	bne.n	800373c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0308 	and.w	r3, r3, #8
 8003762:	2b00      	cmp	r3, #0
 8003764:	d036      	beq.n	80037d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d016      	beq.n	800379c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800376e:	4b15      	ldr	r3, [pc, #84]	@ (80037c4 <HAL_RCC_OscConfig+0x248>)
 8003770:	2201      	movs	r2, #1
 8003772:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003774:	f7fd f992 	bl	8000a9c <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800377c:	f7fd f98e 	bl	8000a9c <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e167      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800378e:	4b0b      	ldr	r3, [pc, #44]	@ (80037bc <HAL_RCC_OscConfig+0x240>)
 8003790:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0f0      	beq.n	800377c <HAL_RCC_OscConfig+0x200>
 800379a:	e01b      	b.n	80037d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800379c:	4b09      	ldr	r3, [pc, #36]	@ (80037c4 <HAL_RCC_OscConfig+0x248>)
 800379e:	2200      	movs	r2, #0
 80037a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037a2:	f7fd f97b 	bl	8000a9c <HAL_GetTick>
 80037a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037a8:	e00e      	b.n	80037c8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037aa:	f7fd f977 	bl	8000a9c <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d907      	bls.n	80037c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e150      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
 80037bc:	40023800 	.word	0x40023800
 80037c0:	42470000 	.word	0x42470000
 80037c4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037c8:	4b88      	ldr	r3, [pc, #544]	@ (80039ec <HAL_RCC_OscConfig+0x470>)
 80037ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1ea      	bne.n	80037aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f000 8097 	beq.w	8003910 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037e2:	2300      	movs	r3, #0
 80037e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037e6:	4b81      	ldr	r3, [pc, #516]	@ (80039ec <HAL_RCC_OscConfig+0x470>)
 80037e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10f      	bne.n	8003812 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037f2:	2300      	movs	r3, #0
 80037f4:	60bb      	str	r3, [r7, #8]
 80037f6:	4b7d      	ldr	r3, [pc, #500]	@ (80039ec <HAL_RCC_OscConfig+0x470>)
 80037f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fa:	4a7c      	ldr	r2, [pc, #496]	@ (80039ec <HAL_RCC_OscConfig+0x470>)
 80037fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003800:	6413      	str	r3, [r2, #64]	@ 0x40
 8003802:	4b7a      	ldr	r3, [pc, #488]	@ (80039ec <HAL_RCC_OscConfig+0x470>)
 8003804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003806:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800380a:	60bb      	str	r3, [r7, #8]
 800380c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800380e:	2301      	movs	r3, #1
 8003810:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003812:	4b77      	ldr	r3, [pc, #476]	@ (80039f0 <HAL_RCC_OscConfig+0x474>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800381a:	2b00      	cmp	r3, #0
 800381c:	d118      	bne.n	8003850 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800381e:	4b74      	ldr	r3, [pc, #464]	@ (80039f0 <HAL_RCC_OscConfig+0x474>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a73      	ldr	r2, [pc, #460]	@ (80039f0 <HAL_RCC_OscConfig+0x474>)
 8003824:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003828:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800382a:	f7fd f937 	bl	8000a9c <HAL_GetTick>
 800382e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003830:	e008      	b.n	8003844 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003832:	f7fd f933 	bl	8000a9c <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d901      	bls.n	8003844 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e10c      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003844:	4b6a      	ldr	r3, [pc, #424]	@ (80039f0 <HAL_RCC_OscConfig+0x474>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800384c:	2b00      	cmp	r3, #0
 800384e:	d0f0      	beq.n	8003832 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d106      	bne.n	8003866 <HAL_RCC_OscConfig+0x2ea>
 8003858:	4b64      	ldr	r3, [pc, #400]	@ (80039ec <HAL_RCC_OscConfig+0x470>)
 800385a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800385c:	4a63      	ldr	r2, [pc, #396]	@ (80039ec <HAL_RCC_OscConfig+0x470>)
 800385e:	f043 0301 	orr.w	r3, r3, #1
 8003862:	6713      	str	r3, [r2, #112]	@ 0x70
 8003864:	e01c      	b.n	80038a0 <HAL_RCC_OscConfig+0x324>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	2b05      	cmp	r3, #5
 800386c:	d10c      	bne.n	8003888 <HAL_RCC_OscConfig+0x30c>
 800386e:	4b5f      	ldr	r3, [pc, #380]	@ (80039ec <HAL_RCC_OscConfig+0x470>)
 8003870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003872:	4a5e      	ldr	r2, [pc, #376]	@ (80039ec <HAL_RCC_OscConfig+0x470>)
 8003874:	f043 0304 	orr.w	r3, r3, #4
 8003878:	6713      	str	r3, [r2, #112]	@ 0x70
 800387a:	4b5c      	ldr	r3, [pc, #368]	@ (80039ec <HAL_RCC_OscConfig+0x470>)
 800387c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800387e:	4a5b      	ldr	r2, [pc, #364]	@ (80039ec <HAL_RCC_OscConfig+0x470>)
 8003880:	f043 0301 	orr.w	r3, r3, #1
 8003884:	6713      	str	r3, [r2, #112]	@ 0x70
 8003886:	e00b      	b.n	80038a0 <HAL_RCC_OscConfig+0x324>
 8003888:	4b58      	ldr	r3, [pc, #352]	@ (80039ec <HAL_RCC_OscConfig+0x470>)
 800388a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800388c:	4a57      	ldr	r2, [pc, #348]	@ (80039ec <HAL_RCC_OscConfig+0x470>)
 800388e:	f023 0301 	bic.w	r3, r3, #1
 8003892:	6713      	str	r3, [r2, #112]	@ 0x70
 8003894:	4b55      	ldr	r3, [pc, #340]	@ (80039ec <HAL_RCC_OscConfig+0x470>)
 8003896:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003898:	4a54      	ldr	r2, [pc, #336]	@ (80039ec <HAL_RCC_OscConfig+0x470>)
 800389a:	f023 0304 	bic.w	r3, r3, #4
 800389e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d015      	beq.n	80038d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a8:	f7fd f8f8 	bl	8000a9c <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ae:	e00a      	b.n	80038c6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038b0:	f7fd f8f4 	bl	8000a9c <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038be:	4293      	cmp	r3, r2
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e0cb      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038c6:	4b49      	ldr	r3, [pc, #292]	@ (80039ec <HAL_RCC_OscConfig+0x470>)
 80038c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d0ee      	beq.n	80038b0 <HAL_RCC_OscConfig+0x334>
 80038d2:	e014      	b.n	80038fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038d4:	f7fd f8e2 	bl	8000a9c <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038da:	e00a      	b.n	80038f2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038dc:	f7fd f8de 	bl	8000a9c <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e0b5      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038f2:	4b3e      	ldr	r3, [pc, #248]	@ (80039ec <HAL_RCC_OscConfig+0x470>)
 80038f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1ee      	bne.n	80038dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80038fe:	7dfb      	ldrb	r3, [r7, #23]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d105      	bne.n	8003910 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003904:	4b39      	ldr	r3, [pc, #228]	@ (80039ec <HAL_RCC_OscConfig+0x470>)
 8003906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003908:	4a38      	ldr	r2, [pc, #224]	@ (80039ec <HAL_RCC_OscConfig+0x470>)
 800390a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800390e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	2b00      	cmp	r3, #0
 8003916:	f000 80a1 	beq.w	8003a5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800391a:	4b34      	ldr	r3, [pc, #208]	@ (80039ec <HAL_RCC_OscConfig+0x470>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f003 030c 	and.w	r3, r3, #12
 8003922:	2b08      	cmp	r3, #8
 8003924:	d05c      	beq.n	80039e0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	2b02      	cmp	r3, #2
 800392c:	d141      	bne.n	80039b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800392e:	4b31      	ldr	r3, [pc, #196]	@ (80039f4 <HAL_RCC_OscConfig+0x478>)
 8003930:	2200      	movs	r2, #0
 8003932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003934:	f7fd f8b2 	bl	8000a9c <HAL_GetTick>
 8003938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800393a:	e008      	b.n	800394e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800393c:	f7fd f8ae 	bl	8000a9c <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e087      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800394e:	4b27      	ldr	r3, [pc, #156]	@ (80039ec <HAL_RCC_OscConfig+0x470>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1f0      	bne.n	800393c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	69da      	ldr	r2, [r3, #28]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	431a      	orrs	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003968:	019b      	lsls	r3, r3, #6
 800396a:	431a      	orrs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003970:	085b      	lsrs	r3, r3, #1
 8003972:	3b01      	subs	r3, #1
 8003974:	041b      	lsls	r3, r3, #16
 8003976:	431a      	orrs	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800397c:	061b      	lsls	r3, r3, #24
 800397e:	491b      	ldr	r1, [pc, #108]	@ (80039ec <HAL_RCC_OscConfig+0x470>)
 8003980:	4313      	orrs	r3, r2
 8003982:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003984:	4b1b      	ldr	r3, [pc, #108]	@ (80039f4 <HAL_RCC_OscConfig+0x478>)
 8003986:	2201      	movs	r2, #1
 8003988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800398a:	f7fd f887 	bl	8000a9c <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003990:	e008      	b.n	80039a4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003992:	f7fd f883 	bl	8000a9c <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e05c      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039a4:	4b11      	ldr	r3, [pc, #68]	@ (80039ec <HAL_RCC_OscConfig+0x470>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0f0      	beq.n	8003992 <HAL_RCC_OscConfig+0x416>
 80039b0:	e054      	b.n	8003a5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039b2:	4b10      	ldr	r3, [pc, #64]	@ (80039f4 <HAL_RCC_OscConfig+0x478>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b8:	f7fd f870 	bl	8000a9c <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039be:	e008      	b.n	80039d2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039c0:	f7fd f86c 	bl	8000a9c <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e045      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039d2:	4b06      	ldr	r3, [pc, #24]	@ (80039ec <HAL_RCC_OscConfig+0x470>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1f0      	bne.n	80039c0 <HAL_RCC_OscConfig+0x444>
 80039de:	e03d      	b.n	8003a5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d107      	bne.n	80039f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e038      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
 80039ec:	40023800 	.word	0x40023800
 80039f0:	40007000 	.word	0x40007000
 80039f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003a68 <HAL_RCC_OscConfig+0x4ec>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d028      	beq.n	8003a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d121      	bne.n	8003a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d11a      	bne.n	8003a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a28:	4013      	ands	r3, r2
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d111      	bne.n	8003a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a3e:	085b      	lsrs	r3, r3, #1
 8003a40:	3b01      	subs	r3, #1
 8003a42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d107      	bne.n	8003a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d001      	beq.n	8003a5c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e000      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3718      	adds	r7, #24
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	40023800 	.word	0x40023800

08003a6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d101      	bne.n	8003a80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e0cc      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a80:	4b68      	ldr	r3, [pc, #416]	@ (8003c24 <HAL_RCC_ClockConfig+0x1b8>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0307 	and.w	r3, r3, #7
 8003a88:	683a      	ldr	r2, [r7, #0]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d90c      	bls.n	8003aa8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a8e:	4b65      	ldr	r3, [pc, #404]	@ (8003c24 <HAL_RCC_ClockConfig+0x1b8>)
 8003a90:	683a      	ldr	r2, [r7, #0]
 8003a92:	b2d2      	uxtb	r2, r2
 8003a94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a96:	4b63      	ldr	r3, [pc, #396]	@ (8003c24 <HAL_RCC_ClockConfig+0x1b8>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0307 	and.w	r3, r3, #7
 8003a9e:	683a      	ldr	r2, [r7, #0]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d001      	beq.n	8003aa8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e0b8      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d020      	beq.n	8003af6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0304 	and.w	r3, r3, #4
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d005      	beq.n	8003acc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ac0:	4b59      	ldr	r3, [pc, #356]	@ (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	4a58      	ldr	r2, [pc, #352]	@ (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003aca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0308 	and.w	r3, r3, #8
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d005      	beq.n	8003ae4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ad8:	4b53      	ldr	r3, [pc, #332]	@ (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	4a52      	ldr	r2, [pc, #328]	@ (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003ade:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003ae2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ae4:	4b50      	ldr	r3, [pc, #320]	@ (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	494d      	ldr	r1, [pc, #308]	@ (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d044      	beq.n	8003b8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d107      	bne.n	8003b1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b0a:	4b47      	ldr	r3, [pc, #284]	@ (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d119      	bne.n	8003b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e07f      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d003      	beq.n	8003b2a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b26:	2b03      	cmp	r3, #3
 8003b28:	d107      	bne.n	8003b3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b2a:	4b3f      	ldr	r3, [pc, #252]	@ (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d109      	bne.n	8003b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e06f      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b3a:	4b3b      	ldr	r3, [pc, #236]	@ (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e067      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b4a:	4b37      	ldr	r3, [pc, #220]	@ (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f023 0203 	bic.w	r2, r3, #3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	4934      	ldr	r1, [pc, #208]	@ (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b5c:	f7fc ff9e 	bl	8000a9c <HAL_GetTick>
 8003b60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b62:	e00a      	b.n	8003b7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b64:	f7fc ff9a 	bl	8000a9c <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e04f      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b7a:	4b2b      	ldr	r3, [pc, #172]	@ (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f003 020c 	and.w	r2, r3, #12
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d1eb      	bne.n	8003b64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b8c:	4b25      	ldr	r3, [pc, #148]	@ (8003c24 <HAL_RCC_ClockConfig+0x1b8>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0307 	and.w	r3, r3, #7
 8003b94:	683a      	ldr	r2, [r7, #0]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d20c      	bcs.n	8003bb4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b9a:	4b22      	ldr	r3, [pc, #136]	@ (8003c24 <HAL_RCC_ClockConfig+0x1b8>)
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	b2d2      	uxtb	r2, r2
 8003ba0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ba2:	4b20      	ldr	r3, [pc, #128]	@ (8003c24 <HAL_RCC_ClockConfig+0x1b8>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0307 	and.w	r3, r3, #7
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d001      	beq.n	8003bb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e032      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0304 	and.w	r3, r3, #4
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d008      	beq.n	8003bd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bc0:	4b19      	ldr	r3, [pc, #100]	@ (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	4916      	ldr	r1, [pc, #88]	@ (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0308 	and.w	r3, r3, #8
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d009      	beq.n	8003bf2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bde:	4b12      	ldr	r3, [pc, #72]	@ (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	490e      	ldr	r1, [pc, #56]	@ (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bf2:	f000 f821 	bl	8003c38 <HAL_RCC_GetSysClockFreq>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	091b      	lsrs	r3, r3, #4
 8003bfe:	f003 030f 	and.w	r3, r3, #15
 8003c02:	490a      	ldr	r1, [pc, #40]	@ (8003c2c <HAL_RCC_ClockConfig+0x1c0>)
 8003c04:	5ccb      	ldrb	r3, [r1, r3]
 8003c06:	fa22 f303 	lsr.w	r3, r2, r3
 8003c0a:	4a09      	ldr	r2, [pc, #36]	@ (8003c30 <HAL_RCC_ClockConfig+0x1c4>)
 8003c0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003c0e:	4b09      	ldr	r3, [pc, #36]	@ (8003c34 <HAL_RCC_ClockConfig+0x1c8>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7fc fefe 	bl	8000a14 <HAL_InitTick>

  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	40023c00 	.word	0x40023c00
 8003c28:	40023800 	.word	0x40023800
 8003c2c:	08007f0c 	.word	0x08007f0c
 8003c30:	20000000 	.word	0x20000000
 8003c34:	20000004 	.word	0x20000004

08003c38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c3c:	b090      	sub	sp, #64	@ 0x40
 8003c3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c50:	4b59      	ldr	r3, [pc, #356]	@ (8003db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f003 030c 	and.w	r3, r3, #12
 8003c58:	2b08      	cmp	r3, #8
 8003c5a:	d00d      	beq.n	8003c78 <HAL_RCC_GetSysClockFreq+0x40>
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	f200 80a1 	bhi.w	8003da4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d002      	beq.n	8003c6c <HAL_RCC_GetSysClockFreq+0x34>
 8003c66:	2b04      	cmp	r3, #4
 8003c68:	d003      	beq.n	8003c72 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c6a:	e09b      	b.n	8003da4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c6c:	4b53      	ldr	r3, [pc, #332]	@ (8003dbc <HAL_RCC_GetSysClockFreq+0x184>)
 8003c6e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c70:	e09b      	b.n	8003daa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c72:	4b53      	ldr	r3, [pc, #332]	@ (8003dc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c74:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c76:	e098      	b.n	8003daa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c78:	4b4f      	ldr	r3, [pc, #316]	@ (8003db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c80:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c82:	4b4d      	ldr	r3, [pc, #308]	@ (8003db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d028      	beq.n	8003ce0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c8e:	4b4a      	ldr	r3, [pc, #296]	@ (8003db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	099b      	lsrs	r3, r3, #6
 8003c94:	2200      	movs	r2, #0
 8003c96:	623b      	str	r3, [r7, #32]
 8003c98:	627a      	str	r2, [r7, #36]	@ 0x24
 8003c9a:	6a3b      	ldr	r3, [r7, #32]
 8003c9c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	4b47      	ldr	r3, [pc, #284]	@ (8003dc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ca4:	fb03 f201 	mul.w	r2, r3, r1
 8003ca8:	2300      	movs	r3, #0
 8003caa:	fb00 f303 	mul.w	r3, r0, r3
 8003cae:	4413      	add	r3, r2
 8003cb0:	4a43      	ldr	r2, [pc, #268]	@ (8003dc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003cb2:	fba0 1202 	umull	r1, r2, r0, r2
 8003cb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cb8:	460a      	mov	r2, r1
 8003cba:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003cbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cbe:	4413      	add	r3, r2
 8003cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	61bb      	str	r3, [r7, #24]
 8003cc8:	61fa      	str	r2, [r7, #28]
 8003cca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003cd2:	f7fc fa81 	bl	80001d8 <__aeabi_uldivmod>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	460b      	mov	r3, r1
 8003cda:	4613      	mov	r3, r2
 8003cdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cde:	e053      	b.n	8003d88 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ce0:	4b35      	ldr	r3, [pc, #212]	@ (8003db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	099b      	lsrs	r3, r3, #6
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	613b      	str	r3, [r7, #16]
 8003cea:	617a      	str	r2, [r7, #20]
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003cf2:	f04f 0b00 	mov.w	fp, #0
 8003cf6:	4652      	mov	r2, sl
 8003cf8:	465b      	mov	r3, fp
 8003cfa:	f04f 0000 	mov.w	r0, #0
 8003cfe:	f04f 0100 	mov.w	r1, #0
 8003d02:	0159      	lsls	r1, r3, #5
 8003d04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d08:	0150      	lsls	r0, r2, #5
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	ebb2 080a 	subs.w	r8, r2, sl
 8003d12:	eb63 090b 	sbc.w	r9, r3, fp
 8003d16:	f04f 0200 	mov.w	r2, #0
 8003d1a:	f04f 0300 	mov.w	r3, #0
 8003d1e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003d22:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003d26:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003d2a:	ebb2 0408 	subs.w	r4, r2, r8
 8003d2e:	eb63 0509 	sbc.w	r5, r3, r9
 8003d32:	f04f 0200 	mov.w	r2, #0
 8003d36:	f04f 0300 	mov.w	r3, #0
 8003d3a:	00eb      	lsls	r3, r5, #3
 8003d3c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d40:	00e2      	lsls	r2, r4, #3
 8003d42:	4614      	mov	r4, r2
 8003d44:	461d      	mov	r5, r3
 8003d46:	eb14 030a 	adds.w	r3, r4, sl
 8003d4a:	603b      	str	r3, [r7, #0]
 8003d4c:	eb45 030b 	adc.w	r3, r5, fp
 8003d50:	607b      	str	r3, [r7, #4]
 8003d52:	f04f 0200 	mov.w	r2, #0
 8003d56:	f04f 0300 	mov.w	r3, #0
 8003d5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d5e:	4629      	mov	r1, r5
 8003d60:	028b      	lsls	r3, r1, #10
 8003d62:	4621      	mov	r1, r4
 8003d64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d68:	4621      	mov	r1, r4
 8003d6a:	028a      	lsls	r2, r1, #10
 8003d6c:	4610      	mov	r0, r2
 8003d6e:	4619      	mov	r1, r3
 8003d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d72:	2200      	movs	r2, #0
 8003d74:	60bb      	str	r3, [r7, #8]
 8003d76:	60fa      	str	r2, [r7, #12]
 8003d78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d7c:	f7fc fa2c 	bl	80001d8 <__aeabi_uldivmod>
 8003d80:	4602      	mov	r2, r0
 8003d82:	460b      	mov	r3, r1
 8003d84:	4613      	mov	r3, r2
 8003d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003d88:	4b0b      	ldr	r3, [pc, #44]	@ (8003db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	0c1b      	lsrs	r3, r3, #16
 8003d8e:	f003 0303 	and.w	r3, r3, #3
 8003d92:	3301      	adds	r3, #1
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003d98:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003da2:	e002      	b.n	8003daa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003da4:	4b05      	ldr	r3, [pc, #20]	@ (8003dbc <HAL_RCC_GetSysClockFreq+0x184>)
 8003da6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003da8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3740      	adds	r7, #64	@ 0x40
 8003db0:	46bd      	mov	sp, r7
 8003db2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003db6:	bf00      	nop
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	00f42400 	.word	0x00f42400
 8003dc0:	017d7840 	.word	0x017d7840

08003dc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dc8:	4b03      	ldr	r3, [pc, #12]	@ (8003dd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dca:	681b      	ldr	r3, [r3, #0]
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	20000000 	.word	0x20000000

08003ddc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003de0:	f7ff fff0 	bl	8003dc4 <HAL_RCC_GetHCLKFreq>
 8003de4:	4602      	mov	r2, r0
 8003de6:	4b05      	ldr	r3, [pc, #20]	@ (8003dfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	0a9b      	lsrs	r3, r3, #10
 8003dec:	f003 0307 	and.w	r3, r3, #7
 8003df0:	4903      	ldr	r1, [pc, #12]	@ (8003e00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003df2:	5ccb      	ldrb	r3, [r1, r3]
 8003df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	40023800 	.word	0x40023800
 8003e00:	08007f1c 	.word	0x08007f1c

08003e04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e04:	b084      	sub	sp, #16
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b084      	sub	sp, #16
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
 8003e0e:	f107 001c 	add.w	r0, r7, #28
 8003e12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e16:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d123      	bne.n	8003e66 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e22:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003e32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003e46:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d105      	bne.n	8003e5a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f001 fae8 	bl	8005430 <USB_CoreReset>
 8003e60:	4603      	mov	r3, r0
 8003e62:	73fb      	strb	r3, [r7, #15]
 8003e64:	e01b      	b.n	8003e9e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f001 fadc 	bl	8005430 <USB_CoreReset>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003e7c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d106      	bne.n	8003e92 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e88:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003e90:	e005      	b.n	8003e9e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e96:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003e9e:	7fbb      	ldrb	r3, [r7, #30]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d10b      	bne.n	8003ebc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f043 0206 	orr.w	r2, r3, #6
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f043 0220 	orr.w	r2, r3, #32
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ec8:	b004      	add	sp, #16
 8003eca:	4770      	bx	lr

08003ecc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b087      	sub	sp, #28
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003eda:	79fb      	ldrb	r3, [r7, #7]
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d165      	bne.n	8003fac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	4a41      	ldr	r2, [pc, #260]	@ (8003fe8 <USB_SetTurnaroundTime+0x11c>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d906      	bls.n	8003ef6 <USB_SetTurnaroundTime+0x2a>
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	4a40      	ldr	r2, [pc, #256]	@ (8003fec <USB_SetTurnaroundTime+0x120>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d202      	bcs.n	8003ef6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003ef0:	230f      	movs	r3, #15
 8003ef2:	617b      	str	r3, [r7, #20]
 8003ef4:	e062      	b.n	8003fbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	4a3c      	ldr	r2, [pc, #240]	@ (8003fec <USB_SetTurnaroundTime+0x120>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d306      	bcc.n	8003f0c <USB_SetTurnaroundTime+0x40>
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	4a3b      	ldr	r2, [pc, #236]	@ (8003ff0 <USB_SetTurnaroundTime+0x124>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d202      	bcs.n	8003f0c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003f06:	230e      	movs	r3, #14
 8003f08:	617b      	str	r3, [r7, #20]
 8003f0a:	e057      	b.n	8003fbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	4a38      	ldr	r2, [pc, #224]	@ (8003ff0 <USB_SetTurnaroundTime+0x124>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d306      	bcc.n	8003f22 <USB_SetTurnaroundTime+0x56>
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	4a37      	ldr	r2, [pc, #220]	@ (8003ff4 <USB_SetTurnaroundTime+0x128>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d202      	bcs.n	8003f22 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003f1c:	230d      	movs	r3, #13
 8003f1e:	617b      	str	r3, [r7, #20]
 8003f20:	e04c      	b.n	8003fbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	4a33      	ldr	r2, [pc, #204]	@ (8003ff4 <USB_SetTurnaroundTime+0x128>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d306      	bcc.n	8003f38 <USB_SetTurnaroundTime+0x6c>
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	4a32      	ldr	r2, [pc, #200]	@ (8003ff8 <USB_SetTurnaroundTime+0x12c>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d802      	bhi.n	8003f38 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003f32:	230c      	movs	r3, #12
 8003f34:	617b      	str	r3, [r7, #20]
 8003f36:	e041      	b.n	8003fbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	4a2f      	ldr	r2, [pc, #188]	@ (8003ff8 <USB_SetTurnaroundTime+0x12c>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d906      	bls.n	8003f4e <USB_SetTurnaroundTime+0x82>
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	4a2e      	ldr	r2, [pc, #184]	@ (8003ffc <USB_SetTurnaroundTime+0x130>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d802      	bhi.n	8003f4e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003f48:	230b      	movs	r3, #11
 8003f4a:	617b      	str	r3, [r7, #20]
 8003f4c:	e036      	b.n	8003fbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	4a2a      	ldr	r2, [pc, #168]	@ (8003ffc <USB_SetTurnaroundTime+0x130>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d906      	bls.n	8003f64 <USB_SetTurnaroundTime+0x98>
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	4a29      	ldr	r2, [pc, #164]	@ (8004000 <USB_SetTurnaroundTime+0x134>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d802      	bhi.n	8003f64 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003f5e:	230a      	movs	r3, #10
 8003f60:	617b      	str	r3, [r7, #20]
 8003f62:	e02b      	b.n	8003fbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	4a26      	ldr	r2, [pc, #152]	@ (8004000 <USB_SetTurnaroundTime+0x134>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d906      	bls.n	8003f7a <USB_SetTurnaroundTime+0xae>
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	4a25      	ldr	r2, [pc, #148]	@ (8004004 <USB_SetTurnaroundTime+0x138>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d202      	bcs.n	8003f7a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003f74:	2309      	movs	r3, #9
 8003f76:	617b      	str	r3, [r7, #20]
 8003f78:	e020      	b.n	8003fbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	4a21      	ldr	r2, [pc, #132]	@ (8004004 <USB_SetTurnaroundTime+0x138>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d306      	bcc.n	8003f90 <USB_SetTurnaroundTime+0xc4>
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	4a20      	ldr	r2, [pc, #128]	@ (8004008 <USB_SetTurnaroundTime+0x13c>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d802      	bhi.n	8003f90 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003f8a:	2308      	movs	r3, #8
 8003f8c:	617b      	str	r3, [r7, #20]
 8003f8e:	e015      	b.n	8003fbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	4a1d      	ldr	r2, [pc, #116]	@ (8004008 <USB_SetTurnaroundTime+0x13c>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d906      	bls.n	8003fa6 <USB_SetTurnaroundTime+0xda>
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	4a1c      	ldr	r2, [pc, #112]	@ (800400c <USB_SetTurnaroundTime+0x140>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d202      	bcs.n	8003fa6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003fa0:	2307      	movs	r3, #7
 8003fa2:	617b      	str	r3, [r7, #20]
 8003fa4:	e00a      	b.n	8003fbc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003fa6:	2306      	movs	r3, #6
 8003fa8:	617b      	str	r3, [r7, #20]
 8003faa:	e007      	b.n	8003fbc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003fac:	79fb      	ldrb	r3, [r7, #7]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d102      	bne.n	8003fb8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003fb2:	2309      	movs	r3, #9
 8003fb4:	617b      	str	r3, [r7, #20]
 8003fb6:	e001      	b.n	8003fbc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003fb8:	2309      	movs	r3, #9
 8003fba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	68da      	ldr	r2, [r3, #12]
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	029b      	lsls	r3, r3, #10
 8003fd0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003fd4:	431a      	orrs	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	371c      	adds	r7, #28
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	00d8acbf 	.word	0x00d8acbf
 8003fec:	00e4e1c0 	.word	0x00e4e1c0
 8003ff0:	00f42400 	.word	0x00f42400
 8003ff4:	01067380 	.word	0x01067380
 8003ff8:	011a499f 	.word	0x011a499f
 8003ffc:	01312cff 	.word	0x01312cff
 8004000:	014ca43f 	.word	0x014ca43f
 8004004:	016e3600 	.word	0x016e3600
 8004008:	01a6ab1f 	.word	0x01a6ab1f
 800400c:	01e84800 	.word	0x01e84800

08004010 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f043 0201 	orr.w	r2, r3, #1
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004032:	b480      	push	{r7}
 8004034:	b083      	sub	sp, #12
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f023 0201 	bic.w	r2, r3, #1
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	460b      	mov	r3, r1
 800405e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004070:	78fb      	ldrb	r3, [r7, #3]
 8004072:	2b01      	cmp	r3, #1
 8004074:	d115      	bne.n	80040a2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004082:	200a      	movs	r0, #10
 8004084:	f7fc fd16 	bl	8000ab4 <HAL_Delay>
      ms += 10U;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	330a      	adds	r3, #10
 800408c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f001 f93f 	bl	8005312 <USB_GetMode>
 8004094:	4603      	mov	r3, r0
 8004096:	2b01      	cmp	r3, #1
 8004098:	d01e      	beq.n	80040d8 <USB_SetCurrentMode+0x84>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2bc7      	cmp	r3, #199	@ 0xc7
 800409e:	d9f0      	bls.n	8004082 <USB_SetCurrentMode+0x2e>
 80040a0:	e01a      	b.n	80040d8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80040a2:	78fb      	ldrb	r3, [r7, #3]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d115      	bne.n	80040d4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80040b4:	200a      	movs	r0, #10
 80040b6:	f7fc fcfd 	bl	8000ab4 <HAL_Delay>
      ms += 10U;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	330a      	adds	r3, #10
 80040be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f001 f926 	bl	8005312 <USB_GetMode>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d005      	beq.n	80040d8 <USB_SetCurrentMode+0x84>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2bc7      	cmp	r3, #199	@ 0xc7
 80040d0:	d9f0      	bls.n	80040b4 <USB_SetCurrentMode+0x60>
 80040d2:	e001      	b.n	80040d8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e005      	b.n	80040e4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2bc8      	cmp	r3, #200	@ 0xc8
 80040dc:	d101      	bne.n	80040e2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e000      	b.n	80040e4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80040ec:	b084      	sub	sp, #16
 80040ee:	b580      	push	{r7, lr}
 80040f0:	b086      	sub	sp, #24
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
 80040f6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80040fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80040fe:	2300      	movs	r3, #0
 8004100:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004106:	2300      	movs	r3, #0
 8004108:	613b      	str	r3, [r7, #16]
 800410a:	e009      	b.n	8004120 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	3340      	adds	r3, #64	@ 0x40
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	4413      	add	r3, r2
 8004116:	2200      	movs	r2, #0
 8004118:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	3301      	adds	r3, #1
 800411e:	613b      	str	r3, [r7, #16]
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	2b0e      	cmp	r3, #14
 8004124:	d9f2      	bls.n	800410c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004126:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800412a:	2b00      	cmp	r3, #0
 800412c:	d11c      	bne.n	8004168 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800413c:	f043 0302 	orr.w	r3, r3, #2
 8004140:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004146:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004152:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800415e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	639a      	str	r2, [r3, #56]	@ 0x38
 8004166:	e00b      	b.n	8004180 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800416c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004178:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004186:	461a      	mov	r2, r3
 8004188:	2300      	movs	r3, #0
 800418a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800418c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004190:	2b01      	cmp	r3, #1
 8004192:	d10d      	bne.n	80041b0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004194:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004198:	2b00      	cmp	r3, #0
 800419a:	d104      	bne.n	80041a6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800419c:	2100      	movs	r1, #0
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f968 	bl	8004474 <USB_SetDevSpeed>
 80041a4:	e008      	b.n	80041b8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80041a6:	2101      	movs	r1, #1
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 f963 	bl	8004474 <USB_SetDevSpeed>
 80041ae:	e003      	b.n	80041b8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80041b0:	2103      	movs	r1, #3
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 f95e 	bl	8004474 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80041b8:	2110      	movs	r1, #16
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f8fa 	bl	80043b4 <USB_FlushTxFifo>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d001      	beq.n	80041ca <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 f924 	bl	8004418 <USB_FlushRxFifo>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041e0:	461a      	mov	r2, r3
 80041e2:	2300      	movs	r3, #0
 80041e4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041ec:	461a      	mov	r2, r3
 80041ee:	2300      	movs	r3, #0
 80041f0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041f8:	461a      	mov	r2, r3
 80041fa:	2300      	movs	r3, #0
 80041fc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041fe:	2300      	movs	r3, #0
 8004200:	613b      	str	r3, [r7, #16]
 8004202:	e043      	b.n	800428c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	015a      	lsls	r2, r3, #5
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	4413      	add	r3, r2
 800420c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004216:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800421a:	d118      	bne.n	800424e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10a      	bne.n	8004238 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	015a      	lsls	r2, r3, #5
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	4413      	add	r3, r2
 800422a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800422e:	461a      	mov	r2, r3
 8004230:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004234:	6013      	str	r3, [r2, #0]
 8004236:	e013      	b.n	8004260 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	015a      	lsls	r2, r3, #5
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	4413      	add	r3, r2
 8004240:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004244:	461a      	mov	r2, r3
 8004246:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800424a:	6013      	str	r3, [r2, #0]
 800424c:	e008      	b.n	8004260 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	015a      	lsls	r2, r3, #5
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	4413      	add	r3, r2
 8004256:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800425a:	461a      	mov	r2, r3
 800425c:	2300      	movs	r3, #0
 800425e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	015a      	lsls	r2, r3, #5
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4413      	add	r3, r2
 8004268:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800426c:	461a      	mov	r2, r3
 800426e:	2300      	movs	r3, #0
 8004270:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	015a      	lsls	r2, r3, #5
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	4413      	add	r3, r2
 800427a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800427e:	461a      	mov	r2, r3
 8004280:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004284:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	3301      	adds	r3, #1
 800428a:	613b      	str	r3, [r7, #16]
 800428c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004290:	461a      	mov	r2, r3
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	4293      	cmp	r3, r2
 8004296:	d3b5      	bcc.n	8004204 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004298:	2300      	movs	r3, #0
 800429a:	613b      	str	r3, [r7, #16]
 800429c:	e043      	b.n	8004326 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	015a      	lsls	r2, r3, #5
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	4413      	add	r3, r2
 80042a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80042b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80042b4:	d118      	bne.n	80042e8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d10a      	bne.n	80042d2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	015a      	lsls	r2, r3, #5
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	4413      	add	r3, r2
 80042c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042c8:	461a      	mov	r2, r3
 80042ca:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80042ce:	6013      	str	r3, [r2, #0]
 80042d0:	e013      	b.n	80042fa <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	015a      	lsls	r2, r3, #5
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	4413      	add	r3, r2
 80042da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042de:	461a      	mov	r2, r3
 80042e0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80042e4:	6013      	str	r3, [r2, #0]
 80042e6:	e008      	b.n	80042fa <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	015a      	lsls	r2, r3, #5
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	4413      	add	r3, r2
 80042f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042f4:	461a      	mov	r2, r3
 80042f6:	2300      	movs	r3, #0
 80042f8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	015a      	lsls	r2, r3, #5
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	4413      	add	r3, r2
 8004302:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004306:	461a      	mov	r2, r3
 8004308:	2300      	movs	r3, #0
 800430a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	015a      	lsls	r2, r3, #5
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	4413      	add	r3, r2
 8004314:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004318:	461a      	mov	r2, r3
 800431a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800431e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	3301      	adds	r3, #1
 8004324:	613b      	str	r3, [r7, #16]
 8004326:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800432a:	461a      	mov	r2, r3
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	4293      	cmp	r3, r2
 8004330:	d3b5      	bcc.n	800429e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004340:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004344:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004352:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004354:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004358:	2b00      	cmp	r3, #0
 800435a:	d105      	bne.n	8004368 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	f043 0210 	orr.w	r2, r3, #16
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	699a      	ldr	r2, [r3, #24]
 800436c:	4b10      	ldr	r3, [pc, #64]	@ (80043b0 <USB_DevInit+0x2c4>)
 800436e:	4313      	orrs	r3, r2
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004374:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004378:	2b00      	cmp	r3, #0
 800437a:	d005      	beq.n	8004388 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	f043 0208 	orr.w	r2, r3, #8
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004388:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800438c:	2b01      	cmp	r3, #1
 800438e:	d107      	bne.n	80043a0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004398:	f043 0304 	orr.w	r3, r3, #4
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80043a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3718      	adds	r7, #24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043ac:	b004      	add	sp, #16
 80043ae:	4770      	bx	lr
 80043b0:	803c3800 	.word	0x803c3800

080043b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80043be:	2300      	movs	r3, #0
 80043c0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	3301      	adds	r3, #1
 80043c6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80043ce:	d901      	bls.n	80043d4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e01b      	b.n	800440c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	daf2      	bge.n	80043c2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80043dc:	2300      	movs	r3, #0
 80043de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	019b      	lsls	r3, r3, #6
 80043e4:	f043 0220 	orr.w	r2, r3, #32
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	3301      	adds	r3, #1
 80043f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80043f8:	d901      	bls.n	80043fe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e006      	b.n	800440c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	f003 0320 	and.w	r3, r3, #32
 8004406:	2b20      	cmp	r3, #32
 8004408:	d0f0      	beq.n	80043ec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	3714      	adds	r7, #20
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004420:	2300      	movs	r3, #0
 8004422:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	3301      	adds	r3, #1
 8004428:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004430:	d901      	bls.n	8004436 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e018      	b.n	8004468 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	2b00      	cmp	r3, #0
 800443c:	daf2      	bge.n	8004424 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800443e:	2300      	movs	r3, #0
 8004440:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2210      	movs	r2, #16
 8004446:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	3301      	adds	r3, #1
 800444c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004454:	d901      	bls.n	800445a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e006      	b.n	8004468 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	f003 0310 	and.w	r3, r3, #16
 8004462:	2b10      	cmp	r3, #16
 8004464:	d0f0      	beq.n	8004448 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	3714      	adds	r7, #20
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	460b      	mov	r3, r1
 800447e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	78fb      	ldrb	r3, [r7, #3]
 800448e:	68f9      	ldr	r1, [r7, #12]
 8004490:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004494:	4313      	orrs	r3, r2
 8004496:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3714      	adds	r7, #20
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr

080044a6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80044a6:	b480      	push	{r7}
 80044a8:	b087      	sub	sp, #28
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 0306 	and.w	r3, r3, #6
 80044be:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d102      	bne.n	80044cc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80044c6:	2300      	movs	r3, #0
 80044c8:	75fb      	strb	r3, [r7, #23]
 80044ca:	e00a      	b.n	80044e2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d002      	beq.n	80044d8 <USB_GetDevSpeed+0x32>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2b06      	cmp	r3, #6
 80044d6:	d102      	bne.n	80044de <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80044d8:	2302      	movs	r3, #2
 80044da:	75fb      	strb	r3, [r7, #23]
 80044dc:	e001      	b.n	80044e2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80044de:	230f      	movs	r3, #15
 80044e0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80044e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	371c      	adds	r7, #28
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b085      	sub	sp, #20
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	785b      	ldrb	r3, [r3, #1]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d13a      	bne.n	8004582 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004512:	69da      	ldr	r2, [r3, #28]
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	f003 030f 	and.w	r3, r3, #15
 800451c:	2101      	movs	r1, #1
 800451e:	fa01 f303 	lsl.w	r3, r1, r3
 8004522:	b29b      	uxth	r3, r3
 8004524:	68f9      	ldr	r1, [r7, #12]
 8004526:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800452a:	4313      	orrs	r3, r2
 800452c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	015a      	lsls	r2, r3, #5
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	4413      	add	r3, r2
 8004536:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d155      	bne.n	80045f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	015a      	lsls	r2, r3, #5
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	4413      	add	r3, r2
 800454c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	791b      	ldrb	r3, [r3, #4]
 800455e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004560:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	059b      	lsls	r3, r3, #22
 8004566:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004568:	4313      	orrs	r3, r2
 800456a:	68ba      	ldr	r2, [r7, #8]
 800456c:	0151      	lsls	r1, r2, #5
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	440a      	add	r2, r1
 8004572:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004576:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800457a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800457e:	6013      	str	r3, [r2, #0]
 8004580:	e036      	b.n	80045f0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004588:	69da      	ldr	r2, [r3, #28]
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	f003 030f 	and.w	r3, r3, #15
 8004592:	2101      	movs	r1, #1
 8004594:	fa01 f303 	lsl.w	r3, r1, r3
 8004598:	041b      	lsls	r3, r3, #16
 800459a:	68f9      	ldr	r1, [r7, #12]
 800459c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80045a0:	4313      	orrs	r3, r2
 80045a2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	015a      	lsls	r2, r3, #5
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	4413      	add	r3, r2
 80045ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d11a      	bne.n	80045f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	015a      	lsls	r2, r3, #5
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	4413      	add	r3, r2
 80045c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	791b      	ldrb	r3, [r3, #4]
 80045d4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80045d6:	430b      	orrs	r3, r1
 80045d8:	4313      	orrs	r3, r2
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	0151      	lsls	r1, r2, #5
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	440a      	add	r2, r1
 80045e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80045e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045ee:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3714      	adds	r7, #20
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
	...

08004600 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	785b      	ldrb	r3, [r3, #1]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d161      	bne.n	80046e0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	015a      	lsls	r2, r3, #5
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	4413      	add	r3, r2
 8004624:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800462e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004632:	d11f      	bne.n	8004674 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	015a      	lsls	r2, r3, #5
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4413      	add	r3, r2
 800463c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68ba      	ldr	r2, [r7, #8]
 8004644:	0151      	lsls	r1, r2, #5
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	440a      	add	r2, r1
 800464a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800464e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004652:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	015a      	lsls	r2, r3, #5
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	4413      	add	r3, r2
 800465c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	0151      	lsls	r1, r2, #5
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	440a      	add	r2, r1
 800466a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800466e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004672:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800467a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	f003 030f 	and.w	r3, r3, #15
 8004684:	2101      	movs	r1, #1
 8004686:	fa01 f303 	lsl.w	r3, r1, r3
 800468a:	b29b      	uxth	r3, r3
 800468c:	43db      	mvns	r3, r3
 800468e:	68f9      	ldr	r1, [r7, #12]
 8004690:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004694:	4013      	ands	r3, r2
 8004696:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800469e:	69da      	ldr	r2, [r3, #28]
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	f003 030f 	and.w	r3, r3, #15
 80046a8:	2101      	movs	r1, #1
 80046aa:	fa01 f303 	lsl.w	r3, r1, r3
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	43db      	mvns	r3, r3
 80046b2:	68f9      	ldr	r1, [r7, #12]
 80046b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80046b8:	4013      	ands	r3, r2
 80046ba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	015a      	lsls	r2, r3, #5
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	4413      	add	r3, r2
 80046c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	0159      	lsls	r1, r3, #5
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	440b      	add	r3, r1
 80046d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046d6:	4619      	mov	r1, r3
 80046d8:	4b35      	ldr	r3, [pc, #212]	@ (80047b0 <USB_DeactivateEndpoint+0x1b0>)
 80046da:	4013      	ands	r3, r2
 80046dc:	600b      	str	r3, [r1, #0]
 80046de:	e060      	b.n	80047a2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	015a      	lsls	r2, r3, #5
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	4413      	add	r3, r2
 80046e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80046f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80046f6:	d11f      	bne.n	8004738 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	015a      	lsls	r2, r3, #5
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4413      	add	r3, r2
 8004700:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68ba      	ldr	r2, [r7, #8]
 8004708:	0151      	lsls	r1, r2, #5
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	440a      	add	r2, r1
 800470e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004712:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004716:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	015a      	lsls	r2, r3, #5
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	4413      	add	r3, r2
 8004720:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	0151      	lsls	r1, r2, #5
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	440a      	add	r2, r1
 800472e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004732:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004736:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800473e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	f003 030f 	and.w	r3, r3, #15
 8004748:	2101      	movs	r1, #1
 800474a:	fa01 f303 	lsl.w	r3, r1, r3
 800474e:	041b      	lsls	r3, r3, #16
 8004750:	43db      	mvns	r3, r3
 8004752:	68f9      	ldr	r1, [r7, #12]
 8004754:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004758:	4013      	ands	r3, r2
 800475a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004762:	69da      	ldr	r2, [r3, #28]
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	f003 030f 	and.w	r3, r3, #15
 800476c:	2101      	movs	r1, #1
 800476e:	fa01 f303 	lsl.w	r3, r1, r3
 8004772:	041b      	lsls	r3, r3, #16
 8004774:	43db      	mvns	r3, r3
 8004776:	68f9      	ldr	r1, [r7, #12]
 8004778:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800477c:	4013      	ands	r3, r2
 800477e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	015a      	lsls	r2, r3, #5
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	4413      	add	r3, r2
 8004788:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	0159      	lsls	r1, r3, #5
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	440b      	add	r3, r1
 8004796:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800479a:	4619      	mov	r1, r3
 800479c:	4b05      	ldr	r3, [pc, #20]	@ (80047b4 <USB_DeactivateEndpoint+0x1b4>)
 800479e:	4013      	ands	r3, r2
 80047a0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3714      	adds	r7, #20
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr
 80047b0:	ec337800 	.word	0xec337800
 80047b4:	eff37800 	.word	0xeff37800

080047b8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b08a      	sub	sp, #40	@ 0x28
 80047bc:	af02      	add	r7, sp, #8
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	4613      	mov	r3, r2
 80047c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	785b      	ldrb	r3, [r3, #1]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	f040 817f 	bne.w	8004ad8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d132      	bne.n	8004848 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	015a      	lsls	r2, r3, #5
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	4413      	add	r3, r2
 80047ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	0151      	lsls	r1, r2, #5
 80047f4:	69fa      	ldr	r2, [r7, #28]
 80047f6:	440a      	add	r2, r1
 80047f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047fc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004800:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004804:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	015a      	lsls	r2, r3, #5
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	4413      	add	r3, r2
 800480e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	0151      	lsls	r1, r2, #5
 8004818:	69fa      	ldr	r2, [r7, #28]
 800481a:	440a      	add	r2, r1
 800481c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004820:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004824:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	015a      	lsls	r2, r3, #5
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	4413      	add	r3, r2
 800482e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	69ba      	ldr	r2, [r7, #24]
 8004836:	0151      	lsls	r1, r2, #5
 8004838:	69fa      	ldr	r2, [r7, #28]
 800483a:	440a      	add	r2, r1
 800483c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004840:	0cdb      	lsrs	r3, r3, #19
 8004842:	04db      	lsls	r3, r3, #19
 8004844:	6113      	str	r3, [r2, #16]
 8004846:	e097      	b.n	8004978 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	015a      	lsls	r2, r3, #5
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	4413      	add	r3, r2
 8004850:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	69ba      	ldr	r2, [r7, #24]
 8004858:	0151      	lsls	r1, r2, #5
 800485a:	69fa      	ldr	r2, [r7, #28]
 800485c:	440a      	add	r2, r1
 800485e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004862:	0cdb      	lsrs	r3, r3, #19
 8004864:	04db      	lsls	r3, r3, #19
 8004866:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	015a      	lsls	r2, r3, #5
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	4413      	add	r3, r2
 8004870:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	69ba      	ldr	r2, [r7, #24]
 8004878:	0151      	lsls	r1, r2, #5
 800487a:	69fa      	ldr	r2, [r7, #28]
 800487c:	440a      	add	r2, r1
 800487e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004882:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004886:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800488a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d11a      	bne.n	80048c8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	691a      	ldr	r2, [r3, #16]
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	429a      	cmp	r2, r3
 800489c:	d903      	bls.n	80048a6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	689a      	ldr	r2, [r3, #8]
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	015a      	lsls	r2, r3, #5
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	4413      	add	r3, r2
 80048ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	69ba      	ldr	r2, [r7, #24]
 80048b6:	0151      	lsls	r1, r2, #5
 80048b8:	69fa      	ldr	r2, [r7, #28]
 80048ba:	440a      	add	r2, r1
 80048bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80048c4:	6113      	str	r3, [r2, #16]
 80048c6:	e044      	b.n	8004952 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	691a      	ldr	r2, [r3, #16]
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	4413      	add	r3, r2
 80048d2:	1e5a      	subs	r2, r3, #1
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048dc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	015a      	lsls	r2, r3, #5
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	4413      	add	r3, r2
 80048e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048ea:	691a      	ldr	r2, [r3, #16]
 80048ec:	8afb      	ldrh	r3, [r7, #22]
 80048ee:	04d9      	lsls	r1, r3, #19
 80048f0:	4ba4      	ldr	r3, [pc, #656]	@ (8004b84 <USB_EPStartXfer+0x3cc>)
 80048f2:	400b      	ands	r3, r1
 80048f4:	69b9      	ldr	r1, [r7, #24]
 80048f6:	0148      	lsls	r0, r1, #5
 80048f8:	69f9      	ldr	r1, [r7, #28]
 80048fa:	4401      	add	r1, r0
 80048fc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004900:	4313      	orrs	r3, r2
 8004902:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	791b      	ldrb	r3, [r3, #4]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d122      	bne.n	8004952 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	015a      	lsls	r2, r3, #5
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	4413      	add	r3, r2
 8004914:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	69ba      	ldr	r2, [r7, #24]
 800491c:	0151      	lsls	r1, r2, #5
 800491e:	69fa      	ldr	r2, [r7, #28]
 8004920:	440a      	add	r2, r1
 8004922:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004926:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800492a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	015a      	lsls	r2, r3, #5
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	4413      	add	r3, r2
 8004934:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004938:	691a      	ldr	r2, [r3, #16]
 800493a:	8afb      	ldrh	r3, [r7, #22]
 800493c:	075b      	lsls	r3, r3, #29
 800493e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8004942:	69b9      	ldr	r1, [r7, #24]
 8004944:	0148      	lsls	r0, r1, #5
 8004946:	69f9      	ldr	r1, [r7, #28]
 8004948:	4401      	add	r1, r0
 800494a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800494e:	4313      	orrs	r3, r2
 8004950:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	015a      	lsls	r2, r3, #5
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	4413      	add	r3, r2
 800495a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800495e:	691a      	ldr	r2, [r3, #16]
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004968:	69b9      	ldr	r1, [r7, #24]
 800496a:	0148      	lsls	r0, r1, #5
 800496c:	69f9      	ldr	r1, [r7, #28]
 800496e:	4401      	add	r1, r0
 8004970:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004974:	4313      	orrs	r3, r2
 8004976:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004978:	79fb      	ldrb	r3, [r7, #7]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d14b      	bne.n	8004a16 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d009      	beq.n	800499a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	015a      	lsls	r2, r3, #5
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	4413      	add	r3, r2
 800498e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004992:	461a      	mov	r2, r3
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	69db      	ldr	r3, [r3, #28]
 8004998:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	791b      	ldrb	r3, [r3, #4]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d128      	bne.n	80049f4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d110      	bne.n	80049d4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	015a      	lsls	r2, r3, #5
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	4413      	add	r3, r2
 80049ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	69ba      	ldr	r2, [r7, #24]
 80049c2:	0151      	lsls	r1, r2, #5
 80049c4:	69fa      	ldr	r2, [r7, #28]
 80049c6:	440a      	add	r2, r1
 80049c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049cc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80049d0:	6013      	str	r3, [r2, #0]
 80049d2:	e00f      	b.n	80049f4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	015a      	lsls	r2, r3, #5
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	4413      	add	r3, r2
 80049dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	69ba      	ldr	r2, [r7, #24]
 80049e4:	0151      	lsls	r1, r2, #5
 80049e6:	69fa      	ldr	r2, [r7, #28]
 80049e8:	440a      	add	r2, r1
 80049ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049f2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	015a      	lsls	r2, r3, #5
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	69ba      	ldr	r2, [r7, #24]
 8004a04:	0151      	lsls	r1, r2, #5
 8004a06:	69fa      	ldr	r2, [r7, #28]
 8004a08:	440a      	add	r2, r1
 8004a0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a0e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004a12:	6013      	str	r3, [r2, #0]
 8004a14:	e166      	b.n	8004ce4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	015a      	lsls	r2, r3, #5
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	0151      	lsls	r1, r2, #5
 8004a28:	69fa      	ldr	r2, [r7, #28]
 8004a2a:	440a      	add	r2, r1
 8004a2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a30:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004a34:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	791b      	ldrb	r3, [r3, #4]
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d015      	beq.n	8004a6a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f000 814e 	beq.w	8004ce4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	f003 030f 	and.w	r3, r3, #15
 8004a58:	2101      	movs	r1, #1
 8004a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a5e:	69f9      	ldr	r1, [r7, #28]
 8004a60:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a64:	4313      	orrs	r3, r2
 8004a66:	634b      	str	r3, [r1, #52]	@ 0x34
 8004a68:	e13c      	b.n	8004ce4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d110      	bne.n	8004a9c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	015a      	lsls	r2, r3, #5
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	4413      	add	r3, r2
 8004a82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	69ba      	ldr	r2, [r7, #24]
 8004a8a:	0151      	lsls	r1, r2, #5
 8004a8c:	69fa      	ldr	r2, [r7, #28]
 8004a8e:	440a      	add	r2, r1
 8004a90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a94:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004a98:	6013      	str	r3, [r2, #0]
 8004a9a:	e00f      	b.n	8004abc <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	015a      	lsls	r2, r3, #5
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	69ba      	ldr	r2, [r7, #24]
 8004aac:	0151      	lsls	r1, r2, #5
 8004aae:	69fa      	ldr	r2, [r7, #28]
 8004ab0:	440a      	add	r2, r1
 8004ab2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ab6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004aba:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	68d9      	ldr	r1, [r3, #12]
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	781a      	ldrb	r2, [r3, #0]
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	b298      	uxth	r0, r3
 8004aca:	79fb      	ldrb	r3, [r7, #7]
 8004acc:	9300      	str	r3, [sp, #0]
 8004ace:	4603      	mov	r3, r0
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f000 f9b9 	bl	8004e48 <USB_WritePacket>
 8004ad6:	e105      	b.n	8004ce4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	015a      	lsls	r2, r3, #5
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	4413      	add	r3, r2
 8004ae0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	69ba      	ldr	r2, [r7, #24]
 8004ae8:	0151      	lsls	r1, r2, #5
 8004aea:	69fa      	ldr	r2, [r7, #28]
 8004aec:	440a      	add	r2, r1
 8004aee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004af2:	0cdb      	lsrs	r3, r3, #19
 8004af4:	04db      	lsls	r3, r3, #19
 8004af6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	015a      	lsls	r2, r3, #5
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	4413      	add	r3, r2
 8004b00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	69ba      	ldr	r2, [r7, #24]
 8004b08:	0151      	lsls	r1, r2, #5
 8004b0a:	69fa      	ldr	r2, [r7, #28]
 8004b0c:	440a      	add	r2, r1
 8004b0e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b12:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004b16:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004b1a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d132      	bne.n	8004b88 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d003      	beq.n	8004b32 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	689a      	ldr	r2, [r3, #8]
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	689a      	ldr	r2, [r3, #8]
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	015a      	lsls	r2, r3, #5
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	4413      	add	r3, r2
 8004b42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b46:	691a      	ldr	r2, [r3, #16]
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	6a1b      	ldr	r3, [r3, #32]
 8004b4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b50:	69b9      	ldr	r1, [r7, #24]
 8004b52:	0148      	lsls	r0, r1, #5
 8004b54:	69f9      	ldr	r1, [r7, #28]
 8004b56:	4401      	add	r1, r0
 8004b58:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	015a      	lsls	r2, r3, #5
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	4413      	add	r3, r2
 8004b68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	69ba      	ldr	r2, [r7, #24]
 8004b70:	0151      	lsls	r1, r2, #5
 8004b72:	69fa      	ldr	r2, [r7, #28]
 8004b74:	440a      	add	r2, r1
 8004b76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b7a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004b7e:	6113      	str	r3, [r2, #16]
 8004b80:	e062      	b.n	8004c48 <USB_EPStartXfer+0x490>
 8004b82:	bf00      	nop
 8004b84:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d123      	bne.n	8004bd8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	015a      	lsls	r2, r3, #5
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	4413      	add	r3, r2
 8004b98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b9c:	691a      	ldr	r2, [r3, #16]
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ba6:	69b9      	ldr	r1, [r7, #24]
 8004ba8:	0148      	lsls	r0, r1, #5
 8004baa:	69f9      	ldr	r1, [r7, #28]
 8004bac:	4401      	add	r1, r0
 8004bae:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	015a      	lsls	r2, r3, #5
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	0151      	lsls	r1, r2, #5
 8004bc8:	69fa      	ldr	r2, [r7, #28]
 8004bca:	440a      	add	r2, r1
 8004bcc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004bd0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004bd4:	6113      	str	r3, [r2, #16]
 8004bd6:	e037      	b.n	8004c48 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	691a      	ldr	r2, [r3, #16]
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	4413      	add	r3, r2
 8004be2:	1e5a      	subs	r2, r3, #1
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bec:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	8afa      	ldrh	r2, [r7, #22]
 8004bf4:	fb03 f202 	mul.w	r2, r3, r2
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	015a      	lsls	r2, r3, #5
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	4413      	add	r3, r2
 8004c04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c08:	691a      	ldr	r2, [r3, #16]
 8004c0a:	8afb      	ldrh	r3, [r7, #22]
 8004c0c:	04d9      	lsls	r1, r3, #19
 8004c0e:	4b38      	ldr	r3, [pc, #224]	@ (8004cf0 <USB_EPStartXfer+0x538>)
 8004c10:	400b      	ands	r3, r1
 8004c12:	69b9      	ldr	r1, [r7, #24]
 8004c14:	0148      	lsls	r0, r1, #5
 8004c16:	69f9      	ldr	r1, [r7, #28]
 8004c18:	4401      	add	r1, r0
 8004c1a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	015a      	lsls	r2, r3, #5
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	4413      	add	r3, r2
 8004c2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c2e:	691a      	ldr	r2, [r3, #16]
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	6a1b      	ldr	r3, [r3, #32]
 8004c34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c38:	69b9      	ldr	r1, [r7, #24]
 8004c3a:	0148      	lsls	r0, r1, #5
 8004c3c:	69f9      	ldr	r1, [r7, #28]
 8004c3e:	4401      	add	r1, r0
 8004c40:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004c44:	4313      	orrs	r3, r2
 8004c46:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004c48:	79fb      	ldrb	r3, [r7, #7]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d10d      	bne.n	8004c6a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d009      	beq.n	8004c6a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	68d9      	ldr	r1, [r3, #12]
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	015a      	lsls	r2, r3, #5
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	4413      	add	r3, r2
 8004c62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c66:	460a      	mov	r2, r1
 8004c68:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	791b      	ldrb	r3, [r3, #4]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d128      	bne.n	8004cc4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d110      	bne.n	8004ca4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	015a      	lsls	r2, r3, #5
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	4413      	add	r3, r2
 8004c8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	0151      	lsls	r1, r2, #5
 8004c94:	69fa      	ldr	r2, [r7, #28]
 8004c96:	440a      	add	r2, r1
 8004c98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c9c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004ca0:	6013      	str	r3, [r2, #0]
 8004ca2:	e00f      	b.n	8004cc4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	015a      	lsls	r2, r3, #5
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	4413      	add	r3, r2
 8004cac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	69ba      	ldr	r2, [r7, #24]
 8004cb4:	0151      	lsls	r1, r2, #5
 8004cb6:	69fa      	ldr	r2, [r7, #28]
 8004cb8:	440a      	add	r2, r1
 8004cba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004cbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cc2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	015a      	lsls	r2, r3, #5
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	4413      	add	r3, r2
 8004ccc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	69ba      	ldr	r2, [r7, #24]
 8004cd4:	0151      	lsls	r1, r2, #5
 8004cd6:	69fa      	ldr	r2, [r7, #28]
 8004cd8:	440a      	add	r2, r1
 8004cda:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004cde:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004ce2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3720      	adds	r7, #32
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	1ff80000 	.word	0x1ff80000

08004cf4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b087      	sub	sp, #28
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004d02:	2300      	movs	r3, #0
 8004d04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	785b      	ldrb	r3, [r3, #1]
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d14a      	bne.n	8004da8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	015a      	lsls	r2, r3, #5
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004d26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d2a:	f040 8086 	bne.w	8004e3a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	015a      	lsls	r2, r3, #5
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	4413      	add	r3, r2
 8004d38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	683a      	ldr	r2, [r7, #0]
 8004d40:	7812      	ldrb	r2, [r2, #0]
 8004d42:	0151      	lsls	r1, r2, #5
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	440a      	add	r2, r1
 8004d48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d4c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004d50:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	015a      	lsls	r2, r3, #5
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	683a      	ldr	r2, [r7, #0]
 8004d64:	7812      	ldrb	r2, [r2, #0]
 8004d66:	0151      	lsls	r1, r2, #5
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	440a      	add	r2, r1
 8004d6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d70:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004d74:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	3301      	adds	r3, #1
 8004d7a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d902      	bls.n	8004d8c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	75fb      	strb	r3, [r7, #23]
          break;
 8004d8a:	e056      	b.n	8004e3a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	015a      	lsls	r2, r3, #5
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	4413      	add	r3, r2
 8004d96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004da0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004da4:	d0e7      	beq.n	8004d76 <USB_EPStopXfer+0x82>
 8004da6:	e048      	b.n	8004e3a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	015a      	lsls	r2, r3, #5
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	4413      	add	r3, r2
 8004db2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004dbc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004dc0:	d13b      	bne.n	8004e3a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	015a      	lsls	r2, r3, #5
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	4413      	add	r3, r2
 8004dcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	683a      	ldr	r2, [r7, #0]
 8004dd4:	7812      	ldrb	r2, [r2, #0]
 8004dd6:	0151      	lsls	r1, r2, #5
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	440a      	add	r2, r1
 8004ddc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004de0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004de4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	015a      	lsls	r2, r3, #5
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	4413      	add	r3, r2
 8004df0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	683a      	ldr	r2, [r7, #0]
 8004df8:	7812      	ldrb	r2, [r2, #0]
 8004dfa:	0151      	lsls	r1, r2, #5
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	440a      	add	r2, r1
 8004e00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e04:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004e08:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d902      	bls.n	8004e20 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	75fb      	strb	r3, [r7, #23]
          break;
 8004e1e:	e00c      	b.n	8004e3a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	015a      	lsls	r2, r3, #5
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	4413      	add	r3, r2
 8004e2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e38:	d0e7      	beq.n	8004e0a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	371c      	adds	r7, #28
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b089      	sub	sp, #36	@ 0x24
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	4611      	mov	r1, r2
 8004e54:	461a      	mov	r2, r3
 8004e56:	460b      	mov	r3, r1
 8004e58:	71fb      	strb	r3, [r7, #7]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004e66:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d123      	bne.n	8004eb6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004e6e:	88bb      	ldrh	r3, [r7, #4]
 8004e70:	3303      	adds	r3, #3
 8004e72:	089b      	lsrs	r3, r3, #2
 8004e74:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004e76:	2300      	movs	r3, #0
 8004e78:	61bb      	str	r3, [r7, #24]
 8004e7a:	e018      	b.n	8004eae <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004e7c:	79fb      	ldrb	r3, [r7, #7]
 8004e7e:	031a      	lsls	r2, r3, #12
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	4413      	add	r3, r2
 8004e84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e88:	461a      	mov	r2, r3
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	3301      	adds	r3, #1
 8004e94:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	3301      	adds	r3, #1
 8004e9a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	3301      	adds	r3, #1
 8004eac:	61bb      	str	r3, [r7, #24]
 8004eae:	69ba      	ldr	r2, [r7, #24]
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d3e2      	bcc.n	8004e7c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3724      	adds	r7, #36	@ 0x24
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b08b      	sub	sp, #44	@ 0x2c
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004eda:	88fb      	ldrh	r3, [r7, #6]
 8004edc:	089b      	lsrs	r3, r3, #2
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004ee2:	88fb      	ldrh	r3, [r7, #6]
 8004ee4:	f003 0303 	and.w	r3, r3, #3
 8004ee8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004eea:	2300      	movs	r3, #0
 8004eec:	623b      	str	r3, [r7, #32]
 8004eee:	e014      	b.n	8004f1a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efa:	601a      	str	r2, [r3, #0]
    pDest++;
 8004efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efe:	3301      	adds	r3, #1
 8004f00:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f04:	3301      	adds	r3, #1
 8004f06:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f10:	3301      	adds	r3, #1
 8004f12:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004f14:	6a3b      	ldr	r3, [r7, #32]
 8004f16:	3301      	adds	r3, #1
 8004f18:	623b      	str	r3, [r7, #32]
 8004f1a:	6a3a      	ldr	r2, [r7, #32]
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d3e6      	bcc.n	8004ef0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004f22:	8bfb      	ldrh	r3, [r7, #30]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d01e      	beq.n	8004f66 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f32:	461a      	mov	r2, r3
 8004f34:	f107 0310 	add.w	r3, r7, #16
 8004f38:	6812      	ldr	r2, [r2, #0]
 8004f3a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	6a3b      	ldr	r3, [r7, #32]
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	00db      	lsls	r3, r3, #3
 8004f44:	fa22 f303 	lsr.w	r3, r2, r3
 8004f48:	b2da      	uxtb	r2, r3
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f4c:	701a      	strb	r2, [r3, #0]
      i++;
 8004f4e:	6a3b      	ldr	r3, [r7, #32]
 8004f50:	3301      	adds	r3, #1
 8004f52:	623b      	str	r3, [r7, #32]
      pDest++;
 8004f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f56:	3301      	adds	r3, #1
 8004f58:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004f5a:	8bfb      	ldrh	r3, [r7, #30]
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004f60:	8bfb      	ldrh	r3, [r7, #30]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1ea      	bne.n	8004f3c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	372c      	adds	r7, #44	@ 0x2c
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	785b      	ldrb	r3, [r3, #1]
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d12c      	bne.n	8004fea <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	015a      	lsls	r2, r3, #5
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	4413      	add	r3, r2
 8004f98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	db12      	blt.n	8004fc8 <USB_EPSetStall+0x54>
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00f      	beq.n	8004fc8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	015a      	lsls	r2, r3, #5
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	4413      	add	r3, r2
 8004fb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68ba      	ldr	r2, [r7, #8]
 8004fb8:	0151      	lsls	r1, r2, #5
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	440a      	add	r2, r1
 8004fbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004fc2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004fc6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	015a      	lsls	r2, r3, #5
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	4413      	add	r3, r2
 8004fd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68ba      	ldr	r2, [r7, #8]
 8004fd8:	0151      	lsls	r1, r2, #5
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	440a      	add	r2, r1
 8004fde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004fe2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004fe6:	6013      	str	r3, [r2, #0]
 8004fe8:	e02b      	b.n	8005042 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	015a      	lsls	r2, r3, #5
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	db12      	blt.n	8005022 <USB_EPSetStall+0xae>
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00f      	beq.n	8005022 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	015a      	lsls	r2, r3, #5
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	4413      	add	r3, r2
 800500a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	0151      	lsls	r1, r2, #5
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	440a      	add	r2, r1
 8005018:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800501c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005020:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	015a      	lsls	r2, r3, #5
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	4413      	add	r3, r2
 800502a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68ba      	ldr	r2, [r7, #8]
 8005032:	0151      	lsls	r1, r2, #5
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	440a      	add	r2, r1
 8005038:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800503c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005040:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	3714      	adds	r7, #20
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	785b      	ldrb	r3, [r3, #1]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d128      	bne.n	80050be <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	015a      	lsls	r2, r3, #5
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	4413      	add	r3, r2
 8005074:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68ba      	ldr	r2, [r7, #8]
 800507c:	0151      	lsls	r1, r2, #5
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	440a      	add	r2, r1
 8005082:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005086:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800508a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	791b      	ldrb	r3, [r3, #4]
 8005090:	2b03      	cmp	r3, #3
 8005092:	d003      	beq.n	800509c <USB_EPClearStall+0x4c>
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	791b      	ldrb	r3, [r3, #4]
 8005098:	2b02      	cmp	r3, #2
 800509a:	d138      	bne.n	800510e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	015a      	lsls	r2, r3, #5
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	4413      	add	r3, r2
 80050a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68ba      	ldr	r2, [r7, #8]
 80050ac:	0151      	lsls	r1, r2, #5
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	440a      	add	r2, r1
 80050b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050ba:	6013      	str	r3, [r2, #0]
 80050bc:	e027      	b.n	800510e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	015a      	lsls	r2, r3, #5
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	4413      	add	r3, r2
 80050c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68ba      	ldr	r2, [r7, #8]
 80050ce:	0151      	lsls	r1, r2, #5
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	440a      	add	r2, r1
 80050d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050d8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80050dc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	791b      	ldrb	r3, [r3, #4]
 80050e2:	2b03      	cmp	r3, #3
 80050e4:	d003      	beq.n	80050ee <USB_EPClearStall+0x9e>
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	791b      	ldrb	r3, [r3, #4]
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d10f      	bne.n	800510e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	015a      	lsls	r2, r3, #5
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	4413      	add	r3, r2
 80050f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68ba      	ldr	r2, [r7, #8]
 80050fe:	0151      	lsls	r1, r2, #5
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	440a      	add	r2, r1
 8005104:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005108:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800510c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3714      	adds	r7, #20
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	460b      	mov	r3, r1
 8005126:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800513a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800513e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	78fb      	ldrb	r3, [r7, #3]
 800514a:	011b      	lsls	r3, r3, #4
 800514c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005150:	68f9      	ldr	r1, [r7, #12]
 8005152:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005156:	4313      	orrs	r3, r2
 8005158:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	3714      	adds	r7, #20
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005168:	b480      	push	{r7}
 800516a:	b085      	sub	sp, #20
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005182:	f023 0303 	bic.w	r3, r3, #3
 8005186:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005196:	f023 0302 	bic.w	r3, r3, #2
 800519a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3714      	adds	r7, #20
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr

080051aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80051aa:	b480      	push	{r7}
 80051ac:	b085      	sub	sp, #20
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80051c4:	f023 0303 	bic.w	r3, r3, #3
 80051c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051d8:	f043 0302 	orr.w	r3, r3, #2
 80051dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3714      	adds	r7, #20
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	695b      	ldr	r3, [r3, #20]
 80051f8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	4013      	ands	r3, r2
 8005202:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005204:	68fb      	ldr	r3, [r7, #12]
}
 8005206:	4618      	mov	r0, r3
 8005208:	3714      	adds	r7, #20
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr

08005212 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005212:	b480      	push	{r7}
 8005214:	b085      	sub	sp, #20
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800522e:	69db      	ldr	r3, [r3, #28]
 8005230:	68ba      	ldr	r2, [r7, #8]
 8005232:	4013      	ands	r3, r2
 8005234:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	0c1b      	lsrs	r3, r3, #16
}
 800523a:	4618      	mov	r0, r3
 800523c:	3714      	adds	r7, #20
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr

08005246 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005246:	b480      	push	{r7}
 8005248:	b085      	sub	sp, #20
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005262:	69db      	ldr	r3, [r3, #28]
 8005264:	68ba      	ldr	r2, [r7, #8]
 8005266:	4013      	ands	r3, r2
 8005268:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	b29b      	uxth	r3, r3
}
 800526e:	4618      	mov	r0, r3
 8005270:	3714      	adds	r7, #20
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr

0800527a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800527a:	b480      	push	{r7}
 800527c:	b085      	sub	sp, #20
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
 8005282:	460b      	mov	r3, r1
 8005284:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800528a:	78fb      	ldrb	r3, [r7, #3]
 800528c:	015a      	lsls	r2, r3, #5
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	4413      	add	r3, r2
 8005292:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	68ba      	ldr	r2, [r7, #8]
 80052a4:	4013      	ands	r3, r2
 80052a6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80052a8:	68bb      	ldr	r3, [r7, #8]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr

080052b6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80052b6:	b480      	push	{r7}
 80052b8:	b087      	sub	sp, #28
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
 80052be:	460b      	mov	r3, r1
 80052c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052d8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80052da:	78fb      	ldrb	r3, [r7, #3]
 80052dc:	f003 030f 	and.w	r3, r3, #15
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	fa22 f303 	lsr.w	r3, r2, r3
 80052e6:	01db      	lsls	r3, r3, #7
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	693a      	ldr	r2, [r7, #16]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80052f0:	78fb      	ldrb	r3, [r7, #3]
 80052f2:	015a      	lsls	r2, r3, #5
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	4413      	add	r3, r2
 80052f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	693a      	ldr	r2, [r7, #16]
 8005300:	4013      	ands	r3, r2
 8005302:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005304:	68bb      	ldr	r3, [r7, #8]
}
 8005306:	4618      	mov	r0, r3
 8005308:	371c      	adds	r7, #28
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr

08005312 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005312:	b480      	push	{r7}
 8005314:	b083      	sub	sp, #12
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	f003 0301 	and.w	r3, r3, #1
}
 8005322:	4618      	mov	r0, r3
 8005324:	370c      	adds	r7, #12
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr

0800532e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800532e:	b480      	push	{r7}
 8005330:	b085      	sub	sp, #20
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005348:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800534c:	f023 0307 	bic.w	r3, r3, #7
 8005350:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005360:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005364:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	3714      	adds	r7, #20
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005374:	b480      	push	{r7}
 8005376:	b087      	sub	sp, #28
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	460b      	mov	r3, r1
 800537e:	607a      	str	r2, [r7, #4]
 8005380:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	333c      	adds	r3, #60	@ 0x3c
 800538a:	3304      	adds	r3, #4
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	4a26      	ldr	r2, [pc, #152]	@ (800542c <USB_EP0_OutStart+0xb8>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d90a      	bls.n	80053ae <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80053a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80053a8:	d101      	bne.n	80053ae <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80053aa:	2300      	movs	r3, #0
 80053ac:	e037      	b.n	800541e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053b4:	461a      	mov	r2, r3
 80053b6:	2300      	movs	r3, #0
 80053b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80053cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053dc:	f043 0318 	orr.w	r3, r3, #24
 80053e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053f0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80053f4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80053f6:	7afb      	ldrb	r3, [r7, #11]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d10f      	bne.n	800541c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005402:	461a      	mov	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005416:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800541a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	371c      	adds	r7, #28
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	4f54300a 	.word	0x4f54300a

08005430 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005438:	2300      	movs	r3, #0
 800543a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	3301      	adds	r3, #1
 8005440:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005448:	d901      	bls.n	800544e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e01b      	b.n	8005486 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	2b00      	cmp	r3, #0
 8005454:	daf2      	bge.n	800543c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005456:	2300      	movs	r3, #0
 8005458:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	f043 0201 	orr.w	r2, r3, #1
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	3301      	adds	r3, #1
 800546a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005472:	d901      	bls.n	8005478 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	e006      	b.n	8005486 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	f003 0301 	and.w	r3, r3, #1
 8005480:	2b01      	cmp	r3, #1
 8005482:	d0f0      	beq.n	8005466 <USB_CoreReset+0x36>

  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3714      	adds	r7, #20
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
	...

08005494 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	460b      	mov	r3, r1
 800549e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80054a0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80054a4:	f002 fc94 	bl	8007dd0 <USBD_static_malloc>
 80054a8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d109      	bne.n	80054c4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	32b0      	adds	r2, #176	@ 0xb0
 80054ba:	2100      	movs	r1, #0
 80054bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80054c0:	2302      	movs	r3, #2
 80054c2:	e0d4      	b.n	800566e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80054c4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80054c8:	2100      	movs	r1, #0
 80054ca:	68f8      	ldr	r0, [r7, #12]
 80054cc:	f002 fcc4 	bl	8007e58 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	32b0      	adds	r2, #176	@ 0xb0
 80054da:	68f9      	ldr	r1, [r7, #12]
 80054dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	32b0      	adds	r2, #176	@ 0xb0
 80054ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	7c1b      	ldrb	r3, [r3, #16]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d138      	bne.n	800556e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80054fc:	4b5e      	ldr	r3, [pc, #376]	@ (8005678 <USBD_CDC_Init+0x1e4>)
 80054fe:	7819      	ldrb	r1, [r3, #0]
 8005500:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005504:	2202      	movs	r2, #2
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f002 fb3f 	bl	8007b8a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800550c:	4b5a      	ldr	r3, [pc, #360]	@ (8005678 <USBD_CDC_Init+0x1e4>)
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	f003 020f 	and.w	r2, r3, #15
 8005514:	6879      	ldr	r1, [r7, #4]
 8005516:	4613      	mov	r3, r2
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	4413      	add	r3, r2
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	440b      	add	r3, r1
 8005520:	3324      	adds	r3, #36	@ 0x24
 8005522:	2201      	movs	r2, #1
 8005524:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005526:	4b55      	ldr	r3, [pc, #340]	@ (800567c <USBD_CDC_Init+0x1e8>)
 8005528:	7819      	ldrb	r1, [r3, #0]
 800552a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800552e:	2202      	movs	r2, #2
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f002 fb2a 	bl	8007b8a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005536:	4b51      	ldr	r3, [pc, #324]	@ (800567c <USBD_CDC_Init+0x1e8>)
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	f003 020f 	and.w	r2, r3, #15
 800553e:	6879      	ldr	r1, [r7, #4]
 8005540:	4613      	mov	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4413      	add	r3, r2
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	440b      	add	r3, r1
 800554a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800554e:	2201      	movs	r2, #1
 8005550:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005552:	4b4b      	ldr	r3, [pc, #300]	@ (8005680 <USBD_CDC_Init+0x1ec>)
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	f003 020f 	and.w	r2, r3, #15
 800555a:	6879      	ldr	r1, [r7, #4]
 800555c:	4613      	mov	r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	4413      	add	r3, r2
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	440b      	add	r3, r1
 8005566:	3326      	adds	r3, #38	@ 0x26
 8005568:	2210      	movs	r2, #16
 800556a:	801a      	strh	r2, [r3, #0]
 800556c:	e035      	b.n	80055da <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800556e:	4b42      	ldr	r3, [pc, #264]	@ (8005678 <USBD_CDC_Init+0x1e4>)
 8005570:	7819      	ldrb	r1, [r3, #0]
 8005572:	2340      	movs	r3, #64	@ 0x40
 8005574:	2202      	movs	r2, #2
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f002 fb07 	bl	8007b8a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800557c:	4b3e      	ldr	r3, [pc, #248]	@ (8005678 <USBD_CDC_Init+0x1e4>)
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	f003 020f 	and.w	r2, r3, #15
 8005584:	6879      	ldr	r1, [r7, #4]
 8005586:	4613      	mov	r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	4413      	add	r3, r2
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	440b      	add	r3, r1
 8005590:	3324      	adds	r3, #36	@ 0x24
 8005592:	2201      	movs	r2, #1
 8005594:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005596:	4b39      	ldr	r3, [pc, #228]	@ (800567c <USBD_CDC_Init+0x1e8>)
 8005598:	7819      	ldrb	r1, [r3, #0]
 800559a:	2340      	movs	r3, #64	@ 0x40
 800559c:	2202      	movs	r2, #2
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f002 faf3 	bl	8007b8a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80055a4:	4b35      	ldr	r3, [pc, #212]	@ (800567c <USBD_CDC_Init+0x1e8>)
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	f003 020f 	and.w	r2, r3, #15
 80055ac:	6879      	ldr	r1, [r7, #4]
 80055ae:	4613      	mov	r3, r2
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	4413      	add	r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	440b      	add	r3, r1
 80055b8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80055bc:	2201      	movs	r2, #1
 80055be:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80055c0:	4b2f      	ldr	r3, [pc, #188]	@ (8005680 <USBD_CDC_Init+0x1ec>)
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	f003 020f 	and.w	r2, r3, #15
 80055c8:	6879      	ldr	r1, [r7, #4]
 80055ca:	4613      	mov	r3, r2
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	4413      	add	r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	440b      	add	r3, r1
 80055d4:	3326      	adds	r3, #38	@ 0x26
 80055d6:	2210      	movs	r2, #16
 80055d8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80055da:	4b29      	ldr	r3, [pc, #164]	@ (8005680 <USBD_CDC_Init+0x1ec>)
 80055dc:	7819      	ldrb	r1, [r3, #0]
 80055de:	2308      	movs	r3, #8
 80055e0:	2203      	movs	r2, #3
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f002 fad1 	bl	8007b8a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80055e8:	4b25      	ldr	r3, [pc, #148]	@ (8005680 <USBD_CDC_Init+0x1ec>)
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	f003 020f 	and.w	r2, r3, #15
 80055f0:	6879      	ldr	r1, [r7, #4]
 80055f2:	4613      	mov	r3, r2
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	4413      	add	r3, r2
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	440b      	add	r3, r1
 80055fc:	3324      	adds	r3, #36	@ 0x24
 80055fe:	2201      	movs	r2, #1
 8005600:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2200      	movs	r2, #0
 8005606:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	33b0      	adds	r3, #176	@ 0xb0
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	4413      	add	r3, r2
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005634:	2b00      	cmp	r3, #0
 8005636:	d101      	bne.n	800563c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005638:	2302      	movs	r3, #2
 800563a:	e018      	b.n	800566e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	7c1b      	ldrb	r3, [r3, #16]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d10a      	bne.n	800565a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005644:	4b0d      	ldr	r3, [pc, #52]	@ (800567c <USBD_CDC_Init+0x1e8>)
 8005646:	7819      	ldrb	r1, [r3, #0]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800564e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f002 fb88 	bl	8007d68 <USBD_LL_PrepareReceive>
 8005658:	e008      	b.n	800566c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800565a:	4b08      	ldr	r3, [pc, #32]	@ (800567c <USBD_CDC_Init+0x1e8>)
 800565c:	7819      	ldrb	r1, [r3, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005664:	2340      	movs	r3, #64	@ 0x40
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f002 fb7e 	bl	8007d68 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3710      	adds	r7, #16
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	20000093 	.word	0x20000093
 800567c:	20000094 	.word	0x20000094
 8005680:	20000095 	.word	0x20000095

08005684 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	460b      	mov	r3, r1
 800568e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005690:	4b3a      	ldr	r3, [pc, #232]	@ (800577c <USBD_CDC_DeInit+0xf8>)
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	4619      	mov	r1, r3
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f002 fa9d 	bl	8007bd6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800569c:	4b37      	ldr	r3, [pc, #220]	@ (800577c <USBD_CDC_DeInit+0xf8>)
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	f003 020f 	and.w	r2, r3, #15
 80056a4:	6879      	ldr	r1, [r7, #4]
 80056a6:	4613      	mov	r3, r2
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	4413      	add	r3, r2
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	440b      	add	r3, r1
 80056b0:	3324      	adds	r3, #36	@ 0x24
 80056b2:	2200      	movs	r2, #0
 80056b4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80056b6:	4b32      	ldr	r3, [pc, #200]	@ (8005780 <USBD_CDC_DeInit+0xfc>)
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	4619      	mov	r1, r3
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f002 fa8a 	bl	8007bd6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80056c2:	4b2f      	ldr	r3, [pc, #188]	@ (8005780 <USBD_CDC_DeInit+0xfc>)
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	f003 020f 	and.w	r2, r3, #15
 80056ca:	6879      	ldr	r1, [r7, #4]
 80056cc:	4613      	mov	r3, r2
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	4413      	add	r3, r2
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	440b      	add	r3, r1
 80056d6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80056da:	2200      	movs	r2, #0
 80056dc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80056de:	4b29      	ldr	r3, [pc, #164]	@ (8005784 <USBD_CDC_DeInit+0x100>)
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	4619      	mov	r1, r3
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f002 fa76 	bl	8007bd6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80056ea:	4b26      	ldr	r3, [pc, #152]	@ (8005784 <USBD_CDC_DeInit+0x100>)
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	f003 020f 	and.w	r2, r3, #15
 80056f2:	6879      	ldr	r1, [r7, #4]
 80056f4:	4613      	mov	r3, r2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	4413      	add	r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	440b      	add	r3, r1
 80056fe:	3324      	adds	r3, #36	@ 0x24
 8005700:	2200      	movs	r2, #0
 8005702:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005704:	4b1f      	ldr	r3, [pc, #124]	@ (8005784 <USBD_CDC_DeInit+0x100>)
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	f003 020f 	and.w	r2, r3, #15
 800570c:	6879      	ldr	r1, [r7, #4]
 800570e:	4613      	mov	r3, r2
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	4413      	add	r3, r2
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	440b      	add	r3, r1
 8005718:	3326      	adds	r3, #38	@ 0x26
 800571a:	2200      	movs	r2, #0
 800571c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	32b0      	adds	r2, #176	@ 0xb0
 8005728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d01f      	beq.n	8005770 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	33b0      	adds	r3, #176	@ 0xb0
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	4413      	add	r3, r2
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	32b0      	adds	r2, #176	@ 0xb0
 800574e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005752:	4618      	mov	r0, r3
 8005754:	f002 fb4a 	bl	8007dec <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	32b0      	adds	r2, #176	@ 0xb0
 8005762:	2100      	movs	r1, #0
 8005764:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3708      	adds	r7, #8
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	20000093 	.word	0x20000093
 8005780:	20000094 	.word	0x20000094
 8005784:	20000095 	.word	0x20000095

08005788 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b086      	sub	sp, #24
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	32b0      	adds	r2, #176	@ 0xb0
 800579c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057a0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80057a2:	2300      	movs	r3, #0
 80057a4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80057a6:	2300      	movs	r3, #0
 80057a8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80057aa:	2300      	movs	r3, #0
 80057ac:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d101      	bne.n	80057b8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e0bf      	b.n	8005938 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d050      	beq.n	8005866 <USBD_CDC_Setup+0xde>
 80057c4:	2b20      	cmp	r3, #32
 80057c6:	f040 80af 	bne.w	8005928 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	88db      	ldrh	r3, [r3, #6]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d03a      	beq.n	8005848 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	b25b      	sxtb	r3, r3
 80057d8:	2b00      	cmp	r3, #0
 80057da:	da1b      	bge.n	8005814 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	33b0      	adds	r3, #176	@ 0xb0
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	4413      	add	r3, r2
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	683a      	ldr	r2, [r7, #0]
 80057f0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80057f2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80057f4:	683a      	ldr	r2, [r7, #0]
 80057f6:	88d2      	ldrh	r2, [r2, #6]
 80057f8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	88db      	ldrh	r3, [r3, #6]
 80057fe:	2b07      	cmp	r3, #7
 8005800:	bf28      	it	cs
 8005802:	2307      	movcs	r3, #7
 8005804:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	89fa      	ldrh	r2, [r7, #14]
 800580a:	4619      	mov	r1, r3
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f001 fd93 	bl	8007338 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005812:	e090      	b.n	8005936 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	785a      	ldrb	r2, [r3, #1]
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	88db      	ldrh	r3, [r3, #6]
 8005822:	2b3f      	cmp	r3, #63	@ 0x3f
 8005824:	d803      	bhi.n	800582e <USBD_CDC_Setup+0xa6>
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	88db      	ldrh	r3, [r3, #6]
 800582a:	b2da      	uxtb	r2, r3
 800582c:	e000      	b.n	8005830 <USBD_CDC_Setup+0xa8>
 800582e:	2240      	movs	r2, #64	@ 0x40
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005836:	6939      	ldr	r1, [r7, #16]
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800583e:	461a      	mov	r2, r3
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f001 fda5 	bl	8007390 <USBD_CtlPrepareRx>
      break;
 8005846:	e076      	b.n	8005936 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	33b0      	adds	r3, #176	@ 0xb0
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4413      	add	r3, r2
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	683a      	ldr	r2, [r7, #0]
 800585c:	7850      	ldrb	r0, [r2, #1]
 800585e:	2200      	movs	r2, #0
 8005860:	6839      	ldr	r1, [r7, #0]
 8005862:	4798      	blx	r3
      break;
 8005864:	e067      	b.n	8005936 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	785b      	ldrb	r3, [r3, #1]
 800586a:	2b0b      	cmp	r3, #11
 800586c:	d851      	bhi.n	8005912 <USBD_CDC_Setup+0x18a>
 800586e:	a201      	add	r2, pc, #4	@ (adr r2, 8005874 <USBD_CDC_Setup+0xec>)
 8005870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005874:	080058a5 	.word	0x080058a5
 8005878:	08005921 	.word	0x08005921
 800587c:	08005913 	.word	0x08005913
 8005880:	08005913 	.word	0x08005913
 8005884:	08005913 	.word	0x08005913
 8005888:	08005913 	.word	0x08005913
 800588c:	08005913 	.word	0x08005913
 8005890:	08005913 	.word	0x08005913
 8005894:	08005913 	.word	0x08005913
 8005898:	08005913 	.word	0x08005913
 800589c:	080058cf 	.word	0x080058cf
 80058a0:	080058f9 	.word	0x080058f9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	2b03      	cmp	r3, #3
 80058ae:	d107      	bne.n	80058c0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80058b0:	f107 030a 	add.w	r3, r7, #10
 80058b4:	2202      	movs	r2, #2
 80058b6:	4619      	mov	r1, r3
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f001 fd3d 	bl	8007338 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80058be:	e032      	b.n	8005926 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80058c0:	6839      	ldr	r1, [r7, #0]
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f001 fcbb 	bl	800723e <USBD_CtlError>
            ret = USBD_FAIL;
 80058c8:	2303      	movs	r3, #3
 80058ca:	75fb      	strb	r3, [r7, #23]
          break;
 80058cc:	e02b      	b.n	8005926 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	2b03      	cmp	r3, #3
 80058d8:	d107      	bne.n	80058ea <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80058da:	f107 030d 	add.w	r3, r7, #13
 80058de:	2201      	movs	r2, #1
 80058e0:	4619      	mov	r1, r3
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f001 fd28 	bl	8007338 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80058e8:	e01d      	b.n	8005926 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80058ea:	6839      	ldr	r1, [r7, #0]
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f001 fca6 	bl	800723e <USBD_CtlError>
            ret = USBD_FAIL;
 80058f2:	2303      	movs	r3, #3
 80058f4:	75fb      	strb	r3, [r7, #23]
          break;
 80058f6:	e016      	b.n	8005926 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	2b03      	cmp	r3, #3
 8005902:	d00f      	beq.n	8005924 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005904:	6839      	ldr	r1, [r7, #0]
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f001 fc99 	bl	800723e <USBD_CtlError>
            ret = USBD_FAIL;
 800590c:	2303      	movs	r3, #3
 800590e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005910:	e008      	b.n	8005924 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005912:	6839      	ldr	r1, [r7, #0]
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f001 fc92 	bl	800723e <USBD_CtlError>
          ret = USBD_FAIL;
 800591a:	2303      	movs	r3, #3
 800591c:	75fb      	strb	r3, [r7, #23]
          break;
 800591e:	e002      	b.n	8005926 <USBD_CDC_Setup+0x19e>
          break;
 8005920:	bf00      	nop
 8005922:	e008      	b.n	8005936 <USBD_CDC_Setup+0x1ae>
          break;
 8005924:	bf00      	nop
      }
      break;
 8005926:	e006      	b.n	8005936 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005928:	6839      	ldr	r1, [r7, #0]
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f001 fc87 	bl	800723e <USBD_CtlError>
      ret = USBD_FAIL;
 8005930:	2303      	movs	r3, #3
 8005932:	75fb      	strb	r3, [r7, #23]
      break;
 8005934:	bf00      	nop
  }

  return (uint8_t)ret;
 8005936:	7dfb      	ldrb	r3, [r7, #23]
}
 8005938:	4618      	mov	r0, r3
 800593a:	3718      	adds	r7, #24
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	460b      	mov	r3, r1
 800594a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8005952:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	32b0      	adds	r2, #176	@ 0xb0
 800595e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d101      	bne.n	800596a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005966:	2303      	movs	r3, #3
 8005968:	e065      	b.n	8005a36 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	32b0      	adds	r2, #176	@ 0xb0
 8005974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005978:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800597a:	78fb      	ldrb	r3, [r7, #3]
 800597c:	f003 020f 	and.w	r2, r3, #15
 8005980:	6879      	ldr	r1, [r7, #4]
 8005982:	4613      	mov	r3, r2
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	4413      	add	r3, r2
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	440b      	add	r3, r1
 800598c:	3318      	adds	r3, #24
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d02f      	beq.n	80059f4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005994:	78fb      	ldrb	r3, [r7, #3]
 8005996:	f003 020f 	and.w	r2, r3, #15
 800599a:	6879      	ldr	r1, [r7, #4]
 800599c:	4613      	mov	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	4413      	add	r3, r2
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	440b      	add	r3, r1
 80059a6:	3318      	adds	r3, #24
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	78fb      	ldrb	r3, [r7, #3]
 80059ac:	f003 010f 	and.w	r1, r3, #15
 80059b0:	68f8      	ldr	r0, [r7, #12]
 80059b2:	460b      	mov	r3, r1
 80059b4:	00db      	lsls	r3, r3, #3
 80059b6:	440b      	add	r3, r1
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	4403      	add	r3, r0
 80059bc:	331c      	adds	r3, #28
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	fbb2 f1f3 	udiv	r1, r2, r3
 80059c4:	fb01 f303 	mul.w	r3, r1, r3
 80059c8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d112      	bne.n	80059f4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80059ce:	78fb      	ldrb	r3, [r7, #3]
 80059d0:	f003 020f 	and.w	r2, r3, #15
 80059d4:	6879      	ldr	r1, [r7, #4]
 80059d6:	4613      	mov	r3, r2
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	4413      	add	r3, r2
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	440b      	add	r3, r1
 80059e0:	3318      	adds	r3, #24
 80059e2:	2200      	movs	r2, #0
 80059e4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80059e6:	78f9      	ldrb	r1, [r7, #3]
 80059e8:	2300      	movs	r3, #0
 80059ea:	2200      	movs	r2, #0
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f002 f99a 	bl	8007d26 <USBD_LL_Transmit>
 80059f2:	e01f      	b.n	8005a34 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	33b0      	adds	r3, #176	@ 0xb0
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	4413      	add	r3, r2
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d010      	beq.n	8005a34 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	33b0      	adds	r3, #176	@ 0xb0
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	4413      	add	r3, r2
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	68ba      	ldr	r2, [r7, #8]
 8005a26:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005a2a:	68ba      	ldr	r2, [r7, #8]
 8005a2c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005a30:	78fa      	ldrb	r2, [r7, #3]
 8005a32:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b084      	sub	sp, #16
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
 8005a46:	460b      	mov	r3, r1
 8005a48:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	32b0      	adds	r2, #176	@ 0xb0
 8005a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a58:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	32b0      	adds	r2, #176	@ 0xb0
 8005a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d101      	bne.n	8005a70 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e01a      	b.n	8005aa6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005a70:	78fb      	ldrb	r3, [r7, #3]
 8005a72:	4619      	mov	r1, r3
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f002 f998 	bl	8007daa <USBD_LL_GetRxDataSize>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	33b0      	adds	r3, #176	@ 0xb0
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	4413      	add	r3, r2
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005aa0:	4611      	mov	r1, r2
 8005aa2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3710      	adds	r7, #16
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}

08005aae <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005aae:	b580      	push	{r7, lr}
 8005ab0:	b084      	sub	sp, #16
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	32b0      	adds	r2, #176	@ 0xb0
 8005ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ac4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d101      	bne.n	8005ad0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e024      	b.n	8005b1a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	33b0      	adds	r3, #176	@ 0xb0
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	4413      	add	r3, r2
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d019      	beq.n	8005b18 <USBD_CDC_EP0_RxReady+0x6a>
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005aea:	2bff      	cmp	r3, #255	@ 0xff
 8005aec:	d014      	beq.n	8005b18 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	33b0      	adds	r3, #176	@ 0xb0
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	4413      	add	r3, r2
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8005b06:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005b0e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	22ff      	movs	r2, #255	@ 0xff
 8005b14:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
	...

08005b24 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b086      	sub	sp, #24
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005b2c:	2182      	movs	r1, #130	@ 0x82
 8005b2e:	4818      	ldr	r0, [pc, #96]	@ (8005b90 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005b30:	f000 fd4f 	bl	80065d2 <USBD_GetEpDesc>
 8005b34:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005b36:	2101      	movs	r1, #1
 8005b38:	4815      	ldr	r0, [pc, #84]	@ (8005b90 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005b3a:	f000 fd4a 	bl	80065d2 <USBD_GetEpDesc>
 8005b3e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005b40:	2181      	movs	r1, #129	@ 0x81
 8005b42:	4813      	ldr	r0, [pc, #76]	@ (8005b90 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005b44:	f000 fd45 	bl	80065d2 <USBD_GetEpDesc>
 8005b48:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d002      	beq.n	8005b56 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	2210      	movs	r2, #16
 8005b54:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d006      	beq.n	8005b6a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b64:	711a      	strb	r2, [r3, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d006      	beq.n	8005b7e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b78:	711a      	strb	r2, [r3, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2243      	movs	r2, #67	@ 0x43
 8005b82:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005b84:	4b02      	ldr	r3, [pc, #8]	@ (8005b90 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3718      	adds	r7, #24
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	20000050 	.word	0x20000050

08005b94 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b086      	sub	sp, #24
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005b9c:	2182      	movs	r1, #130	@ 0x82
 8005b9e:	4818      	ldr	r0, [pc, #96]	@ (8005c00 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005ba0:	f000 fd17 	bl	80065d2 <USBD_GetEpDesc>
 8005ba4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005ba6:	2101      	movs	r1, #1
 8005ba8:	4815      	ldr	r0, [pc, #84]	@ (8005c00 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005baa:	f000 fd12 	bl	80065d2 <USBD_GetEpDesc>
 8005bae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005bb0:	2181      	movs	r1, #129	@ 0x81
 8005bb2:	4813      	ldr	r0, [pc, #76]	@ (8005c00 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005bb4:	f000 fd0d 	bl	80065d2 <USBD_GetEpDesc>
 8005bb8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d002      	beq.n	8005bc6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	2210      	movs	r2, #16
 8005bc4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d006      	beq.n	8005bda <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	711a      	strb	r2, [r3, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f042 0202 	orr.w	r2, r2, #2
 8005bd8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d006      	beq.n	8005bee <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2200      	movs	r2, #0
 8005be4:	711a      	strb	r2, [r3, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f042 0202 	orr.w	r2, r2, #2
 8005bec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2243      	movs	r2, #67	@ 0x43
 8005bf2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005bf4:	4b02      	ldr	r3, [pc, #8]	@ (8005c00 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3718      	adds	r7, #24
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	20000050 	.word	0x20000050

08005c04 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b086      	sub	sp, #24
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005c0c:	2182      	movs	r1, #130	@ 0x82
 8005c0e:	4818      	ldr	r0, [pc, #96]	@ (8005c70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005c10:	f000 fcdf 	bl	80065d2 <USBD_GetEpDesc>
 8005c14:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005c16:	2101      	movs	r1, #1
 8005c18:	4815      	ldr	r0, [pc, #84]	@ (8005c70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005c1a:	f000 fcda 	bl	80065d2 <USBD_GetEpDesc>
 8005c1e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005c20:	2181      	movs	r1, #129	@ 0x81
 8005c22:	4813      	ldr	r0, [pc, #76]	@ (8005c70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005c24:	f000 fcd5 	bl	80065d2 <USBD_GetEpDesc>
 8005c28:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d002      	beq.n	8005c36 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	2210      	movs	r2, #16
 8005c34:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d006      	beq.n	8005c4a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c44:	711a      	strb	r2, [r3, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d006      	beq.n	8005c5e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c58:	711a      	strb	r2, [r3, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2243      	movs	r2, #67	@ 0x43
 8005c62:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005c64:	4b02      	ldr	r3, [pc, #8]	@ (8005c70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3718      	adds	r7, #24
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	20000050 	.word	0x20000050

08005c74 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	220a      	movs	r2, #10
 8005c80:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005c82:	4b03      	ldr	r3, [pc, #12]	@ (8005c90 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr
 8005c90:	2000000c 	.word	0x2000000c

08005c94 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d101      	bne.n	8005ca8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	e009      	b.n	8005cbc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	33b0      	adds	r3, #176	@ 0xb0
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	4413      	add	r3, r2
 8005cb6:	683a      	ldr	r2, [r7, #0]
 8005cb8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b087      	sub	sp, #28
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	32b0      	adds	r2, #176	@ 0xb0
 8005cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ce2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d101      	bne.n	8005cee <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e008      	b.n	8005d00 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	371c      	adds	r7, #28
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b085      	sub	sp, #20
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	32b0      	adds	r2, #176	@ 0xb0
 8005d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d24:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d101      	bne.n	8005d30 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e004      	b.n	8005d3a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	683a      	ldr	r2, [r7, #0]
 8005d34:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3714      	adds	r7, #20
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
	...

08005d48 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	32b0      	adds	r2, #176	@ 0xb0
 8005d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d5e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8005d60:	2301      	movs	r3, #1
 8005d62:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d101      	bne.n	8005d6e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	e025      	b.n	8005dba <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d11f      	bne.n	8005db8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005d80:	4b10      	ldr	r3, [pc, #64]	@ (8005dc4 <USBD_CDC_TransmitPacket+0x7c>)
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	f003 020f 	and.w	r2, r3, #15
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	4613      	mov	r3, r2
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	4413      	add	r3, r2
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	4403      	add	r3, r0
 8005d9a:	3318      	adds	r3, #24
 8005d9c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005d9e:	4b09      	ldr	r3, [pc, #36]	@ (8005dc4 <USBD_CDC_TransmitPacket+0x7c>)
 8005da0:	7819      	ldrb	r1, [r3, #0]
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f001 ffb9 	bl	8007d26 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005db4:	2300      	movs	r3, #0
 8005db6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	20000093 	.word	0x20000093

08005dc8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	32b0      	adds	r2, #176	@ 0xb0
 8005dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dde:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	32b0      	adds	r2, #176	@ 0xb0
 8005dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d101      	bne.n	8005df6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005df2:	2303      	movs	r3, #3
 8005df4:	e018      	b.n	8005e28 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	7c1b      	ldrb	r3, [r3, #16]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d10a      	bne.n	8005e14 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8005e30 <USBD_CDC_ReceivePacket+0x68>)
 8005e00:	7819      	ldrb	r1, [r3, #0]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005e08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f001 ffab 	bl	8007d68 <USBD_LL_PrepareReceive>
 8005e12:	e008      	b.n	8005e26 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005e14:	4b06      	ldr	r3, [pc, #24]	@ (8005e30 <USBD_CDC_ReceivePacket+0x68>)
 8005e16:	7819      	ldrb	r1, [r3, #0]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005e1e:	2340      	movs	r3, #64	@ 0x40
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f001 ffa1 	bl	8007d68 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3710      	adds	r7, #16
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	20000094 	.word	0x20000094

08005e34 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b086      	sub	sp, #24
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d101      	bne.n	8005e4c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	e01f      	b.n	8005e8c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d003      	beq.n	8005e72 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	68ba      	ldr	r2, [r7, #8]
 8005e6e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2201      	movs	r2, #1
 8005e76:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	79fa      	ldrb	r2, [r7, #7]
 8005e7e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005e80:	68f8      	ldr	r0, [r7, #12]
 8005e82:	f001 fe1b 	bl	8007abc <USBD_LL_Init>
 8005e86:	4603      	mov	r3, r0
 8005e88:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005e8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3718      	adds	r7, #24
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d101      	bne.n	8005eac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005ea8:	2303      	movs	r3, #3
 8005eaa:	e025      	b.n	8005ef8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	683a      	ldr	r2, [r7, #0]
 8005eb0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	32ae      	adds	r2, #174	@ 0xae
 8005ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d00f      	beq.n	8005ee8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	32ae      	adds	r2, #174	@ 0xae
 8005ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ed8:	f107 020e 	add.w	r2, r7, #14
 8005edc:	4610      	mov	r0, r2
 8005ede:	4798      	blx	r3
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8005eee:	1c5a      	adds	r2, r3, #1
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3710      	adds	r7, #16
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f001 fe23 	bl	8007b54 <USBD_LL_Start>
 8005f0e:	4603      	mov	r3, r0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3708      	adds	r7, #8
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005f20:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	370c      	adds	r7, #12
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr

08005f2e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b084      	sub	sp, #16
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
 8005f36:	460b      	mov	r3, r1
 8005f38:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d009      	beq.n	8005f5c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	78fa      	ldrb	r2, [r7, #3]
 8005f52:	4611      	mov	r1, r2
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	4798      	blx	r3
 8005f58:	4603      	mov	r3, r0
 8005f5a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3710      	adds	r7, #16
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b084      	sub	sp, #16
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
 8005f6e:	460b      	mov	r3, r1
 8005f70:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f72:	2300      	movs	r3, #0
 8005f74:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	78fa      	ldrb	r2, [r7, #3]
 8005f80:	4611      	mov	r1, r2
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	4798      	blx	r3
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d001      	beq.n	8005f90 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3710      	adds	r7, #16
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}

08005f9a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005f9a:	b580      	push	{r7, lr}
 8005f9c:	b084      	sub	sp, #16
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
 8005fa2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005faa:	6839      	ldr	r1, [r7, #0]
 8005fac:	4618      	mov	r0, r3
 8005fae:	f001 f90c 	bl	80071ca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005fce:	f003 031f 	and.w	r3, r3, #31
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d01a      	beq.n	800600c <USBD_LL_SetupStage+0x72>
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	d822      	bhi.n	8006020 <USBD_LL_SetupStage+0x86>
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d002      	beq.n	8005fe4 <USBD_LL_SetupStage+0x4a>
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d00a      	beq.n	8005ff8 <USBD_LL_SetupStage+0x5e>
 8005fe2:	e01d      	b.n	8006020 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005fea:	4619      	mov	r1, r3
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 fb63 	bl	80066b8 <USBD_StdDevReq>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	73fb      	strb	r3, [r7, #15]
      break;
 8005ff6:	e020      	b.n	800603a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005ffe:	4619      	mov	r1, r3
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 fbcb 	bl	800679c <USBD_StdItfReq>
 8006006:	4603      	mov	r3, r0
 8006008:	73fb      	strb	r3, [r7, #15]
      break;
 800600a:	e016      	b.n	800603a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006012:	4619      	mov	r1, r3
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 fc2d 	bl	8006874 <USBD_StdEPReq>
 800601a:	4603      	mov	r3, r0
 800601c:	73fb      	strb	r3, [r7, #15]
      break;
 800601e:	e00c      	b.n	800603a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006026:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800602a:	b2db      	uxtb	r3, r3
 800602c:	4619      	mov	r1, r3
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f001 fdf0 	bl	8007c14 <USBD_LL_StallEP>
 8006034:	4603      	mov	r3, r0
 8006036:	73fb      	strb	r3, [r7, #15]
      break;
 8006038:	bf00      	nop
  }

  return ret;
 800603a:	7bfb      	ldrb	r3, [r7, #15]
}
 800603c:	4618      	mov	r0, r3
 800603e:	3710      	adds	r7, #16
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b086      	sub	sp, #24
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	460b      	mov	r3, r1
 800604e:	607a      	str	r2, [r7, #4]
 8006050:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006052:	2300      	movs	r3, #0
 8006054:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006056:	7afb      	ldrb	r3, [r7, #11]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d16e      	bne.n	800613a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006062:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800606a:	2b03      	cmp	r3, #3
 800606c:	f040 8098 	bne.w	80061a0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	689a      	ldr	r2, [r3, #8]
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	429a      	cmp	r2, r3
 800607a:	d913      	bls.n	80060a4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	689a      	ldr	r2, [r3, #8]
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	1ad2      	subs	r2, r2, r3
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	68da      	ldr	r2, [r3, #12]
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	4293      	cmp	r3, r2
 8006094:	bf28      	it	cs
 8006096:	4613      	movcs	r3, r2
 8006098:	461a      	mov	r2, r3
 800609a:	6879      	ldr	r1, [r7, #4]
 800609c:	68f8      	ldr	r0, [r7, #12]
 800609e:	f001 f994 	bl	80073ca <USBD_CtlContinueRx>
 80060a2:	e07d      	b.n	80061a0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80060aa:	f003 031f 	and.w	r3, r3, #31
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	d014      	beq.n	80060dc <USBD_LL_DataOutStage+0x98>
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d81d      	bhi.n	80060f2 <USBD_LL_DataOutStage+0xae>
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d002      	beq.n	80060c0 <USBD_LL_DataOutStage+0x7c>
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d003      	beq.n	80060c6 <USBD_LL_DataOutStage+0x82>
 80060be:	e018      	b.n	80060f2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80060c0:	2300      	movs	r3, #0
 80060c2:	75bb      	strb	r3, [r7, #22]
            break;
 80060c4:	e018      	b.n	80060f8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	4619      	mov	r1, r3
 80060d0:	68f8      	ldr	r0, [r7, #12]
 80060d2:	f000 fa64 	bl	800659e <USBD_CoreFindIF>
 80060d6:	4603      	mov	r3, r0
 80060d8:	75bb      	strb	r3, [r7, #22]
            break;
 80060da:	e00d      	b.n	80060f8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	4619      	mov	r1, r3
 80060e6:	68f8      	ldr	r0, [r7, #12]
 80060e8:	f000 fa66 	bl	80065b8 <USBD_CoreFindEP>
 80060ec:	4603      	mov	r3, r0
 80060ee:	75bb      	strb	r3, [r7, #22]
            break;
 80060f0:	e002      	b.n	80060f8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80060f2:	2300      	movs	r3, #0
 80060f4:	75bb      	strb	r3, [r7, #22]
            break;
 80060f6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80060f8:	7dbb      	ldrb	r3, [r7, #22]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d119      	bne.n	8006132 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006104:	b2db      	uxtb	r3, r3
 8006106:	2b03      	cmp	r3, #3
 8006108:	d113      	bne.n	8006132 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800610a:	7dba      	ldrb	r2, [r7, #22]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	32ae      	adds	r2, #174	@ 0xae
 8006110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d00b      	beq.n	8006132 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800611a:	7dba      	ldrb	r2, [r7, #22]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006122:	7dba      	ldrb	r2, [r7, #22]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	32ae      	adds	r2, #174	@ 0xae
 8006128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	68f8      	ldr	r0, [r7, #12]
 8006130:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f001 f95a 	bl	80073ec <USBD_CtlSendStatus>
 8006138:	e032      	b.n	80061a0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800613a:	7afb      	ldrb	r3, [r7, #11]
 800613c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006140:	b2db      	uxtb	r3, r3
 8006142:	4619      	mov	r1, r3
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f000 fa37 	bl	80065b8 <USBD_CoreFindEP>
 800614a:	4603      	mov	r3, r0
 800614c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800614e:	7dbb      	ldrb	r3, [r7, #22]
 8006150:	2bff      	cmp	r3, #255	@ 0xff
 8006152:	d025      	beq.n	80061a0 <USBD_LL_DataOutStage+0x15c>
 8006154:	7dbb      	ldrb	r3, [r7, #22]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d122      	bne.n	80061a0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006160:	b2db      	uxtb	r3, r3
 8006162:	2b03      	cmp	r3, #3
 8006164:	d117      	bne.n	8006196 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006166:	7dba      	ldrb	r2, [r7, #22]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	32ae      	adds	r2, #174	@ 0xae
 800616c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006170:	699b      	ldr	r3, [r3, #24]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00f      	beq.n	8006196 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006176:	7dba      	ldrb	r2, [r7, #22]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800617e:	7dba      	ldrb	r2, [r7, #22]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	32ae      	adds	r2, #174	@ 0xae
 8006184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	7afa      	ldrb	r2, [r7, #11]
 800618c:	4611      	mov	r1, r2
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	4798      	blx	r3
 8006192:	4603      	mov	r3, r0
 8006194:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006196:	7dfb      	ldrb	r3, [r7, #23]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d001      	beq.n	80061a0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800619c:	7dfb      	ldrb	r3, [r7, #23]
 800619e:	e000      	b.n	80061a2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3718      	adds	r7, #24
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b086      	sub	sp, #24
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	60f8      	str	r0, [r7, #12]
 80061b2:	460b      	mov	r3, r1
 80061b4:	607a      	str	r2, [r7, #4]
 80061b6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80061b8:	7afb      	ldrb	r3, [r7, #11]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d16f      	bne.n	800629e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	3314      	adds	r3, #20
 80061c2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80061ca:	2b02      	cmp	r3, #2
 80061cc:	d15a      	bne.n	8006284 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	689a      	ldr	r2, [r3, #8]
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d914      	bls.n	8006204 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	689a      	ldr	r2, [r3, #8]
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	1ad2      	subs	r2, r2, r3
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	461a      	mov	r2, r3
 80061ee:	6879      	ldr	r1, [r7, #4]
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f001 f8bc 	bl	800736e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80061f6:	2300      	movs	r3, #0
 80061f8:	2200      	movs	r2, #0
 80061fa:	2100      	movs	r1, #0
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f001 fdb3 	bl	8007d68 <USBD_LL_PrepareReceive>
 8006202:	e03f      	b.n	8006284 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	68da      	ldr	r2, [r3, #12]
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	429a      	cmp	r2, r3
 800620e:	d11c      	bne.n	800624a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	685a      	ldr	r2, [r3, #4]
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006218:	429a      	cmp	r2, r3
 800621a:	d316      	bcc.n	800624a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	685a      	ldr	r2, [r3, #4]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006226:	429a      	cmp	r2, r3
 8006228:	d20f      	bcs.n	800624a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800622a:	2200      	movs	r2, #0
 800622c:	2100      	movs	r1, #0
 800622e:	68f8      	ldr	r0, [r7, #12]
 8006230:	f001 f89d 	bl	800736e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800623c:	2300      	movs	r3, #0
 800623e:	2200      	movs	r2, #0
 8006240:	2100      	movs	r1, #0
 8006242:	68f8      	ldr	r0, [r7, #12]
 8006244:	f001 fd90 	bl	8007d68 <USBD_LL_PrepareReceive>
 8006248:	e01c      	b.n	8006284 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006250:	b2db      	uxtb	r3, r3
 8006252:	2b03      	cmp	r3, #3
 8006254:	d10f      	bne.n	8006276 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d009      	beq.n	8006276 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2200      	movs	r2, #0
 8006266:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006276:	2180      	movs	r1, #128	@ 0x80
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	f001 fccb 	bl	8007c14 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800627e:	68f8      	ldr	r0, [r7, #12]
 8006280:	f001 f8c7 	bl	8007412 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d03a      	beq.n	8006304 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f7ff fe42 	bl	8005f18 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2200      	movs	r2, #0
 8006298:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800629c:	e032      	b.n	8006304 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800629e:	7afb      	ldrb	r3, [r7, #11]
 80062a0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	4619      	mov	r1, r3
 80062a8:	68f8      	ldr	r0, [r7, #12]
 80062aa:	f000 f985 	bl	80065b8 <USBD_CoreFindEP>
 80062ae:	4603      	mov	r3, r0
 80062b0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80062b2:	7dfb      	ldrb	r3, [r7, #23]
 80062b4:	2bff      	cmp	r3, #255	@ 0xff
 80062b6:	d025      	beq.n	8006304 <USBD_LL_DataInStage+0x15a>
 80062b8:	7dfb      	ldrb	r3, [r7, #23]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d122      	bne.n	8006304 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	2b03      	cmp	r3, #3
 80062c8:	d11c      	bne.n	8006304 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80062ca:	7dfa      	ldrb	r2, [r7, #23]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	32ae      	adds	r2, #174	@ 0xae
 80062d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062d4:	695b      	ldr	r3, [r3, #20]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d014      	beq.n	8006304 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80062da:	7dfa      	ldrb	r2, [r7, #23]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80062e2:	7dfa      	ldrb	r2, [r7, #23]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	32ae      	adds	r2, #174	@ 0xae
 80062e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062ec:	695b      	ldr	r3, [r3, #20]
 80062ee:	7afa      	ldrb	r2, [r7, #11]
 80062f0:	4611      	mov	r1, r2
 80062f2:	68f8      	ldr	r0, [r7, #12]
 80062f4:	4798      	blx	r3
 80062f6:	4603      	mov	r3, r0
 80062f8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80062fa:	7dbb      	ldrb	r3, [r7, #22]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d001      	beq.n	8006304 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006300:	7dbb      	ldrb	r3, [r7, #22]
 8006302:	e000      	b.n	8006306 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3718      	adds	r7, #24
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800630e:	b580      	push	{r7, lr}
 8006310:	b084      	sub	sp, #16
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006316:	2300      	movs	r3, #0
 8006318:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2201      	movs	r2, #1
 800631e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006346:	2b00      	cmp	r3, #0
 8006348:	d014      	beq.n	8006374 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00e      	beq.n	8006374 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	6852      	ldr	r2, [r2, #4]
 8006362:	b2d2      	uxtb	r2, r2
 8006364:	4611      	mov	r1, r2
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	4798      	blx	r3
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d001      	beq.n	8006374 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006370:	2303      	movs	r3, #3
 8006372:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006374:	2340      	movs	r3, #64	@ 0x40
 8006376:	2200      	movs	r2, #0
 8006378:	2100      	movs	r1, #0
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f001 fc05 	bl	8007b8a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2240      	movs	r2, #64	@ 0x40
 800638c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006390:	2340      	movs	r3, #64	@ 0x40
 8006392:	2200      	movs	r2, #0
 8006394:	2180      	movs	r1, #128	@ 0x80
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f001 fbf7 	bl	8007b8a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2240      	movs	r2, #64	@ 0x40
 80063a6:	621a      	str	r2, [r3, #32]

  return ret;
 80063a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3710      	adds	r7, #16
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}

080063b2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80063b2:	b480      	push	{r7}
 80063b4:	b083      	sub	sp, #12
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
 80063ba:	460b      	mov	r3, r1
 80063bc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	78fa      	ldrb	r2, [r7, #3]
 80063c2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	370c      	adds	r7, #12
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr

080063d2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80063d2:	b480      	push	{r7}
 80063d4:	b083      	sub	sp, #12
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b04      	cmp	r3, #4
 80063e4:	d006      	beq.n	80063f4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063ec:	b2da      	uxtb	r2, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2204      	movs	r2, #4
 80063f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	370c      	adds	r7, #12
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr

0800640a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800640a:	b480      	push	{r7}
 800640c:	b083      	sub	sp, #12
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006418:	b2db      	uxtb	r3, r3
 800641a:	2b04      	cmp	r3, #4
 800641c:	d106      	bne.n	800642c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006424:	b2da      	uxtb	r2, r3
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	370c      	adds	r7, #12
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr

0800643a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800643a:	b580      	push	{r7, lr}
 800643c:	b082      	sub	sp, #8
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006448:	b2db      	uxtb	r3, r3
 800644a:	2b03      	cmp	r3, #3
 800644c:	d110      	bne.n	8006470 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006454:	2b00      	cmp	r3, #0
 8006456:	d00b      	beq.n	8006470 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800645e:	69db      	ldr	r3, [r3, #28]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d005      	beq.n	8006470 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800646a:	69db      	ldr	r3, [r3, #28]
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3708      	adds	r7, #8
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}

0800647a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800647a:	b580      	push	{r7, lr}
 800647c:	b082      	sub	sp, #8
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
 8006482:	460b      	mov	r3, r1
 8006484:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	32ae      	adds	r2, #174	@ 0xae
 8006490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d101      	bne.n	800649c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006498:	2303      	movs	r3, #3
 800649a:	e01c      	b.n	80064d6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	2b03      	cmp	r3, #3
 80064a6:	d115      	bne.n	80064d4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	32ae      	adds	r2, #174	@ 0xae
 80064b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064b6:	6a1b      	ldr	r3, [r3, #32]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d00b      	beq.n	80064d4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	32ae      	adds	r2, #174	@ 0xae
 80064c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064ca:	6a1b      	ldr	r3, [r3, #32]
 80064cc:	78fa      	ldrb	r2, [r7, #3]
 80064ce:	4611      	mov	r1, r2
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3708      	adds	r7, #8
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}

080064de <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80064de:	b580      	push	{r7, lr}
 80064e0:	b082      	sub	sp, #8
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
 80064e6:	460b      	mov	r3, r1
 80064e8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	32ae      	adds	r2, #174	@ 0xae
 80064f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d101      	bne.n	8006500 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80064fc:	2303      	movs	r3, #3
 80064fe:	e01c      	b.n	800653a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006506:	b2db      	uxtb	r3, r3
 8006508:	2b03      	cmp	r3, #3
 800650a:	d115      	bne.n	8006538 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	32ae      	adds	r2, #174	@ 0xae
 8006516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800651a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00b      	beq.n	8006538 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	32ae      	adds	r2, #174	@ 0xae
 800652a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800652e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006530:	78fa      	ldrb	r2, [r7, #3]
 8006532:	4611      	mov	r1, r2
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3708      	adds	r7, #8
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}

08006542 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006542:	b480      	push	{r7}
 8006544:	b083      	sub	sp, #12
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800654a:	2300      	movs	r3, #0
}
 800654c:	4618      	mov	r0, r3
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006560:	2300      	movs	r3, #0
 8006562:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00e      	beq.n	8006594 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	6852      	ldr	r2, [r2, #4]
 8006582:	b2d2      	uxtb	r2, r2
 8006584:	4611      	mov	r1, r2
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	4798      	blx	r3
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d001      	beq.n	8006594 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006590:	2303      	movs	r3, #3
 8006592:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006594:	7bfb      	ldrb	r3, [r7, #15]
}
 8006596:	4618      	mov	r0, r3
 8006598:	3710      	adds	r7, #16
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}

0800659e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800659e:	b480      	push	{r7}
 80065a0:	b083      	sub	sp, #12
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
 80065a6:	460b      	mov	r3, r1
 80065a8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80065aa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	460b      	mov	r3, r1
 80065c2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80065c4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	370c      	adds	r7, #12
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr

080065d2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80065d2:	b580      	push	{r7, lr}
 80065d4:	b086      	sub	sp, #24
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
 80065da:	460b      	mov	r3, r1
 80065dc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80065e6:	2300      	movs	r3, #0
 80065e8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	885b      	ldrh	r3, [r3, #2]
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	7812      	ldrb	r2, [r2, #0]
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d91f      	bls.n	8006638 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80065fe:	e013      	b.n	8006628 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006600:	f107 030a 	add.w	r3, r7, #10
 8006604:	4619      	mov	r1, r3
 8006606:	6978      	ldr	r0, [r7, #20]
 8006608:	f000 f81b 	bl	8006642 <USBD_GetNextDesc>
 800660c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	785b      	ldrb	r3, [r3, #1]
 8006612:	2b05      	cmp	r3, #5
 8006614:	d108      	bne.n	8006628 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	789b      	ldrb	r3, [r3, #2]
 800661e:	78fa      	ldrb	r2, [r7, #3]
 8006620:	429a      	cmp	r2, r3
 8006622:	d008      	beq.n	8006636 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006624:	2300      	movs	r3, #0
 8006626:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	885b      	ldrh	r3, [r3, #2]
 800662c:	b29a      	uxth	r2, r3
 800662e:	897b      	ldrh	r3, [r7, #10]
 8006630:	429a      	cmp	r2, r3
 8006632:	d8e5      	bhi.n	8006600 <USBD_GetEpDesc+0x2e>
 8006634:	e000      	b.n	8006638 <USBD_GetEpDesc+0x66>
          break;
 8006636:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006638:	693b      	ldr	r3, [r7, #16]
}
 800663a:	4618      	mov	r0, r3
 800663c:	3718      	adds	r7, #24
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}

08006642 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006642:	b480      	push	{r7}
 8006644:	b085      	sub	sp, #20
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
 800664a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	881b      	ldrh	r3, [r3, #0]
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	7812      	ldrb	r2, [r2, #0]
 8006658:	4413      	add	r3, r2
 800665a:	b29a      	uxth	r2, r3
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	461a      	mov	r2, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4413      	add	r3, r2
 800666a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800666c:	68fb      	ldr	r3, [r7, #12]
}
 800666e:	4618      	mov	r0, r3
 8006670:	3714      	adds	r7, #20
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr

0800667a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800667a:	b480      	push	{r7}
 800667c:	b087      	sub	sp, #28
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	3301      	adds	r3, #1
 8006690:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006698:	8a3b      	ldrh	r3, [r7, #16]
 800669a:	021b      	lsls	r3, r3, #8
 800669c:	b21a      	sxth	r2, r3
 800669e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	b21b      	sxth	r3, r3
 80066a6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80066a8:	89fb      	ldrh	r3, [r7, #14]
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	371c      	adds	r7, #28
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
	...

080066b8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80066c2:	2300      	movs	r3, #0
 80066c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80066ce:	2b40      	cmp	r3, #64	@ 0x40
 80066d0:	d005      	beq.n	80066de <USBD_StdDevReq+0x26>
 80066d2:	2b40      	cmp	r3, #64	@ 0x40
 80066d4:	d857      	bhi.n	8006786 <USBD_StdDevReq+0xce>
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d00f      	beq.n	80066fa <USBD_StdDevReq+0x42>
 80066da:	2b20      	cmp	r3, #32
 80066dc:	d153      	bne.n	8006786 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	32ae      	adds	r2, #174	@ 0xae
 80066e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	6839      	ldr	r1, [r7, #0]
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	4798      	blx	r3
 80066f4:	4603      	mov	r3, r0
 80066f6:	73fb      	strb	r3, [r7, #15]
      break;
 80066f8:	e04a      	b.n	8006790 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	785b      	ldrb	r3, [r3, #1]
 80066fe:	2b09      	cmp	r3, #9
 8006700:	d83b      	bhi.n	800677a <USBD_StdDevReq+0xc2>
 8006702:	a201      	add	r2, pc, #4	@ (adr r2, 8006708 <USBD_StdDevReq+0x50>)
 8006704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006708:	0800675d 	.word	0x0800675d
 800670c:	08006771 	.word	0x08006771
 8006710:	0800677b 	.word	0x0800677b
 8006714:	08006767 	.word	0x08006767
 8006718:	0800677b 	.word	0x0800677b
 800671c:	0800673b 	.word	0x0800673b
 8006720:	08006731 	.word	0x08006731
 8006724:	0800677b 	.word	0x0800677b
 8006728:	08006753 	.word	0x08006753
 800672c:	08006745 	.word	0x08006745
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006730:	6839      	ldr	r1, [r7, #0]
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 fa3c 	bl	8006bb0 <USBD_GetDescriptor>
          break;
 8006738:	e024      	b.n	8006784 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800673a:	6839      	ldr	r1, [r7, #0]
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 fba1 	bl	8006e84 <USBD_SetAddress>
          break;
 8006742:	e01f      	b.n	8006784 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006744:	6839      	ldr	r1, [r7, #0]
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 fbe0 	bl	8006f0c <USBD_SetConfig>
 800674c:	4603      	mov	r3, r0
 800674e:	73fb      	strb	r3, [r7, #15]
          break;
 8006750:	e018      	b.n	8006784 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006752:	6839      	ldr	r1, [r7, #0]
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 fc83 	bl	8007060 <USBD_GetConfig>
          break;
 800675a:	e013      	b.n	8006784 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800675c:	6839      	ldr	r1, [r7, #0]
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 fcb4 	bl	80070cc <USBD_GetStatus>
          break;
 8006764:	e00e      	b.n	8006784 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006766:	6839      	ldr	r1, [r7, #0]
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 fce3 	bl	8007134 <USBD_SetFeature>
          break;
 800676e:	e009      	b.n	8006784 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006770:	6839      	ldr	r1, [r7, #0]
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 fd07 	bl	8007186 <USBD_ClrFeature>
          break;
 8006778:	e004      	b.n	8006784 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800677a:	6839      	ldr	r1, [r7, #0]
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 fd5e 	bl	800723e <USBD_CtlError>
          break;
 8006782:	bf00      	nop
      }
      break;
 8006784:	e004      	b.n	8006790 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006786:	6839      	ldr	r1, [r7, #0]
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 fd58 	bl	800723e <USBD_CtlError>
      break;
 800678e:	bf00      	nop
  }

  return ret;
 8006790:	7bfb      	ldrb	r3, [r7, #15]
}
 8006792:	4618      	mov	r0, r3
 8006794:	3710      	adds	r7, #16
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop

0800679c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80067a6:	2300      	movs	r3, #0
 80067a8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80067b2:	2b40      	cmp	r3, #64	@ 0x40
 80067b4:	d005      	beq.n	80067c2 <USBD_StdItfReq+0x26>
 80067b6:	2b40      	cmp	r3, #64	@ 0x40
 80067b8:	d852      	bhi.n	8006860 <USBD_StdItfReq+0xc4>
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d001      	beq.n	80067c2 <USBD_StdItfReq+0x26>
 80067be:	2b20      	cmp	r3, #32
 80067c0:	d14e      	bne.n	8006860 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	3b01      	subs	r3, #1
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	d840      	bhi.n	8006852 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	889b      	ldrh	r3, [r3, #4]
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d836      	bhi.n	8006848 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	889b      	ldrh	r3, [r3, #4]
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	4619      	mov	r1, r3
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f7ff fedb 	bl	800659e <USBD_CoreFindIF>
 80067e8:	4603      	mov	r3, r0
 80067ea:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80067ec:	7bbb      	ldrb	r3, [r7, #14]
 80067ee:	2bff      	cmp	r3, #255	@ 0xff
 80067f0:	d01d      	beq.n	800682e <USBD_StdItfReq+0x92>
 80067f2:	7bbb      	ldrb	r3, [r7, #14]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d11a      	bne.n	800682e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80067f8:	7bba      	ldrb	r2, [r7, #14]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	32ae      	adds	r2, #174	@ 0xae
 80067fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d00f      	beq.n	8006828 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006808:	7bba      	ldrb	r2, [r7, #14]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006810:	7bba      	ldrb	r2, [r7, #14]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	32ae      	adds	r2, #174	@ 0xae
 8006816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	6839      	ldr	r1, [r7, #0]
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	4798      	blx	r3
 8006822:	4603      	mov	r3, r0
 8006824:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006826:	e004      	b.n	8006832 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006828:	2303      	movs	r3, #3
 800682a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800682c:	e001      	b.n	8006832 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800682e:	2303      	movs	r3, #3
 8006830:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	88db      	ldrh	r3, [r3, #6]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d110      	bne.n	800685c <USBD_StdItfReq+0xc0>
 800683a:	7bfb      	ldrb	r3, [r7, #15]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d10d      	bne.n	800685c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 fdd3 	bl	80073ec <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006846:	e009      	b.n	800685c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006848:	6839      	ldr	r1, [r7, #0]
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 fcf7 	bl	800723e <USBD_CtlError>
          break;
 8006850:	e004      	b.n	800685c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006852:	6839      	ldr	r1, [r7, #0]
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 fcf2 	bl	800723e <USBD_CtlError>
          break;
 800685a:	e000      	b.n	800685e <USBD_StdItfReq+0xc2>
          break;
 800685c:	bf00      	nop
      }
      break;
 800685e:	e004      	b.n	800686a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006860:	6839      	ldr	r1, [r7, #0]
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 fceb 	bl	800723e <USBD_CtlError>
      break;
 8006868:	bf00      	nop
  }

  return ret;
 800686a:	7bfb      	ldrb	r3, [r7, #15]
}
 800686c:	4618      	mov	r0, r3
 800686e:	3710      	adds	r7, #16
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800687e:	2300      	movs	r3, #0
 8006880:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	889b      	ldrh	r3, [r3, #4]
 8006886:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006890:	2b40      	cmp	r3, #64	@ 0x40
 8006892:	d007      	beq.n	80068a4 <USBD_StdEPReq+0x30>
 8006894:	2b40      	cmp	r3, #64	@ 0x40
 8006896:	f200 817f 	bhi.w	8006b98 <USBD_StdEPReq+0x324>
 800689a:	2b00      	cmp	r3, #0
 800689c:	d02a      	beq.n	80068f4 <USBD_StdEPReq+0x80>
 800689e:	2b20      	cmp	r3, #32
 80068a0:	f040 817a 	bne.w	8006b98 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80068a4:	7bbb      	ldrb	r3, [r7, #14]
 80068a6:	4619      	mov	r1, r3
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f7ff fe85 	bl	80065b8 <USBD_CoreFindEP>
 80068ae:	4603      	mov	r3, r0
 80068b0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80068b2:	7b7b      	ldrb	r3, [r7, #13]
 80068b4:	2bff      	cmp	r3, #255	@ 0xff
 80068b6:	f000 8174 	beq.w	8006ba2 <USBD_StdEPReq+0x32e>
 80068ba:	7b7b      	ldrb	r3, [r7, #13]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	f040 8170 	bne.w	8006ba2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80068c2:	7b7a      	ldrb	r2, [r7, #13]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80068ca:	7b7a      	ldrb	r2, [r7, #13]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	32ae      	adds	r2, #174	@ 0xae
 80068d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	f000 8163 	beq.w	8006ba2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80068dc:	7b7a      	ldrb	r2, [r7, #13]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	32ae      	adds	r2, #174	@ 0xae
 80068e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	6839      	ldr	r1, [r7, #0]
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	4798      	blx	r3
 80068ee:	4603      	mov	r3, r0
 80068f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80068f2:	e156      	b.n	8006ba2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	785b      	ldrb	r3, [r3, #1]
 80068f8:	2b03      	cmp	r3, #3
 80068fa:	d008      	beq.n	800690e <USBD_StdEPReq+0x9a>
 80068fc:	2b03      	cmp	r3, #3
 80068fe:	f300 8145 	bgt.w	8006b8c <USBD_StdEPReq+0x318>
 8006902:	2b00      	cmp	r3, #0
 8006904:	f000 809b 	beq.w	8006a3e <USBD_StdEPReq+0x1ca>
 8006908:	2b01      	cmp	r3, #1
 800690a:	d03c      	beq.n	8006986 <USBD_StdEPReq+0x112>
 800690c:	e13e      	b.n	8006b8c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006914:	b2db      	uxtb	r3, r3
 8006916:	2b02      	cmp	r3, #2
 8006918:	d002      	beq.n	8006920 <USBD_StdEPReq+0xac>
 800691a:	2b03      	cmp	r3, #3
 800691c:	d016      	beq.n	800694c <USBD_StdEPReq+0xd8>
 800691e:	e02c      	b.n	800697a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006920:	7bbb      	ldrb	r3, [r7, #14]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d00d      	beq.n	8006942 <USBD_StdEPReq+0xce>
 8006926:	7bbb      	ldrb	r3, [r7, #14]
 8006928:	2b80      	cmp	r3, #128	@ 0x80
 800692a:	d00a      	beq.n	8006942 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800692c:	7bbb      	ldrb	r3, [r7, #14]
 800692e:	4619      	mov	r1, r3
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f001 f96f 	bl	8007c14 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006936:	2180      	movs	r1, #128	@ 0x80
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f001 f96b 	bl	8007c14 <USBD_LL_StallEP>
 800693e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006940:	e020      	b.n	8006984 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006942:	6839      	ldr	r1, [r7, #0]
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f000 fc7a 	bl	800723e <USBD_CtlError>
              break;
 800694a:	e01b      	b.n	8006984 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	885b      	ldrh	r3, [r3, #2]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d10e      	bne.n	8006972 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006954:	7bbb      	ldrb	r3, [r7, #14]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00b      	beq.n	8006972 <USBD_StdEPReq+0xfe>
 800695a:	7bbb      	ldrb	r3, [r7, #14]
 800695c:	2b80      	cmp	r3, #128	@ 0x80
 800695e:	d008      	beq.n	8006972 <USBD_StdEPReq+0xfe>
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	88db      	ldrh	r3, [r3, #6]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d104      	bne.n	8006972 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006968:	7bbb      	ldrb	r3, [r7, #14]
 800696a:	4619      	mov	r1, r3
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f001 f951 	bl	8007c14 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 fd3a 	bl	80073ec <USBD_CtlSendStatus>

              break;
 8006978:	e004      	b.n	8006984 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800697a:	6839      	ldr	r1, [r7, #0]
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 fc5e 	bl	800723e <USBD_CtlError>
              break;
 8006982:	bf00      	nop
          }
          break;
 8006984:	e107      	b.n	8006b96 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800698c:	b2db      	uxtb	r3, r3
 800698e:	2b02      	cmp	r3, #2
 8006990:	d002      	beq.n	8006998 <USBD_StdEPReq+0x124>
 8006992:	2b03      	cmp	r3, #3
 8006994:	d016      	beq.n	80069c4 <USBD_StdEPReq+0x150>
 8006996:	e04b      	b.n	8006a30 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006998:	7bbb      	ldrb	r3, [r7, #14]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00d      	beq.n	80069ba <USBD_StdEPReq+0x146>
 800699e:	7bbb      	ldrb	r3, [r7, #14]
 80069a0:	2b80      	cmp	r3, #128	@ 0x80
 80069a2:	d00a      	beq.n	80069ba <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80069a4:	7bbb      	ldrb	r3, [r7, #14]
 80069a6:	4619      	mov	r1, r3
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f001 f933 	bl	8007c14 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80069ae:	2180      	movs	r1, #128	@ 0x80
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f001 f92f 	bl	8007c14 <USBD_LL_StallEP>
 80069b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80069b8:	e040      	b.n	8006a3c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80069ba:	6839      	ldr	r1, [r7, #0]
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 fc3e 	bl	800723e <USBD_CtlError>
              break;
 80069c2:	e03b      	b.n	8006a3c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	885b      	ldrh	r3, [r3, #2]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d136      	bne.n	8006a3a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80069cc:	7bbb      	ldrb	r3, [r7, #14]
 80069ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d004      	beq.n	80069e0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80069d6:	7bbb      	ldrb	r3, [r7, #14]
 80069d8:	4619      	mov	r1, r3
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f001 f939 	bl	8007c52 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f000 fd03 	bl	80073ec <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80069e6:	7bbb      	ldrb	r3, [r7, #14]
 80069e8:	4619      	mov	r1, r3
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f7ff fde4 	bl	80065b8 <USBD_CoreFindEP>
 80069f0:	4603      	mov	r3, r0
 80069f2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80069f4:	7b7b      	ldrb	r3, [r7, #13]
 80069f6:	2bff      	cmp	r3, #255	@ 0xff
 80069f8:	d01f      	beq.n	8006a3a <USBD_StdEPReq+0x1c6>
 80069fa:	7b7b      	ldrb	r3, [r7, #13]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d11c      	bne.n	8006a3a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006a00:	7b7a      	ldrb	r2, [r7, #13]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006a08:	7b7a      	ldrb	r2, [r7, #13]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	32ae      	adds	r2, #174	@ 0xae
 8006a0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d010      	beq.n	8006a3a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006a18:	7b7a      	ldrb	r2, [r7, #13]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	32ae      	adds	r2, #174	@ 0xae
 8006a1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	6839      	ldr	r1, [r7, #0]
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	4798      	blx	r3
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006a2e:	e004      	b.n	8006a3a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006a30:	6839      	ldr	r1, [r7, #0]
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 fc03 	bl	800723e <USBD_CtlError>
              break;
 8006a38:	e000      	b.n	8006a3c <USBD_StdEPReq+0x1c8>
              break;
 8006a3a:	bf00      	nop
          }
          break;
 8006a3c:	e0ab      	b.n	8006b96 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	2b02      	cmp	r3, #2
 8006a48:	d002      	beq.n	8006a50 <USBD_StdEPReq+0x1dc>
 8006a4a:	2b03      	cmp	r3, #3
 8006a4c:	d032      	beq.n	8006ab4 <USBD_StdEPReq+0x240>
 8006a4e:	e097      	b.n	8006b80 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a50:	7bbb      	ldrb	r3, [r7, #14]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d007      	beq.n	8006a66 <USBD_StdEPReq+0x1f2>
 8006a56:	7bbb      	ldrb	r3, [r7, #14]
 8006a58:	2b80      	cmp	r3, #128	@ 0x80
 8006a5a:	d004      	beq.n	8006a66 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006a5c:	6839      	ldr	r1, [r7, #0]
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 fbed 	bl	800723e <USBD_CtlError>
                break;
 8006a64:	e091      	b.n	8006b8a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	da0b      	bge.n	8006a86 <USBD_StdEPReq+0x212>
 8006a6e:	7bbb      	ldrb	r3, [r7, #14]
 8006a70:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006a74:	4613      	mov	r3, r2
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	4413      	add	r3, r2
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	3310      	adds	r3, #16
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	4413      	add	r3, r2
 8006a82:	3304      	adds	r3, #4
 8006a84:	e00b      	b.n	8006a9e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006a86:	7bbb      	ldrb	r3, [r7, #14]
 8006a88:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	4413      	add	r3, r2
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	4413      	add	r3, r2
 8006a9c:	3304      	adds	r3, #4
 8006a9e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	2202      	movs	r2, #2
 8006aaa:	4619      	mov	r1, r3
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 fc43 	bl	8007338 <USBD_CtlSendData>
              break;
 8006ab2:	e06a      	b.n	8006b8a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006ab4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	da11      	bge.n	8006ae0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006abc:	7bbb      	ldrb	r3, [r7, #14]
 8006abe:	f003 020f 	and.w	r2, r3, #15
 8006ac2:	6879      	ldr	r1, [r7, #4]
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	4413      	add	r3, r2
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	440b      	add	r3, r1
 8006ace:	3324      	adds	r3, #36	@ 0x24
 8006ad0:	881b      	ldrh	r3, [r3, #0]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d117      	bne.n	8006b06 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006ad6:	6839      	ldr	r1, [r7, #0]
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 fbb0 	bl	800723e <USBD_CtlError>
                  break;
 8006ade:	e054      	b.n	8006b8a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006ae0:	7bbb      	ldrb	r3, [r7, #14]
 8006ae2:	f003 020f 	and.w	r2, r3, #15
 8006ae6:	6879      	ldr	r1, [r7, #4]
 8006ae8:	4613      	mov	r3, r2
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	4413      	add	r3, r2
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	440b      	add	r3, r1
 8006af2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006af6:	881b      	ldrh	r3, [r3, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d104      	bne.n	8006b06 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006afc:	6839      	ldr	r1, [r7, #0]
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 fb9d 	bl	800723e <USBD_CtlError>
                  break;
 8006b04:	e041      	b.n	8006b8a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	da0b      	bge.n	8006b26 <USBD_StdEPReq+0x2b2>
 8006b0e:	7bbb      	ldrb	r3, [r7, #14]
 8006b10:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006b14:	4613      	mov	r3, r2
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	4413      	add	r3, r2
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	3310      	adds	r3, #16
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	4413      	add	r3, r2
 8006b22:	3304      	adds	r3, #4
 8006b24:	e00b      	b.n	8006b3e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006b26:	7bbb      	ldrb	r3, [r7, #14]
 8006b28:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b2c:	4613      	mov	r3, r2
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	4413      	add	r3, r2
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	4413      	add	r3, r2
 8006b3c:	3304      	adds	r3, #4
 8006b3e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006b40:	7bbb      	ldrb	r3, [r7, #14]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d002      	beq.n	8006b4c <USBD_StdEPReq+0x2d8>
 8006b46:	7bbb      	ldrb	r3, [r7, #14]
 8006b48:	2b80      	cmp	r3, #128	@ 0x80
 8006b4a:	d103      	bne.n	8006b54 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	601a      	str	r2, [r3, #0]
 8006b52:	e00e      	b.n	8006b72 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006b54:	7bbb      	ldrb	r3, [r7, #14]
 8006b56:	4619      	mov	r1, r3
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f001 f899 	bl	8007c90 <USBD_LL_IsStallEP>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d003      	beq.n	8006b6c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	2201      	movs	r2, #1
 8006b68:	601a      	str	r2, [r3, #0]
 8006b6a:	e002      	b.n	8006b72 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	2202      	movs	r2, #2
 8006b76:	4619      	mov	r1, r3
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 fbdd 	bl	8007338 <USBD_CtlSendData>
              break;
 8006b7e:	e004      	b.n	8006b8a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006b80:	6839      	ldr	r1, [r7, #0]
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 fb5b 	bl	800723e <USBD_CtlError>
              break;
 8006b88:	bf00      	nop
          }
          break;
 8006b8a:	e004      	b.n	8006b96 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006b8c:	6839      	ldr	r1, [r7, #0]
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 fb55 	bl	800723e <USBD_CtlError>
          break;
 8006b94:	bf00      	nop
      }
      break;
 8006b96:	e005      	b.n	8006ba4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006b98:	6839      	ldr	r1, [r7, #0]
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 fb4f 	bl	800723e <USBD_CtlError>
      break;
 8006ba0:	e000      	b.n	8006ba4 <USBD_StdEPReq+0x330>
      break;
 8006ba2:	bf00      	nop
  }

  return ret;
 8006ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3710      	adds	r7, #16
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
	...

08006bb0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	885b      	ldrh	r3, [r3, #2]
 8006bca:	0a1b      	lsrs	r3, r3, #8
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	2b06      	cmp	r3, #6
 8006bd2:	f200 8128 	bhi.w	8006e26 <USBD_GetDescriptor+0x276>
 8006bd6:	a201      	add	r2, pc, #4	@ (adr r2, 8006bdc <USBD_GetDescriptor+0x2c>)
 8006bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bdc:	08006bf9 	.word	0x08006bf9
 8006be0:	08006c11 	.word	0x08006c11
 8006be4:	08006c51 	.word	0x08006c51
 8006be8:	08006e27 	.word	0x08006e27
 8006bec:	08006e27 	.word	0x08006e27
 8006bf0:	08006dc7 	.word	0x08006dc7
 8006bf4:	08006df3 	.word	0x08006df3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	7c12      	ldrb	r2, [r2, #16]
 8006c04:	f107 0108 	add.w	r1, r7, #8
 8006c08:	4610      	mov	r0, r2
 8006c0a:	4798      	blx	r3
 8006c0c:	60f8      	str	r0, [r7, #12]
      break;
 8006c0e:	e112      	b.n	8006e36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	7c1b      	ldrb	r3, [r3, #16]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d10d      	bne.n	8006c34 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c20:	f107 0208 	add.w	r2, r7, #8
 8006c24:	4610      	mov	r0, r2
 8006c26:	4798      	blx	r3
 8006c28:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	2202      	movs	r2, #2
 8006c30:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006c32:	e100      	b.n	8006e36 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c3c:	f107 0208 	add.w	r2, r7, #8
 8006c40:	4610      	mov	r0, r2
 8006c42:	4798      	blx	r3
 8006c44:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	3301      	adds	r3, #1
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	701a      	strb	r2, [r3, #0]
      break;
 8006c4e:	e0f2      	b.n	8006e36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	885b      	ldrh	r3, [r3, #2]
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	2b05      	cmp	r3, #5
 8006c58:	f200 80ac 	bhi.w	8006db4 <USBD_GetDescriptor+0x204>
 8006c5c:	a201      	add	r2, pc, #4	@ (adr r2, 8006c64 <USBD_GetDescriptor+0xb4>)
 8006c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c62:	bf00      	nop
 8006c64:	08006c7d 	.word	0x08006c7d
 8006c68:	08006cb1 	.word	0x08006cb1
 8006c6c:	08006ce5 	.word	0x08006ce5
 8006c70:	08006d19 	.word	0x08006d19
 8006c74:	08006d4d 	.word	0x08006d4d
 8006c78:	08006d81 	.word	0x08006d81
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d00b      	beq.n	8006ca0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	7c12      	ldrb	r2, [r2, #16]
 8006c94:	f107 0108 	add.w	r1, r7, #8
 8006c98:	4610      	mov	r0, r2
 8006c9a:	4798      	blx	r3
 8006c9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c9e:	e091      	b.n	8006dc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ca0:	6839      	ldr	r1, [r7, #0]
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 facb 	bl	800723e <USBD_CtlError>
            err++;
 8006ca8:	7afb      	ldrb	r3, [r7, #11]
 8006caa:	3301      	adds	r3, #1
 8006cac:	72fb      	strb	r3, [r7, #11]
          break;
 8006cae:	e089      	b.n	8006dc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d00b      	beq.n	8006cd4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	7c12      	ldrb	r2, [r2, #16]
 8006cc8:	f107 0108 	add.w	r1, r7, #8
 8006ccc:	4610      	mov	r0, r2
 8006cce:	4798      	blx	r3
 8006cd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cd2:	e077      	b.n	8006dc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006cd4:	6839      	ldr	r1, [r7, #0]
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 fab1 	bl	800723e <USBD_CtlError>
            err++;
 8006cdc:	7afb      	ldrb	r3, [r7, #11]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	72fb      	strb	r3, [r7, #11]
          break;
 8006ce2:	e06f      	b.n	8006dc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d00b      	beq.n	8006d08 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	7c12      	ldrb	r2, [r2, #16]
 8006cfc:	f107 0108 	add.w	r1, r7, #8
 8006d00:	4610      	mov	r0, r2
 8006d02:	4798      	blx	r3
 8006d04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d06:	e05d      	b.n	8006dc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d08:	6839      	ldr	r1, [r7, #0]
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 fa97 	bl	800723e <USBD_CtlError>
            err++;
 8006d10:	7afb      	ldrb	r3, [r7, #11]
 8006d12:	3301      	adds	r3, #1
 8006d14:	72fb      	strb	r3, [r7, #11]
          break;
 8006d16:	e055      	b.n	8006dc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d00b      	beq.n	8006d3c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	7c12      	ldrb	r2, [r2, #16]
 8006d30:	f107 0108 	add.w	r1, r7, #8
 8006d34:	4610      	mov	r0, r2
 8006d36:	4798      	blx	r3
 8006d38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d3a:	e043      	b.n	8006dc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d3c:	6839      	ldr	r1, [r7, #0]
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 fa7d 	bl	800723e <USBD_CtlError>
            err++;
 8006d44:	7afb      	ldrb	r3, [r7, #11]
 8006d46:	3301      	adds	r3, #1
 8006d48:	72fb      	strb	r3, [r7, #11]
          break;
 8006d4a:	e03b      	b.n	8006dc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d52:	695b      	ldr	r3, [r3, #20]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d00b      	beq.n	8006d70 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d5e:	695b      	ldr	r3, [r3, #20]
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	7c12      	ldrb	r2, [r2, #16]
 8006d64:	f107 0108 	add.w	r1, r7, #8
 8006d68:	4610      	mov	r0, r2
 8006d6a:	4798      	blx	r3
 8006d6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d6e:	e029      	b.n	8006dc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d70:	6839      	ldr	r1, [r7, #0]
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 fa63 	bl	800723e <USBD_CtlError>
            err++;
 8006d78:	7afb      	ldrb	r3, [r7, #11]
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	72fb      	strb	r3, [r7, #11]
          break;
 8006d7e:	e021      	b.n	8006dc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d86:	699b      	ldr	r3, [r3, #24]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d00b      	beq.n	8006da4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d92:	699b      	ldr	r3, [r3, #24]
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	7c12      	ldrb	r2, [r2, #16]
 8006d98:	f107 0108 	add.w	r1, r7, #8
 8006d9c:	4610      	mov	r0, r2
 8006d9e:	4798      	blx	r3
 8006da0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006da2:	e00f      	b.n	8006dc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006da4:	6839      	ldr	r1, [r7, #0]
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 fa49 	bl	800723e <USBD_CtlError>
            err++;
 8006dac:	7afb      	ldrb	r3, [r7, #11]
 8006dae:	3301      	adds	r3, #1
 8006db0:	72fb      	strb	r3, [r7, #11]
          break;
 8006db2:	e007      	b.n	8006dc4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006db4:	6839      	ldr	r1, [r7, #0]
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 fa41 	bl	800723e <USBD_CtlError>
          err++;
 8006dbc:	7afb      	ldrb	r3, [r7, #11]
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006dc2:	bf00      	nop
      }
      break;
 8006dc4:	e037      	b.n	8006e36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	7c1b      	ldrb	r3, [r3, #16]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d109      	bne.n	8006de2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006dd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dd6:	f107 0208 	add.w	r2, r7, #8
 8006dda:	4610      	mov	r0, r2
 8006ddc:	4798      	blx	r3
 8006dde:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006de0:	e029      	b.n	8006e36 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006de2:	6839      	ldr	r1, [r7, #0]
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 fa2a 	bl	800723e <USBD_CtlError>
        err++;
 8006dea:	7afb      	ldrb	r3, [r7, #11]
 8006dec:	3301      	adds	r3, #1
 8006dee:	72fb      	strb	r3, [r7, #11]
      break;
 8006df0:	e021      	b.n	8006e36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	7c1b      	ldrb	r3, [r3, #16]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d10d      	bne.n	8006e16 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e02:	f107 0208 	add.w	r2, r7, #8
 8006e06:	4610      	mov	r0, r2
 8006e08:	4798      	blx	r3
 8006e0a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	3301      	adds	r3, #1
 8006e10:	2207      	movs	r2, #7
 8006e12:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e14:	e00f      	b.n	8006e36 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006e16:	6839      	ldr	r1, [r7, #0]
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 fa10 	bl	800723e <USBD_CtlError>
        err++;
 8006e1e:	7afb      	ldrb	r3, [r7, #11]
 8006e20:	3301      	adds	r3, #1
 8006e22:	72fb      	strb	r3, [r7, #11]
      break;
 8006e24:	e007      	b.n	8006e36 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006e26:	6839      	ldr	r1, [r7, #0]
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 fa08 	bl	800723e <USBD_CtlError>
      err++;
 8006e2e:	7afb      	ldrb	r3, [r7, #11]
 8006e30:	3301      	adds	r3, #1
 8006e32:	72fb      	strb	r3, [r7, #11]
      break;
 8006e34:	bf00      	nop
  }

  if (err != 0U)
 8006e36:	7afb      	ldrb	r3, [r7, #11]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d11e      	bne.n	8006e7a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	88db      	ldrh	r3, [r3, #6]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d016      	beq.n	8006e72 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006e44:	893b      	ldrh	r3, [r7, #8]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d00e      	beq.n	8006e68 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	88da      	ldrh	r2, [r3, #6]
 8006e4e:	893b      	ldrh	r3, [r7, #8]
 8006e50:	4293      	cmp	r3, r2
 8006e52:	bf28      	it	cs
 8006e54:	4613      	movcs	r3, r2
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006e5a:	893b      	ldrh	r3, [r7, #8]
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	68f9      	ldr	r1, [r7, #12]
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 fa69 	bl	8007338 <USBD_CtlSendData>
 8006e66:	e009      	b.n	8006e7c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006e68:	6839      	ldr	r1, [r7, #0]
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 f9e7 	bl	800723e <USBD_CtlError>
 8006e70:	e004      	b.n	8006e7c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 faba 	bl	80073ec <USBD_CtlSendStatus>
 8006e78:	e000      	b.n	8006e7c <USBD_GetDescriptor+0x2cc>
    return;
 8006e7a:	bf00      	nop
  }
}
 8006e7c:	3710      	adds	r7, #16
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop

08006e84 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	889b      	ldrh	r3, [r3, #4]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d131      	bne.n	8006efa <USBD_SetAddress+0x76>
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	88db      	ldrh	r3, [r3, #6]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d12d      	bne.n	8006efa <USBD_SetAddress+0x76>
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	885b      	ldrh	r3, [r3, #2]
 8006ea2:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ea4:	d829      	bhi.n	8006efa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	885b      	ldrh	r3, [r3, #2]
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006eb0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	2b03      	cmp	r3, #3
 8006ebc:	d104      	bne.n	8006ec8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006ebe:	6839      	ldr	r1, [r7, #0]
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 f9bc 	bl	800723e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ec6:	e01d      	b.n	8006f04 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	7bfa      	ldrb	r2, [r7, #15]
 8006ecc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006ed0:	7bfb      	ldrb	r3, [r7, #15]
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 ff07 	bl	8007ce8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 fa86 	bl	80073ec <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006ee0:	7bfb      	ldrb	r3, [r7, #15]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d004      	beq.n	8006ef0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2202      	movs	r2, #2
 8006eea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eee:	e009      	b.n	8006f04 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ef8:	e004      	b.n	8006f04 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006efa:	6839      	ldr	r1, [r7, #0]
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 f99e 	bl	800723e <USBD_CtlError>
  }
}
 8006f02:	bf00      	nop
 8006f04:	bf00      	nop
 8006f06:	3710      	adds	r7, #16
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f16:	2300      	movs	r3, #0
 8006f18:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	885b      	ldrh	r3, [r3, #2]
 8006f1e:	b2da      	uxtb	r2, r3
 8006f20:	4b4e      	ldr	r3, [pc, #312]	@ (800705c <USBD_SetConfig+0x150>)
 8006f22:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006f24:	4b4d      	ldr	r3, [pc, #308]	@ (800705c <USBD_SetConfig+0x150>)
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d905      	bls.n	8006f38 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006f2c:	6839      	ldr	r1, [r7, #0]
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 f985 	bl	800723e <USBD_CtlError>
    return USBD_FAIL;
 8006f34:	2303      	movs	r3, #3
 8006f36:	e08c      	b.n	8007052 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	2b02      	cmp	r3, #2
 8006f42:	d002      	beq.n	8006f4a <USBD_SetConfig+0x3e>
 8006f44:	2b03      	cmp	r3, #3
 8006f46:	d029      	beq.n	8006f9c <USBD_SetConfig+0x90>
 8006f48:	e075      	b.n	8007036 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006f4a:	4b44      	ldr	r3, [pc, #272]	@ (800705c <USBD_SetConfig+0x150>)
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d020      	beq.n	8006f94 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006f52:	4b42      	ldr	r3, [pc, #264]	@ (800705c <USBD_SetConfig+0x150>)
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	461a      	mov	r2, r3
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006f5c:	4b3f      	ldr	r3, [pc, #252]	@ (800705c <USBD_SetConfig+0x150>)
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	4619      	mov	r1, r3
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f7fe ffe3 	bl	8005f2e <USBD_SetClassConfig>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006f6c:	7bfb      	ldrb	r3, [r7, #15]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d008      	beq.n	8006f84 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006f72:	6839      	ldr	r1, [r7, #0]
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 f962 	bl	800723e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2202      	movs	r2, #2
 8006f7e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006f82:	e065      	b.n	8007050 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 fa31 	bl	80073ec <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2203      	movs	r2, #3
 8006f8e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006f92:	e05d      	b.n	8007050 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 fa29 	bl	80073ec <USBD_CtlSendStatus>
      break;
 8006f9a:	e059      	b.n	8007050 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006f9c:	4b2f      	ldr	r3, [pc, #188]	@ (800705c <USBD_SetConfig+0x150>)
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d112      	bne.n	8006fca <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2202      	movs	r2, #2
 8006fa8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006fac:	4b2b      	ldr	r3, [pc, #172]	@ (800705c <USBD_SetConfig+0x150>)
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006fb6:	4b29      	ldr	r3, [pc, #164]	@ (800705c <USBD_SetConfig+0x150>)
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	4619      	mov	r1, r3
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f7fe ffd2 	bl	8005f66 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 fa12 	bl	80073ec <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006fc8:	e042      	b.n	8007050 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006fca:	4b24      	ldr	r3, [pc, #144]	@ (800705c <USBD_SetConfig+0x150>)
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	461a      	mov	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d02a      	beq.n	800702e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	4619      	mov	r1, r3
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f7fe ffc0 	bl	8005f66 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006fe6:	4b1d      	ldr	r3, [pc, #116]	@ (800705c <USBD_SetConfig+0x150>)
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	461a      	mov	r2, r3
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006ff0:	4b1a      	ldr	r3, [pc, #104]	@ (800705c <USBD_SetConfig+0x150>)
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f7fe ff99 	bl	8005f2e <USBD_SetClassConfig>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007000:	7bfb      	ldrb	r3, [r7, #15]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00f      	beq.n	8007026 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007006:	6839      	ldr	r1, [r7, #0]
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 f918 	bl	800723e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	b2db      	uxtb	r3, r3
 8007014:	4619      	mov	r1, r3
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f7fe ffa5 	bl	8005f66 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2202      	movs	r2, #2
 8007020:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007024:	e014      	b.n	8007050 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 f9e0 	bl	80073ec <USBD_CtlSendStatus>
      break;
 800702c:	e010      	b.n	8007050 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 f9dc 	bl	80073ec <USBD_CtlSendStatus>
      break;
 8007034:	e00c      	b.n	8007050 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007036:	6839      	ldr	r1, [r7, #0]
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 f900 	bl	800723e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800703e:	4b07      	ldr	r3, [pc, #28]	@ (800705c <USBD_SetConfig+0x150>)
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	4619      	mov	r1, r3
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f7fe ff8e 	bl	8005f66 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800704a:	2303      	movs	r3, #3
 800704c:	73fb      	strb	r3, [r7, #15]
      break;
 800704e:	bf00      	nop
  }

  return ret;
 8007050:	7bfb      	ldrb	r3, [r7, #15]
}
 8007052:	4618      	mov	r0, r3
 8007054:	3710      	adds	r7, #16
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop
 800705c:	20000170 	.word	0x20000170

08007060 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b082      	sub	sp, #8
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	88db      	ldrh	r3, [r3, #6]
 800706e:	2b01      	cmp	r3, #1
 8007070:	d004      	beq.n	800707c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007072:	6839      	ldr	r1, [r7, #0]
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 f8e2 	bl	800723e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800707a:	e023      	b.n	80070c4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007082:	b2db      	uxtb	r3, r3
 8007084:	2b02      	cmp	r3, #2
 8007086:	dc02      	bgt.n	800708e <USBD_GetConfig+0x2e>
 8007088:	2b00      	cmp	r3, #0
 800708a:	dc03      	bgt.n	8007094 <USBD_GetConfig+0x34>
 800708c:	e015      	b.n	80070ba <USBD_GetConfig+0x5a>
 800708e:	2b03      	cmp	r3, #3
 8007090:	d00b      	beq.n	80070aa <USBD_GetConfig+0x4a>
 8007092:	e012      	b.n	80070ba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	3308      	adds	r3, #8
 800709e:	2201      	movs	r2, #1
 80070a0:	4619      	mov	r1, r3
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 f948 	bl	8007338 <USBD_CtlSendData>
        break;
 80070a8:	e00c      	b.n	80070c4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	3304      	adds	r3, #4
 80070ae:	2201      	movs	r2, #1
 80070b0:	4619      	mov	r1, r3
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 f940 	bl	8007338 <USBD_CtlSendData>
        break;
 80070b8:	e004      	b.n	80070c4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80070ba:	6839      	ldr	r1, [r7, #0]
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 f8be 	bl	800723e <USBD_CtlError>
        break;
 80070c2:	bf00      	nop
}
 80070c4:	bf00      	nop
 80070c6:	3708      	adds	r7, #8
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b082      	sub	sp, #8
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	3b01      	subs	r3, #1
 80070e0:	2b02      	cmp	r3, #2
 80070e2:	d81e      	bhi.n	8007122 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	88db      	ldrh	r3, [r3, #6]
 80070e8:	2b02      	cmp	r3, #2
 80070ea:	d004      	beq.n	80070f6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80070ec:	6839      	ldr	r1, [r7, #0]
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 f8a5 	bl	800723e <USBD_CtlError>
        break;
 80070f4:	e01a      	b.n	800712c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2201      	movs	r2, #1
 80070fa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007102:	2b00      	cmp	r3, #0
 8007104:	d005      	beq.n	8007112 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	f043 0202 	orr.w	r2, r3, #2
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	330c      	adds	r3, #12
 8007116:	2202      	movs	r2, #2
 8007118:	4619      	mov	r1, r3
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 f90c 	bl	8007338 <USBD_CtlSendData>
      break;
 8007120:	e004      	b.n	800712c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007122:	6839      	ldr	r1, [r7, #0]
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 f88a 	bl	800723e <USBD_CtlError>
      break;
 800712a:	bf00      	nop
  }
}
 800712c:	bf00      	nop
 800712e:	3708      	adds	r7, #8
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	885b      	ldrh	r3, [r3, #2]
 8007142:	2b01      	cmp	r3, #1
 8007144:	d107      	bne.n	8007156 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2201      	movs	r2, #1
 800714a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 f94c 	bl	80073ec <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007154:	e013      	b.n	800717e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	885b      	ldrh	r3, [r3, #2]
 800715a:	2b02      	cmp	r3, #2
 800715c:	d10b      	bne.n	8007176 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	889b      	ldrh	r3, [r3, #4]
 8007162:	0a1b      	lsrs	r3, r3, #8
 8007164:	b29b      	uxth	r3, r3
 8007166:	b2da      	uxtb	r2, r3
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 f93c 	bl	80073ec <USBD_CtlSendStatus>
}
 8007174:	e003      	b.n	800717e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007176:	6839      	ldr	r1, [r7, #0]
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 f860 	bl	800723e <USBD_CtlError>
}
 800717e:	bf00      	nop
 8007180:	3708      	adds	r7, #8
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}

08007186 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007186:	b580      	push	{r7, lr}
 8007188:	b082      	sub	sp, #8
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
 800718e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007196:	b2db      	uxtb	r3, r3
 8007198:	3b01      	subs	r3, #1
 800719a:	2b02      	cmp	r3, #2
 800719c:	d80b      	bhi.n	80071b6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	885b      	ldrh	r3, [r3, #2]
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d10c      	bne.n	80071c0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 f91c 	bl	80073ec <USBD_CtlSendStatus>
      }
      break;
 80071b4:	e004      	b.n	80071c0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80071b6:	6839      	ldr	r1, [r7, #0]
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 f840 	bl	800723e <USBD_CtlError>
      break;
 80071be:	e000      	b.n	80071c2 <USBD_ClrFeature+0x3c>
      break;
 80071c0:	bf00      	nop
  }
}
 80071c2:	bf00      	nop
 80071c4:	3708      	adds	r7, #8
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b084      	sub	sp, #16
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
 80071d2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	781a      	ldrb	r2, [r3, #0]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	3301      	adds	r3, #1
 80071e4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	781a      	ldrb	r2, [r3, #0]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	3301      	adds	r3, #1
 80071f2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	f7ff fa40 	bl	800667a <SWAPBYTE>
 80071fa:	4603      	mov	r3, r0
 80071fc:	461a      	mov	r2, r3
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	3301      	adds	r3, #1
 8007206:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	3301      	adds	r3, #1
 800720c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800720e:	68f8      	ldr	r0, [r7, #12]
 8007210:	f7ff fa33 	bl	800667a <SWAPBYTE>
 8007214:	4603      	mov	r3, r0
 8007216:	461a      	mov	r2, r3
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	3301      	adds	r3, #1
 8007220:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	3301      	adds	r3, #1
 8007226:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007228:	68f8      	ldr	r0, [r7, #12]
 800722a:	f7ff fa26 	bl	800667a <SWAPBYTE>
 800722e:	4603      	mov	r3, r0
 8007230:	461a      	mov	r2, r3
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	80da      	strh	r2, [r3, #6]
}
 8007236:	bf00      	nop
 8007238:	3710      	adds	r7, #16
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}

0800723e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800723e:	b580      	push	{r7, lr}
 8007240:	b082      	sub	sp, #8
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
 8007246:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007248:	2180      	movs	r1, #128	@ 0x80
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 fce2 	bl	8007c14 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007250:	2100      	movs	r1, #0
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 fcde 	bl	8007c14 <USBD_LL_StallEP>
}
 8007258:	bf00      	nop
 800725a:	3708      	adds	r7, #8
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b086      	sub	sp, #24
 8007264:	af00      	add	r7, sp, #0
 8007266:	60f8      	str	r0, [r7, #12]
 8007268:	60b9      	str	r1, [r7, #8]
 800726a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800726c:	2300      	movs	r3, #0
 800726e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d042      	beq.n	80072fc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800727a:	6938      	ldr	r0, [r7, #16]
 800727c:	f000 f842 	bl	8007304 <USBD_GetLen>
 8007280:	4603      	mov	r3, r0
 8007282:	3301      	adds	r3, #1
 8007284:	005b      	lsls	r3, r3, #1
 8007286:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800728a:	d808      	bhi.n	800729e <USBD_GetString+0x3e>
 800728c:	6938      	ldr	r0, [r7, #16]
 800728e:	f000 f839 	bl	8007304 <USBD_GetLen>
 8007292:	4603      	mov	r3, r0
 8007294:	3301      	adds	r3, #1
 8007296:	b29b      	uxth	r3, r3
 8007298:	005b      	lsls	r3, r3, #1
 800729a:	b29a      	uxth	r2, r3
 800729c:	e001      	b.n	80072a2 <USBD_GetString+0x42>
 800729e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80072a6:	7dfb      	ldrb	r3, [r7, #23]
 80072a8:	68ba      	ldr	r2, [r7, #8]
 80072aa:	4413      	add	r3, r2
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	7812      	ldrb	r2, [r2, #0]
 80072b0:	701a      	strb	r2, [r3, #0]
  idx++;
 80072b2:	7dfb      	ldrb	r3, [r7, #23]
 80072b4:	3301      	adds	r3, #1
 80072b6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80072b8:	7dfb      	ldrb	r3, [r7, #23]
 80072ba:	68ba      	ldr	r2, [r7, #8]
 80072bc:	4413      	add	r3, r2
 80072be:	2203      	movs	r2, #3
 80072c0:	701a      	strb	r2, [r3, #0]
  idx++;
 80072c2:	7dfb      	ldrb	r3, [r7, #23]
 80072c4:	3301      	adds	r3, #1
 80072c6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80072c8:	e013      	b.n	80072f2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80072ca:	7dfb      	ldrb	r3, [r7, #23]
 80072cc:	68ba      	ldr	r2, [r7, #8]
 80072ce:	4413      	add	r3, r2
 80072d0:	693a      	ldr	r2, [r7, #16]
 80072d2:	7812      	ldrb	r2, [r2, #0]
 80072d4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	3301      	adds	r3, #1
 80072da:	613b      	str	r3, [r7, #16]
    idx++;
 80072dc:	7dfb      	ldrb	r3, [r7, #23]
 80072de:	3301      	adds	r3, #1
 80072e0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80072e2:	7dfb      	ldrb	r3, [r7, #23]
 80072e4:	68ba      	ldr	r2, [r7, #8]
 80072e6:	4413      	add	r3, r2
 80072e8:	2200      	movs	r2, #0
 80072ea:	701a      	strb	r2, [r3, #0]
    idx++;
 80072ec:	7dfb      	ldrb	r3, [r7, #23]
 80072ee:	3301      	adds	r3, #1
 80072f0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d1e7      	bne.n	80072ca <USBD_GetString+0x6a>
 80072fa:	e000      	b.n	80072fe <USBD_GetString+0x9e>
    return;
 80072fc:	bf00      	nop
  }
}
 80072fe:	3718      	adds	r7, #24
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007304:	b480      	push	{r7}
 8007306:	b085      	sub	sp, #20
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800730c:	2300      	movs	r3, #0
 800730e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007314:	e005      	b.n	8007322 <USBD_GetLen+0x1e>
  {
    len++;
 8007316:	7bfb      	ldrb	r3, [r7, #15]
 8007318:	3301      	adds	r3, #1
 800731a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	3301      	adds	r3, #1
 8007320:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d1f5      	bne.n	8007316 <USBD_GetLen+0x12>
  }

  return len;
 800732a:	7bfb      	ldrb	r3, [r7, #15]
}
 800732c:	4618      	mov	r0, r3
 800732e:	3714      	adds	r7, #20
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2202      	movs	r2, #2
 8007348:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	68ba      	ldr	r2, [r7, #8]
 800735c:	2100      	movs	r1, #0
 800735e:	68f8      	ldr	r0, [r7, #12]
 8007360:	f000 fce1 	bl	8007d26 <USBD_LL_Transmit>

  return USBD_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b084      	sub	sp, #16
 8007372:	af00      	add	r7, sp, #0
 8007374:	60f8      	str	r0, [r7, #12]
 8007376:	60b9      	str	r1, [r7, #8]
 8007378:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	68ba      	ldr	r2, [r7, #8]
 800737e:	2100      	movs	r1, #0
 8007380:	68f8      	ldr	r0, [r7, #12]
 8007382:	f000 fcd0 	bl	8007d26 <USBD_LL_Transmit>

  return USBD_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	3710      	adds	r7, #16
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2203      	movs	r2, #3
 80073a0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	68ba      	ldr	r2, [r7, #8]
 80073b8:	2100      	movs	r1, #0
 80073ba:	68f8      	ldr	r0, [r7, #12]
 80073bc:	f000 fcd4 	bl	8007d68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3710      	adds	r7, #16
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}

080073ca <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b084      	sub	sp, #16
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	60f8      	str	r0, [r7, #12]
 80073d2:	60b9      	str	r1, [r7, #8]
 80073d4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	68ba      	ldr	r2, [r7, #8]
 80073da:	2100      	movs	r1, #0
 80073dc:	68f8      	ldr	r0, [r7, #12]
 80073de:	f000 fcc3 	bl	8007d68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80073e2:	2300      	movs	r3, #0
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3710      	adds	r7, #16
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b082      	sub	sp, #8
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2204      	movs	r2, #4
 80073f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80073fc:	2300      	movs	r3, #0
 80073fe:	2200      	movs	r2, #0
 8007400:	2100      	movs	r1, #0
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 fc8f 	bl	8007d26 <USBD_LL_Transmit>

  return USBD_OK;
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	3708      	adds	r7, #8
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b082      	sub	sp, #8
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2205      	movs	r2, #5
 800741e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007422:	2300      	movs	r3, #0
 8007424:	2200      	movs	r2, #0
 8007426:	2100      	movs	r1, #0
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 fc9d 	bl	8007d68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800742e:	2300      	movs	r3, #0
}
 8007430:	4618      	mov	r0, r3
 8007432:	3708      	adds	r7, #8
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800743c:	2200      	movs	r2, #0
 800743e:	4912      	ldr	r1, [pc, #72]	@ (8007488 <MX_USB_DEVICE_Init+0x50>)
 8007440:	4812      	ldr	r0, [pc, #72]	@ (800748c <MX_USB_DEVICE_Init+0x54>)
 8007442:	f7fe fcf7 	bl	8005e34 <USBD_Init>
 8007446:	4603      	mov	r3, r0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d001      	beq.n	8007450 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800744c:	f7f9 f9d4 	bl	80007f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007450:	490f      	ldr	r1, [pc, #60]	@ (8007490 <MX_USB_DEVICE_Init+0x58>)
 8007452:	480e      	ldr	r0, [pc, #56]	@ (800748c <MX_USB_DEVICE_Init+0x54>)
 8007454:	f7fe fd1e 	bl	8005e94 <USBD_RegisterClass>
 8007458:	4603      	mov	r3, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d001      	beq.n	8007462 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800745e:	f7f9 f9cb 	bl	80007f8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007462:	490c      	ldr	r1, [pc, #48]	@ (8007494 <MX_USB_DEVICE_Init+0x5c>)
 8007464:	4809      	ldr	r0, [pc, #36]	@ (800748c <MX_USB_DEVICE_Init+0x54>)
 8007466:	f7fe fc15 	bl	8005c94 <USBD_CDC_RegisterInterface>
 800746a:	4603      	mov	r3, r0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d001      	beq.n	8007474 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007470:	f7f9 f9c2 	bl	80007f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007474:	4805      	ldr	r0, [pc, #20]	@ (800748c <MX_USB_DEVICE_Init+0x54>)
 8007476:	f7fe fd43 	bl	8005f00 <USBD_Start>
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d001      	beq.n	8007484 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007480:	f7f9 f9ba 	bl	80007f8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007484:	bf00      	nop
 8007486:	bd80      	pop	{r7, pc}
 8007488:	200000ac 	.word	0x200000ac
 800748c:	20000174 	.word	0x20000174
 8007490:	20000018 	.word	0x20000018
 8007494:	20000098 	.word	0x20000098

08007498 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800749c:	2200      	movs	r2, #0
 800749e:	4905      	ldr	r1, [pc, #20]	@ (80074b4 <CDC_Init_FS+0x1c>)
 80074a0:	4805      	ldr	r0, [pc, #20]	@ (80074b8 <CDC_Init_FS+0x20>)
 80074a2:	f7fe fc11 	bl	8005cc8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80074a6:	4905      	ldr	r1, [pc, #20]	@ (80074bc <CDC_Init_FS+0x24>)
 80074a8:	4803      	ldr	r0, [pc, #12]	@ (80074b8 <CDC_Init_FS+0x20>)
 80074aa:	f7fe fc2f 	bl	8005d0c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80074ae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	bd80      	pop	{r7, pc}
 80074b4:	20000c50 	.word	0x20000c50
 80074b8:	20000174 	.word	0x20000174
 80074bc:	20000450 	.word	0x20000450

080074c0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80074c0:	b480      	push	{r7}
 80074c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80074c4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	4603      	mov	r3, r0
 80074d8:	6039      	str	r1, [r7, #0]
 80074da:	71fb      	strb	r3, [r7, #7]
 80074dc:	4613      	mov	r3, r2
 80074de:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80074e0:	79fb      	ldrb	r3, [r7, #7]
 80074e2:	2b23      	cmp	r3, #35	@ 0x23
 80074e4:	d84a      	bhi.n	800757c <CDC_Control_FS+0xac>
 80074e6:	a201      	add	r2, pc, #4	@ (adr r2, 80074ec <CDC_Control_FS+0x1c>)
 80074e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ec:	0800757d 	.word	0x0800757d
 80074f0:	0800757d 	.word	0x0800757d
 80074f4:	0800757d 	.word	0x0800757d
 80074f8:	0800757d 	.word	0x0800757d
 80074fc:	0800757d 	.word	0x0800757d
 8007500:	0800757d 	.word	0x0800757d
 8007504:	0800757d 	.word	0x0800757d
 8007508:	0800757d 	.word	0x0800757d
 800750c:	0800757d 	.word	0x0800757d
 8007510:	0800757d 	.word	0x0800757d
 8007514:	0800757d 	.word	0x0800757d
 8007518:	0800757d 	.word	0x0800757d
 800751c:	0800757d 	.word	0x0800757d
 8007520:	0800757d 	.word	0x0800757d
 8007524:	0800757d 	.word	0x0800757d
 8007528:	0800757d 	.word	0x0800757d
 800752c:	0800757d 	.word	0x0800757d
 8007530:	0800757d 	.word	0x0800757d
 8007534:	0800757d 	.word	0x0800757d
 8007538:	0800757d 	.word	0x0800757d
 800753c:	0800757d 	.word	0x0800757d
 8007540:	0800757d 	.word	0x0800757d
 8007544:	0800757d 	.word	0x0800757d
 8007548:	0800757d 	.word	0x0800757d
 800754c:	0800757d 	.word	0x0800757d
 8007550:	0800757d 	.word	0x0800757d
 8007554:	0800757d 	.word	0x0800757d
 8007558:	0800757d 	.word	0x0800757d
 800755c:	0800757d 	.word	0x0800757d
 8007560:	0800757d 	.word	0x0800757d
 8007564:	0800757d 	.word	0x0800757d
 8007568:	0800757d 	.word	0x0800757d
 800756c:	0800757d 	.word	0x0800757d
 8007570:	0800757d 	.word	0x0800757d
 8007574:	0800757d 	.word	0x0800757d
 8007578:	0800757d 	.word	0x0800757d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800757c:	bf00      	nop
  }

  return (USBD_OK);
 800757e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007580:	4618      	mov	r0, r3
 8007582:	370c      	adds	r7, #12
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr

0800758c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007596:	6879      	ldr	r1, [r7, #4]
 8007598:	4805      	ldr	r0, [pc, #20]	@ (80075b0 <CDC_Receive_FS+0x24>)
 800759a:	f7fe fbb7 	bl	8005d0c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800759e:	4804      	ldr	r0, [pc, #16]	@ (80075b0 <CDC_Receive_FS+0x24>)
 80075a0:	f7fe fc12 	bl	8005dc8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80075a4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3708      	adds	r7, #8
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	20000174 	.word	0x20000174

080075b4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	460b      	mov	r3, r1
 80075be:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80075c0:	2300      	movs	r3, #0
 80075c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80075c4:	4b0d      	ldr	r3, [pc, #52]	@ (80075fc <CDC_Transmit_FS+0x48>)
 80075c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80075ca:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d001      	beq.n	80075da <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80075d6:	2301      	movs	r3, #1
 80075d8:	e00b      	b.n	80075f2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80075da:	887b      	ldrh	r3, [r7, #2]
 80075dc:	461a      	mov	r2, r3
 80075de:	6879      	ldr	r1, [r7, #4]
 80075e0:	4806      	ldr	r0, [pc, #24]	@ (80075fc <CDC_Transmit_FS+0x48>)
 80075e2:	f7fe fb71 	bl	8005cc8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80075e6:	4805      	ldr	r0, [pc, #20]	@ (80075fc <CDC_Transmit_FS+0x48>)
 80075e8:	f7fe fbae 	bl	8005d48 <USBD_CDC_TransmitPacket>
 80075ec:	4603      	mov	r3, r0
 80075ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80075f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3710      	adds	r7, #16
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	bf00      	nop
 80075fc:	20000174 	.word	0x20000174

08007600 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007600:	b480      	push	{r7}
 8007602:	b087      	sub	sp, #28
 8007604:	af00      	add	r7, sp, #0
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	60b9      	str	r1, [r7, #8]
 800760a:	4613      	mov	r3, r2
 800760c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800760e:	2300      	movs	r3, #0
 8007610:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007612:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007616:	4618      	mov	r0, r3
 8007618:	371c      	adds	r7, #28
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr
	...

08007624 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	4603      	mov	r3, r0
 800762c:	6039      	str	r1, [r7, #0]
 800762e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	2212      	movs	r2, #18
 8007634:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007636:	4b03      	ldr	r3, [pc, #12]	@ (8007644 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007638:	4618      	mov	r0, r3
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr
 8007644:	200000c8 	.word	0x200000c8

08007648 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	4603      	mov	r3, r0
 8007650:	6039      	str	r1, [r7, #0]
 8007652:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	2204      	movs	r2, #4
 8007658:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800765a:	4b03      	ldr	r3, [pc, #12]	@ (8007668 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800765c:	4618      	mov	r0, r3
 800765e:	370c      	adds	r7, #12
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr
 8007668:	200000dc 	.word	0x200000dc

0800766c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b082      	sub	sp, #8
 8007670:	af00      	add	r7, sp, #0
 8007672:	4603      	mov	r3, r0
 8007674:	6039      	str	r1, [r7, #0]
 8007676:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007678:	79fb      	ldrb	r3, [r7, #7]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d105      	bne.n	800768a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800767e:	683a      	ldr	r2, [r7, #0]
 8007680:	4907      	ldr	r1, [pc, #28]	@ (80076a0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007682:	4808      	ldr	r0, [pc, #32]	@ (80076a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007684:	f7ff fdec 	bl	8007260 <USBD_GetString>
 8007688:	e004      	b.n	8007694 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800768a:	683a      	ldr	r2, [r7, #0]
 800768c:	4904      	ldr	r1, [pc, #16]	@ (80076a0 <USBD_FS_ProductStrDescriptor+0x34>)
 800768e:	4805      	ldr	r0, [pc, #20]	@ (80076a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007690:	f7ff fde6 	bl	8007260 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007694:	4b02      	ldr	r3, [pc, #8]	@ (80076a0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007696:	4618      	mov	r0, r3
 8007698:	3708      	adds	r7, #8
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	20001450 	.word	0x20001450
 80076a4:	08007ec8 	.word	0x08007ec8

080076a8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	4603      	mov	r3, r0
 80076b0:	6039      	str	r1, [r7, #0]
 80076b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80076b4:	683a      	ldr	r2, [r7, #0]
 80076b6:	4904      	ldr	r1, [pc, #16]	@ (80076c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80076b8:	4804      	ldr	r0, [pc, #16]	@ (80076cc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80076ba:	f7ff fdd1 	bl	8007260 <USBD_GetString>
  return USBD_StrDesc;
 80076be:	4b02      	ldr	r3, [pc, #8]	@ (80076c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3708      	adds	r7, #8
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	20001450 	.word	0x20001450
 80076cc:	08007edc 	.word	0x08007edc

080076d0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	4603      	mov	r3, r0
 80076d8:	6039      	str	r1, [r7, #0]
 80076da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	221a      	movs	r2, #26
 80076e0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80076e2:	f000 f843 	bl	800776c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80076e6:	4b02      	ldr	r3, [pc, #8]	@ (80076f0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3708      	adds	r7, #8
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}
 80076f0:	200000e0 	.word	0x200000e0

080076f4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b082      	sub	sp, #8
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	4603      	mov	r3, r0
 80076fc:	6039      	str	r1, [r7, #0]
 80076fe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007700:	79fb      	ldrb	r3, [r7, #7]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d105      	bne.n	8007712 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007706:	683a      	ldr	r2, [r7, #0]
 8007708:	4907      	ldr	r1, [pc, #28]	@ (8007728 <USBD_FS_ConfigStrDescriptor+0x34>)
 800770a:	4808      	ldr	r0, [pc, #32]	@ (800772c <USBD_FS_ConfigStrDescriptor+0x38>)
 800770c:	f7ff fda8 	bl	8007260 <USBD_GetString>
 8007710:	e004      	b.n	800771c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007712:	683a      	ldr	r2, [r7, #0]
 8007714:	4904      	ldr	r1, [pc, #16]	@ (8007728 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007716:	4805      	ldr	r0, [pc, #20]	@ (800772c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007718:	f7ff fda2 	bl	8007260 <USBD_GetString>
  }
  return USBD_StrDesc;
 800771c:	4b02      	ldr	r3, [pc, #8]	@ (8007728 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800771e:	4618      	mov	r0, r3
 8007720:	3708      	adds	r7, #8
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	20001450 	.word	0x20001450
 800772c:	08007ef0 	.word	0x08007ef0

08007730 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	4603      	mov	r3, r0
 8007738:	6039      	str	r1, [r7, #0]
 800773a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800773c:	79fb      	ldrb	r3, [r7, #7]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d105      	bne.n	800774e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007742:	683a      	ldr	r2, [r7, #0]
 8007744:	4907      	ldr	r1, [pc, #28]	@ (8007764 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007746:	4808      	ldr	r0, [pc, #32]	@ (8007768 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007748:	f7ff fd8a 	bl	8007260 <USBD_GetString>
 800774c:	e004      	b.n	8007758 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800774e:	683a      	ldr	r2, [r7, #0]
 8007750:	4904      	ldr	r1, [pc, #16]	@ (8007764 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007752:	4805      	ldr	r0, [pc, #20]	@ (8007768 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007754:	f7ff fd84 	bl	8007260 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007758:	4b02      	ldr	r3, [pc, #8]	@ (8007764 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800775a:	4618      	mov	r0, r3
 800775c:	3708      	adds	r7, #8
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	20001450 	.word	0x20001450
 8007768:	08007efc 	.word	0x08007efc

0800776c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007772:	4b0f      	ldr	r3, [pc, #60]	@ (80077b0 <Get_SerialNum+0x44>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007778:	4b0e      	ldr	r3, [pc, #56]	@ (80077b4 <Get_SerialNum+0x48>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800777e:	4b0e      	ldr	r3, [pc, #56]	@ (80077b8 <Get_SerialNum+0x4c>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007784:	68fa      	ldr	r2, [r7, #12]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	4413      	add	r3, r2
 800778a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d009      	beq.n	80077a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007792:	2208      	movs	r2, #8
 8007794:	4909      	ldr	r1, [pc, #36]	@ (80077bc <Get_SerialNum+0x50>)
 8007796:	68f8      	ldr	r0, [r7, #12]
 8007798:	f000 f814 	bl	80077c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800779c:	2204      	movs	r2, #4
 800779e:	4908      	ldr	r1, [pc, #32]	@ (80077c0 <Get_SerialNum+0x54>)
 80077a0:	68b8      	ldr	r0, [r7, #8]
 80077a2:	f000 f80f 	bl	80077c4 <IntToUnicode>
  }
}
 80077a6:	bf00      	nop
 80077a8:	3710      	adds	r7, #16
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	1fff7a10 	.word	0x1fff7a10
 80077b4:	1fff7a14 	.word	0x1fff7a14
 80077b8:	1fff7a18 	.word	0x1fff7a18
 80077bc:	200000e2 	.word	0x200000e2
 80077c0:	200000f2 	.word	0x200000f2

080077c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b087      	sub	sp, #28
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	4613      	mov	r3, r2
 80077d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80077d2:	2300      	movs	r3, #0
 80077d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80077d6:	2300      	movs	r3, #0
 80077d8:	75fb      	strb	r3, [r7, #23]
 80077da:	e027      	b.n	800782c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	0f1b      	lsrs	r3, r3, #28
 80077e0:	2b09      	cmp	r3, #9
 80077e2:	d80b      	bhi.n	80077fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	0f1b      	lsrs	r3, r3, #28
 80077e8:	b2da      	uxtb	r2, r3
 80077ea:	7dfb      	ldrb	r3, [r7, #23]
 80077ec:	005b      	lsls	r3, r3, #1
 80077ee:	4619      	mov	r1, r3
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	440b      	add	r3, r1
 80077f4:	3230      	adds	r2, #48	@ 0x30
 80077f6:	b2d2      	uxtb	r2, r2
 80077f8:	701a      	strb	r2, [r3, #0]
 80077fa:	e00a      	b.n	8007812 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	0f1b      	lsrs	r3, r3, #28
 8007800:	b2da      	uxtb	r2, r3
 8007802:	7dfb      	ldrb	r3, [r7, #23]
 8007804:	005b      	lsls	r3, r3, #1
 8007806:	4619      	mov	r1, r3
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	440b      	add	r3, r1
 800780c:	3237      	adds	r2, #55	@ 0x37
 800780e:	b2d2      	uxtb	r2, r2
 8007810:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	011b      	lsls	r3, r3, #4
 8007816:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007818:	7dfb      	ldrb	r3, [r7, #23]
 800781a:	005b      	lsls	r3, r3, #1
 800781c:	3301      	adds	r3, #1
 800781e:	68ba      	ldr	r2, [r7, #8]
 8007820:	4413      	add	r3, r2
 8007822:	2200      	movs	r2, #0
 8007824:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007826:	7dfb      	ldrb	r3, [r7, #23]
 8007828:	3301      	adds	r3, #1
 800782a:	75fb      	strb	r3, [r7, #23]
 800782c:	7dfa      	ldrb	r2, [r7, #23]
 800782e:	79fb      	ldrb	r3, [r7, #7]
 8007830:	429a      	cmp	r2, r3
 8007832:	d3d3      	bcc.n	80077dc <IntToUnicode+0x18>
  }
}
 8007834:	bf00      	nop
 8007836:	bf00      	nop
 8007838:	371c      	adds	r7, #28
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr
	...

08007844 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b08a      	sub	sp, #40	@ 0x28
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800784c:	f107 0314 	add.w	r3, r7, #20
 8007850:	2200      	movs	r2, #0
 8007852:	601a      	str	r2, [r3, #0]
 8007854:	605a      	str	r2, [r3, #4]
 8007856:	609a      	str	r2, [r3, #8]
 8007858:	60da      	str	r2, [r3, #12]
 800785a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007864:	d13a      	bne.n	80078dc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007866:	2300      	movs	r3, #0
 8007868:	613b      	str	r3, [r7, #16]
 800786a:	4b1e      	ldr	r3, [pc, #120]	@ (80078e4 <HAL_PCD_MspInit+0xa0>)
 800786c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800786e:	4a1d      	ldr	r2, [pc, #116]	@ (80078e4 <HAL_PCD_MspInit+0xa0>)
 8007870:	f043 0301 	orr.w	r3, r3, #1
 8007874:	6313      	str	r3, [r2, #48]	@ 0x30
 8007876:	4b1b      	ldr	r3, [pc, #108]	@ (80078e4 <HAL_PCD_MspInit+0xa0>)
 8007878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800787a:	f003 0301 	and.w	r3, r3, #1
 800787e:	613b      	str	r3, [r7, #16]
 8007880:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007882:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007886:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007888:	2302      	movs	r3, #2
 800788a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800788c:	2300      	movs	r3, #0
 800788e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007890:	2303      	movs	r3, #3
 8007892:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007894:	230a      	movs	r3, #10
 8007896:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007898:	f107 0314 	add.w	r3, r7, #20
 800789c:	4619      	mov	r1, r3
 800789e:	4812      	ldr	r0, [pc, #72]	@ (80078e8 <HAL_PCD_MspInit+0xa4>)
 80078a0:	f7f9 fa3e 	bl	8000d20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80078a4:	4b0f      	ldr	r3, [pc, #60]	@ (80078e4 <HAL_PCD_MspInit+0xa0>)
 80078a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078a8:	4a0e      	ldr	r2, [pc, #56]	@ (80078e4 <HAL_PCD_MspInit+0xa0>)
 80078aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078ae:	6353      	str	r3, [r2, #52]	@ 0x34
 80078b0:	2300      	movs	r3, #0
 80078b2:	60fb      	str	r3, [r7, #12]
 80078b4:	4b0b      	ldr	r3, [pc, #44]	@ (80078e4 <HAL_PCD_MspInit+0xa0>)
 80078b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078b8:	4a0a      	ldr	r2, [pc, #40]	@ (80078e4 <HAL_PCD_MspInit+0xa0>)
 80078ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80078be:	6453      	str	r3, [r2, #68]	@ 0x44
 80078c0:	4b08      	ldr	r3, [pc, #32]	@ (80078e4 <HAL_PCD_MspInit+0xa0>)
 80078c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80078c8:	60fb      	str	r3, [r7, #12]
 80078ca:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80078cc:	2200      	movs	r2, #0
 80078ce:	2100      	movs	r1, #0
 80078d0:	2043      	movs	r0, #67	@ 0x43
 80078d2:	f7f9 f9ee 	bl	8000cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80078d6:	2043      	movs	r0, #67	@ 0x43
 80078d8:	f7f9 fa07 	bl	8000cea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80078dc:	bf00      	nop
 80078de:	3728      	adds	r7, #40	@ 0x28
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	40023800 	.word	0x40023800
 80078e8:	40020000 	.word	0x40020000

080078ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007900:	4619      	mov	r1, r3
 8007902:	4610      	mov	r0, r2
 8007904:	f7fe fb49 	bl	8005f9a <USBD_LL_SetupStage>
}
 8007908:	bf00      	nop
 800790a:	3708      	adds	r7, #8
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b082      	sub	sp, #8
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	460b      	mov	r3, r1
 800791a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007922:	78fa      	ldrb	r2, [r7, #3]
 8007924:	6879      	ldr	r1, [r7, #4]
 8007926:	4613      	mov	r3, r2
 8007928:	00db      	lsls	r3, r3, #3
 800792a:	4413      	add	r3, r2
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	440b      	add	r3, r1
 8007930:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	78fb      	ldrb	r3, [r7, #3]
 8007938:	4619      	mov	r1, r3
 800793a:	f7fe fb83 	bl	8006044 <USBD_LL_DataOutStage>
}
 800793e:	bf00      	nop
 8007940:	3708      	adds	r7, #8
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}

08007946 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007946:	b580      	push	{r7, lr}
 8007948:	b082      	sub	sp, #8
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
 800794e:	460b      	mov	r3, r1
 8007950:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007958:	78fa      	ldrb	r2, [r7, #3]
 800795a:	6879      	ldr	r1, [r7, #4]
 800795c:	4613      	mov	r3, r2
 800795e:	00db      	lsls	r3, r3, #3
 8007960:	4413      	add	r3, r2
 8007962:	009b      	lsls	r3, r3, #2
 8007964:	440b      	add	r3, r1
 8007966:	3320      	adds	r3, #32
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	78fb      	ldrb	r3, [r7, #3]
 800796c:	4619      	mov	r1, r3
 800796e:	f7fe fc1c 	bl	80061aa <USBD_LL_DataInStage>
}
 8007972:	bf00      	nop
 8007974:	3708      	adds	r7, #8
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}

0800797a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800797a:	b580      	push	{r7, lr}
 800797c:	b082      	sub	sp, #8
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007988:	4618      	mov	r0, r3
 800798a:	f7fe fd56 	bl	800643a <USBD_LL_SOF>
}
 800798e:	bf00      	nop
 8007990:	3708      	adds	r7, #8
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}

08007996 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007996:	b580      	push	{r7, lr}
 8007998:	b084      	sub	sp, #16
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800799e:	2301      	movs	r3, #1
 80079a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	79db      	ldrb	r3, [r3, #7]
 80079a6:	2b02      	cmp	r3, #2
 80079a8:	d001      	beq.n	80079ae <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80079aa:	f7f8 ff25 	bl	80007f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80079b4:	7bfa      	ldrb	r2, [r7, #15]
 80079b6:	4611      	mov	r1, r2
 80079b8:	4618      	mov	r0, r3
 80079ba:	f7fe fcfa 	bl	80063b2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80079c4:	4618      	mov	r0, r3
 80079c6:	f7fe fca2 	bl	800630e <USBD_LL_Reset>
}
 80079ca:	bf00      	nop
 80079cc:	3710      	adds	r7, #16
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
	...

080079d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80079e2:	4618      	mov	r0, r3
 80079e4:	f7fe fcf5 	bl	80063d2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	6812      	ldr	r2, [r2, #0]
 80079f6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80079fa:	f043 0301 	orr.w	r3, r3, #1
 80079fe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	7adb      	ldrb	r3, [r3, #11]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d005      	beq.n	8007a14 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007a08:	4b04      	ldr	r3, [pc, #16]	@ (8007a1c <HAL_PCD_SuspendCallback+0x48>)
 8007a0a:	691b      	ldr	r3, [r3, #16]
 8007a0c:	4a03      	ldr	r2, [pc, #12]	@ (8007a1c <HAL_PCD_SuspendCallback+0x48>)
 8007a0e:	f043 0306 	orr.w	r3, r3, #6
 8007a12:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007a14:	bf00      	nop
 8007a16:	3708      	adds	r7, #8
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	e000ed00 	.word	0xe000ed00

08007a20 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f7fe fceb 	bl	800640a <USBD_LL_Resume>
}
 8007a34:	bf00      	nop
 8007a36:	3708      	adds	r7, #8
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}

08007a3c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b082      	sub	sp, #8
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	460b      	mov	r3, r1
 8007a46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007a4e:	78fa      	ldrb	r2, [r7, #3]
 8007a50:	4611      	mov	r1, r2
 8007a52:	4618      	mov	r0, r3
 8007a54:	f7fe fd43 	bl	80064de <USBD_LL_IsoOUTIncomplete>
}
 8007a58:	bf00      	nop
 8007a5a:	3708      	adds	r7, #8
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	460b      	mov	r3, r1
 8007a6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007a72:	78fa      	ldrb	r2, [r7, #3]
 8007a74:	4611      	mov	r1, r2
 8007a76:	4618      	mov	r0, r3
 8007a78:	f7fe fcff 	bl	800647a <USBD_LL_IsoINIncomplete>
}
 8007a7c:	bf00      	nop
 8007a7e:	3708      	adds	r7, #8
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b082      	sub	sp, #8
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007a92:	4618      	mov	r0, r3
 8007a94:	f7fe fd55 	bl	8006542 <USBD_LL_DevConnected>
}
 8007a98:	bf00      	nop
 8007a9a:	3708      	adds	r7, #8
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7fe fd52 	bl	8006558 <USBD_LL_DevDisconnected>
}
 8007ab4:	bf00      	nop
 8007ab6:	3708      	adds	r7, #8
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b082      	sub	sp, #8
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d13c      	bne.n	8007b46 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007acc:	4a20      	ldr	r2, [pc, #128]	@ (8007b50 <USBD_LL_Init+0x94>)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	4a1e      	ldr	r2, [pc, #120]	@ (8007b50 <USBD_LL_Init+0x94>)
 8007ad8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007adc:	4b1c      	ldr	r3, [pc, #112]	@ (8007b50 <USBD_LL_Init+0x94>)
 8007ade:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007ae2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007ae4:	4b1a      	ldr	r3, [pc, #104]	@ (8007b50 <USBD_LL_Init+0x94>)
 8007ae6:	2204      	movs	r2, #4
 8007ae8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007aea:	4b19      	ldr	r3, [pc, #100]	@ (8007b50 <USBD_LL_Init+0x94>)
 8007aec:	2202      	movs	r2, #2
 8007aee:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007af0:	4b17      	ldr	r3, [pc, #92]	@ (8007b50 <USBD_LL_Init+0x94>)
 8007af2:	2200      	movs	r2, #0
 8007af4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007af6:	4b16      	ldr	r3, [pc, #88]	@ (8007b50 <USBD_LL_Init+0x94>)
 8007af8:	2202      	movs	r2, #2
 8007afa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007afc:	4b14      	ldr	r3, [pc, #80]	@ (8007b50 <USBD_LL_Init+0x94>)
 8007afe:	2200      	movs	r2, #0
 8007b00:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007b02:	4b13      	ldr	r3, [pc, #76]	@ (8007b50 <USBD_LL_Init+0x94>)
 8007b04:	2200      	movs	r2, #0
 8007b06:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007b08:	4b11      	ldr	r3, [pc, #68]	@ (8007b50 <USBD_LL_Init+0x94>)
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007b0e:	4b10      	ldr	r3, [pc, #64]	@ (8007b50 <USBD_LL_Init+0x94>)
 8007b10:	2200      	movs	r2, #0
 8007b12:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007b14:	4b0e      	ldr	r3, [pc, #56]	@ (8007b50 <USBD_LL_Init+0x94>)
 8007b16:	2200      	movs	r2, #0
 8007b18:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007b1a:	480d      	ldr	r0, [pc, #52]	@ (8007b50 <USBD_LL_Init+0x94>)
 8007b1c:	f7fa fadc 	bl	80020d8 <HAL_PCD_Init>
 8007b20:	4603      	mov	r3, r0
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d001      	beq.n	8007b2a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007b26:	f7f8 fe67 	bl	80007f8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007b2a:	2180      	movs	r1, #128	@ 0x80
 8007b2c:	4808      	ldr	r0, [pc, #32]	@ (8007b50 <USBD_LL_Init+0x94>)
 8007b2e:	f7fb fd08 	bl	8003542 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007b32:	2240      	movs	r2, #64	@ 0x40
 8007b34:	2100      	movs	r1, #0
 8007b36:	4806      	ldr	r0, [pc, #24]	@ (8007b50 <USBD_LL_Init+0x94>)
 8007b38:	f7fb fcbc 	bl	80034b4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007b3c:	2280      	movs	r2, #128	@ 0x80
 8007b3e:	2101      	movs	r1, #1
 8007b40:	4803      	ldr	r0, [pc, #12]	@ (8007b50 <USBD_LL_Init+0x94>)
 8007b42:	f7fb fcb7 	bl	80034b4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007b46:	2300      	movs	r3, #0
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3708      	adds	r7, #8
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}
 8007b50:	20001650 	.word	0x20001650

08007b54 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b60:	2300      	movs	r3, #0
 8007b62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f7fa fbc3 	bl	80022f6 <HAL_PCD_Start>
 8007b70:	4603      	mov	r3, r0
 8007b72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b74:	7bfb      	ldrb	r3, [r7, #15]
 8007b76:	4618      	mov	r0, r3
 8007b78:	f000 f942 	bl	8007e00 <USBD_Get_USB_Status>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b80:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3710      	adds	r7, #16
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}

08007b8a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007b8a:	b580      	push	{r7, lr}
 8007b8c:	b084      	sub	sp, #16
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
 8007b92:	4608      	mov	r0, r1
 8007b94:	4611      	mov	r1, r2
 8007b96:	461a      	mov	r2, r3
 8007b98:	4603      	mov	r3, r0
 8007b9a:	70fb      	strb	r3, [r7, #3]
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	70bb      	strb	r3, [r7, #2]
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007bb2:	78bb      	ldrb	r3, [r7, #2]
 8007bb4:	883a      	ldrh	r2, [r7, #0]
 8007bb6:	78f9      	ldrb	r1, [r7, #3]
 8007bb8:	f7fb f897 	bl	8002cea <HAL_PCD_EP_Open>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bc0:	7bfb      	ldrb	r3, [r7, #15]
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f000 f91c 	bl	8007e00 <USBD_Get_USB_Status>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bcc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3710      	adds	r7, #16
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}

08007bd6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b084      	sub	sp, #16
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
 8007bde:	460b      	mov	r3, r1
 8007be0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007be2:	2300      	movs	r3, #0
 8007be4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007be6:	2300      	movs	r3, #0
 8007be8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007bf0:	78fa      	ldrb	r2, [r7, #3]
 8007bf2:	4611      	mov	r1, r2
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f7fb f8e2 	bl	8002dbe <HAL_PCD_EP_Close>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bfe:	7bfb      	ldrb	r3, [r7, #15]
 8007c00:	4618      	mov	r0, r3
 8007c02:	f000 f8fd 	bl	8007e00 <USBD_Get_USB_Status>
 8007c06:	4603      	mov	r3, r0
 8007c08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3710      	adds	r7, #16
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c20:	2300      	movs	r3, #0
 8007c22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c24:	2300      	movs	r3, #0
 8007c26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007c2e:	78fa      	ldrb	r2, [r7, #3]
 8007c30:	4611      	mov	r1, r2
 8007c32:	4618      	mov	r0, r3
 8007c34:	f7fb f99a 	bl	8002f6c <HAL_PCD_EP_SetStall>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c3c:	7bfb      	ldrb	r3, [r7, #15]
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f000 f8de 	bl	8007e00 <USBD_Get_USB_Status>
 8007c44:	4603      	mov	r3, r0
 8007c46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c48:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3710      	adds	r7, #16
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}

08007c52 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c52:	b580      	push	{r7, lr}
 8007c54:	b084      	sub	sp, #16
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
 8007c5a:	460b      	mov	r3, r1
 8007c5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c62:	2300      	movs	r3, #0
 8007c64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007c6c:	78fa      	ldrb	r2, [r7, #3]
 8007c6e:	4611      	mov	r1, r2
 8007c70:	4618      	mov	r0, r3
 8007c72:	f7fb f9de 	bl	8003032 <HAL_PCD_EP_ClrStall>
 8007c76:	4603      	mov	r3, r0
 8007c78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c7a:	7bfb      	ldrb	r3, [r7, #15]
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f000 f8bf 	bl	8007e00 <USBD_Get_USB_Status>
 8007c82:	4603      	mov	r3, r0
 8007c84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c86:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3710      	adds	r7, #16
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b085      	sub	sp, #20
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	460b      	mov	r3, r1
 8007c9a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007ca2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007ca4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	da0b      	bge.n	8007cc4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007cac:	78fb      	ldrb	r3, [r7, #3]
 8007cae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007cb2:	68f9      	ldr	r1, [r7, #12]
 8007cb4:	4613      	mov	r3, r2
 8007cb6:	00db      	lsls	r3, r3, #3
 8007cb8:	4413      	add	r3, r2
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	440b      	add	r3, r1
 8007cbe:	3316      	adds	r3, #22
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	e00b      	b.n	8007cdc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007cc4:	78fb      	ldrb	r3, [r7, #3]
 8007cc6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007cca:	68f9      	ldr	r1, [r7, #12]
 8007ccc:	4613      	mov	r3, r2
 8007cce:	00db      	lsls	r3, r3, #3
 8007cd0:	4413      	add	r3, r2
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	440b      	add	r3, r1
 8007cd6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007cda:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3714      	adds	r7, #20
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr

08007ce8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007d02:	78fa      	ldrb	r2, [r7, #3]
 8007d04:	4611      	mov	r1, r2
 8007d06:	4618      	mov	r0, r3
 8007d08:	f7fa ffcb 	bl	8002ca2 <HAL_PCD_SetAddress>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d10:	7bfb      	ldrb	r3, [r7, #15]
 8007d12:	4618      	mov	r0, r3
 8007d14:	f000 f874 	bl	8007e00 <USBD_Get_USB_Status>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3710      	adds	r7, #16
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}

08007d26 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007d26:	b580      	push	{r7, lr}
 8007d28:	b086      	sub	sp, #24
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	60f8      	str	r0, [r7, #12]
 8007d2e:	607a      	str	r2, [r7, #4]
 8007d30:	603b      	str	r3, [r7, #0]
 8007d32:	460b      	mov	r3, r1
 8007d34:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d36:	2300      	movs	r3, #0
 8007d38:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007d44:	7af9      	ldrb	r1, [r7, #11]
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	f7fb f8d5 	bl	8002ef8 <HAL_PCD_EP_Transmit>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d52:	7dfb      	ldrb	r3, [r7, #23]
 8007d54:	4618      	mov	r0, r3
 8007d56:	f000 f853 	bl	8007e00 <USBD_Get_USB_Status>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007d5e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3718      	adds	r7, #24
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b086      	sub	sp, #24
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	607a      	str	r2, [r7, #4]
 8007d72:	603b      	str	r3, [r7, #0]
 8007d74:	460b      	mov	r3, r1
 8007d76:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007d86:	7af9      	ldrb	r1, [r7, #11]
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	f7fb f861 	bl	8002e52 <HAL_PCD_EP_Receive>
 8007d90:	4603      	mov	r3, r0
 8007d92:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d94:	7dfb      	ldrb	r3, [r7, #23]
 8007d96:	4618      	mov	r0, r3
 8007d98:	f000 f832 	bl	8007e00 <USBD_Get_USB_Status>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007da0:	7dbb      	ldrb	r3, [r7, #22]
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3718      	adds	r7, #24
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}

08007daa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b082      	sub	sp, #8
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
 8007db2:	460b      	mov	r3, r1
 8007db4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007dbc:	78fa      	ldrb	r2, [r7, #3]
 8007dbe:	4611      	mov	r1, r2
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f7fb f881 	bl	8002ec8 <HAL_PCD_EP_GetRxCount>
 8007dc6:	4603      	mov	r3, r0
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3708      	adds	r7, #8
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007dd8:	4b03      	ldr	r3, [pc, #12]	@ (8007de8 <USBD_static_malloc+0x18>)
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	370c      	adds	r7, #12
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr
 8007de6:	bf00      	nop
 8007de8:	20001b34 	.word	0x20001b34

08007dec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]

}
 8007df4:	bf00      	nop
 8007df6:	370c      	adds	r7, #12
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b085      	sub	sp, #20
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	4603      	mov	r3, r0
 8007e08:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007e0e:	79fb      	ldrb	r3, [r7, #7]
 8007e10:	2b03      	cmp	r3, #3
 8007e12:	d817      	bhi.n	8007e44 <USBD_Get_USB_Status+0x44>
 8007e14:	a201      	add	r2, pc, #4	@ (adr r2, 8007e1c <USBD_Get_USB_Status+0x1c>)
 8007e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e1a:	bf00      	nop
 8007e1c:	08007e2d 	.word	0x08007e2d
 8007e20:	08007e33 	.word	0x08007e33
 8007e24:	08007e39 	.word	0x08007e39
 8007e28:	08007e3f 	.word	0x08007e3f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	73fb      	strb	r3, [r7, #15]
    break;
 8007e30:	e00b      	b.n	8007e4a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007e32:	2303      	movs	r3, #3
 8007e34:	73fb      	strb	r3, [r7, #15]
    break;
 8007e36:	e008      	b.n	8007e4a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	73fb      	strb	r3, [r7, #15]
    break;
 8007e3c:	e005      	b.n	8007e4a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007e3e:	2303      	movs	r3, #3
 8007e40:	73fb      	strb	r3, [r7, #15]
    break;
 8007e42:	e002      	b.n	8007e4a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007e44:	2303      	movs	r3, #3
 8007e46:	73fb      	strb	r3, [r7, #15]
    break;
 8007e48:	bf00      	nop
  }
  return usb_status;
 8007e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3714      	adds	r7, #20
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr

08007e58 <memset>:
 8007e58:	4402      	add	r2, r0
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d100      	bne.n	8007e62 <memset+0xa>
 8007e60:	4770      	bx	lr
 8007e62:	f803 1b01 	strb.w	r1, [r3], #1
 8007e66:	e7f9      	b.n	8007e5c <memset+0x4>

08007e68 <__libc_init_array>:
 8007e68:	b570      	push	{r4, r5, r6, lr}
 8007e6a:	4d0d      	ldr	r5, [pc, #52]	@ (8007ea0 <__libc_init_array+0x38>)
 8007e6c:	4c0d      	ldr	r4, [pc, #52]	@ (8007ea4 <__libc_init_array+0x3c>)
 8007e6e:	1b64      	subs	r4, r4, r5
 8007e70:	10a4      	asrs	r4, r4, #2
 8007e72:	2600      	movs	r6, #0
 8007e74:	42a6      	cmp	r6, r4
 8007e76:	d109      	bne.n	8007e8c <__libc_init_array+0x24>
 8007e78:	4d0b      	ldr	r5, [pc, #44]	@ (8007ea8 <__libc_init_array+0x40>)
 8007e7a:	4c0c      	ldr	r4, [pc, #48]	@ (8007eac <__libc_init_array+0x44>)
 8007e7c:	f000 f818 	bl	8007eb0 <_init>
 8007e80:	1b64      	subs	r4, r4, r5
 8007e82:	10a4      	asrs	r4, r4, #2
 8007e84:	2600      	movs	r6, #0
 8007e86:	42a6      	cmp	r6, r4
 8007e88:	d105      	bne.n	8007e96 <__libc_init_array+0x2e>
 8007e8a:	bd70      	pop	{r4, r5, r6, pc}
 8007e8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e90:	4798      	blx	r3
 8007e92:	3601      	adds	r6, #1
 8007e94:	e7ee      	b.n	8007e74 <__libc_init_array+0xc>
 8007e96:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e9a:	4798      	blx	r3
 8007e9c:	3601      	adds	r6, #1
 8007e9e:	e7f2      	b.n	8007e86 <__libc_init_array+0x1e>
 8007ea0:	08007f2c 	.word	0x08007f2c
 8007ea4:	08007f2c 	.word	0x08007f2c
 8007ea8:	08007f2c 	.word	0x08007f2c
 8007eac:	08007f30 	.word	0x08007f30

08007eb0 <_init>:
 8007eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eb2:	bf00      	nop
 8007eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eb6:	bc08      	pop	{r3}
 8007eb8:	469e      	mov	lr, r3
 8007eba:	4770      	bx	lr

08007ebc <_fini>:
 8007ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ebe:	bf00      	nop
 8007ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ec2:	bc08      	pop	{r3}
 8007ec4:	469e      	mov	lr, r3
 8007ec6:	4770      	bx	lr
