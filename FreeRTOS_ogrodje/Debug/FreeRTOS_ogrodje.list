
FreeRTOS_ogrodje.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c53c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800c6dc  0800c6dc  0000d6dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7c4  0800c7c4  0000e150  2**0
                  CONTENTS
  4 .ARM          00000008  0800c7c4  0800c7c4  0000d7c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c7cc  0800c7cc  0000e150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7cc  0800c7cc  0000d7cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c7d0  0800c7d0  0000d7d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000150  20000000  0800c7d4  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000068c0  20000150  0800c924  0000e150  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006a10  0800c924  0000ea10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e150  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024d41  00000000  00000000  0000e180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055a7  00000000  00000000  00032ec1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fb8  00000000  00000000  00038468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000187e  00000000  00000000  0003a420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000070eb  00000000  00000000  0003bc9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002731d  00000000  00000000  00042d89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0e0c  00000000  00000000  0006a0a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010aeb2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008964  00000000  00000000  0010aef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0011385c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000150 	.word	0x20000150
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c6c4 	.word	0x0800c6c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000154 	.word	0x20000154
 80001dc:	0800c6c4 	.word	0x0800c6c4

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <i2c1_pisiRegister>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t i2c1_pisiRegister(uint8_t naprava, uint8_t reg, uint8_t podatek) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b086      	sub	sp, #24
 80004d4:	af04      	add	r7, sp, #16
 80004d6:	4603      	mov	r3, r0
 80004d8:	71fb      	strb	r3, [r7, #7]
 80004da:	460b      	mov	r3, r1
 80004dc:	71bb      	strb	r3, [r7, #6]
 80004de:	4613      	mov	r3, r2
 80004e0:	717b      	strb	r3, [r7, #5]
    naprava <<= 1;
 80004e2:	79fb      	ldrb	r3, [r7, #7]
 80004e4:	005b      	lsls	r3, r3, #1
 80004e6:	71fb      	strb	r3, [r7, #7]
    return HAL_I2C_Mem_Write(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, &podatek, 1, 10);
 80004e8:	79fb      	ldrb	r3, [r7, #7]
 80004ea:	b299      	uxth	r1, r3
 80004ec:	79bb      	ldrb	r3, [r7, #6]
 80004ee:	b29a      	uxth	r2, r3
 80004f0:	230a      	movs	r3, #10
 80004f2:	9302      	str	r3, [sp, #8]
 80004f4:	2301      	movs	r3, #1
 80004f6:	9301      	str	r3, [sp, #4]
 80004f8:	1d7b      	adds	r3, r7, #5
 80004fa:	9300      	str	r3, [sp, #0]
 80004fc:	2301      	movs	r3, #1
 80004fe:	4804      	ldr	r0, [pc, #16]	@ (8000510 <i2c1_pisiRegister+0x40>)
 8000500:	f001 fab2 	bl	8001a68 <HAL_I2C_Mem_Write>
 8000504:	4603      	mov	r3, r0
}
 8000506:	4618      	mov	r0, r3
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	2000016c 	.word	0x2000016c

08000514 <i2c1_beriRegistre>:

void i2c1_beriRegistre(uint8_t naprava, uint8_t reg, uint8_t* podatek, uint8_t dolzina) {
 8000514:	b580      	push	{r7, lr}
 8000516:	b086      	sub	sp, #24
 8000518:	af04      	add	r7, sp, #16
 800051a:	603a      	str	r2, [r7, #0]
 800051c:	461a      	mov	r2, r3
 800051e:	4603      	mov	r3, r0
 8000520:	71fb      	strb	r3, [r7, #7]
 8000522:	460b      	mov	r3, r1
 8000524:	71bb      	strb	r3, [r7, #6]
 8000526:	4613      	mov	r3, r2
 8000528:	717b      	strb	r3, [r7, #5]
    if ((dolzina>1)&&(naprava==0x19))  // ce je naprava 0x19 moramo postaviti ta bit, ce zelimo brati vec zlogov
 800052a:	797b      	ldrb	r3, [r7, #5]
 800052c:	2b01      	cmp	r3, #1
 800052e:	d906      	bls.n	800053e <i2c1_beriRegistre+0x2a>
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	2b19      	cmp	r3, #25
 8000534:	d103      	bne.n	800053e <i2c1_beriRegistre+0x2a>
        reg |= 0x80;
 8000536:	79bb      	ldrb	r3, [r7, #6]
 8000538:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800053c:	71bb      	strb	r3, [r7, #6]
    naprava <<= 1;
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	005b      	lsls	r3, r3, #1
 8000542:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Read(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, podatek, dolzina, dolzina);
 8000544:	79fb      	ldrb	r3, [r7, #7]
 8000546:	b299      	uxth	r1, r3
 8000548:	79bb      	ldrb	r3, [r7, #6]
 800054a:	b298      	uxth	r0, r3
 800054c:	797b      	ldrb	r3, [r7, #5]
 800054e:	b29b      	uxth	r3, r3
 8000550:	797a      	ldrb	r2, [r7, #5]
 8000552:	9202      	str	r2, [sp, #8]
 8000554:	9301      	str	r3, [sp, #4]
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	2301      	movs	r3, #1
 800055c:	4602      	mov	r2, r0
 800055e:	4803      	ldr	r0, [pc, #12]	@ (800056c <i2c1_beriRegistre+0x58>)
 8000560:	f001 fb7c 	bl	8001c5c <HAL_I2C_Mem_Read>
}
 8000564:	bf00      	nop
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	2000016c 	.word	0x2000016c

08000570 <initAccelerometer>:

void initAccelerometer() {
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
    // inicializiraj pospeskometer
    i2c1_pisiRegister(0x19, 0x20, 0x27);  // zbudi pospeskometer in omogoci osi
 8000574:	2227      	movs	r2, #39	@ 0x27
 8000576:	2120      	movs	r1, #32
 8000578:	2019      	movs	r0, #25
 800057a:	f7ff ffa9 	bl	80004d0 <i2c1_pisiRegister>
    i2c1_pisiRegister(0x19, 0x23, 0x88);  // nastavi posodobitev samo ko se prebere vrednost ter visoko locljivost
 800057e:	2288      	movs	r2, #136	@ 0x88
 8000580:	2123      	movs	r1, #35	@ 0x23
 8000582:	2019      	movs	r0, #25
 8000584:	f7ff ffa4 	bl	80004d0 <i2c1_pisiRegister>
}
 8000588:	bf00      	nop
 800058a:	bd80      	pop	{r7, pc}

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000592:	f000 fe0d 	bl	80011b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000596:	f000 f87f 	bl	8000698 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800059a:	f000 f8e5 	bl	8000768 <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_USB_DEVICE_Init();  // Initialize USB before FreeRTOS
 800059e:	f00b fa83 	bl	800baa8 <MX_USB_DEVICE_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a2:	f000 f9c5 	bl	8000930 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005a6:	f000 f8ff 	bl	80007a8 <MX_I2C1_Init>
  MX_I2S2_Init();
 80005aa:	f000 f92d 	bl	8000808 <MX_I2S2_Init>
  MX_I2S3_Init();
 80005ae:	f000 f959 	bl	8000864 <MX_I2S3_Init>
  MX_SPI1_Init();
 80005b2:	f000 f987 	bl	80008c4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  __HAL_I2C_ENABLE(&hi2c1);
 80005b6:	4b29      	ldr	r3, [pc, #164]	@ (800065c <main+0xd0>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	681a      	ldr	r2, [r3, #0]
 80005bc:	4b27      	ldr	r3, [pc, #156]	@ (800065c <main+0xd0>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f042 0201 	orr.w	r2, r2, #1
 80005c4:	601a      	str	r2, [r3, #0]

  initAccelerometer();
 80005c6:	f7ff ffd3 	bl	8000570 <initAccelerometer>

  // Ustvari queue za interakcijo med opravili
  cdcTxQueue = xQueueCreate(10, sizeof(uint32_t)); // 10 slots for 32-bit packets
 80005ca:	2200      	movs	r2, #0
 80005cc:	2104      	movs	r1, #4
 80005ce:	200a      	movs	r0, #10
 80005d0:	f008 ff45 	bl	800945e <xQueueGenericCreate>
 80005d4:	4603      	mov	r3, r0
 80005d6:	4a22      	ldr	r2, [pc, #136]	@ (8000660 <main+0xd4>)
 80005d8:	6013      	str	r3, [r2, #0]
  if (cdcTxQueue == NULL) {
 80005da:	4b21      	ldr	r3, [pc, #132]	@ (8000660 <main+0xd4>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d101      	bne.n	80005e6 <main+0x5a>
	  Error_Handler(); // Handle queue creation failure
 80005e2:	f000 fb6c 	bl	8000cbe <Error_Handler>
  }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005e6:	f008 fc73 	bl	8008ed0 <osKernelInitialize>
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

  xTaskCreate(Opravilo_pospeskometer, "Opravilo pospeskometer", 128, NULL, 1, &Opravilo_pospeskometerHandle);
 80005ea:	4b1e      	ldr	r3, [pc, #120]	@ (8000664 <main+0xd8>)
 80005ec:	9301      	str	r3, [sp, #4]
 80005ee:	2301      	movs	r3, #1
 80005f0:	9300      	str	r3, [sp, #0]
 80005f2:	2300      	movs	r3, #0
 80005f4:	2280      	movs	r2, #128	@ 0x80
 80005f6:	491c      	ldr	r1, [pc, #112]	@ (8000668 <main+0xdc>)
 80005f8:	481c      	ldr	r0, [pc, #112]	@ (800066c <main+0xe0>)
 80005fa:	f009 fbdf 	bl	8009dbc <xTaskCreate>
  xTaskCreate(Opravilo_LED, "Opravilo LED", 128, NULL, 2, &Opravilo_LEDHandle);
 80005fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000670 <main+0xe4>)
 8000600:	9301      	str	r3, [sp, #4]
 8000602:	2302      	movs	r3, #2
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2300      	movs	r3, #0
 8000608:	2280      	movs	r2, #128	@ 0x80
 800060a:	491a      	ldr	r1, [pc, #104]	@ (8000674 <main+0xe8>)
 800060c:	481a      	ldr	r0, [pc, #104]	@ (8000678 <main+0xec>)
 800060e:	f009 fbd5 	bl	8009dbc <xTaskCreate>

  xTaskCreate(Opravilo_CDC_Receive, "CDC Receive", 512, NULL, 2, NULL);
 8000612:	2300      	movs	r3, #0
 8000614:	9301      	str	r3, [sp, #4]
 8000616:	2302      	movs	r3, #2
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	2300      	movs	r3, #0
 800061c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000620:	4916      	ldr	r1, [pc, #88]	@ (800067c <main+0xf0>)
 8000622:	4817      	ldr	r0, [pc, #92]	@ (8000680 <main+0xf4>)
 8000624:	f009 fbca 	bl	8009dbc <xTaskCreate>
  xTaskCreate(Opravilo_CDC_Transmit, "CDC Send", 512, NULL, 2, NULL);
 8000628:	2300      	movs	r3, #0
 800062a:	9301      	str	r3, [sp, #4]
 800062c:	2302      	movs	r3, #2
 800062e:	9300      	str	r3, [sp, #0]
 8000630:	2300      	movs	r3, #0
 8000632:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000636:	4913      	ldr	r1, [pc, #76]	@ (8000684 <main+0xf8>)
 8000638:	4813      	ldr	r0, [pc, #76]	@ (8000688 <main+0xfc>)
 800063a:	f009 fbbf 	bl	8009dbc <xTaskCreate>

  /* Start Scheduler */
  vTaskStartScheduler();
 800063e:	f009 fd51 	bl	800a0e4 <vTaskStartScheduler>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000642:	4a12      	ldr	r2, [pc, #72]	@ (800068c <main+0x100>)
 8000644:	2100      	movs	r1, #0
 8000646:	4812      	ldr	r0, [pc, #72]	@ (8000690 <main+0x104>)
 8000648:	f008 fc8c 	bl	8008f64 <osThreadNew>
 800064c:	4603      	mov	r3, r0
 800064e:	4a11      	ldr	r2, [pc, #68]	@ (8000694 <main+0x108>)
 8000650:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000652:	f008 fc61 	bl	8008f18 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000656:	bf00      	nop
 8000658:	e7fd      	b.n	8000656 <main+0xca>
 800065a:	bf00      	nop
 800065c:	2000016c 	.word	0x2000016c
 8000660:	200002b4 	.word	0x200002b4
 8000664:	200002b0 	.word	0x200002b0
 8000668:	0800c6e8 	.word	0x0800c6e8
 800066c:	08000b0d 	.word	0x08000b0d
 8000670:	200002ac 	.word	0x200002ac
 8000674:	0800c700 	.word	0x0800c700
 8000678:	08000ae5 	.word	0x08000ae5
 800067c:	0800c710 	.word	0x0800c710
 8000680:	08000c45 	.word	0x08000c45
 8000684:	0800c71c 	.word	0x0800c71c
 8000688:	08000c55 	.word	0x08000c55
 800068c:	0800c788 	.word	0x0800c788
 8000690:	08000c8d 	.word	0x08000c8d
 8000694:	200002a8 	.word	0x200002a8

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b094      	sub	sp, #80	@ 0x50
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0320 	add.w	r3, r7, #32
 80006a2:	2230      	movs	r2, #48	@ 0x30
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f00b ff24 	bl	800c4f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	4b27      	ldr	r3, [pc, #156]	@ (8000760 <SystemClock_Config+0xc8>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c4:	4a26      	ldr	r2, [pc, #152]	@ (8000760 <SystemClock_Config+0xc8>)
 80006c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80006cc:	4b24      	ldr	r3, [pc, #144]	@ (8000760 <SystemClock_Config+0xc8>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d8:	2300      	movs	r3, #0
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	4b21      	ldr	r3, [pc, #132]	@ (8000764 <SystemClock_Config+0xcc>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a20      	ldr	r2, [pc, #128]	@ (8000764 <SystemClock_Config+0xcc>)
 80006e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000764 <SystemClock_Config+0xcc>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f4:	2301      	movs	r3, #1
 80006f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fe:	2302      	movs	r3, #2
 8000700:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000702:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000706:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000708:	2304      	movs	r3, #4
 800070a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800070c:	23c0      	movs	r3, #192	@ 0xc0
 800070e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000710:	2304      	movs	r3, #4
 8000712:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000714:	2308      	movs	r3, #8
 8000716:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000718:	f107 0320 	add.w	r3, r7, #32
 800071c:	4618      	mov	r0, r3
 800071e:	f003 ff75 	bl	800460c <HAL_RCC_OscConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000728:	f000 fac9 	bl	8000cbe <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072c:	230f      	movs	r3, #15
 800072e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000730:	2302      	movs	r3, #2
 8000732:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000738:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800073c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000742:	f107 030c 	add.w	r3, r7, #12
 8000746:	2103      	movs	r1, #3
 8000748:	4618      	mov	r0, r3
 800074a:	f004 f9d7 	bl	8004afc <HAL_RCC_ClockConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000754:	f000 fab3 	bl	8000cbe <Error_Handler>
  }
}
 8000758:	bf00      	nop
 800075a:	3750      	adds	r7, #80	@ 0x50
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40023800 	.word	0x40023800
 8000764:	40007000 	.word	0x40007000

08000768 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800076e:	463b      	mov	r3, r7
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]
 800077c:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800077e:	2301      	movs	r3, #1
 8000780:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000782:	23c8      	movs	r3, #200	@ 0xc8
 8000784:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000786:	2305      	movs	r3, #5
 8000788:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800078a:	2302      	movs	r3, #2
 800078c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800078e:	463b      	mov	r3, r7
 8000790:	4618      	mov	r0, r3
 8000792:	f004 fbf1 	bl	8004f78 <HAL_RCCEx_PeriphCLKConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 800079c:	f000 fa8f 	bl	8000cbe <Error_Handler>
  }
}
 80007a0:	bf00      	nop
 80007a2:	3718      	adds	r7, #24
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007ac:	4b13      	ldr	r3, [pc, #76]	@ (80007fc <MX_I2C1_Init+0x54>)
 80007ae:	4a14      	ldr	r2, [pc, #80]	@ (8000800 <MX_I2C1_Init+0x58>)
 80007b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80007b2:	4b12      	ldr	r3, [pc, #72]	@ (80007fc <MX_I2C1_Init+0x54>)
 80007b4:	4a13      	ldr	r2, [pc, #76]	@ (8000804 <MX_I2C1_Init+0x5c>)
 80007b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 80007b8:	4b10      	ldr	r3, [pc, #64]	@ (80007fc <MX_I2C1_Init+0x54>)
 80007ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007be:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007c0:	4b0e      	ldr	r3, [pc, #56]	@ (80007fc <MX_I2C1_Init+0x54>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007c6:	4b0d      	ldr	r3, [pc, #52]	@ (80007fc <MX_I2C1_Init+0x54>)
 80007c8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	@ (80007fc <MX_I2C1_Init+0x54>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007d4:	4b09      	ldr	r3, [pc, #36]	@ (80007fc <MX_I2C1_Init+0x54>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007da:	4b08      	ldr	r3, [pc, #32]	@ (80007fc <MX_I2C1_Init+0x54>)
 80007dc:	2200      	movs	r2, #0
 80007de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007e0:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <MX_I2C1_Init+0x54>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	@ (80007fc <MX_I2C1_Init+0x54>)
 80007e8:	f000 fffa 	bl	80017e0 <HAL_I2C_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 80007f2:	f000 fa64 	bl	8000cbe <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	2000016c 	.word	0x2000016c
 8000800:	40005400 	.word	0x40005400
 8000804:	00061a80 	.word	0x00061a80

08000808 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800080c:	4b12      	ldr	r3, [pc, #72]	@ (8000858 <MX_I2S2_Init+0x50>)
 800080e:	4a13      	ldr	r2, [pc, #76]	@ (800085c <MX_I2S2_Init+0x54>)
 8000810:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000812:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <MX_I2S2_Init+0x50>)
 8000814:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000818:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800081a:	4b0f      	ldr	r3, [pc, #60]	@ (8000858 <MX_I2S2_Init+0x50>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000820:	4b0d      	ldr	r3, [pc, #52]	@ (8000858 <MX_I2S2_Init+0x50>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000826:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <MX_I2S2_Init+0x50>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800082c:	4b0a      	ldr	r3, [pc, #40]	@ (8000858 <MX_I2S2_Init+0x50>)
 800082e:	4a0c      	ldr	r2, [pc, #48]	@ (8000860 <MX_I2S2_Init+0x58>)
 8000830:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000832:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <MX_I2S2_Init+0x50>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000838:	4b07      	ldr	r3, [pc, #28]	@ (8000858 <MX_I2S2_Init+0x50>)
 800083a:	2200      	movs	r2, #0
 800083c:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800083e:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <MX_I2S2_Init+0x50>)
 8000840:	2201      	movs	r2, #1
 8000842:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000844:	4804      	ldr	r0, [pc, #16]	@ (8000858 <MX_I2S2_Init+0x50>)
 8000846:	f001 ffef 	bl	8002828 <HAL_I2S_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000850:	f000 fa35 	bl	8000cbe <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	200001c0 	.word	0x200001c0
 800085c:	40003800 	.word	0x40003800
 8000860:	00017700 	.word	0x00017700

08000864 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000868:	4b13      	ldr	r3, [pc, #76]	@ (80008b8 <MX_I2S3_Init+0x54>)
 800086a:	4a14      	ldr	r2, [pc, #80]	@ (80008bc <MX_I2S3_Init+0x58>)
 800086c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800086e:	4b12      	ldr	r3, [pc, #72]	@ (80008b8 <MX_I2S3_Init+0x54>)
 8000870:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000874:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000876:	4b10      	ldr	r3, [pc, #64]	@ (80008b8 <MX_I2S3_Init+0x54>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800087c:	4b0e      	ldr	r3, [pc, #56]	@ (80008b8 <MX_I2S3_Init+0x54>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000882:	4b0d      	ldr	r3, [pc, #52]	@ (80008b8 <MX_I2S3_Init+0x54>)
 8000884:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000888:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800088a:	4b0b      	ldr	r3, [pc, #44]	@ (80008b8 <MX_I2S3_Init+0x54>)
 800088c:	4a0c      	ldr	r2, [pc, #48]	@ (80008c0 <MX_I2S3_Init+0x5c>)
 800088e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000890:	4b09      	ldr	r3, [pc, #36]	@ (80008b8 <MX_I2S3_Init+0x54>)
 8000892:	2200      	movs	r2, #0
 8000894:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000896:	4b08      	ldr	r3, [pc, #32]	@ (80008b8 <MX_I2S3_Init+0x54>)
 8000898:	2200      	movs	r2, #0
 800089a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800089c:	4b06      	ldr	r3, [pc, #24]	@ (80008b8 <MX_I2S3_Init+0x54>)
 800089e:	2200      	movs	r2, #0
 80008a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008a2:	4805      	ldr	r0, [pc, #20]	@ (80008b8 <MX_I2S3_Init+0x54>)
 80008a4:	f001 ffc0 	bl	8002828 <HAL_I2S_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80008ae:	f000 fa06 	bl	8000cbe <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000208 	.word	0x20000208
 80008bc:	40003c00 	.word	0x40003c00
 80008c0:	00017700 	.word	0x00017700

080008c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008c8:	4b17      	ldr	r3, [pc, #92]	@ (8000928 <MX_SPI1_Init+0x64>)
 80008ca:	4a18      	ldr	r2, [pc, #96]	@ (800092c <MX_SPI1_Init+0x68>)
 80008cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008ce:	4b16      	ldr	r3, [pc, #88]	@ (8000928 <MX_SPI1_Init+0x64>)
 80008d0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008d6:	4b14      	ldr	r3, [pc, #80]	@ (8000928 <MX_SPI1_Init+0x64>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008dc:	4b12      	ldr	r3, [pc, #72]	@ (8000928 <MX_SPI1_Init+0x64>)
 80008de:	2200      	movs	r2, #0
 80008e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008e2:	4b11      	ldr	r3, [pc, #68]	@ (8000928 <MX_SPI1_Init+0x64>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000928 <MX_SPI1_Init+0x64>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000928 <MX_SPI1_Init+0x64>)
 80008f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000928 <MX_SPI1_Init+0x64>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000928 <MX_SPI1_Init+0x64>)
 80008fe:	2200      	movs	r2, #0
 8000900:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000902:	4b09      	ldr	r3, [pc, #36]	@ (8000928 <MX_SPI1_Init+0x64>)
 8000904:	2200      	movs	r2, #0
 8000906:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000908:	4b07      	ldr	r3, [pc, #28]	@ (8000928 <MX_SPI1_Init+0x64>)
 800090a:	2200      	movs	r2, #0
 800090c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800090e:	4b06      	ldr	r3, [pc, #24]	@ (8000928 <MX_SPI1_Init+0x64>)
 8000910:	220a      	movs	r2, #10
 8000912:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000914:	4804      	ldr	r0, [pc, #16]	@ (8000928 <MX_SPI1_Init+0x64>)
 8000916:	f004 fc81 	bl	800521c <HAL_SPI_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000920:	f000 f9cd 	bl	8000cbe <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000250 	.word	0x20000250
 800092c:	40013000 	.word	0x40013000

08000930 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08c      	sub	sp, #48	@ 0x30
 8000934:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
 8000942:	60da      	str	r2, [r3, #12]
 8000944:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	61bb      	str	r3, [r7, #24]
 800094a:	4b61      	ldr	r3, [pc, #388]	@ (8000ad0 <MX_GPIO_Init+0x1a0>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	4a60      	ldr	r2, [pc, #384]	@ (8000ad0 <MX_GPIO_Init+0x1a0>)
 8000950:	f043 0310 	orr.w	r3, r3, #16
 8000954:	6313      	str	r3, [r2, #48]	@ 0x30
 8000956:	4b5e      	ldr	r3, [pc, #376]	@ (8000ad0 <MX_GPIO_Init+0x1a0>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	f003 0310 	and.w	r3, r3, #16
 800095e:	61bb      	str	r3, [r7, #24]
 8000960:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	617b      	str	r3, [r7, #20]
 8000966:	4b5a      	ldr	r3, [pc, #360]	@ (8000ad0 <MX_GPIO_Init+0x1a0>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	4a59      	ldr	r2, [pc, #356]	@ (8000ad0 <MX_GPIO_Init+0x1a0>)
 800096c:	f043 0304 	orr.w	r3, r3, #4
 8000970:	6313      	str	r3, [r2, #48]	@ 0x30
 8000972:	4b57      	ldr	r3, [pc, #348]	@ (8000ad0 <MX_GPIO_Init+0x1a0>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	f003 0304 	and.w	r3, r3, #4
 800097a:	617b      	str	r3, [r7, #20]
 800097c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	613b      	str	r3, [r7, #16]
 8000982:	4b53      	ldr	r3, [pc, #332]	@ (8000ad0 <MX_GPIO_Init+0x1a0>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	4a52      	ldr	r2, [pc, #328]	@ (8000ad0 <MX_GPIO_Init+0x1a0>)
 8000988:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800098c:	6313      	str	r3, [r2, #48]	@ 0x30
 800098e:	4b50      	ldr	r3, [pc, #320]	@ (8000ad0 <MX_GPIO_Init+0x1a0>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000996:	613b      	str	r3, [r7, #16]
 8000998:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	4b4c      	ldr	r3, [pc, #304]	@ (8000ad0 <MX_GPIO_Init+0x1a0>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	4a4b      	ldr	r2, [pc, #300]	@ (8000ad0 <MX_GPIO_Init+0x1a0>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009aa:	4b49      	ldr	r3, [pc, #292]	@ (8000ad0 <MX_GPIO_Init+0x1a0>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	60bb      	str	r3, [r7, #8]
 80009ba:	4b45      	ldr	r3, [pc, #276]	@ (8000ad0 <MX_GPIO_Init+0x1a0>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	4a44      	ldr	r2, [pc, #272]	@ (8000ad0 <MX_GPIO_Init+0x1a0>)
 80009c0:	f043 0302 	orr.w	r3, r3, #2
 80009c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c6:	4b42      	ldr	r3, [pc, #264]	@ (8000ad0 <MX_GPIO_Init+0x1a0>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	f003 0302 	and.w	r3, r3, #2
 80009ce:	60bb      	str	r3, [r7, #8]
 80009d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	4b3e      	ldr	r3, [pc, #248]	@ (8000ad0 <MX_GPIO_Init+0x1a0>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	4a3d      	ldr	r2, [pc, #244]	@ (8000ad0 <MX_GPIO_Init+0x1a0>)
 80009dc:	f043 0308 	orr.w	r3, r3, #8
 80009e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e2:	4b3b      	ldr	r3, [pc, #236]	@ (8000ad0 <MX_GPIO_Init+0x1a0>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	f003 0308 	and.w	r3, r3, #8
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2108      	movs	r1, #8
 80009f2:	4838      	ldr	r0, [pc, #224]	@ (8000ad4 <MX_GPIO_Init+0x1a4>)
 80009f4:	f000 fec0 	bl	8001778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80009f8:	2201      	movs	r2, #1
 80009fa:	2101      	movs	r1, #1
 80009fc:	4836      	ldr	r0, [pc, #216]	@ (8000ad8 <MX_GPIO_Init+0x1a8>)
 80009fe:	f000 febb 	bl	8001778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a02:	2200      	movs	r2, #0
 8000a04:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000a08:	4834      	ldr	r0, [pc, #208]	@ (8000adc <MX_GPIO_Init+0x1ac>)
 8000a0a:	f000 feb5 	bl	8001778 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000a0e:	2304      	movs	r3, #4
 8000a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a12:	2300      	movs	r3, #0
 8000a14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	482c      	ldr	r0, [pc, #176]	@ (8000ad4 <MX_GPIO_Init+0x1a4>)
 8000a22:	f000 fd0d 	bl	8001440 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a26:	2308      	movs	r3, #8
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2300      	movs	r3, #0
 8000a34:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a36:	f107 031c 	add.w	r3, r7, #28
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4825      	ldr	r0, [pc, #148]	@ (8000ad4 <MX_GPIO_Init+0x1a4>)
 8000a3e:	f000 fcff 	bl	8001440 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000a42:	2332      	movs	r3, #50	@ 0x32
 8000a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a46:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a50:	f107 031c 	add.w	r3, r7, #28
 8000a54:	4619      	mov	r1, r3
 8000a56:	481f      	ldr	r0, [pc, #124]	@ (8000ad4 <MX_GPIO_Init+0x1a4>)
 8000a58:	f000 fcf2 	bl	8001440 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	4619      	mov	r1, r3
 8000a72:	4819      	ldr	r0, [pc, #100]	@ (8000ad8 <MX_GPIO_Init+0x1a8>)
 8000a74:	f000 fce4 	bl	8001440 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a7c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a86:	f107 031c 	add.w	r3, r7, #28
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4814      	ldr	r0, [pc, #80]	@ (8000ae0 <MX_GPIO_Init+0x1b0>)
 8000a8e:	f000 fcd7 	bl	8001440 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a92:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000a96:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aa4:	f107 031c 	add.w	r3, r7, #28
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	480c      	ldr	r0, [pc, #48]	@ (8000adc <MX_GPIO_Init+0x1ac>)
 8000aac:	f000 fcc8 	bl	8001440 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ab0:	2320      	movs	r3, #32
 8000ab2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000abc:	f107 031c 	add.w	r3, r7, #28
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4806      	ldr	r0, [pc, #24]	@ (8000adc <MX_GPIO_Init+0x1ac>)
 8000ac4:	f000 fcbc 	bl	8001440 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ac8:	bf00      	nop
 8000aca:	3730      	adds	r7, #48	@ 0x30
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	40020800 	.word	0x40020800
 8000adc:	40020c00 	.word	0x40020c00
 8000ae0:	40020000 	.word	0x40020000

08000ae4 <Opravilo_LED>:


/* USER CODE BEGIN 4 */

void Opravilo_LED(void *argument)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
// TODO: integriranje implementacije

	while(1)
	{
		vTaskDelay(pdMS_TO_TICKS(100));
 8000aec:	2064      	movs	r0, #100	@ 0x64
 8000aee:	f009 fac3 	bl	800a078 <vTaskDelay>

		//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);

		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000af2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000af6:	4804      	ldr	r0, [pc, #16]	@ (8000b08 <Opravilo_LED+0x24>)
 8000af8:	f000 fe57 	bl	80017aa <HAL_GPIO_TogglePin>

		vTaskDelay(pdMS_TO_TICKS(100));
 8000afc:	2064      	movs	r0, #100	@ 0x64
 8000afe:	f009 fabb 	bl	800a078 <vTaskDelay>
		vTaskDelay(pdMS_TO_TICKS(100));
 8000b02:	bf00      	nop
 8000b04:	e7f2      	b.n	8000aec <Opravilo_LED+0x8>
 8000b06:	bf00      	nop
 8000b08:	40020c00 	.word	0x40020c00

08000b0c <Opravilo_pospeskometer>:
// S prisitkom na gumb PB1 se aktivira oz. onemogoci delovanje pospeskometra (toggle)
// Kadar je omogoceno posiljanje podatkov sveti zelena LED
// Modra led nakazuje, ce se podatki posiljajo in se se niso prebrali na PC-ju
// Podatki se posljejo ob spremembi stanja
void Opravilo_pospeskometer(void *argument)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	uint8_t gumb_stisnjen = 0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	75fb      	strb	r3, [r7, #23]

	bool prvi_pritisk = false;			// CDC ON
 8000b18:	2300      	movs	r3, #0
 8000b1a:	75bb      	strb	r3, [r7, #22]
	bool drugi_pritisk = true;			// CDC OFF
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	757b      	strb	r3, [r7, #21]

	int16_t meritev;					// Hrani meritev iz pospeskometra v vsaki iteraciji opravila

	int16_t paket[2];					// hrani paket, ki se bo ob vsaki spremembi smeri voznje poslal na PC
	paket[0] = 0xaaab;					// glava za zaznamek zacetek paketa
 8000b20:	f64a 23ab 	movw	r3, #43691	@ 0xaaab
 8000b24:	81bb      	strh	r3, [r7, #12]
	paket[1] = 0xcccf;					// privzeto se "premika naprej"
 8000b26:	f64c 43cf 	movw	r3, #52431	@ 0xcccf
 8000b2a:	81fb      	strh	r3, [r7, #14]

	int16_t prejsnji_paket = 0x00000;	// hrani prejsnji paket, da se lahko preverja sprememba smeri voznje
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	827b      	strh	r3, [r7, #18]

	// Neskoncna zanka, kejr se zaznavajo pritiski na gumb, izvajajo meritve senzorja ter klicejo opravila za posiljanje na PC
	while(1)
	{
		// Preverimo ce je gumb pritisnjen in ce gumb pred tem se ni bil stisnjen
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET && gumb_stisnjen == 0)
 8000b30:	2101      	movs	r1, #1
 8000b32:	4841      	ldr	r0, [pc, #260]	@ (8000c38 <Opravilo_pospeskometer+0x12c>)
 8000b34:	f000 fe08 	bl	8001748 <HAL_GPIO_ReadPin>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d113      	bne.n	8000b66 <Opravilo_pospeskometer+0x5a>
 8000b3e:	7dfb      	ldrb	r3, [r7, #23]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d110      	bne.n	8000b66 <Opravilo_pospeskometer+0x5a>
		{
			// Gumb je sedaj stisnjen
			gumb_stisnjen = 1;
 8000b44:	2301      	movs	r3, #1
 8000b46:	75fb      	strb	r3, [r7, #23]

			if(prvi_pritisk == true){
 8000b48:	7dbb      	ldrb	r3, [r7, #22]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d004      	beq.n	8000b58 <Opravilo_pospeskometer+0x4c>
				drugi_pritisk = true;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	757b      	strb	r3, [r7, #21]
				prvi_pritisk = false;
 8000b52:	2300      	movs	r3, #0
 8000b54:	75bb      	strb	r3, [r7, #22]
 8000b56:	e006      	b.n	8000b66 <Opravilo_pospeskometer+0x5a>
			}
			else if(drugi_pritisk == true){
 8000b58:	7d7b      	ldrb	r3, [r7, #21]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d003      	beq.n	8000b66 <Opravilo_pospeskometer+0x5a>
				prvi_pritisk = true;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	75bb      	strb	r3, [r7, #22]
				drugi_pritisk = false;
 8000b62:	2300      	movs	r3, #0
 8000b64:	757b      	strb	r3, [r7, #21]
		}

		// Debounncing logika
		// preverimo ce je bil gumb spuscen
		// ce je bil potem sele nato dovolimo ponovni zamenjavi stanj
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET && gumb_stisnjen == 1) {
 8000b66:	2101      	movs	r1, #1
 8000b68:	4833      	ldr	r0, [pc, #204]	@ (8000c38 <Opravilo_pospeskometer+0x12c>)
 8000b6a:	f000 fded 	bl	8001748 <HAL_GPIO_ReadPin>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d104      	bne.n	8000b7e <Opravilo_pospeskometer+0x72>
 8000b74:	7dfb      	ldrb	r3, [r7, #23]
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d101      	bne.n	8000b7e <Opravilo_pospeskometer+0x72>
			// Gumb sedaj ni stisnjen
			gumb_stisnjen = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	75fb      	strb	r3, [r7, #23]
		}

		i2c1_beriRegistre(0x19, 0x28, (uint8_t*)&meritev, 2); // Izvedemo meritev Y-osi na pospeskometru
 8000b7e:	f107 0210 	add.w	r2, r7, #16
 8000b82:	2302      	movs	r3, #2
 8000b84:	2128      	movs	r1, #40	@ 0x28
 8000b86:	2019      	movs	r0, #25
 8000b88:	f7ff fcc4 	bl	8000514 <i2c1_beriRegistre>

		// Aktiviraj/deaktiviraj CDC - LD12 (zelena LED) na ploscici nakazuje stanje CDC prenosa
		if(prvi_pritisk == true){
 8000b8c:	7dbb      	ldrb	r3, [r7, #22]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d048      	beq.n	8000c24 <Opravilo_pospeskometer+0x118>
			// CDC prenos omogocen

			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);		// Prenos preko CDC bo omogocen, zato prizgemo zeleno LED
 8000b92:	2201      	movs	r2, #1
 8000b94:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b98:	4828      	ldr	r0, [pc, #160]	@ (8000c3c <Opravilo_pospeskometer+0x130>)
 8000b9a:	f000 fded 	bl	8001778 <HAL_GPIO_WritePin>

			if(meritev <= -500){
 8000b9e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000ba2:	f513 7ffa 	cmn.w	r3, #500	@ 0x1f4
 8000ba6:	dc09      	bgt.n	8000bbc <Opravilo_pospeskometer+0xb0>
				paket[1] = 0xfffc;
 8000ba8:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8000bac:	81fb      	strh	r3, [r7, #14]
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);	// Prizgi rdeco LED
 8000bae:	2201      	movs	r2, #1
 8000bb0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bb4:	4821      	ldr	r0, [pc, #132]	@ (8000c3c <Opravilo_pospeskometer+0x130>)
 8000bb6:	f000 fddf 	bl	8001778 <HAL_GPIO_WritePin>
 8000bba:	e00e      	b.n	8000bda <Opravilo_pospeskometer+0xce>

			}
			else if(meritev >= 1500){
 8000bbc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000bc0:	f240 52db 	movw	r2, #1499	@ 0x5db
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	dd08      	ble.n	8000bda <Opravilo_pospeskometer+0xce>
				paket[1] = 0xcccf;
 8000bc8:	f64c 43cf 	movw	r3, #52431	@ 0xcccf
 8000bcc:	81fb      	strh	r3, [r7, #14]
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);	// Ugasni rdeco LED
 8000bce:	2200      	movs	r2, #0
 8000bd0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bd4:	4819      	ldr	r0, [pc, #100]	@ (8000c3c <Opravilo_pospeskometer+0x130>)
 8000bd6:	f000 fdcf 	bl	8001778 <HAL_GPIO_WritePin>
			}

			if (prejsnji_paket != paket[1]){
 8000bda:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bde:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000be2:	429a      	cmp	r2, r3
 8000be4:	d01b      	beq.n	8000c1e <Opravilo_pospeskometer+0x112>

				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000be6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000bea:	4814      	ldr	r0, [pc, #80]	@ (8000c3c <Opravilo_pospeskometer+0x130>)
 8000bec:	f000 fddd 	bl	80017aa <HAL_GPIO_TogglePin>
				// Poslji paket v queue
				if (xQueueSend(cdcTxQueue, &paket, 0) == pdPASS) {
 8000bf0:	4b13      	ldr	r3, [pc, #76]	@ (8000c40 <Opravilo_pospeskometer+0x134>)
 8000bf2:	6818      	ldr	r0, [r3, #0]
 8000bf4:	f107 010c 	add.w	r1, r7, #12
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f008 fc8e 	bl	800951c <xQueueGenericSend>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d104      	bne.n	8000c10 <Opravilo_pospeskometer+0x104>
					HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000c06:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c0a:	480c      	ldr	r0, [pc, #48]	@ (8000c3c <Opravilo_pospeskometer+0x130>)
 8000c0c:	f000 fdcd 	bl	80017aa <HAL_GPIO_TogglePin>
				}
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000c10:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c14:	4809      	ldr	r0, [pc, #36]	@ (8000c3c <Opravilo_pospeskometer+0x130>)
 8000c16:	f000 fdc8 	bl	80017aa <HAL_GPIO_TogglePin>

				prejsnji_paket = paket[1];
 8000c1a:	89fb      	ldrh	r3, [r7, #14]
 8000c1c:	827b      	strh	r3, [r7, #18]
			}

			vTaskDelay(pdMS_TO_TICKS(10));
 8000c1e:	200a      	movs	r0, #10
 8000c20:	f009 fa2a 	bl	800a078 <vTaskDelay>
		}

		if(drugi_pritisk == true){
 8000c24:	7d7b      	ldrb	r3, [r7, #21]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d082      	beq.n	8000b30 <Opravilo_pospeskometer+0x24>
			// CDC prenos onemogocen
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);		// Prenos preko CDC ne bo omogocen, zato ugansemo zeleno LED
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c30:	4802      	ldr	r0, [pc, #8]	@ (8000c3c <Opravilo_pospeskometer+0x130>)
 8000c32:	f000 fda1 	bl	8001778 <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET && gumb_stisnjen == 0)
 8000c36:	e77b      	b.n	8000b30 <Opravilo_pospeskometer+0x24>
 8000c38:	40020000 	.word	0x40020000
 8000c3c:	40020c00 	.word	0x40020c00
 8000c40:	200002b4 	.word	0x200002b4

08000c44 <Opravilo_CDC_Receive>:
		}
	}
}

void Opravilo_CDC_Receive(void *argument)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
//        {
//            // Pocakamo da se podatki prejmejo
//            xQueueSend(cdcRxQueue, rxBuffer, portMAX_DELAY);
//        }

        vTaskDelay(pdMS_TO_TICKS(10)); // Majhna zakasnitev
 8000c4c:	200a      	movs	r0, #10
 8000c4e:	f009 fa13 	bl	800a078 <vTaskDelay>
 8000c52:	e7fb      	b.n	8000c4c <Opravilo_CDC_Receive+0x8>

08000c54 <Opravilo_CDC_Transmit>:
    }
}

void Opravilo_CDC_Transmit(void *argument) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
	uint32_t txPacket; // Buffer za paket, kis e bo posiljal

	while (1) {
		// Pocakamo, da paket prispe v queue
		if (xQueueReceive(cdcTxQueue, &txPacket, portMAX_DELAY) == pdPASS) {
 8000c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c88 <Opravilo_CDC_Transmit+0x34>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f107 010c 	add.w	r1, r7, #12
 8000c64:	f04f 32ff 	mov.w	r2, #4294967295
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f008 fdf7 	bl	800985c <xQueueReceive>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d105      	bne.n	8000c80 <Opravilo_CDC_Transmit+0x2c>
			// Poslji paket preko USB
			CDC_Transmit_FS((uint8_t *)&txPacket, sizeof(txPacket));
 8000c74:	f107 030c 	add.w	r3, r7, #12
 8000c78:	2104      	movs	r1, #4
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f00a ffda 	bl	800bc34 <CDC_Transmit_FS>
		}

		vTaskDelay(pdMS_TO_TICKS(10)); // Delay za task switching
 8000c80:	200a      	movs	r0, #10
 8000c82:	f009 f9f9 	bl	800a078 <vTaskDelay>
		if (xQueueReceive(cdcTxQueue, &txPacket, portMAX_DELAY) == pdPASS) {
 8000c86:	e7e9      	b.n	8000c5c <Opravilo_CDC_Transmit+0x8>
 8000c88:	200002b4 	.word	0x200002b4

08000c8c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000c94:	f00a ff08 	bl	800baa8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c98:	2001      	movs	r0, #1
 8000c9a:	f008 f9f5 	bl	8009088 <osDelay>
 8000c9e:	e7fb      	b.n	8000c98 <StartDefaultTask+0xc>

08000ca0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000cb0:	d101      	bne.n	8000cb6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cb2:	f000 fa9f 	bl	80011f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc2:	b672      	cpsid	i
}
 8000cc4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc6:	bf00      	nop
 8000cc8:	e7fd      	b.n	8000cc6 <Error_Handler+0x8>
	...

08000ccc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	607b      	str	r3, [r7, #4]
 8000cd6:	4b12      	ldr	r3, [pc, #72]	@ (8000d20 <HAL_MspInit+0x54>)
 8000cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cda:	4a11      	ldr	r2, [pc, #68]	@ (8000d20 <HAL_MspInit+0x54>)
 8000cdc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ce0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ce2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d20 <HAL_MspInit+0x54>)
 8000ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ce6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	603b      	str	r3, [r7, #0]
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8000d20 <HAL_MspInit+0x54>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf6:	4a0a      	ldr	r2, [pc, #40]	@ (8000d20 <HAL_MspInit+0x54>)
 8000cf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cfe:	4b08      	ldr	r3, [pc, #32]	@ (8000d20 <HAL_MspInit+0x54>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d06:	603b      	str	r3, [r7, #0]
 8000d08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	210f      	movs	r1, #15
 8000d0e:	f06f 0001 	mvn.w	r0, #1
 8000d12:	f000 fb6b 	bl	80013ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40023800 	.word	0x40023800

08000d24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08a      	sub	sp, #40	@ 0x28
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a19      	ldr	r2, [pc, #100]	@ (8000da8 <HAL_I2C_MspInit+0x84>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d12c      	bne.n	8000da0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]
 8000d4a:	4b18      	ldr	r3, [pc, #96]	@ (8000dac <HAL_I2C_MspInit+0x88>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4e:	4a17      	ldr	r2, [pc, #92]	@ (8000dac <HAL_I2C_MspInit+0x88>)
 8000d50:	f043 0302 	orr.w	r3, r3, #2
 8000d54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d56:	4b15      	ldr	r3, [pc, #84]	@ (8000dac <HAL_I2C_MspInit+0x88>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	f003 0302 	and.w	r3, r3, #2
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d62:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d68:	2312      	movs	r3, #18
 8000d6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d70:	2300      	movs	r3, #0
 8000d72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d74:	2304      	movs	r3, #4
 8000d76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	480c      	ldr	r0, [pc, #48]	@ (8000db0 <HAL_I2C_MspInit+0x8c>)
 8000d80:	f000 fb5e 	bl	8001440 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d84:	2300      	movs	r3, #0
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	4b08      	ldr	r3, [pc, #32]	@ (8000dac <HAL_I2C_MspInit+0x88>)
 8000d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d8c:	4a07      	ldr	r2, [pc, #28]	@ (8000dac <HAL_I2C_MspInit+0x88>)
 8000d8e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d92:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d94:	4b05      	ldr	r3, [pc, #20]	@ (8000dac <HAL_I2C_MspInit+0x88>)
 8000d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000da0:	bf00      	nop
 8000da2:	3728      	adds	r7, #40	@ 0x28
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40005400 	.word	0x40005400
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40020400 	.word	0x40020400

08000db4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08e      	sub	sp, #56	@ 0x38
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a59      	ldr	r2, [pc, #356]	@ (8000f38 <HAL_I2S_MspInit+0x184>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d15b      	bne.n	8000e8e <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	623b      	str	r3, [r7, #32]
 8000dda:	4b58      	ldr	r3, [pc, #352]	@ (8000f3c <HAL_I2S_MspInit+0x188>)
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dde:	4a57      	ldr	r2, [pc, #348]	@ (8000f3c <HAL_I2S_MspInit+0x188>)
 8000de0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000de4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000de6:	4b55      	ldr	r3, [pc, #340]	@ (8000f3c <HAL_I2S_MspInit+0x188>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dee:	623b      	str	r3, [r7, #32]
 8000df0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
 8000df6:	4b51      	ldr	r3, [pc, #324]	@ (8000f3c <HAL_I2S_MspInit+0x188>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfa:	4a50      	ldr	r2, [pc, #320]	@ (8000f3c <HAL_I2S_MspInit+0x188>)
 8000dfc:	f043 0304 	orr.w	r3, r3, #4
 8000e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e02:	4b4e      	ldr	r3, [pc, #312]	@ (8000f3c <HAL_I2S_MspInit+0x188>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e06:	f003 0304 	and.w	r3, r3, #4
 8000e0a:	61fb      	str	r3, [r7, #28]
 8000e0c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61bb      	str	r3, [r7, #24]
 8000e12:	4b4a      	ldr	r3, [pc, #296]	@ (8000f3c <HAL_I2S_MspInit+0x188>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e16:	4a49      	ldr	r2, [pc, #292]	@ (8000f3c <HAL_I2S_MspInit+0x188>)
 8000e18:	f043 0302 	orr.w	r3, r3, #2
 8000e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1e:	4b47      	ldr	r3, [pc, #284]	@ (8000f3c <HAL_I2S_MspInit+0x188>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e22:	f003 0302 	and.w	r3, r3, #2
 8000e26:	61bb      	str	r3, [r7, #24]
 8000e28:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e2a:	2304      	movs	r3, #4
 8000e2c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e36:	2300      	movs	r3, #0
 8000e38:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000e3a:	2306      	movs	r3, #6
 8000e3c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e42:	4619      	mov	r1, r3
 8000e44:	483e      	ldr	r0, [pc, #248]	@ (8000f40 <HAL_I2S_MspInit+0x18c>)
 8000e46:	f000 fafb 	bl	8001440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000e4a:	2308      	movs	r3, #8
 8000e4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2300      	movs	r3, #0
 8000e58:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e5a:	2305      	movs	r3, #5
 8000e5c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000e5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e62:	4619      	mov	r1, r3
 8000e64:	4836      	ldr	r0, [pc, #216]	@ (8000f40 <HAL_I2S_MspInit+0x18c>)
 8000e66:	f000 faeb 	bl	8001440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000e6a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e6e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e70:	2302      	movs	r3, #2
 8000e72:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e7c:	2305      	movs	r3, #5
 8000e7e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e84:	4619      	mov	r1, r3
 8000e86:	482f      	ldr	r0, [pc, #188]	@ (8000f44 <HAL_I2S_MspInit+0x190>)
 8000e88:	f000 fada 	bl	8001440 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000e8c:	e04f      	b.n	8000f2e <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a2d      	ldr	r2, [pc, #180]	@ (8000f48 <HAL_I2S_MspInit+0x194>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d14a      	bne.n	8000f2e <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]
 8000e9c:	4b27      	ldr	r3, [pc, #156]	@ (8000f3c <HAL_I2S_MspInit+0x188>)
 8000e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea0:	4a26      	ldr	r2, [pc, #152]	@ (8000f3c <HAL_I2S_MspInit+0x188>)
 8000ea2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ea6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ea8:	4b24      	ldr	r3, [pc, #144]	@ (8000f3c <HAL_I2S_MspInit+0x188>)
 8000eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000eb0:	617b      	str	r3, [r7, #20]
 8000eb2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	4b20      	ldr	r3, [pc, #128]	@ (8000f3c <HAL_I2S_MspInit+0x188>)
 8000eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebc:	4a1f      	ldr	r2, [pc, #124]	@ (8000f3c <HAL_I2S_MspInit+0x188>)
 8000ebe:	f043 0301 	orr.w	r3, r3, #1
 8000ec2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec4:	4b1d      	ldr	r3, [pc, #116]	@ (8000f3c <HAL_I2S_MspInit+0x188>)
 8000ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	4b19      	ldr	r3, [pc, #100]	@ (8000f3c <HAL_I2S_MspInit+0x188>)
 8000ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed8:	4a18      	ldr	r2, [pc, #96]	@ (8000f3c <HAL_I2S_MspInit+0x188>)
 8000eda:	f043 0304 	orr.w	r3, r3, #4
 8000ede:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee0:	4b16      	ldr	r3, [pc, #88]	@ (8000f3c <HAL_I2S_MspInit+0x188>)
 8000ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee4:	f003 0304 	and.w	r3, r3, #4
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000eec:	2310      	movs	r3, #16
 8000eee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000efc:	2306      	movs	r3, #6
 8000efe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000f00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f04:	4619      	mov	r1, r3
 8000f06:	4811      	ldr	r0, [pc, #68]	@ (8000f4c <HAL_I2S_MspInit+0x198>)
 8000f08:	f000 fa9a 	bl	8001440 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000f0c:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000f10:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f12:	2302      	movs	r3, #2
 8000f14:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f1e:	2306      	movs	r3, #6
 8000f20:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f26:	4619      	mov	r1, r3
 8000f28:	4805      	ldr	r0, [pc, #20]	@ (8000f40 <HAL_I2S_MspInit+0x18c>)
 8000f2a:	f000 fa89 	bl	8001440 <HAL_GPIO_Init>
}
 8000f2e:	bf00      	nop
 8000f30:	3738      	adds	r7, #56	@ 0x38
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40003800 	.word	0x40003800
 8000f3c:	40023800 	.word	0x40023800
 8000f40:	40020800 	.word	0x40020800
 8000f44:	40020400 	.word	0x40020400
 8000f48:	40003c00 	.word	0x40003c00
 8000f4c:	40020000 	.word	0x40020000

08000f50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08a      	sub	sp, #40	@ 0x28
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a19      	ldr	r2, [pc, #100]	@ (8000fd4 <HAL_SPI_MspInit+0x84>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d12b      	bne.n	8000fca <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
 8000f76:	4b18      	ldr	r3, [pc, #96]	@ (8000fd8 <HAL_SPI_MspInit+0x88>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f7a:	4a17      	ldr	r2, [pc, #92]	@ (8000fd8 <HAL_SPI_MspInit+0x88>)
 8000f7c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f80:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f82:	4b15      	ldr	r3, [pc, #84]	@ (8000fd8 <HAL_SPI_MspInit+0x88>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f8a:	613b      	str	r3, [r7, #16]
 8000f8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	4b11      	ldr	r3, [pc, #68]	@ (8000fd8 <HAL_SPI_MspInit+0x88>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f96:	4a10      	ldr	r2, [pc, #64]	@ (8000fd8 <HAL_SPI_MspInit+0x88>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd8 <HAL_SPI_MspInit+0x88>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000faa:	23e0      	movs	r3, #224	@ 0xe0
 8000fac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fba:	2305      	movs	r3, #5
 8000fbc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4805      	ldr	r0, [pc, #20]	@ (8000fdc <HAL_SPI_MspInit+0x8c>)
 8000fc6:	f000 fa3b 	bl	8001440 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000fca:	bf00      	nop
 8000fcc:	3728      	adds	r7, #40	@ 0x28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40013000 	.word	0x40013000
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40020000 	.word	0x40020000

08000fe0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08e      	sub	sp, #56	@ 0x38
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000fec:	2300      	movs	r3, #0
 8000fee:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	4b34      	ldr	r3, [pc, #208]	@ (80010c8 <HAL_InitTick+0xe8>)
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff8:	4a33      	ldr	r2, [pc, #204]	@ (80010c8 <HAL_InitTick+0xe8>)
 8000ffa:	f043 0301 	orr.w	r3, r3, #1
 8000ffe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001000:	4b31      	ldr	r3, [pc, #196]	@ (80010c8 <HAL_InitTick+0xe8>)
 8001002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800100c:	f107 0210 	add.w	r2, r7, #16
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	4611      	mov	r1, r2
 8001016:	4618      	mov	r0, r3
 8001018:	f003 ff7c 	bl	8004f14 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800101c:	6a3b      	ldr	r3, [r7, #32]
 800101e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001022:	2b00      	cmp	r3, #0
 8001024:	d103      	bne.n	800102e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001026:	f003 ff61 	bl	8004eec <HAL_RCC_GetPCLK1Freq>
 800102a:	6378      	str	r0, [r7, #52]	@ 0x34
 800102c:	e004      	b.n	8001038 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800102e:	f003 ff5d 	bl	8004eec <HAL_RCC_GetPCLK1Freq>
 8001032:	4603      	mov	r3, r0
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800103a:	4a24      	ldr	r2, [pc, #144]	@ (80010cc <HAL_InitTick+0xec>)
 800103c:	fba2 2303 	umull	r2, r3, r2, r3
 8001040:	0c9b      	lsrs	r3, r3, #18
 8001042:	3b01      	subs	r3, #1
 8001044:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001046:	4b22      	ldr	r3, [pc, #136]	@ (80010d0 <HAL_InitTick+0xf0>)
 8001048:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800104c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800104e:	4b20      	ldr	r3, [pc, #128]	@ (80010d0 <HAL_InitTick+0xf0>)
 8001050:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001054:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001056:	4a1e      	ldr	r2, [pc, #120]	@ (80010d0 <HAL_InitTick+0xf0>)
 8001058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800105a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800105c:	4b1c      	ldr	r3, [pc, #112]	@ (80010d0 <HAL_InitTick+0xf0>)
 800105e:	2200      	movs	r2, #0
 8001060:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001062:	4b1b      	ldr	r3, [pc, #108]	@ (80010d0 <HAL_InitTick+0xf0>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001068:	4b19      	ldr	r3, [pc, #100]	@ (80010d0 <HAL_InitTick+0xf0>)
 800106a:	2200      	movs	r2, #0
 800106c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800106e:	4818      	ldr	r0, [pc, #96]	@ (80010d0 <HAL_InitTick+0xf0>)
 8001070:	f004 f95d 	bl	800532e <HAL_TIM_Base_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800107a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800107e:	2b00      	cmp	r3, #0
 8001080:	d11b      	bne.n	80010ba <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001082:	4813      	ldr	r0, [pc, #76]	@ (80010d0 <HAL_InitTick+0xf0>)
 8001084:	f004 f9ac 	bl	80053e0 <HAL_TIM_Base_Start_IT>
 8001088:	4603      	mov	r3, r0
 800108a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800108e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001092:	2b00      	cmp	r3, #0
 8001094:	d111      	bne.n	80010ba <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001096:	201c      	movs	r0, #28
 8001098:	f000 f9c4 	bl	8001424 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b0f      	cmp	r3, #15
 80010a0:	d808      	bhi.n	80010b4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80010a2:	2200      	movs	r2, #0
 80010a4:	6879      	ldr	r1, [r7, #4]
 80010a6:	201c      	movs	r0, #28
 80010a8:	f000 f9a0 	bl	80013ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010ac:	4a09      	ldr	r2, [pc, #36]	@ (80010d4 <HAL_InitTick+0xf4>)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6013      	str	r3, [r2, #0]
 80010b2:	e002      	b.n	80010ba <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80010ba:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3738      	adds	r7, #56	@ 0x38
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40023800 	.word	0x40023800
 80010cc:	431bde83 	.word	0x431bde83
 80010d0:	200002b8 	.word	0x200002b8
 80010d4:	20000004 	.word	0x20000004

080010d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010dc:	bf00      	nop
 80010de:	e7fd      	b.n	80010dc <NMI_Handler+0x4>

080010e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010e4:	bf00      	nop
 80010e6:	e7fd      	b.n	80010e4 <HardFault_Handler+0x4>

080010e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010ec:	bf00      	nop
 80010ee:	e7fd      	b.n	80010ec <MemManage_Handler+0x4>

080010f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010f4:	bf00      	nop
 80010f6:	e7fd      	b.n	80010f4 <BusFault_Handler+0x4>

080010f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <UsageFault_Handler+0x4>

08001100 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
	...

08001110 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001114:	4802      	ldr	r0, [pc, #8]	@ (8001120 <TIM2_IRQHandler+0x10>)
 8001116:	f004 f9c5 	bl	80054a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	200002b8 	.word	0x200002b8

08001124 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001128:	4802      	ldr	r0, [pc, #8]	@ (8001134 <OTG_FS_IRQHandler+0x10>)
 800112a:	f002 f961 	bl	80033f0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	200061cc 	.word	0x200061cc

08001138 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800113c:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <SystemInit+0x20>)
 800113e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001142:	4a05      	ldr	r2, [pc, #20]	@ (8001158 <SystemInit+0x20>)
 8001144:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001148:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800115c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001194 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001160:	f7ff ffea 	bl	8001138 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001164:	480c      	ldr	r0, [pc, #48]	@ (8001198 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001166:	490d      	ldr	r1, [pc, #52]	@ (800119c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001168:	4a0d      	ldr	r2, [pc, #52]	@ (80011a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800116a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800116c:	e002      	b.n	8001174 <LoopCopyDataInit>

0800116e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800116e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001170:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001172:	3304      	adds	r3, #4

08001174 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001174:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001176:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001178:	d3f9      	bcc.n	800116e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800117a:	4a0a      	ldr	r2, [pc, #40]	@ (80011a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800117c:	4c0a      	ldr	r4, [pc, #40]	@ (80011a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800117e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001180:	e001      	b.n	8001186 <LoopFillZerobss>

08001182 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001182:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001184:	3204      	adds	r2, #4

08001186 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001186:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001188:	d3fb      	bcc.n	8001182 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800118a:	f00b fa11 	bl	800c5b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800118e:	f7ff f9fd 	bl	800058c <main>
  bx  lr    
 8001192:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001194:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001198:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800119c:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 80011a0:	0800c7d4 	.word	0x0800c7d4
  ldr r2, =_sbss
 80011a4:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 80011a8:	20006a10 	.word	0x20006a10

080011ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011ac:	e7fe      	b.n	80011ac <ADC_IRQHandler>
	...

080011b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011b4:	4b0e      	ldr	r3, [pc, #56]	@ (80011f0 <HAL_Init+0x40>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a0d      	ldr	r2, [pc, #52]	@ (80011f0 <HAL_Init+0x40>)
 80011ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011c0:	4b0b      	ldr	r3, [pc, #44]	@ (80011f0 <HAL_Init+0x40>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a0a      	ldr	r2, [pc, #40]	@ (80011f0 <HAL_Init+0x40>)
 80011c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011cc:	4b08      	ldr	r3, [pc, #32]	@ (80011f0 <HAL_Init+0x40>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a07      	ldr	r2, [pc, #28]	@ (80011f0 <HAL_Init+0x40>)
 80011d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d8:	2003      	movs	r0, #3
 80011da:	f000 f8fc 	bl	80013d6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011de:	200f      	movs	r0, #15
 80011e0:	f7ff fefe 	bl	8000fe0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011e4:	f7ff fd72 	bl	8000ccc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40023c00 	.word	0x40023c00

080011f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011f8:	4b06      	ldr	r3, [pc, #24]	@ (8001214 <HAL_IncTick+0x20>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <HAL_IncTick+0x24>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4413      	add	r3, r2
 8001204:	4a04      	ldr	r2, [pc, #16]	@ (8001218 <HAL_IncTick+0x24>)
 8001206:	6013      	str	r3, [r2, #0]
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	20000008 	.word	0x20000008
 8001218:	20000300 	.word	0x20000300

0800121c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  return uwTick;
 8001220:	4b03      	ldr	r3, [pc, #12]	@ (8001230 <HAL_GetTick+0x14>)
 8001222:	681b      	ldr	r3, [r3, #0]
}
 8001224:	4618      	mov	r0, r3
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	20000300 	.word	0x20000300

08001234 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800123c:	f7ff ffee 	bl	800121c <HAL_GetTick>
 8001240:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800124c:	d005      	beq.n	800125a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800124e:	4b0a      	ldr	r3, [pc, #40]	@ (8001278 <HAL_Delay+0x44>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	461a      	mov	r2, r3
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	4413      	add	r3, r2
 8001258:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800125a:	bf00      	nop
 800125c:	f7ff ffde 	bl	800121c <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	68fa      	ldr	r2, [r7, #12]
 8001268:	429a      	cmp	r2, r3
 800126a:	d8f7      	bhi.n	800125c <HAL_Delay+0x28>
  {
  }
}
 800126c:	bf00      	nop
 800126e:	bf00      	nop
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000008 	.word	0x20000008

0800127c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800128c:	4b0c      	ldr	r3, [pc, #48]	@ (80012c0 <__NVIC_SetPriorityGrouping+0x44>)
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001298:	4013      	ands	r3, r2
 800129a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ae:	4a04      	ldr	r2, [pc, #16]	@ (80012c0 <__NVIC_SetPriorityGrouping+0x44>)
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	60d3      	str	r3, [r2, #12]
}
 80012b4:	bf00      	nop
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c8:	4b04      	ldr	r3, [pc, #16]	@ (80012dc <__NVIC_GetPriorityGrouping+0x18>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	0a1b      	lsrs	r3, r3, #8
 80012ce:	f003 0307 	and.w	r3, r3, #7
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	db0b      	blt.n	800130a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	f003 021f 	and.w	r2, r3, #31
 80012f8:	4907      	ldr	r1, [pc, #28]	@ (8001318 <__NVIC_EnableIRQ+0x38>)
 80012fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fe:	095b      	lsrs	r3, r3, #5
 8001300:	2001      	movs	r0, #1
 8001302:	fa00 f202 	lsl.w	r2, r0, r2
 8001306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	e000e100 	.word	0xe000e100

0800131c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	6039      	str	r1, [r7, #0]
 8001326:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132c:	2b00      	cmp	r3, #0
 800132e:	db0a      	blt.n	8001346 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	b2da      	uxtb	r2, r3
 8001334:	490c      	ldr	r1, [pc, #48]	@ (8001368 <__NVIC_SetPriority+0x4c>)
 8001336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133a:	0112      	lsls	r2, r2, #4
 800133c:	b2d2      	uxtb	r2, r2
 800133e:	440b      	add	r3, r1
 8001340:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001344:	e00a      	b.n	800135c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	b2da      	uxtb	r2, r3
 800134a:	4908      	ldr	r1, [pc, #32]	@ (800136c <__NVIC_SetPriority+0x50>)
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	f003 030f 	and.w	r3, r3, #15
 8001352:	3b04      	subs	r3, #4
 8001354:	0112      	lsls	r2, r2, #4
 8001356:	b2d2      	uxtb	r2, r2
 8001358:	440b      	add	r3, r1
 800135a:	761a      	strb	r2, [r3, #24]
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	e000e100 	.word	0xe000e100
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001370:	b480      	push	{r7}
 8001372:	b089      	sub	sp, #36	@ 0x24
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	f1c3 0307 	rsb	r3, r3, #7
 800138a:	2b04      	cmp	r3, #4
 800138c:	bf28      	it	cs
 800138e:	2304      	movcs	r3, #4
 8001390:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3304      	adds	r3, #4
 8001396:	2b06      	cmp	r3, #6
 8001398:	d902      	bls.n	80013a0 <NVIC_EncodePriority+0x30>
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	3b03      	subs	r3, #3
 800139e:	e000      	b.n	80013a2 <NVIC_EncodePriority+0x32>
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a4:	f04f 32ff 	mov.w	r2, #4294967295
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	43da      	mvns	r2, r3
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	401a      	ands	r2, r3
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013b8:	f04f 31ff 	mov.w	r1, #4294967295
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	fa01 f303 	lsl.w	r3, r1, r3
 80013c2:	43d9      	mvns	r1, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c8:	4313      	orrs	r3, r2
         );
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3724      	adds	r7, #36	@ 0x24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b082      	sub	sp, #8
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff ff4c 	bl	800127c <__NVIC_SetPriorityGrouping>
}
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
 80013f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013fe:	f7ff ff61 	bl	80012c4 <__NVIC_GetPriorityGrouping>
 8001402:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	68b9      	ldr	r1, [r7, #8]
 8001408:	6978      	ldr	r0, [r7, #20]
 800140a:	f7ff ffb1 	bl	8001370 <NVIC_EncodePriority>
 800140e:	4602      	mov	r2, r0
 8001410:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001414:	4611      	mov	r1, r2
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff ff80 	bl	800131c <__NVIC_SetPriority>
}
 800141c:	bf00      	nop
 800141e:	3718      	adds	r7, #24
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800142e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff ff54 	bl	80012e0 <__NVIC_EnableIRQ>
}
 8001438:	bf00      	nop
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001440:	b480      	push	{r7}
 8001442:	b089      	sub	sp, #36	@ 0x24
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001452:	2300      	movs	r3, #0
 8001454:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001456:	2300      	movs	r3, #0
 8001458:	61fb      	str	r3, [r7, #28]
 800145a:	e159      	b.n	8001710 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800145c:	2201      	movs	r2, #1
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	697a      	ldr	r2, [r7, #20]
 800146c:	4013      	ands	r3, r2
 800146e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	429a      	cmp	r2, r3
 8001476:	f040 8148 	bne.w	800170a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f003 0303 	and.w	r3, r3, #3
 8001482:	2b01      	cmp	r3, #1
 8001484:	d005      	beq.n	8001492 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800148e:	2b02      	cmp	r3, #2
 8001490:	d130      	bne.n	80014f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	2203      	movs	r2, #3
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43db      	mvns	r3, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4013      	ands	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	68da      	ldr	r2, [r3, #12]
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014c8:	2201      	movs	r2, #1
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	43db      	mvns	r3, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4013      	ands	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	091b      	lsrs	r3, r3, #4
 80014de:	f003 0201 	and.w	r2, r3, #1
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f003 0303 	and.w	r3, r3, #3
 80014fc:	2b03      	cmp	r3, #3
 80014fe:	d017      	beq.n	8001530 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	2203      	movs	r2, #3
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	4013      	ands	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4313      	orrs	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f003 0303 	and.w	r3, r3, #3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d123      	bne.n	8001584 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	08da      	lsrs	r2, r3, #3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3208      	adds	r2, #8
 8001544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001548:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	f003 0307 	and.w	r3, r3, #7
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	220f      	movs	r2, #15
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	43db      	mvns	r3, r3
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	4013      	ands	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	691a      	ldr	r2, [r3, #16]
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4313      	orrs	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	08da      	lsrs	r2, r3, #3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	3208      	adds	r2, #8
 800157e:	69b9      	ldr	r1, [r7, #24]
 8001580:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	2203      	movs	r2, #3
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4013      	ands	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f003 0203 	and.w	r2, r3, #3
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f000 80a2 	beq.w	800170a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	4b57      	ldr	r3, [pc, #348]	@ (8001728 <HAL_GPIO_Init+0x2e8>)
 80015cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ce:	4a56      	ldr	r2, [pc, #344]	@ (8001728 <HAL_GPIO_Init+0x2e8>)
 80015d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80015d6:	4b54      	ldr	r3, [pc, #336]	@ (8001728 <HAL_GPIO_Init+0x2e8>)
 80015d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015e2:	4a52      	ldr	r2, [pc, #328]	@ (800172c <HAL_GPIO_Init+0x2ec>)
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	089b      	lsrs	r3, r3, #2
 80015e8:	3302      	adds	r3, #2
 80015ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	f003 0303 	and.w	r3, r3, #3
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	220f      	movs	r2, #15
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	43db      	mvns	r3, r3
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	4013      	ands	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a49      	ldr	r2, [pc, #292]	@ (8001730 <HAL_GPIO_Init+0x2f0>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d019      	beq.n	8001642 <HAL_GPIO_Init+0x202>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a48      	ldr	r2, [pc, #288]	@ (8001734 <HAL_GPIO_Init+0x2f4>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d013      	beq.n	800163e <HAL_GPIO_Init+0x1fe>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a47      	ldr	r2, [pc, #284]	@ (8001738 <HAL_GPIO_Init+0x2f8>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d00d      	beq.n	800163a <HAL_GPIO_Init+0x1fa>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a46      	ldr	r2, [pc, #280]	@ (800173c <HAL_GPIO_Init+0x2fc>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d007      	beq.n	8001636 <HAL_GPIO_Init+0x1f6>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a45      	ldr	r2, [pc, #276]	@ (8001740 <HAL_GPIO_Init+0x300>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d101      	bne.n	8001632 <HAL_GPIO_Init+0x1f2>
 800162e:	2304      	movs	r3, #4
 8001630:	e008      	b.n	8001644 <HAL_GPIO_Init+0x204>
 8001632:	2307      	movs	r3, #7
 8001634:	e006      	b.n	8001644 <HAL_GPIO_Init+0x204>
 8001636:	2303      	movs	r3, #3
 8001638:	e004      	b.n	8001644 <HAL_GPIO_Init+0x204>
 800163a:	2302      	movs	r3, #2
 800163c:	e002      	b.n	8001644 <HAL_GPIO_Init+0x204>
 800163e:	2301      	movs	r3, #1
 8001640:	e000      	b.n	8001644 <HAL_GPIO_Init+0x204>
 8001642:	2300      	movs	r3, #0
 8001644:	69fa      	ldr	r2, [r7, #28]
 8001646:	f002 0203 	and.w	r2, r2, #3
 800164a:	0092      	lsls	r2, r2, #2
 800164c:	4093      	lsls	r3, r2
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4313      	orrs	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001654:	4935      	ldr	r1, [pc, #212]	@ (800172c <HAL_GPIO_Init+0x2ec>)
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	089b      	lsrs	r3, r3, #2
 800165a:	3302      	adds	r3, #2
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001662:	4b38      	ldr	r3, [pc, #224]	@ (8001744 <HAL_GPIO_Init+0x304>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	43db      	mvns	r3, r3
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	4013      	ands	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d003      	beq.n	8001686 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	4313      	orrs	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001686:	4a2f      	ldr	r2, [pc, #188]	@ (8001744 <HAL_GPIO_Init+0x304>)
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800168c:	4b2d      	ldr	r3, [pc, #180]	@ (8001744 <HAL_GPIO_Init+0x304>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	43db      	mvns	r3, r3
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	4013      	ands	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d003      	beq.n	80016b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016b0:	4a24      	ldr	r2, [pc, #144]	@ (8001744 <HAL_GPIO_Init+0x304>)
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016b6:	4b23      	ldr	r3, [pc, #140]	@ (8001744 <HAL_GPIO_Init+0x304>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	43db      	mvns	r3, r3
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4013      	ands	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d003      	beq.n	80016da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016da:	4a1a      	ldr	r2, [pc, #104]	@ (8001744 <HAL_GPIO_Init+0x304>)
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016e0:	4b18      	ldr	r3, [pc, #96]	@ (8001744 <HAL_GPIO_Init+0x304>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	43db      	mvns	r3, r3
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	4013      	ands	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d003      	beq.n	8001704 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	4313      	orrs	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001704:	4a0f      	ldr	r2, [pc, #60]	@ (8001744 <HAL_GPIO_Init+0x304>)
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	3301      	adds	r3, #1
 800170e:	61fb      	str	r3, [r7, #28]
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	2b0f      	cmp	r3, #15
 8001714:	f67f aea2 	bls.w	800145c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001718:	bf00      	nop
 800171a:	bf00      	nop
 800171c:	3724      	adds	r7, #36	@ 0x24
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	40023800 	.word	0x40023800
 800172c:	40013800 	.word	0x40013800
 8001730:	40020000 	.word	0x40020000
 8001734:	40020400 	.word	0x40020400
 8001738:	40020800 	.word	0x40020800
 800173c:	40020c00 	.word	0x40020c00
 8001740:	40021000 	.word	0x40021000
 8001744:	40013c00 	.word	0x40013c00

08001748 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	460b      	mov	r3, r1
 8001752:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	691a      	ldr	r2, [r3, #16]
 8001758:	887b      	ldrh	r3, [r7, #2]
 800175a:	4013      	ands	r3, r2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d002      	beq.n	8001766 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001760:	2301      	movs	r3, #1
 8001762:	73fb      	strb	r3, [r7, #15]
 8001764:	e001      	b.n	800176a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001766:	2300      	movs	r3, #0
 8001768:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800176a:	7bfb      	ldrb	r3, [r7, #15]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	460b      	mov	r3, r1
 8001782:	807b      	strh	r3, [r7, #2]
 8001784:	4613      	mov	r3, r2
 8001786:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001788:	787b      	ldrb	r3, [r7, #1]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800178e:	887a      	ldrh	r2, [r7, #2]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001794:	e003      	b.n	800179e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001796:	887b      	ldrh	r3, [r7, #2]
 8001798:	041a      	lsls	r2, r3, #16
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	619a      	str	r2, [r3, #24]
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017aa:	b480      	push	{r7}
 80017ac:	b085      	sub	sp, #20
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
 80017b2:	460b      	mov	r3, r1
 80017b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017bc:	887a      	ldrh	r2, [r7, #2]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	4013      	ands	r3, r2
 80017c2:	041a      	lsls	r2, r3, #16
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	43d9      	mvns	r1, r3
 80017c8:	887b      	ldrh	r3, [r7, #2]
 80017ca:	400b      	ands	r3, r1
 80017cc:	431a      	orrs	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	619a      	str	r2, [r3, #24]
}
 80017d2:	bf00      	nop
 80017d4:	3714      	adds	r7, #20
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
	...

080017e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e12b      	b.n	8001a4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d106      	bne.n	800180c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff fa8c 	bl	8000d24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2224      	movs	r2, #36	@ 0x24
 8001810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f022 0201 	bic.w	r2, r2, #1
 8001822:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001832:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001842:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001844:	f003 fb52 	bl	8004eec <HAL_RCC_GetPCLK1Freq>
 8001848:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	4a81      	ldr	r2, [pc, #516]	@ (8001a54 <HAL_I2C_Init+0x274>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d807      	bhi.n	8001864 <HAL_I2C_Init+0x84>
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4a80      	ldr	r2, [pc, #512]	@ (8001a58 <HAL_I2C_Init+0x278>)
 8001858:	4293      	cmp	r3, r2
 800185a:	bf94      	ite	ls
 800185c:	2301      	movls	r3, #1
 800185e:	2300      	movhi	r3, #0
 8001860:	b2db      	uxtb	r3, r3
 8001862:	e006      	b.n	8001872 <HAL_I2C_Init+0x92>
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	4a7d      	ldr	r2, [pc, #500]	@ (8001a5c <HAL_I2C_Init+0x27c>)
 8001868:	4293      	cmp	r3, r2
 800186a:	bf94      	ite	ls
 800186c:	2301      	movls	r3, #1
 800186e:	2300      	movhi	r3, #0
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e0e7      	b.n	8001a4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	4a78      	ldr	r2, [pc, #480]	@ (8001a60 <HAL_I2C_Init+0x280>)
 800187e:	fba2 2303 	umull	r2, r3, r2, r3
 8001882:	0c9b      	lsrs	r3, r3, #18
 8001884:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	68ba      	ldr	r2, [r7, #8]
 8001896:	430a      	orrs	r2, r1
 8001898:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	4a6a      	ldr	r2, [pc, #424]	@ (8001a54 <HAL_I2C_Init+0x274>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d802      	bhi.n	80018b4 <HAL_I2C_Init+0xd4>
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	3301      	adds	r3, #1
 80018b2:	e009      	b.n	80018c8 <HAL_I2C_Init+0xe8>
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80018ba:	fb02 f303 	mul.w	r3, r2, r3
 80018be:	4a69      	ldr	r2, [pc, #420]	@ (8001a64 <HAL_I2C_Init+0x284>)
 80018c0:	fba2 2303 	umull	r2, r3, r2, r3
 80018c4:	099b      	lsrs	r3, r3, #6
 80018c6:	3301      	adds	r3, #1
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	6812      	ldr	r2, [r2, #0]
 80018cc:	430b      	orrs	r3, r1
 80018ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80018da:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	495c      	ldr	r1, [pc, #368]	@ (8001a54 <HAL_I2C_Init+0x274>)
 80018e4:	428b      	cmp	r3, r1
 80018e6:	d819      	bhi.n	800191c <HAL_I2C_Init+0x13c>
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	1e59      	subs	r1, r3, #1
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80018f6:	1c59      	adds	r1, r3, #1
 80018f8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80018fc:	400b      	ands	r3, r1
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d00a      	beq.n	8001918 <HAL_I2C_Init+0x138>
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	1e59      	subs	r1, r3, #1
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001910:	3301      	adds	r3, #1
 8001912:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001916:	e051      	b.n	80019bc <HAL_I2C_Init+0x1dc>
 8001918:	2304      	movs	r3, #4
 800191a:	e04f      	b.n	80019bc <HAL_I2C_Init+0x1dc>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d111      	bne.n	8001948 <HAL_I2C_Init+0x168>
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	1e58      	subs	r0, r3, #1
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6859      	ldr	r1, [r3, #4]
 800192c:	460b      	mov	r3, r1
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	440b      	add	r3, r1
 8001932:	fbb0 f3f3 	udiv	r3, r0, r3
 8001936:	3301      	adds	r3, #1
 8001938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800193c:	2b00      	cmp	r3, #0
 800193e:	bf0c      	ite	eq
 8001940:	2301      	moveq	r3, #1
 8001942:	2300      	movne	r3, #0
 8001944:	b2db      	uxtb	r3, r3
 8001946:	e012      	b.n	800196e <HAL_I2C_Init+0x18e>
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	1e58      	subs	r0, r3, #1
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6859      	ldr	r1, [r3, #4]
 8001950:	460b      	mov	r3, r1
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	440b      	add	r3, r1
 8001956:	0099      	lsls	r1, r3, #2
 8001958:	440b      	add	r3, r1
 800195a:	fbb0 f3f3 	udiv	r3, r0, r3
 800195e:	3301      	adds	r3, #1
 8001960:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001964:	2b00      	cmp	r3, #0
 8001966:	bf0c      	ite	eq
 8001968:	2301      	moveq	r3, #1
 800196a:	2300      	movne	r3, #0
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <HAL_I2C_Init+0x196>
 8001972:	2301      	movs	r3, #1
 8001974:	e022      	b.n	80019bc <HAL_I2C_Init+0x1dc>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d10e      	bne.n	800199c <HAL_I2C_Init+0x1bc>
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	1e58      	subs	r0, r3, #1
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6859      	ldr	r1, [r3, #4]
 8001986:	460b      	mov	r3, r1
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	440b      	add	r3, r1
 800198c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001990:	3301      	adds	r3, #1
 8001992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001996:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800199a:	e00f      	b.n	80019bc <HAL_I2C_Init+0x1dc>
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	1e58      	subs	r0, r3, #1
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6859      	ldr	r1, [r3, #4]
 80019a4:	460b      	mov	r3, r1
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	440b      	add	r3, r1
 80019aa:	0099      	lsls	r1, r3, #2
 80019ac:	440b      	add	r3, r1
 80019ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80019b2:	3301      	adds	r3, #1
 80019b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80019bc:	6879      	ldr	r1, [r7, #4]
 80019be:	6809      	ldr	r1, [r1, #0]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	69da      	ldr	r2, [r3, #28]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a1b      	ldr	r3, [r3, #32]
 80019d6:	431a      	orrs	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	430a      	orrs	r2, r1
 80019de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80019ea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	6911      	ldr	r1, [r2, #16]
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	68d2      	ldr	r2, [r2, #12]
 80019f6:	4311      	orrs	r1, r2
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	6812      	ldr	r2, [r2, #0]
 80019fc:	430b      	orrs	r3, r1
 80019fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	695a      	ldr	r2, [r3, #20]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	431a      	orrs	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f042 0201 	orr.w	r2, r2, #1
 8001a2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2220      	movs	r2, #32
 8001a36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	000186a0 	.word	0x000186a0
 8001a58:	001e847f 	.word	0x001e847f
 8001a5c:	003d08ff 	.word	0x003d08ff
 8001a60:	431bde83 	.word	0x431bde83
 8001a64:	10624dd3 	.word	0x10624dd3

08001a68 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b088      	sub	sp, #32
 8001a6c:	af02      	add	r7, sp, #8
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	4608      	mov	r0, r1
 8001a72:	4611      	mov	r1, r2
 8001a74:	461a      	mov	r2, r3
 8001a76:	4603      	mov	r3, r0
 8001a78:	817b      	strh	r3, [r7, #10]
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	813b      	strh	r3, [r7, #8]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a82:	f7ff fbcb 	bl	800121c <HAL_GetTick>
 8001a86:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	2b20      	cmp	r3, #32
 8001a92:	f040 80d9 	bne.w	8001c48 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	9300      	str	r3, [sp, #0]
 8001a9a:	2319      	movs	r3, #25
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	496d      	ldr	r1, [pc, #436]	@ (8001c54 <HAL_I2C_Mem_Write+0x1ec>)
 8001aa0:	68f8      	ldr	r0, [r7, #12]
 8001aa2:	f000 fc8b 	bl	80023bc <I2C_WaitOnFlagUntilTimeout>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001aac:	2302      	movs	r3, #2
 8001aae:	e0cc      	b.n	8001c4a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d101      	bne.n	8001abe <HAL_I2C_Mem_Write+0x56>
 8001aba:	2302      	movs	r3, #2
 8001abc:	e0c5      	b.n	8001c4a <HAL_I2C_Mem_Write+0x1e2>
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d007      	beq.n	8001ae4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f042 0201 	orr.w	r2, r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001af2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2221      	movs	r2, #33	@ 0x21
 8001af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2240      	movs	r2, #64	@ 0x40
 8001b00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2200      	movs	r2, #0
 8001b08:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6a3a      	ldr	r2, [r7, #32]
 8001b0e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001b14:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	4a4d      	ldr	r2, [pc, #308]	@ (8001c58 <HAL_I2C_Mem_Write+0x1f0>)
 8001b24:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b26:	88f8      	ldrh	r0, [r7, #6]
 8001b28:	893a      	ldrh	r2, [r7, #8]
 8001b2a:	8979      	ldrh	r1, [r7, #10]
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	9301      	str	r3, [sp, #4]
 8001b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	4603      	mov	r3, r0
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	f000 fac2 	bl	80020c0 <I2C_RequestMemoryWrite>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d052      	beq.n	8001be8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e081      	b.n	8001c4a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b46:	697a      	ldr	r2, [r7, #20]
 8001b48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f000 fd50 	bl	80025f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d00d      	beq.n	8001b72 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5a:	2b04      	cmp	r3, #4
 8001b5c:	d107      	bne.n	8001b6e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b6c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e06b      	b.n	8001c4a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b76:	781a      	ldrb	r2, [r3, #0]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b82:	1c5a      	adds	r2, r3, #1
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	695b      	ldr	r3, [r3, #20]
 8001ba8:	f003 0304 	and.w	r3, r3, #4
 8001bac:	2b04      	cmp	r3, #4
 8001bae:	d11b      	bne.n	8001be8 <HAL_I2C_Mem_Write+0x180>
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d017      	beq.n	8001be8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bbc:	781a      	ldrb	r2, [r3, #0]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc8:	1c5a      	adds	r2, r3, #1
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	3b01      	subs	r3, #1
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1aa      	bne.n	8001b46 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001bf4:	68f8      	ldr	r0, [r7, #12]
 8001bf6:	f000 fd43 	bl	8002680 <I2C_WaitOnBTFFlagUntilTimeout>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d00d      	beq.n	8001c1c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	d107      	bne.n	8001c18 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c16:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e016      	b.n	8001c4a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2220      	movs	r2, #32
 8001c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001c44:	2300      	movs	r3, #0
 8001c46:	e000      	b.n	8001c4a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001c48:	2302      	movs	r3, #2
  }
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	00100002 	.word	0x00100002
 8001c58:	ffff0000 	.word	0xffff0000

08001c5c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08c      	sub	sp, #48	@ 0x30
 8001c60:	af02      	add	r7, sp, #8
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	4608      	mov	r0, r1
 8001c66:	4611      	mov	r1, r2
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	817b      	strh	r3, [r7, #10]
 8001c6e:	460b      	mov	r3, r1
 8001c70:	813b      	strh	r3, [r7, #8]
 8001c72:	4613      	mov	r3, r2
 8001c74:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c76:	f7ff fad1 	bl	800121c <HAL_GetTick>
 8001c7a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	2b20      	cmp	r3, #32
 8001c86:	f040 8214 	bne.w	80020b2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	2319      	movs	r3, #25
 8001c90:	2201      	movs	r2, #1
 8001c92:	497b      	ldr	r1, [pc, #492]	@ (8001e80 <HAL_I2C_Mem_Read+0x224>)
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f000 fb91 	bl	80023bc <I2C_WaitOnFlagUntilTimeout>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	e207      	b.n	80020b4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d101      	bne.n	8001cb2 <HAL_I2C_Mem_Read+0x56>
 8001cae:	2302      	movs	r3, #2
 8001cb0:	e200      	b.n	80020b4 <HAL_I2C_Mem_Read+0x458>
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d007      	beq.n	8001cd8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f042 0201 	orr.w	r2, r2, #1
 8001cd6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ce6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2222      	movs	r2, #34	@ 0x22
 8001cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2240      	movs	r2, #64	@ 0x40
 8001cf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001d02:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001d08:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	4a5b      	ldr	r2, [pc, #364]	@ (8001e84 <HAL_I2C_Mem_Read+0x228>)
 8001d18:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d1a:	88f8      	ldrh	r0, [r7, #6]
 8001d1c:	893a      	ldrh	r2, [r7, #8]
 8001d1e:	8979      	ldrh	r1, [r7, #10]
 8001d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d22:	9301      	str	r3, [sp, #4]
 8001d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	4603      	mov	r3, r0
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f000 fa5e 	bl	80021ec <I2C_RequestMemoryRead>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e1bc      	b.n	80020b4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d113      	bne.n	8001d6a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d42:	2300      	movs	r3, #0
 8001d44:	623b      	str	r3, [r7, #32]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	695b      	ldr	r3, [r3, #20]
 8001d4c:	623b      	str	r3, [r7, #32]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	623b      	str	r3, [r7, #32]
 8001d56:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	e190      	b.n	800208c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d11b      	bne.n	8001daa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d82:	2300      	movs	r3, #0
 8001d84:	61fb      	str	r3, [r7, #28]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	695b      	ldr	r3, [r3, #20]
 8001d8c:	61fb      	str	r3, [r7, #28]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	61fb      	str	r3, [r7, #28]
 8001d96:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	e170      	b.n	800208c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d11b      	bne.n	8001dea <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001dc0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001dd0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61bb      	str	r3, [r7, #24]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	695b      	ldr	r3, [r3, #20]
 8001ddc:	61bb      	str	r3, [r7, #24]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	61bb      	str	r3, [r7, #24]
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	e150      	b.n	800208c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	695b      	ldr	r3, [r3, #20]
 8001df4:	617b      	str	r3, [r7, #20]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	617b      	str	r3, [r7, #20]
 8001dfe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001e00:	e144      	b.n	800208c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e06:	2b03      	cmp	r3, #3
 8001e08:	f200 80f1 	bhi.w	8001fee <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d123      	bne.n	8001e5c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e16:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	f000 fc79 	bl	8002710 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e145      	b.n	80020b4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	691a      	ldr	r2, [r3, #16]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e32:	b2d2      	uxtb	r2, r2
 8001e34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e3a:	1c5a      	adds	r2, r3, #1
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e44:	3b01      	subs	r3, #1
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	3b01      	subs	r3, #1
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001e5a:	e117      	b.n	800208c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d14e      	bne.n	8001f02 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	4906      	ldr	r1, [pc, #24]	@ (8001e88 <HAL_I2C_Mem_Read+0x22c>)
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f000 faa4 	bl	80023bc <I2C_WaitOnFlagUntilTimeout>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d008      	beq.n	8001e8c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e11a      	b.n	80020b4 <HAL_I2C_Mem_Read+0x458>
 8001e7e:	bf00      	nop
 8001e80:	00100002 	.word	0x00100002
 8001e84:	ffff0000 	.word	0xffff0000
 8001e88:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	691a      	ldr	r2, [r3, #16]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eae:	1c5a      	adds	r2, r3, #1
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	691a      	ldr	r2, [r3, #16]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee0:	1c5a      	adds	r2, r3, #1
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eea:	3b01      	subs	r3, #1
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001f00:	e0c4      	b.n	800208c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f08:	2200      	movs	r2, #0
 8001f0a:	496c      	ldr	r1, [pc, #432]	@ (80020bc <HAL_I2C_Mem_Read+0x460>)
 8001f0c:	68f8      	ldr	r0, [r7, #12]
 8001f0e:	f000 fa55 	bl	80023bc <I2C_WaitOnFlagUntilTimeout>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e0cb      	b.n	80020b4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	691a      	ldr	r2, [r3, #16]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f3e:	1c5a      	adds	r2, r3, #1
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	3b01      	subs	r3, #1
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f64:	2200      	movs	r2, #0
 8001f66:	4955      	ldr	r1, [pc, #340]	@ (80020bc <HAL_I2C_Mem_Read+0x460>)
 8001f68:	68f8      	ldr	r0, [r7, #12]
 8001f6a:	f000 fa27 	bl	80023bc <I2C_WaitOnFlagUntilTimeout>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e09d      	b.n	80020b4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	691a      	ldr	r2, [r3, #16]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f92:	b2d2      	uxtb	r2, r2
 8001f94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f9a:	1c5a      	adds	r2, r3, #1
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	691a      	ldr	r2, [r3, #16]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc4:	b2d2      	uxtb	r2, r2
 8001fc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fcc:	1c5a      	adds	r2, r3, #1
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001fec:	e04e      	b.n	800208c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ff0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f000 fb8c 	bl	8002710 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e058      	b.n	80020b4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	691a      	ldr	r2, [r3, #16]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002014:	1c5a      	adds	r2, r3, #1
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800201e:	3b01      	subs	r3, #1
 8002020:	b29a      	uxth	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800202a:	b29b      	uxth	r3, r3
 800202c:	3b01      	subs	r3, #1
 800202e:	b29a      	uxth	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	f003 0304 	and.w	r3, r3, #4
 800203e:	2b04      	cmp	r3, #4
 8002040:	d124      	bne.n	800208c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002046:	2b03      	cmp	r3, #3
 8002048:	d107      	bne.n	800205a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002058:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	691a      	ldr	r2, [r3, #16]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002064:	b2d2      	uxtb	r2, r2
 8002066:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800206c:	1c5a      	adds	r2, r3, #1
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002076:	3b01      	subs	r3, #1
 8002078:	b29a      	uxth	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002082:	b29b      	uxth	r3, r3
 8002084:	3b01      	subs	r3, #1
 8002086:	b29a      	uxth	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002090:	2b00      	cmp	r3, #0
 8002092:	f47f aeb6 	bne.w	8001e02 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2220      	movs	r2, #32
 800209a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80020ae:	2300      	movs	r3, #0
 80020b0:	e000      	b.n	80020b4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80020b2:	2302      	movs	r3, #2
  }
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3728      	adds	r7, #40	@ 0x28
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	00010004 	.word	0x00010004

080020c0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b088      	sub	sp, #32
 80020c4:	af02      	add	r7, sp, #8
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	4608      	mov	r0, r1
 80020ca:	4611      	mov	r1, r2
 80020cc:	461a      	mov	r2, r3
 80020ce:	4603      	mov	r3, r0
 80020d0:	817b      	strh	r3, [r7, #10]
 80020d2:	460b      	mov	r3, r1
 80020d4:	813b      	strh	r3, [r7, #8]
 80020d6:	4613      	mov	r3, r2
 80020d8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ec:	9300      	str	r3, [sp, #0]
 80020ee:	6a3b      	ldr	r3, [r7, #32]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80020f6:	68f8      	ldr	r0, [r7, #12]
 80020f8:	f000 f960 	bl	80023bc <I2C_WaitOnFlagUntilTimeout>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00d      	beq.n	800211e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800210c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002110:	d103      	bne.n	800211a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002118:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e05f      	b.n	80021de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800211e:	897b      	ldrh	r3, [r7, #10]
 8002120:	b2db      	uxtb	r3, r3
 8002122:	461a      	mov	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800212c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800212e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002130:	6a3a      	ldr	r2, [r7, #32]
 8002132:	492d      	ldr	r1, [pc, #180]	@ (80021e8 <I2C_RequestMemoryWrite+0x128>)
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f000 f9bb 	bl	80024b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e04c      	b.n	80021de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	617b      	str	r3, [r7, #20]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	617b      	str	r3, [r7, #20]
 8002158:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800215a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800215c:	6a39      	ldr	r1, [r7, #32]
 800215e:	68f8      	ldr	r0, [r7, #12]
 8002160:	f000 fa46 	bl	80025f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00d      	beq.n	8002186 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216e:	2b04      	cmp	r3, #4
 8002170:	d107      	bne.n	8002182 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002180:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e02b      	b.n	80021de <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002186:	88fb      	ldrh	r3, [r7, #6]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d105      	bne.n	8002198 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800218c:	893b      	ldrh	r3, [r7, #8]
 800218e:	b2da      	uxtb	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	611a      	str	r2, [r3, #16]
 8002196:	e021      	b.n	80021dc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002198:	893b      	ldrh	r3, [r7, #8]
 800219a:	0a1b      	lsrs	r3, r3, #8
 800219c:	b29b      	uxth	r3, r3
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021a8:	6a39      	ldr	r1, [r7, #32]
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f000 fa20 	bl	80025f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00d      	beq.n	80021d2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ba:	2b04      	cmp	r3, #4
 80021bc:	d107      	bne.n	80021ce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e005      	b.n	80021de <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80021d2:	893b      	ldrh	r3, [r7, #8]
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3718      	adds	r7, #24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	00010002 	.word	0x00010002

080021ec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b088      	sub	sp, #32
 80021f0:	af02      	add	r7, sp, #8
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	4608      	mov	r0, r1
 80021f6:	4611      	mov	r1, r2
 80021f8:	461a      	mov	r2, r3
 80021fa:	4603      	mov	r3, r0
 80021fc:	817b      	strh	r3, [r7, #10]
 80021fe:	460b      	mov	r3, r1
 8002200:	813b      	strh	r3, [r7, #8]
 8002202:	4613      	mov	r3, r2
 8002204:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002214:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002224:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002228:	9300      	str	r3, [sp, #0]
 800222a:	6a3b      	ldr	r3, [r7, #32]
 800222c:	2200      	movs	r2, #0
 800222e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f000 f8c2 	bl	80023bc <I2C_WaitOnFlagUntilTimeout>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00d      	beq.n	800225a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002248:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800224c:	d103      	bne.n	8002256 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002254:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e0aa      	b.n	80023b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800225a:	897b      	ldrh	r3, [r7, #10]
 800225c:	b2db      	uxtb	r3, r3
 800225e:	461a      	mov	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002268:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800226a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800226c:	6a3a      	ldr	r2, [r7, #32]
 800226e:	4952      	ldr	r1, [pc, #328]	@ (80023b8 <I2C_RequestMemoryRead+0x1cc>)
 8002270:	68f8      	ldr	r0, [r7, #12]
 8002272:	f000 f91d 	bl	80024b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e097      	b.n	80023b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002280:	2300      	movs	r3, #0
 8002282:	617b      	str	r3, [r7, #20]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	617b      	str	r3, [r7, #20]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	617b      	str	r3, [r7, #20]
 8002294:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002296:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002298:	6a39      	ldr	r1, [r7, #32]
 800229a:	68f8      	ldr	r0, [r7, #12]
 800229c:	f000 f9a8 	bl	80025f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00d      	beq.n	80022c2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022aa:	2b04      	cmp	r3, #4
 80022ac:	d107      	bne.n	80022be <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e076      	b.n	80023b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80022c2:	88fb      	ldrh	r3, [r7, #6]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d105      	bne.n	80022d4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80022c8:	893b      	ldrh	r3, [r7, #8]
 80022ca:	b2da      	uxtb	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	611a      	str	r2, [r3, #16]
 80022d2:	e021      	b.n	8002318 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80022d4:	893b      	ldrh	r3, [r7, #8]
 80022d6:	0a1b      	lsrs	r3, r3, #8
 80022d8:	b29b      	uxth	r3, r3
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022e4:	6a39      	ldr	r1, [r7, #32]
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f000 f982 	bl	80025f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00d      	beq.n	800230e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	d107      	bne.n	800230a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002308:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e050      	b.n	80023b0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800230e:	893b      	ldrh	r3, [r7, #8]
 8002310:	b2da      	uxtb	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002318:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800231a:	6a39      	ldr	r1, [r7, #32]
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	f000 f967 	bl	80025f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00d      	beq.n	8002344 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232c:	2b04      	cmp	r3, #4
 800232e:	d107      	bne.n	8002340 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800233e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e035      	b.n	80023b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002352:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	6a3b      	ldr	r3, [r7, #32]
 800235a:	2200      	movs	r2, #0
 800235c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f000 f82b 	bl	80023bc <I2C_WaitOnFlagUntilTimeout>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00d      	beq.n	8002388 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002376:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800237a:	d103      	bne.n	8002384 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002382:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e013      	b.n	80023b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002388:	897b      	ldrh	r3, [r7, #10]
 800238a:	b2db      	uxtb	r3, r3
 800238c:	f043 0301 	orr.w	r3, r3, #1
 8002390:	b2da      	uxtb	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800239a:	6a3a      	ldr	r2, [r7, #32]
 800239c:	4906      	ldr	r1, [pc, #24]	@ (80023b8 <I2C_RequestMemoryRead+0x1cc>)
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f000 f886 	bl	80024b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e000      	b.n	80023b0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3718      	adds	r7, #24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	00010002 	.word	0x00010002

080023bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	603b      	str	r3, [r7, #0]
 80023c8:	4613      	mov	r3, r2
 80023ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023cc:	e048      	b.n	8002460 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d4:	d044      	beq.n	8002460 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023d6:	f7fe ff21 	bl	800121c <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d302      	bcc.n	80023ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d139      	bne.n	8002460 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	0c1b      	lsrs	r3, r3, #16
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d10d      	bne.n	8002412 <I2C_WaitOnFlagUntilTimeout+0x56>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	695b      	ldr	r3, [r3, #20]
 80023fc:	43da      	mvns	r2, r3
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	4013      	ands	r3, r2
 8002402:	b29b      	uxth	r3, r3
 8002404:	2b00      	cmp	r3, #0
 8002406:	bf0c      	ite	eq
 8002408:	2301      	moveq	r3, #1
 800240a:	2300      	movne	r3, #0
 800240c:	b2db      	uxtb	r3, r3
 800240e:	461a      	mov	r2, r3
 8002410:	e00c      	b.n	800242c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	43da      	mvns	r2, r3
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	4013      	ands	r3, r2
 800241e:	b29b      	uxth	r3, r3
 8002420:	2b00      	cmp	r3, #0
 8002422:	bf0c      	ite	eq
 8002424:	2301      	moveq	r3, #1
 8002426:	2300      	movne	r3, #0
 8002428:	b2db      	uxtb	r3, r3
 800242a:	461a      	mov	r2, r3
 800242c:	79fb      	ldrb	r3, [r7, #7]
 800242e:	429a      	cmp	r2, r3
 8002430:	d116      	bne.n	8002460 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2220      	movs	r2, #32
 800243c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244c:	f043 0220 	orr.w	r2, r3, #32
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e023      	b.n	80024a8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	0c1b      	lsrs	r3, r3, #16
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b01      	cmp	r3, #1
 8002468:	d10d      	bne.n	8002486 <I2C_WaitOnFlagUntilTimeout+0xca>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	695b      	ldr	r3, [r3, #20]
 8002470:	43da      	mvns	r2, r3
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	4013      	ands	r3, r2
 8002476:	b29b      	uxth	r3, r3
 8002478:	2b00      	cmp	r3, #0
 800247a:	bf0c      	ite	eq
 800247c:	2301      	moveq	r3, #1
 800247e:	2300      	movne	r3, #0
 8002480:	b2db      	uxtb	r3, r3
 8002482:	461a      	mov	r2, r3
 8002484:	e00c      	b.n	80024a0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	43da      	mvns	r2, r3
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	4013      	ands	r3, r2
 8002492:	b29b      	uxth	r3, r3
 8002494:	2b00      	cmp	r3, #0
 8002496:	bf0c      	ite	eq
 8002498:	2301      	moveq	r3, #1
 800249a:	2300      	movne	r3, #0
 800249c:	b2db      	uxtb	r3, r3
 800249e:	461a      	mov	r2, r3
 80024a0:	79fb      	ldrb	r3, [r7, #7]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d093      	beq.n	80023ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
 80024bc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024be:	e071      	b.n	80025a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	695b      	ldr	r3, [r3, #20]
 80024c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024ce:	d123      	bne.n	8002518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024de:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80024e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2220      	movs	r2, #32
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002504:	f043 0204 	orr.w	r2, r3, #4
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e067      	b.n	80025e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800251e:	d041      	beq.n	80025a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002520:	f7fe fe7c 	bl	800121c <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	429a      	cmp	r2, r3
 800252e:	d302      	bcc.n	8002536 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d136      	bne.n	80025a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	0c1b      	lsrs	r3, r3, #16
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2b01      	cmp	r3, #1
 800253e:	d10c      	bne.n	800255a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	43da      	mvns	r2, r3
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	4013      	ands	r3, r2
 800254c:	b29b      	uxth	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	bf14      	ite	ne
 8002552:	2301      	movne	r3, #1
 8002554:	2300      	moveq	r3, #0
 8002556:	b2db      	uxtb	r3, r3
 8002558:	e00b      	b.n	8002572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	43da      	mvns	r2, r3
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	4013      	ands	r3, r2
 8002566:	b29b      	uxth	r3, r3
 8002568:	2b00      	cmp	r3, #0
 800256a:	bf14      	ite	ne
 800256c:	2301      	movne	r3, #1
 800256e:	2300      	moveq	r3, #0
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d016      	beq.n	80025a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2220      	movs	r2, #32
 8002580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002590:	f043 0220 	orr.w	r2, r3, #32
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e021      	b.n	80025e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	0c1b      	lsrs	r3, r3, #16
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d10c      	bne.n	80025c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	695b      	ldr	r3, [r3, #20]
 80025b4:	43da      	mvns	r2, r3
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	4013      	ands	r3, r2
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	2b00      	cmp	r3, #0
 80025be:	bf14      	ite	ne
 80025c0:	2301      	movne	r3, #1
 80025c2:	2300      	moveq	r3, #0
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	e00b      	b.n	80025e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	43da      	mvns	r2, r3
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	4013      	ands	r3, r2
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	bf14      	ite	ne
 80025da:	2301      	movne	r3, #1
 80025dc:	2300      	moveq	r3, #0
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f47f af6d 	bne.w	80024c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3710      	adds	r7, #16
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025fc:	e034      	b.n	8002668 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025fe:	68f8      	ldr	r0, [r7, #12]
 8002600:	f000 f8e3 	bl	80027ca <I2C_IsAcknowledgeFailed>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e034      	b.n	8002678 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002614:	d028      	beq.n	8002668 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002616:	f7fe fe01 	bl	800121c <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	68ba      	ldr	r2, [r7, #8]
 8002622:	429a      	cmp	r2, r3
 8002624:	d302      	bcc.n	800262c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d11d      	bne.n	8002668 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002636:	2b80      	cmp	r3, #128	@ 0x80
 8002638:	d016      	beq.n	8002668 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2220      	movs	r2, #32
 8002644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002654:	f043 0220 	orr.w	r2, r3, #32
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e007      	b.n	8002678 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002672:	2b80      	cmp	r3, #128	@ 0x80
 8002674:	d1c3      	bne.n	80025fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800268c:	e034      	b.n	80026f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 f89b 	bl	80027ca <I2C_IsAcknowledgeFailed>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e034      	b.n	8002708 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a4:	d028      	beq.n	80026f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026a6:	f7fe fdb9 	bl	800121c <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	68ba      	ldr	r2, [r7, #8]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d302      	bcc.n	80026bc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d11d      	bne.n	80026f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	f003 0304 	and.w	r3, r3, #4
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	d016      	beq.n	80026f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2220      	movs	r2, #32
 80026d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e4:	f043 0220 	orr.w	r2, r3, #32
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e007      	b.n	8002708 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	f003 0304 	and.w	r3, r3, #4
 8002702:	2b04      	cmp	r3, #4
 8002704:	d1c3      	bne.n	800268e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3710      	adds	r7, #16
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800271c:	e049      	b.n	80027b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	f003 0310 	and.w	r3, r3, #16
 8002728:	2b10      	cmp	r3, #16
 800272a:	d119      	bne.n	8002760 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f06f 0210 	mvn.w	r2, #16
 8002734:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2220      	movs	r2, #32
 8002740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e030      	b.n	80027c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002760:	f7fe fd5c 	bl	800121c <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	68ba      	ldr	r2, [r7, #8]
 800276c:	429a      	cmp	r2, r3
 800276e:	d302      	bcc.n	8002776 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d11d      	bne.n	80027b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002780:	2b40      	cmp	r3, #64	@ 0x40
 8002782:	d016      	beq.n	80027b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2220      	movs	r2, #32
 800278e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279e:	f043 0220 	orr.w	r2, r3, #32
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e007      	b.n	80027c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027bc:	2b40      	cmp	r3, #64	@ 0x40
 80027be:	d1ae      	bne.n	800271e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027e0:	d11b      	bne.n	800281a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80027ea:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2220      	movs	r2, #32
 80027f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002806:	f043 0204 	orr.w	r2, r3, #4
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e000      	b.n	800281c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b088      	sub	sp, #32
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e128      	b.n	8002a8c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d109      	bne.n	800285a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a90      	ldr	r2, [pc, #576]	@ (8002a94 <HAL_I2S_Init+0x26c>)
 8002852:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f7fe faad 	bl	8000db4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2202      	movs	r2, #2
 800285e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	69db      	ldr	r3, [r3, #28]
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	6812      	ldr	r2, [r2, #0]
 800286c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002870:	f023 030f 	bic.w	r3, r3, #15
 8002874:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2202      	movs	r2, #2
 800287c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	2b02      	cmp	r3, #2
 8002884:	d060      	beq.n	8002948 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d102      	bne.n	8002894 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800288e:	2310      	movs	r3, #16
 8002890:	617b      	str	r3, [r7, #20]
 8002892:	e001      	b.n	8002898 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002894:	2320      	movs	r3, #32
 8002896:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	2b20      	cmp	r3, #32
 800289e:	d802      	bhi.n	80028a6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80028a6:	2001      	movs	r0, #1
 80028a8:	f002 fc56 	bl	8005158 <HAL_RCCEx_GetPeriphCLKFreq>
 80028ac:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028b6:	d125      	bne.n	8002904 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d010      	beq.n	80028e2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80028ca:	4613      	mov	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	461a      	mov	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028dc:	3305      	adds	r3, #5
 80028de:	613b      	str	r3, [r7, #16]
 80028e0:	e01f      	b.n	8002922 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80028ec:	4613      	mov	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	461a      	mov	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80028fe:	3305      	adds	r3, #5
 8002900:	613b      	str	r3, [r7, #16]
 8002902:	e00e      	b.n	8002922 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	fbb2 f2f3 	udiv	r2, r2, r3
 800290c:	4613      	mov	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	461a      	mov	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	fbb2 f3f3 	udiv	r3, r2, r3
 800291e:	3305      	adds	r3, #5
 8002920:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	4a5c      	ldr	r2, [pc, #368]	@ (8002a98 <HAL_I2S_Init+0x270>)
 8002926:	fba2 2303 	umull	r2, r3, r2, r3
 800292a:	08db      	lsrs	r3, r3, #3
 800292c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	085b      	lsrs	r3, r3, #1
 800293e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	021b      	lsls	r3, r3, #8
 8002944:	61bb      	str	r3, [r7, #24]
 8002946:	e003      	b.n	8002950 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002948:	2302      	movs	r3, #2
 800294a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800294c:	2300      	movs	r3, #0
 800294e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d902      	bls.n	800295c <HAL_I2S_Init+0x134>
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	2bff      	cmp	r3, #255	@ 0xff
 800295a:	d907      	bls.n	800296c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002960:	f043 0210 	orr.w	r2, r3, #16
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e08f      	b.n	8002a8c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	691a      	ldr	r2, [r3, #16]
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	ea42 0103 	orr.w	r1, r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	69fa      	ldr	r2, [r7, #28]
 800297c:	430a      	orrs	r2, r1
 800297e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800298a:	f023 030f 	bic.w	r3, r3, #15
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	6851      	ldr	r1, [r2, #4]
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6892      	ldr	r2, [r2, #8]
 8002996:	4311      	orrs	r1, r2
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	68d2      	ldr	r2, [r2, #12]
 800299c:	4311      	orrs	r1, r2
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	6992      	ldr	r2, [r2, #24]
 80029a2:	430a      	orrs	r2, r1
 80029a4:	431a      	orrs	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029ae:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a1b      	ldr	r3, [r3, #32]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d161      	bne.n	8002a7c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a38      	ldr	r2, [pc, #224]	@ (8002a9c <HAL_I2S_Init+0x274>)
 80029bc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a37      	ldr	r2, [pc, #220]	@ (8002aa0 <HAL_I2S_Init+0x278>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d101      	bne.n	80029cc <HAL_I2S_Init+0x1a4>
 80029c8:	4b36      	ldr	r3, [pc, #216]	@ (8002aa4 <HAL_I2S_Init+0x27c>)
 80029ca:	e001      	b.n	80029d0 <HAL_I2S_Init+0x1a8>
 80029cc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80029d0:	69db      	ldr	r3, [r3, #28]
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	6812      	ldr	r2, [r2, #0]
 80029d6:	4932      	ldr	r1, [pc, #200]	@ (8002aa0 <HAL_I2S_Init+0x278>)
 80029d8:	428a      	cmp	r2, r1
 80029da:	d101      	bne.n	80029e0 <HAL_I2S_Init+0x1b8>
 80029dc:	4a31      	ldr	r2, [pc, #196]	@ (8002aa4 <HAL_I2S_Init+0x27c>)
 80029de:	e001      	b.n	80029e4 <HAL_I2S_Init+0x1bc>
 80029e0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80029e4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80029e8:	f023 030f 	bic.w	r3, r3, #15
 80029ec:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a2b      	ldr	r2, [pc, #172]	@ (8002aa0 <HAL_I2S_Init+0x278>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d101      	bne.n	80029fc <HAL_I2S_Init+0x1d4>
 80029f8:	4b2a      	ldr	r3, [pc, #168]	@ (8002aa4 <HAL_I2S_Init+0x27c>)
 80029fa:	e001      	b.n	8002a00 <HAL_I2S_Init+0x1d8>
 80029fc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002a00:	2202      	movs	r2, #2
 8002a02:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a25      	ldr	r2, [pc, #148]	@ (8002aa0 <HAL_I2S_Init+0x278>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d101      	bne.n	8002a12 <HAL_I2S_Init+0x1ea>
 8002a0e:	4b25      	ldr	r3, [pc, #148]	@ (8002aa4 <HAL_I2S_Init+0x27c>)
 8002a10:	e001      	b.n	8002a16 <HAL_I2S_Init+0x1ee>
 8002a12:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002a16:	69db      	ldr	r3, [r3, #28]
 8002a18:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a22:	d003      	beq.n	8002a2c <HAL_I2S_Init+0x204>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d103      	bne.n	8002a34 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002a2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a30:	613b      	str	r3, [r7, #16]
 8002a32:	e001      	b.n	8002a38 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002a34:	2300      	movs	r3, #0
 8002a36:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002a42:	4313      	orrs	r3, r2
 8002a44:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002a56:	4313      	orrs	r3, r2
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	897b      	ldrh	r3, [r7, #10]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002a64:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a0d      	ldr	r2, [pc, #52]	@ (8002aa0 <HAL_I2S_Init+0x278>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d101      	bne.n	8002a74 <HAL_I2S_Init+0x24c>
 8002a70:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa4 <HAL_I2S_Init+0x27c>)
 8002a72:	e001      	b.n	8002a78 <HAL_I2S_Init+0x250>
 8002a74:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002a78:	897a      	ldrh	r2, [r7, #10]
 8002a7a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3720      	adds	r7, #32
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	08002b9f 	.word	0x08002b9f
 8002a98:	cccccccd 	.word	0xcccccccd
 8002a9c:	08002cb5 	.word	0x08002cb5
 8002aa0:	40003800 	.word	0x40003800
 8002aa4:	40003400 	.word	0x40003400

08002aa8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af0:	881a      	ldrh	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afc:	1c9a      	adds	r2, r3, #2
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d10e      	bne.n	8002b38 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002b28:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7ff ffb8 	bl	8002aa8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002b38:	bf00      	nop
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68da      	ldr	r2, [r3, #12]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b52:	b292      	uxth	r2, r2
 8002b54:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b5a:	1c9a      	adds	r2, r3, #2
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	3b01      	subs	r3, #1
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d10e      	bne.n	8002b96 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002b86:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f7ff ff93 	bl	8002abc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002b96:	bf00      	nop
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b086      	sub	sp, #24
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	d13a      	bne.n	8002c30 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	f003 0301 	and.w	r3, r3, #1
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d109      	bne.n	8002bd8 <I2S_IRQHandler+0x3a>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bce:	2b40      	cmp	r3, #64	@ 0x40
 8002bd0:	d102      	bne.n	8002bd8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f7ff ffb4 	bl	8002b40 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bde:	2b40      	cmp	r3, #64	@ 0x40
 8002be0:	d126      	bne.n	8002c30 <I2S_IRQHandler+0x92>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f003 0320 	and.w	r3, r3, #32
 8002bec:	2b20      	cmp	r3, #32
 8002bee:	d11f      	bne.n	8002c30 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	685a      	ldr	r2, [r3, #4]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002bfe:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002c00:	2300      	movs	r3, #0
 8002c02:	613b      	str	r3, [r7, #16]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	613b      	str	r3, [r7, #16]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	613b      	str	r3, [r7, #16]
 8002c14:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c22:	f043 0202 	orr.w	r2, r3, #2
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f7ff ff50 	bl	8002ad0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b03      	cmp	r3, #3
 8002c3a:	d136      	bne.n	8002caa <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d109      	bne.n	8002c5a <I2S_IRQHandler+0xbc>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c50:	2b80      	cmp	r3, #128	@ 0x80
 8002c52:	d102      	bne.n	8002c5a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f7ff ff45 	bl	8002ae4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f003 0308 	and.w	r3, r3, #8
 8002c60:	2b08      	cmp	r3, #8
 8002c62:	d122      	bne.n	8002caa <I2S_IRQHandler+0x10c>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f003 0320 	and.w	r3, r3, #32
 8002c6e:	2b20      	cmp	r3, #32
 8002c70:	d11b      	bne.n	8002caa <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002c80:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002c82:	2300      	movs	r3, #0
 8002c84:	60fb      	str	r3, [r7, #12]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	60fb      	str	r3, [r7, #12]
 8002c8e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c9c:	f043 0204 	orr.w	r2, r3, #4
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f7ff ff13 	bl	8002ad0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002caa:	bf00      	nop
 8002cac:	3718      	adds	r7, #24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
	...

08002cb4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b088      	sub	sp, #32
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a92      	ldr	r2, [pc, #584]	@ (8002f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d101      	bne.n	8002cd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002cce:	4b92      	ldr	r3, [pc, #584]	@ (8002f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002cd0:	e001      	b.n	8002cd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002cd2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a8b      	ldr	r2, [pc, #556]	@ (8002f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d101      	bne.n	8002cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002cec:	4b8a      	ldr	r3, [pc, #552]	@ (8002f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002cee:	e001      	b.n	8002cf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002cf0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d00:	d004      	beq.n	8002d0c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f040 8099 	bne.w	8002e3e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d107      	bne.n	8002d26 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d002      	beq.n	8002d26 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 f925 	bl	8002f70 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d107      	bne.n	8002d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d002      	beq.n	8002d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 f9c8 	bl	80030d0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d46:	2b40      	cmp	r3, #64	@ 0x40
 8002d48:	d13a      	bne.n	8002dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	f003 0320 	and.w	r3, r3, #32
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d035      	beq.n	8002dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a6e      	ldr	r2, [pc, #440]	@ (8002f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d101      	bne.n	8002d62 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002d5e:	4b6e      	ldr	r3, [pc, #440]	@ (8002f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d60:	e001      	b.n	8002d66 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002d62:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4969      	ldr	r1, [pc, #420]	@ (8002f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d6e:	428b      	cmp	r3, r1
 8002d70:	d101      	bne.n	8002d76 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002d72:	4b69      	ldr	r3, [pc, #420]	@ (8002f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d74:	e001      	b.n	8002d7a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002d76:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002d7a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002d7e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002d8e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002d90:	2300      	movs	r3, #0
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	60fb      	str	r3, [r7, #12]
 8002da4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db2:	f043 0202 	orr.w	r2, r3, #2
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7ff fe88 	bl	8002ad0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	f003 0308 	and.w	r3, r3, #8
 8002dc6:	2b08      	cmp	r3, #8
 8002dc8:	f040 80c3 	bne.w	8002f52 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	f003 0320 	and.w	r3, r3, #32
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f000 80bd 	beq.w	8002f52 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	685a      	ldr	r2, [r3, #4]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002de6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a49      	ldr	r2, [pc, #292]	@ (8002f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d101      	bne.n	8002df6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002df2:	4b49      	ldr	r3, [pc, #292]	@ (8002f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002df4:	e001      	b.n	8002dfa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002df6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4944      	ldr	r1, [pc, #272]	@ (8002f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e02:	428b      	cmp	r3, r1
 8002e04:	d101      	bne.n	8002e0a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002e06:	4b44      	ldr	r3, [pc, #272]	@ (8002f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e08:	e001      	b.n	8002e0e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002e0a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002e0e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002e12:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002e14:	2300      	movs	r3, #0
 8002e16:	60bb      	str	r3, [r7, #8]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	60bb      	str	r3, [r7, #8]
 8002e20:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e2e:	f043 0204 	orr.w	r2, r3, #4
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f7ff fe4a 	bl	8002ad0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002e3c:	e089      	b.n	8002f52 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d107      	bne.n	8002e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d002      	beq.n	8002e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 f8be 	bl	8002fd4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d107      	bne.n	8002e72 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d002      	beq.n	8002e72 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 f8fd 	bl	800306c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e78:	2b40      	cmp	r3, #64	@ 0x40
 8002e7a:	d12f      	bne.n	8002edc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	f003 0320 	and.w	r3, r3, #32
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d02a      	beq.n	8002edc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002e94:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a1e      	ldr	r2, [pc, #120]	@ (8002f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d101      	bne.n	8002ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8002f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ea2:	e001      	b.n	8002ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002ea4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4919      	ldr	r1, [pc, #100]	@ (8002f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002eb0:	428b      	cmp	r3, r1
 8002eb2:	d101      	bne.n	8002eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002eb4:	4b18      	ldr	r3, [pc, #96]	@ (8002f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002eb6:	e001      	b.n	8002ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002eb8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ebc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002ec0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ece:	f043 0202 	orr.w	r2, r3, #2
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7ff fdfa 	bl	8002ad0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	f003 0308 	and.w	r3, r3, #8
 8002ee2:	2b08      	cmp	r3, #8
 8002ee4:	d136      	bne.n	8002f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	f003 0320 	and.w	r3, r3, #32
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d031      	beq.n	8002f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a07      	ldr	r2, [pc, #28]	@ (8002f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d101      	bne.n	8002efe <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002efa:	4b07      	ldr	r3, [pc, #28]	@ (8002f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002efc:	e001      	b.n	8002f02 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002efe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4902      	ldr	r1, [pc, #8]	@ (8002f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002f0a:	428b      	cmp	r3, r1
 8002f0c:	d106      	bne.n	8002f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002f0e:	4b02      	ldr	r3, [pc, #8]	@ (8002f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002f10:	e006      	b.n	8002f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002f12:	bf00      	nop
 8002f14:	40003800 	.word	0x40003800
 8002f18:	40003400 	.word	0x40003400
 8002f1c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002f20:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002f24:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002f34:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f42:	f043 0204 	orr.w	r2, r3, #4
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f7ff fdc0 	bl	8002ad0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f50:	e000      	b.n	8002f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002f52:	bf00      	nop
}
 8002f54:	bf00      	nop
 8002f56:	3720      	adds	r7, #32
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7c:	1c99      	adds	r1, r3, #2
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	6251      	str	r1, [r2, #36]	@ 0x24
 8002f82:	881a      	ldrh	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	3b01      	subs	r3, #1
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d113      	bne.n	8002fca <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	685a      	ldr	r2, [r3, #4]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002fb0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d106      	bne.n	8002fca <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f7ff ffc9 	bl	8002f5c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002fca:	bf00      	nop
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
	...

08002fd4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe0:	1c99      	adds	r1, r3, #2
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	6251      	str	r1, [r2, #36]	@ 0x24
 8002fe6:	8819      	ldrh	r1, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a1d      	ldr	r2, [pc, #116]	@ (8003064 <I2SEx_TxISR_I2SExt+0x90>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d101      	bne.n	8002ff6 <I2SEx_TxISR_I2SExt+0x22>
 8002ff2:	4b1d      	ldr	r3, [pc, #116]	@ (8003068 <I2SEx_TxISR_I2SExt+0x94>)
 8002ff4:	e001      	b.n	8002ffa <I2SEx_TxISR_I2SExt+0x26>
 8002ff6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ffa:	460a      	mov	r2, r1
 8002ffc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003002:	b29b      	uxth	r3, r3
 8003004:	3b01      	subs	r3, #1
 8003006:	b29a      	uxth	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003010:	b29b      	uxth	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d121      	bne.n	800305a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a12      	ldr	r2, [pc, #72]	@ (8003064 <I2SEx_TxISR_I2SExt+0x90>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d101      	bne.n	8003024 <I2SEx_TxISR_I2SExt+0x50>
 8003020:	4b11      	ldr	r3, [pc, #68]	@ (8003068 <I2SEx_TxISR_I2SExt+0x94>)
 8003022:	e001      	b.n	8003028 <I2SEx_TxISR_I2SExt+0x54>
 8003024:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003028:	685a      	ldr	r2, [r3, #4]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	490d      	ldr	r1, [pc, #52]	@ (8003064 <I2SEx_TxISR_I2SExt+0x90>)
 8003030:	428b      	cmp	r3, r1
 8003032:	d101      	bne.n	8003038 <I2SEx_TxISR_I2SExt+0x64>
 8003034:	4b0c      	ldr	r3, [pc, #48]	@ (8003068 <I2SEx_TxISR_I2SExt+0x94>)
 8003036:	e001      	b.n	800303c <I2SEx_TxISR_I2SExt+0x68>
 8003038:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800303c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003040:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003046:	b29b      	uxth	r3, r3
 8003048:	2b00      	cmp	r3, #0
 800304a:	d106      	bne.n	800305a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f7ff ff81 	bl	8002f5c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800305a:	bf00      	nop
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	40003800 	.word	0x40003800
 8003068:	40003400 	.word	0x40003400

0800306c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68d8      	ldr	r0, [r3, #12]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800307e:	1c99      	adds	r1, r3, #2
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003084:	b282      	uxth	r2, r0
 8003086:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800308c:	b29b      	uxth	r3, r3
 800308e:	3b01      	subs	r3, #1
 8003090:	b29a      	uxth	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800309a:	b29b      	uxth	r3, r3
 800309c:	2b00      	cmp	r3, #0
 800309e:	d113      	bne.n	80030c8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80030ae:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d106      	bne.n	80030c8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7ff ff4a 	bl	8002f5c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80030c8:	bf00      	nop
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a20      	ldr	r2, [pc, #128]	@ (8003160 <I2SEx_RxISR_I2SExt+0x90>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d101      	bne.n	80030e6 <I2SEx_RxISR_I2SExt+0x16>
 80030e2:	4b20      	ldr	r3, [pc, #128]	@ (8003164 <I2SEx_RxISR_I2SExt+0x94>)
 80030e4:	e001      	b.n	80030ea <I2SEx_RxISR_I2SExt+0x1a>
 80030e6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80030ea:	68d8      	ldr	r0, [r3, #12]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f0:	1c99      	adds	r1, r3, #2
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80030f6:	b282      	uxth	r2, r0
 80030f8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80030fe:	b29b      	uxth	r3, r3
 8003100:	3b01      	subs	r3, #1
 8003102:	b29a      	uxth	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800310c:	b29b      	uxth	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d121      	bne.n	8003156 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a12      	ldr	r2, [pc, #72]	@ (8003160 <I2SEx_RxISR_I2SExt+0x90>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d101      	bne.n	8003120 <I2SEx_RxISR_I2SExt+0x50>
 800311c:	4b11      	ldr	r3, [pc, #68]	@ (8003164 <I2SEx_RxISR_I2SExt+0x94>)
 800311e:	e001      	b.n	8003124 <I2SEx_RxISR_I2SExt+0x54>
 8003120:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	490d      	ldr	r1, [pc, #52]	@ (8003160 <I2SEx_RxISR_I2SExt+0x90>)
 800312c:	428b      	cmp	r3, r1
 800312e:	d101      	bne.n	8003134 <I2SEx_RxISR_I2SExt+0x64>
 8003130:	4b0c      	ldr	r3, [pc, #48]	@ (8003164 <I2SEx_RxISR_I2SExt+0x94>)
 8003132:	e001      	b.n	8003138 <I2SEx_RxISR_I2SExt+0x68>
 8003134:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003138:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800313c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003142:	b29b      	uxth	r3, r3
 8003144:	2b00      	cmp	r3, #0
 8003146:	d106      	bne.n	8003156 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f7ff ff03 	bl	8002f5c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003156:	bf00      	nop
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40003800 	.word	0x40003800
 8003164:	40003400 	.word	0x40003400

08003168 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af02      	add	r7, sp, #8
 800316e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e101      	b.n	800337e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	d106      	bne.n	800319a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f008 fe95 	bl	800bec4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2203      	movs	r2, #3
 800319e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031a8:	d102      	bne.n	80031b0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f002 fc44 	bl	8005a42 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6818      	ldr	r0, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	7c1a      	ldrb	r2, [r3, #16]
 80031c2:	f88d 2000 	strb.w	r2, [sp]
 80031c6:	3304      	adds	r3, #4
 80031c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031ca:	f002 fb23 	bl	8005814 <USB_CoreInit>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d005      	beq.n	80031e0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2202      	movs	r2, #2
 80031d8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e0ce      	b.n	800337e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2100      	movs	r1, #0
 80031e6:	4618      	mov	r0, r3
 80031e8:	f002 fc3c 	bl	8005a64 <USB_SetCurrentMode>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d005      	beq.n	80031fe <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2202      	movs	r2, #2
 80031f6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e0bf      	b.n	800337e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031fe:	2300      	movs	r3, #0
 8003200:	73fb      	strb	r3, [r7, #15]
 8003202:	e04a      	b.n	800329a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003204:	7bfa      	ldrb	r2, [r7, #15]
 8003206:	6879      	ldr	r1, [r7, #4]
 8003208:	4613      	mov	r3, r2
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	4413      	add	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	440b      	add	r3, r1
 8003212:	3315      	adds	r3, #21
 8003214:	2201      	movs	r2, #1
 8003216:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003218:	7bfa      	ldrb	r2, [r7, #15]
 800321a:	6879      	ldr	r1, [r7, #4]
 800321c:	4613      	mov	r3, r2
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	4413      	add	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	440b      	add	r3, r1
 8003226:	3314      	adds	r3, #20
 8003228:	7bfa      	ldrb	r2, [r7, #15]
 800322a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800322c:	7bfa      	ldrb	r2, [r7, #15]
 800322e:	7bfb      	ldrb	r3, [r7, #15]
 8003230:	b298      	uxth	r0, r3
 8003232:	6879      	ldr	r1, [r7, #4]
 8003234:	4613      	mov	r3, r2
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	4413      	add	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	440b      	add	r3, r1
 800323e:	332e      	adds	r3, #46	@ 0x2e
 8003240:	4602      	mov	r2, r0
 8003242:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003244:	7bfa      	ldrb	r2, [r7, #15]
 8003246:	6879      	ldr	r1, [r7, #4]
 8003248:	4613      	mov	r3, r2
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	4413      	add	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	440b      	add	r3, r1
 8003252:	3318      	adds	r3, #24
 8003254:	2200      	movs	r2, #0
 8003256:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003258:	7bfa      	ldrb	r2, [r7, #15]
 800325a:	6879      	ldr	r1, [r7, #4]
 800325c:	4613      	mov	r3, r2
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	4413      	add	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	440b      	add	r3, r1
 8003266:	331c      	adds	r3, #28
 8003268:	2200      	movs	r2, #0
 800326a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800326c:	7bfa      	ldrb	r2, [r7, #15]
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	4613      	mov	r3, r2
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	4413      	add	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	440b      	add	r3, r1
 800327a:	3320      	adds	r3, #32
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003280:	7bfa      	ldrb	r2, [r7, #15]
 8003282:	6879      	ldr	r1, [r7, #4]
 8003284:	4613      	mov	r3, r2
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	4413      	add	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	440b      	add	r3, r1
 800328e:	3324      	adds	r3, #36	@ 0x24
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003294:	7bfb      	ldrb	r3, [r7, #15]
 8003296:	3301      	adds	r3, #1
 8003298:	73fb      	strb	r3, [r7, #15]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	791b      	ldrb	r3, [r3, #4]
 800329e:	7bfa      	ldrb	r2, [r7, #15]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d3af      	bcc.n	8003204 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032a4:	2300      	movs	r3, #0
 80032a6:	73fb      	strb	r3, [r7, #15]
 80032a8:	e044      	b.n	8003334 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80032aa:	7bfa      	ldrb	r2, [r7, #15]
 80032ac:	6879      	ldr	r1, [r7, #4]
 80032ae:	4613      	mov	r3, r2
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	4413      	add	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	440b      	add	r3, r1
 80032b8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80032bc:	2200      	movs	r2, #0
 80032be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80032c0:	7bfa      	ldrb	r2, [r7, #15]
 80032c2:	6879      	ldr	r1, [r7, #4]
 80032c4:	4613      	mov	r3, r2
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	4413      	add	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	440b      	add	r3, r1
 80032ce:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80032d2:	7bfa      	ldrb	r2, [r7, #15]
 80032d4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80032d6:	7bfa      	ldrb	r2, [r7, #15]
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	4613      	mov	r3, r2
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	4413      	add	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	440b      	add	r3, r1
 80032e4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80032e8:	2200      	movs	r2, #0
 80032ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80032ec:	7bfa      	ldrb	r2, [r7, #15]
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	4613      	mov	r3, r2
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	4413      	add	r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	440b      	add	r3, r1
 80032fa:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80032fe:	2200      	movs	r2, #0
 8003300:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003302:	7bfa      	ldrb	r2, [r7, #15]
 8003304:	6879      	ldr	r1, [r7, #4]
 8003306:	4613      	mov	r3, r2
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	4413      	add	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	440b      	add	r3, r1
 8003310:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003314:	2200      	movs	r2, #0
 8003316:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003318:	7bfa      	ldrb	r2, [r7, #15]
 800331a:	6879      	ldr	r1, [r7, #4]
 800331c:	4613      	mov	r3, r2
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	4413      	add	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	440b      	add	r3, r1
 8003326:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800332a:	2200      	movs	r2, #0
 800332c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800332e:	7bfb      	ldrb	r3, [r7, #15]
 8003330:	3301      	adds	r3, #1
 8003332:	73fb      	strb	r3, [r7, #15]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	791b      	ldrb	r3, [r3, #4]
 8003338:	7bfa      	ldrb	r2, [r7, #15]
 800333a:	429a      	cmp	r2, r3
 800333c:	d3b5      	bcc.n	80032aa <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6818      	ldr	r0, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	7c1a      	ldrb	r2, [r3, #16]
 8003346:	f88d 2000 	strb.w	r2, [sp]
 800334a:	3304      	adds	r3, #4
 800334c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800334e:	f002 fbd5 	bl	8005afc <USB_DevInit>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d005      	beq.n	8003364 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2202      	movs	r2, #2
 800335c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e00c      	b.n	800337e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	f003 fc1f 	bl	8006bba <USB_DevDisconnect>

  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b084      	sub	sp, #16
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800339a:	2b01      	cmp	r3, #1
 800339c:	d101      	bne.n	80033a2 <HAL_PCD_Start+0x1c>
 800339e:	2302      	movs	r3, #2
 80033a0:	e022      	b.n	80033e8 <HAL_PCD_Start+0x62>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d009      	beq.n	80033ca <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d105      	bne.n	80033ca <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033c2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f002 fb26 	bl	8005a20 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4618      	mov	r0, r3
 80033da:	f003 fbcd 	bl	8006b78 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3710      	adds	r7, #16
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80033f0:	b590      	push	{r4, r7, lr}
 80033f2:	b08d      	sub	sp, #52	@ 0x34
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033fe:	6a3b      	ldr	r3, [r7, #32]
 8003400:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4618      	mov	r0, r3
 8003408:	f003 fc8b 	bl	8006d22 <USB_GetMode>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	f040 848c 	bne.w	8003d2c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4618      	mov	r0, r3
 800341a:	f003 fbef 	bl	8006bfc <USB_ReadInterrupts>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 8482 	beq.w	8003d2a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	0a1b      	lsrs	r3, r3, #8
 8003430:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4618      	mov	r0, r3
 8003440:	f003 fbdc 	bl	8006bfc <USB_ReadInterrupts>
 8003444:	4603      	mov	r3, r0
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b02      	cmp	r3, #2
 800344c:	d107      	bne.n	800345e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	695a      	ldr	r2, [r3, #20]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f002 0202 	and.w	r2, r2, #2
 800345c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4618      	mov	r0, r3
 8003464:	f003 fbca 	bl	8006bfc <USB_ReadInterrupts>
 8003468:	4603      	mov	r3, r0
 800346a:	f003 0310 	and.w	r3, r3, #16
 800346e:	2b10      	cmp	r3, #16
 8003470:	d161      	bne.n	8003536 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	699a      	ldr	r2, [r3, #24]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 0210 	bic.w	r2, r2, #16
 8003480:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003482:	6a3b      	ldr	r3, [r7, #32]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	f003 020f 	and.w	r2, r3, #15
 800348e:	4613      	mov	r3, r2
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	4413      	add	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	4413      	add	r3, r2
 800349e:	3304      	adds	r3, #4
 80034a0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	0c5b      	lsrs	r3, r3, #17
 80034a6:	f003 030f 	and.w	r3, r3, #15
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d124      	bne.n	80034f8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80034b4:	4013      	ands	r3, r2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d035      	beq.n	8003526 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	091b      	lsrs	r3, r3, #4
 80034c2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80034c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	461a      	mov	r2, r3
 80034cc:	6a38      	ldr	r0, [r7, #32]
 80034ce:	f003 fa01 	bl	80068d4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	68da      	ldr	r2, [r3, #12]
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	091b      	lsrs	r3, r3, #4
 80034da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034de:	441a      	add	r2, r3
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	695a      	ldr	r2, [r3, #20]
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	091b      	lsrs	r3, r3, #4
 80034ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034f0:	441a      	add	r2, r3
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	615a      	str	r2, [r3, #20]
 80034f6:	e016      	b.n	8003526 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	0c5b      	lsrs	r3, r3, #17
 80034fc:	f003 030f 	and.w	r3, r3, #15
 8003500:	2b06      	cmp	r3, #6
 8003502:	d110      	bne.n	8003526 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800350a:	2208      	movs	r2, #8
 800350c:	4619      	mov	r1, r3
 800350e:	6a38      	ldr	r0, [r7, #32]
 8003510:	f003 f9e0 	bl	80068d4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	695a      	ldr	r2, [r3, #20]
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	091b      	lsrs	r3, r3, #4
 800351c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003520:	441a      	add	r2, r3
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	699a      	ldr	r2, [r3, #24]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f042 0210 	orr.w	r2, r2, #16
 8003534:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4618      	mov	r0, r3
 800353c:	f003 fb5e 	bl	8006bfc <USB_ReadInterrupts>
 8003540:	4603      	mov	r3, r0
 8003542:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003546:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800354a:	f040 80a7 	bne.w	800369c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800354e:	2300      	movs	r3, #0
 8003550:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4618      	mov	r0, r3
 8003558:	f003 fb63 	bl	8006c22 <USB_ReadDevAllOutEpInterrupt>
 800355c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800355e:	e099      	b.n	8003694 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b00      	cmp	r3, #0
 8003568:	f000 808e 	beq.w	8003688 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003572:	b2d2      	uxtb	r2, r2
 8003574:	4611      	mov	r1, r2
 8003576:	4618      	mov	r0, r3
 8003578:	f003 fb87 	bl	8006c8a <USB_ReadDevOutEPInterrupt>
 800357c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00c      	beq.n	80035a2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358a:	015a      	lsls	r2, r3, #5
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	4413      	add	r3, r2
 8003590:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003594:	461a      	mov	r2, r3
 8003596:	2301      	movs	r3, #1
 8003598:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800359a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 fea3 	bl	80042e8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	f003 0308 	and.w	r3, r3, #8
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00c      	beq.n	80035c6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80035ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ae:	015a      	lsls	r2, r3, #5
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	4413      	add	r3, r2
 80035b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035b8:	461a      	mov	r2, r3
 80035ba:	2308      	movs	r3, #8
 80035bc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80035be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 ff79 	bl	80044b8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	f003 0310 	and.w	r3, r3, #16
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d008      	beq.n	80035e2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80035d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d2:	015a      	lsls	r2, r3, #5
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	4413      	add	r3, r2
 80035d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035dc:	461a      	mov	r2, r3
 80035de:	2310      	movs	r3, #16
 80035e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d030      	beq.n	800364e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80035ec:	6a3b      	ldr	r3, [r7, #32]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035f4:	2b80      	cmp	r3, #128	@ 0x80
 80035f6:	d109      	bne.n	800360c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	69fa      	ldr	r2, [r7, #28]
 8003602:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003606:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800360a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800360c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800360e:	4613      	mov	r3, r2
 8003610:	00db      	lsls	r3, r3, #3
 8003612:	4413      	add	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	4413      	add	r3, r2
 800361e:	3304      	adds	r3, #4
 8003620:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	78db      	ldrb	r3, [r3, #3]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d108      	bne.n	800363c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	2200      	movs	r2, #0
 800362e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003632:	b2db      	uxtb	r3, r3
 8003634:	4619      	mov	r1, r3
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f008 fd4e 	bl	800c0d8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800363c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800363e:	015a      	lsls	r2, r3, #5
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	4413      	add	r3, r2
 8003644:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003648:	461a      	mov	r2, r3
 800364a:	2302      	movs	r3, #2
 800364c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	f003 0320 	and.w	r3, r3, #32
 8003654:	2b00      	cmp	r3, #0
 8003656:	d008      	beq.n	800366a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800365a:	015a      	lsls	r2, r3, #5
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	4413      	add	r3, r2
 8003660:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003664:	461a      	mov	r2, r3
 8003666:	2320      	movs	r3, #32
 8003668:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d009      	beq.n	8003688 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003676:	015a      	lsls	r2, r3, #5
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	4413      	add	r3, r2
 800367c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003680:	461a      	mov	r2, r3
 8003682:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003686:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368a:	3301      	adds	r3, #1
 800368c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800368e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003690:	085b      	lsrs	r3, r3, #1
 8003692:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003696:	2b00      	cmp	r3, #0
 8003698:	f47f af62 	bne.w	8003560 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f003 faab 	bl	8006bfc <USB_ReadInterrupts>
 80036a6:	4603      	mov	r3, r0
 80036a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80036b0:	f040 80db 	bne.w	800386a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f003 facc 	bl	8006c56 <USB_ReadDevAllInEpInterrupt>
 80036be:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80036c0:	2300      	movs	r3, #0
 80036c2:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80036c4:	e0cd      	b.n	8003862 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80036c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f000 80c2 	beq.w	8003856 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036d8:	b2d2      	uxtb	r2, r2
 80036da:	4611      	mov	r1, r2
 80036dc:	4618      	mov	r0, r3
 80036de:	f003 faf2 	bl	8006cc6 <USB_ReadDevInEPInterrupt>
 80036e2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d057      	beq.n	800379e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80036ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f0:	f003 030f 	and.w	r3, r3, #15
 80036f4:	2201      	movs	r2, #1
 80036f6:	fa02 f303 	lsl.w	r3, r2, r3
 80036fa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003702:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	43db      	mvns	r3, r3
 8003708:	69f9      	ldr	r1, [r7, #28]
 800370a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800370e:	4013      	ands	r3, r2
 8003710:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003714:	015a      	lsls	r2, r3, #5
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	4413      	add	r3, r2
 800371a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800371e:	461a      	mov	r2, r3
 8003720:	2301      	movs	r3, #1
 8003722:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	799b      	ldrb	r3, [r3, #6]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d132      	bne.n	8003792 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800372c:	6879      	ldr	r1, [r7, #4]
 800372e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003730:	4613      	mov	r3, r2
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	4413      	add	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	440b      	add	r3, r1
 800373a:	3320      	adds	r3, #32
 800373c:	6819      	ldr	r1, [r3, #0]
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003742:	4613      	mov	r3, r2
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	4413      	add	r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	4403      	add	r3, r0
 800374c:	331c      	adds	r3, #28
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4419      	add	r1, r3
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003756:	4613      	mov	r3, r2
 8003758:	00db      	lsls	r3, r3, #3
 800375a:	4413      	add	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	4403      	add	r3, r0
 8003760:	3320      	adds	r3, #32
 8003762:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003766:	2b00      	cmp	r3, #0
 8003768:	d113      	bne.n	8003792 <HAL_PCD_IRQHandler+0x3a2>
 800376a:	6879      	ldr	r1, [r7, #4]
 800376c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800376e:	4613      	mov	r3, r2
 8003770:	00db      	lsls	r3, r3, #3
 8003772:	4413      	add	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	440b      	add	r3, r1
 8003778:	3324      	adds	r3, #36	@ 0x24
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d108      	bne.n	8003792 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6818      	ldr	r0, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800378a:	461a      	mov	r2, r3
 800378c:	2101      	movs	r1, #1
 800378e:	f003 faf9 	bl	8006d84 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003794:	b2db      	uxtb	r3, r3
 8003796:	4619      	mov	r1, r3
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f008 fc22 	bl	800bfe2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	f003 0308 	and.w	r3, r3, #8
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d008      	beq.n	80037ba <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80037a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037aa:	015a      	lsls	r2, r3, #5
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	4413      	add	r3, r2
 80037b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037b4:	461a      	mov	r2, r3
 80037b6:	2308      	movs	r3, #8
 80037b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	f003 0310 	and.w	r3, r3, #16
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d008      	beq.n	80037d6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80037c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c6:	015a      	lsls	r2, r3, #5
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	4413      	add	r3, r2
 80037cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037d0:	461a      	mov	r2, r3
 80037d2:	2310      	movs	r3, #16
 80037d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d008      	beq.n	80037f2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80037e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e2:	015a      	lsls	r2, r3, #5
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	4413      	add	r3, r2
 80037e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037ec:	461a      	mov	r2, r3
 80037ee:	2340      	movs	r3, #64	@ 0x40
 80037f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d023      	beq.n	8003844 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80037fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80037fe:	6a38      	ldr	r0, [r7, #32]
 8003800:	f002 fae0 	bl	8005dc4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003804:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003806:	4613      	mov	r3, r2
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	4413      	add	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	3310      	adds	r3, #16
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	4413      	add	r3, r2
 8003814:	3304      	adds	r3, #4
 8003816:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	78db      	ldrb	r3, [r3, #3]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d108      	bne.n	8003832 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	2200      	movs	r2, #0
 8003824:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003828:	b2db      	uxtb	r3, r3
 800382a:	4619      	mov	r1, r3
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f008 fc65 	bl	800c0fc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003834:	015a      	lsls	r2, r3, #5
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	4413      	add	r3, r2
 800383a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800383e:	461a      	mov	r2, r3
 8003840:	2302      	movs	r3, #2
 8003842:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800384e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 fcbd 	bl	80041d0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003858:	3301      	adds	r3, #1
 800385a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800385c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800385e:	085b      	lsrs	r3, r3, #1
 8003860:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003864:	2b00      	cmp	r3, #0
 8003866:	f47f af2e 	bne.w	80036c6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4618      	mov	r0, r3
 8003870:	f003 f9c4 	bl	8006bfc <USB_ReadInterrupts>
 8003874:	4603      	mov	r3, r0
 8003876:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800387a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800387e:	d122      	bne.n	80038c6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	69fa      	ldr	r2, [r7, #28]
 800388a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800388e:	f023 0301 	bic.w	r3, r3, #1
 8003892:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800389a:	2b01      	cmp	r3, #1
 800389c:	d108      	bne.n	80038b0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80038a6:	2100      	movs	r1, #0
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 fea3 	bl	80045f4 <HAL_PCDEx_LPM_Callback>
 80038ae:	e002      	b.n	80038b6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f008 fc03 	bl	800c0bc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	695a      	ldr	r2, [r3, #20]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80038c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f003 f996 	bl	8006bfc <USB_ReadInterrupts>
 80038d0:	4603      	mov	r3, r0
 80038d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038da:	d112      	bne.n	8003902 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f003 0301 	and.w	r3, r3, #1
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d102      	bne.n	80038f2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f008 fbbf 	bl	800c070 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	695a      	ldr	r2, [r3, #20]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003900:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4618      	mov	r0, r3
 8003908:	f003 f978 	bl	8006bfc <USB_ReadInterrupts>
 800390c:	4603      	mov	r3, r0
 800390e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003912:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003916:	f040 80b7 	bne.w	8003a88 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	69fa      	ldr	r2, [r7, #28]
 8003924:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003928:	f023 0301 	bic.w	r3, r3, #1
 800392c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2110      	movs	r1, #16
 8003934:	4618      	mov	r0, r3
 8003936:	f002 fa45 	bl	8005dc4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800393a:	2300      	movs	r3, #0
 800393c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800393e:	e046      	b.n	80039ce <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003942:	015a      	lsls	r2, r3, #5
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	4413      	add	r3, r2
 8003948:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800394c:	461a      	mov	r2, r3
 800394e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003952:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003956:	015a      	lsls	r2, r3, #5
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	4413      	add	r3, r2
 800395c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003964:	0151      	lsls	r1, r2, #5
 8003966:	69fa      	ldr	r2, [r7, #28]
 8003968:	440a      	add	r2, r1
 800396a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800396e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003972:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003976:	015a      	lsls	r2, r3, #5
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	4413      	add	r3, r2
 800397c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003980:	461a      	mov	r2, r3
 8003982:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003986:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800398a:	015a      	lsls	r2, r3, #5
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	4413      	add	r3, r2
 8003990:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003998:	0151      	lsls	r1, r2, #5
 800399a:	69fa      	ldr	r2, [r7, #28]
 800399c:	440a      	add	r2, r1
 800399e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80039a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80039a6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80039a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039aa:	015a      	lsls	r2, r3, #5
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	4413      	add	r3, r2
 80039b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039b8:	0151      	lsls	r1, r2, #5
 80039ba:	69fa      	ldr	r2, [r7, #28]
 80039bc:	440a      	add	r2, r1
 80039be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80039c2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80039c6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ca:	3301      	adds	r3, #1
 80039cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	791b      	ldrb	r3, [r3, #4]
 80039d2:	461a      	mov	r2, r3
 80039d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d3b2      	bcc.n	8003940 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039e0:	69db      	ldr	r3, [r3, #28]
 80039e2:	69fa      	ldr	r2, [r7, #28]
 80039e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039e8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80039ec:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	7bdb      	ldrb	r3, [r3, #15]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d016      	beq.n	8003a24 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a00:	69fa      	ldr	r2, [r7, #28]
 8003a02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a06:	f043 030b 	orr.w	r3, r3, #11
 8003a0a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a16:	69fa      	ldr	r2, [r7, #28]
 8003a18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a1c:	f043 030b 	orr.w	r3, r3, #11
 8003a20:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a22:	e015      	b.n	8003a50 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	69fa      	ldr	r2, [r7, #28]
 8003a2e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a32:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003a36:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003a3a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	69fa      	ldr	r2, [r7, #28]
 8003a46:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a4a:	f043 030b 	orr.w	r3, r3, #11
 8003a4e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	69fa      	ldr	r2, [r7, #28]
 8003a5a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a5e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003a62:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6818      	ldr	r0, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a72:	461a      	mov	r2, r3
 8003a74:	f003 f986 	bl	8006d84 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	695a      	ldr	r2, [r3, #20]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003a86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f003 f8b5 	bl	8006bfc <USB_ReadInterrupts>
 8003a92:	4603      	mov	r3, r0
 8003a94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a9c:	d123      	bne.n	8003ae6 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f003 f94b 	bl	8006d3e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f002 fa02 	bl	8005eb6 <USB_GetDevSpeed>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681c      	ldr	r4, [r3, #0]
 8003abe:	f001 fa09 	bl	8004ed4 <HAL_RCC_GetHCLKFreq>
 8003ac2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003ac8:	461a      	mov	r2, r3
 8003aca:	4620      	mov	r0, r4
 8003acc:	f001 ff06 	bl	80058dc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f008 faae 	bl	800c032 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	695a      	ldr	r2, [r3, #20]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003ae4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f003 f886 	bl	8006bfc <USB_ReadInterrupts>
 8003af0:	4603      	mov	r3, r0
 8003af2:	f003 0308 	and.w	r3, r3, #8
 8003af6:	2b08      	cmp	r3, #8
 8003af8:	d10a      	bne.n	8003b10 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f008 fa8b 	bl	800c016 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	695a      	ldr	r2, [r3, #20]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f002 0208 	and.w	r2, r2, #8
 8003b0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f003 f871 	bl	8006bfc <USB_ReadInterrupts>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b20:	2b80      	cmp	r3, #128	@ 0x80
 8003b22:	d123      	bne.n	8003b6c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003b24:	6a3b      	ldr	r3, [r7, #32]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b30:	2301      	movs	r3, #1
 8003b32:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b34:	e014      	b.n	8003b60 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003b36:	6879      	ldr	r1, [r7, #4]
 8003b38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	4413      	add	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	440b      	add	r3, r1
 8003b44:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d105      	bne.n	8003b5a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	4619      	mov	r1, r3
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 fb0a 	bl	800416e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	791b      	ldrb	r3, [r3, #4]
 8003b64:	461a      	mov	r2, r3
 8003b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d3e4      	bcc.n	8003b36 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4618      	mov	r0, r3
 8003b72:	f003 f843 	bl	8006bfc <USB_ReadInterrupts>
 8003b76:	4603      	mov	r3, r0
 8003b78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b80:	d13c      	bne.n	8003bfc <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b82:	2301      	movs	r3, #1
 8003b84:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b86:	e02b      	b.n	8003be0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b8a:	015a      	lsls	r2, r3, #5
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	4413      	add	r3, r2
 8003b90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b98:	6879      	ldr	r1, [r7, #4]
 8003b9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	00db      	lsls	r3, r3, #3
 8003ba0:	4413      	add	r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	440b      	add	r3, r1
 8003ba6:	3318      	adds	r3, #24
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d115      	bne.n	8003bda <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003bae:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	da12      	bge.n	8003bda <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003bb4:	6879      	ldr	r1, [r7, #4]
 8003bb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bb8:	4613      	mov	r3, r2
 8003bba:	00db      	lsls	r3, r3, #3
 8003bbc:	4413      	add	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	440b      	add	r3, r1
 8003bc2:	3317      	adds	r3, #23
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 faca 	bl	800416e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bdc:	3301      	adds	r3, #1
 8003bde:	627b      	str	r3, [r7, #36]	@ 0x24
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	791b      	ldrb	r3, [r3, #4]
 8003be4:	461a      	mov	r2, r3
 8003be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d3cd      	bcc.n	8003b88 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	695a      	ldr	r2, [r3, #20]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003bfa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4618      	mov	r0, r3
 8003c02:	f002 fffb 	bl	8006bfc <USB_ReadInterrupts>
 8003c06:	4603      	mov	r3, r0
 8003c08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c0c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c10:	d156      	bne.n	8003cc0 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c12:	2301      	movs	r3, #1
 8003c14:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c16:	e045      	b.n	8003ca4 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1a:	015a      	lsls	r2, r3, #5
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	4413      	add	r3, r2
 8003c20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c28:	6879      	ldr	r1, [r7, #4]
 8003c2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	00db      	lsls	r3, r3, #3
 8003c30:	4413      	add	r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	440b      	add	r3, r1
 8003c36:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d12e      	bne.n	8003c9e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003c40:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	da2b      	bge.n	8003c9e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003c52:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d121      	bne.n	8003c9e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003c5a:	6879      	ldr	r1, [r7, #4]
 8003c5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c5e:	4613      	mov	r3, r2
 8003c60:	00db      	lsls	r3, r3, #3
 8003c62:	4413      	add	r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	440b      	add	r3, r1
 8003c68:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003c70:	6a3b      	ldr	r3, [r7, #32]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003c78:	6a3b      	ldr	r3, [r7, #32]
 8003c7a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003c7c:	6a3b      	ldr	r3, [r7, #32]
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d10a      	bne.n	8003c9e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	69fa      	ldr	r2, [r7, #28]
 8003c92:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c9a:	6053      	str	r3, [r2, #4]
            break;
 8003c9c:	e008      	b.n	8003cb0 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	791b      	ldrb	r3, [r3, #4]
 8003ca8:	461a      	mov	r2, r3
 8003caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d3b3      	bcc.n	8003c18 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	695a      	ldr	r2, [r3, #20]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003cbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f002 ff99 	bl	8006bfc <USB_ReadInterrupts>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cd4:	d10a      	bne.n	8003cec <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f008 fa22 	bl	800c120 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	695a      	ldr	r2, [r3, #20]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003cea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f002 ff83 	bl	8006bfc <USB_ReadInterrupts>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	f003 0304 	and.w	r3, r3, #4
 8003cfc:	2b04      	cmp	r3, #4
 8003cfe:	d115      	bne.n	8003d2c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	f003 0304 	and.w	r3, r3, #4
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d002      	beq.n	8003d18 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f008 fa12 	bl	800c13c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	6859      	ldr	r1, [r3, #4]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	430a      	orrs	r2, r1
 8003d26:	605a      	str	r2, [r3, #4]
 8003d28:	e000      	b.n	8003d2c <HAL_PCD_IRQHandler+0x93c>
      return;
 8003d2a:	bf00      	nop
    }
  }
}
 8003d2c:	3734      	adds	r7, #52	@ 0x34
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd90      	pop	{r4, r7, pc}

08003d32 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b082      	sub	sp, #8
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d101      	bne.n	8003d4c <HAL_PCD_SetAddress+0x1a>
 8003d48:	2302      	movs	r3, #2
 8003d4a:	e012      	b.n	8003d72 <HAL_PCD_SetAddress+0x40>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	78fa      	ldrb	r2, [r7, #3]
 8003d58:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	78fa      	ldrb	r2, [r7, #3]
 8003d60:	4611      	mov	r1, r2
 8003d62:	4618      	mov	r0, r3
 8003d64:	f002 fee2 	bl	8006b2c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b084      	sub	sp, #16
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
 8003d82:	4608      	mov	r0, r1
 8003d84:	4611      	mov	r1, r2
 8003d86:	461a      	mov	r2, r3
 8003d88:	4603      	mov	r3, r0
 8003d8a:	70fb      	strb	r3, [r7, #3]
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	803b      	strh	r3, [r7, #0]
 8003d90:	4613      	mov	r3, r2
 8003d92:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003d94:	2300      	movs	r3, #0
 8003d96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	da0f      	bge.n	8003dc0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003da0:	78fb      	ldrb	r3, [r7, #3]
 8003da2:	f003 020f 	and.w	r2, r3, #15
 8003da6:	4613      	mov	r3, r2
 8003da8:	00db      	lsls	r3, r3, #3
 8003daa:	4413      	add	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	3310      	adds	r3, #16
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	4413      	add	r3, r2
 8003db4:	3304      	adds	r3, #4
 8003db6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	705a      	strb	r2, [r3, #1]
 8003dbe:	e00f      	b.n	8003de0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dc0:	78fb      	ldrb	r3, [r7, #3]
 8003dc2:	f003 020f 	and.w	r2, r3, #15
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	00db      	lsls	r3, r3, #3
 8003dca:	4413      	add	r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	3304      	adds	r3, #4
 8003dd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003de0:	78fb      	ldrb	r3, [r7, #3]
 8003de2:	f003 030f 	and.w	r3, r3, #15
 8003de6:	b2da      	uxtb	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003dec:	883b      	ldrh	r3, [r7, #0]
 8003dee:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	78ba      	ldrb	r2, [r7, #2]
 8003dfa:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	785b      	ldrb	r3, [r3, #1]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d004      	beq.n	8003e0e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	461a      	mov	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003e0e:	78bb      	ldrb	r3, [r7, #2]
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d102      	bne.n	8003e1a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d101      	bne.n	8003e28 <HAL_PCD_EP_Open+0xae>
 8003e24:	2302      	movs	r3, #2
 8003e26:	e00e      	b.n	8003e46 <HAL_PCD_EP_Open+0xcc>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68f9      	ldr	r1, [r7, #12]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f002 f862 	bl	8005f00 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003e44:	7afb      	ldrb	r3, [r7, #11]
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b084      	sub	sp, #16
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
 8003e56:	460b      	mov	r3, r1
 8003e58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	da0f      	bge.n	8003e82 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e62:	78fb      	ldrb	r3, [r7, #3]
 8003e64:	f003 020f 	and.w	r2, r3, #15
 8003e68:	4613      	mov	r3, r2
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	4413      	add	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	3310      	adds	r3, #16
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	4413      	add	r3, r2
 8003e76:	3304      	adds	r3, #4
 8003e78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	705a      	strb	r2, [r3, #1]
 8003e80:	e00f      	b.n	8003ea2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e82:	78fb      	ldrb	r3, [r7, #3]
 8003e84:	f003 020f 	and.w	r2, r3, #15
 8003e88:	4613      	mov	r3, r2
 8003e8a:	00db      	lsls	r3, r3, #3
 8003e8c:	4413      	add	r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	4413      	add	r3, r2
 8003e98:	3304      	adds	r3, #4
 8003e9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ea2:	78fb      	ldrb	r3, [r7, #3]
 8003ea4:	f003 030f 	and.w	r3, r3, #15
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d101      	bne.n	8003ebc <HAL_PCD_EP_Close+0x6e>
 8003eb8:	2302      	movs	r3, #2
 8003eba:	e00e      	b.n	8003eda <HAL_PCD_EP_Close+0x8c>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68f9      	ldr	r1, [r7, #12]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f002 f8a0 	bl	8006010 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3710      	adds	r7, #16
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b086      	sub	sp, #24
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	60f8      	str	r0, [r7, #12]
 8003eea:	607a      	str	r2, [r7, #4]
 8003eec:	603b      	str	r3, [r7, #0]
 8003eee:	460b      	mov	r3, r1
 8003ef0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ef2:	7afb      	ldrb	r3, [r7, #11]
 8003ef4:	f003 020f 	and.w	r2, r3, #15
 8003ef8:	4613      	mov	r3, r2
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	4413      	add	r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	4413      	add	r3, r2
 8003f08:	3304      	adds	r3, #4
 8003f0a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	683a      	ldr	r2, [r7, #0]
 8003f16:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	2200      	movs	r2, #0
 8003f22:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f24:	7afb      	ldrb	r3, [r7, #11]
 8003f26:	f003 030f 	and.w	r3, r3, #15
 8003f2a:	b2da      	uxtb	r2, r3
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	799b      	ldrb	r3, [r3, #6]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d102      	bne.n	8003f3e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6818      	ldr	r0, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	799b      	ldrb	r3, [r3, #6]
 8003f46:	461a      	mov	r2, r3
 8003f48:	6979      	ldr	r1, [r7, #20]
 8003f4a:	f002 f93d 	bl	80061c8 <USB_EPStartXfer>

  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3718      	adds	r7, #24
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	460b      	mov	r3, r1
 8003f62:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003f64:	78fb      	ldrb	r3, [r7, #3]
 8003f66:	f003 020f 	and.w	r2, r3, #15
 8003f6a:	6879      	ldr	r1, [r7, #4]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	4413      	add	r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	440b      	add	r3, r1
 8003f76:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003f7a:	681b      	ldr	r3, [r3, #0]
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	607a      	str	r2, [r7, #4]
 8003f92:	603b      	str	r3, [r7, #0]
 8003f94:	460b      	mov	r3, r1
 8003f96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f98:	7afb      	ldrb	r3, [r7, #11]
 8003f9a:	f003 020f 	and.w	r2, r3, #15
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	00db      	lsls	r3, r3, #3
 8003fa2:	4413      	add	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	3310      	adds	r3, #16
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	4413      	add	r3, r2
 8003fac:	3304      	adds	r3, #4
 8003fae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fc8:	7afb      	ldrb	r3, [r7, #11]
 8003fca:	f003 030f 	and.w	r3, r3, #15
 8003fce:	b2da      	uxtb	r2, r3
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	799b      	ldrb	r3, [r3, #6]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d102      	bne.n	8003fe2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6818      	ldr	r0, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	799b      	ldrb	r3, [r3, #6]
 8003fea:	461a      	mov	r2, r3
 8003fec:	6979      	ldr	r1, [r7, #20]
 8003fee:	f002 f8eb 	bl	80061c8 <USB_EPStartXfer>

  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3718      	adds	r7, #24
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	460b      	mov	r3, r1
 8004006:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004008:	78fb      	ldrb	r3, [r7, #3]
 800400a:	f003 030f 	and.w	r3, r3, #15
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	7912      	ldrb	r2, [r2, #4]
 8004012:	4293      	cmp	r3, r2
 8004014:	d901      	bls.n	800401a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e04f      	b.n	80040ba <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800401a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800401e:	2b00      	cmp	r3, #0
 8004020:	da0f      	bge.n	8004042 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004022:	78fb      	ldrb	r3, [r7, #3]
 8004024:	f003 020f 	and.w	r2, r3, #15
 8004028:	4613      	mov	r3, r2
 800402a:	00db      	lsls	r3, r3, #3
 800402c:	4413      	add	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	3310      	adds	r3, #16
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	4413      	add	r3, r2
 8004036:	3304      	adds	r3, #4
 8004038:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2201      	movs	r2, #1
 800403e:	705a      	strb	r2, [r3, #1]
 8004040:	e00d      	b.n	800405e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004042:	78fa      	ldrb	r2, [r7, #3]
 8004044:	4613      	mov	r3, r2
 8004046:	00db      	lsls	r3, r3, #3
 8004048:	4413      	add	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	4413      	add	r3, r2
 8004054:	3304      	adds	r3, #4
 8004056:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2201      	movs	r2, #1
 8004062:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004064:	78fb      	ldrb	r3, [r7, #3]
 8004066:	f003 030f 	and.w	r3, r3, #15
 800406a:	b2da      	uxtb	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004076:	2b01      	cmp	r3, #1
 8004078:	d101      	bne.n	800407e <HAL_PCD_EP_SetStall+0x82>
 800407a:	2302      	movs	r3, #2
 800407c:	e01d      	b.n	80040ba <HAL_PCD_EP_SetStall+0xbe>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68f9      	ldr	r1, [r7, #12]
 800408c:	4618      	mov	r0, r3
 800408e:	f002 fc79 	bl	8006984 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004092:	78fb      	ldrb	r3, [r7, #3]
 8004094:	f003 030f 	and.w	r3, r3, #15
 8004098:	2b00      	cmp	r3, #0
 800409a:	d109      	bne.n	80040b0 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6818      	ldr	r0, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	7999      	ldrb	r1, [r3, #6]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80040aa:	461a      	mov	r2, r3
 80040ac:	f002 fe6a 	bl	8006d84 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b084      	sub	sp, #16
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
 80040ca:	460b      	mov	r3, r1
 80040cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80040ce:	78fb      	ldrb	r3, [r7, #3]
 80040d0:	f003 030f 	and.w	r3, r3, #15
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	7912      	ldrb	r2, [r2, #4]
 80040d8:	4293      	cmp	r3, r2
 80040da:	d901      	bls.n	80040e0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e042      	b.n	8004166 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80040e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	da0f      	bge.n	8004108 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040e8:	78fb      	ldrb	r3, [r7, #3]
 80040ea:	f003 020f 	and.w	r2, r3, #15
 80040ee:	4613      	mov	r3, r2
 80040f0:	00db      	lsls	r3, r3, #3
 80040f2:	4413      	add	r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	3310      	adds	r3, #16
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	4413      	add	r3, r2
 80040fc:	3304      	adds	r3, #4
 80040fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2201      	movs	r2, #1
 8004104:	705a      	strb	r2, [r3, #1]
 8004106:	e00f      	b.n	8004128 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004108:	78fb      	ldrb	r3, [r7, #3]
 800410a:	f003 020f 	and.w	r2, r3, #15
 800410e:	4613      	mov	r3, r2
 8004110:	00db      	lsls	r3, r3, #3
 8004112:	4413      	add	r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	4413      	add	r3, r2
 800411e:	3304      	adds	r3, #4
 8004120:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800412e:	78fb      	ldrb	r3, [r7, #3]
 8004130:	f003 030f 	and.w	r3, r3, #15
 8004134:	b2da      	uxtb	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004140:	2b01      	cmp	r3, #1
 8004142:	d101      	bne.n	8004148 <HAL_PCD_EP_ClrStall+0x86>
 8004144:	2302      	movs	r3, #2
 8004146:	e00e      	b.n	8004166 <HAL_PCD_EP_ClrStall+0xa4>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68f9      	ldr	r1, [r7, #12]
 8004156:	4618      	mov	r0, r3
 8004158:	f002 fc82 	bl	8006a60 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b084      	sub	sp, #16
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
 8004176:	460b      	mov	r3, r1
 8004178:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800417a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800417e:	2b00      	cmp	r3, #0
 8004180:	da0c      	bge.n	800419c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004182:	78fb      	ldrb	r3, [r7, #3]
 8004184:	f003 020f 	and.w	r2, r3, #15
 8004188:	4613      	mov	r3, r2
 800418a:	00db      	lsls	r3, r3, #3
 800418c:	4413      	add	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	3310      	adds	r3, #16
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	4413      	add	r3, r2
 8004196:	3304      	adds	r3, #4
 8004198:	60fb      	str	r3, [r7, #12]
 800419a:	e00c      	b.n	80041b6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800419c:	78fb      	ldrb	r3, [r7, #3]
 800419e:	f003 020f 	and.w	r2, r3, #15
 80041a2:	4613      	mov	r3, r2
 80041a4:	00db      	lsls	r3, r3, #3
 80041a6:	4413      	add	r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	4413      	add	r3, r2
 80041b2:	3304      	adds	r3, #4
 80041b4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68f9      	ldr	r1, [r7, #12]
 80041bc:	4618      	mov	r0, r3
 80041be:	f002 faa1 	bl	8006704 <USB_EPStopXfer>
 80041c2:	4603      	mov	r3, r0
 80041c4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80041c6:	7afb      	ldrb	r3, [r7, #11]
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b08a      	sub	sp, #40	@ 0x28
 80041d4:	af02      	add	r7, sp, #8
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80041e4:	683a      	ldr	r2, [r7, #0]
 80041e6:	4613      	mov	r3, r2
 80041e8:	00db      	lsls	r3, r3, #3
 80041ea:	4413      	add	r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	3310      	adds	r3, #16
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	4413      	add	r3, r2
 80041f4:	3304      	adds	r3, #4
 80041f6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	695a      	ldr	r2, [r3, #20]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	429a      	cmp	r2, r3
 8004202:	d901      	bls.n	8004208 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e06b      	b.n	80042e0 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	691a      	ldr	r2, [r3, #16]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	69fa      	ldr	r2, [r7, #28]
 800421a:	429a      	cmp	r2, r3
 800421c:	d902      	bls.n	8004224 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	3303      	adds	r3, #3
 8004228:	089b      	lsrs	r3, r3, #2
 800422a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800422c:	e02a      	b.n	8004284 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	691a      	ldr	r2, [r3, #16]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	69fa      	ldr	r2, [r7, #28]
 8004240:	429a      	cmp	r2, r3
 8004242:	d902      	bls.n	800424a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	3303      	adds	r3, #3
 800424e:	089b      	lsrs	r3, r3, #2
 8004250:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	68d9      	ldr	r1, [r3, #12]
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	b2da      	uxtb	r2, r3
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004262:	9300      	str	r3, [sp, #0]
 8004264:	4603      	mov	r3, r0
 8004266:	6978      	ldr	r0, [r7, #20]
 8004268:	f002 faf6 	bl	8006858 <USB_WritePacket>

    ep->xfer_buff  += len;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	68da      	ldr	r2, [r3, #12]
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	441a      	add	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	695a      	ldr	r2, [r3, #20]
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	441a      	add	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	015a      	lsls	r2, r3, #5
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	4413      	add	r3, r2
 800428c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	429a      	cmp	r2, r3
 8004298:	d809      	bhi.n	80042ae <PCD_WriteEmptyTxFifo+0xde>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	695a      	ldr	r2, [r3, #20]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d203      	bcs.n	80042ae <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1bf      	bne.n	800422e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	691a      	ldr	r2, [r3, #16]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d811      	bhi.n	80042de <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	f003 030f 	and.w	r3, r3, #15
 80042c0:	2201      	movs	r2, #1
 80042c2:	fa02 f303 	lsl.w	r3, r2, r3
 80042c6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	43db      	mvns	r3, r3
 80042d4:	6939      	ldr	r1, [r7, #16]
 80042d6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80042da:	4013      	ands	r3, r2
 80042dc:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3720      	adds	r7, #32
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b088      	sub	sp, #32
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	333c      	adds	r3, #60	@ 0x3c
 8004300:	3304      	adds	r3, #4
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	015a      	lsls	r2, r3, #5
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	4413      	add	r3, r2
 800430e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	799b      	ldrb	r3, [r3, #6]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d17b      	bne.n	8004416 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	f003 0308 	and.w	r3, r3, #8
 8004324:	2b00      	cmp	r3, #0
 8004326:	d015      	beq.n	8004354 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	4a61      	ldr	r2, [pc, #388]	@ (80044b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800432c:	4293      	cmp	r3, r2
 800432e:	f240 80b9 	bls.w	80044a4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004338:	2b00      	cmp	r3, #0
 800433a:	f000 80b3 	beq.w	80044a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	015a      	lsls	r2, r3, #5
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	4413      	add	r3, r2
 8004346:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800434a:	461a      	mov	r2, r3
 800434c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004350:	6093      	str	r3, [r2, #8]
 8004352:	e0a7      	b.n	80044a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	f003 0320 	and.w	r3, r3, #32
 800435a:	2b00      	cmp	r3, #0
 800435c:	d009      	beq.n	8004372 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	015a      	lsls	r2, r3, #5
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	4413      	add	r3, r2
 8004366:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800436a:	461a      	mov	r2, r3
 800436c:	2320      	movs	r3, #32
 800436e:	6093      	str	r3, [r2, #8]
 8004370:	e098      	b.n	80044a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004378:	2b00      	cmp	r3, #0
 800437a:	f040 8093 	bne.w	80044a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	4a4b      	ldr	r2, [pc, #300]	@ (80044b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d90f      	bls.n	80043a6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00a      	beq.n	80043a6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	015a      	lsls	r2, r3, #5
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	4413      	add	r3, r2
 8004398:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800439c:	461a      	mov	r2, r3
 800439e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043a2:	6093      	str	r3, [r2, #8]
 80043a4:	e07e      	b.n	80044a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80043a6:	683a      	ldr	r2, [r7, #0]
 80043a8:	4613      	mov	r3, r2
 80043aa:	00db      	lsls	r3, r3, #3
 80043ac:	4413      	add	r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	4413      	add	r3, r2
 80043b8:	3304      	adds	r3, #4
 80043ba:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6a1a      	ldr	r2, [r3, #32]
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	0159      	lsls	r1, r3, #5
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	440b      	add	r3, r1
 80043c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043d2:	1ad2      	subs	r2, r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d114      	bne.n	8004408 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d109      	bne.n	80043fa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6818      	ldr	r0, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80043f0:	461a      	mov	r2, r3
 80043f2:	2101      	movs	r1, #1
 80043f4:	f002 fcc6 	bl	8006d84 <USB_EP0_OutStart>
 80043f8:	e006      	b.n	8004408 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	68da      	ldr	r2, [r3, #12]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	441a      	add	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	b2db      	uxtb	r3, r3
 800440c:	4619      	mov	r1, r3
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f007 fdcc 	bl	800bfac <HAL_PCD_DataOutStageCallback>
 8004414:	e046      	b.n	80044a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	4a26      	ldr	r2, [pc, #152]	@ (80044b4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d124      	bne.n	8004468 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00a      	beq.n	800443e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	4413      	add	r3, r2
 8004430:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004434:	461a      	mov	r2, r3
 8004436:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800443a:	6093      	str	r3, [r2, #8]
 800443c:	e032      	b.n	80044a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	f003 0320 	and.w	r3, r3, #32
 8004444:	2b00      	cmp	r3, #0
 8004446:	d008      	beq.n	800445a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	015a      	lsls	r2, r3, #5
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	4413      	add	r3, r2
 8004450:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004454:	461a      	mov	r2, r3
 8004456:	2320      	movs	r3, #32
 8004458:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	b2db      	uxtb	r3, r3
 800445e:	4619      	mov	r1, r3
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f007 fda3 	bl	800bfac <HAL_PCD_DataOutStageCallback>
 8004466:	e01d      	b.n	80044a4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d114      	bne.n	8004498 <PCD_EP_OutXfrComplete_int+0x1b0>
 800446e:	6879      	ldr	r1, [r7, #4]
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	4613      	mov	r3, r2
 8004474:	00db      	lsls	r3, r3, #3
 8004476:	4413      	add	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	440b      	add	r3, r1
 800447c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d108      	bne.n	8004498 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6818      	ldr	r0, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004490:	461a      	mov	r2, r3
 8004492:	2100      	movs	r1, #0
 8004494:	f002 fc76 	bl	8006d84 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	b2db      	uxtb	r3, r3
 800449c:	4619      	mov	r1, r3
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f007 fd84 	bl	800bfac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3720      	adds	r7, #32
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	4f54300a 	.word	0x4f54300a
 80044b4:	4f54310a 	.word	0x4f54310a

080044b8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b086      	sub	sp, #24
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	333c      	adds	r3, #60	@ 0x3c
 80044d0:	3304      	adds	r3, #4
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	015a      	lsls	r2, r3, #5
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	4413      	add	r3, r2
 80044de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	4a15      	ldr	r2, [pc, #84]	@ (8004540 <PCD_EP_OutSetupPacket_int+0x88>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d90e      	bls.n	800450c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d009      	beq.n	800450c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	015a      	lsls	r2, r3, #5
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	4413      	add	r3, r2
 8004500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004504:	461a      	mov	r2, r3
 8004506:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800450a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f007 fd3b 	bl	800bf88 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	4a0a      	ldr	r2, [pc, #40]	@ (8004540 <PCD_EP_OutSetupPacket_int+0x88>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d90c      	bls.n	8004534 <PCD_EP_OutSetupPacket_int+0x7c>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	799b      	ldrb	r3, [r3, #6]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d108      	bne.n	8004534 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6818      	ldr	r0, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800452c:	461a      	mov	r2, r3
 800452e:	2101      	movs	r1, #1
 8004530:	f002 fc28 	bl	8006d84 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3718      	adds	r7, #24
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	4f54300a 	.word	0x4f54300a

08004544 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	460b      	mov	r3, r1
 800454e:	70fb      	strb	r3, [r7, #3]
 8004550:	4613      	mov	r3, r2
 8004552:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800455a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800455c:	78fb      	ldrb	r3, [r7, #3]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d107      	bne.n	8004572 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004562:	883b      	ldrh	r3, [r7, #0]
 8004564:	0419      	lsls	r1, r3, #16
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68ba      	ldr	r2, [r7, #8]
 800456c:	430a      	orrs	r2, r1
 800456e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004570:	e028      	b.n	80045c4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004578:	0c1b      	lsrs	r3, r3, #16
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	4413      	add	r3, r2
 800457e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004580:	2300      	movs	r3, #0
 8004582:	73fb      	strb	r3, [r7, #15]
 8004584:	e00d      	b.n	80045a2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	7bfb      	ldrb	r3, [r7, #15]
 800458c:	3340      	adds	r3, #64	@ 0x40
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	4413      	add	r3, r2
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	0c1b      	lsrs	r3, r3, #16
 8004596:	68ba      	ldr	r2, [r7, #8]
 8004598:	4413      	add	r3, r2
 800459a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800459c:	7bfb      	ldrb	r3, [r7, #15]
 800459e:	3301      	adds	r3, #1
 80045a0:	73fb      	strb	r3, [r7, #15]
 80045a2:	7bfa      	ldrb	r2, [r7, #15]
 80045a4:	78fb      	ldrb	r3, [r7, #3]
 80045a6:	3b01      	subs	r3, #1
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d3ec      	bcc.n	8004586 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80045ac:	883b      	ldrh	r3, [r7, #0]
 80045ae:	0418      	lsls	r0, r3, #16
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6819      	ldr	r1, [r3, #0]
 80045b4:	78fb      	ldrb	r3, [r7, #3]
 80045b6:	3b01      	subs	r3, #1
 80045b8:	68ba      	ldr	r2, [r7, #8]
 80045ba:	4302      	orrs	r2, r0
 80045bc:	3340      	adds	r3, #64	@ 0x40
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	440b      	add	r3, r1
 80045c2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3714      	adds	r7, #20
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr

080045d2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80045d2:	b480      	push	{r7}
 80045d4:	b083      	sub	sp, #12
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
 80045da:	460b      	mov	r3, r1
 80045dc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	887a      	ldrh	r2, [r7, #2]
 80045e4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	460b      	mov	r3, r1
 80045fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e267      	b.n	8004aee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b00      	cmp	r3, #0
 8004628:	d075      	beq.n	8004716 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800462a:	4b88      	ldr	r3, [pc, #544]	@ (800484c <HAL_RCC_OscConfig+0x240>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f003 030c 	and.w	r3, r3, #12
 8004632:	2b04      	cmp	r3, #4
 8004634:	d00c      	beq.n	8004650 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004636:	4b85      	ldr	r3, [pc, #532]	@ (800484c <HAL_RCC_OscConfig+0x240>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800463e:	2b08      	cmp	r3, #8
 8004640:	d112      	bne.n	8004668 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004642:	4b82      	ldr	r3, [pc, #520]	@ (800484c <HAL_RCC_OscConfig+0x240>)
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800464a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800464e:	d10b      	bne.n	8004668 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004650:	4b7e      	ldr	r3, [pc, #504]	@ (800484c <HAL_RCC_OscConfig+0x240>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d05b      	beq.n	8004714 <HAL_RCC_OscConfig+0x108>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d157      	bne.n	8004714 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e242      	b.n	8004aee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004670:	d106      	bne.n	8004680 <HAL_RCC_OscConfig+0x74>
 8004672:	4b76      	ldr	r3, [pc, #472]	@ (800484c <HAL_RCC_OscConfig+0x240>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a75      	ldr	r2, [pc, #468]	@ (800484c <HAL_RCC_OscConfig+0x240>)
 8004678:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800467c:	6013      	str	r3, [r2, #0]
 800467e:	e01d      	b.n	80046bc <HAL_RCC_OscConfig+0xb0>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004688:	d10c      	bne.n	80046a4 <HAL_RCC_OscConfig+0x98>
 800468a:	4b70      	ldr	r3, [pc, #448]	@ (800484c <HAL_RCC_OscConfig+0x240>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a6f      	ldr	r2, [pc, #444]	@ (800484c <HAL_RCC_OscConfig+0x240>)
 8004690:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004694:	6013      	str	r3, [r2, #0]
 8004696:	4b6d      	ldr	r3, [pc, #436]	@ (800484c <HAL_RCC_OscConfig+0x240>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a6c      	ldr	r2, [pc, #432]	@ (800484c <HAL_RCC_OscConfig+0x240>)
 800469c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046a0:	6013      	str	r3, [r2, #0]
 80046a2:	e00b      	b.n	80046bc <HAL_RCC_OscConfig+0xb0>
 80046a4:	4b69      	ldr	r3, [pc, #420]	@ (800484c <HAL_RCC_OscConfig+0x240>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a68      	ldr	r2, [pc, #416]	@ (800484c <HAL_RCC_OscConfig+0x240>)
 80046aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046ae:	6013      	str	r3, [r2, #0]
 80046b0:	4b66      	ldr	r3, [pc, #408]	@ (800484c <HAL_RCC_OscConfig+0x240>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a65      	ldr	r2, [pc, #404]	@ (800484c <HAL_RCC_OscConfig+0x240>)
 80046b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d013      	beq.n	80046ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c4:	f7fc fdaa 	bl	800121c <HAL_GetTick>
 80046c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ca:	e008      	b.n	80046de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046cc:	f7fc fda6 	bl	800121c <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b64      	cmp	r3, #100	@ 0x64
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e207      	b.n	8004aee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046de:	4b5b      	ldr	r3, [pc, #364]	@ (800484c <HAL_RCC_OscConfig+0x240>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d0f0      	beq.n	80046cc <HAL_RCC_OscConfig+0xc0>
 80046ea:	e014      	b.n	8004716 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ec:	f7fc fd96 	bl	800121c <HAL_GetTick>
 80046f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046f2:	e008      	b.n	8004706 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046f4:	f7fc fd92 	bl	800121c <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b64      	cmp	r3, #100	@ 0x64
 8004700:	d901      	bls.n	8004706 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e1f3      	b.n	8004aee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004706:	4b51      	ldr	r3, [pc, #324]	@ (800484c <HAL_RCC_OscConfig+0x240>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1f0      	bne.n	80046f4 <HAL_RCC_OscConfig+0xe8>
 8004712:	e000      	b.n	8004716 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004714:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d063      	beq.n	80047ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004722:	4b4a      	ldr	r3, [pc, #296]	@ (800484c <HAL_RCC_OscConfig+0x240>)
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f003 030c 	and.w	r3, r3, #12
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00b      	beq.n	8004746 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800472e:	4b47      	ldr	r3, [pc, #284]	@ (800484c <HAL_RCC_OscConfig+0x240>)
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004736:	2b08      	cmp	r3, #8
 8004738:	d11c      	bne.n	8004774 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800473a:	4b44      	ldr	r3, [pc, #272]	@ (800484c <HAL_RCC_OscConfig+0x240>)
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d116      	bne.n	8004774 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004746:	4b41      	ldr	r3, [pc, #260]	@ (800484c <HAL_RCC_OscConfig+0x240>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0302 	and.w	r3, r3, #2
 800474e:	2b00      	cmp	r3, #0
 8004750:	d005      	beq.n	800475e <HAL_RCC_OscConfig+0x152>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d001      	beq.n	800475e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e1c7      	b.n	8004aee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800475e:	4b3b      	ldr	r3, [pc, #236]	@ (800484c <HAL_RCC_OscConfig+0x240>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	00db      	lsls	r3, r3, #3
 800476c:	4937      	ldr	r1, [pc, #220]	@ (800484c <HAL_RCC_OscConfig+0x240>)
 800476e:	4313      	orrs	r3, r2
 8004770:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004772:	e03a      	b.n	80047ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d020      	beq.n	80047be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800477c:	4b34      	ldr	r3, [pc, #208]	@ (8004850 <HAL_RCC_OscConfig+0x244>)
 800477e:	2201      	movs	r2, #1
 8004780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004782:	f7fc fd4b 	bl	800121c <HAL_GetTick>
 8004786:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004788:	e008      	b.n	800479c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800478a:	f7fc fd47 	bl	800121c <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	2b02      	cmp	r3, #2
 8004796:	d901      	bls.n	800479c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e1a8      	b.n	8004aee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800479c:	4b2b      	ldr	r3, [pc, #172]	@ (800484c <HAL_RCC_OscConfig+0x240>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d0f0      	beq.n	800478a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047a8:	4b28      	ldr	r3, [pc, #160]	@ (800484c <HAL_RCC_OscConfig+0x240>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	00db      	lsls	r3, r3, #3
 80047b6:	4925      	ldr	r1, [pc, #148]	@ (800484c <HAL_RCC_OscConfig+0x240>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	600b      	str	r3, [r1, #0]
 80047bc:	e015      	b.n	80047ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047be:	4b24      	ldr	r3, [pc, #144]	@ (8004850 <HAL_RCC_OscConfig+0x244>)
 80047c0:	2200      	movs	r2, #0
 80047c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c4:	f7fc fd2a 	bl	800121c <HAL_GetTick>
 80047c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ca:	e008      	b.n	80047de <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047cc:	f7fc fd26 	bl	800121c <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d901      	bls.n	80047de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e187      	b.n	8004aee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047de:	4b1b      	ldr	r3, [pc, #108]	@ (800484c <HAL_RCC_OscConfig+0x240>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d1f0      	bne.n	80047cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0308 	and.w	r3, r3, #8
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d036      	beq.n	8004864 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d016      	beq.n	800482c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047fe:	4b15      	ldr	r3, [pc, #84]	@ (8004854 <HAL_RCC_OscConfig+0x248>)
 8004800:	2201      	movs	r2, #1
 8004802:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004804:	f7fc fd0a 	bl	800121c <HAL_GetTick>
 8004808:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800480a:	e008      	b.n	800481e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800480c:	f7fc fd06 	bl	800121c <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b02      	cmp	r3, #2
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e167      	b.n	8004aee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800481e:	4b0b      	ldr	r3, [pc, #44]	@ (800484c <HAL_RCC_OscConfig+0x240>)
 8004820:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d0f0      	beq.n	800480c <HAL_RCC_OscConfig+0x200>
 800482a:	e01b      	b.n	8004864 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800482c:	4b09      	ldr	r3, [pc, #36]	@ (8004854 <HAL_RCC_OscConfig+0x248>)
 800482e:	2200      	movs	r2, #0
 8004830:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004832:	f7fc fcf3 	bl	800121c <HAL_GetTick>
 8004836:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004838:	e00e      	b.n	8004858 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800483a:	f7fc fcef 	bl	800121c <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	2b02      	cmp	r3, #2
 8004846:	d907      	bls.n	8004858 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e150      	b.n	8004aee <HAL_RCC_OscConfig+0x4e2>
 800484c:	40023800 	.word	0x40023800
 8004850:	42470000 	.word	0x42470000
 8004854:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004858:	4b88      	ldr	r3, [pc, #544]	@ (8004a7c <HAL_RCC_OscConfig+0x470>)
 800485a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	2b00      	cmp	r3, #0
 8004862:	d1ea      	bne.n	800483a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0304 	and.w	r3, r3, #4
 800486c:	2b00      	cmp	r3, #0
 800486e:	f000 8097 	beq.w	80049a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004872:	2300      	movs	r3, #0
 8004874:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004876:	4b81      	ldr	r3, [pc, #516]	@ (8004a7c <HAL_RCC_OscConfig+0x470>)
 8004878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800487a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10f      	bne.n	80048a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004882:	2300      	movs	r3, #0
 8004884:	60bb      	str	r3, [r7, #8]
 8004886:	4b7d      	ldr	r3, [pc, #500]	@ (8004a7c <HAL_RCC_OscConfig+0x470>)
 8004888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488a:	4a7c      	ldr	r2, [pc, #496]	@ (8004a7c <HAL_RCC_OscConfig+0x470>)
 800488c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004890:	6413      	str	r3, [r2, #64]	@ 0x40
 8004892:	4b7a      	ldr	r3, [pc, #488]	@ (8004a7c <HAL_RCC_OscConfig+0x470>)
 8004894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004896:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800489a:	60bb      	str	r3, [r7, #8]
 800489c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800489e:	2301      	movs	r3, #1
 80048a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048a2:	4b77      	ldr	r3, [pc, #476]	@ (8004a80 <HAL_RCC_OscConfig+0x474>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d118      	bne.n	80048e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048ae:	4b74      	ldr	r3, [pc, #464]	@ (8004a80 <HAL_RCC_OscConfig+0x474>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a73      	ldr	r2, [pc, #460]	@ (8004a80 <HAL_RCC_OscConfig+0x474>)
 80048b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048ba:	f7fc fcaf 	bl	800121c <HAL_GetTick>
 80048be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048c0:	e008      	b.n	80048d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048c2:	f7fc fcab 	bl	800121c <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d901      	bls.n	80048d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e10c      	b.n	8004aee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048d4:	4b6a      	ldr	r3, [pc, #424]	@ (8004a80 <HAL_RCC_OscConfig+0x474>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d0f0      	beq.n	80048c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d106      	bne.n	80048f6 <HAL_RCC_OscConfig+0x2ea>
 80048e8:	4b64      	ldr	r3, [pc, #400]	@ (8004a7c <HAL_RCC_OscConfig+0x470>)
 80048ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ec:	4a63      	ldr	r2, [pc, #396]	@ (8004a7c <HAL_RCC_OscConfig+0x470>)
 80048ee:	f043 0301 	orr.w	r3, r3, #1
 80048f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80048f4:	e01c      	b.n	8004930 <HAL_RCC_OscConfig+0x324>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	2b05      	cmp	r3, #5
 80048fc:	d10c      	bne.n	8004918 <HAL_RCC_OscConfig+0x30c>
 80048fe:	4b5f      	ldr	r3, [pc, #380]	@ (8004a7c <HAL_RCC_OscConfig+0x470>)
 8004900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004902:	4a5e      	ldr	r2, [pc, #376]	@ (8004a7c <HAL_RCC_OscConfig+0x470>)
 8004904:	f043 0304 	orr.w	r3, r3, #4
 8004908:	6713      	str	r3, [r2, #112]	@ 0x70
 800490a:	4b5c      	ldr	r3, [pc, #368]	@ (8004a7c <HAL_RCC_OscConfig+0x470>)
 800490c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800490e:	4a5b      	ldr	r2, [pc, #364]	@ (8004a7c <HAL_RCC_OscConfig+0x470>)
 8004910:	f043 0301 	orr.w	r3, r3, #1
 8004914:	6713      	str	r3, [r2, #112]	@ 0x70
 8004916:	e00b      	b.n	8004930 <HAL_RCC_OscConfig+0x324>
 8004918:	4b58      	ldr	r3, [pc, #352]	@ (8004a7c <HAL_RCC_OscConfig+0x470>)
 800491a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800491c:	4a57      	ldr	r2, [pc, #348]	@ (8004a7c <HAL_RCC_OscConfig+0x470>)
 800491e:	f023 0301 	bic.w	r3, r3, #1
 8004922:	6713      	str	r3, [r2, #112]	@ 0x70
 8004924:	4b55      	ldr	r3, [pc, #340]	@ (8004a7c <HAL_RCC_OscConfig+0x470>)
 8004926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004928:	4a54      	ldr	r2, [pc, #336]	@ (8004a7c <HAL_RCC_OscConfig+0x470>)
 800492a:	f023 0304 	bic.w	r3, r3, #4
 800492e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d015      	beq.n	8004964 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004938:	f7fc fc70 	bl	800121c <HAL_GetTick>
 800493c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800493e:	e00a      	b.n	8004956 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004940:	f7fc fc6c 	bl	800121c <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800494e:	4293      	cmp	r3, r2
 8004950:	d901      	bls.n	8004956 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e0cb      	b.n	8004aee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004956:	4b49      	ldr	r3, [pc, #292]	@ (8004a7c <HAL_RCC_OscConfig+0x470>)
 8004958:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d0ee      	beq.n	8004940 <HAL_RCC_OscConfig+0x334>
 8004962:	e014      	b.n	800498e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004964:	f7fc fc5a 	bl	800121c <HAL_GetTick>
 8004968:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800496a:	e00a      	b.n	8004982 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800496c:	f7fc fc56 	bl	800121c <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	f241 3288 	movw	r2, #5000	@ 0x1388
 800497a:	4293      	cmp	r3, r2
 800497c:	d901      	bls.n	8004982 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e0b5      	b.n	8004aee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004982:	4b3e      	ldr	r3, [pc, #248]	@ (8004a7c <HAL_RCC_OscConfig+0x470>)
 8004984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1ee      	bne.n	800496c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800498e:	7dfb      	ldrb	r3, [r7, #23]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d105      	bne.n	80049a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004994:	4b39      	ldr	r3, [pc, #228]	@ (8004a7c <HAL_RCC_OscConfig+0x470>)
 8004996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004998:	4a38      	ldr	r2, [pc, #224]	@ (8004a7c <HAL_RCC_OscConfig+0x470>)
 800499a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800499e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f000 80a1 	beq.w	8004aec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049aa:	4b34      	ldr	r3, [pc, #208]	@ (8004a7c <HAL_RCC_OscConfig+0x470>)
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f003 030c 	and.w	r3, r3, #12
 80049b2:	2b08      	cmp	r3, #8
 80049b4:	d05c      	beq.n	8004a70 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d141      	bne.n	8004a42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049be:	4b31      	ldr	r3, [pc, #196]	@ (8004a84 <HAL_RCC_OscConfig+0x478>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c4:	f7fc fc2a 	bl	800121c <HAL_GetTick>
 80049c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ca:	e008      	b.n	80049de <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049cc:	f7fc fc26 	bl	800121c <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e087      	b.n	8004aee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049de:	4b27      	ldr	r3, [pc, #156]	@ (8004a7c <HAL_RCC_OscConfig+0x470>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1f0      	bne.n	80049cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	69da      	ldr	r2, [r3, #28]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	431a      	orrs	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f8:	019b      	lsls	r3, r3, #6
 80049fa:	431a      	orrs	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a00:	085b      	lsrs	r3, r3, #1
 8004a02:	3b01      	subs	r3, #1
 8004a04:	041b      	lsls	r3, r3, #16
 8004a06:	431a      	orrs	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a0c:	061b      	lsls	r3, r3, #24
 8004a0e:	491b      	ldr	r1, [pc, #108]	@ (8004a7c <HAL_RCC_OscConfig+0x470>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a14:	4b1b      	ldr	r3, [pc, #108]	@ (8004a84 <HAL_RCC_OscConfig+0x478>)
 8004a16:	2201      	movs	r2, #1
 8004a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a1a:	f7fc fbff 	bl	800121c <HAL_GetTick>
 8004a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a20:	e008      	b.n	8004a34 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a22:	f7fc fbfb 	bl	800121c <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d901      	bls.n	8004a34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e05c      	b.n	8004aee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a34:	4b11      	ldr	r3, [pc, #68]	@ (8004a7c <HAL_RCC_OscConfig+0x470>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d0f0      	beq.n	8004a22 <HAL_RCC_OscConfig+0x416>
 8004a40:	e054      	b.n	8004aec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a42:	4b10      	ldr	r3, [pc, #64]	@ (8004a84 <HAL_RCC_OscConfig+0x478>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a48:	f7fc fbe8 	bl	800121c <HAL_GetTick>
 8004a4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a4e:	e008      	b.n	8004a62 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a50:	f7fc fbe4 	bl	800121c <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e045      	b.n	8004aee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a62:	4b06      	ldr	r3, [pc, #24]	@ (8004a7c <HAL_RCC_OscConfig+0x470>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1f0      	bne.n	8004a50 <HAL_RCC_OscConfig+0x444>
 8004a6e:	e03d      	b.n	8004aec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d107      	bne.n	8004a88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e038      	b.n	8004aee <HAL_RCC_OscConfig+0x4e2>
 8004a7c:	40023800 	.word	0x40023800
 8004a80:	40007000 	.word	0x40007000
 8004a84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a88:	4b1b      	ldr	r3, [pc, #108]	@ (8004af8 <HAL_RCC_OscConfig+0x4ec>)
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d028      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d121      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d11a      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004ab8:	4013      	ands	r3, r2
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004abe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d111      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ace:	085b      	lsrs	r3, r3, #1
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d107      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ae2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d001      	beq.n	8004aec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e000      	b.n	8004aee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3718      	adds	r7, #24
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	40023800 	.word	0x40023800

08004afc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d101      	bne.n	8004b10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e0cc      	b.n	8004caa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b10:	4b68      	ldr	r3, [pc, #416]	@ (8004cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0307 	and.w	r3, r3, #7
 8004b18:	683a      	ldr	r2, [r7, #0]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d90c      	bls.n	8004b38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b1e:	4b65      	ldr	r3, [pc, #404]	@ (8004cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b20:	683a      	ldr	r2, [r7, #0]
 8004b22:	b2d2      	uxtb	r2, r2
 8004b24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b26:	4b63      	ldr	r3, [pc, #396]	@ (8004cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0307 	and.w	r3, r3, #7
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d001      	beq.n	8004b38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e0b8      	b.n	8004caa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0302 	and.w	r3, r3, #2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d020      	beq.n	8004b86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0304 	and.w	r3, r3, #4
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d005      	beq.n	8004b5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b50:	4b59      	ldr	r3, [pc, #356]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	4a58      	ldr	r2, [pc, #352]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b56:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004b5a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0308 	and.w	r3, r3, #8
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d005      	beq.n	8004b74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b68:	4b53      	ldr	r3, [pc, #332]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	4a52      	ldr	r2, [pc, #328]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004b72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b74:	4b50      	ldr	r3, [pc, #320]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	494d      	ldr	r1, [pc, #308]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d044      	beq.n	8004c1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d107      	bne.n	8004baa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b9a:	4b47      	ldr	r3, [pc, #284]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d119      	bne.n	8004bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e07f      	b.n	8004caa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d003      	beq.n	8004bba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bb6:	2b03      	cmp	r3, #3
 8004bb8:	d107      	bne.n	8004bca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bba:	4b3f      	ldr	r3, [pc, #252]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d109      	bne.n	8004bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e06f      	b.n	8004caa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bca:	4b3b      	ldr	r3, [pc, #236]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d101      	bne.n	8004bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e067      	b.n	8004caa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bda:	4b37      	ldr	r3, [pc, #220]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f023 0203 	bic.w	r2, r3, #3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	4934      	ldr	r1, [pc, #208]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bec:	f7fc fb16 	bl	800121c <HAL_GetTick>
 8004bf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bf2:	e00a      	b.n	8004c0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bf4:	f7fc fb12 	bl	800121c <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e04f      	b.n	8004caa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c0a:	4b2b      	ldr	r3, [pc, #172]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f003 020c 	and.w	r2, r3, #12
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d1eb      	bne.n	8004bf4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c1c:	4b25      	ldr	r3, [pc, #148]	@ (8004cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0307 	and.w	r3, r3, #7
 8004c24:	683a      	ldr	r2, [r7, #0]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d20c      	bcs.n	8004c44 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c2a:	4b22      	ldr	r3, [pc, #136]	@ (8004cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c2c:	683a      	ldr	r2, [r7, #0]
 8004c2e:	b2d2      	uxtb	r2, r2
 8004c30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c32:	4b20      	ldr	r3, [pc, #128]	@ (8004cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0307 	and.w	r3, r3, #7
 8004c3a:	683a      	ldr	r2, [r7, #0]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d001      	beq.n	8004c44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e032      	b.n	8004caa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0304 	and.w	r3, r3, #4
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d008      	beq.n	8004c62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c50:	4b19      	ldr	r3, [pc, #100]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	4916      	ldr	r1, [pc, #88]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0308 	and.w	r3, r3, #8
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d009      	beq.n	8004c82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c6e:	4b12      	ldr	r3, [pc, #72]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	00db      	lsls	r3, r3, #3
 8004c7c:	490e      	ldr	r1, [pc, #56]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c82:	f000 f821 	bl	8004cc8 <HAL_RCC_GetSysClockFreq>
 8004c86:	4602      	mov	r2, r0
 8004c88:	4b0b      	ldr	r3, [pc, #44]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	091b      	lsrs	r3, r3, #4
 8004c8e:	f003 030f 	and.w	r3, r3, #15
 8004c92:	490a      	ldr	r1, [pc, #40]	@ (8004cbc <HAL_RCC_ClockConfig+0x1c0>)
 8004c94:	5ccb      	ldrb	r3, [r1, r3]
 8004c96:	fa22 f303 	lsr.w	r3, r2, r3
 8004c9a:	4a09      	ldr	r2, [pc, #36]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004c9e:	4b09      	ldr	r3, [pc, #36]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7fc f99c 	bl	8000fe0 <HAL_InitTick>

  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	40023c00 	.word	0x40023c00
 8004cb8:	40023800 	.word	0x40023800
 8004cbc:	0800c7ac 	.word	0x0800c7ac
 8004cc0:	20000000 	.word	0x20000000
 8004cc4:	20000004 	.word	0x20000004

08004cc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ccc:	b094      	sub	sp, #80	@ 0x50
 8004cce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ce0:	4b79      	ldr	r3, [pc, #484]	@ (8004ec8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f003 030c 	and.w	r3, r3, #12
 8004ce8:	2b08      	cmp	r3, #8
 8004cea:	d00d      	beq.n	8004d08 <HAL_RCC_GetSysClockFreq+0x40>
 8004cec:	2b08      	cmp	r3, #8
 8004cee:	f200 80e1 	bhi.w	8004eb4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d002      	beq.n	8004cfc <HAL_RCC_GetSysClockFreq+0x34>
 8004cf6:	2b04      	cmp	r3, #4
 8004cf8:	d003      	beq.n	8004d02 <HAL_RCC_GetSysClockFreq+0x3a>
 8004cfa:	e0db      	b.n	8004eb4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004cfc:	4b73      	ldr	r3, [pc, #460]	@ (8004ecc <HAL_RCC_GetSysClockFreq+0x204>)
 8004cfe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d00:	e0db      	b.n	8004eba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d02:	4b73      	ldr	r3, [pc, #460]	@ (8004ed0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004d04:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d06:	e0d8      	b.n	8004eba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d08:	4b6f      	ldr	r3, [pc, #444]	@ (8004ec8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d10:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d12:	4b6d      	ldr	r3, [pc, #436]	@ (8004ec8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d063      	beq.n	8004de6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d1e:	4b6a      	ldr	r3, [pc, #424]	@ (8004ec8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	099b      	lsrs	r3, r3, #6
 8004d24:	2200      	movs	r2, #0
 8004d26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d28:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d30:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d32:	2300      	movs	r3, #0
 8004d34:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d36:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004d3a:	4622      	mov	r2, r4
 8004d3c:	462b      	mov	r3, r5
 8004d3e:	f04f 0000 	mov.w	r0, #0
 8004d42:	f04f 0100 	mov.w	r1, #0
 8004d46:	0159      	lsls	r1, r3, #5
 8004d48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d4c:	0150      	lsls	r0, r2, #5
 8004d4e:	4602      	mov	r2, r0
 8004d50:	460b      	mov	r3, r1
 8004d52:	4621      	mov	r1, r4
 8004d54:	1a51      	subs	r1, r2, r1
 8004d56:	6139      	str	r1, [r7, #16]
 8004d58:	4629      	mov	r1, r5
 8004d5a:	eb63 0301 	sbc.w	r3, r3, r1
 8004d5e:	617b      	str	r3, [r7, #20]
 8004d60:	f04f 0200 	mov.w	r2, #0
 8004d64:	f04f 0300 	mov.w	r3, #0
 8004d68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d6c:	4659      	mov	r1, fp
 8004d6e:	018b      	lsls	r3, r1, #6
 8004d70:	4651      	mov	r1, sl
 8004d72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d76:	4651      	mov	r1, sl
 8004d78:	018a      	lsls	r2, r1, #6
 8004d7a:	4651      	mov	r1, sl
 8004d7c:	ebb2 0801 	subs.w	r8, r2, r1
 8004d80:	4659      	mov	r1, fp
 8004d82:	eb63 0901 	sbc.w	r9, r3, r1
 8004d86:	f04f 0200 	mov.w	r2, #0
 8004d8a:	f04f 0300 	mov.w	r3, #0
 8004d8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d9a:	4690      	mov	r8, r2
 8004d9c:	4699      	mov	r9, r3
 8004d9e:	4623      	mov	r3, r4
 8004da0:	eb18 0303 	adds.w	r3, r8, r3
 8004da4:	60bb      	str	r3, [r7, #8]
 8004da6:	462b      	mov	r3, r5
 8004da8:	eb49 0303 	adc.w	r3, r9, r3
 8004dac:	60fb      	str	r3, [r7, #12]
 8004dae:	f04f 0200 	mov.w	r2, #0
 8004db2:	f04f 0300 	mov.w	r3, #0
 8004db6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004dba:	4629      	mov	r1, r5
 8004dbc:	024b      	lsls	r3, r1, #9
 8004dbe:	4621      	mov	r1, r4
 8004dc0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004dc4:	4621      	mov	r1, r4
 8004dc6:	024a      	lsls	r2, r1, #9
 8004dc8:	4610      	mov	r0, r2
 8004dca:	4619      	mov	r1, r3
 8004dcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004dce:	2200      	movs	r2, #0
 8004dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004dd4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004dd8:	f7fb fa02 	bl	80001e0 <__aeabi_uldivmod>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	460b      	mov	r3, r1
 8004de0:	4613      	mov	r3, r2
 8004de2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004de4:	e058      	b.n	8004e98 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004de6:	4b38      	ldr	r3, [pc, #224]	@ (8004ec8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	099b      	lsrs	r3, r3, #6
 8004dec:	2200      	movs	r2, #0
 8004dee:	4618      	mov	r0, r3
 8004df0:	4611      	mov	r1, r2
 8004df2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004df6:	623b      	str	r3, [r7, #32]
 8004df8:	2300      	movs	r3, #0
 8004dfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dfc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e00:	4642      	mov	r2, r8
 8004e02:	464b      	mov	r3, r9
 8004e04:	f04f 0000 	mov.w	r0, #0
 8004e08:	f04f 0100 	mov.w	r1, #0
 8004e0c:	0159      	lsls	r1, r3, #5
 8004e0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e12:	0150      	lsls	r0, r2, #5
 8004e14:	4602      	mov	r2, r0
 8004e16:	460b      	mov	r3, r1
 8004e18:	4641      	mov	r1, r8
 8004e1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e1e:	4649      	mov	r1, r9
 8004e20:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e24:	f04f 0200 	mov.w	r2, #0
 8004e28:	f04f 0300 	mov.w	r3, #0
 8004e2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e38:	ebb2 040a 	subs.w	r4, r2, sl
 8004e3c:	eb63 050b 	sbc.w	r5, r3, fp
 8004e40:	f04f 0200 	mov.w	r2, #0
 8004e44:	f04f 0300 	mov.w	r3, #0
 8004e48:	00eb      	lsls	r3, r5, #3
 8004e4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e4e:	00e2      	lsls	r2, r4, #3
 8004e50:	4614      	mov	r4, r2
 8004e52:	461d      	mov	r5, r3
 8004e54:	4643      	mov	r3, r8
 8004e56:	18e3      	adds	r3, r4, r3
 8004e58:	603b      	str	r3, [r7, #0]
 8004e5a:	464b      	mov	r3, r9
 8004e5c:	eb45 0303 	adc.w	r3, r5, r3
 8004e60:	607b      	str	r3, [r7, #4]
 8004e62:	f04f 0200 	mov.w	r2, #0
 8004e66:	f04f 0300 	mov.w	r3, #0
 8004e6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e6e:	4629      	mov	r1, r5
 8004e70:	028b      	lsls	r3, r1, #10
 8004e72:	4621      	mov	r1, r4
 8004e74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e78:	4621      	mov	r1, r4
 8004e7a:	028a      	lsls	r2, r1, #10
 8004e7c:	4610      	mov	r0, r2
 8004e7e:	4619      	mov	r1, r3
 8004e80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e82:	2200      	movs	r2, #0
 8004e84:	61bb      	str	r3, [r7, #24]
 8004e86:	61fa      	str	r2, [r7, #28]
 8004e88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e8c:	f7fb f9a8 	bl	80001e0 <__aeabi_uldivmod>
 8004e90:	4602      	mov	r2, r0
 8004e92:	460b      	mov	r3, r1
 8004e94:	4613      	mov	r3, r2
 8004e96:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004e98:	4b0b      	ldr	r3, [pc, #44]	@ (8004ec8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	0c1b      	lsrs	r3, r3, #16
 8004e9e:	f003 0303 	and.w	r3, r3, #3
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	005b      	lsls	r3, r3, #1
 8004ea6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004ea8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004eaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004eb2:	e002      	b.n	8004eba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004eb4:	4b05      	ldr	r3, [pc, #20]	@ (8004ecc <HAL_RCC_GetSysClockFreq+0x204>)
 8004eb6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004eb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004eba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3750      	adds	r7, #80	@ 0x50
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ec6:	bf00      	nop
 8004ec8:	40023800 	.word	0x40023800
 8004ecc:	00f42400 	.word	0x00f42400
 8004ed0:	007a1200 	.word	0x007a1200

08004ed4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ed8:	4b03      	ldr	r3, [pc, #12]	@ (8004ee8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004eda:	681b      	ldr	r3, [r3, #0]
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	20000000 	.word	0x20000000

08004eec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ef0:	f7ff fff0 	bl	8004ed4 <HAL_RCC_GetHCLKFreq>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	4b05      	ldr	r3, [pc, #20]	@ (8004f0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	0a9b      	lsrs	r3, r3, #10
 8004efc:	f003 0307 	and.w	r3, r3, #7
 8004f00:	4903      	ldr	r1, [pc, #12]	@ (8004f10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f02:	5ccb      	ldrb	r3, [r1, r3]
 8004f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	40023800 	.word	0x40023800
 8004f10:	0800c7bc 	.word	0x0800c7bc

08004f14 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	220f      	movs	r2, #15
 8004f22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004f24:	4b12      	ldr	r3, [pc, #72]	@ (8004f70 <HAL_RCC_GetClockConfig+0x5c>)
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f003 0203 	and.w	r2, r3, #3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004f30:	4b0f      	ldr	r3, [pc, #60]	@ (8004f70 <HAL_RCC_GetClockConfig+0x5c>)
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8004f70 <HAL_RCC_GetClockConfig+0x5c>)
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004f48:	4b09      	ldr	r3, [pc, #36]	@ (8004f70 <HAL_RCC_GetClockConfig+0x5c>)
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	08db      	lsrs	r3, r3, #3
 8004f4e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004f56:	4b07      	ldr	r3, [pc, #28]	@ (8004f74 <HAL_RCC_GetClockConfig+0x60>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0207 	and.w	r2, r3, #7
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	601a      	str	r2, [r3, #0]
}
 8004f62:	bf00      	nop
 8004f64:	370c      	adds	r7, #12
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	40023800 	.word	0x40023800
 8004f74:	40023c00 	.word	0x40023c00

08004f78 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f80:	2300      	movs	r3, #0
 8004f82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004f84:	2300      	movs	r3, #0
 8004f86:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d105      	bne.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d038      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004fa0:	4b68      	ldr	r3, [pc, #416]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fa6:	f7fc f939 	bl	800121c <HAL_GetTick>
 8004faa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fac:	e008      	b.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004fae:	f7fc f935 	bl	800121c <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d901      	bls.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e0bd      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fc0:	4b61      	ldr	r3, [pc, #388]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1f0      	bne.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685a      	ldr	r2, [r3, #4]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	019b      	lsls	r3, r3, #6
 8004fd6:	431a      	orrs	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	071b      	lsls	r3, r3, #28
 8004fde:	495a      	ldr	r1, [pc, #360]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004fe6:	4b57      	ldr	r3, [pc, #348]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004fe8:	2201      	movs	r2, #1
 8004fea:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fec:	f7fc f916 	bl	800121c <HAL_GetTick>
 8004ff0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ff2:	e008      	b.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ff4:	f7fc f912 	bl	800121c <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d901      	bls.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e09a      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005006:	4b50      	ldr	r3, [pc, #320]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d0f0      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0302 	and.w	r3, r3, #2
 800501a:	2b00      	cmp	r3, #0
 800501c:	f000 8083 	beq.w	8005126 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005020:	2300      	movs	r3, #0
 8005022:	60fb      	str	r3, [r7, #12]
 8005024:	4b48      	ldr	r3, [pc, #288]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005028:	4a47      	ldr	r2, [pc, #284]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800502a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800502e:	6413      	str	r3, [r2, #64]	@ 0x40
 8005030:	4b45      	ldr	r3, [pc, #276]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005034:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005038:	60fb      	str	r3, [r7, #12]
 800503a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800503c:	4b43      	ldr	r3, [pc, #268]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a42      	ldr	r2, [pc, #264]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005042:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005046:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005048:	f7fc f8e8 	bl	800121c <HAL_GetTick>
 800504c:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800504e:	e008      	b.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005050:	f7fc f8e4 	bl	800121c <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	2b02      	cmp	r3, #2
 800505c:	d901      	bls.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e06c      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005062:	4b3a      	ldr	r3, [pc, #232]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800506a:	2b00      	cmp	r3, #0
 800506c:	d0f0      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800506e:	4b36      	ldr	r3, [pc, #216]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005072:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005076:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d02f      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x166>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	429a      	cmp	r2, r3
 800508a:	d028      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800508c:	4b2e      	ldr	r3, [pc, #184]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800508e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005090:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005094:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005096:	4b2e      	ldr	r3, [pc, #184]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005098:	2201      	movs	r2, #1
 800509a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800509c:	4b2c      	ldr	r3, [pc, #176]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800509e:	2200      	movs	r2, #0
 80050a0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80050a2:	4a29      	ldr	r2, [pc, #164]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80050a8:	4b27      	ldr	r3, [pc, #156]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ac:	f003 0301 	and.w	r3, r3, #1
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d114      	bne.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80050b4:	f7fc f8b2 	bl	800121c <HAL_GetTick>
 80050b8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050ba:	e00a      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050bc:	f7fc f8ae 	bl	800121c <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d901      	bls.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e034      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050d2:	4b1d      	ldr	r3, [pc, #116]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d0ee      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050ea:	d10d      	bne.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80050ec:	4b16      	ldr	r3, [pc, #88]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80050fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005100:	4911      	ldr	r1, [pc, #68]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005102:	4313      	orrs	r3, r2
 8005104:	608b      	str	r3, [r1, #8]
 8005106:	e005      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005108:	4b0f      	ldr	r3, [pc, #60]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	4a0e      	ldr	r2, [pc, #56]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800510e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005112:	6093      	str	r3, [r2, #8]
 8005114:	4b0c      	ldr	r3, [pc, #48]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005116:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005120:	4909      	ldr	r1, [pc, #36]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005122:	4313      	orrs	r3, r2
 8005124:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0308 	and.w	r3, r3, #8
 800512e:	2b00      	cmp	r3, #0
 8005130:	d003      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	7d1a      	ldrb	r2, [r3, #20]
 8005136:	4b07      	ldr	r3, [pc, #28]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005138:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3718      	adds	r7, #24
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	42470068 	.word	0x42470068
 8005148:	40023800 	.word	0x40023800
 800514c:	40007000 	.word	0x40007000
 8005150:	42470e40 	.word	0x42470e40
 8005154:	424711e0 	.word	0x424711e0

08005158 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005158:	b480      	push	{r7}
 800515a:	b087      	sub	sp, #28
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005160:	2300      	movs	r3, #0
 8005162:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005164:	2300      	movs	r3, #0
 8005166:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005168:	2300      	movs	r3, #0
 800516a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800516c:	2300      	movs	r3, #0
 800516e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2b01      	cmp	r3, #1
 8005174:	d141      	bne.n	80051fa <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005176:	4b25      	ldr	r3, [pc, #148]	@ (800520c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800517e:	60fb      	str	r3, [r7, #12]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d006      	beq.n	8005194 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800518c:	d131      	bne.n	80051f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800518e:	4b20      	ldr	r3, [pc, #128]	@ (8005210 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005190:	617b      	str	r3, [r7, #20]
          break;
 8005192:	e031      	b.n	80051f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005194:	4b1d      	ldr	r3, [pc, #116]	@ (800520c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800519c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80051a0:	d109      	bne.n	80051b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80051a2:	4b1a      	ldr	r3, [pc, #104]	@ (800520c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80051a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051ac:	4a19      	ldr	r2, [pc, #100]	@ (8005214 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80051ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b2:	613b      	str	r3, [r7, #16]
 80051b4:	e008      	b.n	80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80051b6:	4b15      	ldr	r3, [pc, #84]	@ (800520c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80051b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051c0:	4a15      	ldr	r2, [pc, #84]	@ (8005218 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 80051c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c6:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80051c8:	4b10      	ldr	r3, [pc, #64]	@ (800520c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80051ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051ce:	099b      	lsrs	r3, r3, #6
 80051d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	fb02 f303 	mul.w	r3, r2, r3
 80051da:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80051dc:	4b0b      	ldr	r3, [pc, #44]	@ (800520c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80051de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051e2:	0f1b      	lsrs	r3, r3, #28
 80051e4:	f003 0307 	and.w	r3, r3, #7
 80051e8:	68ba      	ldr	r2, [r7, #8]
 80051ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ee:	617b      	str	r3, [r7, #20]
          break;
 80051f0:	e002      	b.n	80051f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80051f2:	2300      	movs	r3, #0
 80051f4:	617b      	str	r3, [r7, #20]
          break;
 80051f6:	bf00      	nop
        }
      }
      break;
 80051f8:	e000      	b.n	80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 80051fa:	bf00      	nop
    }
  }
  return frequency;
 80051fc:	697b      	ldr	r3, [r7, #20]
}
 80051fe:	4618      	mov	r0, r3
 8005200:	371c      	adds	r7, #28
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	40023800 	.word	0x40023800
 8005210:	00bb8000 	.word	0x00bb8000
 8005214:	007a1200 	.word	0x007a1200
 8005218:	00f42400 	.word	0x00f42400

0800521c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d101      	bne.n	800522e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e07b      	b.n	8005326 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005232:	2b00      	cmp	r3, #0
 8005234:	d108      	bne.n	8005248 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800523e:	d009      	beq.n	8005254 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	61da      	str	r2, [r3, #28]
 8005246:	e005      	b.n	8005254 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005260:	b2db      	uxtb	r3, r3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d106      	bne.n	8005274 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f7fb fe6e 	bl	8000f50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2202      	movs	r2, #2
 8005278:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800528a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800529c:	431a      	orrs	r2, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052a6:	431a      	orrs	r2, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	f003 0302 	and.w	r3, r3, #2
 80052b0:	431a      	orrs	r2, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	f003 0301 	and.w	r3, r3, #1
 80052ba:	431a      	orrs	r2, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052c4:	431a      	orrs	r2, r3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	69db      	ldr	r3, [r3, #28]
 80052ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052ce:	431a      	orrs	r2, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a1b      	ldr	r3, [r3, #32]
 80052d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052d8:	ea42 0103 	orr.w	r1, r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	430a      	orrs	r2, r1
 80052ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	699b      	ldr	r3, [r3, #24]
 80052f0:	0c1b      	lsrs	r3, r3, #16
 80052f2:	f003 0104 	and.w	r1, r3, #4
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052fa:	f003 0210 	and.w	r2, r3, #16
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	430a      	orrs	r2, r1
 8005304:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	69da      	ldr	r2, [r3, #28]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005314:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3708      	adds	r7, #8
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800532e:	b580      	push	{r7, lr}
 8005330:	b082      	sub	sp, #8
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d101      	bne.n	8005340 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e041      	b.n	80053c4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005346:	b2db      	uxtb	r3, r3
 8005348:	2b00      	cmp	r3, #0
 800534a:	d106      	bne.n	800535a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 f839 	bl	80053cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2202      	movs	r2, #2
 800535e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	3304      	adds	r3, #4
 800536a:	4619      	mov	r1, r3
 800536c:	4610      	mov	r0, r2
 800536e:	f000 f9b1 	bl	80056d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2201      	movs	r2, #1
 8005376:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2201      	movs	r2, #1
 800537e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2201      	movs	r2, #1
 8005386:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2201      	movs	r2, #1
 800538e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2201      	movs	r2, #1
 8005396:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2201      	movs	r2, #1
 800539e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3708      	adds	r7, #8
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d001      	beq.n	80053f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e044      	b.n	8005482 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2202      	movs	r2, #2
 80053fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68da      	ldr	r2, [r3, #12]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f042 0201 	orr.w	r2, r2, #1
 800540e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a1e      	ldr	r2, [pc, #120]	@ (8005490 <HAL_TIM_Base_Start_IT+0xb0>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d018      	beq.n	800544c <HAL_TIM_Base_Start_IT+0x6c>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005422:	d013      	beq.n	800544c <HAL_TIM_Base_Start_IT+0x6c>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a1a      	ldr	r2, [pc, #104]	@ (8005494 <HAL_TIM_Base_Start_IT+0xb4>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d00e      	beq.n	800544c <HAL_TIM_Base_Start_IT+0x6c>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a19      	ldr	r2, [pc, #100]	@ (8005498 <HAL_TIM_Base_Start_IT+0xb8>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d009      	beq.n	800544c <HAL_TIM_Base_Start_IT+0x6c>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a17      	ldr	r2, [pc, #92]	@ (800549c <HAL_TIM_Base_Start_IT+0xbc>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d004      	beq.n	800544c <HAL_TIM_Base_Start_IT+0x6c>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a16      	ldr	r2, [pc, #88]	@ (80054a0 <HAL_TIM_Base_Start_IT+0xc0>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d111      	bne.n	8005470 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f003 0307 	and.w	r3, r3, #7
 8005456:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2b06      	cmp	r3, #6
 800545c:	d010      	beq.n	8005480 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f042 0201 	orr.w	r2, r2, #1
 800546c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800546e:	e007      	b.n	8005480 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f042 0201 	orr.w	r2, r2, #1
 800547e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3714      	adds	r7, #20
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	40010000 	.word	0x40010000
 8005494:	40000400 	.word	0x40000400
 8005498:	40000800 	.word	0x40000800
 800549c:	40000c00 	.word	0x40000c00
 80054a0:	40014000 	.word	0x40014000

080054a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	f003 0302 	and.w	r3, r3, #2
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d020      	beq.n	8005508 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f003 0302 	and.w	r3, r3, #2
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d01b      	beq.n	8005508 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f06f 0202 	mvn.w	r2, #2
 80054d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2201      	movs	r2, #1
 80054de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	f003 0303 	and.w	r3, r3, #3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d003      	beq.n	80054f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 f8d2 	bl	8005698 <HAL_TIM_IC_CaptureCallback>
 80054f4:	e005      	b.n	8005502 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 f8c4 	bl	8005684 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 f8d5 	bl	80056ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	f003 0304 	and.w	r3, r3, #4
 800550e:	2b00      	cmp	r3, #0
 8005510:	d020      	beq.n	8005554 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f003 0304 	and.w	r3, r3, #4
 8005518:	2b00      	cmp	r3, #0
 800551a:	d01b      	beq.n	8005554 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f06f 0204 	mvn.w	r2, #4
 8005524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2202      	movs	r2, #2
 800552a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005536:	2b00      	cmp	r3, #0
 8005538:	d003      	beq.n	8005542 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 f8ac 	bl	8005698 <HAL_TIM_IC_CaptureCallback>
 8005540:	e005      	b.n	800554e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 f89e 	bl	8005684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 f8af 	bl	80056ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	f003 0308 	and.w	r3, r3, #8
 800555a:	2b00      	cmp	r3, #0
 800555c:	d020      	beq.n	80055a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f003 0308 	and.w	r3, r3, #8
 8005564:	2b00      	cmp	r3, #0
 8005566:	d01b      	beq.n	80055a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f06f 0208 	mvn.w	r2, #8
 8005570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2204      	movs	r2, #4
 8005576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	69db      	ldr	r3, [r3, #28]
 800557e:	f003 0303 	and.w	r3, r3, #3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d003      	beq.n	800558e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 f886 	bl	8005698 <HAL_TIM_IC_CaptureCallback>
 800558c:	e005      	b.n	800559a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f878 	bl	8005684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 f889 	bl	80056ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	f003 0310 	and.w	r3, r3, #16
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d020      	beq.n	80055ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f003 0310 	and.w	r3, r3, #16
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d01b      	beq.n	80055ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f06f 0210 	mvn.w	r2, #16
 80055bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2208      	movs	r2, #8
 80055c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	69db      	ldr	r3, [r3, #28]
 80055ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d003      	beq.n	80055da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f860 	bl	8005698 <HAL_TIM_IC_CaptureCallback>
 80055d8:	e005      	b.n	80055e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 f852 	bl	8005684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 f863 	bl	80056ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00c      	beq.n	8005610 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f003 0301 	and.w	r3, r3, #1
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d007      	beq.n	8005610 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f06f 0201 	mvn.w	r2, #1
 8005608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f7fb fb48 	bl	8000ca0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00c      	beq.n	8005634 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005620:	2b00      	cmp	r3, #0
 8005622:	d007      	beq.n	8005634 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800562c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 f8e6 	bl	8005800 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00c      	beq.n	8005658 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005644:	2b00      	cmp	r3, #0
 8005646:	d007      	beq.n	8005658 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f834 	bl	80056c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	f003 0320 	and.w	r3, r3, #32
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00c      	beq.n	800567c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f003 0320 	and.w	r3, r3, #32
 8005668:	2b00      	cmp	r3, #0
 800566a:	d007      	beq.n	800567c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f06f 0220 	mvn.w	r2, #32
 8005674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f8b8 	bl	80057ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800567c:	bf00      	nop
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800568c:	bf00      	nop
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056a0:	bf00      	nop
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a3a      	ldr	r2, [pc, #232]	@ (80057d0 <TIM_Base_SetConfig+0xfc>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d00f      	beq.n	800570c <TIM_Base_SetConfig+0x38>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056f2:	d00b      	beq.n	800570c <TIM_Base_SetConfig+0x38>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a37      	ldr	r2, [pc, #220]	@ (80057d4 <TIM_Base_SetConfig+0x100>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d007      	beq.n	800570c <TIM_Base_SetConfig+0x38>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a36      	ldr	r2, [pc, #216]	@ (80057d8 <TIM_Base_SetConfig+0x104>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d003      	beq.n	800570c <TIM_Base_SetConfig+0x38>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a35      	ldr	r2, [pc, #212]	@ (80057dc <TIM_Base_SetConfig+0x108>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d108      	bne.n	800571e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005712:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	4313      	orrs	r3, r2
 800571c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a2b      	ldr	r2, [pc, #172]	@ (80057d0 <TIM_Base_SetConfig+0xfc>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d01b      	beq.n	800575e <TIM_Base_SetConfig+0x8a>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800572c:	d017      	beq.n	800575e <TIM_Base_SetConfig+0x8a>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a28      	ldr	r2, [pc, #160]	@ (80057d4 <TIM_Base_SetConfig+0x100>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d013      	beq.n	800575e <TIM_Base_SetConfig+0x8a>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a27      	ldr	r2, [pc, #156]	@ (80057d8 <TIM_Base_SetConfig+0x104>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d00f      	beq.n	800575e <TIM_Base_SetConfig+0x8a>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a26      	ldr	r2, [pc, #152]	@ (80057dc <TIM_Base_SetConfig+0x108>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d00b      	beq.n	800575e <TIM_Base_SetConfig+0x8a>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a25      	ldr	r2, [pc, #148]	@ (80057e0 <TIM_Base_SetConfig+0x10c>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d007      	beq.n	800575e <TIM_Base_SetConfig+0x8a>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a24      	ldr	r2, [pc, #144]	@ (80057e4 <TIM_Base_SetConfig+0x110>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d003      	beq.n	800575e <TIM_Base_SetConfig+0x8a>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a23      	ldr	r2, [pc, #140]	@ (80057e8 <TIM_Base_SetConfig+0x114>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d108      	bne.n	8005770 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005764:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	4313      	orrs	r3, r2
 800576e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	4313      	orrs	r3, r2
 800577c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	689a      	ldr	r2, [r3, #8]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a0e      	ldr	r2, [pc, #56]	@ (80057d0 <TIM_Base_SetConfig+0xfc>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d103      	bne.n	80057a4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	691a      	ldr	r2, [r3, #16]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	f003 0301 	and.w	r3, r3, #1
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d105      	bne.n	80057c2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	f023 0201 	bic.w	r2, r3, #1
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	611a      	str	r2, [r3, #16]
  }
}
 80057c2:	bf00      	nop
 80057c4:	3714      	adds	r7, #20
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	40010000 	.word	0x40010000
 80057d4:	40000400 	.word	0x40000400
 80057d8:	40000800 	.word	0x40000800
 80057dc:	40000c00 	.word	0x40000c00
 80057e0:	40014000 	.word	0x40014000
 80057e4:	40014400 	.word	0x40014400
 80057e8:	40014800 	.word	0x40014800

080057ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057f4:	bf00      	nop
 80057f6:	370c      	adds	r7, #12
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005808:	bf00      	nop
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005814:	b084      	sub	sp, #16
 8005816:	b580      	push	{r7, lr}
 8005818:	b084      	sub	sp, #16
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
 800581e:	f107 001c 	add.w	r0, r7, #28
 8005822:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005826:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800582a:	2b01      	cmp	r3, #1
 800582c:	d123      	bne.n	8005876 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005832:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005842:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005856:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800585a:	2b01      	cmp	r3, #1
 800585c:	d105      	bne.n	800586a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f001 fae8 	bl	8006e40 <USB_CoreReset>
 8005870:	4603      	mov	r3, r0
 8005872:	73fb      	strb	r3, [r7, #15]
 8005874:	e01b      	b.n	80058ae <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f001 fadc 	bl	8006e40 <USB_CoreReset>
 8005888:	4603      	mov	r3, r0
 800588a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800588c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005890:	2b00      	cmp	r3, #0
 8005892:	d106      	bne.n	80058a2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005898:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	639a      	str	r2, [r3, #56]	@ 0x38
 80058a0:	e005      	b.n	80058ae <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058a6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80058ae:	7fbb      	ldrb	r3, [r7, #30]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d10b      	bne.n	80058cc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f043 0206 	orr.w	r2, r3, #6
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	f043 0220 	orr.w	r2, r3, #32
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80058cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3710      	adds	r7, #16
 80058d2:	46bd      	mov	sp, r7
 80058d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058d8:	b004      	add	sp, #16
 80058da:	4770      	bx	lr

080058dc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80058dc:	b480      	push	{r7}
 80058de:	b087      	sub	sp, #28
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	4613      	mov	r3, r2
 80058e8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80058ea:	79fb      	ldrb	r3, [r7, #7]
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d165      	bne.n	80059bc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	4a41      	ldr	r2, [pc, #260]	@ (80059f8 <USB_SetTurnaroundTime+0x11c>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d906      	bls.n	8005906 <USB_SetTurnaroundTime+0x2a>
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	4a40      	ldr	r2, [pc, #256]	@ (80059fc <USB_SetTurnaroundTime+0x120>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d202      	bcs.n	8005906 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005900:	230f      	movs	r3, #15
 8005902:	617b      	str	r3, [r7, #20]
 8005904:	e062      	b.n	80059cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	4a3c      	ldr	r2, [pc, #240]	@ (80059fc <USB_SetTurnaroundTime+0x120>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d306      	bcc.n	800591c <USB_SetTurnaroundTime+0x40>
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	4a3b      	ldr	r2, [pc, #236]	@ (8005a00 <USB_SetTurnaroundTime+0x124>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d202      	bcs.n	800591c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005916:	230e      	movs	r3, #14
 8005918:	617b      	str	r3, [r7, #20]
 800591a:	e057      	b.n	80059cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	4a38      	ldr	r2, [pc, #224]	@ (8005a00 <USB_SetTurnaroundTime+0x124>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d306      	bcc.n	8005932 <USB_SetTurnaroundTime+0x56>
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	4a37      	ldr	r2, [pc, #220]	@ (8005a04 <USB_SetTurnaroundTime+0x128>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d202      	bcs.n	8005932 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800592c:	230d      	movs	r3, #13
 800592e:	617b      	str	r3, [r7, #20]
 8005930:	e04c      	b.n	80059cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	4a33      	ldr	r2, [pc, #204]	@ (8005a04 <USB_SetTurnaroundTime+0x128>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d306      	bcc.n	8005948 <USB_SetTurnaroundTime+0x6c>
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	4a32      	ldr	r2, [pc, #200]	@ (8005a08 <USB_SetTurnaroundTime+0x12c>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d802      	bhi.n	8005948 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005942:	230c      	movs	r3, #12
 8005944:	617b      	str	r3, [r7, #20]
 8005946:	e041      	b.n	80059cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	4a2f      	ldr	r2, [pc, #188]	@ (8005a08 <USB_SetTurnaroundTime+0x12c>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d906      	bls.n	800595e <USB_SetTurnaroundTime+0x82>
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	4a2e      	ldr	r2, [pc, #184]	@ (8005a0c <USB_SetTurnaroundTime+0x130>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d802      	bhi.n	800595e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005958:	230b      	movs	r3, #11
 800595a:	617b      	str	r3, [r7, #20]
 800595c:	e036      	b.n	80059cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	4a2a      	ldr	r2, [pc, #168]	@ (8005a0c <USB_SetTurnaroundTime+0x130>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d906      	bls.n	8005974 <USB_SetTurnaroundTime+0x98>
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	4a29      	ldr	r2, [pc, #164]	@ (8005a10 <USB_SetTurnaroundTime+0x134>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d802      	bhi.n	8005974 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800596e:	230a      	movs	r3, #10
 8005970:	617b      	str	r3, [r7, #20]
 8005972:	e02b      	b.n	80059cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	4a26      	ldr	r2, [pc, #152]	@ (8005a10 <USB_SetTurnaroundTime+0x134>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d906      	bls.n	800598a <USB_SetTurnaroundTime+0xae>
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	4a25      	ldr	r2, [pc, #148]	@ (8005a14 <USB_SetTurnaroundTime+0x138>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d202      	bcs.n	800598a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005984:	2309      	movs	r3, #9
 8005986:	617b      	str	r3, [r7, #20]
 8005988:	e020      	b.n	80059cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	4a21      	ldr	r2, [pc, #132]	@ (8005a14 <USB_SetTurnaroundTime+0x138>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d306      	bcc.n	80059a0 <USB_SetTurnaroundTime+0xc4>
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	4a20      	ldr	r2, [pc, #128]	@ (8005a18 <USB_SetTurnaroundTime+0x13c>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d802      	bhi.n	80059a0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800599a:	2308      	movs	r3, #8
 800599c:	617b      	str	r3, [r7, #20]
 800599e:	e015      	b.n	80059cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	4a1d      	ldr	r2, [pc, #116]	@ (8005a18 <USB_SetTurnaroundTime+0x13c>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d906      	bls.n	80059b6 <USB_SetTurnaroundTime+0xda>
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	4a1c      	ldr	r2, [pc, #112]	@ (8005a1c <USB_SetTurnaroundTime+0x140>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d202      	bcs.n	80059b6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80059b0:	2307      	movs	r3, #7
 80059b2:	617b      	str	r3, [r7, #20]
 80059b4:	e00a      	b.n	80059cc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80059b6:	2306      	movs	r3, #6
 80059b8:	617b      	str	r3, [r7, #20]
 80059ba:	e007      	b.n	80059cc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80059bc:	79fb      	ldrb	r3, [r7, #7]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d102      	bne.n	80059c8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80059c2:	2309      	movs	r3, #9
 80059c4:	617b      	str	r3, [r7, #20]
 80059c6:	e001      	b.n	80059cc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80059c8:	2309      	movs	r3, #9
 80059ca:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	68da      	ldr	r2, [r3, #12]
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	029b      	lsls	r3, r3, #10
 80059e0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80059e4:	431a      	orrs	r2, r3
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	371c      	adds	r7, #28
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr
 80059f8:	00d8acbf 	.word	0x00d8acbf
 80059fc:	00e4e1c0 	.word	0x00e4e1c0
 8005a00:	00f42400 	.word	0x00f42400
 8005a04:	01067380 	.word	0x01067380
 8005a08:	011a499f 	.word	0x011a499f
 8005a0c:	01312cff 	.word	0x01312cff
 8005a10:	014ca43f 	.word	0x014ca43f
 8005a14:	016e3600 	.word	0x016e3600
 8005a18:	01a6ab1f 	.word	0x01a6ab1f
 8005a1c:	01e84800 	.word	0x01e84800

08005a20 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f043 0201 	orr.w	r2, r3, #1
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	370c      	adds	r7, #12
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a42:	b480      	push	{r7}
 8005a44:	b083      	sub	sp, #12
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f023 0201 	bic.w	r2, r3, #1
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005a70:	2300      	movs	r3, #0
 8005a72:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a80:	78fb      	ldrb	r3, [r7, #3]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d115      	bne.n	8005ab2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005a92:	200a      	movs	r0, #10
 8005a94:	f7fb fbce 	bl	8001234 <HAL_Delay>
      ms += 10U;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	330a      	adds	r3, #10
 8005a9c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f001 f93f 	bl	8006d22 <USB_GetMode>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d01e      	beq.n	8005ae8 <USB_SetCurrentMode+0x84>
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2bc7      	cmp	r3, #199	@ 0xc7
 8005aae:	d9f0      	bls.n	8005a92 <USB_SetCurrentMode+0x2e>
 8005ab0:	e01a      	b.n	8005ae8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005ab2:	78fb      	ldrb	r3, [r7, #3]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d115      	bne.n	8005ae4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005ac4:	200a      	movs	r0, #10
 8005ac6:	f7fb fbb5 	bl	8001234 <HAL_Delay>
      ms += 10U;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	330a      	adds	r3, #10
 8005ace:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f001 f926 	bl	8006d22 <USB_GetMode>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d005      	beq.n	8005ae8 <USB_SetCurrentMode+0x84>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2bc7      	cmp	r3, #199	@ 0xc7
 8005ae0:	d9f0      	bls.n	8005ac4 <USB_SetCurrentMode+0x60>
 8005ae2:	e001      	b.n	8005ae8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e005      	b.n	8005af4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2bc8      	cmp	r3, #200	@ 0xc8
 8005aec:	d101      	bne.n	8005af2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e000      	b.n	8005af4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005af2:	2300      	movs	r3, #0
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3710      	adds	r7, #16
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005afc:	b084      	sub	sp, #16
 8005afe:	b580      	push	{r7, lr}
 8005b00:	b086      	sub	sp, #24
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
 8005b06:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005b0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005b16:	2300      	movs	r3, #0
 8005b18:	613b      	str	r3, [r7, #16]
 8005b1a:	e009      	b.n	8005b30 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	3340      	adds	r3, #64	@ 0x40
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	4413      	add	r3, r2
 8005b26:	2200      	movs	r2, #0
 8005b28:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	613b      	str	r3, [r7, #16]
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	2b0e      	cmp	r3, #14
 8005b34:	d9f2      	bls.n	8005b1c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005b36:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d11c      	bne.n	8005b78 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b4c:	f043 0302 	orr.w	r3, r3, #2
 8005b50:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b56:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b62:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b6e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	639a      	str	r2, [r3, #56]	@ 0x38
 8005b76:	e00b      	b.n	8005b90 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b7c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b88:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005b96:	461a      	mov	r2, r3
 8005b98:	2300      	movs	r3, #0
 8005b9a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b9c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d10d      	bne.n	8005bc0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005ba4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d104      	bne.n	8005bb6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005bac:	2100      	movs	r1, #0
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 f968 	bl	8005e84 <USB_SetDevSpeed>
 8005bb4:	e008      	b.n	8005bc8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005bb6:	2101      	movs	r1, #1
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 f963 	bl	8005e84 <USB_SetDevSpeed>
 8005bbe:	e003      	b.n	8005bc8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005bc0:	2103      	movs	r1, #3
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 f95e 	bl	8005e84 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005bc8:	2110      	movs	r1, #16
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 f8fa 	bl	8005dc4 <USB_FlushTxFifo>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d001      	beq.n	8005bda <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 f924 	bl	8005e28 <USB_FlushRxFifo>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d001      	beq.n	8005bea <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	2300      	movs	r3, #0
 8005c00:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c08:	461a      	mov	r2, r3
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c0e:	2300      	movs	r3, #0
 8005c10:	613b      	str	r3, [r7, #16]
 8005c12:	e043      	b.n	8005c9c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	015a      	lsls	r2, r3, #5
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c2a:	d118      	bne.n	8005c5e <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d10a      	bne.n	8005c48 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	015a      	lsls	r2, r3, #5
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	4413      	add	r3, r2
 8005c3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c3e:	461a      	mov	r2, r3
 8005c40:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005c44:	6013      	str	r3, [r2, #0]
 8005c46:	e013      	b.n	8005c70 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	015a      	lsls	r2, r3, #5
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	4413      	add	r3, r2
 8005c50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c54:	461a      	mov	r2, r3
 8005c56:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005c5a:	6013      	str	r3, [r2, #0]
 8005c5c:	e008      	b.n	8005c70 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	015a      	lsls	r2, r3, #5
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	4413      	add	r3, r2
 8005c66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	015a      	lsls	r2, r3, #5
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	4413      	add	r3, r2
 8005c78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	2300      	movs	r3, #0
 8005c80:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	015a      	lsls	r2, r3, #5
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	4413      	add	r3, r2
 8005c8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c8e:	461a      	mov	r2, r3
 8005c90:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005c94:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	3301      	adds	r3, #1
 8005c9a:	613b      	str	r3, [r7, #16]
 8005c9c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d3b5      	bcc.n	8005c14 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ca8:	2300      	movs	r3, #0
 8005caa:	613b      	str	r3, [r7, #16]
 8005cac:	e043      	b.n	8005d36 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	015a      	lsls	r2, r3, #5
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005cc0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005cc4:	d118      	bne.n	8005cf8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d10a      	bne.n	8005ce2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	015a      	lsls	r2, r3, #5
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cd8:	461a      	mov	r2, r3
 8005cda:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005cde:	6013      	str	r3, [r2, #0]
 8005ce0:	e013      	b.n	8005d0a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	015a      	lsls	r2, r3, #5
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	4413      	add	r3, r2
 8005cea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cee:	461a      	mov	r2, r3
 8005cf0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005cf4:	6013      	str	r3, [r2, #0]
 8005cf6:	e008      	b.n	8005d0a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	015a      	lsls	r2, r3, #5
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	4413      	add	r3, r2
 8005d00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d04:	461a      	mov	r2, r3
 8005d06:	2300      	movs	r3, #0
 8005d08:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	015a      	lsls	r2, r3, #5
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	4413      	add	r3, r2
 8005d12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d16:	461a      	mov	r2, r3
 8005d18:	2300      	movs	r3, #0
 8005d1a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	015a      	lsls	r2, r3, #5
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	4413      	add	r3, r2
 8005d24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d28:	461a      	mov	r2, r3
 8005d2a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005d2e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	3301      	adds	r3, #1
 8005d34:	613b      	str	r3, [r7, #16]
 8005d36:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d3b5      	bcc.n	8005cae <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d54:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005d62:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005d64:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d105      	bne.n	8005d78 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	699b      	ldr	r3, [r3, #24]
 8005d70:	f043 0210 	orr.w	r2, r3, #16
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	699a      	ldr	r2, [r3, #24]
 8005d7c:	4b10      	ldr	r3, [pc, #64]	@ (8005dc0 <USB_DevInit+0x2c4>)
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005d84:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d005      	beq.n	8005d98 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	f043 0208 	orr.w	r2, r3, #8
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005d98:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d107      	bne.n	8005db0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	699b      	ldr	r3, [r3, #24]
 8005da4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005da8:	f043 0304 	orr.w	r3, r3, #4
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005db0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3718      	adds	r7, #24
 8005db6:	46bd      	mov	sp, r7
 8005db8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005dbc:	b004      	add	sp, #16
 8005dbe:	4770      	bx	lr
 8005dc0:	803c3800 	.word	0x803c3800

08005dc4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005dde:	d901      	bls.n	8005de4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	e01b      	b.n	8005e1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	daf2      	bge.n	8005dd2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005dec:	2300      	movs	r3, #0
 8005dee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	019b      	lsls	r3, r3, #6
 8005df4:	f043 0220 	orr.w	r2, r3, #32
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	3301      	adds	r3, #1
 8005e00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e08:	d901      	bls.n	8005e0e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e006      	b.n	8005e1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	f003 0320 	and.w	r3, r3, #32
 8005e16:	2b20      	cmp	r3, #32
 8005e18:	d0f0      	beq.n	8005dfc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3714      	adds	r7, #20
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e30:	2300      	movs	r3, #0
 8005e32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	3301      	adds	r3, #1
 8005e38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e40:	d901      	bls.n	8005e46 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e018      	b.n	8005e78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	daf2      	bge.n	8005e34 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2210      	movs	r2, #16
 8005e56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e64:	d901      	bls.n	8005e6a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e006      	b.n	8005e78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	f003 0310 	and.w	r3, r3, #16
 8005e72:	2b10      	cmp	r3, #16
 8005e74:	d0f0      	beq.n	8005e58 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3714      	adds	r7, #20
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	78fb      	ldrb	r3, [r7, #3]
 8005e9e:	68f9      	ldr	r1, [r7, #12]
 8005ea0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3714      	adds	r7, #20
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr

08005eb6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005eb6:	b480      	push	{r7}
 8005eb8:	b087      	sub	sp, #28
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	f003 0306 	and.w	r3, r3, #6
 8005ece:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d102      	bne.n	8005edc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	75fb      	strb	r3, [r7, #23]
 8005eda:	e00a      	b.n	8005ef2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d002      	beq.n	8005ee8 <USB_GetDevSpeed+0x32>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2b06      	cmp	r3, #6
 8005ee6:	d102      	bne.n	8005eee <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005ee8:	2302      	movs	r3, #2
 8005eea:	75fb      	strb	r3, [r7, #23]
 8005eec:	e001      	b.n	8005ef2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005eee:	230f      	movs	r3, #15
 8005ef0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	371c      	adds	r7, #28
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b085      	sub	sp, #20
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	785b      	ldrb	r3, [r3, #1]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d13a      	bne.n	8005f92 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f22:	69da      	ldr	r2, [r3, #28]
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	f003 030f 	and.w	r3, r3, #15
 8005f2c:	2101      	movs	r1, #1
 8005f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	68f9      	ldr	r1, [r7, #12]
 8005f36:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	015a      	lsls	r2, r3, #5
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	4413      	add	r3, r2
 8005f46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d155      	bne.n	8006000 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	015a      	lsls	r2, r3, #5
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	791b      	ldrb	r3, [r3, #4]
 8005f6e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f70:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	059b      	lsls	r3, r3, #22
 8005f76:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	68ba      	ldr	r2, [r7, #8]
 8005f7c:	0151      	lsls	r1, r2, #5
 8005f7e:	68fa      	ldr	r2, [r7, #12]
 8005f80:	440a      	add	r2, r1
 8005f82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f8e:	6013      	str	r3, [r2, #0]
 8005f90:	e036      	b.n	8006000 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f98:	69da      	ldr	r2, [r3, #28]
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	f003 030f 	and.w	r3, r3, #15
 8005fa2:	2101      	movs	r1, #1
 8005fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8005fa8:	041b      	lsls	r3, r3, #16
 8005faa:	68f9      	ldr	r1, [r7, #12]
 8005fac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	015a      	lsls	r2, r3, #5
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d11a      	bne.n	8006000 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	015a      	lsls	r2, r3, #5
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	791b      	ldrb	r3, [r3, #4]
 8005fe4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005fe6:	430b      	orrs	r3, r1
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	68ba      	ldr	r2, [r7, #8]
 8005fec:	0151      	lsls	r1, r2, #5
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	440a      	add	r2, r1
 8005ff2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ff6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ffa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ffe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	3714      	adds	r7, #20
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr
	...

08006010 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	785b      	ldrb	r3, [r3, #1]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d161      	bne.n	80060f0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	015a      	lsls	r2, r3, #5
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	4413      	add	r3, r2
 8006034:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800603e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006042:	d11f      	bne.n	8006084 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	015a      	lsls	r2, r3, #5
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	4413      	add	r3, r2
 800604c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68ba      	ldr	r2, [r7, #8]
 8006054:	0151      	lsls	r1, r2, #5
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	440a      	add	r2, r1
 800605a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800605e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006062:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	015a      	lsls	r2, r3, #5
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	4413      	add	r3, r2
 800606c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68ba      	ldr	r2, [r7, #8]
 8006074:	0151      	lsls	r1, r2, #5
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	440a      	add	r2, r1
 800607a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800607e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006082:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800608a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	f003 030f 	and.w	r3, r3, #15
 8006094:	2101      	movs	r1, #1
 8006096:	fa01 f303 	lsl.w	r3, r1, r3
 800609a:	b29b      	uxth	r3, r3
 800609c:	43db      	mvns	r3, r3
 800609e:	68f9      	ldr	r1, [r7, #12]
 80060a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80060a4:	4013      	ands	r3, r2
 80060a6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060ae:	69da      	ldr	r2, [r3, #28]
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	f003 030f 	and.w	r3, r3, #15
 80060b8:	2101      	movs	r1, #1
 80060ba:	fa01 f303 	lsl.w	r3, r1, r3
 80060be:	b29b      	uxth	r3, r3
 80060c0:	43db      	mvns	r3, r3
 80060c2:	68f9      	ldr	r1, [r7, #12]
 80060c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80060c8:	4013      	ands	r3, r2
 80060ca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	015a      	lsls	r2, r3, #5
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	4413      	add	r3, r2
 80060d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	0159      	lsls	r1, r3, #5
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	440b      	add	r3, r1
 80060e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060e6:	4619      	mov	r1, r3
 80060e8:	4b35      	ldr	r3, [pc, #212]	@ (80061c0 <USB_DeactivateEndpoint+0x1b0>)
 80060ea:	4013      	ands	r3, r2
 80060ec:	600b      	str	r3, [r1, #0]
 80060ee:	e060      	b.n	80061b2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	015a      	lsls	r2, r3, #5
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	4413      	add	r3, r2
 80060f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006102:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006106:	d11f      	bne.n	8006148 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	015a      	lsls	r2, r3, #5
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	4413      	add	r3, r2
 8006110:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68ba      	ldr	r2, [r7, #8]
 8006118:	0151      	lsls	r1, r2, #5
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	440a      	add	r2, r1
 800611e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006122:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006126:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	015a      	lsls	r2, r3, #5
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	4413      	add	r3, r2
 8006130:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68ba      	ldr	r2, [r7, #8]
 8006138:	0151      	lsls	r1, r2, #5
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	440a      	add	r2, r1
 800613e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006142:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006146:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800614e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	f003 030f 	and.w	r3, r3, #15
 8006158:	2101      	movs	r1, #1
 800615a:	fa01 f303 	lsl.w	r3, r1, r3
 800615e:	041b      	lsls	r3, r3, #16
 8006160:	43db      	mvns	r3, r3
 8006162:	68f9      	ldr	r1, [r7, #12]
 8006164:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006168:	4013      	ands	r3, r2
 800616a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006172:	69da      	ldr	r2, [r3, #28]
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	f003 030f 	and.w	r3, r3, #15
 800617c:	2101      	movs	r1, #1
 800617e:	fa01 f303 	lsl.w	r3, r1, r3
 8006182:	041b      	lsls	r3, r3, #16
 8006184:	43db      	mvns	r3, r3
 8006186:	68f9      	ldr	r1, [r7, #12]
 8006188:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800618c:	4013      	ands	r3, r2
 800618e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	015a      	lsls	r2, r3, #5
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	4413      	add	r3, r2
 8006198:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	0159      	lsls	r1, r3, #5
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	440b      	add	r3, r1
 80061a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061aa:	4619      	mov	r1, r3
 80061ac:	4b05      	ldr	r3, [pc, #20]	@ (80061c4 <USB_DeactivateEndpoint+0x1b4>)
 80061ae:	4013      	ands	r3, r2
 80061b0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80061b2:	2300      	movs	r3, #0
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3714      	adds	r7, #20
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr
 80061c0:	ec337800 	.word	0xec337800
 80061c4:	eff37800 	.word	0xeff37800

080061c8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b08a      	sub	sp, #40	@ 0x28
 80061cc:	af02      	add	r7, sp, #8
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	4613      	mov	r3, r2
 80061d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	785b      	ldrb	r3, [r3, #1]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	f040 817f 	bne.w	80064e8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d132      	bne.n	8006258 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	015a      	lsls	r2, r3, #5
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	4413      	add	r3, r2
 80061fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	69ba      	ldr	r2, [r7, #24]
 8006202:	0151      	lsls	r1, r2, #5
 8006204:	69fa      	ldr	r2, [r7, #28]
 8006206:	440a      	add	r2, r1
 8006208:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800620c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006210:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006214:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	015a      	lsls	r2, r3, #5
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	4413      	add	r3, r2
 800621e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006222:	691b      	ldr	r3, [r3, #16]
 8006224:	69ba      	ldr	r2, [r7, #24]
 8006226:	0151      	lsls	r1, r2, #5
 8006228:	69fa      	ldr	r2, [r7, #28]
 800622a:	440a      	add	r2, r1
 800622c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006230:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006234:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	015a      	lsls	r2, r3, #5
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	4413      	add	r3, r2
 800623e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	69ba      	ldr	r2, [r7, #24]
 8006246:	0151      	lsls	r1, r2, #5
 8006248:	69fa      	ldr	r2, [r7, #28]
 800624a:	440a      	add	r2, r1
 800624c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006250:	0cdb      	lsrs	r3, r3, #19
 8006252:	04db      	lsls	r3, r3, #19
 8006254:	6113      	str	r3, [r2, #16]
 8006256:	e097      	b.n	8006388 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	015a      	lsls	r2, r3, #5
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	4413      	add	r3, r2
 8006260:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	69ba      	ldr	r2, [r7, #24]
 8006268:	0151      	lsls	r1, r2, #5
 800626a:	69fa      	ldr	r2, [r7, #28]
 800626c:	440a      	add	r2, r1
 800626e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006272:	0cdb      	lsrs	r3, r3, #19
 8006274:	04db      	lsls	r3, r3, #19
 8006276:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	015a      	lsls	r2, r3, #5
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	4413      	add	r3, r2
 8006280:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	69ba      	ldr	r2, [r7, #24]
 8006288:	0151      	lsls	r1, r2, #5
 800628a:	69fa      	ldr	r2, [r7, #28]
 800628c:	440a      	add	r2, r1
 800628e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006292:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006296:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800629a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d11a      	bne.n	80062d8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	691a      	ldr	r2, [r3, #16]
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d903      	bls.n	80062b6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	689a      	ldr	r2, [r3, #8]
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	015a      	lsls	r2, r3, #5
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	4413      	add	r3, r2
 80062be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	69ba      	ldr	r2, [r7, #24]
 80062c6:	0151      	lsls	r1, r2, #5
 80062c8:	69fa      	ldr	r2, [r7, #28]
 80062ca:	440a      	add	r2, r1
 80062cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80062d4:	6113      	str	r3, [r2, #16]
 80062d6:	e044      	b.n	8006362 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	691a      	ldr	r2, [r3, #16]
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	4413      	add	r3, r2
 80062e2:	1e5a      	subs	r2, r3, #1
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ec:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	015a      	lsls	r2, r3, #5
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	4413      	add	r3, r2
 80062f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062fa:	691a      	ldr	r2, [r3, #16]
 80062fc:	8afb      	ldrh	r3, [r7, #22]
 80062fe:	04d9      	lsls	r1, r3, #19
 8006300:	4ba4      	ldr	r3, [pc, #656]	@ (8006594 <USB_EPStartXfer+0x3cc>)
 8006302:	400b      	ands	r3, r1
 8006304:	69b9      	ldr	r1, [r7, #24]
 8006306:	0148      	lsls	r0, r1, #5
 8006308:	69f9      	ldr	r1, [r7, #28]
 800630a:	4401      	add	r1, r0
 800630c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006310:	4313      	orrs	r3, r2
 8006312:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	791b      	ldrb	r3, [r3, #4]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d122      	bne.n	8006362 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	015a      	lsls	r2, r3, #5
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	4413      	add	r3, r2
 8006324:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	69ba      	ldr	r2, [r7, #24]
 800632c:	0151      	lsls	r1, r2, #5
 800632e:	69fa      	ldr	r2, [r7, #28]
 8006330:	440a      	add	r2, r1
 8006332:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006336:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800633a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	015a      	lsls	r2, r3, #5
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	4413      	add	r3, r2
 8006344:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006348:	691a      	ldr	r2, [r3, #16]
 800634a:	8afb      	ldrh	r3, [r7, #22]
 800634c:	075b      	lsls	r3, r3, #29
 800634e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006352:	69b9      	ldr	r1, [r7, #24]
 8006354:	0148      	lsls	r0, r1, #5
 8006356:	69f9      	ldr	r1, [r7, #28]
 8006358:	4401      	add	r1, r0
 800635a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800635e:	4313      	orrs	r3, r2
 8006360:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	015a      	lsls	r2, r3, #5
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	4413      	add	r3, r2
 800636a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800636e:	691a      	ldr	r2, [r3, #16]
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006378:	69b9      	ldr	r1, [r7, #24]
 800637a:	0148      	lsls	r0, r1, #5
 800637c:	69f9      	ldr	r1, [r7, #28]
 800637e:	4401      	add	r1, r0
 8006380:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006384:	4313      	orrs	r3, r2
 8006386:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006388:	79fb      	ldrb	r3, [r7, #7]
 800638a:	2b01      	cmp	r3, #1
 800638c:	d14b      	bne.n	8006426 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	69db      	ldr	r3, [r3, #28]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d009      	beq.n	80063aa <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	015a      	lsls	r2, r3, #5
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	4413      	add	r3, r2
 800639e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063a2:	461a      	mov	r2, r3
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	69db      	ldr	r3, [r3, #28]
 80063a8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	791b      	ldrb	r3, [r3, #4]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d128      	bne.n	8006404 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d110      	bne.n	80063e4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	015a      	lsls	r2, r3, #5
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	4413      	add	r3, r2
 80063ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	69ba      	ldr	r2, [r7, #24]
 80063d2:	0151      	lsls	r1, r2, #5
 80063d4:	69fa      	ldr	r2, [r7, #28]
 80063d6:	440a      	add	r2, r1
 80063d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063dc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80063e0:	6013      	str	r3, [r2, #0]
 80063e2:	e00f      	b.n	8006404 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	015a      	lsls	r2, r3, #5
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	4413      	add	r3, r2
 80063ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	69ba      	ldr	r2, [r7, #24]
 80063f4:	0151      	lsls	r1, r2, #5
 80063f6:	69fa      	ldr	r2, [r7, #28]
 80063f8:	440a      	add	r2, r1
 80063fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006402:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	015a      	lsls	r2, r3, #5
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	4413      	add	r3, r2
 800640c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	69ba      	ldr	r2, [r7, #24]
 8006414:	0151      	lsls	r1, r2, #5
 8006416:	69fa      	ldr	r2, [r7, #28]
 8006418:	440a      	add	r2, r1
 800641a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800641e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006422:	6013      	str	r3, [r2, #0]
 8006424:	e166      	b.n	80066f4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	015a      	lsls	r2, r3, #5
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	4413      	add	r3, r2
 800642e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	69ba      	ldr	r2, [r7, #24]
 8006436:	0151      	lsls	r1, r2, #5
 8006438:	69fa      	ldr	r2, [r7, #28]
 800643a:	440a      	add	r2, r1
 800643c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006440:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006444:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	791b      	ldrb	r3, [r3, #4]
 800644a:	2b01      	cmp	r3, #1
 800644c:	d015      	beq.n	800647a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	2b00      	cmp	r3, #0
 8006454:	f000 814e 	beq.w	80066f4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800645e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	f003 030f 	and.w	r3, r3, #15
 8006468:	2101      	movs	r1, #1
 800646a:	fa01 f303 	lsl.w	r3, r1, r3
 800646e:	69f9      	ldr	r1, [r7, #28]
 8006470:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006474:	4313      	orrs	r3, r2
 8006476:	634b      	str	r3, [r1, #52]	@ 0x34
 8006478:	e13c      	b.n	80066f4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006486:	2b00      	cmp	r3, #0
 8006488:	d110      	bne.n	80064ac <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	015a      	lsls	r2, r3, #5
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	4413      	add	r3, r2
 8006492:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	69ba      	ldr	r2, [r7, #24]
 800649a:	0151      	lsls	r1, r2, #5
 800649c:	69fa      	ldr	r2, [r7, #28]
 800649e:	440a      	add	r2, r1
 80064a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064a4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80064a8:	6013      	str	r3, [r2, #0]
 80064aa:	e00f      	b.n	80064cc <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	015a      	lsls	r2, r3, #5
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	4413      	add	r3, r2
 80064b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	69ba      	ldr	r2, [r7, #24]
 80064bc:	0151      	lsls	r1, r2, #5
 80064be:	69fa      	ldr	r2, [r7, #28]
 80064c0:	440a      	add	r2, r1
 80064c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064ca:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	68d9      	ldr	r1, [r3, #12]
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	781a      	ldrb	r2, [r3, #0]
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	b298      	uxth	r0, r3
 80064da:	79fb      	ldrb	r3, [r7, #7]
 80064dc:	9300      	str	r3, [sp, #0]
 80064de:	4603      	mov	r3, r0
 80064e0:	68f8      	ldr	r0, [r7, #12]
 80064e2:	f000 f9b9 	bl	8006858 <USB_WritePacket>
 80064e6:	e105      	b.n	80066f4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	015a      	lsls	r2, r3, #5
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	4413      	add	r3, r2
 80064f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	69ba      	ldr	r2, [r7, #24]
 80064f8:	0151      	lsls	r1, r2, #5
 80064fa:	69fa      	ldr	r2, [r7, #28]
 80064fc:	440a      	add	r2, r1
 80064fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006502:	0cdb      	lsrs	r3, r3, #19
 8006504:	04db      	lsls	r3, r3, #19
 8006506:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	015a      	lsls	r2, r3, #5
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	4413      	add	r3, r2
 8006510:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	69ba      	ldr	r2, [r7, #24]
 8006518:	0151      	lsls	r1, r2, #5
 800651a:	69fa      	ldr	r2, [r7, #28]
 800651c:	440a      	add	r2, r1
 800651e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006522:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006526:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800652a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d132      	bne.n	8006598 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d003      	beq.n	8006542 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	689a      	ldr	r2, [r3, #8]
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	689a      	ldr	r2, [r3, #8]
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	015a      	lsls	r2, r3, #5
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	4413      	add	r3, r2
 8006552:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006556:	691a      	ldr	r2, [r3, #16]
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	6a1b      	ldr	r3, [r3, #32]
 800655c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006560:	69b9      	ldr	r1, [r7, #24]
 8006562:	0148      	lsls	r0, r1, #5
 8006564:	69f9      	ldr	r1, [r7, #28]
 8006566:	4401      	add	r1, r0
 8006568:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800656c:	4313      	orrs	r3, r2
 800656e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	015a      	lsls	r2, r3, #5
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	4413      	add	r3, r2
 8006578:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	69ba      	ldr	r2, [r7, #24]
 8006580:	0151      	lsls	r1, r2, #5
 8006582:	69fa      	ldr	r2, [r7, #28]
 8006584:	440a      	add	r2, r1
 8006586:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800658a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800658e:	6113      	str	r3, [r2, #16]
 8006590:	e062      	b.n	8006658 <USB_EPStartXfer+0x490>
 8006592:	bf00      	nop
 8006594:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d123      	bne.n	80065e8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	015a      	lsls	r2, r3, #5
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	4413      	add	r3, r2
 80065a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065ac:	691a      	ldr	r2, [r3, #16]
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065b6:	69b9      	ldr	r1, [r7, #24]
 80065b8:	0148      	lsls	r0, r1, #5
 80065ba:	69f9      	ldr	r1, [r7, #28]
 80065bc:	4401      	add	r1, r0
 80065be:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80065c2:	4313      	orrs	r3, r2
 80065c4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	015a      	lsls	r2, r3, #5
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	4413      	add	r3, r2
 80065ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	69ba      	ldr	r2, [r7, #24]
 80065d6:	0151      	lsls	r1, r2, #5
 80065d8:	69fa      	ldr	r2, [r7, #28]
 80065da:	440a      	add	r2, r1
 80065dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065e0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80065e4:	6113      	str	r3, [r2, #16]
 80065e6:	e037      	b.n	8006658 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	691a      	ldr	r2, [r3, #16]
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	4413      	add	r3, r2
 80065f2:	1e5a      	subs	r2, r3, #1
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80065fc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	8afa      	ldrh	r2, [r7, #22]
 8006604:	fb03 f202 	mul.w	r2, r3, r2
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	015a      	lsls	r2, r3, #5
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	4413      	add	r3, r2
 8006614:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006618:	691a      	ldr	r2, [r3, #16]
 800661a:	8afb      	ldrh	r3, [r7, #22]
 800661c:	04d9      	lsls	r1, r3, #19
 800661e:	4b38      	ldr	r3, [pc, #224]	@ (8006700 <USB_EPStartXfer+0x538>)
 8006620:	400b      	ands	r3, r1
 8006622:	69b9      	ldr	r1, [r7, #24]
 8006624:	0148      	lsls	r0, r1, #5
 8006626:	69f9      	ldr	r1, [r7, #28]
 8006628:	4401      	add	r1, r0
 800662a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800662e:	4313      	orrs	r3, r2
 8006630:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	015a      	lsls	r2, r3, #5
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	4413      	add	r3, r2
 800663a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800663e:	691a      	ldr	r2, [r3, #16]
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	6a1b      	ldr	r3, [r3, #32]
 8006644:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006648:	69b9      	ldr	r1, [r7, #24]
 800664a:	0148      	lsls	r0, r1, #5
 800664c:	69f9      	ldr	r1, [r7, #28]
 800664e:	4401      	add	r1, r0
 8006650:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006654:	4313      	orrs	r3, r2
 8006656:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006658:	79fb      	ldrb	r3, [r7, #7]
 800665a:	2b01      	cmp	r3, #1
 800665c:	d10d      	bne.n	800667a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d009      	beq.n	800667a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	68d9      	ldr	r1, [r3, #12]
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	015a      	lsls	r2, r3, #5
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	4413      	add	r3, r2
 8006672:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006676:	460a      	mov	r2, r1
 8006678:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	791b      	ldrb	r3, [r3, #4]
 800667e:	2b01      	cmp	r3, #1
 8006680:	d128      	bne.n	80066d4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800668e:	2b00      	cmp	r3, #0
 8006690:	d110      	bne.n	80066b4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	015a      	lsls	r2, r3, #5
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	4413      	add	r3, r2
 800669a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	69ba      	ldr	r2, [r7, #24]
 80066a2:	0151      	lsls	r1, r2, #5
 80066a4:	69fa      	ldr	r2, [r7, #28]
 80066a6:	440a      	add	r2, r1
 80066a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066ac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80066b0:	6013      	str	r3, [r2, #0]
 80066b2:	e00f      	b.n	80066d4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80066b4:	69bb      	ldr	r3, [r7, #24]
 80066b6:	015a      	lsls	r2, r3, #5
 80066b8:	69fb      	ldr	r3, [r7, #28]
 80066ba:	4413      	add	r3, r2
 80066bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	69ba      	ldr	r2, [r7, #24]
 80066c4:	0151      	lsls	r1, r2, #5
 80066c6:	69fa      	ldr	r2, [r7, #28]
 80066c8:	440a      	add	r2, r1
 80066ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066d2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	015a      	lsls	r2, r3, #5
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	4413      	add	r3, r2
 80066dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	69ba      	ldr	r2, [r7, #24]
 80066e4:	0151      	lsls	r1, r2, #5
 80066e6:	69fa      	ldr	r2, [r7, #28]
 80066e8:	440a      	add	r2, r1
 80066ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066ee:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80066f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3720      	adds	r7, #32
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	1ff80000 	.word	0x1ff80000

08006704 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006704:	b480      	push	{r7}
 8006706:	b087      	sub	sp, #28
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800670e:	2300      	movs	r3, #0
 8006710:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006712:	2300      	movs	r3, #0
 8006714:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	785b      	ldrb	r3, [r3, #1]
 800671e:	2b01      	cmp	r3, #1
 8006720:	d14a      	bne.n	80067b8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	015a      	lsls	r2, r3, #5
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	4413      	add	r3, r2
 800672c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006736:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800673a:	f040 8086 	bne.w	800684a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	015a      	lsls	r2, r3, #5
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	4413      	add	r3, r2
 8006748:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	683a      	ldr	r2, [r7, #0]
 8006750:	7812      	ldrb	r2, [r2, #0]
 8006752:	0151      	lsls	r1, r2, #5
 8006754:	693a      	ldr	r2, [r7, #16]
 8006756:	440a      	add	r2, r1
 8006758:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800675c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006760:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	015a      	lsls	r2, r3, #5
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	4413      	add	r3, r2
 800676c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	683a      	ldr	r2, [r7, #0]
 8006774:	7812      	ldrb	r2, [r2, #0]
 8006776:	0151      	lsls	r1, r2, #5
 8006778:	693a      	ldr	r2, [r7, #16]
 800677a:	440a      	add	r2, r1
 800677c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006780:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006784:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	3301      	adds	r3, #1
 800678a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006792:	4293      	cmp	r3, r2
 8006794:	d902      	bls.n	800679c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	75fb      	strb	r3, [r7, #23]
          break;
 800679a:	e056      	b.n	800684a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	015a      	lsls	r2, r3, #5
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	4413      	add	r3, r2
 80067a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80067b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067b4:	d0e7      	beq.n	8006786 <USB_EPStopXfer+0x82>
 80067b6:	e048      	b.n	800684a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	015a      	lsls	r2, r3, #5
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	4413      	add	r3, r2
 80067c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80067cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067d0:	d13b      	bne.n	800684a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	015a      	lsls	r2, r3, #5
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	4413      	add	r3, r2
 80067dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	683a      	ldr	r2, [r7, #0]
 80067e4:	7812      	ldrb	r2, [r2, #0]
 80067e6:	0151      	lsls	r1, r2, #5
 80067e8:	693a      	ldr	r2, [r7, #16]
 80067ea:	440a      	add	r2, r1
 80067ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067f0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80067f4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	015a      	lsls	r2, r3, #5
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	4413      	add	r3, r2
 8006800:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	683a      	ldr	r2, [r7, #0]
 8006808:	7812      	ldrb	r2, [r2, #0]
 800680a:	0151      	lsls	r1, r2, #5
 800680c:	693a      	ldr	r2, [r7, #16]
 800680e:	440a      	add	r2, r1
 8006810:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006814:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006818:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	3301      	adds	r3, #1
 800681e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006826:	4293      	cmp	r3, r2
 8006828:	d902      	bls.n	8006830 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	75fb      	strb	r3, [r7, #23]
          break;
 800682e:	e00c      	b.n	800684a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	015a      	lsls	r2, r3, #5
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	4413      	add	r3, r2
 800683a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006844:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006848:	d0e7      	beq.n	800681a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800684a:	7dfb      	ldrb	r3, [r7, #23]
}
 800684c:	4618      	mov	r0, r3
 800684e:	371c      	adds	r7, #28
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006858:	b480      	push	{r7}
 800685a:	b089      	sub	sp, #36	@ 0x24
 800685c:	af00      	add	r7, sp, #0
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	60b9      	str	r1, [r7, #8]
 8006862:	4611      	mov	r1, r2
 8006864:	461a      	mov	r2, r3
 8006866:	460b      	mov	r3, r1
 8006868:	71fb      	strb	r3, [r7, #7]
 800686a:	4613      	mov	r3, r2
 800686c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006876:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800687a:	2b00      	cmp	r3, #0
 800687c:	d123      	bne.n	80068c6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800687e:	88bb      	ldrh	r3, [r7, #4]
 8006880:	3303      	adds	r3, #3
 8006882:	089b      	lsrs	r3, r3, #2
 8006884:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006886:	2300      	movs	r3, #0
 8006888:	61bb      	str	r3, [r7, #24]
 800688a:	e018      	b.n	80068be <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800688c:	79fb      	ldrb	r3, [r7, #7]
 800688e:	031a      	lsls	r2, r3, #12
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	4413      	add	r3, r2
 8006894:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006898:	461a      	mov	r2, r3
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	6013      	str	r3, [r2, #0]
      pSrc++;
 80068a0:	69fb      	ldr	r3, [r7, #28]
 80068a2:	3301      	adds	r3, #1
 80068a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	3301      	adds	r3, #1
 80068aa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	3301      	adds	r3, #1
 80068b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	3301      	adds	r3, #1
 80068b6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	3301      	adds	r3, #1
 80068bc:	61bb      	str	r3, [r7, #24]
 80068be:	69ba      	ldr	r2, [r7, #24]
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d3e2      	bcc.n	800688c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80068c6:	2300      	movs	r3, #0
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3724      	adds	r7, #36	@ 0x24
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b08b      	sub	sp, #44	@ 0x2c
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	4613      	mov	r3, r2
 80068e0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80068ea:	88fb      	ldrh	r3, [r7, #6]
 80068ec:	089b      	lsrs	r3, r3, #2
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80068f2:	88fb      	ldrh	r3, [r7, #6]
 80068f4:	f003 0303 	and.w	r3, r3, #3
 80068f8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80068fa:	2300      	movs	r3, #0
 80068fc:	623b      	str	r3, [r7, #32]
 80068fe:	e014      	b.n	800692a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800690a:	601a      	str	r2, [r3, #0]
    pDest++;
 800690c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800690e:	3301      	adds	r3, #1
 8006910:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006914:	3301      	adds	r3, #1
 8006916:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800691a:	3301      	adds	r3, #1
 800691c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800691e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006920:	3301      	adds	r3, #1
 8006922:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006924:	6a3b      	ldr	r3, [r7, #32]
 8006926:	3301      	adds	r3, #1
 8006928:	623b      	str	r3, [r7, #32]
 800692a:	6a3a      	ldr	r2, [r7, #32]
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	429a      	cmp	r2, r3
 8006930:	d3e6      	bcc.n	8006900 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006932:	8bfb      	ldrh	r3, [r7, #30]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d01e      	beq.n	8006976 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006938:	2300      	movs	r3, #0
 800693a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006942:	461a      	mov	r2, r3
 8006944:	f107 0310 	add.w	r3, r7, #16
 8006948:	6812      	ldr	r2, [r2, #0]
 800694a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800694c:	693a      	ldr	r2, [r7, #16]
 800694e:	6a3b      	ldr	r3, [r7, #32]
 8006950:	b2db      	uxtb	r3, r3
 8006952:	00db      	lsls	r3, r3, #3
 8006954:	fa22 f303 	lsr.w	r3, r2, r3
 8006958:	b2da      	uxtb	r2, r3
 800695a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800695c:	701a      	strb	r2, [r3, #0]
      i++;
 800695e:	6a3b      	ldr	r3, [r7, #32]
 8006960:	3301      	adds	r3, #1
 8006962:	623b      	str	r3, [r7, #32]
      pDest++;
 8006964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006966:	3301      	adds	r3, #1
 8006968:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800696a:	8bfb      	ldrh	r3, [r7, #30]
 800696c:	3b01      	subs	r3, #1
 800696e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006970:	8bfb      	ldrh	r3, [r7, #30]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d1ea      	bne.n	800694c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006978:	4618      	mov	r0, r3
 800697a:	372c      	adds	r7, #44	@ 0x2c
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006984:	b480      	push	{r7}
 8006986:	b085      	sub	sp, #20
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	785b      	ldrb	r3, [r3, #1]
 800699c:	2b01      	cmp	r3, #1
 800699e:	d12c      	bne.n	80069fa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	015a      	lsls	r2, r3, #5
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	4413      	add	r3, r2
 80069a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	db12      	blt.n	80069d8 <USB_EPSetStall+0x54>
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d00f      	beq.n	80069d8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	015a      	lsls	r2, r3, #5
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	4413      	add	r3, r2
 80069c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68ba      	ldr	r2, [r7, #8]
 80069c8:	0151      	lsls	r1, r2, #5
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	440a      	add	r2, r1
 80069ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069d2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80069d6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	015a      	lsls	r2, r3, #5
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	4413      	add	r3, r2
 80069e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68ba      	ldr	r2, [r7, #8]
 80069e8:	0151      	lsls	r1, r2, #5
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	440a      	add	r2, r1
 80069ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069f2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80069f6:	6013      	str	r3, [r2, #0]
 80069f8:	e02b      	b.n	8006a52 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	015a      	lsls	r2, r3, #5
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	4413      	add	r3, r2
 8006a02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	db12      	blt.n	8006a32 <USB_EPSetStall+0xae>
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00f      	beq.n	8006a32 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	015a      	lsls	r2, r3, #5
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	4413      	add	r3, r2
 8006a1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68ba      	ldr	r2, [r7, #8]
 8006a22:	0151      	lsls	r1, r2, #5
 8006a24:	68fa      	ldr	r2, [r7, #12]
 8006a26:	440a      	add	r2, r1
 8006a28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a2c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006a30:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	015a      	lsls	r2, r3, #5
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	4413      	add	r3, r2
 8006a3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68ba      	ldr	r2, [r7, #8]
 8006a42:	0151      	lsls	r1, r2, #5
 8006a44:	68fa      	ldr	r2, [r7, #12]
 8006a46:	440a      	add	r2, r1
 8006a48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a4c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006a50:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3714      	adds	r7, #20
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b085      	sub	sp, #20
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	785b      	ldrb	r3, [r3, #1]
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d128      	bne.n	8006ace <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	015a      	lsls	r2, r3, #5
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	4413      	add	r3, r2
 8006a84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	68ba      	ldr	r2, [r7, #8]
 8006a8c:	0151      	lsls	r1, r2, #5
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	440a      	add	r2, r1
 8006a92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a96:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006a9a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	791b      	ldrb	r3, [r3, #4]
 8006aa0:	2b03      	cmp	r3, #3
 8006aa2:	d003      	beq.n	8006aac <USB_EPClearStall+0x4c>
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	791b      	ldrb	r3, [r3, #4]
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	d138      	bne.n	8006b1e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	015a      	lsls	r2, r3, #5
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	4413      	add	r3, r2
 8006ab4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	68ba      	ldr	r2, [r7, #8]
 8006abc:	0151      	lsls	r1, r2, #5
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	440a      	add	r2, r1
 8006ac2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ac6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006aca:	6013      	str	r3, [r2, #0]
 8006acc:	e027      	b.n	8006b1e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	015a      	lsls	r2, r3, #5
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	68ba      	ldr	r2, [r7, #8]
 8006ade:	0151      	lsls	r1, r2, #5
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	440a      	add	r2, r1
 8006ae4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ae8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006aec:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	791b      	ldrb	r3, [r3, #4]
 8006af2:	2b03      	cmp	r3, #3
 8006af4:	d003      	beq.n	8006afe <USB_EPClearStall+0x9e>
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	791b      	ldrb	r3, [r3, #4]
 8006afa:	2b02      	cmp	r3, #2
 8006afc:	d10f      	bne.n	8006b1e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	015a      	lsls	r2, r3, #5
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	4413      	add	r3, r2
 8006b06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68ba      	ldr	r2, [r7, #8]
 8006b0e:	0151      	lsls	r1, r2, #5
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	440a      	add	r2, r1
 8006b14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b1c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006b1e:	2300      	movs	r3, #0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3714      	adds	r7, #20
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b085      	sub	sp, #20
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	460b      	mov	r3, r1
 8006b36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	68fa      	ldr	r2, [r7, #12]
 8006b46:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b4a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006b4e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	78fb      	ldrb	r3, [r7, #3]
 8006b5a:	011b      	lsls	r3, r3, #4
 8006b5c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006b60:	68f9      	ldr	r1, [r7, #12]
 8006b62:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b66:	4313      	orrs	r3, r2
 8006b68:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006b6a:	2300      	movs	r3, #0
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3714      	adds	r7, #20
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b085      	sub	sp, #20
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006b92:	f023 0303 	bic.w	r3, r3, #3
 8006b96:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ba6:	f023 0302 	bic.w	r3, r3, #2
 8006baa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3714      	adds	r7, #20
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr

08006bba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006bba:	b480      	push	{r7}
 8006bbc:	b085      	sub	sp, #20
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68fa      	ldr	r2, [r7, #12]
 8006bd0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006bd4:	f023 0303 	bic.w	r3, r3, #3
 8006bd8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006be8:	f043 0302 	orr.w	r3, r3, #2
 8006bec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3714      	adds	r7, #20
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b085      	sub	sp, #20
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	695b      	ldr	r3, [r3, #20]
 8006c08:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	68fa      	ldr	r2, [r7, #12]
 8006c10:	4013      	ands	r3, r2
 8006c12:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006c14:	68fb      	ldr	r3, [r7, #12]
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3714      	adds	r7, #20
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr

08006c22 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c22:	b480      	push	{r7}
 8006c24:	b085      	sub	sp, #20
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c34:	699b      	ldr	r3, [r3, #24]
 8006c36:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c3e:	69db      	ldr	r3, [r3, #28]
 8006c40:	68ba      	ldr	r2, [r7, #8]
 8006c42:	4013      	ands	r3, r2
 8006c44:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	0c1b      	lsrs	r3, r3, #16
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3714      	adds	r7, #20
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr

08006c56 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c56:	b480      	push	{r7}
 8006c58:	b085      	sub	sp, #20
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c68:	699b      	ldr	r3, [r3, #24]
 8006c6a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c72:	69db      	ldr	r3, [r3, #28]
 8006c74:	68ba      	ldr	r2, [r7, #8]
 8006c76:	4013      	ands	r3, r2
 8006c78:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	b29b      	uxth	r3, r3
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3714      	adds	r7, #20
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr

08006c8a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006c8a:	b480      	push	{r7}
 8006c8c:	b085      	sub	sp, #20
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
 8006c92:	460b      	mov	r3, r1
 8006c94:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006c9a:	78fb      	ldrb	r3, [r7, #3]
 8006c9c:	015a      	lsls	r2, r3, #5
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cb0:	695b      	ldr	r3, [r3, #20]
 8006cb2:	68ba      	ldr	r2, [r7, #8]
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006cb8:	68bb      	ldr	r3, [r7, #8]
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3714      	adds	r7, #20
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr

08006cc6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006cc6:	b480      	push	{r7}
 8006cc8:	b087      	sub	sp, #28
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
 8006cce:	460b      	mov	r3, r1
 8006cd0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cdc:	691b      	ldr	r3, [r3, #16]
 8006cde:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ce6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ce8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006cea:	78fb      	ldrb	r3, [r7, #3]
 8006cec:	f003 030f 	and.w	r3, r3, #15
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8006cf6:	01db      	lsls	r3, r3, #7
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	693a      	ldr	r2, [r7, #16]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006d00:	78fb      	ldrb	r3, [r7, #3]
 8006d02:	015a      	lsls	r2, r3, #5
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	4413      	add	r3, r2
 8006d08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	693a      	ldr	r2, [r7, #16]
 8006d10:	4013      	ands	r3, r2
 8006d12:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006d14:	68bb      	ldr	r3, [r7, #8]
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	371c      	adds	r7, #28
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr

08006d22 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d22:	b480      	push	{r7}
 8006d24:	b083      	sub	sp, #12
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	695b      	ldr	r3, [r3, #20]
 8006d2e:	f003 0301 	and.w	r3, r3, #1
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	370c      	adds	r7, #12
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr

08006d3e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d3e:	b480      	push	{r7}
 8006d40:	b085      	sub	sp, #20
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d58:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006d5c:	f023 0307 	bic.w	r3, r3, #7
 8006d60:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d74:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d76:	2300      	movs	r3, #0
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3714      	adds	r7, #20
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b087      	sub	sp, #28
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	607a      	str	r2, [r7, #4]
 8006d90:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	333c      	adds	r3, #60	@ 0x3c
 8006d9a:	3304      	adds	r3, #4
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	4a26      	ldr	r2, [pc, #152]	@ (8006e3c <USB_EP0_OutStart+0xb8>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d90a      	bls.n	8006dbe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006db4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006db8:	d101      	bne.n	8006dbe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	e037      	b.n	8006e2e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	697a      	ldr	r2, [r7, #20]
 8006dd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006dd8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006ddc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	697a      	ldr	r2, [r7, #20]
 8006de8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006dec:	f043 0318 	orr.w	r3, r3, #24
 8006df0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	697a      	ldr	r2, [r7, #20]
 8006dfc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e00:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006e04:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006e06:	7afb      	ldrb	r3, [r7, #11]
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d10f      	bne.n	8006e2c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e12:	461a      	mov	r2, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	697a      	ldr	r2, [r7, #20]
 8006e22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e26:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006e2a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e2c:	2300      	movs	r3, #0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	371c      	adds	r7, #28
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr
 8006e3a:	bf00      	nop
 8006e3c:	4f54300a 	.word	0x4f54300a

08006e40 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b085      	sub	sp, #20
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	3301      	adds	r3, #1
 8006e50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e58:	d901      	bls.n	8006e5e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	e01b      	b.n	8006e96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	daf2      	bge.n	8006e4c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006e66:	2300      	movs	r3, #0
 8006e68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	f043 0201 	orr.w	r2, r3, #1
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	3301      	adds	r3, #1
 8006e7a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e82:	d901      	bls.n	8006e88 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006e84:	2303      	movs	r3, #3
 8006e86:	e006      	b.n	8006e96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	f003 0301 	and.w	r3, r3, #1
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d0f0      	beq.n	8006e76 <USB_CoreReset+0x36>

  return HAL_OK;
 8006e94:	2300      	movs	r3, #0
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3714      	adds	r7, #20
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr
	...

08006ea4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	460b      	mov	r3, r1
 8006eae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006eb0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006eb4:	f005 fada 	bl	800c46c <USBD_static_malloc>
 8006eb8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d109      	bne.n	8006ed4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	32b0      	adds	r2, #176	@ 0xb0
 8006eca:	2100      	movs	r1, #0
 8006ecc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006ed0:	2302      	movs	r3, #2
 8006ed2:	e0d4      	b.n	800707e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006ed4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006ed8:	2100      	movs	r1, #0
 8006eda:	68f8      	ldr	r0, [r7, #12]
 8006edc:	f005 fb0a 	bl	800c4f4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	32b0      	adds	r2, #176	@ 0xb0
 8006eea:	68f9      	ldr	r1, [r7, #12]
 8006eec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	32b0      	adds	r2, #176	@ 0xb0
 8006efa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	7c1b      	ldrb	r3, [r3, #16]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d138      	bne.n	8006f7e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006f0c:	4b5e      	ldr	r3, [pc, #376]	@ (8007088 <USBD_CDC_Init+0x1e4>)
 8006f0e:	7819      	ldrb	r1, [r3, #0]
 8006f10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006f14:	2202      	movs	r2, #2
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f005 f985 	bl	800c226 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006f1c:	4b5a      	ldr	r3, [pc, #360]	@ (8007088 <USBD_CDC_Init+0x1e4>)
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	f003 020f 	and.w	r2, r3, #15
 8006f24:	6879      	ldr	r1, [r7, #4]
 8006f26:	4613      	mov	r3, r2
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	4413      	add	r3, r2
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	440b      	add	r3, r1
 8006f30:	3324      	adds	r3, #36	@ 0x24
 8006f32:	2201      	movs	r2, #1
 8006f34:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006f36:	4b55      	ldr	r3, [pc, #340]	@ (800708c <USBD_CDC_Init+0x1e8>)
 8006f38:	7819      	ldrb	r1, [r3, #0]
 8006f3a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006f3e:	2202      	movs	r2, #2
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f005 f970 	bl	800c226 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006f46:	4b51      	ldr	r3, [pc, #324]	@ (800708c <USBD_CDC_Init+0x1e8>)
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	f003 020f 	and.w	r2, r3, #15
 8006f4e:	6879      	ldr	r1, [r7, #4]
 8006f50:	4613      	mov	r3, r2
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	4413      	add	r3, r2
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	440b      	add	r3, r1
 8006f5a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006f5e:	2201      	movs	r2, #1
 8006f60:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006f62:	4b4b      	ldr	r3, [pc, #300]	@ (8007090 <USBD_CDC_Init+0x1ec>)
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	f003 020f 	and.w	r2, r3, #15
 8006f6a:	6879      	ldr	r1, [r7, #4]
 8006f6c:	4613      	mov	r3, r2
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	4413      	add	r3, r2
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	440b      	add	r3, r1
 8006f76:	3326      	adds	r3, #38	@ 0x26
 8006f78:	2210      	movs	r2, #16
 8006f7a:	801a      	strh	r2, [r3, #0]
 8006f7c:	e035      	b.n	8006fea <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006f7e:	4b42      	ldr	r3, [pc, #264]	@ (8007088 <USBD_CDC_Init+0x1e4>)
 8006f80:	7819      	ldrb	r1, [r3, #0]
 8006f82:	2340      	movs	r3, #64	@ 0x40
 8006f84:	2202      	movs	r2, #2
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f005 f94d 	bl	800c226 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006f8c:	4b3e      	ldr	r3, [pc, #248]	@ (8007088 <USBD_CDC_Init+0x1e4>)
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	f003 020f 	and.w	r2, r3, #15
 8006f94:	6879      	ldr	r1, [r7, #4]
 8006f96:	4613      	mov	r3, r2
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	4413      	add	r3, r2
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	440b      	add	r3, r1
 8006fa0:	3324      	adds	r3, #36	@ 0x24
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006fa6:	4b39      	ldr	r3, [pc, #228]	@ (800708c <USBD_CDC_Init+0x1e8>)
 8006fa8:	7819      	ldrb	r1, [r3, #0]
 8006faa:	2340      	movs	r3, #64	@ 0x40
 8006fac:	2202      	movs	r2, #2
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f005 f939 	bl	800c226 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006fb4:	4b35      	ldr	r3, [pc, #212]	@ (800708c <USBD_CDC_Init+0x1e8>)
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	f003 020f 	and.w	r2, r3, #15
 8006fbc:	6879      	ldr	r1, [r7, #4]
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	4413      	add	r3, r2
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	440b      	add	r3, r1
 8006fc8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006fcc:	2201      	movs	r2, #1
 8006fce:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006fd0:	4b2f      	ldr	r3, [pc, #188]	@ (8007090 <USBD_CDC_Init+0x1ec>)
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	f003 020f 	and.w	r2, r3, #15
 8006fd8:	6879      	ldr	r1, [r7, #4]
 8006fda:	4613      	mov	r3, r2
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	4413      	add	r3, r2
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	440b      	add	r3, r1
 8006fe4:	3326      	adds	r3, #38	@ 0x26
 8006fe6:	2210      	movs	r2, #16
 8006fe8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006fea:	4b29      	ldr	r3, [pc, #164]	@ (8007090 <USBD_CDC_Init+0x1ec>)
 8006fec:	7819      	ldrb	r1, [r3, #0]
 8006fee:	2308      	movs	r3, #8
 8006ff0:	2203      	movs	r2, #3
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f005 f917 	bl	800c226 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006ff8:	4b25      	ldr	r3, [pc, #148]	@ (8007090 <USBD_CDC_Init+0x1ec>)
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	f003 020f 	and.w	r2, r3, #15
 8007000:	6879      	ldr	r1, [r7, #4]
 8007002:	4613      	mov	r3, r2
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	4413      	add	r3, r2
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	440b      	add	r3, r1
 800700c:	3324      	adds	r3, #36	@ 0x24
 800700e:	2201      	movs	r2, #1
 8007010:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2200      	movs	r2, #0
 8007016:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	33b0      	adds	r3, #176	@ 0xb0
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	4413      	add	r3, r2
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2200      	movs	r2, #0
 8007032:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2200      	movs	r2, #0
 800703a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007044:	2b00      	cmp	r3, #0
 8007046:	d101      	bne.n	800704c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007048:	2302      	movs	r3, #2
 800704a:	e018      	b.n	800707e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	7c1b      	ldrb	r3, [r3, #16]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d10a      	bne.n	800706a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007054:	4b0d      	ldr	r3, [pc, #52]	@ (800708c <USBD_CDC_Init+0x1e8>)
 8007056:	7819      	ldrb	r1, [r3, #0]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800705e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f005 f9ce 	bl	800c404 <USBD_LL_PrepareReceive>
 8007068:	e008      	b.n	800707c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800706a:	4b08      	ldr	r3, [pc, #32]	@ (800708c <USBD_CDC_Init+0x1e8>)
 800706c:	7819      	ldrb	r1, [r3, #0]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007074:	2340      	movs	r3, #64	@ 0x40
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f005 f9c4 	bl	800c404 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800707c:	2300      	movs	r3, #0
}
 800707e:	4618      	mov	r0, r3
 8007080:	3710      	adds	r7, #16
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	20000093 	.word	0x20000093
 800708c:	20000094 	.word	0x20000094
 8007090:	20000095 	.word	0x20000095

08007094 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	460b      	mov	r3, r1
 800709e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80070a0:	4b3a      	ldr	r3, [pc, #232]	@ (800718c <USBD_CDC_DeInit+0xf8>)
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	4619      	mov	r1, r3
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f005 f8e3 	bl	800c272 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80070ac:	4b37      	ldr	r3, [pc, #220]	@ (800718c <USBD_CDC_DeInit+0xf8>)
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	f003 020f 	and.w	r2, r3, #15
 80070b4:	6879      	ldr	r1, [r7, #4]
 80070b6:	4613      	mov	r3, r2
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	4413      	add	r3, r2
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	440b      	add	r3, r1
 80070c0:	3324      	adds	r3, #36	@ 0x24
 80070c2:	2200      	movs	r2, #0
 80070c4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80070c6:	4b32      	ldr	r3, [pc, #200]	@ (8007190 <USBD_CDC_DeInit+0xfc>)
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	4619      	mov	r1, r3
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f005 f8d0 	bl	800c272 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80070d2:	4b2f      	ldr	r3, [pc, #188]	@ (8007190 <USBD_CDC_DeInit+0xfc>)
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	f003 020f 	and.w	r2, r3, #15
 80070da:	6879      	ldr	r1, [r7, #4]
 80070dc:	4613      	mov	r3, r2
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	4413      	add	r3, r2
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	440b      	add	r3, r1
 80070e6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80070ea:	2200      	movs	r2, #0
 80070ec:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80070ee:	4b29      	ldr	r3, [pc, #164]	@ (8007194 <USBD_CDC_DeInit+0x100>)
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	4619      	mov	r1, r3
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f005 f8bc 	bl	800c272 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80070fa:	4b26      	ldr	r3, [pc, #152]	@ (8007194 <USBD_CDC_DeInit+0x100>)
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	f003 020f 	and.w	r2, r3, #15
 8007102:	6879      	ldr	r1, [r7, #4]
 8007104:	4613      	mov	r3, r2
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	4413      	add	r3, r2
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	440b      	add	r3, r1
 800710e:	3324      	adds	r3, #36	@ 0x24
 8007110:	2200      	movs	r2, #0
 8007112:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007114:	4b1f      	ldr	r3, [pc, #124]	@ (8007194 <USBD_CDC_DeInit+0x100>)
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	f003 020f 	and.w	r2, r3, #15
 800711c:	6879      	ldr	r1, [r7, #4]
 800711e:	4613      	mov	r3, r2
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	4413      	add	r3, r2
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	440b      	add	r3, r1
 8007128:	3326      	adds	r3, #38	@ 0x26
 800712a:	2200      	movs	r2, #0
 800712c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	32b0      	adds	r2, #176	@ 0xb0
 8007138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d01f      	beq.n	8007180 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	33b0      	adds	r3, #176	@ 0xb0
 800714a:	009b      	lsls	r3, r3, #2
 800714c:	4413      	add	r3, r2
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	32b0      	adds	r2, #176	@ 0xb0
 800715e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007162:	4618      	mov	r0, r3
 8007164:	f005 f990 	bl	800c488 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	32b0      	adds	r2, #176	@ 0xb0
 8007172:	2100      	movs	r1, #0
 8007174:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	3708      	adds	r7, #8
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	20000093 	.word	0x20000093
 8007190:	20000094 	.word	0x20000094
 8007194:	20000095 	.word	0x20000095

08007198 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b086      	sub	sp, #24
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	32b0      	adds	r2, #176	@ 0xb0
 80071ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071b0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80071b2:	2300      	movs	r3, #0
 80071b4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80071b6:	2300      	movs	r3, #0
 80071b8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80071ba:	2300      	movs	r3, #0
 80071bc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d101      	bne.n	80071c8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80071c4:	2303      	movs	r3, #3
 80071c6:	e0bf      	b.n	8007348 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d050      	beq.n	8007276 <USBD_CDC_Setup+0xde>
 80071d4:	2b20      	cmp	r3, #32
 80071d6:	f040 80af 	bne.w	8007338 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	88db      	ldrh	r3, [r3, #6]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d03a      	beq.n	8007258 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	b25b      	sxtb	r3, r3
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	da1b      	bge.n	8007224 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	33b0      	adds	r3, #176	@ 0xb0
 80071f6:	009b      	lsls	r3, r3, #2
 80071f8:	4413      	add	r3, r2
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	683a      	ldr	r2, [r7, #0]
 8007200:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007202:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007204:	683a      	ldr	r2, [r7, #0]
 8007206:	88d2      	ldrh	r2, [r2, #6]
 8007208:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	88db      	ldrh	r3, [r3, #6]
 800720e:	2b07      	cmp	r3, #7
 8007210:	bf28      	it	cs
 8007212:	2307      	movcs	r3, #7
 8007214:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	89fa      	ldrh	r2, [r7, #14]
 800721a:	4619      	mov	r1, r3
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f001 fd93 	bl	8008d48 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007222:	e090      	b.n	8007346 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	785a      	ldrb	r2, [r3, #1]
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	88db      	ldrh	r3, [r3, #6]
 8007232:	2b3f      	cmp	r3, #63	@ 0x3f
 8007234:	d803      	bhi.n	800723e <USBD_CDC_Setup+0xa6>
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	88db      	ldrh	r3, [r3, #6]
 800723a:	b2da      	uxtb	r2, r3
 800723c:	e000      	b.n	8007240 <USBD_CDC_Setup+0xa8>
 800723e:	2240      	movs	r2, #64	@ 0x40
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007246:	6939      	ldr	r1, [r7, #16]
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800724e:	461a      	mov	r2, r3
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f001 fda5 	bl	8008da0 <USBD_CtlPrepareRx>
      break;
 8007256:	e076      	b.n	8007346 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	33b0      	adds	r3, #176	@ 0xb0
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	4413      	add	r3, r2
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	683a      	ldr	r2, [r7, #0]
 800726c:	7850      	ldrb	r0, [r2, #1]
 800726e:	2200      	movs	r2, #0
 8007270:	6839      	ldr	r1, [r7, #0]
 8007272:	4798      	blx	r3
      break;
 8007274:	e067      	b.n	8007346 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	785b      	ldrb	r3, [r3, #1]
 800727a:	2b0b      	cmp	r3, #11
 800727c:	d851      	bhi.n	8007322 <USBD_CDC_Setup+0x18a>
 800727e:	a201      	add	r2, pc, #4	@ (adr r2, 8007284 <USBD_CDC_Setup+0xec>)
 8007280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007284:	080072b5 	.word	0x080072b5
 8007288:	08007331 	.word	0x08007331
 800728c:	08007323 	.word	0x08007323
 8007290:	08007323 	.word	0x08007323
 8007294:	08007323 	.word	0x08007323
 8007298:	08007323 	.word	0x08007323
 800729c:	08007323 	.word	0x08007323
 80072a0:	08007323 	.word	0x08007323
 80072a4:	08007323 	.word	0x08007323
 80072a8:	08007323 	.word	0x08007323
 80072ac:	080072df 	.word	0x080072df
 80072b0:	08007309 	.word	0x08007309
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	2b03      	cmp	r3, #3
 80072be:	d107      	bne.n	80072d0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80072c0:	f107 030a 	add.w	r3, r7, #10
 80072c4:	2202      	movs	r2, #2
 80072c6:	4619      	mov	r1, r3
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f001 fd3d 	bl	8008d48 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80072ce:	e032      	b.n	8007336 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80072d0:	6839      	ldr	r1, [r7, #0]
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f001 fcbb 	bl	8008c4e <USBD_CtlError>
            ret = USBD_FAIL;
 80072d8:	2303      	movs	r3, #3
 80072da:	75fb      	strb	r3, [r7, #23]
          break;
 80072dc:	e02b      	b.n	8007336 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b03      	cmp	r3, #3
 80072e8:	d107      	bne.n	80072fa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80072ea:	f107 030d 	add.w	r3, r7, #13
 80072ee:	2201      	movs	r2, #1
 80072f0:	4619      	mov	r1, r3
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f001 fd28 	bl	8008d48 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80072f8:	e01d      	b.n	8007336 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80072fa:	6839      	ldr	r1, [r7, #0]
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f001 fca6 	bl	8008c4e <USBD_CtlError>
            ret = USBD_FAIL;
 8007302:	2303      	movs	r3, #3
 8007304:	75fb      	strb	r3, [r7, #23]
          break;
 8007306:	e016      	b.n	8007336 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800730e:	b2db      	uxtb	r3, r3
 8007310:	2b03      	cmp	r3, #3
 8007312:	d00f      	beq.n	8007334 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007314:	6839      	ldr	r1, [r7, #0]
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f001 fc99 	bl	8008c4e <USBD_CtlError>
            ret = USBD_FAIL;
 800731c:	2303      	movs	r3, #3
 800731e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007320:	e008      	b.n	8007334 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007322:	6839      	ldr	r1, [r7, #0]
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f001 fc92 	bl	8008c4e <USBD_CtlError>
          ret = USBD_FAIL;
 800732a:	2303      	movs	r3, #3
 800732c:	75fb      	strb	r3, [r7, #23]
          break;
 800732e:	e002      	b.n	8007336 <USBD_CDC_Setup+0x19e>
          break;
 8007330:	bf00      	nop
 8007332:	e008      	b.n	8007346 <USBD_CDC_Setup+0x1ae>
          break;
 8007334:	bf00      	nop
      }
      break;
 8007336:	e006      	b.n	8007346 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007338:	6839      	ldr	r1, [r7, #0]
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f001 fc87 	bl	8008c4e <USBD_CtlError>
      ret = USBD_FAIL;
 8007340:	2303      	movs	r3, #3
 8007342:	75fb      	strb	r3, [r7, #23]
      break;
 8007344:	bf00      	nop
  }

  return (uint8_t)ret;
 8007346:	7dfb      	ldrb	r3, [r7, #23]
}
 8007348:	4618      	mov	r0, r3
 800734a:	3718      	adds	r7, #24
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	460b      	mov	r3, r1
 800735a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007362:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	32b0      	adds	r2, #176	@ 0xb0
 800736e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d101      	bne.n	800737a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007376:	2303      	movs	r3, #3
 8007378:	e065      	b.n	8007446 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	32b0      	adds	r2, #176	@ 0xb0
 8007384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007388:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800738a:	78fb      	ldrb	r3, [r7, #3]
 800738c:	f003 020f 	and.w	r2, r3, #15
 8007390:	6879      	ldr	r1, [r7, #4]
 8007392:	4613      	mov	r3, r2
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	4413      	add	r3, r2
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	440b      	add	r3, r1
 800739c:	3318      	adds	r3, #24
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d02f      	beq.n	8007404 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80073a4:	78fb      	ldrb	r3, [r7, #3]
 80073a6:	f003 020f 	and.w	r2, r3, #15
 80073aa:	6879      	ldr	r1, [r7, #4]
 80073ac:	4613      	mov	r3, r2
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	4413      	add	r3, r2
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	440b      	add	r3, r1
 80073b6:	3318      	adds	r3, #24
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	78fb      	ldrb	r3, [r7, #3]
 80073bc:	f003 010f 	and.w	r1, r3, #15
 80073c0:	68f8      	ldr	r0, [r7, #12]
 80073c2:	460b      	mov	r3, r1
 80073c4:	00db      	lsls	r3, r3, #3
 80073c6:	440b      	add	r3, r1
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	4403      	add	r3, r0
 80073cc:	331c      	adds	r3, #28
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	fbb2 f1f3 	udiv	r1, r2, r3
 80073d4:	fb01 f303 	mul.w	r3, r1, r3
 80073d8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d112      	bne.n	8007404 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80073de:	78fb      	ldrb	r3, [r7, #3]
 80073e0:	f003 020f 	and.w	r2, r3, #15
 80073e4:	6879      	ldr	r1, [r7, #4]
 80073e6:	4613      	mov	r3, r2
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	4413      	add	r3, r2
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	440b      	add	r3, r1
 80073f0:	3318      	adds	r3, #24
 80073f2:	2200      	movs	r2, #0
 80073f4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80073f6:	78f9      	ldrb	r1, [r7, #3]
 80073f8:	2300      	movs	r3, #0
 80073fa:	2200      	movs	r2, #0
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f004 ffe0 	bl	800c3c2 <USBD_LL_Transmit>
 8007402:	e01f      	b.n	8007444 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	2200      	movs	r2, #0
 8007408:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	33b0      	adds	r3, #176	@ 0xb0
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	4413      	add	r3, r2
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	691b      	ldr	r3, [r3, #16]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d010      	beq.n	8007444 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	33b0      	adds	r3, #176	@ 0xb0
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	4413      	add	r3, r2
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	68ba      	ldr	r2, [r7, #8]
 8007436:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800743a:	68ba      	ldr	r2, [r7, #8]
 800743c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007440:	78fa      	ldrb	r2, [r7, #3]
 8007442:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007444:	2300      	movs	r3, #0
}
 8007446:	4618      	mov	r0, r3
 8007448:	3710      	adds	r7, #16
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}

0800744e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800744e:	b580      	push	{r7, lr}
 8007450:	b084      	sub	sp, #16
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
 8007456:	460b      	mov	r3, r1
 8007458:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	32b0      	adds	r2, #176	@ 0xb0
 8007464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007468:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	32b0      	adds	r2, #176	@ 0xb0
 8007474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d101      	bne.n	8007480 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800747c:	2303      	movs	r3, #3
 800747e:	e01a      	b.n	80074b6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007480:	78fb      	ldrb	r3, [r7, #3]
 8007482:	4619      	mov	r1, r3
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f004 ffde 	bl	800c446 <USBD_LL_GetRxDataSize>
 800748a:	4602      	mov	r2, r0
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	33b0      	adds	r3, #176	@ 0xb0
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	4413      	add	r3, r2
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80074aa:	68fa      	ldr	r2, [r7, #12]
 80074ac:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80074b0:	4611      	mov	r1, r2
 80074b2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80074b4:	2300      	movs	r3, #0
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3710      	adds	r7, #16
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}

080074be <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80074be:	b580      	push	{r7, lr}
 80074c0:	b084      	sub	sp, #16
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	32b0      	adds	r2, #176	@ 0xb0
 80074d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074d4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d101      	bne.n	80074e0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80074dc:	2303      	movs	r3, #3
 80074de:	e024      	b.n	800752a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	33b0      	adds	r3, #176	@ 0xb0
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	4413      	add	r3, r2
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d019      	beq.n	8007528 <USBD_CDC_EP0_RxReady+0x6a>
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80074fa:	2bff      	cmp	r3, #255	@ 0xff
 80074fc:	d014      	beq.n	8007528 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	33b0      	adds	r3, #176	@ 0xb0
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	4413      	add	r3, r2
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	68fa      	ldr	r2, [r7, #12]
 8007512:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007516:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007518:	68fa      	ldr	r2, [r7, #12]
 800751a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800751e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	22ff      	movs	r2, #255	@ 0xff
 8007524:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	3710      	adds	r7, #16
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
	...

08007534 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b086      	sub	sp, #24
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800753c:	2182      	movs	r1, #130	@ 0x82
 800753e:	4818      	ldr	r0, [pc, #96]	@ (80075a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007540:	f000 fd4f 	bl	8007fe2 <USBD_GetEpDesc>
 8007544:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007546:	2101      	movs	r1, #1
 8007548:	4815      	ldr	r0, [pc, #84]	@ (80075a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800754a:	f000 fd4a 	bl	8007fe2 <USBD_GetEpDesc>
 800754e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007550:	2181      	movs	r1, #129	@ 0x81
 8007552:	4813      	ldr	r0, [pc, #76]	@ (80075a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007554:	f000 fd45 	bl	8007fe2 <USBD_GetEpDesc>
 8007558:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d002      	beq.n	8007566 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	2210      	movs	r2, #16
 8007564:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d006      	beq.n	800757a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	2200      	movs	r2, #0
 8007570:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007574:	711a      	strb	r2, [r3, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d006      	beq.n	800758e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2200      	movs	r2, #0
 8007584:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007588:	711a      	strb	r2, [r3, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2243      	movs	r2, #67	@ 0x43
 8007592:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007594:	4b02      	ldr	r3, [pc, #8]	@ (80075a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007596:	4618      	mov	r0, r3
 8007598:	3718      	adds	r7, #24
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	20000050 	.word	0x20000050

080075a4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b086      	sub	sp, #24
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80075ac:	2182      	movs	r1, #130	@ 0x82
 80075ae:	4818      	ldr	r0, [pc, #96]	@ (8007610 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80075b0:	f000 fd17 	bl	8007fe2 <USBD_GetEpDesc>
 80075b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80075b6:	2101      	movs	r1, #1
 80075b8:	4815      	ldr	r0, [pc, #84]	@ (8007610 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80075ba:	f000 fd12 	bl	8007fe2 <USBD_GetEpDesc>
 80075be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80075c0:	2181      	movs	r1, #129	@ 0x81
 80075c2:	4813      	ldr	r0, [pc, #76]	@ (8007610 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80075c4:	f000 fd0d 	bl	8007fe2 <USBD_GetEpDesc>
 80075c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d002      	beq.n	80075d6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	2210      	movs	r2, #16
 80075d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d006      	beq.n	80075ea <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	2200      	movs	r2, #0
 80075e0:	711a      	strb	r2, [r3, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f042 0202 	orr.w	r2, r2, #2
 80075e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d006      	beq.n	80075fe <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2200      	movs	r2, #0
 80075f4:	711a      	strb	r2, [r3, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f042 0202 	orr.w	r2, r2, #2
 80075fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2243      	movs	r2, #67	@ 0x43
 8007602:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007604:	4b02      	ldr	r3, [pc, #8]	@ (8007610 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007606:	4618      	mov	r0, r3
 8007608:	3718      	adds	r7, #24
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop
 8007610:	20000050 	.word	0x20000050

08007614 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b086      	sub	sp, #24
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800761c:	2182      	movs	r1, #130	@ 0x82
 800761e:	4818      	ldr	r0, [pc, #96]	@ (8007680 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007620:	f000 fcdf 	bl	8007fe2 <USBD_GetEpDesc>
 8007624:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007626:	2101      	movs	r1, #1
 8007628:	4815      	ldr	r0, [pc, #84]	@ (8007680 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800762a:	f000 fcda 	bl	8007fe2 <USBD_GetEpDesc>
 800762e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007630:	2181      	movs	r1, #129	@ 0x81
 8007632:	4813      	ldr	r0, [pc, #76]	@ (8007680 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007634:	f000 fcd5 	bl	8007fe2 <USBD_GetEpDesc>
 8007638:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d002      	beq.n	8007646 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	2210      	movs	r2, #16
 8007644:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d006      	beq.n	800765a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	2200      	movs	r2, #0
 8007650:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007654:	711a      	strb	r2, [r3, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d006      	beq.n	800766e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2200      	movs	r2, #0
 8007664:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007668:	711a      	strb	r2, [r3, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2243      	movs	r2, #67	@ 0x43
 8007672:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007674:	4b02      	ldr	r3, [pc, #8]	@ (8007680 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007676:	4618      	mov	r0, r3
 8007678:	3718      	adds	r7, #24
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	20000050 	.word	0x20000050

08007684 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	220a      	movs	r2, #10
 8007690:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007692:	4b03      	ldr	r3, [pc, #12]	@ (80076a0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007694:	4618      	mov	r0, r3
 8007696:	370c      	adds	r7, #12
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr
 80076a0:	2000000c 	.word	0x2000000c

080076a4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d101      	bne.n	80076b8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80076b4:	2303      	movs	r3, #3
 80076b6:	e009      	b.n	80076cc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	33b0      	adds	r3, #176	@ 0xb0
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	4413      	add	r3, r2
 80076c6:	683a      	ldr	r2, [r7, #0]
 80076c8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80076ca:	2300      	movs	r3, #0
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80076d8:	b480      	push	{r7}
 80076da:	b087      	sub	sp, #28
 80076dc:	af00      	add	r7, sp, #0
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	60b9      	str	r1, [r7, #8]
 80076e2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	32b0      	adds	r2, #176	@ 0xb0
 80076ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076f2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d101      	bne.n	80076fe <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80076fa:	2303      	movs	r3, #3
 80076fc:	e008      	b.n	8007710 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	68ba      	ldr	r2, [r7, #8]
 8007702:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800770e:	2300      	movs	r3, #0
}
 8007710:	4618      	mov	r0, r3
 8007712:	371c      	adds	r7, #28
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800771c:	b480      	push	{r7}
 800771e:	b085      	sub	sp, #20
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	32b0      	adds	r2, #176	@ 0xb0
 8007730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007734:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d101      	bne.n	8007740 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800773c:	2303      	movs	r3, #3
 800773e:	e004      	b.n	800774a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	683a      	ldr	r2, [r7, #0]
 8007744:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007748:	2300      	movs	r3, #0
}
 800774a:	4618      	mov	r0, r3
 800774c:	3714      	adds	r7, #20
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr
	...

08007758 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	32b0      	adds	r2, #176	@ 0xb0
 800776a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800776e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007770:	2301      	movs	r3, #1
 8007772:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d101      	bne.n	800777e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800777a:	2303      	movs	r3, #3
 800777c:	e025      	b.n	80077ca <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007784:	2b00      	cmp	r3, #0
 8007786:	d11f      	bne.n	80077c8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	2201      	movs	r2, #1
 800778c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007790:	4b10      	ldr	r3, [pc, #64]	@ (80077d4 <USBD_CDC_TransmitPacket+0x7c>)
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	f003 020f 	and.w	r2, r3, #15
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	4613      	mov	r3, r2
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	4413      	add	r3, r2
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	4403      	add	r3, r0
 80077aa:	3318      	adds	r3, #24
 80077ac:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80077ae:	4b09      	ldr	r3, [pc, #36]	@ (80077d4 <USBD_CDC_TransmitPacket+0x7c>)
 80077b0:	7819      	ldrb	r1, [r3, #0]
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f004 fdff 	bl	800c3c2 <USBD_LL_Transmit>

    ret = USBD_OK;
 80077c4:	2300      	movs	r3, #0
 80077c6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80077c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3710      	adds	r7, #16
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	20000093 	.word	0x20000093

080077d8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	32b0      	adds	r2, #176	@ 0xb0
 80077ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077ee:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	32b0      	adds	r2, #176	@ 0xb0
 80077fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d101      	bne.n	8007806 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007802:	2303      	movs	r3, #3
 8007804:	e018      	b.n	8007838 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	7c1b      	ldrb	r3, [r3, #16]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d10a      	bne.n	8007824 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800780e:	4b0c      	ldr	r3, [pc, #48]	@ (8007840 <USBD_CDC_ReceivePacket+0x68>)
 8007810:	7819      	ldrb	r1, [r3, #0]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007818:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f004 fdf1 	bl	800c404 <USBD_LL_PrepareReceive>
 8007822:	e008      	b.n	8007836 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007824:	4b06      	ldr	r3, [pc, #24]	@ (8007840 <USBD_CDC_ReceivePacket+0x68>)
 8007826:	7819      	ldrb	r1, [r3, #0]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800782e:	2340      	movs	r3, #64	@ 0x40
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f004 fde7 	bl	800c404 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007836:	2300      	movs	r3, #0
}
 8007838:	4618      	mov	r0, r3
 800783a:	3710      	adds	r7, #16
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}
 8007840:	20000094 	.word	0x20000094

08007844 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b086      	sub	sp, #24
 8007848:	af00      	add	r7, sp, #0
 800784a:	60f8      	str	r0, [r7, #12]
 800784c:	60b9      	str	r1, [r7, #8]
 800784e:	4613      	mov	r3, r2
 8007850:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d101      	bne.n	800785c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007858:	2303      	movs	r3, #3
 800785a:	e01f      	b.n	800789c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2200      	movs	r2, #0
 8007860:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2200      	movs	r2, #0
 8007868:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2200      	movs	r2, #0
 8007870:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d003      	beq.n	8007882 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	68ba      	ldr	r2, [r7, #8]
 800787e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2201      	movs	r2, #1
 8007886:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	79fa      	ldrb	r2, [r7, #7]
 800788e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007890:	68f8      	ldr	r0, [r7, #12]
 8007892:	f004 fc61 	bl	800c158 <USBD_LL_Init>
 8007896:	4603      	mov	r3, r0
 8007898:	75fb      	strb	r3, [r7, #23]

  return ret;
 800789a:	7dfb      	ldrb	r3, [r7, #23]
}
 800789c:	4618      	mov	r0, r3
 800789e:	3718      	adds	r7, #24
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80078ae:	2300      	movs	r3, #0
 80078b0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d101      	bne.n	80078bc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80078b8:	2303      	movs	r3, #3
 80078ba:	e025      	b.n	8007908 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	683a      	ldr	r2, [r7, #0]
 80078c0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	32ae      	adds	r2, #174	@ 0xae
 80078ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00f      	beq.n	80078f8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	32ae      	adds	r2, #174	@ 0xae
 80078e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078e8:	f107 020e 	add.w	r2, r7, #14
 80078ec:	4610      	mov	r0, r2
 80078ee:	4798      	blx	r3
 80078f0:	4602      	mov	r2, r0
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80078fe:	1c5a      	adds	r2, r3, #1
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007906:	2300      	movs	r3, #0
}
 8007908:	4618      	mov	r0, r3
 800790a:	3710      	adds	r7, #16
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b082      	sub	sp, #8
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f004 fc69 	bl	800c1f0 <USBD_LL_Start>
 800791e:	4603      	mov	r3, r0
}
 8007920:	4618      	mov	r0, r3
 8007922:	3708      	adds	r7, #8
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007928:	b480      	push	{r7}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007930:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007932:	4618      	mov	r0, r3
 8007934:	370c      	adds	r7, #12
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr

0800793e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b084      	sub	sp, #16
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
 8007946:	460b      	mov	r3, r1
 8007948:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800794a:	2300      	movs	r3, #0
 800794c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007954:	2b00      	cmp	r3, #0
 8007956:	d009      	beq.n	800796c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	78fa      	ldrb	r2, [r7, #3]
 8007962:	4611      	mov	r1, r2
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	4798      	blx	r3
 8007968:	4603      	mov	r3, r0
 800796a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800796c:	7bfb      	ldrb	r3, [r7, #15]
}
 800796e:	4618      	mov	r0, r3
 8007970:	3710      	adds	r7, #16
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}

08007976 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007976:	b580      	push	{r7, lr}
 8007978:	b084      	sub	sp, #16
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
 800797e:	460b      	mov	r3, r1
 8007980:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007982:	2300      	movs	r3, #0
 8007984:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	78fa      	ldrb	r2, [r7, #3]
 8007990:	4611      	mov	r1, r2
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	4798      	blx	r3
 8007996:	4603      	mov	r3, r0
 8007998:	2b00      	cmp	r3, #0
 800799a:	d001      	beq.n	80079a0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800799c:	2303      	movs	r3, #3
 800799e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80079a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}

080079aa <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b084      	sub	sp, #16
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
 80079b2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80079ba:	6839      	ldr	r1, [r7, #0]
 80079bc:	4618      	mov	r0, r3
 80079be:	f001 f90c 	bl	8008bda <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2201      	movs	r2, #1
 80079c6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80079d0:	461a      	mov	r2, r3
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80079de:	f003 031f 	and.w	r3, r3, #31
 80079e2:	2b02      	cmp	r3, #2
 80079e4:	d01a      	beq.n	8007a1c <USBD_LL_SetupStage+0x72>
 80079e6:	2b02      	cmp	r3, #2
 80079e8:	d822      	bhi.n	8007a30 <USBD_LL_SetupStage+0x86>
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d002      	beq.n	80079f4 <USBD_LL_SetupStage+0x4a>
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d00a      	beq.n	8007a08 <USBD_LL_SetupStage+0x5e>
 80079f2:	e01d      	b.n	8007a30 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80079fa:	4619      	mov	r1, r3
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 fb63 	bl	80080c8 <USBD_StdDevReq>
 8007a02:	4603      	mov	r3, r0
 8007a04:	73fb      	strb	r3, [r7, #15]
      break;
 8007a06:	e020      	b.n	8007a4a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007a0e:	4619      	mov	r1, r3
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 fbcb 	bl	80081ac <USBD_StdItfReq>
 8007a16:	4603      	mov	r3, r0
 8007a18:	73fb      	strb	r3, [r7, #15]
      break;
 8007a1a:	e016      	b.n	8007a4a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007a22:	4619      	mov	r1, r3
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 fc2d 	bl	8008284 <USBD_StdEPReq>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	73fb      	strb	r3, [r7, #15]
      break;
 8007a2e:	e00c      	b.n	8007a4a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007a36:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f004 fc36 	bl	800c2b0 <USBD_LL_StallEP>
 8007a44:	4603      	mov	r3, r0
 8007a46:	73fb      	strb	r3, [r7, #15]
      break;
 8007a48:	bf00      	nop
  }

  return ret;
 8007a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3710      	adds	r7, #16
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b086      	sub	sp, #24
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	607a      	str	r2, [r7, #4]
 8007a60:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007a62:	2300      	movs	r3, #0
 8007a64:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007a66:	7afb      	ldrb	r3, [r7, #11]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d16e      	bne.n	8007b4a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007a72:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007a7a:	2b03      	cmp	r3, #3
 8007a7c:	f040 8098 	bne.w	8007bb0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	689a      	ldr	r2, [r3, #8]
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d913      	bls.n	8007ab4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	689a      	ldr	r2, [r3, #8]
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	68db      	ldr	r3, [r3, #12]
 8007a94:	1ad2      	subs	r2, r2, r3
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	68da      	ldr	r2, [r3, #12]
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	bf28      	it	cs
 8007aa6:	4613      	movcs	r3, r2
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	6879      	ldr	r1, [r7, #4]
 8007aac:	68f8      	ldr	r0, [r7, #12]
 8007aae:	f001 f994 	bl	8008dda <USBD_CtlContinueRx>
 8007ab2:	e07d      	b.n	8007bb0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007aba:	f003 031f 	and.w	r3, r3, #31
 8007abe:	2b02      	cmp	r3, #2
 8007ac0:	d014      	beq.n	8007aec <USBD_LL_DataOutStage+0x98>
 8007ac2:	2b02      	cmp	r3, #2
 8007ac4:	d81d      	bhi.n	8007b02 <USBD_LL_DataOutStage+0xae>
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d002      	beq.n	8007ad0 <USBD_LL_DataOutStage+0x7c>
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d003      	beq.n	8007ad6 <USBD_LL_DataOutStage+0x82>
 8007ace:	e018      	b.n	8007b02 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	75bb      	strb	r3, [r7, #22]
            break;
 8007ad4:	e018      	b.n	8007b08 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	4619      	mov	r1, r3
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	f000 fa64 	bl	8007fae <USBD_CoreFindIF>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	75bb      	strb	r3, [r7, #22]
            break;
 8007aea:	e00d      	b.n	8007b08 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	4619      	mov	r1, r3
 8007af6:	68f8      	ldr	r0, [r7, #12]
 8007af8:	f000 fa66 	bl	8007fc8 <USBD_CoreFindEP>
 8007afc:	4603      	mov	r3, r0
 8007afe:	75bb      	strb	r3, [r7, #22]
            break;
 8007b00:	e002      	b.n	8007b08 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007b02:	2300      	movs	r3, #0
 8007b04:	75bb      	strb	r3, [r7, #22]
            break;
 8007b06:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007b08:	7dbb      	ldrb	r3, [r7, #22]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d119      	bne.n	8007b42 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	2b03      	cmp	r3, #3
 8007b18:	d113      	bne.n	8007b42 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007b1a:	7dba      	ldrb	r2, [r7, #22]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	32ae      	adds	r2, #174	@ 0xae
 8007b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00b      	beq.n	8007b42 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007b2a:	7dba      	ldrb	r2, [r7, #22]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007b32:	7dba      	ldrb	r2, [r7, #22]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	32ae      	adds	r2, #174	@ 0xae
 8007b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b3c:	691b      	ldr	r3, [r3, #16]
 8007b3e:	68f8      	ldr	r0, [r7, #12]
 8007b40:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007b42:	68f8      	ldr	r0, [r7, #12]
 8007b44:	f001 f95a 	bl	8008dfc <USBD_CtlSendStatus>
 8007b48:	e032      	b.n	8007bb0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007b4a:	7afb      	ldrb	r3, [r7, #11]
 8007b4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	4619      	mov	r1, r3
 8007b54:	68f8      	ldr	r0, [r7, #12]
 8007b56:	f000 fa37 	bl	8007fc8 <USBD_CoreFindEP>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b5e:	7dbb      	ldrb	r3, [r7, #22]
 8007b60:	2bff      	cmp	r3, #255	@ 0xff
 8007b62:	d025      	beq.n	8007bb0 <USBD_LL_DataOutStage+0x15c>
 8007b64:	7dbb      	ldrb	r3, [r7, #22]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d122      	bne.n	8007bb0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	2b03      	cmp	r3, #3
 8007b74:	d117      	bne.n	8007ba6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007b76:	7dba      	ldrb	r2, [r7, #22]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	32ae      	adds	r2, #174	@ 0xae
 8007b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b80:	699b      	ldr	r3, [r3, #24]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d00f      	beq.n	8007ba6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007b86:	7dba      	ldrb	r2, [r7, #22]
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007b8e:	7dba      	ldrb	r2, [r7, #22]
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	32ae      	adds	r2, #174	@ 0xae
 8007b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b98:	699b      	ldr	r3, [r3, #24]
 8007b9a:	7afa      	ldrb	r2, [r7, #11]
 8007b9c:	4611      	mov	r1, r2
 8007b9e:	68f8      	ldr	r0, [r7, #12]
 8007ba0:	4798      	blx	r3
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007ba6:	7dfb      	ldrb	r3, [r7, #23]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d001      	beq.n	8007bb0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007bac:	7dfb      	ldrb	r3, [r7, #23]
 8007bae:	e000      	b.n	8007bb2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007bb0:	2300      	movs	r3, #0
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3718      	adds	r7, #24
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}

08007bba <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b086      	sub	sp, #24
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	60f8      	str	r0, [r7, #12]
 8007bc2:	460b      	mov	r3, r1
 8007bc4:	607a      	str	r2, [r7, #4]
 8007bc6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007bc8:	7afb      	ldrb	r3, [r7, #11]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d16f      	bne.n	8007cae <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	3314      	adds	r3, #20
 8007bd2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007bda:	2b02      	cmp	r3, #2
 8007bdc:	d15a      	bne.n	8007c94 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	689a      	ldr	r2, [r3, #8]
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d914      	bls.n	8007c14 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	689a      	ldr	r2, [r3, #8]
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	1ad2      	subs	r2, r2, r3
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	6879      	ldr	r1, [r7, #4]
 8007c00:	68f8      	ldr	r0, [r7, #12]
 8007c02:	f001 f8bc 	bl	8008d7e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c06:	2300      	movs	r3, #0
 8007c08:	2200      	movs	r2, #0
 8007c0a:	2100      	movs	r1, #0
 8007c0c:	68f8      	ldr	r0, [r7, #12]
 8007c0e:	f004 fbf9 	bl	800c404 <USBD_LL_PrepareReceive>
 8007c12:	e03f      	b.n	8007c94 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	68da      	ldr	r2, [r3, #12]
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d11c      	bne.n	8007c5a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	685a      	ldr	r2, [r3, #4]
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d316      	bcc.n	8007c5a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	685a      	ldr	r2, [r3, #4]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d20f      	bcs.n	8007c5a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	2100      	movs	r1, #0
 8007c3e:	68f8      	ldr	r0, [r7, #12]
 8007c40:	f001 f89d 	bl	8008d7e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2200      	movs	r2, #0
 8007c48:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	2200      	movs	r2, #0
 8007c50:	2100      	movs	r1, #0
 8007c52:	68f8      	ldr	r0, [r7, #12]
 8007c54:	f004 fbd6 	bl	800c404 <USBD_LL_PrepareReceive>
 8007c58:	e01c      	b.n	8007c94 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	2b03      	cmp	r3, #3
 8007c64:	d10f      	bne.n	8007c86 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c6c:	68db      	ldr	r3, [r3, #12]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d009      	beq.n	8007c86 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2200      	movs	r2, #0
 8007c76:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c80:	68db      	ldr	r3, [r3, #12]
 8007c82:	68f8      	ldr	r0, [r7, #12]
 8007c84:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c86:	2180      	movs	r1, #128	@ 0x80
 8007c88:	68f8      	ldr	r0, [r7, #12]
 8007c8a:	f004 fb11 	bl	800c2b0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007c8e:	68f8      	ldr	r0, [r7, #12]
 8007c90:	f001 f8c7 	bl	8008e22 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d03a      	beq.n	8007d14 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	f7ff fe42 	bl	8007928 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007cac:	e032      	b.n	8007d14 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007cae:	7afb      	ldrb	r3, [r7, #11]
 8007cb0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	68f8      	ldr	r0, [r7, #12]
 8007cba:	f000 f985 	bl	8007fc8 <USBD_CoreFindEP>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007cc2:	7dfb      	ldrb	r3, [r7, #23]
 8007cc4:	2bff      	cmp	r3, #255	@ 0xff
 8007cc6:	d025      	beq.n	8007d14 <USBD_LL_DataInStage+0x15a>
 8007cc8:	7dfb      	ldrb	r3, [r7, #23]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d122      	bne.n	8007d14 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	2b03      	cmp	r3, #3
 8007cd8:	d11c      	bne.n	8007d14 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007cda:	7dfa      	ldrb	r2, [r7, #23]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	32ae      	adds	r2, #174	@ 0xae
 8007ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ce4:	695b      	ldr	r3, [r3, #20]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d014      	beq.n	8007d14 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007cea:	7dfa      	ldrb	r2, [r7, #23]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007cf2:	7dfa      	ldrb	r2, [r7, #23]
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	32ae      	adds	r2, #174	@ 0xae
 8007cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cfc:	695b      	ldr	r3, [r3, #20]
 8007cfe:	7afa      	ldrb	r2, [r7, #11]
 8007d00:	4611      	mov	r1, r2
 8007d02:	68f8      	ldr	r0, [r7, #12]
 8007d04:	4798      	blx	r3
 8007d06:	4603      	mov	r3, r0
 8007d08:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007d0a:	7dbb      	ldrb	r3, [r7, #22]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d001      	beq.n	8007d14 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007d10:	7dbb      	ldrb	r3, [r7, #22]
 8007d12:	e000      	b.n	8007d16 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3718      	adds	r7, #24
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b084      	sub	sp, #16
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d26:	2300      	movs	r3, #0
 8007d28:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2200      	movs	r2, #0
 8007d44:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d014      	beq.n	8007d84 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d00e      	beq.n	8007d84 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	6852      	ldr	r2, [r2, #4]
 8007d72:	b2d2      	uxtb	r2, r2
 8007d74:	4611      	mov	r1, r2
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	4798      	blx	r3
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d001      	beq.n	8007d84 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007d80:	2303      	movs	r3, #3
 8007d82:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d84:	2340      	movs	r3, #64	@ 0x40
 8007d86:	2200      	movs	r2, #0
 8007d88:	2100      	movs	r1, #0
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f004 fa4b 	bl	800c226 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2201      	movs	r2, #1
 8007d94:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2240      	movs	r2, #64	@ 0x40
 8007d9c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007da0:	2340      	movs	r3, #64	@ 0x40
 8007da2:	2200      	movs	r2, #0
 8007da4:	2180      	movs	r1, #128	@ 0x80
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f004 fa3d 	bl	800c226 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2201      	movs	r2, #1
 8007db0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2240      	movs	r2, #64	@ 0x40
 8007db6:	621a      	str	r2, [r3, #32]

  return ret;
 8007db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3710      	adds	r7, #16
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}

08007dc2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007dc2:	b480      	push	{r7}
 8007dc4:	b083      	sub	sp, #12
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
 8007dca:	460b      	mov	r3, r1
 8007dcc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	78fa      	ldrb	r2, [r7, #3]
 8007dd2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007dd4:	2300      	movs	r3, #0
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	370c      	adds	r7, #12
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr

08007de2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007de2:	b480      	push	{r7}
 8007de4:	b083      	sub	sp, #12
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	2b04      	cmp	r3, #4
 8007df4:	d006      	beq.n	8007e04 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007dfc:	b2da      	uxtb	r2, r3
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2204      	movs	r2, #4
 8007e08:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	370c      	adds	r7, #12
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr

08007e1a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007e1a:	b480      	push	{r7}
 8007e1c:	b083      	sub	sp, #12
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	2b04      	cmp	r3, #4
 8007e2c:	d106      	bne.n	8007e3c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007e34:	b2da      	uxtb	r2, r3
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	370c      	adds	r7, #12
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr

08007e4a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b082      	sub	sp, #8
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	2b03      	cmp	r3, #3
 8007e5c:	d110      	bne.n	8007e80 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d00b      	beq.n	8007e80 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e6e:	69db      	ldr	r3, [r3, #28]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d005      	beq.n	8007e80 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e7a:	69db      	ldr	r3, [r3, #28]
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3708      	adds	r7, #8
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	b082      	sub	sp, #8
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
 8007e92:	460b      	mov	r3, r1
 8007e94:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	32ae      	adds	r2, #174	@ 0xae
 8007ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d101      	bne.n	8007eac <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007ea8:	2303      	movs	r3, #3
 8007eaa:	e01c      	b.n	8007ee6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	2b03      	cmp	r3, #3
 8007eb6:	d115      	bne.n	8007ee4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	32ae      	adds	r2, #174	@ 0xae
 8007ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ec6:	6a1b      	ldr	r3, [r3, #32]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d00b      	beq.n	8007ee4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	32ae      	adds	r2, #174	@ 0xae
 8007ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eda:	6a1b      	ldr	r3, [r3, #32]
 8007edc:	78fa      	ldrb	r2, [r7, #3]
 8007ede:	4611      	mov	r1, r2
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3708      	adds	r7, #8
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b082      	sub	sp, #8
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	32ae      	adds	r2, #174	@ 0xae
 8007f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d101      	bne.n	8007f10 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007f0c:	2303      	movs	r3, #3
 8007f0e:	e01c      	b.n	8007f4a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	2b03      	cmp	r3, #3
 8007f1a:	d115      	bne.n	8007f48 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	32ae      	adds	r2, #174	@ 0xae
 8007f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d00b      	beq.n	8007f48 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	32ae      	adds	r2, #174	@ 0xae
 8007f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f40:	78fa      	ldrb	r2, [r7, #3]
 8007f42:	4611      	mov	r1, r2
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007f48:	2300      	movs	r3, #0
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3708      	adds	r7, #8
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}

08007f52 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007f52:	b480      	push	{r7}
 8007f54:	b083      	sub	sp, #12
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007f5a:	2300      	movs	r3, #0
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007f70:	2300      	movs	r3, #0
 8007f72:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d00e      	beq.n	8007fa4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	6852      	ldr	r2, [r2, #4]
 8007f92:	b2d2      	uxtb	r2, r2
 8007f94:	4611      	mov	r1, r2
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	4798      	blx	r3
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d001      	beq.n	8007fa4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007fa0:	2303      	movs	r3, #3
 8007fa2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3710      	adds	r7, #16
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}

08007fae <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007fae:	b480      	push	{r7}
 8007fb0:	b083      	sub	sp, #12
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
 8007fb6:	460b      	mov	r3, r1
 8007fb8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007fba:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	370c      	adds	r7, #12
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr

08007fc8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b083      	sub	sp, #12
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007fd4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	370c      	adds	r7, #12
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr

08007fe2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b086      	sub	sp, #24
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
 8007fea:	460b      	mov	r3, r1
 8007fec:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	885b      	ldrh	r3, [r3, #2]
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	68fa      	ldr	r2, [r7, #12]
 8008002:	7812      	ldrb	r2, [r2, #0]
 8008004:	4293      	cmp	r3, r2
 8008006:	d91f      	bls.n	8008048 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800800e:	e013      	b.n	8008038 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008010:	f107 030a 	add.w	r3, r7, #10
 8008014:	4619      	mov	r1, r3
 8008016:	6978      	ldr	r0, [r7, #20]
 8008018:	f000 f81b 	bl	8008052 <USBD_GetNextDesc>
 800801c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	785b      	ldrb	r3, [r3, #1]
 8008022:	2b05      	cmp	r3, #5
 8008024:	d108      	bne.n	8008038 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	789b      	ldrb	r3, [r3, #2]
 800802e:	78fa      	ldrb	r2, [r7, #3]
 8008030:	429a      	cmp	r2, r3
 8008032:	d008      	beq.n	8008046 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008034:	2300      	movs	r3, #0
 8008036:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	885b      	ldrh	r3, [r3, #2]
 800803c:	b29a      	uxth	r2, r3
 800803e:	897b      	ldrh	r3, [r7, #10]
 8008040:	429a      	cmp	r2, r3
 8008042:	d8e5      	bhi.n	8008010 <USBD_GetEpDesc+0x2e>
 8008044:	e000      	b.n	8008048 <USBD_GetEpDesc+0x66>
          break;
 8008046:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008048:	693b      	ldr	r3, [r7, #16]
}
 800804a:	4618      	mov	r0, r3
 800804c:	3718      	adds	r7, #24
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}

08008052 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008052:	b480      	push	{r7}
 8008054:	b085      	sub	sp, #20
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
 800805a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	881b      	ldrh	r3, [r3, #0]
 8008064:	68fa      	ldr	r2, [r7, #12]
 8008066:	7812      	ldrb	r2, [r2, #0]
 8008068:	4413      	add	r3, r2
 800806a:	b29a      	uxth	r2, r3
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	461a      	mov	r2, r3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	4413      	add	r3, r2
 800807a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800807c:	68fb      	ldr	r3, [r7, #12]
}
 800807e:	4618      	mov	r0, r3
 8008080:	3714      	adds	r7, #20
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr

0800808a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800808a:	b480      	push	{r7}
 800808c:	b087      	sub	sp, #28
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	3301      	adds	r3, #1
 80080a0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80080a8:	8a3b      	ldrh	r3, [r7, #16]
 80080aa:	021b      	lsls	r3, r3, #8
 80080ac:	b21a      	sxth	r2, r3
 80080ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80080b2:	4313      	orrs	r3, r2
 80080b4:	b21b      	sxth	r3, r3
 80080b6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80080b8:	89fb      	ldrh	r3, [r7, #14]
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	371c      	adds	r7, #28
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr
	...

080080c8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080d2:	2300      	movs	r3, #0
 80080d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80080de:	2b40      	cmp	r3, #64	@ 0x40
 80080e0:	d005      	beq.n	80080ee <USBD_StdDevReq+0x26>
 80080e2:	2b40      	cmp	r3, #64	@ 0x40
 80080e4:	d857      	bhi.n	8008196 <USBD_StdDevReq+0xce>
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d00f      	beq.n	800810a <USBD_StdDevReq+0x42>
 80080ea:	2b20      	cmp	r3, #32
 80080ec:	d153      	bne.n	8008196 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	32ae      	adds	r2, #174	@ 0xae
 80080f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080fc:	689b      	ldr	r3, [r3, #8]
 80080fe:	6839      	ldr	r1, [r7, #0]
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	4798      	blx	r3
 8008104:	4603      	mov	r3, r0
 8008106:	73fb      	strb	r3, [r7, #15]
      break;
 8008108:	e04a      	b.n	80081a0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	785b      	ldrb	r3, [r3, #1]
 800810e:	2b09      	cmp	r3, #9
 8008110:	d83b      	bhi.n	800818a <USBD_StdDevReq+0xc2>
 8008112:	a201      	add	r2, pc, #4	@ (adr r2, 8008118 <USBD_StdDevReq+0x50>)
 8008114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008118:	0800816d 	.word	0x0800816d
 800811c:	08008181 	.word	0x08008181
 8008120:	0800818b 	.word	0x0800818b
 8008124:	08008177 	.word	0x08008177
 8008128:	0800818b 	.word	0x0800818b
 800812c:	0800814b 	.word	0x0800814b
 8008130:	08008141 	.word	0x08008141
 8008134:	0800818b 	.word	0x0800818b
 8008138:	08008163 	.word	0x08008163
 800813c:	08008155 	.word	0x08008155
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008140:	6839      	ldr	r1, [r7, #0]
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 fa3c 	bl	80085c0 <USBD_GetDescriptor>
          break;
 8008148:	e024      	b.n	8008194 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800814a:	6839      	ldr	r1, [r7, #0]
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 fba1 	bl	8008894 <USBD_SetAddress>
          break;
 8008152:	e01f      	b.n	8008194 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008154:	6839      	ldr	r1, [r7, #0]
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 fbe0 	bl	800891c <USBD_SetConfig>
 800815c:	4603      	mov	r3, r0
 800815e:	73fb      	strb	r3, [r7, #15]
          break;
 8008160:	e018      	b.n	8008194 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008162:	6839      	ldr	r1, [r7, #0]
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 fc83 	bl	8008a70 <USBD_GetConfig>
          break;
 800816a:	e013      	b.n	8008194 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800816c:	6839      	ldr	r1, [r7, #0]
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 fcb4 	bl	8008adc <USBD_GetStatus>
          break;
 8008174:	e00e      	b.n	8008194 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008176:	6839      	ldr	r1, [r7, #0]
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 fce3 	bl	8008b44 <USBD_SetFeature>
          break;
 800817e:	e009      	b.n	8008194 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008180:	6839      	ldr	r1, [r7, #0]
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 fd07 	bl	8008b96 <USBD_ClrFeature>
          break;
 8008188:	e004      	b.n	8008194 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800818a:	6839      	ldr	r1, [r7, #0]
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 fd5e 	bl	8008c4e <USBD_CtlError>
          break;
 8008192:	bf00      	nop
      }
      break;
 8008194:	e004      	b.n	80081a0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008196:	6839      	ldr	r1, [r7, #0]
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 fd58 	bl	8008c4e <USBD_CtlError>
      break;
 800819e:	bf00      	nop
  }

  return ret;
 80081a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3710      	adds	r7, #16
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop

080081ac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b084      	sub	sp, #16
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80081b6:	2300      	movs	r3, #0
 80081b8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80081c2:	2b40      	cmp	r3, #64	@ 0x40
 80081c4:	d005      	beq.n	80081d2 <USBD_StdItfReq+0x26>
 80081c6:	2b40      	cmp	r3, #64	@ 0x40
 80081c8:	d852      	bhi.n	8008270 <USBD_StdItfReq+0xc4>
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d001      	beq.n	80081d2 <USBD_StdItfReq+0x26>
 80081ce:	2b20      	cmp	r3, #32
 80081d0:	d14e      	bne.n	8008270 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	3b01      	subs	r3, #1
 80081dc:	2b02      	cmp	r3, #2
 80081de:	d840      	bhi.n	8008262 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	889b      	ldrh	r3, [r3, #4]
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d836      	bhi.n	8008258 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	889b      	ldrh	r3, [r3, #4]
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	4619      	mov	r1, r3
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f7ff fedb 	bl	8007fae <USBD_CoreFindIF>
 80081f8:	4603      	mov	r3, r0
 80081fa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80081fc:	7bbb      	ldrb	r3, [r7, #14]
 80081fe:	2bff      	cmp	r3, #255	@ 0xff
 8008200:	d01d      	beq.n	800823e <USBD_StdItfReq+0x92>
 8008202:	7bbb      	ldrb	r3, [r7, #14]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d11a      	bne.n	800823e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008208:	7bba      	ldrb	r2, [r7, #14]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	32ae      	adds	r2, #174	@ 0xae
 800820e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d00f      	beq.n	8008238 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008218:	7bba      	ldrb	r2, [r7, #14]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008220:	7bba      	ldrb	r2, [r7, #14]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	32ae      	adds	r2, #174	@ 0xae
 8008226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	6839      	ldr	r1, [r7, #0]
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	4798      	blx	r3
 8008232:	4603      	mov	r3, r0
 8008234:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008236:	e004      	b.n	8008242 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008238:	2303      	movs	r3, #3
 800823a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800823c:	e001      	b.n	8008242 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800823e:	2303      	movs	r3, #3
 8008240:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	88db      	ldrh	r3, [r3, #6]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d110      	bne.n	800826c <USBD_StdItfReq+0xc0>
 800824a:	7bfb      	ldrb	r3, [r7, #15]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d10d      	bne.n	800826c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 fdd3 	bl	8008dfc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008256:	e009      	b.n	800826c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008258:	6839      	ldr	r1, [r7, #0]
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 fcf7 	bl	8008c4e <USBD_CtlError>
          break;
 8008260:	e004      	b.n	800826c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008262:	6839      	ldr	r1, [r7, #0]
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 fcf2 	bl	8008c4e <USBD_CtlError>
          break;
 800826a:	e000      	b.n	800826e <USBD_StdItfReq+0xc2>
          break;
 800826c:	bf00      	nop
      }
      break;
 800826e:	e004      	b.n	800827a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008270:	6839      	ldr	r1, [r7, #0]
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 fceb 	bl	8008c4e <USBD_CtlError>
      break;
 8008278:	bf00      	nop
  }

  return ret;
 800827a:	7bfb      	ldrb	r3, [r7, #15]
}
 800827c:	4618      	mov	r0, r3
 800827e:	3710      	adds	r7, #16
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b084      	sub	sp, #16
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800828e:	2300      	movs	r3, #0
 8008290:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	889b      	ldrh	r3, [r3, #4]
 8008296:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80082a0:	2b40      	cmp	r3, #64	@ 0x40
 80082a2:	d007      	beq.n	80082b4 <USBD_StdEPReq+0x30>
 80082a4:	2b40      	cmp	r3, #64	@ 0x40
 80082a6:	f200 817f 	bhi.w	80085a8 <USBD_StdEPReq+0x324>
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d02a      	beq.n	8008304 <USBD_StdEPReq+0x80>
 80082ae:	2b20      	cmp	r3, #32
 80082b0:	f040 817a 	bne.w	80085a8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80082b4:	7bbb      	ldrb	r3, [r7, #14]
 80082b6:	4619      	mov	r1, r3
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f7ff fe85 	bl	8007fc8 <USBD_CoreFindEP>
 80082be:	4603      	mov	r3, r0
 80082c0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80082c2:	7b7b      	ldrb	r3, [r7, #13]
 80082c4:	2bff      	cmp	r3, #255	@ 0xff
 80082c6:	f000 8174 	beq.w	80085b2 <USBD_StdEPReq+0x32e>
 80082ca:	7b7b      	ldrb	r3, [r7, #13]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	f040 8170 	bne.w	80085b2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80082d2:	7b7a      	ldrb	r2, [r7, #13]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80082da:	7b7a      	ldrb	r2, [r7, #13]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	32ae      	adds	r2, #174	@ 0xae
 80082e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	f000 8163 	beq.w	80085b2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80082ec:	7b7a      	ldrb	r2, [r7, #13]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	32ae      	adds	r2, #174	@ 0xae
 80082f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	6839      	ldr	r1, [r7, #0]
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	4798      	blx	r3
 80082fe:	4603      	mov	r3, r0
 8008300:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008302:	e156      	b.n	80085b2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	785b      	ldrb	r3, [r3, #1]
 8008308:	2b03      	cmp	r3, #3
 800830a:	d008      	beq.n	800831e <USBD_StdEPReq+0x9a>
 800830c:	2b03      	cmp	r3, #3
 800830e:	f300 8145 	bgt.w	800859c <USBD_StdEPReq+0x318>
 8008312:	2b00      	cmp	r3, #0
 8008314:	f000 809b 	beq.w	800844e <USBD_StdEPReq+0x1ca>
 8008318:	2b01      	cmp	r3, #1
 800831a:	d03c      	beq.n	8008396 <USBD_StdEPReq+0x112>
 800831c:	e13e      	b.n	800859c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008324:	b2db      	uxtb	r3, r3
 8008326:	2b02      	cmp	r3, #2
 8008328:	d002      	beq.n	8008330 <USBD_StdEPReq+0xac>
 800832a:	2b03      	cmp	r3, #3
 800832c:	d016      	beq.n	800835c <USBD_StdEPReq+0xd8>
 800832e:	e02c      	b.n	800838a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008330:	7bbb      	ldrb	r3, [r7, #14]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d00d      	beq.n	8008352 <USBD_StdEPReq+0xce>
 8008336:	7bbb      	ldrb	r3, [r7, #14]
 8008338:	2b80      	cmp	r3, #128	@ 0x80
 800833a:	d00a      	beq.n	8008352 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800833c:	7bbb      	ldrb	r3, [r7, #14]
 800833e:	4619      	mov	r1, r3
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f003 ffb5 	bl	800c2b0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008346:	2180      	movs	r1, #128	@ 0x80
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f003 ffb1 	bl	800c2b0 <USBD_LL_StallEP>
 800834e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008350:	e020      	b.n	8008394 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008352:	6839      	ldr	r1, [r7, #0]
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 fc7a 	bl	8008c4e <USBD_CtlError>
              break;
 800835a:	e01b      	b.n	8008394 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	885b      	ldrh	r3, [r3, #2]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d10e      	bne.n	8008382 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008364:	7bbb      	ldrb	r3, [r7, #14]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d00b      	beq.n	8008382 <USBD_StdEPReq+0xfe>
 800836a:	7bbb      	ldrb	r3, [r7, #14]
 800836c:	2b80      	cmp	r3, #128	@ 0x80
 800836e:	d008      	beq.n	8008382 <USBD_StdEPReq+0xfe>
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	88db      	ldrh	r3, [r3, #6]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d104      	bne.n	8008382 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008378:	7bbb      	ldrb	r3, [r7, #14]
 800837a:	4619      	mov	r1, r3
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f003 ff97 	bl	800c2b0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 fd3a 	bl	8008dfc <USBD_CtlSendStatus>

              break;
 8008388:	e004      	b.n	8008394 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800838a:	6839      	ldr	r1, [r7, #0]
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 fc5e 	bl	8008c4e <USBD_CtlError>
              break;
 8008392:	bf00      	nop
          }
          break;
 8008394:	e107      	b.n	80085a6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800839c:	b2db      	uxtb	r3, r3
 800839e:	2b02      	cmp	r3, #2
 80083a0:	d002      	beq.n	80083a8 <USBD_StdEPReq+0x124>
 80083a2:	2b03      	cmp	r3, #3
 80083a4:	d016      	beq.n	80083d4 <USBD_StdEPReq+0x150>
 80083a6:	e04b      	b.n	8008440 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083a8:	7bbb      	ldrb	r3, [r7, #14]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d00d      	beq.n	80083ca <USBD_StdEPReq+0x146>
 80083ae:	7bbb      	ldrb	r3, [r7, #14]
 80083b0:	2b80      	cmp	r3, #128	@ 0x80
 80083b2:	d00a      	beq.n	80083ca <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80083b4:	7bbb      	ldrb	r3, [r7, #14]
 80083b6:	4619      	mov	r1, r3
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f003 ff79 	bl	800c2b0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80083be:	2180      	movs	r1, #128	@ 0x80
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f003 ff75 	bl	800c2b0 <USBD_LL_StallEP>
 80083c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80083c8:	e040      	b.n	800844c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80083ca:	6839      	ldr	r1, [r7, #0]
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 fc3e 	bl	8008c4e <USBD_CtlError>
              break;
 80083d2:	e03b      	b.n	800844c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	885b      	ldrh	r3, [r3, #2]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d136      	bne.n	800844a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80083dc:	7bbb      	ldrb	r3, [r7, #14]
 80083de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d004      	beq.n	80083f0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80083e6:	7bbb      	ldrb	r3, [r7, #14]
 80083e8:	4619      	mov	r1, r3
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f003 ff7f 	bl	800c2ee <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 fd03 	bl	8008dfc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80083f6:	7bbb      	ldrb	r3, [r7, #14]
 80083f8:	4619      	mov	r1, r3
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f7ff fde4 	bl	8007fc8 <USBD_CoreFindEP>
 8008400:	4603      	mov	r3, r0
 8008402:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008404:	7b7b      	ldrb	r3, [r7, #13]
 8008406:	2bff      	cmp	r3, #255	@ 0xff
 8008408:	d01f      	beq.n	800844a <USBD_StdEPReq+0x1c6>
 800840a:	7b7b      	ldrb	r3, [r7, #13]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d11c      	bne.n	800844a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008410:	7b7a      	ldrb	r2, [r7, #13]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008418:	7b7a      	ldrb	r2, [r7, #13]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	32ae      	adds	r2, #174	@ 0xae
 800841e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d010      	beq.n	800844a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008428:	7b7a      	ldrb	r2, [r7, #13]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	32ae      	adds	r2, #174	@ 0xae
 800842e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008432:	689b      	ldr	r3, [r3, #8]
 8008434:	6839      	ldr	r1, [r7, #0]
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	4798      	blx	r3
 800843a:	4603      	mov	r3, r0
 800843c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800843e:	e004      	b.n	800844a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008440:	6839      	ldr	r1, [r7, #0]
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 fc03 	bl	8008c4e <USBD_CtlError>
              break;
 8008448:	e000      	b.n	800844c <USBD_StdEPReq+0x1c8>
              break;
 800844a:	bf00      	nop
          }
          break;
 800844c:	e0ab      	b.n	80085a6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008454:	b2db      	uxtb	r3, r3
 8008456:	2b02      	cmp	r3, #2
 8008458:	d002      	beq.n	8008460 <USBD_StdEPReq+0x1dc>
 800845a:	2b03      	cmp	r3, #3
 800845c:	d032      	beq.n	80084c4 <USBD_StdEPReq+0x240>
 800845e:	e097      	b.n	8008590 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008460:	7bbb      	ldrb	r3, [r7, #14]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d007      	beq.n	8008476 <USBD_StdEPReq+0x1f2>
 8008466:	7bbb      	ldrb	r3, [r7, #14]
 8008468:	2b80      	cmp	r3, #128	@ 0x80
 800846a:	d004      	beq.n	8008476 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800846c:	6839      	ldr	r1, [r7, #0]
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 fbed 	bl	8008c4e <USBD_CtlError>
                break;
 8008474:	e091      	b.n	800859a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008476:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800847a:	2b00      	cmp	r3, #0
 800847c:	da0b      	bge.n	8008496 <USBD_StdEPReq+0x212>
 800847e:	7bbb      	ldrb	r3, [r7, #14]
 8008480:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008484:	4613      	mov	r3, r2
 8008486:	009b      	lsls	r3, r3, #2
 8008488:	4413      	add	r3, r2
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	3310      	adds	r3, #16
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	4413      	add	r3, r2
 8008492:	3304      	adds	r3, #4
 8008494:	e00b      	b.n	80084ae <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008496:	7bbb      	ldrb	r3, [r7, #14]
 8008498:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800849c:	4613      	mov	r3, r2
 800849e:	009b      	lsls	r3, r3, #2
 80084a0:	4413      	add	r3, r2
 80084a2:	009b      	lsls	r3, r3, #2
 80084a4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80084a8:	687a      	ldr	r2, [r7, #4]
 80084aa:	4413      	add	r3, r2
 80084ac:	3304      	adds	r3, #4
 80084ae:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	2200      	movs	r2, #0
 80084b4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	2202      	movs	r2, #2
 80084ba:	4619      	mov	r1, r3
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 fc43 	bl	8008d48 <USBD_CtlSendData>
              break;
 80084c2:	e06a      	b.n	800859a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80084c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	da11      	bge.n	80084f0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80084cc:	7bbb      	ldrb	r3, [r7, #14]
 80084ce:	f003 020f 	and.w	r2, r3, #15
 80084d2:	6879      	ldr	r1, [r7, #4]
 80084d4:	4613      	mov	r3, r2
 80084d6:	009b      	lsls	r3, r3, #2
 80084d8:	4413      	add	r3, r2
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	440b      	add	r3, r1
 80084de:	3324      	adds	r3, #36	@ 0x24
 80084e0:	881b      	ldrh	r3, [r3, #0]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d117      	bne.n	8008516 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80084e6:	6839      	ldr	r1, [r7, #0]
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f000 fbb0 	bl	8008c4e <USBD_CtlError>
                  break;
 80084ee:	e054      	b.n	800859a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80084f0:	7bbb      	ldrb	r3, [r7, #14]
 80084f2:	f003 020f 	and.w	r2, r3, #15
 80084f6:	6879      	ldr	r1, [r7, #4]
 80084f8:	4613      	mov	r3, r2
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	4413      	add	r3, r2
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	440b      	add	r3, r1
 8008502:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008506:	881b      	ldrh	r3, [r3, #0]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d104      	bne.n	8008516 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800850c:	6839      	ldr	r1, [r7, #0]
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 fb9d 	bl	8008c4e <USBD_CtlError>
                  break;
 8008514:	e041      	b.n	800859a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008516:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800851a:	2b00      	cmp	r3, #0
 800851c:	da0b      	bge.n	8008536 <USBD_StdEPReq+0x2b2>
 800851e:	7bbb      	ldrb	r3, [r7, #14]
 8008520:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008524:	4613      	mov	r3, r2
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	4413      	add	r3, r2
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	3310      	adds	r3, #16
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	4413      	add	r3, r2
 8008532:	3304      	adds	r3, #4
 8008534:	e00b      	b.n	800854e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008536:	7bbb      	ldrb	r3, [r7, #14]
 8008538:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800853c:	4613      	mov	r3, r2
 800853e:	009b      	lsls	r3, r3, #2
 8008540:	4413      	add	r3, r2
 8008542:	009b      	lsls	r3, r3, #2
 8008544:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	4413      	add	r3, r2
 800854c:	3304      	adds	r3, #4
 800854e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008550:	7bbb      	ldrb	r3, [r7, #14]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d002      	beq.n	800855c <USBD_StdEPReq+0x2d8>
 8008556:	7bbb      	ldrb	r3, [r7, #14]
 8008558:	2b80      	cmp	r3, #128	@ 0x80
 800855a:	d103      	bne.n	8008564 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	2200      	movs	r2, #0
 8008560:	601a      	str	r2, [r3, #0]
 8008562:	e00e      	b.n	8008582 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008564:	7bbb      	ldrb	r3, [r7, #14]
 8008566:	4619      	mov	r1, r3
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f003 fedf 	bl	800c32c <USBD_LL_IsStallEP>
 800856e:	4603      	mov	r3, r0
 8008570:	2b00      	cmp	r3, #0
 8008572:	d003      	beq.n	800857c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	2201      	movs	r2, #1
 8008578:	601a      	str	r2, [r3, #0]
 800857a:	e002      	b.n	8008582 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	2200      	movs	r2, #0
 8008580:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	2202      	movs	r2, #2
 8008586:	4619      	mov	r1, r3
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f000 fbdd 	bl	8008d48 <USBD_CtlSendData>
              break;
 800858e:	e004      	b.n	800859a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008590:	6839      	ldr	r1, [r7, #0]
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 fb5b 	bl	8008c4e <USBD_CtlError>
              break;
 8008598:	bf00      	nop
          }
          break;
 800859a:	e004      	b.n	80085a6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800859c:	6839      	ldr	r1, [r7, #0]
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 fb55 	bl	8008c4e <USBD_CtlError>
          break;
 80085a4:	bf00      	nop
      }
      break;
 80085a6:	e005      	b.n	80085b4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80085a8:	6839      	ldr	r1, [r7, #0]
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f000 fb4f 	bl	8008c4e <USBD_CtlError>
      break;
 80085b0:	e000      	b.n	80085b4 <USBD_StdEPReq+0x330>
      break;
 80085b2:	bf00      	nop
  }

  return ret;
 80085b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3710      	adds	r7, #16
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
	...

080085c0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80085ca:	2300      	movs	r3, #0
 80085cc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80085ce:	2300      	movs	r3, #0
 80085d0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80085d2:	2300      	movs	r3, #0
 80085d4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	885b      	ldrh	r3, [r3, #2]
 80085da:	0a1b      	lsrs	r3, r3, #8
 80085dc:	b29b      	uxth	r3, r3
 80085de:	3b01      	subs	r3, #1
 80085e0:	2b06      	cmp	r3, #6
 80085e2:	f200 8128 	bhi.w	8008836 <USBD_GetDescriptor+0x276>
 80085e6:	a201      	add	r2, pc, #4	@ (adr r2, 80085ec <USBD_GetDescriptor+0x2c>)
 80085e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ec:	08008609 	.word	0x08008609
 80085f0:	08008621 	.word	0x08008621
 80085f4:	08008661 	.word	0x08008661
 80085f8:	08008837 	.word	0x08008837
 80085fc:	08008837 	.word	0x08008837
 8008600:	080087d7 	.word	0x080087d7
 8008604:	08008803 	.word	0x08008803
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	687a      	ldr	r2, [r7, #4]
 8008612:	7c12      	ldrb	r2, [r2, #16]
 8008614:	f107 0108 	add.w	r1, r7, #8
 8008618:	4610      	mov	r0, r2
 800861a:	4798      	blx	r3
 800861c:	60f8      	str	r0, [r7, #12]
      break;
 800861e:	e112      	b.n	8008846 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	7c1b      	ldrb	r3, [r3, #16]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d10d      	bne.n	8008644 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800862e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008630:	f107 0208 	add.w	r2, r7, #8
 8008634:	4610      	mov	r0, r2
 8008636:	4798      	blx	r3
 8008638:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	3301      	adds	r3, #1
 800863e:	2202      	movs	r2, #2
 8008640:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008642:	e100      	b.n	8008846 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800864a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800864c:	f107 0208 	add.w	r2, r7, #8
 8008650:	4610      	mov	r0, r2
 8008652:	4798      	blx	r3
 8008654:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	3301      	adds	r3, #1
 800865a:	2202      	movs	r2, #2
 800865c:	701a      	strb	r2, [r3, #0]
      break;
 800865e:	e0f2      	b.n	8008846 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	885b      	ldrh	r3, [r3, #2]
 8008664:	b2db      	uxtb	r3, r3
 8008666:	2b05      	cmp	r3, #5
 8008668:	f200 80ac 	bhi.w	80087c4 <USBD_GetDescriptor+0x204>
 800866c:	a201      	add	r2, pc, #4	@ (adr r2, 8008674 <USBD_GetDescriptor+0xb4>)
 800866e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008672:	bf00      	nop
 8008674:	0800868d 	.word	0x0800868d
 8008678:	080086c1 	.word	0x080086c1
 800867c:	080086f5 	.word	0x080086f5
 8008680:	08008729 	.word	0x08008729
 8008684:	0800875d 	.word	0x0800875d
 8008688:	08008791 	.word	0x08008791
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d00b      	beq.n	80086b0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	7c12      	ldrb	r2, [r2, #16]
 80086a4:	f107 0108 	add.w	r1, r7, #8
 80086a8:	4610      	mov	r0, r2
 80086aa:	4798      	blx	r3
 80086ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086ae:	e091      	b.n	80087d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086b0:	6839      	ldr	r1, [r7, #0]
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 facb 	bl	8008c4e <USBD_CtlError>
            err++;
 80086b8:	7afb      	ldrb	r3, [r7, #11]
 80086ba:	3301      	adds	r3, #1
 80086bc:	72fb      	strb	r3, [r7, #11]
          break;
 80086be:	e089      	b.n	80087d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d00b      	beq.n	80086e4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086d2:	689b      	ldr	r3, [r3, #8]
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	7c12      	ldrb	r2, [r2, #16]
 80086d8:	f107 0108 	add.w	r1, r7, #8
 80086dc:	4610      	mov	r0, r2
 80086de:	4798      	blx	r3
 80086e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086e2:	e077      	b.n	80087d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086e4:	6839      	ldr	r1, [r7, #0]
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 fab1 	bl	8008c4e <USBD_CtlError>
            err++;
 80086ec:	7afb      	ldrb	r3, [r7, #11]
 80086ee:	3301      	adds	r3, #1
 80086f0:	72fb      	strb	r3, [r7, #11]
          break;
 80086f2:	e06f      	b.n	80087d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086fa:	68db      	ldr	r3, [r3, #12]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d00b      	beq.n	8008718 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008706:	68db      	ldr	r3, [r3, #12]
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	7c12      	ldrb	r2, [r2, #16]
 800870c:	f107 0108 	add.w	r1, r7, #8
 8008710:	4610      	mov	r0, r2
 8008712:	4798      	blx	r3
 8008714:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008716:	e05d      	b.n	80087d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008718:	6839      	ldr	r1, [r7, #0]
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 fa97 	bl	8008c4e <USBD_CtlError>
            err++;
 8008720:	7afb      	ldrb	r3, [r7, #11]
 8008722:	3301      	adds	r3, #1
 8008724:	72fb      	strb	r3, [r7, #11]
          break;
 8008726:	e055      	b.n	80087d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800872e:	691b      	ldr	r3, [r3, #16]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d00b      	beq.n	800874c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800873a:	691b      	ldr	r3, [r3, #16]
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	7c12      	ldrb	r2, [r2, #16]
 8008740:	f107 0108 	add.w	r1, r7, #8
 8008744:	4610      	mov	r0, r2
 8008746:	4798      	blx	r3
 8008748:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800874a:	e043      	b.n	80087d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800874c:	6839      	ldr	r1, [r7, #0]
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 fa7d 	bl	8008c4e <USBD_CtlError>
            err++;
 8008754:	7afb      	ldrb	r3, [r7, #11]
 8008756:	3301      	adds	r3, #1
 8008758:	72fb      	strb	r3, [r7, #11]
          break;
 800875a:	e03b      	b.n	80087d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008762:	695b      	ldr	r3, [r3, #20]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d00b      	beq.n	8008780 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800876e:	695b      	ldr	r3, [r3, #20]
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	7c12      	ldrb	r2, [r2, #16]
 8008774:	f107 0108 	add.w	r1, r7, #8
 8008778:	4610      	mov	r0, r2
 800877a:	4798      	blx	r3
 800877c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800877e:	e029      	b.n	80087d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008780:	6839      	ldr	r1, [r7, #0]
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 fa63 	bl	8008c4e <USBD_CtlError>
            err++;
 8008788:	7afb      	ldrb	r3, [r7, #11]
 800878a:	3301      	adds	r3, #1
 800878c:	72fb      	strb	r3, [r7, #11]
          break;
 800878e:	e021      	b.n	80087d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008796:	699b      	ldr	r3, [r3, #24]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d00b      	beq.n	80087b4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087a2:	699b      	ldr	r3, [r3, #24]
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	7c12      	ldrb	r2, [r2, #16]
 80087a8:	f107 0108 	add.w	r1, r7, #8
 80087ac:	4610      	mov	r0, r2
 80087ae:	4798      	blx	r3
 80087b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087b2:	e00f      	b.n	80087d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087b4:	6839      	ldr	r1, [r7, #0]
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 fa49 	bl	8008c4e <USBD_CtlError>
            err++;
 80087bc:	7afb      	ldrb	r3, [r7, #11]
 80087be:	3301      	adds	r3, #1
 80087c0:	72fb      	strb	r3, [r7, #11]
          break;
 80087c2:	e007      	b.n	80087d4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80087c4:	6839      	ldr	r1, [r7, #0]
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 fa41 	bl	8008c4e <USBD_CtlError>
          err++;
 80087cc:	7afb      	ldrb	r3, [r7, #11]
 80087ce:	3301      	adds	r3, #1
 80087d0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80087d2:	bf00      	nop
      }
      break;
 80087d4:	e037      	b.n	8008846 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	7c1b      	ldrb	r3, [r3, #16]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d109      	bne.n	80087f2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087e6:	f107 0208 	add.w	r2, r7, #8
 80087ea:	4610      	mov	r0, r2
 80087ec:	4798      	blx	r3
 80087ee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80087f0:	e029      	b.n	8008846 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80087f2:	6839      	ldr	r1, [r7, #0]
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f000 fa2a 	bl	8008c4e <USBD_CtlError>
        err++;
 80087fa:	7afb      	ldrb	r3, [r7, #11]
 80087fc:	3301      	adds	r3, #1
 80087fe:	72fb      	strb	r3, [r7, #11]
      break;
 8008800:	e021      	b.n	8008846 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	7c1b      	ldrb	r3, [r3, #16]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d10d      	bne.n	8008826 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008812:	f107 0208 	add.w	r2, r7, #8
 8008816:	4610      	mov	r0, r2
 8008818:	4798      	blx	r3
 800881a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	3301      	adds	r3, #1
 8008820:	2207      	movs	r2, #7
 8008822:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008824:	e00f      	b.n	8008846 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008826:	6839      	ldr	r1, [r7, #0]
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f000 fa10 	bl	8008c4e <USBD_CtlError>
        err++;
 800882e:	7afb      	ldrb	r3, [r7, #11]
 8008830:	3301      	adds	r3, #1
 8008832:	72fb      	strb	r3, [r7, #11]
      break;
 8008834:	e007      	b.n	8008846 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008836:	6839      	ldr	r1, [r7, #0]
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f000 fa08 	bl	8008c4e <USBD_CtlError>
      err++;
 800883e:	7afb      	ldrb	r3, [r7, #11]
 8008840:	3301      	adds	r3, #1
 8008842:	72fb      	strb	r3, [r7, #11]
      break;
 8008844:	bf00      	nop
  }

  if (err != 0U)
 8008846:	7afb      	ldrb	r3, [r7, #11]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d11e      	bne.n	800888a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	88db      	ldrh	r3, [r3, #6]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d016      	beq.n	8008882 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008854:	893b      	ldrh	r3, [r7, #8]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d00e      	beq.n	8008878 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	88da      	ldrh	r2, [r3, #6]
 800885e:	893b      	ldrh	r3, [r7, #8]
 8008860:	4293      	cmp	r3, r2
 8008862:	bf28      	it	cs
 8008864:	4613      	movcs	r3, r2
 8008866:	b29b      	uxth	r3, r3
 8008868:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800886a:	893b      	ldrh	r3, [r7, #8]
 800886c:	461a      	mov	r2, r3
 800886e:	68f9      	ldr	r1, [r7, #12]
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 fa69 	bl	8008d48 <USBD_CtlSendData>
 8008876:	e009      	b.n	800888c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008878:	6839      	ldr	r1, [r7, #0]
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 f9e7 	bl	8008c4e <USBD_CtlError>
 8008880:	e004      	b.n	800888c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 faba 	bl	8008dfc <USBD_CtlSendStatus>
 8008888:	e000      	b.n	800888c <USBD_GetDescriptor+0x2cc>
    return;
 800888a:	bf00      	nop
  }
}
 800888c:	3710      	adds	r7, #16
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}
 8008892:	bf00      	nop

08008894 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b084      	sub	sp, #16
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	889b      	ldrh	r3, [r3, #4]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d131      	bne.n	800890a <USBD_SetAddress+0x76>
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	88db      	ldrh	r3, [r3, #6]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d12d      	bne.n	800890a <USBD_SetAddress+0x76>
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	885b      	ldrh	r3, [r3, #2]
 80088b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80088b4:	d829      	bhi.n	800890a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	885b      	ldrh	r3, [r3, #2]
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	2b03      	cmp	r3, #3
 80088cc:	d104      	bne.n	80088d8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80088ce:	6839      	ldr	r1, [r7, #0]
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 f9bc 	bl	8008c4e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088d6:	e01d      	b.n	8008914 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	7bfa      	ldrb	r2, [r7, #15]
 80088dc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80088e0:	7bfb      	ldrb	r3, [r7, #15]
 80088e2:	4619      	mov	r1, r3
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f003 fd4d 	bl	800c384 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f000 fa86 	bl	8008dfc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80088f0:	7bfb      	ldrb	r3, [r7, #15]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d004      	beq.n	8008900 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2202      	movs	r2, #2
 80088fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088fe:	e009      	b.n	8008914 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2201      	movs	r2, #1
 8008904:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008908:	e004      	b.n	8008914 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800890a:	6839      	ldr	r1, [r7, #0]
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 f99e 	bl	8008c4e <USBD_CtlError>
  }
}
 8008912:	bf00      	nop
 8008914:	bf00      	nop
 8008916:	3710      	adds	r7, #16
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b084      	sub	sp, #16
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008926:	2300      	movs	r3, #0
 8008928:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	885b      	ldrh	r3, [r3, #2]
 800892e:	b2da      	uxtb	r2, r3
 8008930:	4b4e      	ldr	r3, [pc, #312]	@ (8008a6c <USBD_SetConfig+0x150>)
 8008932:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008934:	4b4d      	ldr	r3, [pc, #308]	@ (8008a6c <USBD_SetConfig+0x150>)
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	2b01      	cmp	r3, #1
 800893a:	d905      	bls.n	8008948 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800893c:	6839      	ldr	r1, [r7, #0]
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 f985 	bl	8008c4e <USBD_CtlError>
    return USBD_FAIL;
 8008944:	2303      	movs	r3, #3
 8008946:	e08c      	b.n	8008a62 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800894e:	b2db      	uxtb	r3, r3
 8008950:	2b02      	cmp	r3, #2
 8008952:	d002      	beq.n	800895a <USBD_SetConfig+0x3e>
 8008954:	2b03      	cmp	r3, #3
 8008956:	d029      	beq.n	80089ac <USBD_SetConfig+0x90>
 8008958:	e075      	b.n	8008a46 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800895a:	4b44      	ldr	r3, [pc, #272]	@ (8008a6c <USBD_SetConfig+0x150>)
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d020      	beq.n	80089a4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008962:	4b42      	ldr	r3, [pc, #264]	@ (8008a6c <USBD_SetConfig+0x150>)
 8008964:	781b      	ldrb	r3, [r3, #0]
 8008966:	461a      	mov	r2, r3
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800896c:	4b3f      	ldr	r3, [pc, #252]	@ (8008a6c <USBD_SetConfig+0x150>)
 800896e:	781b      	ldrb	r3, [r3, #0]
 8008970:	4619      	mov	r1, r3
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f7fe ffe3 	bl	800793e <USBD_SetClassConfig>
 8008978:	4603      	mov	r3, r0
 800897a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800897c:	7bfb      	ldrb	r3, [r7, #15]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d008      	beq.n	8008994 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008982:	6839      	ldr	r1, [r7, #0]
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f000 f962 	bl	8008c4e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2202      	movs	r2, #2
 800898e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008992:	e065      	b.n	8008a60 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 fa31 	bl	8008dfc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2203      	movs	r2, #3
 800899e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80089a2:	e05d      	b.n	8008a60 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 fa29 	bl	8008dfc <USBD_CtlSendStatus>
      break;
 80089aa:	e059      	b.n	8008a60 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80089ac:	4b2f      	ldr	r3, [pc, #188]	@ (8008a6c <USBD_SetConfig+0x150>)
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d112      	bne.n	80089da <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2202      	movs	r2, #2
 80089b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80089bc:	4b2b      	ldr	r3, [pc, #172]	@ (8008a6c <USBD_SetConfig+0x150>)
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	461a      	mov	r2, r3
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80089c6:	4b29      	ldr	r3, [pc, #164]	@ (8008a6c <USBD_SetConfig+0x150>)
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	4619      	mov	r1, r3
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f7fe ffd2 	bl	8007976 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 fa12 	bl	8008dfc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80089d8:	e042      	b.n	8008a60 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80089da:	4b24      	ldr	r3, [pc, #144]	@ (8008a6c <USBD_SetConfig+0x150>)
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	461a      	mov	r2, r3
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d02a      	beq.n	8008a3e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	b2db      	uxtb	r3, r3
 80089ee:	4619      	mov	r1, r3
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f7fe ffc0 	bl	8007976 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80089f6:	4b1d      	ldr	r3, [pc, #116]	@ (8008a6c <USBD_SetConfig+0x150>)
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	461a      	mov	r2, r3
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008a00:	4b1a      	ldr	r3, [pc, #104]	@ (8008a6c <USBD_SetConfig+0x150>)
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	4619      	mov	r1, r3
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f7fe ff99 	bl	800793e <USBD_SetClassConfig>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008a10:	7bfb      	ldrb	r3, [r7, #15]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d00f      	beq.n	8008a36 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008a16:	6839      	ldr	r1, [r7, #0]
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f000 f918 	bl	8008c4e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	b2db      	uxtb	r3, r3
 8008a24:	4619      	mov	r1, r3
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f7fe ffa5 	bl	8007976 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2202      	movs	r2, #2
 8008a30:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008a34:	e014      	b.n	8008a60 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 f9e0 	bl	8008dfc <USBD_CtlSendStatus>
      break;
 8008a3c:	e010      	b.n	8008a60 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f000 f9dc 	bl	8008dfc <USBD_CtlSendStatus>
      break;
 8008a44:	e00c      	b.n	8008a60 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008a46:	6839      	ldr	r1, [r7, #0]
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f000 f900 	bl	8008c4e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008a4e:	4b07      	ldr	r3, [pc, #28]	@ (8008a6c <USBD_SetConfig+0x150>)
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	4619      	mov	r1, r3
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f7fe ff8e 	bl	8007976 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008a5a:	2303      	movs	r3, #3
 8008a5c:	73fb      	strb	r3, [r7, #15]
      break;
 8008a5e:	bf00      	nop
  }

  return ret;
 8008a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3710      	adds	r7, #16
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}
 8008a6a:	bf00      	nop
 8008a6c:	20000304 	.word	0x20000304

08008a70 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b082      	sub	sp, #8
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	88db      	ldrh	r3, [r3, #6]
 8008a7e:	2b01      	cmp	r3, #1
 8008a80:	d004      	beq.n	8008a8c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008a82:	6839      	ldr	r1, [r7, #0]
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 f8e2 	bl	8008c4e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008a8a:	e023      	b.n	8008ad4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a92:	b2db      	uxtb	r3, r3
 8008a94:	2b02      	cmp	r3, #2
 8008a96:	dc02      	bgt.n	8008a9e <USBD_GetConfig+0x2e>
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	dc03      	bgt.n	8008aa4 <USBD_GetConfig+0x34>
 8008a9c:	e015      	b.n	8008aca <USBD_GetConfig+0x5a>
 8008a9e:	2b03      	cmp	r3, #3
 8008aa0:	d00b      	beq.n	8008aba <USBD_GetConfig+0x4a>
 8008aa2:	e012      	b.n	8008aca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	3308      	adds	r3, #8
 8008aae:	2201      	movs	r2, #1
 8008ab0:	4619      	mov	r1, r3
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f000 f948 	bl	8008d48 <USBD_CtlSendData>
        break;
 8008ab8:	e00c      	b.n	8008ad4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	3304      	adds	r3, #4
 8008abe:	2201      	movs	r2, #1
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 f940 	bl	8008d48 <USBD_CtlSendData>
        break;
 8008ac8:	e004      	b.n	8008ad4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008aca:	6839      	ldr	r1, [r7, #0]
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 f8be 	bl	8008c4e <USBD_CtlError>
        break;
 8008ad2:	bf00      	nop
}
 8008ad4:	bf00      	nop
 8008ad6:	3708      	adds	r7, #8
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b082      	sub	sp, #8
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	3b01      	subs	r3, #1
 8008af0:	2b02      	cmp	r3, #2
 8008af2:	d81e      	bhi.n	8008b32 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	88db      	ldrh	r3, [r3, #6]
 8008af8:	2b02      	cmp	r3, #2
 8008afa:	d004      	beq.n	8008b06 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008afc:	6839      	ldr	r1, [r7, #0]
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 f8a5 	bl	8008c4e <USBD_CtlError>
        break;
 8008b04:	e01a      	b.n	8008b3c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2201      	movs	r2, #1
 8008b0a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d005      	beq.n	8008b22 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	68db      	ldr	r3, [r3, #12]
 8008b1a:	f043 0202 	orr.w	r2, r3, #2
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	330c      	adds	r3, #12
 8008b26:	2202      	movs	r2, #2
 8008b28:	4619      	mov	r1, r3
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 f90c 	bl	8008d48 <USBD_CtlSendData>
      break;
 8008b30:	e004      	b.n	8008b3c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008b32:	6839      	ldr	r1, [r7, #0]
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f000 f88a 	bl	8008c4e <USBD_CtlError>
      break;
 8008b3a:	bf00      	nop
  }
}
 8008b3c:	bf00      	nop
 8008b3e:	3708      	adds	r7, #8
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b082      	sub	sp, #8
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	885b      	ldrh	r3, [r3, #2]
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d107      	bne.n	8008b66 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2201      	movs	r2, #1
 8008b5a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 f94c 	bl	8008dfc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008b64:	e013      	b.n	8008b8e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	885b      	ldrh	r3, [r3, #2]
 8008b6a:	2b02      	cmp	r3, #2
 8008b6c:	d10b      	bne.n	8008b86 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	889b      	ldrh	r3, [r3, #4]
 8008b72:	0a1b      	lsrs	r3, r3, #8
 8008b74:	b29b      	uxth	r3, r3
 8008b76:	b2da      	uxtb	r2, r3
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 f93c 	bl	8008dfc <USBD_CtlSendStatus>
}
 8008b84:	e003      	b.n	8008b8e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008b86:	6839      	ldr	r1, [r7, #0]
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f000 f860 	bl	8008c4e <USBD_CtlError>
}
 8008b8e:	bf00      	nop
 8008b90:	3708      	adds	r7, #8
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}

08008b96 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b96:	b580      	push	{r7, lr}
 8008b98:	b082      	sub	sp, #8
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	6078      	str	r0, [r7, #4]
 8008b9e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	3b01      	subs	r3, #1
 8008baa:	2b02      	cmp	r3, #2
 8008bac:	d80b      	bhi.n	8008bc6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	885b      	ldrh	r3, [r3, #2]
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d10c      	bne.n	8008bd0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 f91c 	bl	8008dfc <USBD_CtlSendStatus>
      }
      break;
 8008bc4:	e004      	b.n	8008bd0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008bc6:	6839      	ldr	r1, [r7, #0]
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 f840 	bl	8008c4e <USBD_CtlError>
      break;
 8008bce:	e000      	b.n	8008bd2 <USBD_ClrFeature+0x3c>
      break;
 8008bd0:	bf00      	nop
  }
}
 8008bd2:	bf00      	nop
 8008bd4:	3708      	adds	r7, #8
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}

08008bda <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008bda:	b580      	push	{r7, lr}
 8008bdc:	b084      	sub	sp, #16
 8008bde:	af00      	add	r7, sp, #0
 8008be0:	6078      	str	r0, [r7, #4]
 8008be2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	781a      	ldrb	r2, [r3, #0]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	781a      	ldrb	r2, [r3, #0]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	3301      	adds	r3, #1
 8008c02:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008c04:	68f8      	ldr	r0, [r7, #12]
 8008c06:	f7ff fa40 	bl	800808a <SWAPBYTE>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	3301      	adds	r3, #1
 8008c16:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008c1e:	68f8      	ldr	r0, [r7, #12]
 8008c20:	f7ff fa33 	bl	800808a <SWAPBYTE>
 8008c24:	4603      	mov	r3, r0
 8008c26:	461a      	mov	r2, r3
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	3301      	adds	r3, #1
 8008c30:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	3301      	adds	r3, #1
 8008c36:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008c38:	68f8      	ldr	r0, [r7, #12]
 8008c3a:	f7ff fa26 	bl	800808a <SWAPBYTE>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	461a      	mov	r2, r3
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	80da      	strh	r2, [r3, #6]
}
 8008c46:	bf00      	nop
 8008c48:	3710      	adds	r7, #16
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}

08008c4e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c4e:	b580      	push	{r7, lr}
 8008c50:	b082      	sub	sp, #8
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	6078      	str	r0, [r7, #4]
 8008c56:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c58:	2180      	movs	r1, #128	@ 0x80
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f003 fb28 	bl	800c2b0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008c60:	2100      	movs	r1, #0
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f003 fb24 	bl	800c2b0 <USBD_LL_StallEP>
}
 8008c68:	bf00      	nop
 8008c6a:	3708      	adds	r7, #8
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b086      	sub	sp, #24
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	60f8      	str	r0, [r7, #12]
 8008c78:	60b9      	str	r1, [r7, #8]
 8008c7a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d042      	beq.n	8008d0c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008c8a:	6938      	ldr	r0, [r7, #16]
 8008c8c:	f000 f842 	bl	8008d14 <USBD_GetLen>
 8008c90:	4603      	mov	r3, r0
 8008c92:	3301      	adds	r3, #1
 8008c94:	005b      	lsls	r3, r3, #1
 8008c96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c9a:	d808      	bhi.n	8008cae <USBD_GetString+0x3e>
 8008c9c:	6938      	ldr	r0, [r7, #16]
 8008c9e:	f000 f839 	bl	8008d14 <USBD_GetLen>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	005b      	lsls	r3, r3, #1
 8008caa:	b29a      	uxth	r2, r3
 8008cac:	e001      	b.n	8008cb2 <USBD_GetString+0x42>
 8008cae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008cb6:	7dfb      	ldrb	r3, [r7, #23]
 8008cb8:	68ba      	ldr	r2, [r7, #8]
 8008cba:	4413      	add	r3, r2
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	7812      	ldrb	r2, [r2, #0]
 8008cc0:	701a      	strb	r2, [r3, #0]
  idx++;
 8008cc2:	7dfb      	ldrb	r3, [r7, #23]
 8008cc4:	3301      	adds	r3, #1
 8008cc6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008cc8:	7dfb      	ldrb	r3, [r7, #23]
 8008cca:	68ba      	ldr	r2, [r7, #8]
 8008ccc:	4413      	add	r3, r2
 8008cce:	2203      	movs	r2, #3
 8008cd0:	701a      	strb	r2, [r3, #0]
  idx++;
 8008cd2:	7dfb      	ldrb	r3, [r7, #23]
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008cd8:	e013      	b.n	8008d02 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008cda:	7dfb      	ldrb	r3, [r7, #23]
 8008cdc:	68ba      	ldr	r2, [r7, #8]
 8008cde:	4413      	add	r3, r2
 8008ce0:	693a      	ldr	r2, [r7, #16]
 8008ce2:	7812      	ldrb	r2, [r2, #0]
 8008ce4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	3301      	adds	r3, #1
 8008cea:	613b      	str	r3, [r7, #16]
    idx++;
 8008cec:	7dfb      	ldrb	r3, [r7, #23]
 8008cee:	3301      	adds	r3, #1
 8008cf0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008cf2:	7dfb      	ldrb	r3, [r7, #23]
 8008cf4:	68ba      	ldr	r2, [r7, #8]
 8008cf6:	4413      	add	r3, r2
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	701a      	strb	r2, [r3, #0]
    idx++;
 8008cfc:	7dfb      	ldrb	r3, [r7, #23]
 8008cfe:	3301      	adds	r3, #1
 8008d00:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	781b      	ldrb	r3, [r3, #0]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d1e7      	bne.n	8008cda <USBD_GetString+0x6a>
 8008d0a:	e000      	b.n	8008d0e <USBD_GetString+0x9e>
    return;
 8008d0c:	bf00      	nop
  }
}
 8008d0e:	3718      	adds	r7, #24
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}

08008d14 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b085      	sub	sp, #20
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008d24:	e005      	b.n	8008d32 <USBD_GetLen+0x1e>
  {
    len++;
 8008d26:	7bfb      	ldrb	r3, [r7, #15]
 8008d28:	3301      	adds	r3, #1
 8008d2a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	3301      	adds	r3, #1
 8008d30:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d1f5      	bne.n	8008d26 <USBD_GetLen+0x12>
  }

  return len;
 8008d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3714      	adds	r7, #20
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr

08008d48 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b084      	sub	sp, #16
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	60f8      	str	r0, [r7, #12]
 8008d50:	60b9      	str	r1, [r7, #8]
 8008d52:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2202      	movs	r2, #2
 8008d58:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	687a      	ldr	r2, [r7, #4]
 8008d60:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	687a      	ldr	r2, [r7, #4]
 8008d66:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	68ba      	ldr	r2, [r7, #8]
 8008d6c:	2100      	movs	r1, #0
 8008d6e:	68f8      	ldr	r0, [r7, #12]
 8008d70:	f003 fb27 	bl	800c3c2 <USBD_LL_Transmit>

  return USBD_OK;
 8008d74:	2300      	movs	r3, #0
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3710      	adds	r7, #16
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}

08008d7e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b084      	sub	sp, #16
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	60f8      	str	r0, [r7, #12]
 8008d86:	60b9      	str	r1, [r7, #8]
 8008d88:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	68ba      	ldr	r2, [r7, #8]
 8008d8e:	2100      	movs	r1, #0
 8008d90:	68f8      	ldr	r0, [r7, #12]
 8008d92:	f003 fb16 	bl	800c3c2 <USBD_LL_Transmit>

  return USBD_OK;
 8008d96:	2300      	movs	r3, #0
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3710      	adds	r7, #16
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	60b9      	str	r1, [r7, #8]
 8008daa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	2203      	movs	r2, #3
 8008db0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	687a      	ldr	r2, [r7, #4]
 8008db8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	687a      	ldr	r2, [r7, #4]
 8008dc0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	68ba      	ldr	r2, [r7, #8]
 8008dc8:	2100      	movs	r1, #0
 8008dca:	68f8      	ldr	r0, [r7, #12]
 8008dcc:	f003 fb1a 	bl	800c404 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008dd0:	2300      	movs	r3, #0
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3710      	adds	r7, #16
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}

08008dda <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008dda:	b580      	push	{r7, lr}
 8008ddc:	b084      	sub	sp, #16
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	60f8      	str	r0, [r7, #12]
 8008de2:	60b9      	str	r1, [r7, #8]
 8008de4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	68ba      	ldr	r2, [r7, #8]
 8008dea:	2100      	movs	r1, #0
 8008dec:	68f8      	ldr	r0, [r7, #12]
 8008dee:	f003 fb09 	bl	800c404 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008df2:	2300      	movs	r3, #0
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3710      	adds	r7, #16
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b082      	sub	sp, #8
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2204      	movs	r2, #4
 8008e08:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	2200      	movs	r2, #0
 8008e10:	2100      	movs	r1, #0
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f003 fad5 	bl	800c3c2 <USBD_LL_Transmit>

  return USBD_OK;
 8008e18:	2300      	movs	r3, #0
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3708      	adds	r7, #8
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}

08008e22 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008e22:	b580      	push	{r7, lr}
 8008e24:	b082      	sub	sp, #8
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2205      	movs	r2, #5
 8008e2e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e32:	2300      	movs	r3, #0
 8008e34:	2200      	movs	r2, #0
 8008e36:	2100      	movs	r1, #0
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f003 fae3 	bl	800c404 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e3e:	2300      	movs	r3, #0
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3708      	adds	r7, #8
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <__NVIC_SetPriority>:
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b083      	sub	sp, #12
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	4603      	mov	r3, r0
 8008e50:	6039      	str	r1, [r7, #0]
 8008e52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	db0a      	blt.n	8008e72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	b2da      	uxtb	r2, r3
 8008e60:	490c      	ldr	r1, [pc, #48]	@ (8008e94 <__NVIC_SetPriority+0x4c>)
 8008e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e66:	0112      	lsls	r2, r2, #4
 8008e68:	b2d2      	uxtb	r2, r2
 8008e6a:	440b      	add	r3, r1
 8008e6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008e70:	e00a      	b.n	8008e88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	b2da      	uxtb	r2, r3
 8008e76:	4908      	ldr	r1, [pc, #32]	@ (8008e98 <__NVIC_SetPriority+0x50>)
 8008e78:	79fb      	ldrb	r3, [r7, #7]
 8008e7a:	f003 030f 	and.w	r3, r3, #15
 8008e7e:	3b04      	subs	r3, #4
 8008e80:	0112      	lsls	r2, r2, #4
 8008e82:	b2d2      	uxtb	r2, r2
 8008e84:	440b      	add	r3, r1
 8008e86:	761a      	strb	r2, [r3, #24]
}
 8008e88:	bf00      	nop
 8008e8a:	370c      	adds	r7, #12
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr
 8008e94:	e000e100 	.word	0xe000e100
 8008e98:	e000ed00 	.word	0xe000ed00

08008e9c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008ea0:	4b05      	ldr	r3, [pc, #20]	@ (8008eb8 <SysTick_Handler+0x1c>)
 8008ea2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008ea4:	f001 fd82 	bl	800a9ac <xTaskGetSchedulerState>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	d001      	beq.n	8008eb2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008eae:	f002 fb7b 	bl	800b5a8 <xPortSysTickHandler>
  }
}
 8008eb2:	bf00      	nop
 8008eb4:	bd80      	pop	{r7, pc}
 8008eb6:	bf00      	nop
 8008eb8:	e000e010 	.word	0xe000e010

08008ebc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008ec0:	2100      	movs	r1, #0
 8008ec2:	f06f 0004 	mvn.w	r0, #4
 8008ec6:	f7ff ffbf 	bl	8008e48 <__NVIC_SetPriority>
#endif
}
 8008eca:	bf00      	nop
 8008ecc:	bd80      	pop	{r7, pc}
	...

08008ed0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008ed0:	b480      	push	{r7}
 8008ed2:	b083      	sub	sp, #12
 8008ed4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ed6:	f3ef 8305 	mrs	r3, IPSR
 8008eda:	603b      	str	r3, [r7, #0]
  return(result);
 8008edc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d003      	beq.n	8008eea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008ee2:	f06f 0305 	mvn.w	r3, #5
 8008ee6:	607b      	str	r3, [r7, #4]
 8008ee8:	e00c      	b.n	8008f04 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008eea:	4b0a      	ldr	r3, [pc, #40]	@ (8008f14 <osKernelInitialize+0x44>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d105      	bne.n	8008efe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008ef2:	4b08      	ldr	r3, [pc, #32]	@ (8008f14 <osKernelInitialize+0x44>)
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	607b      	str	r3, [r7, #4]
 8008efc:	e002      	b.n	8008f04 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008efe:	f04f 33ff 	mov.w	r3, #4294967295
 8008f02:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008f04:	687b      	ldr	r3, [r7, #4]
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	370c      	adds	r7, #12
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f10:	4770      	bx	lr
 8008f12:	bf00      	nop
 8008f14:	20000308 	.word	0x20000308

08008f18 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f1e:	f3ef 8305 	mrs	r3, IPSR
 8008f22:	603b      	str	r3, [r7, #0]
  return(result);
 8008f24:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d003      	beq.n	8008f32 <osKernelStart+0x1a>
    stat = osErrorISR;
 8008f2a:	f06f 0305 	mvn.w	r3, #5
 8008f2e:	607b      	str	r3, [r7, #4]
 8008f30:	e010      	b.n	8008f54 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008f32:	4b0b      	ldr	r3, [pc, #44]	@ (8008f60 <osKernelStart+0x48>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	2b01      	cmp	r3, #1
 8008f38:	d109      	bne.n	8008f4e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008f3a:	f7ff ffbf 	bl	8008ebc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008f3e:	4b08      	ldr	r3, [pc, #32]	@ (8008f60 <osKernelStart+0x48>)
 8008f40:	2202      	movs	r2, #2
 8008f42:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008f44:	f001 f8ce 	bl	800a0e4 <vTaskStartScheduler>
      stat = osOK;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	607b      	str	r3, [r7, #4]
 8008f4c:	e002      	b.n	8008f54 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8008f52:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008f54:	687b      	ldr	r3, [r7, #4]
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3708      	adds	r7, #8
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	20000308 	.word	0x20000308

08008f64 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b08e      	sub	sp, #56	@ 0x38
 8008f68:	af04      	add	r7, sp, #16
 8008f6a:	60f8      	str	r0, [r7, #12]
 8008f6c:	60b9      	str	r1, [r7, #8]
 8008f6e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008f70:	2300      	movs	r3, #0
 8008f72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f74:	f3ef 8305 	mrs	r3, IPSR
 8008f78:	617b      	str	r3, [r7, #20]
  return(result);
 8008f7a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d17e      	bne.n	800907e <osThreadNew+0x11a>
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d07b      	beq.n	800907e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008f86:	2380      	movs	r3, #128	@ 0x80
 8008f88:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008f8a:	2318      	movs	r3, #24
 8008f8c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008f92:	f04f 33ff 	mov.w	r3, #4294967295
 8008f96:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d045      	beq.n	800902a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d002      	beq.n	8008fac <osThreadNew+0x48>
        name = attr->name;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	699b      	ldr	r3, [r3, #24]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d002      	beq.n	8008fba <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	699b      	ldr	r3, [r3, #24]
 8008fb8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008fba:	69fb      	ldr	r3, [r7, #28]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d008      	beq.n	8008fd2 <osThreadNew+0x6e>
 8008fc0:	69fb      	ldr	r3, [r7, #28]
 8008fc2:	2b38      	cmp	r3, #56	@ 0x38
 8008fc4:	d805      	bhi.n	8008fd2 <osThreadNew+0x6e>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	f003 0301 	and.w	r3, r3, #1
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d001      	beq.n	8008fd6 <osThreadNew+0x72>
        return (NULL);
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	e054      	b.n	8009080 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	695b      	ldr	r3, [r3, #20]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d003      	beq.n	8008fe6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	695b      	ldr	r3, [r3, #20]
 8008fe2:	089b      	lsrs	r3, r3, #2
 8008fe4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	689b      	ldr	r3, [r3, #8]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d00e      	beq.n	800900c <osThreadNew+0xa8>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	68db      	ldr	r3, [r3, #12]
 8008ff2:	2ba7      	cmp	r3, #167	@ 0xa7
 8008ff4:	d90a      	bls.n	800900c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d006      	beq.n	800900c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	695b      	ldr	r3, [r3, #20]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d002      	beq.n	800900c <osThreadNew+0xa8>
        mem = 1;
 8009006:	2301      	movs	r3, #1
 8009008:	61bb      	str	r3, [r7, #24]
 800900a:	e010      	b.n	800902e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	689b      	ldr	r3, [r3, #8]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d10c      	bne.n	800902e <osThreadNew+0xca>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	68db      	ldr	r3, [r3, #12]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d108      	bne.n	800902e <osThreadNew+0xca>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	691b      	ldr	r3, [r3, #16]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d104      	bne.n	800902e <osThreadNew+0xca>
          mem = 0;
 8009024:	2300      	movs	r3, #0
 8009026:	61bb      	str	r3, [r7, #24]
 8009028:	e001      	b.n	800902e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800902a:	2300      	movs	r3, #0
 800902c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800902e:	69bb      	ldr	r3, [r7, #24]
 8009030:	2b01      	cmp	r3, #1
 8009032:	d110      	bne.n	8009056 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009038:	687a      	ldr	r2, [r7, #4]
 800903a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800903c:	9202      	str	r2, [sp, #8]
 800903e:	9301      	str	r3, [sp, #4]
 8009040:	69fb      	ldr	r3, [r7, #28]
 8009042:	9300      	str	r3, [sp, #0]
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	6a3a      	ldr	r2, [r7, #32]
 8009048:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800904a:	68f8      	ldr	r0, [r7, #12]
 800904c:	f000 fe56 	bl	8009cfc <xTaskCreateStatic>
 8009050:	4603      	mov	r3, r0
 8009052:	613b      	str	r3, [r7, #16]
 8009054:	e013      	b.n	800907e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009056:	69bb      	ldr	r3, [r7, #24]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d110      	bne.n	800907e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800905c:	6a3b      	ldr	r3, [r7, #32]
 800905e:	b29a      	uxth	r2, r3
 8009060:	f107 0310 	add.w	r3, r7, #16
 8009064:	9301      	str	r3, [sp, #4]
 8009066:	69fb      	ldr	r3, [r7, #28]
 8009068:	9300      	str	r3, [sp, #0]
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800906e:	68f8      	ldr	r0, [r7, #12]
 8009070:	f000 fea4 	bl	8009dbc <xTaskCreate>
 8009074:	4603      	mov	r3, r0
 8009076:	2b01      	cmp	r3, #1
 8009078:	d001      	beq.n	800907e <osThreadNew+0x11a>
            hTask = NULL;
 800907a:	2300      	movs	r3, #0
 800907c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800907e:	693b      	ldr	r3, [r7, #16]
}
 8009080:	4618      	mov	r0, r3
 8009082:	3728      	adds	r7, #40	@ 0x28
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}

08009088 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009088:	b580      	push	{r7, lr}
 800908a:	b084      	sub	sp, #16
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009090:	f3ef 8305 	mrs	r3, IPSR
 8009094:	60bb      	str	r3, [r7, #8]
  return(result);
 8009096:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009098:	2b00      	cmp	r3, #0
 800909a:	d003      	beq.n	80090a4 <osDelay+0x1c>
    stat = osErrorISR;
 800909c:	f06f 0305 	mvn.w	r3, #5
 80090a0:	60fb      	str	r3, [r7, #12]
 80090a2:	e007      	b.n	80090b4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80090a4:	2300      	movs	r3, #0
 80090a6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d002      	beq.n	80090b4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 ffe2 	bl	800a078 <vTaskDelay>
    }
  }

  return (stat);
 80090b4:	68fb      	ldr	r3, [r7, #12]
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3710      	adds	r7, #16
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
	...

080090c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80090c0:	b480      	push	{r7}
 80090c2:	b085      	sub	sp, #20
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	60f8      	str	r0, [r7, #12]
 80090c8:	60b9      	str	r1, [r7, #8]
 80090ca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	4a07      	ldr	r2, [pc, #28]	@ (80090ec <vApplicationGetIdleTaskMemory+0x2c>)
 80090d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	4a06      	ldr	r2, [pc, #24]	@ (80090f0 <vApplicationGetIdleTaskMemory+0x30>)
 80090d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2280      	movs	r2, #128	@ 0x80
 80090dc:	601a      	str	r2, [r3, #0]
}
 80090de:	bf00      	nop
 80090e0:	3714      	adds	r7, #20
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr
 80090ea:	bf00      	nop
 80090ec:	2000030c 	.word	0x2000030c
 80090f0:	200003b4 	.word	0x200003b4

080090f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80090f4:	b480      	push	{r7}
 80090f6:	b085      	sub	sp, #20
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	60f8      	str	r0, [r7, #12]
 80090fc:	60b9      	str	r1, [r7, #8]
 80090fe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	4a07      	ldr	r2, [pc, #28]	@ (8009120 <vApplicationGetTimerTaskMemory+0x2c>)
 8009104:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	4a06      	ldr	r2, [pc, #24]	@ (8009124 <vApplicationGetTimerTaskMemory+0x30>)
 800910a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009112:	601a      	str	r2, [r3, #0]
}
 8009114:	bf00      	nop
 8009116:	3714      	adds	r7, #20
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr
 8009120:	200005b4 	.word	0x200005b4
 8009124:	2000065c 	.word	0x2000065c

08009128 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009128:	b480      	push	{r7}
 800912a:	b083      	sub	sp, #12
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f103 0208 	add.w	r2, r3, #8
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f04f 32ff 	mov.w	r2, #4294967295
 8009140:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f103 0208 	add.w	r2, r3, #8
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f103 0208 	add.w	r2, r3, #8
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2200      	movs	r2, #0
 800915a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800915c:	bf00      	nop
 800915e:	370c      	adds	r7, #12
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr

08009168 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009168:	b480      	push	{r7}
 800916a:	b083      	sub	sp, #12
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2200      	movs	r2, #0
 8009174:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009176:	bf00      	nop
 8009178:	370c      	adds	r7, #12
 800917a:	46bd      	mov	sp, r7
 800917c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009180:	4770      	bx	lr

08009182 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009182:	b480      	push	{r7}
 8009184:	b085      	sub	sp, #20
 8009186:	af00      	add	r7, sp, #0
 8009188:	6078      	str	r0, [r7, #4]
 800918a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	685b      	ldr	r3, [r3, #4]
 8009190:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	68fa      	ldr	r2, [r7, #12]
 8009196:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	689a      	ldr	r2, [r3, #8]
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	689b      	ldr	r3, [r3, #8]
 80091a4:	683a      	ldr	r2, [r7, #0]
 80091a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	683a      	ldr	r2, [r7, #0]
 80091ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	1c5a      	adds	r2, r3, #1
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	601a      	str	r2, [r3, #0]
}
 80091be:	bf00      	nop
 80091c0:	3714      	adds	r7, #20
 80091c2:	46bd      	mov	sp, r7
 80091c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c8:	4770      	bx	lr

080091ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80091ca:	b480      	push	{r7}
 80091cc:	b085      	sub	sp, #20
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	6078      	str	r0, [r7, #4]
 80091d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091e0:	d103      	bne.n	80091ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	691b      	ldr	r3, [r3, #16]
 80091e6:	60fb      	str	r3, [r7, #12]
 80091e8:	e00c      	b.n	8009204 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	3308      	adds	r3, #8
 80091ee:	60fb      	str	r3, [r7, #12]
 80091f0:	e002      	b.n	80091f8 <vListInsert+0x2e>
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	60fb      	str	r3, [r7, #12]
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	68ba      	ldr	r2, [r7, #8]
 8009200:	429a      	cmp	r2, r3
 8009202:	d2f6      	bcs.n	80091f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	685a      	ldr	r2, [r3, #4]
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	683a      	ldr	r2, [r7, #0]
 8009212:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	68fa      	ldr	r2, [r7, #12]
 8009218:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	683a      	ldr	r2, [r7, #0]
 800921e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	687a      	ldr	r2, [r7, #4]
 8009224:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	1c5a      	adds	r2, r3, #1
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	601a      	str	r2, [r3, #0]
}
 8009230:	bf00      	nop
 8009232:	3714      	adds	r7, #20
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr

0800923c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800923c:	b480      	push	{r7}
 800923e:	b085      	sub	sp, #20
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	691b      	ldr	r3, [r3, #16]
 8009248:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	685b      	ldr	r3, [r3, #4]
 800924e:	687a      	ldr	r2, [r7, #4]
 8009250:	6892      	ldr	r2, [r2, #8]
 8009252:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	6852      	ldr	r2, [r2, #4]
 800925c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	685b      	ldr	r3, [r3, #4]
 8009262:	687a      	ldr	r2, [r7, #4]
 8009264:	429a      	cmp	r2, r3
 8009266:	d103      	bne.n	8009270 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	689a      	ldr	r2, [r3, #8]
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2200      	movs	r2, #0
 8009274:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	1e5a      	subs	r2, r3, #1
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
}
 8009284:	4618      	mov	r0, r3
 8009286:	3714      	adds	r7, #20
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b084      	sub	sp, #16
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d10b      	bne.n	80092bc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80092a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092a8:	f383 8811 	msr	BASEPRI, r3
 80092ac:	f3bf 8f6f 	isb	sy
 80092b0:	f3bf 8f4f 	dsb	sy
 80092b4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80092b6:	bf00      	nop
 80092b8:	bf00      	nop
 80092ba:	e7fd      	b.n	80092b8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80092bc:	f002 f8e4 	bl	800b488 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681a      	ldr	r2, [r3, #0]
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092c8:	68f9      	ldr	r1, [r7, #12]
 80092ca:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80092cc:	fb01 f303 	mul.w	r3, r1, r3
 80092d0:	441a      	add	r2, r3
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2200      	movs	r2, #0
 80092da:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681a      	ldr	r2, [r3, #0]
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681a      	ldr	r2, [r3, #0]
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092ec:	3b01      	subs	r3, #1
 80092ee:	68f9      	ldr	r1, [r7, #12]
 80092f0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80092f2:	fb01 f303 	mul.w	r3, r1, r3
 80092f6:	441a      	add	r2, r3
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	22ff      	movs	r2, #255	@ 0xff
 8009300:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	22ff      	movs	r2, #255	@ 0xff
 8009308:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d114      	bne.n	800933c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	691b      	ldr	r3, [r3, #16]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d01a      	beq.n	8009350 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	3310      	adds	r3, #16
 800931e:	4618      	mov	r0, r3
 8009320:	f001 f97e 	bl	800a620 <xTaskRemoveFromEventList>
 8009324:	4603      	mov	r3, r0
 8009326:	2b00      	cmp	r3, #0
 8009328:	d012      	beq.n	8009350 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800932a:	4b0d      	ldr	r3, [pc, #52]	@ (8009360 <xQueueGenericReset+0xd0>)
 800932c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009330:	601a      	str	r2, [r3, #0]
 8009332:	f3bf 8f4f 	dsb	sy
 8009336:	f3bf 8f6f 	isb	sy
 800933a:	e009      	b.n	8009350 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	3310      	adds	r3, #16
 8009340:	4618      	mov	r0, r3
 8009342:	f7ff fef1 	bl	8009128 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	3324      	adds	r3, #36	@ 0x24
 800934a:	4618      	mov	r0, r3
 800934c:	f7ff feec 	bl	8009128 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009350:	f002 f8cc 	bl	800b4ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009354:	2301      	movs	r3, #1
}
 8009356:	4618      	mov	r0, r3
 8009358:	3710      	adds	r7, #16
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
 800935e:	bf00      	nop
 8009360:	e000ed04 	.word	0xe000ed04

08009364 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009364:	b580      	push	{r7, lr}
 8009366:	b08e      	sub	sp, #56	@ 0x38
 8009368:	af02      	add	r7, sp, #8
 800936a:	60f8      	str	r0, [r7, #12]
 800936c:	60b9      	str	r1, [r7, #8]
 800936e:	607a      	str	r2, [r7, #4]
 8009370:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d10b      	bne.n	8009390 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800937c:	f383 8811 	msr	BASEPRI, r3
 8009380:	f3bf 8f6f 	isb	sy
 8009384:	f3bf 8f4f 	dsb	sy
 8009388:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800938a:	bf00      	nop
 800938c:	bf00      	nop
 800938e:	e7fd      	b.n	800938c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d10b      	bne.n	80093ae <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800939a:	f383 8811 	msr	BASEPRI, r3
 800939e:	f3bf 8f6f 	isb	sy
 80093a2:	f3bf 8f4f 	dsb	sy
 80093a6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80093a8:	bf00      	nop
 80093aa:	bf00      	nop
 80093ac:	e7fd      	b.n	80093aa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d002      	beq.n	80093ba <xQueueGenericCreateStatic+0x56>
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d001      	beq.n	80093be <xQueueGenericCreateStatic+0x5a>
 80093ba:	2301      	movs	r3, #1
 80093bc:	e000      	b.n	80093c0 <xQueueGenericCreateStatic+0x5c>
 80093be:	2300      	movs	r3, #0
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d10b      	bne.n	80093dc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80093c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093c8:	f383 8811 	msr	BASEPRI, r3
 80093cc:	f3bf 8f6f 	isb	sy
 80093d0:	f3bf 8f4f 	dsb	sy
 80093d4:	623b      	str	r3, [r7, #32]
}
 80093d6:	bf00      	nop
 80093d8:	bf00      	nop
 80093da:	e7fd      	b.n	80093d8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d102      	bne.n	80093e8 <xQueueGenericCreateStatic+0x84>
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d101      	bne.n	80093ec <xQueueGenericCreateStatic+0x88>
 80093e8:	2301      	movs	r3, #1
 80093ea:	e000      	b.n	80093ee <xQueueGenericCreateStatic+0x8a>
 80093ec:	2300      	movs	r3, #0
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d10b      	bne.n	800940a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80093f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093f6:	f383 8811 	msr	BASEPRI, r3
 80093fa:	f3bf 8f6f 	isb	sy
 80093fe:	f3bf 8f4f 	dsb	sy
 8009402:	61fb      	str	r3, [r7, #28]
}
 8009404:	bf00      	nop
 8009406:	bf00      	nop
 8009408:	e7fd      	b.n	8009406 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800940a:	2350      	movs	r3, #80	@ 0x50
 800940c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	2b50      	cmp	r3, #80	@ 0x50
 8009412:	d00b      	beq.n	800942c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009418:	f383 8811 	msr	BASEPRI, r3
 800941c:	f3bf 8f6f 	isb	sy
 8009420:	f3bf 8f4f 	dsb	sy
 8009424:	61bb      	str	r3, [r7, #24]
}
 8009426:	bf00      	nop
 8009428:	bf00      	nop
 800942a:	e7fd      	b.n	8009428 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800942c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009434:	2b00      	cmp	r3, #0
 8009436:	d00d      	beq.n	8009454 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800943a:	2201      	movs	r2, #1
 800943c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009440:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009446:	9300      	str	r3, [sp, #0]
 8009448:	4613      	mov	r3, r2
 800944a:	687a      	ldr	r2, [r7, #4]
 800944c:	68b9      	ldr	r1, [r7, #8]
 800944e:	68f8      	ldr	r0, [r7, #12]
 8009450:	f000 f840 	bl	80094d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009456:	4618      	mov	r0, r3
 8009458:	3730      	adds	r7, #48	@ 0x30
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}

0800945e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800945e:	b580      	push	{r7, lr}
 8009460:	b08a      	sub	sp, #40	@ 0x28
 8009462:	af02      	add	r7, sp, #8
 8009464:	60f8      	str	r0, [r7, #12]
 8009466:	60b9      	str	r1, [r7, #8]
 8009468:	4613      	mov	r3, r2
 800946a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d10b      	bne.n	800948a <xQueueGenericCreate+0x2c>
	__asm volatile
 8009472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009476:	f383 8811 	msr	BASEPRI, r3
 800947a:	f3bf 8f6f 	isb	sy
 800947e:	f3bf 8f4f 	dsb	sy
 8009482:	613b      	str	r3, [r7, #16]
}
 8009484:	bf00      	nop
 8009486:	bf00      	nop
 8009488:	e7fd      	b.n	8009486 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	68ba      	ldr	r2, [r7, #8]
 800948e:	fb02 f303 	mul.w	r3, r2, r3
 8009492:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009494:	69fb      	ldr	r3, [r7, #28]
 8009496:	3350      	adds	r3, #80	@ 0x50
 8009498:	4618      	mov	r0, r3
 800949a:	f002 f917 	bl	800b6cc <pvPortMalloc>
 800949e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80094a0:	69bb      	ldr	r3, [r7, #24]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d011      	beq.n	80094ca <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80094a6:	69bb      	ldr	r3, [r7, #24]
 80094a8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	3350      	adds	r3, #80	@ 0x50
 80094ae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80094b0:	69bb      	ldr	r3, [r7, #24]
 80094b2:	2200      	movs	r2, #0
 80094b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80094b8:	79fa      	ldrb	r2, [r7, #7]
 80094ba:	69bb      	ldr	r3, [r7, #24]
 80094bc:	9300      	str	r3, [sp, #0]
 80094be:	4613      	mov	r3, r2
 80094c0:	697a      	ldr	r2, [r7, #20]
 80094c2:	68b9      	ldr	r1, [r7, #8]
 80094c4:	68f8      	ldr	r0, [r7, #12]
 80094c6:	f000 f805 	bl	80094d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80094ca:	69bb      	ldr	r3, [r7, #24]
	}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3720      	adds	r7, #32
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b084      	sub	sp, #16
 80094d8:	af00      	add	r7, sp, #0
 80094da:	60f8      	str	r0, [r7, #12]
 80094dc:	60b9      	str	r1, [r7, #8]
 80094de:	607a      	str	r2, [r7, #4]
 80094e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d103      	bne.n	80094f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80094e8:	69bb      	ldr	r3, [r7, #24]
 80094ea:	69ba      	ldr	r2, [r7, #24]
 80094ec:	601a      	str	r2, [r3, #0]
 80094ee:	e002      	b.n	80094f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80094f0:	69bb      	ldr	r3, [r7, #24]
 80094f2:	687a      	ldr	r2, [r7, #4]
 80094f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80094f6:	69bb      	ldr	r3, [r7, #24]
 80094f8:	68fa      	ldr	r2, [r7, #12]
 80094fa:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80094fc:	69bb      	ldr	r3, [r7, #24]
 80094fe:	68ba      	ldr	r2, [r7, #8]
 8009500:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009502:	2101      	movs	r1, #1
 8009504:	69b8      	ldr	r0, [r7, #24]
 8009506:	f7ff fec3 	bl	8009290 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800950a:	69bb      	ldr	r3, [r7, #24]
 800950c:	78fa      	ldrb	r2, [r7, #3]
 800950e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009512:	bf00      	nop
 8009514:	3710      	adds	r7, #16
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}
	...

0800951c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b08e      	sub	sp, #56	@ 0x38
 8009520:	af00      	add	r7, sp, #0
 8009522:	60f8      	str	r0, [r7, #12]
 8009524:	60b9      	str	r1, [r7, #8]
 8009526:	607a      	str	r2, [r7, #4]
 8009528:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800952a:	2300      	movs	r3, #0
 800952c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009534:	2b00      	cmp	r3, #0
 8009536:	d10b      	bne.n	8009550 <xQueueGenericSend+0x34>
	__asm volatile
 8009538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800953c:	f383 8811 	msr	BASEPRI, r3
 8009540:	f3bf 8f6f 	isb	sy
 8009544:	f3bf 8f4f 	dsb	sy
 8009548:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800954a:	bf00      	nop
 800954c:	bf00      	nop
 800954e:	e7fd      	b.n	800954c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d103      	bne.n	800955e <xQueueGenericSend+0x42>
 8009556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800955a:	2b00      	cmp	r3, #0
 800955c:	d101      	bne.n	8009562 <xQueueGenericSend+0x46>
 800955e:	2301      	movs	r3, #1
 8009560:	e000      	b.n	8009564 <xQueueGenericSend+0x48>
 8009562:	2300      	movs	r3, #0
 8009564:	2b00      	cmp	r3, #0
 8009566:	d10b      	bne.n	8009580 <xQueueGenericSend+0x64>
	__asm volatile
 8009568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800956c:	f383 8811 	msr	BASEPRI, r3
 8009570:	f3bf 8f6f 	isb	sy
 8009574:	f3bf 8f4f 	dsb	sy
 8009578:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800957a:	bf00      	nop
 800957c:	bf00      	nop
 800957e:	e7fd      	b.n	800957c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	2b02      	cmp	r3, #2
 8009584:	d103      	bne.n	800958e <xQueueGenericSend+0x72>
 8009586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009588:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800958a:	2b01      	cmp	r3, #1
 800958c:	d101      	bne.n	8009592 <xQueueGenericSend+0x76>
 800958e:	2301      	movs	r3, #1
 8009590:	e000      	b.n	8009594 <xQueueGenericSend+0x78>
 8009592:	2300      	movs	r3, #0
 8009594:	2b00      	cmp	r3, #0
 8009596:	d10b      	bne.n	80095b0 <xQueueGenericSend+0x94>
	__asm volatile
 8009598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800959c:	f383 8811 	msr	BASEPRI, r3
 80095a0:	f3bf 8f6f 	isb	sy
 80095a4:	f3bf 8f4f 	dsb	sy
 80095a8:	623b      	str	r3, [r7, #32]
}
 80095aa:	bf00      	nop
 80095ac:	bf00      	nop
 80095ae:	e7fd      	b.n	80095ac <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80095b0:	f001 f9fc 	bl	800a9ac <xTaskGetSchedulerState>
 80095b4:	4603      	mov	r3, r0
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d102      	bne.n	80095c0 <xQueueGenericSend+0xa4>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d101      	bne.n	80095c4 <xQueueGenericSend+0xa8>
 80095c0:	2301      	movs	r3, #1
 80095c2:	e000      	b.n	80095c6 <xQueueGenericSend+0xaa>
 80095c4:	2300      	movs	r3, #0
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d10b      	bne.n	80095e2 <xQueueGenericSend+0xc6>
	__asm volatile
 80095ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095ce:	f383 8811 	msr	BASEPRI, r3
 80095d2:	f3bf 8f6f 	isb	sy
 80095d6:	f3bf 8f4f 	dsb	sy
 80095da:	61fb      	str	r3, [r7, #28]
}
 80095dc:	bf00      	nop
 80095de:	bf00      	nop
 80095e0:	e7fd      	b.n	80095de <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80095e2:	f001 ff51 	bl	800b488 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80095e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80095ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d302      	bcc.n	80095f8 <xQueueGenericSend+0xdc>
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	2b02      	cmp	r3, #2
 80095f6:	d129      	bne.n	800964c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80095f8:	683a      	ldr	r2, [r7, #0]
 80095fa:	68b9      	ldr	r1, [r7, #8]
 80095fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80095fe:	f000 fa0f 	bl	8009a20 <prvCopyDataToQueue>
 8009602:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009608:	2b00      	cmp	r3, #0
 800960a:	d010      	beq.n	800962e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800960c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800960e:	3324      	adds	r3, #36	@ 0x24
 8009610:	4618      	mov	r0, r3
 8009612:	f001 f805 	bl	800a620 <xTaskRemoveFromEventList>
 8009616:	4603      	mov	r3, r0
 8009618:	2b00      	cmp	r3, #0
 800961a:	d013      	beq.n	8009644 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800961c:	4b3f      	ldr	r3, [pc, #252]	@ (800971c <xQueueGenericSend+0x200>)
 800961e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009622:	601a      	str	r2, [r3, #0]
 8009624:	f3bf 8f4f 	dsb	sy
 8009628:	f3bf 8f6f 	isb	sy
 800962c:	e00a      	b.n	8009644 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800962e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009630:	2b00      	cmp	r3, #0
 8009632:	d007      	beq.n	8009644 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009634:	4b39      	ldr	r3, [pc, #228]	@ (800971c <xQueueGenericSend+0x200>)
 8009636:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800963a:	601a      	str	r2, [r3, #0]
 800963c:	f3bf 8f4f 	dsb	sy
 8009640:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009644:	f001 ff52 	bl	800b4ec <vPortExitCritical>
				return pdPASS;
 8009648:	2301      	movs	r3, #1
 800964a:	e063      	b.n	8009714 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d103      	bne.n	800965a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009652:	f001 ff4b 	bl	800b4ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009656:	2300      	movs	r3, #0
 8009658:	e05c      	b.n	8009714 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800965a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800965c:	2b00      	cmp	r3, #0
 800965e:	d106      	bne.n	800966e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009660:	f107 0314 	add.w	r3, r7, #20
 8009664:	4618      	mov	r0, r3
 8009666:	f001 f83f 	bl	800a6e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800966a:	2301      	movs	r3, #1
 800966c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800966e:	f001 ff3d 	bl	800b4ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009672:	f000 fda7 	bl	800a1c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009676:	f001 ff07 	bl	800b488 <vPortEnterCritical>
 800967a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800967c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009680:	b25b      	sxtb	r3, r3
 8009682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009686:	d103      	bne.n	8009690 <xQueueGenericSend+0x174>
 8009688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800968a:	2200      	movs	r2, #0
 800968c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009692:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009696:	b25b      	sxtb	r3, r3
 8009698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800969c:	d103      	bne.n	80096a6 <xQueueGenericSend+0x18a>
 800969e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096a0:	2200      	movs	r2, #0
 80096a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80096a6:	f001 ff21 	bl	800b4ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80096aa:	1d3a      	adds	r2, r7, #4
 80096ac:	f107 0314 	add.w	r3, r7, #20
 80096b0:	4611      	mov	r1, r2
 80096b2:	4618      	mov	r0, r3
 80096b4:	f001 f82e 	bl	800a714 <xTaskCheckForTimeOut>
 80096b8:	4603      	mov	r3, r0
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d124      	bne.n	8009708 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80096be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80096c0:	f000 faa6 	bl	8009c10 <prvIsQueueFull>
 80096c4:	4603      	mov	r3, r0
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d018      	beq.n	80096fc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80096ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096cc:	3310      	adds	r3, #16
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	4611      	mov	r1, r2
 80096d2:	4618      	mov	r0, r3
 80096d4:	f000 ff52 	bl	800a57c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80096d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80096da:	f000 fa31 	bl	8009b40 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80096de:	f000 fd7f 	bl	800a1e0 <xTaskResumeAll>
 80096e2:	4603      	mov	r3, r0
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	f47f af7c 	bne.w	80095e2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80096ea:	4b0c      	ldr	r3, [pc, #48]	@ (800971c <xQueueGenericSend+0x200>)
 80096ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096f0:	601a      	str	r2, [r3, #0]
 80096f2:	f3bf 8f4f 	dsb	sy
 80096f6:	f3bf 8f6f 	isb	sy
 80096fa:	e772      	b.n	80095e2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80096fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80096fe:	f000 fa1f 	bl	8009b40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009702:	f000 fd6d 	bl	800a1e0 <xTaskResumeAll>
 8009706:	e76c      	b.n	80095e2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009708:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800970a:	f000 fa19 	bl	8009b40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800970e:	f000 fd67 	bl	800a1e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009712:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009714:	4618      	mov	r0, r3
 8009716:	3738      	adds	r7, #56	@ 0x38
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}
 800971c:	e000ed04 	.word	0xe000ed04

08009720 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b090      	sub	sp, #64	@ 0x40
 8009724:	af00      	add	r7, sp, #0
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	60b9      	str	r1, [r7, #8]
 800972a:	607a      	str	r2, [r7, #4]
 800972c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009734:	2b00      	cmp	r3, #0
 8009736:	d10b      	bne.n	8009750 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800973c:	f383 8811 	msr	BASEPRI, r3
 8009740:	f3bf 8f6f 	isb	sy
 8009744:	f3bf 8f4f 	dsb	sy
 8009748:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800974a:	bf00      	nop
 800974c:	bf00      	nop
 800974e:	e7fd      	b.n	800974c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d103      	bne.n	800975e <xQueueGenericSendFromISR+0x3e>
 8009756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800975a:	2b00      	cmp	r3, #0
 800975c:	d101      	bne.n	8009762 <xQueueGenericSendFromISR+0x42>
 800975e:	2301      	movs	r3, #1
 8009760:	e000      	b.n	8009764 <xQueueGenericSendFromISR+0x44>
 8009762:	2300      	movs	r3, #0
 8009764:	2b00      	cmp	r3, #0
 8009766:	d10b      	bne.n	8009780 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800976c:	f383 8811 	msr	BASEPRI, r3
 8009770:	f3bf 8f6f 	isb	sy
 8009774:	f3bf 8f4f 	dsb	sy
 8009778:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800977a:	bf00      	nop
 800977c:	bf00      	nop
 800977e:	e7fd      	b.n	800977c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	2b02      	cmp	r3, #2
 8009784:	d103      	bne.n	800978e <xQueueGenericSendFromISR+0x6e>
 8009786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009788:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800978a:	2b01      	cmp	r3, #1
 800978c:	d101      	bne.n	8009792 <xQueueGenericSendFromISR+0x72>
 800978e:	2301      	movs	r3, #1
 8009790:	e000      	b.n	8009794 <xQueueGenericSendFromISR+0x74>
 8009792:	2300      	movs	r3, #0
 8009794:	2b00      	cmp	r3, #0
 8009796:	d10b      	bne.n	80097b0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800979c:	f383 8811 	msr	BASEPRI, r3
 80097a0:	f3bf 8f6f 	isb	sy
 80097a4:	f3bf 8f4f 	dsb	sy
 80097a8:	623b      	str	r3, [r7, #32]
}
 80097aa:	bf00      	nop
 80097ac:	bf00      	nop
 80097ae:	e7fd      	b.n	80097ac <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80097b0:	f001 ff4a 	bl	800b648 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80097b4:	f3ef 8211 	mrs	r2, BASEPRI
 80097b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097bc:	f383 8811 	msr	BASEPRI, r3
 80097c0:	f3bf 8f6f 	isb	sy
 80097c4:	f3bf 8f4f 	dsb	sy
 80097c8:	61fa      	str	r2, [r7, #28]
 80097ca:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80097cc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80097ce:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80097d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80097d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097d8:	429a      	cmp	r2, r3
 80097da:	d302      	bcc.n	80097e2 <xQueueGenericSendFromISR+0xc2>
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	2b02      	cmp	r3, #2
 80097e0:	d12f      	bne.n	8009842 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80097e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80097e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80097ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80097f2:	683a      	ldr	r2, [r7, #0]
 80097f4:	68b9      	ldr	r1, [r7, #8]
 80097f6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80097f8:	f000 f912 	bl	8009a20 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80097fc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009804:	d112      	bne.n	800982c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800980a:	2b00      	cmp	r3, #0
 800980c:	d016      	beq.n	800983c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800980e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009810:	3324      	adds	r3, #36	@ 0x24
 8009812:	4618      	mov	r0, r3
 8009814:	f000 ff04 	bl	800a620 <xTaskRemoveFromEventList>
 8009818:	4603      	mov	r3, r0
 800981a:	2b00      	cmp	r3, #0
 800981c:	d00e      	beq.n	800983c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d00b      	beq.n	800983c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2201      	movs	r2, #1
 8009828:	601a      	str	r2, [r3, #0]
 800982a:	e007      	b.n	800983c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800982c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009830:	3301      	adds	r3, #1
 8009832:	b2db      	uxtb	r3, r3
 8009834:	b25a      	sxtb	r2, r3
 8009836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009838:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800983c:	2301      	movs	r3, #1
 800983e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009840:	e001      	b.n	8009846 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009842:	2300      	movs	r3, #0
 8009844:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009848:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009850:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009852:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009854:	4618      	mov	r0, r3
 8009856:	3740      	adds	r7, #64	@ 0x40
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}

0800985c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b08c      	sub	sp, #48	@ 0x30
 8009860:	af00      	add	r7, sp, #0
 8009862:	60f8      	str	r0, [r7, #12]
 8009864:	60b9      	str	r1, [r7, #8]
 8009866:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009868:	2300      	movs	r3, #0
 800986a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009872:	2b00      	cmp	r3, #0
 8009874:	d10b      	bne.n	800988e <xQueueReceive+0x32>
	__asm volatile
 8009876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800987a:	f383 8811 	msr	BASEPRI, r3
 800987e:	f3bf 8f6f 	isb	sy
 8009882:	f3bf 8f4f 	dsb	sy
 8009886:	623b      	str	r3, [r7, #32]
}
 8009888:	bf00      	nop
 800988a:	bf00      	nop
 800988c:	e7fd      	b.n	800988a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d103      	bne.n	800989c <xQueueReceive+0x40>
 8009894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009898:	2b00      	cmp	r3, #0
 800989a:	d101      	bne.n	80098a0 <xQueueReceive+0x44>
 800989c:	2301      	movs	r3, #1
 800989e:	e000      	b.n	80098a2 <xQueueReceive+0x46>
 80098a0:	2300      	movs	r3, #0
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d10b      	bne.n	80098be <xQueueReceive+0x62>
	__asm volatile
 80098a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098aa:	f383 8811 	msr	BASEPRI, r3
 80098ae:	f3bf 8f6f 	isb	sy
 80098b2:	f3bf 8f4f 	dsb	sy
 80098b6:	61fb      	str	r3, [r7, #28]
}
 80098b8:	bf00      	nop
 80098ba:	bf00      	nop
 80098bc:	e7fd      	b.n	80098ba <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80098be:	f001 f875 	bl	800a9ac <xTaskGetSchedulerState>
 80098c2:	4603      	mov	r3, r0
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d102      	bne.n	80098ce <xQueueReceive+0x72>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d101      	bne.n	80098d2 <xQueueReceive+0x76>
 80098ce:	2301      	movs	r3, #1
 80098d0:	e000      	b.n	80098d4 <xQueueReceive+0x78>
 80098d2:	2300      	movs	r3, #0
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d10b      	bne.n	80098f0 <xQueueReceive+0x94>
	__asm volatile
 80098d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098dc:	f383 8811 	msr	BASEPRI, r3
 80098e0:	f3bf 8f6f 	isb	sy
 80098e4:	f3bf 8f4f 	dsb	sy
 80098e8:	61bb      	str	r3, [r7, #24]
}
 80098ea:	bf00      	nop
 80098ec:	bf00      	nop
 80098ee:	e7fd      	b.n	80098ec <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80098f0:	f001 fdca 	bl	800b488 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80098f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098f8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80098fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d01f      	beq.n	8009940 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009900:	68b9      	ldr	r1, [r7, #8]
 8009902:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009904:	f000 f8f6 	bl	8009af4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800990a:	1e5a      	subs	r2, r3, #1
 800990c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800990e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009912:	691b      	ldr	r3, [r3, #16]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d00f      	beq.n	8009938 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800991a:	3310      	adds	r3, #16
 800991c:	4618      	mov	r0, r3
 800991e:	f000 fe7f 	bl	800a620 <xTaskRemoveFromEventList>
 8009922:	4603      	mov	r3, r0
 8009924:	2b00      	cmp	r3, #0
 8009926:	d007      	beq.n	8009938 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009928:	4b3c      	ldr	r3, [pc, #240]	@ (8009a1c <xQueueReceive+0x1c0>)
 800992a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800992e:	601a      	str	r2, [r3, #0]
 8009930:	f3bf 8f4f 	dsb	sy
 8009934:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009938:	f001 fdd8 	bl	800b4ec <vPortExitCritical>
				return pdPASS;
 800993c:	2301      	movs	r3, #1
 800993e:	e069      	b.n	8009a14 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d103      	bne.n	800994e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009946:	f001 fdd1 	bl	800b4ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800994a:	2300      	movs	r3, #0
 800994c:	e062      	b.n	8009a14 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800994e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009950:	2b00      	cmp	r3, #0
 8009952:	d106      	bne.n	8009962 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009954:	f107 0310 	add.w	r3, r7, #16
 8009958:	4618      	mov	r0, r3
 800995a:	f000 fec5 	bl	800a6e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800995e:	2301      	movs	r3, #1
 8009960:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009962:	f001 fdc3 	bl	800b4ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009966:	f000 fc2d 	bl	800a1c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800996a:	f001 fd8d 	bl	800b488 <vPortEnterCritical>
 800996e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009970:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009974:	b25b      	sxtb	r3, r3
 8009976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800997a:	d103      	bne.n	8009984 <xQueueReceive+0x128>
 800997c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800997e:	2200      	movs	r2, #0
 8009980:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009986:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800998a:	b25b      	sxtb	r3, r3
 800998c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009990:	d103      	bne.n	800999a <xQueueReceive+0x13e>
 8009992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009994:	2200      	movs	r2, #0
 8009996:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800999a:	f001 fda7 	bl	800b4ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800999e:	1d3a      	adds	r2, r7, #4
 80099a0:	f107 0310 	add.w	r3, r7, #16
 80099a4:	4611      	mov	r1, r2
 80099a6:	4618      	mov	r0, r3
 80099a8:	f000 feb4 	bl	800a714 <xTaskCheckForTimeOut>
 80099ac:	4603      	mov	r3, r0
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d123      	bne.n	80099fa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80099b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80099b4:	f000 f916 	bl	8009be4 <prvIsQueueEmpty>
 80099b8:	4603      	mov	r3, r0
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d017      	beq.n	80099ee <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80099be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099c0:	3324      	adds	r3, #36	@ 0x24
 80099c2:	687a      	ldr	r2, [r7, #4]
 80099c4:	4611      	mov	r1, r2
 80099c6:	4618      	mov	r0, r3
 80099c8:	f000 fdd8 	bl	800a57c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80099cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80099ce:	f000 f8b7 	bl	8009b40 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80099d2:	f000 fc05 	bl	800a1e0 <xTaskResumeAll>
 80099d6:	4603      	mov	r3, r0
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d189      	bne.n	80098f0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80099dc:	4b0f      	ldr	r3, [pc, #60]	@ (8009a1c <xQueueReceive+0x1c0>)
 80099de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099e2:	601a      	str	r2, [r3, #0]
 80099e4:	f3bf 8f4f 	dsb	sy
 80099e8:	f3bf 8f6f 	isb	sy
 80099ec:	e780      	b.n	80098f0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80099ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80099f0:	f000 f8a6 	bl	8009b40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80099f4:	f000 fbf4 	bl	800a1e0 <xTaskResumeAll>
 80099f8:	e77a      	b.n	80098f0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80099fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80099fc:	f000 f8a0 	bl	8009b40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009a00:	f000 fbee 	bl	800a1e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a06:	f000 f8ed 	bl	8009be4 <prvIsQueueEmpty>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	f43f af6f 	beq.w	80098f0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009a12:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3730      	adds	r7, #48	@ 0x30
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}
 8009a1c:	e000ed04 	.word	0xe000ed04

08009a20 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b086      	sub	sp, #24
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	60b9      	str	r1, [r7, #8]
 8009a2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a34:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d10d      	bne.n	8009a5a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d14d      	bne.n	8009ae2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	689b      	ldr	r3, [r3, #8]
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f000 ffcc 	bl	800a9e8 <xTaskPriorityDisinherit>
 8009a50:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	2200      	movs	r2, #0
 8009a56:	609a      	str	r2, [r3, #8]
 8009a58:	e043      	b.n	8009ae2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d119      	bne.n	8009a94 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	6858      	ldr	r0, [r3, #4]
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a68:	461a      	mov	r2, r3
 8009a6a:	68b9      	ldr	r1, [r7, #8]
 8009a6c:	f002 fdc6 	bl	800c5fc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	685a      	ldr	r2, [r3, #4]
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a78:	441a      	add	r2, r3
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	685a      	ldr	r2, [r3, #4]
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	689b      	ldr	r3, [r3, #8]
 8009a86:	429a      	cmp	r2, r3
 8009a88:	d32b      	bcc.n	8009ae2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681a      	ldr	r2, [r3, #0]
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	605a      	str	r2, [r3, #4]
 8009a92:	e026      	b.n	8009ae2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	68d8      	ldr	r0, [r3, #12]
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a9c:	461a      	mov	r2, r3
 8009a9e:	68b9      	ldr	r1, [r7, #8]
 8009aa0:	f002 fdac 	bl	800c5fc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	68da      	ldr	r2, [r3, #12]
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009aac:	425b      	negs	r3, r3
 8009aae:	441a      	add	r2, r3
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	68da      	ldr	r2, [r3, #12]
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d207      	bcs.n	8009ad0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	689a      	ldr	r2, [r3, #8]
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ac8:	425b      	negs	r3, r3
 8009aca:	441a      	add	r2, r3
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2b02      	cmp	r3, #2
 8009ad4:	d105      	bne.n	8009ae2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d002      	beq.n	8009ae2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	3b01      	subs	r3, #1
 8009ae0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	1c5a      	adds	r2, r3, #1
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009aea:	697b      	ldr	r3, [r7, #20]
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3718      	adds	r7, #24
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}

08009af4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b082      	sub	sp, #8
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
 8009afc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d018      	beq.n	8009b38 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	68da      	ldr	r2, [r3, #12]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b0e:	441a      	add	r2, r3
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	68da      	ldr	r2, [r3, #12]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	689b      	ldr	r3, [r3, #8]
 8009b1c:	429a      	cmp	r2, r3
 8009b1e:	d303      	bcc.n	8009b28 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	68d9      	ldr	r1, [r3, #12]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b30:	461a      	mov	r2, r3
 8009b32:	6838      	ldr	r0, [r7, #0]
 8009b34:	f002 fd62 	bl	800c5fc <memcpy>
	}
}
 8009b38:	bf00      	nop
 8009b3a:	3708      	adds	r7, #8
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}

08009b40 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b084      	sub	sp, #16
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009b48:	f001 fc9e 	bl	800b488 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009b52:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b54:	e011      	b.n	8009b7a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d012      	beq.n	8009b84 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	3324      	adds	r3, #36	@ 0x24
 8009b62:	4618      	mov	r0, r3
 8009b64:	f000 fd5c 	bl	800a620 <xTaskRemoveFromEventList>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d001      	beq.n	8009b72 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009b6e:	f000 fe35 	bl	800a7dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009b72:	7bfb      	ldrb	r3, [r7, #15]
 8009b74:	3b01      	subs	r3, #1
 8009b76:	b2db      	uxtb	r3, r3
 8009b78:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	dce9      	bgt.n	8009b56 <prvUnlockQueue+0x16>
 8009b82:	e000      	b.n	8009b86 <prvUnlockQueue+0x46>
					break;
 8009b84:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	22ff      	movs	r2, #255	@ 0xff
 8009b8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009b8e:	f001 fcad 	bl	800b4ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009b92:	f001 fc79 	bl	800b488 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009b9c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b9e:	e011      	b.n	8009bc4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	691b      	ldr	r3, [r3, #16]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d012      	beq.n	8009bce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	3310      	adds	r3, #16
 8009bac:	4618      	mov	r0, r3
 8009bae:	f000 fd37 	bl	800a620 <xTaskRemoveFromEventList>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d001      	beq.n	8009bbc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009bb8:	f000 fe10 	bl	800a7dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009bbc:	7bbb      	ldrb	r3, [r7, #14]
 8009bbe:	3b01      	subs	r3, #1
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009bc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	dce9      	bgt.n	8009ba0 <prvUnlockQueue+0x60>
 8009bcc:	e000      	b.n	8009bd0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009bce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	22ff      	movs	r2, #255	@ 0xff
 8009bd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009bd8:	f001 fc88 	bl	800b4ec <vPortExitCritical>
}
 8009bdc:	bf00      	nop
 8009bde:	3710      	adds	r7, #16
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}

08009be4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b084      	sub	sp, #16
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009bec:	f001 fc4c 	bl	800b488 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d102      	bne.n	8009bfe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	60fb      	str	r3, [r7, #12]
 8009bfc:	e001      	b.n	8009c02 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009c02:	f001 fc73 	bl	800b4ec <vPortExitCritical>

	return xReturn;
 8009c06:	68fb      	ldr	r3, [r7, #12]
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3710      	adds	r7, #16
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}

08009c10 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b084      	sub	sp, #16
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009c18:	f001 fc36 	bl	800b488 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c24:	429a      	cmp	r2, r3
 8009c26:	d102      	bne.n	8009c2e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009c28:	2301      	movs	r3, #1
 8009c2a:	60fb      	str	r3, [r7, #12]
 8009c2c:	e001      	b.n	8009c32 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009c32:	f001 fc5b 	bl	800b4ec <vPortExitCritical>

	return xReturn;
 8009c36:	68fb      	ldr	r3, [r7, #12]
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3710      	adds	r7, #16
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}

08009c40 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009c40:	b480      	push	{r7}
 8009c42:	b085      	sub	sp, #20
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
 8009c48:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	60fb      	str	r3, [r7, #12]
 8009c4e:	e014      	b.n	8009c7a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009c50:	4a0f      	ldr	r2, [pc, #60]	@ (8009c90 <vQueueAddToRegistry+0x50>)
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d10b      	bne.n	8009c74 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009c5c:	490c      	ldr	r1, [pc, #48]	@ (8009c90 <vQueueAddToRegistry+0x50>)
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	683a      	ldr	r2, [r7, #0]
 8009c62:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009c66:	4a0a      	ldr	r2, [pc, #40]	@ (8009c90 <vQueueAddToRegistry+0x50>)
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	00db      	lsls	r3, r3, #3
 8009c6c:	4413      	add	r3, r2
 8009c6e:	687a      	ldr	r2, [r7, #4]
 8009c70:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009c72:	e006      	b.n	8009c82 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	3301      	adds	r3, #1
 8009c78:	60fb      	str	r3, [r7, #12]
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	2b07      	cmp	r3, #7
 8009c7e:	d9e7      	bls.n	8009c50 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009c80:	bf00      	nop
 8009c82:	bf00      	nop
 8009c84:	3714      	adds	r7, #20
 8009c86:	46bd      	mov	sp, r7
 8009c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8c:	4770      	bx	lr
 8009c8e:	bf00      	nop
 8009c90:	20000a5c 	.word	0x20000a5c

08009c94 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b086      	sub	sp, #24
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	60f8      	str	r0, [r7, #12]
 8009c9c:	60b9      	str	r1, [r7, #8]
 8009c9e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009ca4:	f001 fbf0 	bl	800b488 <vPortEnterCritical>
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009cae:	b25b      	sxtb	r3, r3
 8009cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cb4:	d103      	bne.n	8009cbe <vQueueWaitForMessageRestricted+0x2a>
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009cc4:	b25b      	sxtb	r3, r3
 8009cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cca:	d103      	bne.n	8009cd4 <vQueueWaitForMessageRestricted+0x40>
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009cd4:	f001 fc0a 	bl	800b4ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d106      	bne.n	8009cee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	3324      	adds	r3, #36	@ 0x24
 8009ce4:	687a      	ldr	r2, [r7, #4]
 8009ce6:	68b9      	ldr	r1, [r7, #8]
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f000 fc6d 	bl	800a5c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009cee:	6978      	ldr	r0, [r7, #20]
 8009cf0:	f7ff ff26 	bl	8009b40 <prvUnlockQueue>
	}
 8009cf4:	bf00      	nop
 8009cf6:	3718      	adds	r7, #24
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}

08009cfc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b08e      	sub	sp, #56	@ 0x38
 8009d00:	af04      	add	r7, sp, #16
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	60b9      	str	r1, [r7, #8]
 8009d06:	607a      	str	r2, [r7, #4]
 8009d08:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d10b      	bne.n	8009d28 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d14:	f383 8811 	msr	BASEPRI, r3
 8009d18:	f3bf 8f6f 	isb	sy
 8009d1c:	f3bf 8f4f 	dsb	sy
 8009d20:	623b      	str	r3, [r7, #32]
}
 8009d22:	bf00      	nop
 8009d24:	bf00      	nop
 8009d26:	e7fd      	b.n	8009d24 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d10b      	bne.n	8009d46 <xTaskCreateStatic+0x4a>
	__asm volatile
 8009d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d32:	f383 8811 	msr	BASEPRI, r3
 8009d36:	f3bf 8f6f 	isb	sy
 8009d3a:	f3bf 8f4f 	dsb	sy
 8009d3e:	61fb      	str	r3, [r7, #28]
}
 8009d40:	bf00      	nop
 8009d42:	bf00      	nop
 8009d44:	e7fd      	b.n	8009d42 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009d46:	23a8      	movs	r3, #168	@ 0xa8
 8009d48:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	2ba8      	cmp	r3, #168	@ 0xa8
 8009d4e:	d00b      	beq.n	8009d68 <xTaskCreateStatic+0x6c>
	__asm volatile
 8009d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d54:	f383 8811 	msr	BASEPRI, r3
 8009d58:	f3bf 8f6f 	isb	sy
 8009d5c:	f3bf 8f4f 	dsb	sy
 8009d60:	61bb      	str	r3, [r7, #24]
}
 8009d62:	bf00      	nop
 8009d64:	bf00      	nop
 8009d66:	e7fd      	b.n	8009d64 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009d68:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d01e      	beq.n	8009dae <xTaskCreateStatic+0xb2>
 8009d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d01b      	beq.n	8009dae <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d78:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009d7e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d82:	2202      	movs	r2, #2
 8009d84:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009d88:	2300      	movs	r3, #0
 8009d8a:	9303      	str	r3, [sp, #12]
 8009d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d8e:	9302      	str	r3, [sp, #8]
 8009d90:	f107 0314 	add.w	r3, r7, #20
 8009d94:	9301      	str	r3, [sp, #4]
 8009d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d98:	9300      	str	r3, [sp, #0]
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	687a      	ldr	r2, [r7, #4]
 8009d9e:	68b9      	ldr	r1, [r7, #8]
 8009da0:	68f8      	ldr	r0, [r7, #12]
 8009da2:	f000 f851 	bl	8009e48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009da6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009da8:	f000 f8f6 	bl	8009f98 <prvAddNewTaskToReadyList>
 8009dac:	e001      	b.n	8009db2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009dae:	2300      	movs	r3, #0
 8009db0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009db2:	697b      	ldr	r3, [r7, #20]
	}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3728      	adds	r7, #40	@ 0x28
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}

08009dbc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b08c      	sub	sp, #48	@ 0x30
 8009dc0:	af04      	add	r7, sp, #16
 8009dc2:	60f8      	str	r0, [r7, #12]
 8009dc4:	60b9      	str	r1, [r7, #8]
 8009dc6:	603b      	str	r3, [r7, #0]
 8009dc8:	4613      	mov	r3, r2
 8009dca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009dcc:	88fb      	ldrh	r3, [r7, #6]
 8009dce:	009b      	lsls	r3, r3, #2
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f001 fc7b 	bl	800b6cc <pvPortMalloc>
 8009dd6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d00e      	beq.n	8009dfc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009dde:	20a8      	movs	r0, #168	@ 0xa8
 8009de0:	f001 fc74 	bl	800b6cc <pvPortMalloc>
 8009de4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009de6:	69fb      	ldr	r3, [r7, #28]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d003      	beq.n	8009df4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009dec:	69fb      	ldr	r3, [r7, #28]
 8009dee:	697a      	ldr	r2, [r7, #20]
 8009df0:	631a      	str	r2, [r3, #48]	@ 0x30
 8009df2:	e005      	b.n	8009e00 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009df4:	6978      	ldr	r0, [r7, #20]
 8009df6:	f001 fd37 	bl	800b868 <vPortFree>
 8009dfa:	e001      	b.n	8009e00 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009e00:	69fb      	ldr	r3, [r7, #28]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d017      	beq.n	8009e36 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009e06:	69fb      	ldr	r3, [r7, #28]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009e0e:	88fa      	ldrh	r2, [r7, #6]
 8009e10:	2300      	movs	r3, #0
 8009e12:	9303      	str	r3, [sp, #12]
 8009e14:	69fb      	ldr	r3, [r7, #28]
 8009e16:	9302      	str	r3, [sp, #8]
 8009e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e1a:	9301      	str	r3, [sp, #4]
 8009e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e1e:	9300      	str	r3, [sp, #0]
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	68b9      	ldr	r1, [r7, #8]
 8009e24:	68f8      	ldr	r0, [r7, #12]
 8009e26:	f000 f80f 	bl	8009e48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009e2a:	69f8      	ldr	r0, [r7, #28]
 8009e2c:	f000 f8b4 	bl	8009f98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009e30:	2301      	movs	r3, #1
 8009e32:	61bb      	str	r3, [r7, #24]
 8009e34:	e002      	b.n	8009e3c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009e36:	f04f 33ff 	mov.w	r3, #4294967295
 8009e3a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009e3c:	69bb      	ldr	r3, [r7, #24]
	}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3720      	adds	r7, #32
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}
	...

08009e48 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b088      	sub	sp, #32
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	60f8      	str	r0, [r7, #12]
 8009e50:	60b9      	str	r1, [r7, #8]
 8009e52:	607a      	str	r2, [r7, #4]
 8009e54:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e58:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	009b      	lsls	r3, r3, #2
 8009e5e:	461a      	mov	r2, r3
 8009e60:	21a5      	movs	r1, #165	@ 0xa5
 8009e62:	f002 fb47 	bl	800c4f4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009e70:	3b01      	subs	r3, #1
 8009e72:	009b      	lsls	r3, r3, #2
 8009e74:	4413      	add	r3, r2
 8009e76:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009e78:	69bb      	ldr	r3, [r7, #24]
 8009e7a:	f023 0307 	bic.w	r3, r3, #7
 8009e7e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009e80:	69bb      	ldr	r3, [r7, #24]
 8009e82:	f003 0307 	and.w	r3, r3, #7
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d00b      	beq.n	8009ea2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e8e:	f383 8811 	msr	BASEPRI, r3
 8009e92:	f3bf 8f6f 	isb	sy
 8009e96:	f3bf 8f4f 	dsb	sy
 8009e9a:	617b      	str	r3, [r7, #20]
}
 8009e9c:	bf00      	nop
 8009e9e:	bf00      	nop
 8009ea0:	e7fd      	b.n	8009e9e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d01f      	beq.n	8009ee8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	61fb      	str	r3, [r7, #28]
 8009eac:	e012      	b.n	8009ed4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009eae:	68ba      	ldr	r2, [r7, #8]
 8009eb0:	69fb      	ldr	r3, [r7, #28]
 8009eb2:	4413      	add	r3, r2
 8009eb4:	7819      	ldrb	r1, [r3, #0]
 8009eb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009eb8:	69fb      	ldr	r3, [r7, #28]
 8009eba:	4413      	add	r3, r2
 8009ebc:	3334      	adds	r3, #52	@ 0x34
 8009ebe:	460a      	mov	r2, r1
 8009ec0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009ec2:	68ba      	ldr	r2, [r7, #8]
 8009ec4:	69fb      	ldr	r3, [r7, #28]
 8009ec6:	4413      	add	r3, r2
 8009ec8:	781b      	ldrb	r3, [r3, #0]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d006      	beq.n	8009edc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009ece:	69fb      	ldr	r3, [r7, #28]
 8009ed0:	3301      	adds	r3, #1
 8009ed2:	61fb      	str	r3, [r7, #28]
 8009ed4:	69fb      	ldr	r3, [r7, #28]
 8009ed6:	2b0f      	cmp	r3, #15
 8009ed8:	d9e9      	bls.n	8009eae <prvInitialiseNewTask+0x66>
 8009eda:	e000      	b.n	8009ede <prvInitialiseNewTask+0x96>
			{
				break;
 8009edc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009ee6:	e003      	b.n	8009ef0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eea:	2200      	movs	r2, #0
 8009eec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ef2:	2b37      	cmp	r3, #55	@ 0x37
 8009ef4:	d901      	bls.n	8009efa <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009ef6:	2337      	movs	r3, #55	@ 0x37
 8009ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009efc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009efe:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009f04:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f08:	2200      	movs	r2, #0
 8009f0a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f0e:	3304      	adds	r3, #4
 8009f10:	4618      	mov	r0, r3
 8009f12:	f7ff f929 	bl	8009168 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f18:	3318      	adds	r3, #24
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f7ff f924 	bl	8009168 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f24:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f28:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f2e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f34:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f38:	2200      	movs	r2, #0
 8009f3a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f40:	2200      	movs	r2, #0
 8009f42:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f48:	3354      	adds	r3, #84	@ 0x54
 8009f4a:	224c      	movs	r2, #76	@ 0x4c
 8009f4c:	2100      	movs	r1, #0
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f002 fad0 	bl	800c4f4 <memset>
 8009f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f56:	4a0d      	ldr	r2, [pc, #52]	@ (8009f8c <prvInitialiseNewTask+0x144>)
 8009f58:	659a      	str	r2, [r3, #88]	@ 0x58
 8009f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f5c:	4a0c      	ldr	r2, [pc, #48]	@ (8009f90 <prvInitialiseNewTask+0x148>)
 8009f5e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f62:	4a0c      	ldr	r2, [pc, #48]	@ (8009f94 <prvInitialiseNewTask+0x14c>)
 8009f64:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009f66:	683a      	ldr	r2, [r7, #0]
 8009f68:	68f9      	ldr	r1, [r7, #12]
 8009f6a:	69b8      	ldr	r0, [r7, #24]
 8009f6c:	f001 f95a 	bl	800b224 <pxPortInitialiseStack>
 8009f70:	4602      	mov	r2, r0
 8009f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f74:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d002      	beq.n	8009f82 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f82:	bf00      	nop
 8009f84:	3720      	adds	r7, #32
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}
 8009f8a:	bf00      	nop
 8009f8c:	200068d0 	.word	0x200068d0
 8009f90:	20006938 	.word	0x20006938
 8009f94:	200069a0 	.word	0x200069a0

08009f98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b082      	sub	sp, #8
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009fa0:	f001 fa72 	bl	800b488 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009fa4:	4b2d      	ldr	r3, [pc, #180]	@ (800a05c <prvAddNewTaskToReadyList+0xc4>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	3301      	adds	r3, #1
 8009faa:	4a2c      	ldr	r2, [pc, #176]	@ (800a05c <prvAddNewTaskToReadyList+0xc4>)
 8009fac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009fae:	4b2c      	ldr	r3, [pc, #176]	@ (800a060 <prvAddNewTaskToReadyList+0xc8>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d109      	bne.n	8009fca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009fb6:	4a2a      	ldr	r2, [pc, #168]	@ (800a060 <prvAddNewTaskToReadyList+0xc8>)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009fbc:	4b27      	ldr	r3, [pc, #156]	@ (800a05c <prvAddNewTaskToReadyList+0xc4>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	d110      	bne.n	8009fe6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009fc4:	f000 fc2e 	bl	800a824 <prvInitialiseTaskLists>
 8009fc8:	e00d      	b.n	8009fe6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009fca:	4b26      	ldr	r3, [pc, #152]	@ (800a064 <prvAddNewTaskToReadyList+0xcc>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d109      	bne.n	8009fe6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009fd2:	4b23      	ldr	r3, [pc, #140]	@ (800a060 <prvAddNewTaskToReadyList+0xc8>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	d802      	bhi.n	8009fe6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009fe0:	4a1f      	ldr	r2, [pc, #124]	@ (800a060 <prvAddNewTaskToReadyList+0xc8>)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009fe6:	4b20      	ldr	r3, [pc, #128]	@ (800a068 <prvAddNewTaskToReadyList+0xd0>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	3301      	adds	r3, #1
 8009fec:	4a1e      	ldr	r2, [pc, #120]	@ (800a068 <prvAddNewTaskToReadyList+0xd0>)
 8009fee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009ff0:	4b1d      	ldr	r3, [pc, #116]	@ (800a068 <prvAddNewTaskToReadyList+0xd0>)
 8009ff2:	681a      	ldr	r2, [r3, #0]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ffc:	4b1b      	ldr	r3, [pc, #108]	@ (800a06c <prvAddNewTaskToReadyList+0xd4>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	429a      	cmp	r2, r3
 800a002:	d903      	bls.n	800a00c <prvAddNewTaskToReadyList+0x74>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a008:	4a18      	ldr	r2, [pc, #96]	@ (800a06c <prvAddNewTaskToReadyList+0xd4>)
 800a00a:	6013      	str	r3, [r2, #0]
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a010:	4613      	mov	r3, r2
 800a012:	009b      	lsls	r3, r3, #2
 800a014:	4413      	add	r3, r2
 800a016:	009b      	lsls	r3, r3, #2
 800a018:	4a15      	ldr	r2, [pc, #84]	@ (800a070 <prvAddNewTaskToReadyList+0xd8>)
 800a01a:	441a      	add	r2, r3
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	3304      	adds	r3, #4
 800a020:	4619      	mov	r1, r3
 800a022:	4610      	mov	r0, r2
 800a024:	f7ff f8ad 	bl	8009182 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a028:	f001 fa60 	bl	800b4ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a02c:	4b0d      	ldr	r3, [pc, #52]	@ (800a064 <prvAddNewTaskToReadyList+0xcc>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d00e      	beq.n	800a052 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a034:	4b0a      	ldr	r3, [pc, #40]	@ (800a060 <prvAddNewTaskToReadyList+0xc8>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a03e:	429a      	cmp	r2, r3
 800a040:	d207      	bcs.n	800a052 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a042:	4b0c      	ldr	r3, [pc, #48]	@ (800a074 <prvAddNewTaskToReadyList+0xdc>)
 800a044:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a048:	601a      	str	r2, [r3, #0]
 800a04a:	f3bf 8f4f 	dsb	sy
 800a04e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a052:	bf00      	nop
 800a054:	3708      	adds	r7, #8
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}
 800a05a:	bf00      	nop
 800a05c:	20000f70 	.word	0x20000f70
 800a060:	20000a9c 	.word	0x20000a9c
 800a064:	20000f7c 	.word	0x20000f7c
 800a068:	20000f8c 	.word	0x20000f8c
 800a06c:	20000f78 	.word	0x20000f78
 800a070:	20000aa0 	.word	0x20000aa0
 800a074:	e000ed04 	.word	0xe000ed04

0800a078 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b084      	sub	sp, #16
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a080:	2300      	movs	r3, #0
 800a082:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d018      	beq.n	800a0bc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a08a:	4b14      	ldr	r3, [pc, #80]	@ (800a0dc <vTaskDelay+0x64>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d00b      	beq.n	800a0aa <vTaskDelay+0x32>
	__asm volatile
 800a092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a096:	f383 8811 	msr	BASEPRI, r3
 800a09a:	f3bf 8f6f 	isb	sy
 800a09e:	f3bf 8f4f 	dsb	sy
 800a0a2:	60bb      	str	r3, [r7, #8]
}
 800a0a4:	bf00      	nop
 800a0a6:	bf00      	nop
 800a0a8:	e7fd      	b.n	800a0a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a0aa:	f000 f88b 	bl	800a1c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a0ae:	2100      	movs	r1, #0
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f000 fd09 	bl	800aac8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a0b6:	f000 f893 	bl	800a1e0 <xTaskResumeAll>
 800a0ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d107      	bne.n	800a0d2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a0c2:	4b07      	ldr	r3, [pc, #28]	@ (800a0e0 <vTaskDelay+0x68>)
 800a0c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0c8:	601a      	str	r2, [r3, #0]
 800a0ca:	f3bf 8f4f 	dsb	sy
 800a0ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a0d2:	bf00      	nop
 800a0d4:	3710      	adds	r7, #16
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
 800a0da:	bf00      	nop
 800a0dc:	20000f98 	.word	0x20000f98
 800a0e0:	e000ed04 	.word	0xe000ed04

0800a0e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b08a      	sub	sp, #40	@ 0x28
 800a0e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a0f2:	463a      	mov	r2, r7
 800a0f4:	1d39      	adds	r1, r7, #4
 800a0f6:	f107 0308 	add.w	r3, r7, #8
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f7fe ffe0 	bl	80090c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a100:	6839      	ldr	r1, [r7, #0]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	68ba      	ldr	r2, [r7, #8]
 800a106:	9202      	str	r2, [sp, #8]
 800a108:	9301      	str	r3, [sp, #4]
 800a10a:	2300      	movs	r3, #0
 800a10c:	9300      	str	r3, [sp, #0]
 800a10e:	2300      	movs	r3, #0
 800a110:	460a      	mov	r2, r1
 800a112:	4924      	ldr	r1, [pc, #144]	@ (800a1a4 <vTaskStartScheduler+0xc0>)
 800a114:	4824      	ldr	r0, [pc, #144]	@ (800a1a8 <vTaskStartScheduler+0xc4>)
 800a116:	f7ff fdf1 	bl	8009cfc <xTaskCreateStatic>
 800a11a:	4603      	mov	r3, r0
 800a11c:	4a23      	ldr	r2, [pc, #140]	@ (800a1ac <vTaskStartScheduler+0xc8>)
 800a11e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a120:	4b22      	ldr	r3, [pc, #136]	@ (800a1ac <vTaskStartScheduler+0xc8>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d002      	beq.n	800a12e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a128:	2301      	movs	r3, #1
 800a12a:	617b      	str	r3, [r7, #20]
 800a12c:	e001      	b.n	800a132 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a12e:	2300      	movs	r3, #0
 800a130:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	2b01      	cmp	r3, #1
 800a136:	d102      	bne.n	800a13e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a138:	f000 fd1a 	bl	800ab70 <xTimerCreateTimerTask>
 800a13c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	2b01      	cmp	r3, #1
 800a142:	d11b      	bne.n	800a17c <vTaskStartScheduler+0x98>
	__asm volatile
 800a144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a148:	f383 8811 	msr	BASEPRI, r3
 800a14c:	f3bf 8f6f 	isb	sy
 800a150:	f3bf 8f4f 	dsb	sy
 800a154:	613b      	str	r3, [r7, #16]
}
 800a156:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a158:	4b15      	ldr	r3, [pc, #84]	@ (800a1b0 <vTaskStartScheduler+0xcc>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	3354      	adds	r3, #84	@ 0x54
 800a15e:	4a15      	ldr	r2, [pc, #84]	@ (800a1b4 <vTaskStartScheduler+0xd0>)
 800a160:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a162:	4b15      	ldr	r3, [pc, #84]	@ (800a1b8 <vTaskStartScheduler+0xd4>)
 800a164:	f04f 32ff 	mov.w	r2, #4294967295
 800a168:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a16a:	4b14      	ldr	r3, [pc, #80]	@ (800a1bc <vTaskStartScheduler+0xd8>)
 800a16c:	2201      	movs	r2, #1
 800a16e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a170:	4b13      	ldr	r3, [pc, #76]	@ (800a1c0 <vTaskStartScheduler+0xdc>)
 800a172:	2200      	movs	r2, #0
 800a174:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a176:	f001 f8e3 	bl	800b340 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a17a:	e00f      	b.n	800a19c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a17c:	697b      	ldr	r3, [r7, #20]
 800a17e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a182:	d10b      	bne.n	800a19c <vTaskStartScheduler+0xb8>
	__asm volatile
 800a184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a188:	f383 8811 	msr	BASEPRI, r3
 800a18c:	f3bf 8f6f 	isb	sy
 800a190:	f3bf 8f4f 	dsb	sy
 800a194:	60fb      	str	r3, [r7, #12]
}
 800a196:	bf00      	nop
 800a198:	bf00      	nop
 800a19a:	e7fd      	b.n	800a198 <vTaskStartScheduler+0xb4>
}
 800a19c:	bf00      	nop
 800a19e:	3718      	adds	r7, #24
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}
 800a1a4:	0800c728 	.word	0x0800c728
 800a1a8:	0800a7f5 	.word	0x0800a7f5
 800a1ac:	20000f94 	.word	0x20000f94
 800a1b0:	20000a9c 	.word	0x20000a9c
 800a1b4:	20000100 	.word	0x20000100
 800a1b8:	20000f90 	.word	0x20000f90
 800a1bc:	20000f7c 	.word	0x20000f7c
 800a1c0:	20000f74 	.word	0x20000f74

0800a1c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a1c8:	4b04      	ldr	r3, [pc, #16]	@ (800a1dc <vTaskSuspendAll+0x18>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	3301      	adds	r3, #1
 800a1ce:	4a03      	ldr	r2, [pc, #12]	@ (800a1dc <vTaskSuspendAll+0x18>)
 800a1d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a1d2:	bf00      	nop
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1da:	4770      	bx	lr
 800a1dc:	20000f98 	.word	0x20000f98

0800a1e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b084      	sub	sp, #16
 800a1e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a1ee:	4b42      	ldr	r3, [pc, #264]	@ (800a2f8 <xTaskResumeAll+0x118>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d10b      	bne.n	800a20e <xTaskResumeAll+0x2e>
	__asm volatile
 800a1f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1fa:	f383 8811 	msr	BASEPRI, r3
 800a1fe:	f3bf 8f6f 	isb	sy
 800a202:	f3bf 8f4f 	dsb	sy
 800a206:	603b      	str	r3, [r7, #0]
}
 800a208:	bf00      	nop
 800a20a:	bf00      	nop
 800a20c:	e7fd      	b.n	800a20a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a20e:	f001 f93b 	bl	800b488 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a212:	4b39      	ldr	r3, [pc, #228]	@ (800a2f8 <xTaskResumeAll+0x118>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	3b01      	subs	r3, #1
 800a218:	4a37      	ldr	r2, [pc, #220]	@ (800a2f8 <xTaskResumeAll+0x118>)
 800a21a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a21c:	4b36      	ldr	r3, [pc, #216]	@ (800a2f8 <xTaskResumeAll+0x118>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d162      	bne.n	800a2ea <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a224:	4b35      	ldr	r3, [pc, #212]	@ (800a2fc <xTaskResumeAll+0x11c>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d05e      	beq.n	800a2ea <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a22c:	e02f      	b.n	800a28e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a22e:	4b34      	ldr	r3, [pc, #208]	@ (800a300 <xTaskResumeAll+0x120>)
 800a230:	68db      	ldr	r3, [r3, #12]
 800a232:	68db      	ldr	r3, [r3, #12]
 800a234:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	3318      	adds	r3, #24
 800a23a:	4618      	mov	r0, r3
 800a23c:	f7fe fffe 	bl	800923c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	3304      	adds	r3, #4
 800a244:	4618      	mov	r0, r3
 800a246:	f7fe fff9 	bl	800923c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a24e:	4b2d      	ldr	r3, [pc, #180]	@ (800a304 <xTaskResumeAll+0x124>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	429a      	cmp	r2, r3
 800a254:	d903      	bls.n	800a25e <xTaskResumeAll+0x7e>
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a25a:	4a2a      	ldr	r2, [pc, #168]	@ (800a304 <xTaskResumeAll+0x124>)
 800a25c:	6013      	str	r3, [r2, #0]
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a262:	4613      	mov	r3, r2
 800a264:	009b      	lsls	r3, r3, #2
 800a266:	4413      	add	r3, r2
 800a268:	009b      	lsls	r3, r3, #2
 800a26a:	4a27      	ldr	r2, [pc, #156]	@ (800a308 <xTaskResumeAll+0x128>)
 800a26c:	441a      	add	r2, r3
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	3304      	adds	r3, #4
 800a272:	4619      	mov	r1, r3
 800a274:	4610      	mov	r0, r2
 800a276:	f7fe ff84 	bl	8009182 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a27e:	4b23      	ldr	r3, [pc, #140]	@ (800a30c <xTaskResumeAll+0x12c>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a284:	429a      	cmp	r2, r3
 800a286:	d302      	bcc.n	800a28e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a288:	4b21      	ldr	r3, [pc, #132]	@ (800a310 <xTaskResumeAll+0x130>)
 800a28a:	2201      	movs	r2, #1
 800a28c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a28e:	4b1c      	ldr	r3, [pc, #112]	@ (800a300 <xTaskResumeAll+0x120>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d1cb      	bne.n	800a22e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d001      	beq.n	800a2a0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a29c:	f000 fb66 	bl	800a96c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a2a0:	4b1c      	ldr	r3, [pc, #112]	@ (800a314 <xTaskResumeAll+0x134>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d010      	beq.n	800a2ce <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a2ac:	f000 f846 	bl	800a33c <xTaskIncrementTick>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d002      	beq.n	800a2bc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a2b6:	4b16      	ldr	r3, [pc, #88]	@ (800a310 <xTaskResumeAll+0x130>)
 800a2b8:	2201      	movs	r2, #1
 800a2ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	3b01      	subs	r3, #1
 800a2c0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d1f1      	bne.n	800a2ac <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a2c8:	4b12      	ldr	r3, [pc, #72]	@ (800a314 <xTaskResumeAll+0x134>)
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a2ce:	4b10      	ldr	r3, [pc, #64]	@ (800a310 <xTaskResumeAll+0x130>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d009      	beq.n	800a2ea <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a2da:	4b0f      	ldr	r3, [pc, #60]	@ (800a318 <xTaskResumeAll+0x138>)
 800a2dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2e0:	601a      	str	r2, [r3, #0]
 800a2e2:	f3bf 8f4f 	dsb	sy
 800a2e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a2ea:	f001 f8ff 	bl	800b4ec <vPortExitCritical>

	return xAlreadyYielded;
 800a2ee:	68bb      	ldr	r3, [r7, #8]
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3710      	adds	r7, #16
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}
 800a2f8:	20000f98 	.word	0x20000f98
 800a2fc:	20000f70 	.word	0x20000f70
 800a300:	20000f30 	.word	0x20000f30
 800a304:	20000f78 	.word	0x20000f78
 800a308:	20000aa0 	.word	0x20000aa0
 800a30c:	20000a9c 	.word	0x20000a9c
 800a310:	20000f84 	.word	0x20000f84
 800a314:	20000f80 	.word	0x20000f80
 800a318:	e000ed04 	.word	0xe000ed04

0800a31c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a31c:	b480      	push	{r7}
 800a31e:	b083      	sub	sp, #12
 800a320:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a322:	4b05      	ldr	r3, [pc, #20]	@ (800a338 <xTaskGetTickCount+0x1c>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a328:	687b      	ldr	r3, [r7, #4]
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	370c      	adds	r7, #12
 800a32e:	46bd      	mov	sp, r7
 800a330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a334:	4770      	bx	lr
 800a336:	bf00      	nop
 800a338:	20000f74 	.word	0x20000f74

0800a33c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b086      	sub	sp, #24
 800a340:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a342:	2300      	movs	r3, #0
 800a344:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a346:	4b4f      	ldr	r3, [pc, #316]	@ (800a484 <xTaskIncrementTick+0x148>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	f040 8090 	bne.w	800a470 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a350:	4b4d      	ldr	r3, [pc, #308]	@ (800a488 <xTaskIncrementTick+0x14c>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	3301      	adds	r3, #1
 800a356:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a358:	4a4b      	ldr	r2, [pc, #300]	@ (800a488 <xTaskIncrementTick+0x14c>)
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a35e:	693b      	ldr	r3, [r7, #16]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d121      	bne.n	800a3a8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a364:	4b49      	ldr	r3, [pc, #292]	@ (800a48c <xTaskIncrementTick+0x150>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d00b      	beq.n	800a386 <xTaskIncrementTick+0x4a>
	__asm volatile
 800a36e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a372:	f383 8811 	msr	BASEPRI, r3
 800a376:	f3bf 8f6f 	isb	sy
 800a37a:	f3bf 8f4f 	dsb	sy
 800a37e:	603b      	str	r3, [r7, #0]
}
 800a380:	bf00      	nop
 800a382:	bf00      	nop
 800a384:	e7fd      	b.n	800a382 <xTaskIncrementTick+0x46>
 800a386:	4b41      	ldr	r3, [pc, #260]	@ (800a48c <xTaskIncrementTick+0x150>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	60fb      	str	r3, [r7, #12]
 800a38c:	4b40      	ldr	r3, [pc, #256]	@ (800a490 <xTaskIncrementTick+0x154>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	4a3e      	ldr	r2, [pc, #248]	@ (800a48c <xTaskIncrementTick+0x150>)
 800a392:	6013      	str	r3, [r2, #0]
 800a394:	4a3e      	ldr	r2, [pc, #248]	@ (800a490 <xTaskIncrementTick+0x154>)
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	6013      	str	r3, [r2, #0]
 800a39a:	4b3e      	ldr	r3, [pc, #248]	@ (800a494 <xTaskIncrementTick+0x158>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	3301      	adds	r3, #1
 800a3a0:	4a3c      	ldr	r2, [pc, #240]	@ (800a494 <xTaskIncrementTick+0x158>)
 800a3a2:	6013      	str	r3, [r2, #0]
 800a3a4:	f000 fae2 	bl	800a96c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a3a8:	4b3b      	ldr	r3, [pc, #236]	@ (800a498 <xTaskIncrementTick+0x15c>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	693a      	ldr	r2, [r7, #16]
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	d349      	bcc.n	800a446 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a3b2:	4b36      	ldr	r3, [pc, #216]	@ (800a48c <xTaskIncrementTick+0x150>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d104      	bne.n	800a3c6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3bc:	4b36      	ldr	r3, [pc, #216]	@ (800a498 <xTaskIncrementTick+0x15c>)
 800a3be:	f04f 32ff 	mov.w	r2, #4294967295
 800a3c2:	601a      	str	r2, [r3, #0]
					break;
 800a3c4:	e03f      	b.n	800a446 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3c6:	4b31      	ldr	r3, [pc, #196]	@ (800a48c <xTaskIncrementTick+0x150>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	68db      	ldr	r3, [r3, #12]
 800a3cc:	68db      	ldr	r3, [r3, #12]
 800a3ce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	685b      	ldr	r3, [r3, #4]
 800a3d4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a3d6:	693a      	ldr	r2, [r7, #16]
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	d203      	bcs.n	800a3e6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a3de:	4a2e      	ldr	r2, [pc, #184]	@ (800a498 <xTaskIncrementTick+0x15c>)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a3e4:	e02f      	b.n	800a446 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	3304      	adds	r3, #4
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f7fe ff26 	bl	800923c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d004      	beq.n	800a402 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	3318      	adds	r3, #24
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f7fe ff1d 	bl	800923c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a406:	4b25      	ldr	r3, [pc, #148]	@ (800a49c <xTaskIncrementTick+0x160>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	429a      	cmp	r2, r3
 800a40c:	d903      	bls.n	800a416 <xTaskIncrementTick+0xda>
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a412:	4a22      	ldr	r2, [pc, #136]	@ (800a49c <xTaskIncrementTick+0x160>)
 800a414:	6013      	str	r3, [r2, #0]
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a41a:	4613      	mov	r3, r2
 800a41c:	009b      	lsls	r3, r3, #2
 800a41e:	4413      	add	r3, r2
 800a420:	009b      	lsls	r3, r3, #2
 800a422:	4a1f      	ldr	r2, [pc, #124]	@ (800a4a0 <xTaskIncrementTick+0x164>)
 800a424:	441a      	add	r2, r3
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	3304      	adds	r3, #4
 800a42a:	4619      	mov	r1, r3
 800a42c:	4610      	mov	r0, r2
 800a42e:	f7fe fea8 	bl	8009182 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a436:	4b1b      	ldr	r3, [pc, #108]	@ (800a4a4 <xTaskIncrementTick+0x168>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d3b8      	bcc.n	800a3b2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a440:	2301      	movs	r3, #1
 800a442:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a444:	e7b5      	b.n	800a3b2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a446:	4b17      	ldr	r3, [pc, #92]	@ (800a4a4 <xTaskIncrementTick+0x168>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a44c:	4914      	ldr	r1, [pc, #80]	@ (800a4a0 <xTaskIncrementTick+0x164>)
 800a44e:	4613      	mov	r3, r2
 800a450:	009b      	lsls	r3, r3, #2
 800a452:	4413      	add	r3, r2
 800a454:	009b      	lsls	r3, r3, #2
 800a456:	440b      	add	r3, r1
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	2b01      	cmp	r3, #1
 800a45c:	d901      	bls.n	800a462 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a45e:	2301      	movs	r3, #1
 800a460:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a462:	4b11      	ldr	r3, [pc, #68]	@ (800a4a8 <xTaskIncrementTick+0x16c>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d007      	beq.n	800a47a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a46a:	2301      	movs	r3, #1
 800a46c:	617b      	str	r3, [r7, #20]
 800a46e:	e004      	b.n	800a47a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a470:	4b0e      	ldr	r3, [pc, #56]	@ (800a4ac <xTaskIncrementTick+0x170>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	3301      	adds	r3, #1
 800a476:	4a0d      	ldr	r2, [pc, #52]	@ (800a4ac <xTaskIncrementTick+0x170>)
 800a478:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a47a:	697b      	ldr	r3, [r7, #20]
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3718      	adds	r7, #24
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}
 800a484:	20000f98 	.word	0x20000f98
 800a488:	20000f74 	.word	0x20000f74
 800a48c:	20000f28 	.word	0x20000f28
 800a490:	20000f2c 	.word	0x20000f2c
 800a494:	20000f88 	.word	0x20000f88
 800a498:	20000f90 	.word	0x20000f90
 800a49c:	20000f78 	.word	0x20000f78
 800a4a0:	20000aa0 	.word	0x20000aa0
 800a4a4:	20000a9c 	.word	0x20000a9c
 800a4a8:	20000f84 	.word	0x20000f84
 800a4ac:	20000f80 	.word	0x20000f80

0800a4b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b085      	sub	sp, #20
 800a4b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a4b6:	4b2b      	ldr	r3, [pc, #172]	@ (800a564 <vTaskSwitchContext+0xb4>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d003      	beq.n	800a4c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a4be:	4b2a      	ldr	r3, [pc, #168]	@ (800a568 <vTaskSwitchContext+0xb8>)
 800a4c0:	2201      	movs	r2, #1
 800a4c2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a4c4:	e047      	b.n	800a556 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800a4c6:	4b28      	ldr	r3, [pc, #160]	@ (800a568 <vTaskSwitchContext+0xb8>)
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4cc:	4b27      	ldr	r3, [pc, #156]	@ (800a56c <vTaskSwitchContext+0xbc>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	60fb      	str	r3, [r7, #12]
 800a4d2:	e011      	b.n	800a4f8 <vTaskSwitchContext+0x48>
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d10b      	bne.n	800a4f2 <vTaskSwitchContext+0x42>
	__asm volatile
 800a4da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4de:	f383 8811 	msr	BASEPRI, r3
 800a4e2:	f3bf 8f6f 	isb	sy
 800a4e6:	f3bf 8f4f 	dsb	sy
 800a4ea:	607b      	str	r3, [r7, #4]
}
 800a4ec:	bf00      	nop
 800a4ee:	bf00      	nop
 800a4f0:	e7fd      	b.n	800a4ee <vTaskSwitchContext+0x3e>
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	3b01      	subs	r3, #1
 800a4f6:	60fb      	str	r3, [r7, #12]
 800a4f8:	491d      	ldr	r1, [pc, #116]	@ (800a570 <vTaskSwitchContext+0xc0>)
 800a4fa:	68fa      	ldr	r2, [r7, #12]
 800a4fc:	4613      	mov	r3, r2
 800a4fe:	009b      	lsls	r3, r3, #2
 800a500:	4413      	add	r3, r2
 800a502:	009b      	lsls	r3, r3, #2
 800a504:	440b      	add	r3, r1
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d0e3      	beq.n	800a4d4 <vTaskSwitchContext+0x24>
 800a50c:	68fa      	ldr	r2, [r7, #12]
 800a50e:	4613      	mov	r3, r2
 800a510:	009b      	lsls	r3, r3, #2
 800a512:	4413      	add	r3, r2
 800a514:	009b      	lsls	r3, r3, #2
 800a516:	4a16      	ldr	r2, [pc, #88]	@ (800a570 <vTaskSwitchContext+0xc0>)
 800a518:	4413      	add	r3, r2
 800a51a:	60bb      	str	r3, [r7, #8]
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	685b      	ldr	r3, [r3, #4]
 800a520:	685a      	ldr	r2, [r3, #4]
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	605a      	str	r2, [r3, #4]
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	685a      	ldr	r2, [r3, #4]
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	3308      	adds	r3, #8
 800a52e:	429a      	cmp	r2, r3
 800a530:	d104      	bne.n	800a53c <vTaskSwitchContext+0x8c>
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	685b      	ldr	r3, [r3, #4]
 800a536:	685a      	ldr	r2, [r3, #4]
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	605a      	str	r2, [r3, #4]
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	685b      	ldr	r3, [r3, #4]
 800a540:	68db      	ldr	r3, [r3, #12]
 800a542:	4a0c      	ldr	r2, [pc, #48]	@ (800a574 <vTaskSwitchContext+0xc4>)
 800a544:	6013      	str	r3, [r2, #0]
 800a546:	4a09      	ldr	r2, [pc, #36]	@ (800a56c <vTaskSwitchContext+0xbc>)
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a54c:	4b09      	ldr	r3, [pc, #36]	@ (800a574 <vTaskSwitchContext+0xc4>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	3354      	adds	r3, #84	@ 0x54
 800a552:	4a09      	ldr	r2, [pc, #36]	@ (800a578 <vTaskSwitchContext+0xc8>)
 800a554:	6013      	str	r3, [r2, #0]
}
 800a556:	bf00      	nop
 800a558:	3714      	adds	r7, #20
 800a55a:	46bd      	mov	sp, r7
 800a55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a560:	4770      	bx	lr
 800a562:	bf00      	nop
 800a564:	20000f98 	.word	0x20000f98
 800a568:	20000f84 	.word	0x20000f84
 800a56c:	20000f78 	.word	0x20000f78
 800a570:	20000aa0 	.word	0x20000aa0
 800a574:	20000a9c 	.word	0x20000a9c
 800a578:	20000100 	.word	0x20000100

0800a57c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b084      	sub	sp, #16
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d10b      	bne.n	800a5a4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a58c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a590:	f383 8811 	msr	BASEPRI, r3
 800a594:	f3bf 8f6f 	isb	sy
 800a598:	f3bf 8f4f 	dsb	sy
 800a59c:	60fb      	str	r3, [r7, #12]
}
 800a59e:	bf00      	nop
 800a5a0:	bf00      	nop
 800a5a2:	e7fd      	b.n	800a5a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a5a4:	4b07      	ldr	r3, [pc, #28]	@ (800a5c4 <vTaskPlaceOnEventList+0x48>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	3318      	adds	r3, #24
 800a5aa:	4619      	mov	r1, r3
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f7fe fe0c 	bl	80091ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a5b2:	2101      	movs	r1, #1
 800a5b4:	6838      	ldr	r0, [r7, #0]
 800a5b6:	f000 fa87 	bl	800aac8 <prvAddCurrentTaskToDelayedList>
}
 800a5ba:	bf00      	nop
 800a5bc:	3710      	adds	r7, #16
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}
 800a5c2:	bf00      	nop
 800a5c4:	20000a9c 	.word	0x20000a9c

0800a5c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b086      	sub	sp, #24
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	60f8      	str	r0, [r7, #12]
 800a5d0:	60b9      	str	r1, [r7, #8]
 800a5d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d10b      	bne.n	800a5f2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a5da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5de:	f383 8811 	msr	BASEPRI, r3
 800a5e2:	f3bf 8f6f 	isb	sy
 800a5e6:	f3bf 8f4f 	dsb	sy
 800a5ea:	617b      	str	r3, [r7, #20]
}
 800a5ec:	bf00      	nop
 800a5ee:	bf00      	nop
 800a5f0:	e7fd      	b.n	800a5ee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a5f2:	4b0a      	ldr	r3, [pc, #40]	@ (800a61c <vTaskPlaceOnEventListRestricted+0x54>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	3318      	adds	r3, #24
 800a5f8:	4619      	mov	r1, r3
 800a5fa:	68f8      	ldr	r0, [r7, #12]
 800a5fc:	f7fe fdc1 	bl	8009182 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d002      	beq.n	800a60c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a606:	f04f 33ff 	mov.w	r3, #4294967295
 800a60a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a60c:	6879      	ldr	r1, [r7, #4]
 800a60e:	68b8      	ldr	r0, [r7, #8]
 800a610:	f000 fa5a 	bl	800aac8 <prvAddCurrentTaskToDelayedList>
	}
 800a614:	bf00      	nop
 800a616:	3718      	adds	r7, #24
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}
 800a61c:	20000a9c 	.word	0x20000a9c

0800a620 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b086      	sub	sp, #24
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	68db      	ldr	r3, [r3, #12]
 800a62c:	68db      	ldr	r3, [r3, #12]
 800a62e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d10b      	bne.n	800a64e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a63a:	f383 8811 	msr	BASEPRI, r3
 800a63e:	f3bf 8f6f 	isb	sy
 800a642:	f3bf 8f4f 	dsb	sy
 800a646:	60fb      	str	r3, [r7, #12]
}
 800a648:	bf00      	nop
 800a64a:	bf00      	nop
 800a64c:	e7fd      	b.n	800a64a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	3318      	adds	r3, #24
 800a652:	4618      	mov	r0, r3
 800a654:	f7fe fdf2 	bl	800923c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a658:	4b1d      	ldr	r3, [pc, #116]	@ (800a6d0 <xTaskRemoveFromEventList+0xb0>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d11d      	bne.n	800a69c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	3304      	adds	r3, #4
 800a664:	4618      	mov	r0, r3
 800a666:	f7fe fde9 	bl	800923c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a66e:	4b19      	ldr	r3, [pc, #100]	@ (800a6d4 <xTaskRemoveFromEventList+0xb4>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	429a      	cmp	r2, r3
 800a674:	d903      	bls.n	800a67e <xTaskRemoveFromEventList+0x5e>
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a67a:	4a16      	ldr	r2, [pc, #88]	@ (800a6d4 <xTaskRemoveFromEventList+0xb4>)
 800a67c:	6013      	str	r3, [r2, #0]
 800a67e:	693b      	ldr	r3, [r7, #16]
 800a680:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a682:	4613      	mov	r3, r2
 800a684:	009b      	lsls	r3, r3, #2
 800a686:	4413      	add	r3, r2
 800a688:	009b      	lsls	r3, r3, #2
 800a68a:	4a13      	ldr	r2, [pc, #76]	@ (800a6d8 <xTaskRemoveFromEventList+0xb8>)
 800a68c:	441a      	add	r2, r3
 800a68e:	693b      	ldr	r3, [r7, #16]
 800a690:	3304      	adds	r3, #4
 800a692:	4619      	mov	r1, r3
 800a694:	4610      	mov	r0, r2
 800a696:	f7fe fd74 	bl	8009182 <vListInsertEnd>
 800a69a:	e005      	b.n	800a6a8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	3318      	adds	r3, #24
 800a6a0:	4619      	mov	r1, r3
 800a6a2:	480e      	ldr	r0, [pc, #56]	@ (800a6dc <xTaskRemoveFromEventList+0xbc>)
 800a6a4:	f7fe fd6d 	bl	8009182 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6ac:	4b0c      	ldr	r3, [pc, #48]	@ (800a6e0 <xTaskRemoveFromEventList+0xc0>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6b2:	429a      	cmp	r2, r3
 800a6b4:	d905      	bls.n	800a6c2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a6ba:	4b0a      	ldr	r3, [pc, #40]	@ (800a6e4 <xTaskRemoveFromEventList+0xc4>)
 800a6bc:	2201      	movs	r2, #1
 800a6be:	601a      	str	r2, [r3, #0]
 800a6c0:	e001      	b.n	800a6c6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a6c6:	697b      	ldr	r3, [r7, #20]
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3718      	adds	r7, #24
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}
 800a6d0:	20000f98 	.word	0x20000f98
 800a6d4:	20000f78 	.word	0x20000f78
 800a6d8:	20000aa0 	.word	0x20000aa0
 800a6dc:	20000f30 	.word	0x20000f30
 800a6e0:	20000a9c 	.word	0x20000a9c
 800a6e4:	20000f84 	.word	0x20000f84

0800a6e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b083      	sub	sp, #12
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a6f0:	4b06      	ldr	r3, [pc, #24]	@ (800a70c <vTaskInternalSetTimeOutState+0x24>)
 800a6f2:	681a      	ldr	r2, [r3, #0]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a6f8:	4b05      	ldr	r3, [pc, #20]	@ (800a710 <vTaskInternalSetTimeOutState+0x28>)
 800a6fa:	681a      	ldr	r2, [r3, #0]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	605a      	str	r2, [r3, #4]
}
 800a700:	bf00      	nop
 800a702:	370c      	adds	r7, #12
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr
 800a70c:	20000f88 	.word	0x20000f88
 800a710:	20000f74 	.word	0x20000f74

0800a714 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b088      	sub	sp, #32
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
 800a71c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d10b      	bne.n	800a73c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a728:	f383 8811 	msr	BASEPRI, r3
 800a72c:	f3bf 8f6f 	isb	sy
 800a730:	f3bf 8f4f 	dsb	sy
 800a734:	613b      	str	r3, [r7, #16]
}
 800a736:	bf00      	nop
 800a738:	bf00      	nop
 800a73a:	e7fd      	b.n	800a738 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d10b      	bne.n	800a75a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a746:	f383 8811 	msr	BASEPRI, r3
 800a74a:	f3bf 8f6f 	isb	sy
 800a74e:	f3bf 8f4f 	dsb	sy
 800a752:	60fb      	str	r3, [r7, #12]
}
 800a754:	bf00      	nop
 800a756:	bf00      	nop
 800a758:	e7fd      	b.n	800a756 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a75a:	f000 fe95 	bl	800b488 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a75e:	4b1d      	ldr	r3, [pc, #116]	@ (800a7d4 <xTaskCheckForTimeOut+0xc0>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	685b      	ldr	r3, [r3, #4]
 800a768:	69ba      	ldr	r2, [r7, #24]
 800a76a:	1ad3      	subs	r3, r2, r3
 800a76c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a776:	d102      	bne.n	800a77e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a778:	2300      	movs	r3, #0
 800a77a:	61fb      	str	r3, [r7, #28]
 800a77c:	e023      	b.n	800a7c6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681a      	ldr	r2, [r3, #0]
 800a782:	4b15      	ldr	r3, [pc, #84]	@ (800a7d8 <xTaskCheckForTimeOut+0xc4>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	429a      	cmp	r2, r3
 800a788:	d007      	beq.n	800a79a <xTaskCheckForTimeOut+0x86>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	69ba      	ldr	r2, [r7, #24]
 800a790:	429a      	cmp	r2, r3
 800a792:	d302      	bcc.n	800a79a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a794:	2301      	movs	r3, #1
 800a796:	61fb      	str	r3, [r7, #28]
 800a798:	e015      	b.n	800a7c6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	697a      	ldr	r2, [r7, #20]
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d20b      	bcs.n	800a7bc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	681a      	ldr	r2, [r3, #0]
 800a7a8:	697b      	ldr	r3, [r7, #20]
 800a7aa:	1ad2      	subs	r2, r2, r3
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f7ff ff99 	bl	800a6e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	61fb      	str	r3, [r7, #28]
 800a7ba:	e004      	b.n	800a7c6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a7c6:	f000 fe91 	bl	800b4ec <vPortExitCritical>

	return xReturn;
 800a7ca:	69fb      	ldr	r3, [r7, #28]
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3720      	adds	r7, #32
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}
 800a7d4:	20000f74 	.word	0x20000f74
 800a7d8:	20000f88 	.word	0x20000f88

0800a7dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a7dc:	b480      	push	{r7}
 800a7de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a7e0:	4b03      	ldr	r3, [pc, #12]	@ (800a7f0 <vTaskMissedYield+0x14>)
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	601a      	str	r2, [r3, #0]
}
 800a7e6:	bf00      	nop
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr
 800a7f0:	20000f84 	.word	0x20000f84

0800a7f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b082      	sub	sp, #8
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a7fc:	f000 f852 	bl	800a8a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a800:	4b06      	ldr	r3, [pc, #24]	@ (800a81c <prvIdleTask+0x28>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	2b01      	cmp	r3, #1
 800a806:	d9f9      	bls.n	800a7fc <prvIdleTask+0x8>
			{
				taskYIELD();
 800a808:	4b05      	ldr	r3, [pc, #20]	@ (800a820 <prvIdleTask+0x2c>)
 800a80a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a80e:	601a      	str	r2, [r3, #0]
 800a810:	f3bf 8f4f 	dsb	sy
 800a814:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a818:	e7f0      	b.n	800a7fc <prvIdleTask+0x8>
 800a81a:	bf00      	nop
 800a81c:	20000aa0 	.word	0x20000aa0
 800a820:	e000ed04 	.word	0xe000ed04

0800a824 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b082      	sub	sp, #8
 800a828:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a82a:	2300      	movs	r3, #0
 800a82c:	607b      	str	r3, [r7, #4]
 800a82e:	e00c      	b.n	800a84a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a830:	687a      	ldr	r2, [r7, #4]
 800a832:	4613      	mov	r3, r2
 800a834:	009b      	lsls	r3, r3, #2
 800a836:	4413      	add	r3, r2
 800a838:	009b      	lsls	r3, r3, #2
 800a83a:	4a12      	ldr	r2, [pc, #72]	@ (800a884 <prvInitialiseTaskLists+0x60>)
 800a83c:	4413      	add	r3, r2
 800a83e:	4618      	mov	r0, r3
 800a840:	f7fe fc72 	bl	8009128 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	3301      	adds	r3, #1
 800a848:	607b      	str	r3, [r7, #4]
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2b37      	cmp	r3, #55	@ 0x37
 800a84e:	d9ef      	bls.n	800a830 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a850:	480d      	ldr	r0, [pc, #52]	@ (800a888 <prvInitialiseTaskLists+0x64>)
 800a852:	f7fe fc69 	bl	8009128 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a856:	480d      	ldr	r0, [pc, #52]	@ (800a88c <prvInitialiseTaskLists+0x68>)
 800a858:	f7fe fc66 	bl	8009128 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a85c:	480c      	ldr	r0, [pc, #48]	@ (800a890 <prvInitialiseTaskLists+0x6c>)
 800a85e:	f7fe fc63 	bl	8009128 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a862:	480c      	ldr	r0, [pc, #48]	@ (800a894 <prvInitialiseTaskLists+0x70>)
 800a864:	f7fe fc60 	bl	8009128 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a868:	480b      	ldr	r0, [pc, #44]	@ (800a898 <prvInitialiseTaskLists+0x74>)
 800a86a:	f7fe fc5d 	bl	8009128 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a86e:	4b0b      	ldr	r3, [pc, #44]	@ (800a89c <prvInitialiseTaskLists+0x78>)
 800a870:	4a05      	ldr	r2, [pc, #20]	@ (800a888 <prvInitialiseTaskLists+0x64>)
 800a872:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a874:	4b0a      	ldr	r3, [pc, #40]	@ (800a8a0 <prvInitialiseTaskLists+0x7c>)
 800a876:	4a05      	ldr	r2, [pc, #20]	@ (800a88c <prvInitialiseTaskLists+0x68>)
 800a878:	601a      	str	r2, [r3, #0]
}
 800a87a:	bf00      	nop
 800a87c:	3708      	adds	r7, #8
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}
 800a882:	bf00      	nop
 800a884:	20000aa0 	.word	0x20000aa0
 800a888:	20000f00 	.word	0x20000f00
 800a88c:	20000f14 	.word	0x20000f14
 800a890:	20000f30 	.word	0x20000f30
 800a894:	20000f44 	.word	0x20000f44
 800a898:	20000f5c 	.word	0x20000f5c
 800a89c:	20000f28 	.word	0x20000f28
 800a8a0:	20000f2c 	.word	0x20000f2c

0800a8a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b082      	sub	sp, #8
 800a8a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a8aa:	e019      	b.n	800a8e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a8ac:	f000 fdec 	bl	800b488 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8b0:	4b10      	ldr	r3, [pc, #64]	@ (800a8f4 <prvCheckTasksWaitingTermination+0x50>)
 800a8b2:	68db      	ldr	r3, [r3, #12]
 800a8b4:	68db      	ldr	r3, [r3, #12]
 800a8b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	3304      	adds	r3, #4
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f7fe fcbd 	bl	800923c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a8c2:	4b0d      	ldr	r3, [pc, #52]	@ (800a8f8 <prvCheckTasksWaitingTermination+0x54>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	3b01      	subs	r3, #1
 800a8c8:	4a0b      	ldr	r2, [pc, #44]	@ (800a8f8 <prvCheckTasksWaitingTermination+0x54>)
 800a8ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a8cc:	4b0b      	ldr	r3, [pc, #44]	@ (800a8fc <prvCheckTasksWaitingTermination+0x58>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	3b01      	subs	r3, #1
 800a8d2:	4a0a      	ldr	r2, [pc, #40]	@ (800a8fc <prvCheckTasksWaitingTermination+0x58>)
 800a8d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a8d6:	f000 fe09 	bl	800b4ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f000 f810 	bl	800a900 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a8e0:	4b06      	ldr	r3, [pc, #24]	@ (800a8fc <prvCheckTasksWaitingTermination+0x58>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d1e1      	bne.n	800a8ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a8e8:	bf00      	nop
 800a8ea:	bf00      	nop
 800a8ec:	3708      	adds	r7, #8
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}
 800a8f2:	bf00      	nop
 800a8f4:	20000f44 	.word	0x20000f44
 800a8f8:	20000f70 	.word	0x20000f70
 800a8fc:	20000f58 	.word	0x20000f58

0800a900 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a900:	b580      	push	{r7, lr}
 800a902:	b084      	sub	sp, #16
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	3354      	adds	r3, #84	@ 0x54
 800a90c:	4618      	mov	r0, r3
 800a90e:	f001 fdf9 	bl	800c504 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d108      	bne.n	800a92e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a920:	4618      	mov	r0, r3
 800a922:	f000 ffa1 	bl	800b868 <vPortFree>
				vPortFree( pxTCB );
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f000 ff9e 	bl	800b868 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a92c:	e019      	b.n	800a962 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a934:	2b01      	cmp	r3, #1
 800a936:	d103      	bne.n	800a940 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f000 ff95 	bl	800b868 <vPortFree>
	}
 800a93e:	e010      	b.n	800a962 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a946:	2b02      	cmp	r3, #2
 800a948:	d00b      	beq.n	800a962 <prvDeleteTCB+0x62>
	__asm volatile
 800a94a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a94e:	f383 8811 	msr	BASEPRI, r3
 800a952:	f3bf 8f6f 	isb	sy
 800a956:	f3bf 8f4f 	dsb	sy
 800a95a:	60fb      	str	r3, [r7, #12]
}
 800a95c:	bf00      	nop
 800a95e:	bf00      	nop
 800a960:	e7fd      	b.n	800a95e <prvDeleteTCB+0x5e>
	}
 800a962:	bf00      	nop
 800a964:	3710      	adds	r7, #16
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}
	...

0800a96c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a96c:	b480      	push	{r7}
 800a96e:	b083      	sub	sp, #12
 800a970:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a972:	4b0c      	ldr	r3, [pc, #48]	@ (800a9a4 <prvResetNextTaskUnblockTime+0x38>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d104      	bne.n	800a986 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a97c:	4b0a      	ldr	r3, [pc, #40]	@ (800a9a8 <prvResetNextTaskUnblockTime+0x3c>)
 800a97e:	f04f 32ff 	mov.w	r2, #4294967295
 800a982:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a984:	e008      	b.n	800a998 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a986:	4b07      	ldr	r3, [pc, #28]	@ (800a9a4 <prvResetNextTaskUnblockTime+0x38>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	68db      	ldr	r3, [r3, #12]
 800a98c:	68db      	ldr	r3, [r3, #12]
 800a98e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	685b      	ldr	r3, [r3, #4]
 800a994:	4a04      	ldr	r2, [pc, #16]	@ (800a9a8 <prvResetNextTaskUnblockTime+0x3c>)
 800a996:	6013      	str	r3, [r2, #0]
}
 800a998:	bf00      	nop
 800a99a:	370c      	adds	r7, #12
 800a99c:	46bd      	mov	sp, r7
 800a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a2:	4770      	bx	lr
 800a9a4:	20000f28 	.word	0x20000f28
 800a9a8:	20000f90 	.word	0x20000f90

0800a9ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b083      	sub	sp, #12
 800a9b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a9b2:	4b0b      	ldr	r3, [pc, #44]	@ (800a9e0 <xTaskGetSchedulerState+0x34>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d102      	bne.n	800a9c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	607b      	str	r3, [r7, #4]
 800a9be:	e008      	b.n	800a9d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a9c0:	4b08      	ldr	r3, [pc, #32]	@ (800a9e4 <xTaskGetSchedulerState+0x38>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d102      	bne.n	800a9ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a9c8:	2302      	movs	r3, #2
 800a9ca:	607b      	str	r3, [r7, #4]
 800a9cc:	e001      	b.n	800a9d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a9d2:	687b      	ldr	r3, [r7, #4]
	}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	370c      	adds	r7, #12
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9de:	4770      	bx	lr
 800a9e0:	20000f7c 	.word	0x20000f7c
 800a9e4:	20000f98 	.word	0x20000f98

0800a9e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b086      	sub	sp, #24
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d058      	beq.n	800aab0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a9fe:	4b2f      	ldr	r3, [pc, #188]	@ (800aabc <xTaskPriorityDisinherit+0xd4>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	693a      	ldr	r2, [r7, #16]
 800aa04:	429a      	cmp	r2, r3
 800aa06:	d00b      	beq.n	800aa20 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800aa08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa0c:	f383 8811 	msr	BASEPRI, r3
 800aa10:	f3bf 8f6f 	isb	sy
 800aa14:	f3bf 8f4f 	dsb	sy
 800aa18:	60fb      	str	r3, [r7, #12]
}
 800aa1a:	bf00      	nop
 800aa1c:	bf00      	nop
 800aa1e:	e7fd      	b.n	800aa1c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800aa20:	693b      	ldr	r3, [r7, #16]
 800aa22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d10b      	bne.n	800aa40 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800aa28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa2c:	f383 8811 	msr	BASEPRI, r3
 800aa30:	f3bf 8f6f 	isb	sy
 800aa34:	f3bf 8f4f 	dsb	sy
 800aa38:	60bb      	str	r3, [r7, #8]
}
 800aa3a:	bf00      	nop
 800aa3c:	bf00      	nop
 800aa3e:	e7fd      	b.n	800aa3c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa44:	1e5a      	subs	r2, r3, #1
 800aa46:	693b      	ldr	r3, [r7, #16]
 800aa48:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa4e:	693b      	ldr	r3, [r7, #16]
 800aa50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa52:	429a      	cmp	r2, r3
 800aa54:	d02c      	beq.n	800aab0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d128      	bne.n	800aab0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	3304      	adds	r3, #4
 800aa62:	4618      	mov	r0, r3
 800aa64:	f7fe fbea 	bl	800923c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa74:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800aa78:	693b      	ldr	r3, [r7, #16]
 800aa7a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800aa7c:	693b      	ldr	r3, [r7, #16]
 800aa7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa80:	4b0f      	ldr	r3, [pc, #60]	@ (800aac0 <xTaskPriorityDisinherit+0xd8>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	429a      	cmp	r2, r3
 800aa86:	d903      	bls.n	800aa90 <xTaskPriorityDisinherit+0xa8>
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa8c:	4a0c      	ldr	r2, [pc, #48]	@ (800aac0 <xTaskPriorityDisinherit+0xd8>)
 800aa8e:	6013      	str	r3, [r2, #0]
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa94:	4613      	mov	r3, r2
 800aa96:	009b      	lsls	r3, r3, #2
 800aa98:	4413      	add	r3, r2
 800aa9a:	009b      	lsls	r3, r3, #2
 800aa9c:	4a09      	ldr	r2, [pc, #36]	@ (800aac4 <xTaskPriorityDisinherit+0xdc>)
 800aa9e:	441a      	add	r2, r3
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	3304      	adds	r3, #4
 800aaa4:	4619      	mov	r1, r3
 800aaa6:	4610      	mov	r0, r2
 800aaa8:	f7fe fb6b 	bl	8009182 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800aaac:	2301      	movs	r3, #1
 800aaae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aab0:	697b      	ldr	r3, [r7, #20]
	}
 800aab2:	4618      	mov	r0, r3
 800aab4:	3718      	adds	r7, #24
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}
 800aaba:	bf00      	nop
 800aabc:	20000a9c 	.word	0x20000a9c
 800aac0:	20000f78 	.word	0x20000f78
 800aac4:	20000aa0 	.word	0x20000aa0

0800aac8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b084      	sub	sp, #16
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
 800aad0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800aad2:	4b21      	ldr	r3, [pc, #132]	@ (800ab58 <prvAddCurrentTaskToDelayedList+0x90>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aad8:	4b20      	ldr	r3, [pc, #128]	@ (800ab5c <prvAddCurrentTaskToDelayedList+0x94>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	3304      	adds	r3, #4
 800aade:	4618      	mov	r0, r3
 800aae0:	f7fe fbac 	bl	800923c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaea:	d10a      	bne.n	800ab02 <prvAddCurrentTaskToDelayedList+0x3a>
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d007      	beq.n	800ab02 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aaf2:	4b1a      	ldr	r3, [pc, #104]	@ (800ab5c <prvAddCurrentTaskToDelayedList+0x94>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	3304      	adds	r3, #4
 800aaf8:	4619      	mov	r1, r3
 800aafa:	4819      	ldr	r0, [pc, #100]	@ (800ab60 <prvAddCurrentTaskToDelayedList+0x98>)
 800aafc:	f7fe fb41 	bl	8009182 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ab00:	e026      	b.n	800ab50 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ab02:	68fa      	ldr	r2, [r7, #12]
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	4413      	add	r3, r2
 800ab08:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ab0a:	4b14      	ldr	r3, [pc, #80]	@ (800ab5c <prvAddCurrentTaskToDelayedList+0x94>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	68ba      	ldr	r2, [r7, #8]
 800ab10:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ab12:	68ba      	ldr	r2, [r7, #8]
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	429a      	cmp	r2, r3
 800ab18:	d209      	bcs.n	800ab2e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab1a:	4b12      	ldr	r3, [pc, #72]	@ (800ab64 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ab1c:	681a      	ldr	r2, [r3, #0]
 800ab1e:	4b0f      	ldr	r3, [pc, #60]	@ (800ab5c <prvAddCurrentTaskToDelayedList+0x94>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	3304      	adds	r3, #4
 800ab24:	4619      	mov	r1, r3
 800ab26:	4610      	mov	r0, r2
 800ab28:	f7fe fb4f 	bl	80091ca <vListInsert>
}
 800ab2c:	e010      	b.n	800ab50 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab2e:	4b0e      	ldr	r3, [pc, #56]	@ (800ab68 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ab30:	681a      	ldr	r2, [r3, #0]
 800ab32:	4b0a      	ldr	r3, [pc, #40]	@ (800ab5c <prvAddCurrentTaskToDelayedList+0x94>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	3304      	adds	r3, #4
 800ab38:	4619      	mov	r1, r3
 800ab3a:	4610      	mov	r0, r2
 800ab3c:	f7fe fb45 	bl	80091ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ab40:	4b0a      	ldr	r3, [pc, #40]	@ (800ab6c <prvAddCurrentTaskToDelayedList+0xa4>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	68ba      	ldr	r2, [r7, #8]
 800ab46:	429a      	cmp	r2, r3
 800ab48:	d202      	bcs.n	800ab50 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ab4a:	4a08      	ldr	r2, [pc, #32]	@ (800ab6c <prvAddCurrentTaskToDelayedList+0xa4>)
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	6013      	str	r3, [r2, #0]
}
 800ab50:	bf00      	nop
 800ab52:	3710      	adds	r7, #16
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}
 800ab58:	20000f74 	.word	0x20000f74
 800ab5c:	20000a9c 	.word	0x20000a9c
 800ab60:	20000f5c 	.word	0x20000f5c
 800ab64:	20000f2c 	.word	0x20000f2c
 800ab68:	20000f28 	.word	0x20000f28
 800ab6c:	20000f90 	.word	0x20000f90

0800ab70 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b08a      	sub	sp, #40	@ 0x28
 800ab74:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ab76:	2300      	movs	r3, #0
 800ab78:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ab7a:	f000 fb13 	bl	800b1a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ab7e:	4b1d      	ldr	r3, [pc, #116]	@ (800abf4 <xTimerCreateTimerTask+0x84>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d021      	beq.n	800abca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ab86:	2300      	movs	r3, #0
 800ab88:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ab8e:	1d3a      	adds	r2, r7, #4
 800ab90:	f107 0108 	add.w	r1, r7, #8
 800ab94:	f107 030c 	add.w	r3, r7, #12
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f7fe faab 	bl	80090f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ab9e:	6879      	ldr	r1, [r7, #4]
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	68fa      	ldr	r2, [r7, #12]
 800aba4:	9202      	str	r2, [sp, #8]
 800aba6:	9301      	str	r3, [sp, #4]
 800aba8:	2302      	movs	r3, #2
 800abaa:	9300      	str	r3, [sp, #0]
 800abac:	2300      	movs	r3, #0
 800abae:	460a      	mov	r2, r1
 800abb0:	4911      	ldr	r1, [pc, #68]	@ (800abf8 <xTimerCreateTimerTask+0x88>)
 800abb2:	4812      	ldr	r0, [pc, #72]	@ (800abfc <xTimerCreateTimerTask+0x8c>)
 800abb4:	f7ff f8a2 	bl	8009cfc <xTaskCreateStatic>
 800abb8:	4603      	mov	r3, r0
 800abba:	4a11      	ldr	r2, [pc, #68]	@ (800ac00 <xTimerCreateTimerTask+0x90>)
 800abbc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800abbe:	4b10      	ldr	r3, [pc, #64]	@ (800ac00 <xTimerCreateTimerTask+0x90>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d001      	beq.n	800abca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800abc6:	2301      	movs	r3, #1
 800abc8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d10b      	bne.n	800abe8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800abd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abd4:	f383 8811 	msr	BASEPRI, r3
 800abd8:	f3bf 8f6f 	isb	sy
 800abdc:	f3bf 8f4f 	dsb	sy
 800abe0:	613b      	str	r3, [r7, #16]
}
 800abe2:	bf00      	nop
 800abe4:	bf00      	nop
 800abe6:	e7fd      	b.n	800abe4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800abe8:	697b      	ldr	r3, [r7, #20]
}
 800abea:	4618      	mov	r0, r3
 800abec:	3718      	adds	r7, #24
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}
 800abf2:	bf00      	nop
 800abf4:	20000fcc 	.word	0x20000fcc
 800abf8:	0800c730 	.word	0x0800c730
 800abfc:	0800ad3d 	.word	0x0800ad3d
 800ac00:	20000fd0 	.word	0x20000fd0

0800ac04 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b08a      	sub	sp, #40	@ 0x28
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	60f8      	str	r0, [r7, #12]
 800ac0c:	60b9      	str	r1, [r7, #8]
 800ac0e:	607a      	str	r2, [r7, #4]
 800ac10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ac12:	2300      	movs	r3, #0
 800ac14:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d10b      	bne.n	800ac34 <xTimerGenericCommand+0x30>
	__asm volatile
 800ac1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac20:	f383 8811 	msr	BASEPRI, r3
 800ac24:	f3bf 8f6f 	isb	sy
 800ac28:	f3bf 8f4f 	dsb	sy
 800ac2c:	623b      	str	r3, [r7, #32]
}
 800ac2e:	bf00      	nop
 800ac30:	bf00      	nop
 800ac32:	e7fd      	b.n	800ac30 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ac34:	4b19      	ldr	r3, [pc, #100]	@ (800ac9c <xTimerGenericCommand+0x98>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d02a      	beq.n	800ac92 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	2b05      	cmp	r3, #5
 800ac4c:	dc18      	bgt.n	800ac80 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ac4e:	f7ff fead 	bl	800a9ac <xTaskGetSchedulerState>
 800ac52:	4603      	mov	r3, r0
 800ac54:	2b02      	cmp	r3, #2
 800ac56:	d109      	bne.n	800ac6c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ac58:	4b10      	ldr	r3, [pc, #64]	@ (800ac9c <xTimerGenericCommand+0x98>)
 800ac5a:	6818      	ldr	r0, [r3, #0]
 800ac5c:	f107 0110 	add.w	r1, r7, #16
 800ac60:	2300      	movs	r3, #0
 800ac62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac64:	f7fe fc5a 	bl	800951c <xQueueGenericSend>
 800ac68:	6278      	str	r0, [r7, #36]	@ 0x24
 800ac6a:	e012      	b.n	800ac92 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ac6c:	4b0b      	ldr	r3, [pc, #44]	@ (800ac9c <xTimerGenericCommand+0x98>)
 800ac6e:	6818      	ldr	r0, [r3, #0]
 800ac70:	f107 0110 	add.w	r1, r7, #16
 800ac74:	2300      	movs	r3, #0
 800ac76:	2200      	movs	r2, #0
 800ac78:	f7fe fc50 	bl	800951c <xQueueGenericSend>
 800ac7c:	6278      	str	r0, [r7, #36]	@ 0x24
 800ac7e:	e008      	b.n	800ac92 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ac80:	4b06      	ldr	r3, [pc, #24]	@ (800ac9c <xTimerGenericCommand+0x98>)
 800ac82:	6818      	ldr	r0, [r3, #0]
 800ac84:	f107 0110 	add.w	r1, r7, #16
 800ac88:	2300      	movs	r3, #0
 800ac8a:	683a      	ldr	r2, [r7, #0]
 800ac8c:	f7fe fd48 	bl	8009720 <xQueueGenericSendFromISR>
 800ac90:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ac92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	3728      	adds	r7, #40	@ 0x28
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}
 800ac9c:	20000fcc 	.word	0x20000fcc

0800aca0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b088      	sub	sp, #32
 800aca4:	af02      	add	r7, sp, #8
 800aca6:	6078      	str	r0, [r7, #4]
 800aca8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acaa:	4b23      	ldr	r3, [pc, #140]	@ (800ad38 <prvProcessExpiredTimer+0x98>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	68db      	ldr	r3, [r3, #12]
 800acb0:	68db      	ldr	r3, [r3, #12]
 800acb2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	3304      	adds	r3, #4
 800acb8:	4618      	mov	r0, r3
 800acba:	f7fe fabf 	bl	800923c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800acbe:	697b      	ldr	r3, [r7, #20]
 800acc0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800acc4:	f003 0304 	and.w	r3, r3, #4
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d023      	beq.n	800ad14 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	699a      	ldr	r2, [r3, #24]
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	18d1      	adds	r1, r2, r3
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	683a      	ldr	r2, [r7, #0]
 800acd8:	6978      	ldr	r0, [r7, #20]
 800acda:	f000 f8d5 	bl	800ae88 <prvInsertTimerInActiveList>
 800acde:	4603      	mov	r3, r0
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d020      	beq.n	800ad26 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ace4:	2300      	movs	r3, #0
 800ace6:	9300      	str	r3, [sp, #0]
 800ace8:	2300      	movs	r3, #0
 800acea:	687a      	ldr	r2, [r7, #4]
 800acec:	2100      	movs	r1, #0
 800acee:	6978      	ldr	r0, [r7, #20]
 800acf0:	f7ff ff88 	bl	800ac04 <xTimerGenericCommand>
 800acf4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d114      	bne.n	800ad26 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800acfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad00:	f383 8811 	msr	BASEPRI, r3
 800ad04:	f3bf 8f6f 	isb	sy
 800ad08:	f3bf 8f4f 	dsb	sy
 800ad0c:	60fb      	str	r3, [r7, #12]
}
 800ad0e:	bf00      	nop
 800ad10:	bf00      	nop
 800ad12:	e7fd      	b.n	800ad10 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ad14:	697b      	ldr	r3, [r7, #20]
 800ad16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ad1a:	f023 0301 	bic.w	r3, r3, #1
 800ad1e:	b2da      	uxtb	r2, r3
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ad26:	697b      	ldr	r3, [r7, #20]
 800ad28:	6a1b      	ldr	r3, [r3, #32]
 800ad2a:	6978      	ldr	r0, [r7, #20]
 800ad2c:	4798      	blx	r3
}
 800ad2e:	bf00      	nop
 800ad30:	3718      	adds	r7, #24
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}
 800ad36:	bf00      	nop
 800ad38:	20000fc4 	.word	0x20000fc4

0800ad3c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b084      	sub	sp, #16
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ad44:	f107 0308 	add.w	r3, r7, #8
 800ad48:	4618      	mov	r0, r3
 800ad4a:	f000 f859 	bl	800ae00 <prvGetNextExpireTime>
 800ad4e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	4619      	mov	r1, r3
 800ad54:	68f8      	ldr	r0, [r7, #12]
 800ad56:	f000 f805 	bl	800ad64 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ad5a:	f000 f8d7 	bl	800af0c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ad5e:	bf00      	nop
 800ad60:	e7f0      	b.n	800ad44 <prvTimerTask+0x8>
	...

0800ad64 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b084      	sub	sp, #16
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
 800ad6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ad6e:	f7ff fa29 	bl	800a1c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ad72:	f107 0308 	add.w	r3, r7, #8
 800ad76:	4618      	mov	r0, r3
 800ad78:	f000 f866 	bl	800ae48 <prvSampleTimeNow>
 800ad7c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d130      	bne.n	800ade6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d10a      	bne.n	800ada0 <prvProcessTimerOrBlockTask+0x3c>
 800ad8a:	687a      	ldr	r2, [r7, #4]
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	429a      	cmp	r2, r3
 800ad90:	d806      	bhi.n	800ada0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ad92:	f7ff fa25 	bl	800a1e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ad96:	68f9      	ldr	r1, [r7, #12]
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f7ff ff81 	bl	800aca0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ad9e:	e024      	b.n	800adea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d008      	beq.n	800adb8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ada6:	4b13      	ldr	r3, [pc, #76]	@ (800adf4 <prvProcessTimerOrBlockTask+0x90>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d101      	bne.n	800adb4 <prvProcessTimerOrBlockTask+0x50>
 800adb0:	2301      	movs	r3, #1
 800adb2:	e000      	b.n	800adb6 <prvProcessTimerOrBlockTask+0x52>
 800adb4:	2300      	movs	r3, #0
 800adb6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800adb8:	4b0f      	ldr	r3, [pc, #60]	@ (800adf8 <prvProcessTimerOrBlockTask+0x94>)
 800adba:	6818      	ldr	r0, [r3, #0]
 800adbc:	687a      	ldr	r2, [r7, #4]
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	1ad3      	subs	r3, r2, r3
 800adc2:	683a      	ldr	r2, [r7, #0]
 800adc4:	4619      	mov	r1, r3
 800adc6:	f7fe ff65 	bl	8009c94 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800adca:	f7ff fa09 	bl	800a1e0 <xTaskResumeAll>
 800adce:	4603      	mov	r3, r0
 800add0:	2b00      	cmp	r3, #0
 800add2:	d10a      	bne.n	800adea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800add4:	4b09      	ldr	r3, [pc, #36]	@ (800adfc <prvProcessTimerOrBlockTask+0x98>)
 800add6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800adda:	601a      	str	r2, [r3, #0]
 800addc:	f3bf 8f4f 	dsb	sy
 800ade0:	f3bf 8f6f 	isb	sy
}
 800ade4:	e001      	b.n	800adea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ade6:	f7ff f9fb 	bl	800a1e0 <xTaskResumeAll>
}
 800adea:	bf00      	nop
 800adec:	3710      	adds	r7, #16
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}
 800adf2:	bf00      	nop
 800adf4:	20000fc8 	.word	0x20000fc8
 800adf8:	20000fcc 	.word	0x20000fcc
 800adfc:	e000ed04 	.word	0xe000ed04

0800ae00 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ae00:	b480      	push	{r7}
 800ae02:	b085      	sub	sp, #20
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ae08:	4b0e      	ldr	r3, [pc, #56]	@ (800ae44 <prvGetNextExpireTime+0x44>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d101      	bne.n	800ae16 <prvGetNextExpireTime+0x16>
 800ae12:	2201      	movs	r2, #1
 800ae14:	e000      	b.n	800ae18 <prvGetNextExpireTime+0x18>
 800ae16:	2200      	movs	r2, #0
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d105      	bne.n	800ae30 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ae24:	4b07      	ldr	r3, [pc, #28]	@ (800ae44 <prvGetNextExpireTime+0x44>)
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	68db      	ldr	r3, [r3, #12]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	60fb      	str	r3, [r7, #12]
 800ae2e:	e001      	b.n	800ae34 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ae30:	2300      	movs	r3, #0
 800ae32:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ae34:	68fb      	ldr	r3, [r7, #12]
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3714      	adds	r7, #20
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae40:	4770      	bx	lr
 800ae42:	bf00      	nop
 800ae44:	20000fc4 	.word	0x20000fc4

0800ae48 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b084      	sub	sp, #16
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ae50:	f7ff fa64 	bl	800a31c <xTaskGetTickCount>
 800ae54:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ae56:	4b0b      	ldr	r3, [pc, #44]	@ (800ae84 <prvSampleTimeNow+0x3c>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	68fa      	ldr	r2, [r7, #12]
 800ae5c:	429a      	cmp	r2, r3
 800ae5e:	d205      	bcs.n	800ae6c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ae60:	f000 f93a 	bl	800b0d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2201      	movs	r2, #1
 800ae68:	601a      	str	r2, [r3, #0]
 800ae6a:	e002      	b.n	800ae72 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ae72:	4a04      	ldr	r2, [pc, #16]	@ (800ae84 <prvSampleTimeNow+0x3c>)
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ae78:	68fb      	ldr	r3, [r7, #12]
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3710      	adds	r7, #16
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}
 800ae82:	bf00      	nop
 800ae84:	20000fd4 	.word	0x20000fd4

0800ae88 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b086      	sub	sp, #24
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	60f8      	str	r0, [r7, #12]
 800ae90:	60b9      	str	r1, [r7, #8]
 800ae92:	607a      	str	r2, [r7, #4]
 800ae94:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ae96:	2300      	movs	r3, #0
 800ae98:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	68ba      	ldr	r2, [r7, #8]
 800ae9e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	68fa      	ldr	r2, [r7, #12]
 800aea4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800aea6:	68ba      	ldr	r2, [r7, #8]
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	429a      	cmp	r2, r3
 800aeac:	d812      	bhi.n	800aed4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aeae:	687a      	ldr	r2, [r7, #4]
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	1ad2      	subs	r2, r2, r3
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	699b      	ldr	r3, [r3, #24]
 800aeb8:	429a      	cmp	r2, r3
 800aeba:	d302      	bcc.n	800aec2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800aebc:	2301      	movs	r3, #1
 800aebe:	617b      	str	r3, [r7, #20]
 800aec0:	e01b      	b.n	800aefa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800aec2:	4b10      	ldr	r3, [pc, #64]	@ (800af04 <prvInsertTimerInActiveList+0x7c>)
 800aec4:	681a      	ldr	r2, [r3, #0]
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	3304      	adds	r3, #4
 800aeca:	4619      	mov	r1, r3
 800aecc:	4610      	mov	r0, r2
 800aece:	f7fe f97c 	bl	80091ca <vListInsert>
 800aed2:	e012      	b.n	800aefa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800aed4:	687a      	ldr	r2, [r7, #4]
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	429a      	cmp	r2, r3
 800aeda:	d206      	bcs.n	800aeea <prvInsertTimerInActiveList+0x62>
 800aedc:	68ba      	ldr	r2, [r7, #8]
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d302      	bcc.n	800aeea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800aee4:	2301      	movs	r3, #1
 800aee6:	617b      	str	r3, [r7, #20]
 800aee8:	e007      	b.n	800aefa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aeea:	4b07      	ldr	r3, [pc, #28]	@ (800af08 <prvInsertTimerInActiveList+0x80>)
 800aeec:	681a      	ldr	r2, [r3, #0]
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	3304      	adds	r3, #4
 800aef2:	4619      	mov	r1, r3
 800aef4:	4610      	mov	r0, r2
 800aef6:	f7fe f968 	bl	80091ca <vListInsert>
		}
	}

	return xProcessTimerNow;
 800aefa:	697b      	ldr	r3, [r7, #20]
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	3718      	adds	r7, #24
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}
 800af04:	20000fc8 	.word	0x20000fc8
 800af08:	20000fc4 	.word	0x20000fc4

0800af0c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b08e      	sub	sp, #56	@ 0x38
 800af10:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800af12:	e0ce      	b.n	800b0b2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2b00      	cmp	r3, #0
 800af18:	da19      	bge.n	800af4e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800af1a:	1d3b      	adds	r3, r7, #4
 800af1c:	3304      	adds	r3, #4
 800af1e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800af20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af22:	2b00      	cmp	r3, #0
 800af24:	d10b      	bne.n	800af3e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800af26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af2a:	f383 8811 	msr	BASEPRI, r3
 800af2e:	f3bf 8f6f 	isb	sy
 800af32:	f3bf 8f4f 	dsb	sy
 800af36:	61fb      	str	r3, [r7, #28]
}
 800af38:	bf00      	nop
 800af3a:	bf00      	nop
 800af3c:	e7fd      	b.n	800af3a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800af3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800af44:	6850      	ldr	r0, [r2, #4]
 800af46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800af48:	6892      	ldr	r2, [r2, #8]
 800af4a:	4611      	mov	r1, r2
 800af4c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2b00      	cmp	r3, #0
 800af52:	f2c0 80ae 	blt.w	800b0b2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800af5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af5c:	695b      	ldr	r3, [r3, #20]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d004      	beq.n	800af6c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af64:	3304      	adds	r3, #4
 800af66:	4618      	mov	r0, r3
 800af68:	f7fe f968 	bl	800923c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800af6c:	463b      	mov	r3, r7
 800af6e:	4618      	mov	r0, r3
 800af70:	f7ff ff6a 	bl	800ae48 <prvSampleTimeNow>
 800af74:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2b09      	cmp	r3, #9
 800af7a:	f200 8097 	bhi.w	800b0ac <prvProcessReceivedCommands+0x1a0>
 800af7e:	a201      	add	r2, pc, #4	@ (adr r2, 800af84 <prvProcessReceivedCommands+0x78>)
 800af80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af84:	0800afad 	.word	0x0800afad
 800af88:	0800afad 	.word	0x0800afad
 800af8c:	0800afad 	.word	0x0800afad
 800af90:	0800b023 	.word	0x0800b023
 800af94:	0800b037 	.word	0x0800b037
 800af98:	0800b083 	.word	0x0800b083
 800af9c:	0800afad 	.word	0x0800afad
 800afa0:	0800afad 	.word	0x0800afad
 800afa4:	0800b023 	.word	0x0800b023
 800afa8:	0800b037 	.word	0x0800b037
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800afac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800afb2:	f043 0301 	orr.w	r3, r3, #1
 800afb6:	b2da      	uxtb	r2, r3
 800afb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800afbe:	68ba      	ldr	r2, [r7, #8]
 800afc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afc2:	699b      	ldr	r3, [r3, #24]
 800afc4:	18d1      	adds	r1, r2, r3
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800afca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800afcc:	f7ff ff5c 	bl	800ae88 <prvInsertTimerInActiveList>
 800afd0:	4603      	mov	r3, r0
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d06c      	beq.n	800b0b0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800afd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afd8:	6a1b      	ldr	r3, [r3, #32]
 800afda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800afdc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800afde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afe0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800afe4:	f003 0304 	and.w	r3, r3, #4
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d061      	beq.n	800b0b0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800afec:	68ba      	ldr	r2, [r7, #8]
 800afee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aff0:	699b      	ldr	r3, [r3, #24]
 800aff2:	441a      	add	r2, r3
 800aff4:	2300      	movs	r3, #0
 800aff6:	9300      	str	r3, [sp, #0]
 800aff8:	2300      	movs	r3, #0
 800affa:	2100      	movs	r1, #0
 800affc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800affe:	f7ff fe01 	bl	800ac04 <xTimerGenericCommand>
 800b002:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b004:	6a3b      	ldr	r3, [r7, #32]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d152      	bne.n	800b0b0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b00a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b00e:	f383 8811 	msr	BASEPRI, r3
 800b012:	f3bf 8f6f 	isb	sy
 800b016:	f3bf 8f4f 	dsb	sy
 800b01a:	61bb      	str	r3, [r7, #24]
}
 800b01c:	bf00      	nop
 800b01e:	bf00      	nop
 800b020:	e7fd      	b.n	800b01e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b024:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b028:	f023 0301 	bic.w	r3, r3, #1
 800b02c:	b2da      	uxtb	r2, r3
 800b02e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b030:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b034:	e03d      	b.n	800b0b2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b038:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b03c:	f043 0301 	orr.w	r3, r3, #1
 800b040:	b2da      	uxtb	r2, r3
 800b042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b044:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b048:	68ba      	ldr	r2, [r7, #8]
 800b04a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b04c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b04e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b050:	699b      	ldr	r3, [r3, #24]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d10b      	bne.n	800b06e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800b056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b05a:	f383 8811 	msr	BASEPRI, r3
 800b05e:	f3bf 8f6f 	isb	sy
 800b062:	f3bf 8f4f 	dsb	sy
 800b066:	617b      	str	r3, [r7, #20]
}
 800b068:	bf00      	nop
 800b06a:	bf00      	nop
 800b06c:	e7fd      	b.n	800b06a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b06e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b070:	699a      	ldr	r2, [r3, #24]
 800b072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b074:	18d1      	adds	r1, r2, r3
 800b076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b078:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b07a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b07c:	f7ff ff04 	bl	800ae88 <prvInsertTimerInActiveList>
					break;
 800b080:	e017      	b.n	800b0b2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b084:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b088:	f003 0302 	and.w	r3, r3, #2
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d103      	bne.n	800b098 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b090:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b092:	f000 fbe9 	bl	800b868 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b096:	e00c      	b.n	800b0b2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b09a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b09e:	f023 0301 	bic.w	r3, r3, #1
 800b0a2:	b2da      	uxtb	r2, r3
 800b0a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b0aa:	e002      	b.n	800b0b2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b0ac:	bf00      	nop
 800b0ae:	e000      	b.n	800b0b2 <prvProcessReceivedCommands+0x1a6>
					break;
 800b0b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b0b2:	4b08      	ldr	r3, [pc, #32]	@ (800b0d4 <prvProcessReceivedCommands+0x1c8>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	1d39      	adds	r1, r7, #4
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f7fe fbce 	bl	800985c <xQueueReceive>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	f47f af26 	bne.w	800af14 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b0c8:	bf00      	nop
 800b0ca:	bf00      	nop
 800b0cc:	3730      	adds	r7, #48	@ 0x30
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}
 800b0d2:	bf00      	nop
 800b0d4:	20000fcc 	.word	0x20000fcc

0800b0d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b088      	sub	sp, #32
 800b0dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b0de:	e049      	b.n	800b174 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b0e0:	4b2e      	ldr	r3, [pc, #184]	@ (800b19c <prvSwitchTimerLists+0xc4>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	68db      	ldr	r3, [r3, #12]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0ea:	4b2c      	ldr	r3, [pc, #176]	@ (800b19c <prvSwitchTimerLists+0xc4>)
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	68db      	ldr	r3, [r3, #12]
 800b0f0:	68db      	ldr	r3, [r3, #12]
 800b0f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	3304      	adds	r3, #4
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f7fe f89f 	bl	800923c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	6a1b      	ldr	r3, [r3, #32]
 800b102:	68f8      	ldr	r0, [r7, #12]
 800b104:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b10c:	f003 0304 	and.w	r3, r3, #4
 800b110:	2b00      	cmp	r3, #0
 800b112:	d02f      	beq.n	800b174 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	699b      	ldr	r3, [r3, #24]
 800b118:	693a      	ldr	r2, [r7, #16]
 800b11a:	4413      	add	r3, r2
 800b11c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b11e:	68ba      	ldr	r2, [r7, #8]
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	429a      	cmp	r2, r3
 800b124:	d90e      	bls.n	800b144 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	68ba      	ldr	r2, [r7, #8]
 800b12a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	68fa      	ldr	r2, [r7, #12]
 800b130:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b132:	4b1a      	ldr	r3, [pc, #104]	@ (800b19c <prvSwitchTimerLists+0xc4>)
 800b134:	681a      	ldr	r2, [r3, #0]
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	3304      	adds	r3, #4
 800b13a:	4619      	mov	r1, r3
 800b13c:	4610      	mov	r0, r2
 800b13e:	f7fe f844 	bl	80091ca <vListInsert>
 800b142:	e017      	b.n	800b174 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b144:	2300      	movs	r3, #0
 800b146:	9300      	str	r3, [sp, #0]
 800b148:	2300      	movs	r3, #0
 800b14a:	693a      	ldr	r2, [r7, #16]
 800b14c:	2100      	movs	r1, #0
 800b14e:	68f8      	ldr	r0, [r7, #12]
 800b150:	f7ff fd58 	bl	800ac04 <xTimerGenericCommand>
 800b154:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d10b      	bne.n	800b174 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b15c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b160:	f383 8811 	msr	BASEPRI, r3
 800b164:	f3bf 8f6f 	isb	sy
 800b168:	f3bf 8f4f 	dsb	sy
 800b16c:	603b      	str	r3, [r7, #0]
}
 800b16e:	bf00      	nop
 800b170:	bf00      	nop
 800b172:	e7fd      	b.n	800b170 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b174:	4b09      	ldr	r3, [pc, #36]	@ (800b19c <prvSwitchTimerLists+0xc4>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d1b0      	bne.n	800b0e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b17e:	4b07      	ldr	r3, [pc, #28]	@ (800b19c <prvSwitchTimerLists+0xc4>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b184:	4b06      	ldr	r3, [pc, #24]	@ (800b1a0 <prvSwitchTimerLists+0xc8>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	4a04      	ldr	r2, [pc, #16]	@ (800b19c <prvSwitchTimerLists+0xc4>)
 800b18a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b18c:	4a04      	ldr	r2, [pc, #16]	@ (800b1a0 <prvSwitchTimerLists+0xc8>)
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	6013      	str	r3, [r2, #0]
}
 800b192:	bf00      	nop
 800b194:	3718      	adds	r7, #24
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}
 800b19a:	bf00      	nop
 800b19c:	20000fc4 	.word	0x20000fc4
 800b1a0:	20000fc8 	.word	0x20000fc8

0800b1a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b082      	sub	sp, #8
 800b1a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b1aa:	f000 f96d 	bl	800b488 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b1ae:	4b15      	ldr	r3, [pc, #84]	@ (800b204 <prvCheckForValidListAndQueue+0x60>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d120      	bne.n	800b1f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b1b6:	4814      	ldr	r0, [pc, #80]	@ (800b208 <prvCheckForValidListAndQueue+0x64>)
 800b1b8:	f7fd ffb6 	bl	8009128 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b1bc:	4813      	ldr	r0, [pc, #76]	@ (800b20c <prvCheckForValidListAndQueue+0x68>)
 800b1be:	f7fd ffb3 	bl	8009128 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b1c2:	4b13      	ldr	r3, [pc, #76]	@ (800b210 <prvCheckForValidListAndQueue+0x6c>)
 800b1c4:	4a10      	ldr	r2, [pc, #64]	@ (800b208 <prvCheckForValidListAndQueue+0x64>)
 800b1c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b1c8:	4b12      	ldr	r3, [pc, #72]	@ (800b214 <prvCheckForValidListAndQueue+0x70>)
 800b1ca:	4a10      	ldr	r2, [pc, #64]	@ (800b20c <prvCheckForValidListAndQueue+0x68>)
 800b1cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	9300      	str	r3, [sp, #0]
 800b1d2:	4b11      	ldr	r3, [pc, #68]	@ (800b218 <prvCheckForValidListAndQueue+0x74>)
 800b1d4:	4a11      	ldr	r2, [pc, #68]	@ (800b21c <prvCheckForValidListAndQueue+0x78>)
 800b1d6:	2110      	movs	r1, #16
 800b1d8:	200a      	movs	r0, #10
 800b1da:	f7fe f8c3 	bl	8009364 <xQueueGenericCreateStatic>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	4a08      	ldr	r2, [pc, #32]	@ (800b204 <prvCheckForValidListAndQueue+0x60>)
 800b1e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b1e4:	4b07      	ldr	r3, [pc, #28]	@ (800b204 <prvCheckForValidListAndQueue+0x60>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d005      	beq.n	800b1f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b1ec:	4b05      	ldr	r3, [pc, #20]	@ (800b204 <prvCheckForValidListAndQueue+0x60>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	490b      	ldr	r1, [pc, #44]	@ (800b220 <prvCheckForValidListAndQueue+0x7c>)
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f7fe fd24 	bl	8009c40 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b1f8:	f000 f978 	bl	800b4ec <vPortExitCritical>
}
 800b1fc:	bf00      	nop
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}
 800b202:	bf00      	nop
 800b204:	20000fcc 	.word	0x20000fcc
 800b208:	20000f9c 	.word	0x20000f9c
 800b20c:	20000fb0 	.word	0x20000fb0
 800b210:	20000fc4 	.word	0x20000fc4
 800b214:	20000fc8 	.word	0x20000fc8
 800b218:	20001078 	.word	0x20001078
 800b21c:	20000fd8 	.word	0x20000fd8
 800b220:	0800c738 	.word	0x0800c738

0800b224 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b224:	b480      	push	{r7}
 800b226:	b085      	sub	sp, #20
 800b228:	af00      	add	r7, sp, #0
 800b22a:	60f8      	str	r0, [r7, #12]
 800b22c:	60b9      	str	r1, [r7, #8]
 800b22e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	3b04      	subs	r3, #4
 800b234:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b23c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	3b04      	subs	r3, #4
 800b242:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	f023 0201 	bic.w	r2, r3, #1
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	3b04      	subs	r3, #4
 800b252:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b254:	4a0c      	ldr	r2, [pc, #48]	@ (800b288 <pxPortInitialiseStack+0x64>)
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	3b14      	subs	r3, #20
 800b25e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b260:	687a      	ldr	r2, [r7, #4]
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	3b04      	subs	r3, #4
 800b26a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	f06f 0202 	mvn.w	r2, #2
 800b272:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	3b20      	subs	r3, #32
 800b278:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b27a:	68fb      	ldr	r3, [r7, #12]
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3714      	adds	r7, #20
 800b280:	46bd      	mov	sp, r7
 800b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b286:	4770      	bx	lr
 800b288:	0800b28d 	.word	0x0800b28d

0800b28c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b28c:	b480      	push	{r7}
 800b28e:	b085      	sub	sp, #20
 800b290:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b292:	2300      	movs	r3, #0
 800b294:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b296:	4b13      	ldr	r3, [pc, #76]	@ (800b2e4 <prvTaskExitError+0x58>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b29e:	d00b      	beq.n	800b2b8 <prvTaskExitError+0x2c>
	__asm volatile
 800b2a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2a4:	f383 8811 	msr	BASEPRI, r3
 800b2a8:	f3bf 8f6f 	isb	sy
 800b2ac:	f3bf 8f4f 	dsb	sy
 800b2b0:	60fb      	str	r3, [r7, #12]
}
 800b2b2:	bf00      	nop
 800b2b4:	bf00      	nop
 800b2b6:	e7fd      	b.n	800b2b4 <prvTaskExitError+0x28>
	__asm volatile
 800b2b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2bc:	f383 8811 	msr	BASEPRI, r3
 800b2c0:	f3bf 8f6f 	isb	sy
 800b2c4:	f3bf 8f4f 	dsb	sy
 800b2c8:	60bb      	str	r3, [r7, #8]
}
 800b2ca:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b2cc:	bf00      	nop
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d0fc      	beq.n	800b2ce <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b2d4:	bf00      	nop
 800b2d6:	bf00      	nop
 800b2d8:	3714      	adds	r7, #20
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e0:	4770      	bx	lr
 800b2e2:	bf00      	nop
 800b2e4:	20000098 	.word	0x20000098
	...

0800b2f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b2f0:	4b07      	ldr	r3, [pc, #28]	@ (800b310 <pxCurrentTCBConst2>)
 800b2f2:	6819      	ldr	r1, [r3, #0]
 800b2f4:	6808      	ldr	r0, [r1, #0]
 800b2f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2fa:	f380 8809 	msr	PSP, r0
 800b2fe:	f3bf 8f6f 	isb	sy
 800b302:	f04f 0000 	mov.w	r0, #0
 800b306:	f380 8811 	msr	BASEPRI, r0
 800b30a:	4770      	bx	lr
 800b30c:	f3af 8000 	nop.w

0800b310 <pxCurrentTCBConst2>:
 800b310:	20000a9c 	.word	0x20000a9c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b314:	bf00      	nop
 800b316:	bf00      	nop

0800b318 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b318:	4808      	ldr	r0, [pc, #32]	@ (800b33c <prvPortStartFirstTask+0x24>)
 800b31a:	6800      	ldr	r0, [r0, #0]
 800b31c:	6800      	ldr	r0, [r0, #0]
 800b31e:	f380 8808 	msr	MSP, r0
 800b322:	f04f 0000 	mov.w	r0, #0
 800b326:	f380 8814 	msr	CONTROL, r0
 800b32a:	b662      	cpsie	i
 800b32c:	b661      	cpsie	f
 800b32e:	f3bf 8f4f 	dsb	sy
 800b332:	f3bf 8f6f 	isb	sy
 800b336:	df00      	svc	0
 800b338:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b33a:	bf00      	nop
 800b33c:	e000ed08 	.word	0xe000ed08

0800b340 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b086      	sub	sp, #24
 800b344:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b346:	4b47      	ldr	r3, [pc, #284]	@ (800b464 <xPortStartScheduler+0x124>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	4a47      	ldr	r2, [pc, #284]	@ (800b468 <xPortStartScheduler+0x128>)
 800b34c:	4293      	cmp	r3, r2
 800b34e:	d10b      	bne.n	800b368 <xPortStartScheduler+0x28>
	__asm volatile
 800b350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b354:	f383 8811 	msr	BASEPRI, r3
 800b358:	f3bf 8f6f 	isb	sy
 800b35c:	f3bf 8f4f 	dsb	sy
 800b360:	613b      	str	r3, [r7, #16]
}
 800b362:	bf00      	nop
 800b364:	bf00      	nop
 800b366:	e7fd      	b.n	800b364 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b368:	4b3e      	ldr	r3, [pc, #248]	@ (800b464 <xPortStartScheduler+0x124>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	4a3f      	ldr	r2, [pc, #252]	@ (800b46c <xPortStartScheduler+0x12c>)
 800b36e:	4293      	cmp	r3, r2
 800b370:	d10b      	bne.n	800b38a <xPortStartScheduler+0x4a>
	__asm volatile
 800b372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b376:	f383 8811 	msr	BASEPRI, r3
 800b37a:	f3bf 8f6f 	isb	sy
 800b37e:	f3bf 8f4f 	dsb	sy
 800b382:	60fb      	str	r3, [r7, #12]
}
 800b384:	bf00      	nop
 800b386:	bf00      	nop
 800b388:	e7fd      	b.n	800b386 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b38a:	4b39      	ldr	r3, [pc, #228]	@ (800b470 <xPortStartScheduler+0x130>)
 800b38c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	781b      	ldrb	r3, [r3, #0]
 800b392:	b2db      	uxtb	r3, r3
 800b394:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b396:	697b      	ldr	r3, [r7, #20]
 800b398:	22ff      	movs	r2, #255	@ 0xff
 800b39a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b39c:	697b      	ldr	r3, [r7, #20]
 800b39e:	781b      	ldrb	r3, [r3, #0]
 800b3a0:	b2db      	uxtb	r3, r3
 800b3a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b3a4:	78fb      	ldrb	r3, [r7, #3]
 800b3a6:	b2db      	uxtb	r3, r3
 800b3a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b3ac:	b2da      	uxtb	r2, r3
 800b3ae:	4b31      	ldr	r3, [pc, #196]	@ (800b474 <xPortStartScheduler+0x134>)
 800b3b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b3b2:	4b31      	ldr	r3, [pc, #196]	@ (800b478 <xPortStartScheduler+0x138>)
 800b3b4:	2207      	movs	r2, #7
 800b3b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b3b8:	e009      	b.n	800b3ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b3ba:	4b2f      	ldr	r3, [pc, #188]	@ (800b478 <xPortStartScheduler+0x138>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	3b01      	subs	r3, #1
 800b3c0:	4a2d      	ldr	r2, [pc, #180]	@ (800b478 <xPortStartScheduler+0x138>)
 800b3c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b3c4:	78fb      	ldrb	r3, [r7, #3]
 800b3c6:	b2db      	uxtb	r3, r3
 800b3c8:	005b      	lsls	r3, r3, #1
 800b3ca:	b2db      	uxtb	r3, r3
 800b3cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b3ce:	78fb      	ldrb	r3, [r7, #3]
 800b3d0:	b2db      	uxtb	r3, r3
 800b3d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b3d6:	2b80      	cmp	r3, #128	@ 0x80
 800b3d8:	d0ef      	beq.n	800b3ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b3da:	4b27      	ldr	r3, [pc, #156]	@ (800b478 <xPortStartScheduler+0x138>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f1c3 0307 	rsb	r3, r3, #7
 800b3e2:	2b04      	cmp	r3, #4
 800b3e4:	d00b      	beq.n	800b3fe <xPortStartScheduler+0xbe>
	__asm volatile
 800b3e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3ea:	f383 8811 	msr	BASEPRI, r3
 800b3ee:	f3bf 8f6f 	isb	sy
 800b3f2:	f3bf 8f4f 	dsb	sy
 800b3f6:	60bb      	str	r3, [r7, #8]
}
 800b3f8:	bf00      	nop
 800b3fa:	bf00      	nop
 800b3fc:	e7fd      	b.n	800b3fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b3fe:	4b1e      	ldr	r3, [pc, #120]	@ (800b478 <xPortStartScheduler+0x138>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	021b      	lsls	r3, r3, #8
 800b404:	4a1c      	ldr	r2, [pc, #112]	@ (800b478 <xPortStartScheduler+0x138>)
 800b406:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b408:	4b1b      	ldr	r3, [pc, #108]	@ (800b478 <xPortStartScheduler+0x138>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b410:	4a19      	ldr	r2, [pc, #100]	@ (800b478 <xPortStartScheduler+0x138>)
 800b412:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	b2da      	uxtb	r2, r3
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b41c:	4b17      	ldr	r3, [pc, #92]	@ (800b47c <xPortStartScheduler+0x13c>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	4a16      	ldr	r2, [pc, #88]	@ (800b47c <xPortStartScheduler+0x13c>)
 800b422:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b426:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b428:	4b14      	ldr	r3, [pc, #80]	@ (800b47c <xPortStartScheduler+0x13c>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	4a13      	ldr	r2, [pc, #76]	@ (800b47c <xPortStartScheduler+0x13c>)
 800b42e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b432:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b434:	f000 f8da 	bl	800b5ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b438:	4b11      	ldr	r3, [pc, #68]	@ (800b480 <xPortStartScheduler+0x140>)
 800b43a:	2200      	movs	r2, #0
 800b43c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b43e:	f000 f8f9 	bl	800b634 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b442:	4b10      	ldr	r3, [pc, #64]	@ (800b484 <xPortStartScheduler+0x144>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	4a0f      	ldr	r2, [pc, #60]	@ (800b484 <xPortStartScheduler+0x144>)
 800b448:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b44c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b44e:	f7ff ff63 	bl	800b318 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b452:	f7ff f82d 	bl	800a4b0 <vTaskSwitchContext>
	prvTaskExitError();
 800b456:	f7ff ff19 	bl	800b28c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b45a:	2300      	movs	r3, #0
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	3718      	adds	r7, #24
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}
 800b464:	e000ed00 	.word	0xe000ed00
 800b468:	410fc271 	.word	0x410fc271
 800b46c:	410fc270 	.word	0x410fc270
 800b470:	e000e400 	.word	0xe000e400
 800b474:	200010c8 	.word	0x200010c8
 800b478:	200010cc 	.word	0x200010cc
 800b47c:	e000ed20 	.word	0xe000ed20
 800b480:	20000098 	.word	0x20000098
 800b484:	e000ef34 	.word	0xe000ef34

0800b488 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b488:	b480      	push	{r7}
 800b48a:	b083      	sub	sp, #12
 800b48c:	af00      	add	r7, sp, #0
	__asm volatile
 800b48e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b492:	f383 8811 	msr	BASEPRI, r3
 800b496:	f3bf 8f6f 	isb	sy
 800b49a:	f3bf 8f4f 	dsb	sy
 800b49e:	607b      	str	r3, [r7, #4]
}
 800b4a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b4a2:	4b10      	ldr	r3, [pc, #64]	@ (800b4e4 <vPortEnterCritical+0x5c>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	3301      	adds	r3, #1
 800b4a8:	4a0e      	ldr	r2, [pc, #56]	@ (800b4e4 <vPortEnterCritical+0x5c>)
 800b4aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b4ac:	4b0d      	ldr	r3, [pc, #52]	@ (800b4e4 <vPortEnterCritical+0x5c>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	2b01      	cmp	r3, #1
 800b4b2:	d110      	bne.n	800b4d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b4b4:	4b0c      	ldr	r3, [pc, #48]	@ (800b4e8 <vPortEnterCritical+0x60>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	b2db      	uxtb	r3, r3
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d00b      	beq.n	800b4d6 <vPortEnterCritical+0x4e>
	__asm volatile
 800b4be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4c2:	f383 8811 	msr	BASEPRI, r3
 800b4c6:	f3bf 8f6f 	isb	sy
 800b4ca:	f3bf 8f4f 	dsb	sy
 800b4ce:	603b      	str	r3, [r7, #0]
}
 800b4d0:	bf00      	nop
 800b4d2:	bf00      	nop
 800b4d4:	e7fd      	b.n	800b4d2 <vPortEnterCritical+0x4a>
	}
}
 800b4d6:	bf00      	nop
 800b4d8:	370c      	adds	r7, #12
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e0:	4770      	bx	lr
 800b4e2:	bf00      	nop
 800b4e4:	20000098 	.word	0x20000098
 800b4e8:	e000ed04 	.word	0xe000ed04

0800b4ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b083      	sub	sp, #12
 800b4f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b4f2:	4b12      	ldr	r3, [pc, #72]	@ (800b53c <vPortExitCritical+0x50>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d10b      	bne.n	800b512 <vPortExitCritical+0x26>
	__asm volatile
 800b4fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4fe:	f383 8811 	msr	BASEPRI, r3
 800b502:	f3bf 8f6f 	isb	sy
 800b506:	f3bf 8f4f 	dsb	sy
 800b50a:	607b      	str	r3, [r7, #4]
}
 800b50c:	bf00      	nop
 800b50e:	bf00      	nop
 800b510:	e7fd      	b.n	800b50e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b512:	4b0a      	ldr	r3, [pc, #40]	@ (800b53c <vPortExitCritical+0x50>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	3b01      	subs	r3, #1
 800b518:	4a08      	ldr	r2, [pc, #32]	@ (800b53c <vPortExitCritical+0x50>)
 800b51a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b51c:	4b07      	ldr	r3, [pc, #28]	@ (800b53c <vPortExitCritical+0x50>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d105      	bne.n	800b530 <vPortExitCritical+0x44>
 800b524:	2300      	movs	r3, #0
 800b526:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	f383 8811 	msr	BASEPRI, r3
}
 800b52e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b530:	bf00      	nop
 800b532:	370c      	adds	r7, #12
 800b534:	46bd      	mov	sp, r7
 800b536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53a:	4770      	bx	lr
 800b53c:	20000098 	.word	0x20000098

0800b540 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b540:	f3ef 8009 	mrs	r0, PSP
 800b544:	f3bf 8f6f 	isb	sy
 800b548:	4b15      	ldr	r3, [pc, #84]	@ (800b5a0 <pxCurrentTCBConst>)
 800b54a:	681a      	ldr	r2, [r3, #0]
 800b54c:	f01e 0f10 	tst.w	lr, #16
 800b550:	bf08      	it	eq
 800b552:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b556:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b55a:	6010      	str	r0, [r2, #0]
 800b55c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b560:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b564:	f380 8811 	msr	BASEPRI, r0
 800b568:	f3bf 8f4f 	dsb	sy
 800b56c:	f3bf 8f6f 	isb	sy
 800b570:	f7fe ff9e 	bl	800a4b0 <vTaskSwitchContext>
 800b574:	f04f 0000 	mov.w	r0, #0
 800b578:	f380 8811 	msr	BASEPRI, r0
 800b57c:	bc09      	pop	{r0, r3}
 800b57e:	6819      	ldr	r1, [r3, #0]
 800b580:	6808      	ldr	r0, [r1, #0]
 800b582:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b586:	f01e 0f10 	tst.w	lr, #16
 800b58a:	bf08      	it	eq
 800b58c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b590:	f380 8809 	msr	PSP, r0
 800b594:	f3bf 8f6f 	isb	sy
 800b598:	4770      	bx	lr
 800b59a:	bf00      	nop
 800b59c:	f3af 8000 	nop.w

0800b5a0 <pxCurrentTCBConst>:
 800b5a0:	20000a9c 	.word	0x20000a9c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b5a4:	bf00      	nop
 800b5a6:	bf00      	nop

0800b5a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b082      	sub	sp, #8
 800b5ac:	af00      	add	r7, sp, #0
	__asm volatile
 800b5ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5b2:	f383 8811 	msr	BASEPRI, r3
 800b5b6:	f3bf 8f6f 	isb	sy
 800b5ba:	f3bf 8f4f 	dsb	sy
 800b5be:	607b      	str	r3, [r7, #4]
}
 800b5c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b5c2:	f7fe febb 	bl	800a33c <xTaskIncrementTick>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d003      	beq.n	800b5d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b5cc:	4b06      	ldr	r3, [pc, #24]	@ (800b5e8 <xPortSysTickHandler+0x40>)
 800b5ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b5d2:	601a      	str	r2, [r3, #0]
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	f383 8811 	msr	BASEPRI, r3
}
 800b5de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b5e0:	bf00      	nop
 800b5e2:	3708      	adds	r7, #8
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}
 800b5e8:	e000ed04 	.word	0xe000ed04

0800b5ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b5f0:	4b0b      	ldr	r3, [pc, #44]	@ (800b620 <vPortSetupTimerInterrupt+0x34>)
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b5f6:	4b0b      	ldr	r3, [pc, #44]	@ (800b624 <vPortSetupTimerInterrupt+0x38>)
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b5fc:	4b0a      	ldr	r3, [pc, #40]	@ (800b628 <vPortSetupTimerInterrupt+0x3c>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	4a0a      	ldr	r2, [pc, #40]	@ (800b62c <vPortSetupTimerInterrupt+0x40>)
 800b602:	fba2 2303 	umull	r2, r3, r2, r3
 800b606:	099b      	lsrs	r3, r3, #6
 800b608:	4a09      	ldr	r2, [pc, #36]	@ (800b630 <vPortSetupTimerInterrupt+0x44>)
 800b60a:	3b01      	subs	r3, #1
 800b60c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b60e:	4b04      	ldr	r3, [pc, #16]	@ (800b620 <vPortSetupTimerInterrupt+0x34>)
 800b610:	2207      	movs	r2, #7
 800b612:	601a      	str	r2, [r3, #0]
}
 800b614:	bf00      	nop
 800b616:	46bd      	mov	sp, r7
 800b618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61c:	4770      	bx	lr
 800b61e:	bf00      	nop
 800b620:	e000e010 	.word	0xe000e010
 800b624:	e000e018 	.word	0xe000e018
 800b628:	20000000 	.word	0x20000000
 800b62c:	10624dd3 	.word	0x10624dd3
 800b630:	e000e014 	.word	0xe000e014

0800b634 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b634:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b644 <vPortEnableVFP+0x10>
 800b638:	6801      	ldr	r1, [r0, #0]
 800b63a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b63e:	6001      	str	r1, [r0, #0]
 800b640:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b642:	bf00      	nop
 800b644:	e000ed88 	.word	0xe000ed88

0800b648 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b648:	b480      	push	{r7}
 800b64a:	b085      	sub	sp, #20
 800b64c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b64e:	f3ef 8305 	mrs	r3, IPSR
 800b652:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	2b0f      	cmp	r3, #15
 800b658:	d915      	bls.n	800b686 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b65a:	4a18      	ldr	r2, [pc, #96]	@ (800b6bc <vPortValidateInterruptPriority+0x74>)
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	4413      	add	r3, r2
 800b660:	781b      	ldrb	r3, [r3, #0]
 800b662:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b664:	4b16      	ldr	r3, [pc, #88]	@ (800b6c0 <vPortValidateInterruptPriority+0x78>)
 800b666:	781b      	ldrb	r3, [r3, #0]
 800b668:	7afa      	ldrb	r2, [r7, #11]
 800b66a:	429a      	cmp	r2, r3
 800b66c:	d20b      	bcs.n	800b686 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b66e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b672:	f383 8811 	msr	BASEPRI, r3
 800b676:	f3bf 8f6f 	isb	sy
 800b67a:	f3bf 8f4f 	dsb	sy
 800b67e:	607b      	str	r3, [r7, #4]
}
 800b680:	bf00      	nop
 800b682:	bf00      	nop
 800b684:	e7fd      	b.n	800b682 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b686:	4b0f      	ldr	r3, [pc, #60]	@ (800b6c4 <vPortValidateInterruptPriority+0x7c>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b68e:	4b0e      	ldr	r3, [pc, #56]	@ (800b6c8 <vPortValidateInterruptPriority+0x80>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	429a      	cmp	r2, r3
 800b694:	d90b      	bls.n	800b6ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b69a:	f383 8811 	msr	BASEPRI, r3
 800b69e:	f3bf 8f6f 	isb	sy
 800b6a2:	f3bf 8f4f 	dsb	sy
 800b6a6:	603b      	str	r3, [r7, #0]
}
 800b6a8:	bf00      	nop
 800b6aa:	bf00      	nop
 800b6ac:	e7fd      	b.n	800b6aa <vPortValidateInterruptPriority+0x62>
	}
 800b6ae:	bf00      	nop
 800b6b0:	3714      	adds	r7, #20
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b8:	4770      	bx	lr
 800b6ba:	bf00      	nop
 800b6bc:	e000e3f0 	.word	0xe000e3f0
 800b6c0:	200010c8 	.word	0x200010c8
 800b6c4:	e000ed0c 	.word	0xe000ed0c
 800b6c8:	200010cc 	.word	0x200010cc

0800b6cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b08a      	sub	sp, #40	@ 0x28
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b6d8:	f7fe fd74 	bl	800a1c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b6dc:	4b5c      	ldr	r3, [pc, #368]	@ (800b850 <pvPortMalloc+0x184>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d101      	bne.n	800b6e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b6e4:	f000 f924 	bl	800b930 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b6e8:	4b5a      	ldr	r3, [pc, #360]	@ (800b854 <pvPortMalloc+0x188>)
 800b6ea:	681a      	ldr	r2, [r3, #0]
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	4013      	ands	r3, r2
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	f040 8095 	bne.w	800b820 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d01e      	beq.n	800b73a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b6fc:	2208      	movs	r2, #8
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	4413      	add	r3, r2
 800b702:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f003 0307 	and.w	r3, r3, #7
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d015      	beq.n	800b73a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f023 0307 	bic.w	r3, r3, #7
 800b714:	3308      	adds	r3, #8
 800b716:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	f003 0307 	and.w	r3, r3, #7
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d00b      	beq.n	800b73a <pvPortMalloc+0x6e>
	__asm volatile
 800b722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b726:	f383 8811 	msr	BASEPRI, r3
 800b72a:	f3bf 8f6f 	isb	sy
 800b72e:	f3bf 8f4f 	dsb	sy
 800b732:	617b      	str	r3, [r7, #20]
}
 800b734:	bf00      	nop
 800b736:	bf00      	nop
 800b738:	e7fd      	b.n	800b736 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d06f      	beq.n	800b820 <pvPortMalloc+0x154>
 800b740:	4b45      	ldr	r3, [pc, #276]	@ (800b858 <pvPortMalloc+0x18c>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	687a      	ldr	r2, [r7, #4]
 800b746:	429a      	cmp	r2, r3
 800b748:	d86a      	bhi.n	800b820 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b74a:	4b44      	ldr	r3, [pc, #272]	@ (800b85c <pvPortMalloc+0x190>)
 800b74c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b74e:	4b43      	ldr	r3, [pc, #268]	@ (800b85c <pvPortMalloc+0x190>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b754:	e004      	b.n	800b760 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b758:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b75a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b762:	685b      	ldr	r3, [r3, #4]
 800b764:	687a      	ldr	r2, [r7, #4]
 800b766:	429a      	cmp	r2, r3
 800b768:	d903      	bls.n	800b772 <pvPortMalloc+0xa6>
 800b76a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d1f1      	bne.n	800b756 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b772:	4b37      	ldr	r3, [pc, #220]	@ (800b850 <pvPortMalloc+0x184>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b778:	429a      	cmp	r2, r3
 800b77a:	d051      	beq.n	800b820 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b77c:	6a3b      	ldr	r3, [r7, #32]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	2208      	movs	r2, #8
 800b782:	4413      	add	r3, r2
 800b784:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b788:	681a      	ldr	r2, [r3, #0]
 800b78a:	6a3b      	ldr	r3, [r7, #32]
 800b78c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b78e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b790:	685a      	ldr	r2, [r3, #4]
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	1ad2      	subs	r2, r2, r3
 800b796:	2308      	movs	r3, #8
 800b798:	005b      	lsls	r3, r3, #1
 800b79a:	429a      	cmp	r2, r3
 800b79c:	d920      	bls.n	800b7e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b79e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	4413      	add	r3, r2
 800b7a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b7a6:	69bb      	ldr	r3, [r7, #24]
 800b7a8:	f003 0307 	and.w	r3, r3, #7
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d00b      	beq.n	800b7c8 <pvPortMalloc+0xfc>
	__asm volatile
 800b7b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7b4:	f383 8811 	msr	BASEPRI, r3
 800b7b8:	f3bf 8f6f 	isb	sy
 800b7bc:	f3bf 8f4f 	dsb	sy
 800b7c0:	613b      	str	r3, [r7, #16]
}
 800b7c2:	bf00      	nop
 800b7c4:	bf00      	nop
 800b7c6:	e7fd      	b.n	800b7c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b7c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7ca:	685a      	ldr	r2, [r3, #4]
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	1ad2      	subs	r2, r2, r3
 800b7d0:	69bb      	ldr	r3, [r7, #24]
 800b7d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b7d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7d6:	687a      	ldr	r2, [r7, #4]
 800b7d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b7da:	69b8      	ldr	r0, [r7, #24]
 800b7dc:	f000 f90a 	bl	800b9f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b7e0:	4b1d      	ldr	r3, [pc, #116]	@ (800b858 <pvPortMalloc+0x18c>)
 800b7e2:	681a      	ldr	r2, [r3, #0]
 800b7e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7e6:	685b      	ldr	r3, [r3, #4]
 800b7e8:	1ad3      	subs	r3, r2, r3
 800b7ea:	4a1b      	ldr	r2, [pc, #108]	@ (800b858 <pvPortMalloc+0x18c>)
 800b7ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b7ee:	4b1a      	ldr	r3, [pc, #104]	@ (800b858 <pvPortMalloc+0x18c>)
 800b7f0:	681a      	ldr	r2, [r3, #0]
 800b7f2:	4b1b      	ldr	r3, [pc, #108]	@ (800b860 <pvPortMalloc+0x194>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	429a      	cmp	r2, r3
 800b7f8:	d203      	bcs.n	800b802 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b7fa:	4b17      	ldr	r3, [pc, #92]	@ (800b858 <pvPortMalloc+0x18c>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	4a18      	ldr	r2, [pc, #96]	@ (800b860 <pvPortMalloc+0x194>)
 800b800:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b804:	685a      	ldr	r2, [r3, #4]
 800b806:	4b13      	ldr	r3, [pc, #76]	@ (800b854 <pvPortMalloc+0x188>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	431a      	orrs	r2, r3
 800b80c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b80e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b812:	2200      	movs	r2, #0
 800b814:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b816:	4b13      	ldr	r3, [pc, #76]	@ (800b864 <pvPortMalloc+0x198>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	3301      	adds	r3, #1
 800b81c:	4a11      	ldr	r2, [pc, #68]	@ (800b864 <pvPortMalloc+0x198>)
 800b81e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b820:	f7fe fcde 	bl	800a1e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b824:	69fb      	ldr	r3, [r7, #28]
 800b826:	f003 0307 	and.w	r3, r3, #7
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d00b      	beq.n	800b846 <pvPortMalloc+0x17a>
	__asm volatile
 800b82e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b832:	f383 8811 	msr	BASEPRI, r3
 800b836:	f3bf 8f6f 	isb	sy
 800b83a:	f3bf 8f4f 	dsb	sy
 800b83e:	60fb      	str	r3, [r7, #12]
}
 800b840:	bf00      	nop
 800b842:	bf00      	nop
 800b844:	e7fd      	b.n	800b842 <pvPortMalloc+0x176>
	return pvReturn;
 800b846:	69fb      	ldr	r3, [r7, #28]
}
 800b848:	4618      	mov	r0, r3
 800b84a:	3728      	adds	r7, #40	@ 0x28
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}
 800b850:	20004cd8 	.word	0x20004cd8
 800b854:	20004cec 	.word	0x20004cec
 800b858:	20004cdc 	.word	0x20004cdc
 800b85c:	20004cd0 	.word	0x20004cd0
 800b860:	20004ce0 	.word	0x20004ce0
 800b864:	20004ce4 	.word	0x20004ce4

0800b868 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b086      	sub	sp, #24
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d04f      	beq.n	800b91a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b87a:	2308      	movs	r3, #8
 800b87c:	425b      	negs	r3, r3
 800b87e:	697a      	ldr	r2, [r7, #20]
 800b880:	4413      	add	r3, r2
 800b882:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b888:	693b      	ldr	r3, [r7, #16]
 800b88a:	685a      	ldr	r2, [r3, #4]
 800b88c:	4b25      	ldr	r3, [pc, #148]	@ (800b924 <vPortFree+0xbc>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	4013      	ands	r3, r2
 800b892:	2b00      	cmp	r3, #0
 800b894:	d10b      	bne.n	800b8ae <vPortFree+0x46>
	__asm volatile
 800b896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b89a:	f383 8811 	msr	BASEPRI, r3
 800b89e:	f3bf 8f6f 	isb	sy
 800b8a2:	f3bf 8f4f 	dsb	sy
 800b8a6:	60fb      	str	r3, [r7, #12]
}
 800b8a8:	bf00      	nop
 800b8aa:	bf00      	nop
 800b8ac:	e7fd      	b.n	800b8aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b8ae:	693b      	ldr	r3, [r7, #16]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d00b      	beq.n	800b8ce <vPortFree+0x66>
	__asm volatile
 800b8b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8ba:	f383 8811 	msr	BASEPRI, r3
 800b8be:	f3bf 8f6f 	isb	sy
 800b8c2:	f3bf 8f4f 	dsb	sy
 800b8c6:	60bb      	str	r3, [r7, #8]
}
 800b8c8:	bf00      	nop
 800b8ca:	bf00      	nop
 800b8cc:	e7fd      	b.n	800b8ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b8ce:	693b      	ldr	r3, [r7, #16]
 800b8d0:	685a      	ldr	r2, [r3, #4]
 800b8d2:	4b14      	ldr	r3, [pc, #80]	@ (800b924 <vPortFree+0xbc>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	4013      	ands	r3, r2
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d01e      	beq.n	800b91a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b8dc:	693b      	ldr	r3, [r7, #16]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d11a      	bne.n	800b91a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b8e4:	693b      	ldr	r3, [r7, #16]
 800b8e6:	685a      	ldr	r2, [r3, #4]
 800b8e8:	4b0e      	ldr	r3, [pc, #56]	@ (800b924 <vPortFree+0xbc>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	43db      	mvns	r3, r3
 800b8ee:	401a      	ands	r2, r3
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b8f4:	f7fe fc66 	bl	800a1c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	685a      	ldr	r2, [r3, #4]
 800b8fc:	4b0a      	ldr	r3, [pc, #40]	@ (800b928 <vPortFree+0xc0>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	4413      	add	r3, r2
 800b902:	4a09      	ldr	r2, [pc, #36]	@ (800b928 <vPortFree+0xc0>)
 800b904:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b906:	6938      	ldr	r0, [r7, #16]
 800b908:	f000 f874 	bl	800b9f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b90c:	4b07      	ldr	r3, [pc, #28]	@ (800b92c <vPortFree+0xc4>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	3301      	adds	r3, #1
 800b912:	4a06      	ldr	r2, [pc, #24]	@ (800b92c <vPortFree+0xc4>)
 800b914:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b916:	f7fe fc63 	bl	800a1e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b91a:	bf00      	nop
 800b91c:	3718      	adds	r7, #24
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}
 800b922:	bf00      	nop
 800b924:	20004cec 	.word	0x20004cec
 800b928:	20004cdc 	.word	0x20004cdc
 800b92c:	20004ce8 	.word	0x20004ce8

0800b930 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b930:	b480      	push	{r7}
 800b932:	b085      	sub	sp, #20
 800b934:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b936:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800b93a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b93c:	4b27      	ldr	r3, [pc, #156]	@ (800b9dc <prvHeapInit+0xac>)
 800b93e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	f003 0307 	and.w	r3, r3, #7
 800b946:	2b00      	cmp	r3, #0
 800b948:	d00c      	beq.n	800b964 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	3307      	adds	r3, #7
 800b94e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	f023 0307 	bic.w	r3, r3, #7
 800b956:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b958:	68ba      	ldr	r2, [r7, #8]
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	1ad3      	subs	r3, r2, r3
 800b95e:	4a1f      	ldr	r2, [pc, #124]	@ (800b9dc <prvHeapInit+0xac>)
 800b960:	4413      	add	r3, r2
 800b962:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b968:	4a1d      	ldr	r2, [pc, #116]	@ (800b9e0 <prvHeapInit+0xb0>)
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b96e:	4b1c      	ldr	r3, [pc, #112]	@ (800b9e0 <prvHeapInit+0xb0>)
 800b970:	2200      	movs	r2, #0
 800b972:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	68ba      	ldr	r2, [r7, #8]
 800b978:	4413      	add	r3, r2
 800b97a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b97c:	2208      	movs	r2, #8
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	1a9b      	subs	r3, r3, r2
 800b982:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	f023 0307 	bic.w	r3, r3, #7
 800b98a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	4a15      	ldr	r2, [pc, #84]	@ (800b9e4 <prvHeapInit+0xb4>)
 800b990:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b992:	4b14      	ldr	r3, [pc, #80]	@ (800b9e4 <prvHeapInit+0xb4>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	2200      	movs	r2, #0
 800b998:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b99a:	4b12      	ldr	r3, [pc, #72]	@ (800b9e4 <prvHeapInit+0xb4>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	2200      	movs	r2, #0
 800b9a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	68fa      	ldr	r2, [r7, #12]
 800b9aa:	1ad2      	subs	r2, r2, r3
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b9b0:	4b0c      	ldr	r3, [pc, #48]	@ (800b9e4 <prvHeapInit+0xb4>)
 800b9b2:	681a      	ldr	r2, [r3, #0]
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	685b      	ldr	r3, [r3, #4]
 800b9bc:	4a0a      	ldr	r2, [pc, #40]	@ (800b9e8 <prvHeapInit+0xb8>)
 800b9be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	685b      	ldr	r3, [r3, #4]
 800b9c4:	4a09      	ldr	r2, [pc, #36]	@ (800b9ec <prvHeapInit+0xbc>)
 800b9c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b9c8:	4b09      	ldr	r3, [pc, #36]	@ (800b9f0 <prvHeapInit+0xc0>)
 800b9ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b9ce:	601a      	str	r2, [r3, #0]
}
 800b9d0:	bf00      	nop
 800b9d2:	3714      	adds	r7, #20
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9da:	4770      	bx	lr
 800b9dc:	200010d0 	.word	0x200010d0
 800b9e0:	20004cd0 	.word	0x20004cd0
 800b9e4:	20004cd8 	.word	0x20004cd8
 800b9e8:	20004ce0 	.word	0x20004ce0
 800b9ec:	20004cdc 	.word	0x20004cdc
 800b9f0:	20004cec 	.word	0x20004cec

0800b9f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b9f4:	b480      	push	{r7}
 800b9f6:	b085      	sub	sp, #20
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b9fc:	4b28      	ldr	r3, [pc, #160]	@ (800baa0 <prvInsertBlockIntoFreeList+0xac>)
 800b9fe:	60fb      	str	r3, [r7, #12]
 800ba00:	e002      	b.n	800ba08 <prvInsertBlockIntoFreeList+0x14>
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	60fb      	str	r3, [r7, #12]
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	687a      	ldr	r2, [r7, #4]
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	d8f7      	bhi.n	800ba02 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	685b      	ldr	r3, [r3, #4]
 800ba1a:	68ba      	ldr	r2, [r7, #8]
 800ba1c:	4413      	add	r3, r2
 800ba1e:	687a      	ldr	r2, [r7, #4]
 800ba20:	429a      	cmp	r2, r3
 800ba22:	d108      	bne.n	800ba36 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	685a      	ldr	r2, [r3, #4]
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	685b      	ldr	r3, [r3, #4]
 800ba2c:	441a      	add	r2, r3
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	685b      	ldr	r3, [r3, #4]
 800ba3e:	68ba      	ldr	r2, [r7, #8]
 800ba40:	441a      	add	r2, r3
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	429a      	cmp	r2, r3
 800ba48:	d118      	bne.n	800ba7c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681a      	ldr	r2, [r3, #0]
 800ba4e:	4b15      	ldr	r3, [pc, #84]	@ (800baa4 <prvInsertBlockIntoFreeList+0xb0>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	429a      	cmp	r2, r3
 800ba54:	d00d      	beq.n	800ba72 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	685a      	ldr	r2, [r3, #4]
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	685b      	ldr	r3, [r3, #4]
 800ba60:	441a      	add	r2, r3
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	681a      	ldr	r2, [r3, #0]
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	601a      	str	r2, [r3, #0]
 800ba70:	e008      	b.n	800ba84 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ba72:	4b0c      	ldr	r3, [pc, #48]	@ (800baa4 <prvInsertBlockIntoFreeList+0xb0>)
 800ba74:	681a      	ldr	r2, [r3, #0]
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	601a      	str	r2, [r3, #0]
 800ba7a:	e003      	b.n	800ba84 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	681a      	ldr	r2, [r3, #0]
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ba84:	68fa      	ldr	r2, [r7, #12]
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	429a      	cmp	r2, r3
 800ba8a:	d002      	beq.n	800ba92 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	687a      	ldr	r2, [r7, #4]
 800ba90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ba92:	bf00      	nop
 800ba94:	3714      	adds	r7, #20
 800ba96:	46bd      	mov	sp, r7
 800ba98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9c:	4770      	bx	lr
 800ba9e:	bf00      	nop
 800baa0:	20004cd0 	.word	0x20004cd0
 800baa4:	20004cd8 	.word	0x20004cd8

0800baa8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800baac:	2200      	movs	r2, #0
 800baae:	4916      	ldr	r1, [pc, #88]	@ (800bb08 <MX_USB_DEVICE_Init+0x60>)
 800bab0:	4816      	ldr	r0, [pc, #88]	@ (800bb0c <MX_USB_DEVICE_Init+0x64>)
 800bab2:	f7fb fec7 	bl	8007844 <USBD_Init>
 800bab6:	4603      	mov	r3, r0
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d001      	beq.n	800bac0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800babc:	f7f5 f8ff 	bl	8000cbe <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bac0:	4913      	ldr	r1, [pc, #76]	@ (800bb10 <MX_USB_DEVICE_Init+0x68>)
 800bac2:	4812      	ldr	r0, [pc, #72]	@ (800bb0c <MX_USB_DEVICE_Init+0x64>)
 800bac4:	f7fb feee 	bl	80078a4 <USBD_RegisterClass>
 800bac8:	4603      	mov	r3, r0
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d001      	beq.n	800bad2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bace:	f7f5 f8f6 	bl	8000cbe <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bad2:	4910      	ldr	r1, [pc, #64]	@ (800bb14 <MX_USB_DEVICE_Init+0x6c>)
 800bad4:	480d      	ldr	r0, [pc, #52]	@ (800bb0c <MX_USB_DEVICE_Init+0x64>)
 800bad6:	f7fb fde5 	bl	80076a4 <USBD_CDC_RegisterInterface>
 800bada:	4603      	mov	r3, r0
 800badc:	2b00      	cmp	r3, #0
 800bade:	d001      	beq.n	800bae4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bae0:	f7f5 f8ed 	bl	8000cbe <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bae4:	4809      	ldr	r0, [pc, #36]	@ (800bb0c <MX_USB_DEVICE_Init+0x64>)
 800bae6:	f7fb ff13 	bl	8007910 <USBD_Start>
 800baea:	4603      	mov	r3, r0
 800baec:	2b00      	cmp	r3, #0
 800baee:	d001      	beq.n	800baf4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800baf0:	f7f5 f8e5 	bl	8000cbe <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  /* Configure and enable the USB interrupt */
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);  // Priority level should be >= 5 for FreeRTOS compatibility
 800baf4:	2200      	movs	r2, #0
 800baf6:	2105      	movs	r1, #5
 800baf8:	2043      	movs	r0, #67	@ 0x43
 800bafa:	f7f5 fc77 	bl	80013ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bafe:	2043      	movs	r0, #67	@ 0x43
 800bb00:	f7f5 fc90 	bl	8001424 <HAL_NVIC_EnableIRQ>
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bb04:	bf00      	nop
 800bb06:	bd80      	pop	{r7, pc}
 800bb08:	200000b0 	.word	0x200000b0
 800bb0c:	20004cf0 	.word	0x20004cf0
 800bb10:	20000018 	.word	0x20000018
 800bb14:	2000009c 	.word	0x2000009c

0800bb18 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	4905      	ldr	r1, [pc, #20]	@ (800bb34 <CDC_Init_FS+0x1c>)
 800bb20:	4805      	ldr	r0, [pc, #20]	@ (800bb38 <CDC_Init_FS+0x20>)
 800bb22:	f7fb fdd9 	bl	80076d8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bb26:	4905      	ldr	r1, [pc, #20]	@ (800bb3c <CDC_Init_FS+0x24>)
 800bb28:	4803      	ldr	r0, [pc, #12]	@ (800bb38 <CDC_Init_FS+0x20>)
 800bb2a:	f7fb fdf7 	bl	800771c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bb2e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bb30:	4618      	mov	r0, r3
 800bb32:	bd80      	pop	{r7, pc}
 800bb34:	200057cc 	.word	0x200057cc
 800bb38:	20004cf0 	.word	0x20004cf0
 800bb3c:	20004fcc 	.word	0x20004fcc

0800bb40 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bb40:	b480      	push	{r7}
 800bb42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bb44:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4e:	4770      	bx	lr

0800bb50 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bb50:	b480      	push	{r7}
 800bb52:	b083      	sub	sp, #12
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	4603      	mov	r3, r0
 800bb58:	6039      	str	r1, [r7, #0]
 800bb5a:	71fb      	strb	r3, [r7, #7]
 800bb5c:	4613      	mov	r3, r2
 800bb5e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bb60:	79fb      	ldrb	r3, [r7, #7]
 800bb62:	2b23      	cmp	r3, #35	@ 0x23
 800bb64:	d84a      	bhi.n	800bbfc <CDC_Control_FS+0xac>
 800bb66:	a201      	add	r2, pc, #4	@ (adr r2, 800bb6c <CDC_Control_FS+0x1c>)
 800bb68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb6c:	0800bbfd 	.word	0x0800bbfd
 800bb70:	0800bbfd 	.word	0x0800bbfd
 800bb74:	0800bbfd 	.word	0x0800bbfd
 800bb78:	0800bbfd 	.word	0x0800bbfd
 800bb7c:	0800bbfd 	.word	0x0800bbfd
 800bb80:	0800bbfd 	.word	0x0800bbfd
 800bb84:	0800bbfd 	.word	0x0800bbfd
 800bb88:	0800bbfd 	.word	0x0800bbfd
 800bb8c:	0800bbfd 	.word	0x0800bbfd
 800bb90:	0800bbfd 	.word	0x0800bbfd
 800bb94:	0800bbfd 	.word	0x0800bbfd
 800bb98:	0800bbfd 	.word	0x0800bbfd
 800bb9c:	0800bbfd 	.word	0x0800bbfd
 800bba0:	0800bbfd 	.word	0x0800bbfd
 800bba4:	0800bbfd 	.word	0x0800bbfd
 800bba8:	0800bbfd 	.word	0x0800bbfd
 800bbac:	0800bbfd 	.word	0x0800bbfd
 800bbb0:	0800bbfd 	.word	0x0800bbfd
 800bbb4:	0800bbfd 	.word	0x0800bbfd
 800bbb8:	0800bbfd 	.word	0x0800bbfd
 800bbbc:	0800bbfd 	.word	0x0800bbfd
 800bbc0:	0800bbfd 	.word	0x0800bbfd
 800bbc4:	0800bbfd 	.word	0x0800bbfd
 800bbc8:	0800bbfd 	.word	0x0800bbfd
 800bbcc:	0800bbfd 	.word	0x0800bbfd
 800bbd0:	0800bbfd 	.word	0x0800bbfd
 800bbd4:	0800bbfd 	.word	0x0800bbfd
 800bbd8:	0800bbfd 	.word	0x0800bbfd
 800bbdc:	0800bbfd 	.word	0x0800bbfd
 800bbe0:	0800bbfd 	.word	0x0800bbfd
 800bbe4:	0800bbfd 	.word	0x0800bbfd
 800bbe8:	0800bbfd 	.word	0x0800bbfd
 800bbec:	0800bbfd 	.word	0x0800bbfd
 800bbf0:	0800bbfd 	.word	0x0800bbfd
 800bbf4:	0800bbfd 	.word	0x0800bbfd
 800bbf8:	0800bbfd 	.word	0x0800bbfd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bbfc:	bf00      	nop
  }

  return (USBD_OK);
 800bbfe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bc00:	4618      	mov	r0, r3
 800bc02:	370c      	adds	r7, #12
 800bc04:	46bd      	mov	sp, r7
 800bc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0a:	4770      	bx	lr

0800bc0c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b082      	sub	sp, #8
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
 800bc14:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bc16:	6879      	ldr	r1, [r7, #4]
 800bc18:	4805      	ldr	r0, [pc, #20]	@ (800bc30 <CDC_Receive_FS+0x24>)
 800bc1a:	f7fb fd7f 	bl	800771c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bc1e:	4804      	ldr	r0, [pc, #16]	@ (800bc30 <CDC_Receive_FS+0x24>)
 800bc20:	f7fb fdda 	bl	80077d8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bc24:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bc26:	4618      	mov	r0, r3
 800bc28:	3708      	adds	r7, #8
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bd80      	pop	{r7, pc}
 800bc2e:	bf00      	nop
 800bc30:	20004cf0 	.word	0x20004cf0

0800bc34 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b084      	sub	sp, #16
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
 800bc3c:	460b      	mov	r3, r1
 800bc3e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bc40:	2300      	movs	r3, #0
 800bc42:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bc44:	4b0d      	ldr	r3, [pc, #52]	@ (800bc7c <CDC_Transmit_FS+0x48>)
 800bc46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bc4a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d001      	beq.n	800bc5a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800bc56:	2301      	movs	r3, #1
 800bc58:	e00b      	b.n	800bc72 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bc5a:	887b      	ldrh	r3, [r7, #2]
 800bc5c:	461a      	mov	r2, r3
 800bc5e:	6879      	ldr	r1, [r7, #4]
 800bc60:	4806      	ldr	r0, [pc, #24]	@ (800bc7c <CDC_Transmit_FS+0x48>)
 800bc62:	f7fb fd39 	bl	80076d8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bc66:	4805      	ldr	r0, [pc, #20]	@ (800bc7c <CDC_Transmit_FS+0x48>)
 800bc68:	f7fb fd76 	bl	8007758 <USBD_CDC_TransmitPacket>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800bc70:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	3710      	adds	r7, #16
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bd80      	pop	{r7, pc}
 800bc7a:	bf00      	nop
 800bc7c:	20004cf0 	.word	0x20004cf0

0800bc80 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bc80:	b480      	push	{r7}
 800bc82:	b087      	sub	sp, #28
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	60f8      	str	r0, [r7, #12]
 800bc88:	60b9      	str	r1, [r7, #8]
 800bc8a:	4613      	mov	r3, r2
 800bc8c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bc92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	371c      	adds	r7, #28
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca0:	4770      	bx	lr
	...

0800bca4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b083      	sub	sp, #12
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	4603      	mov	r3, r0
 800bcac:	6039      	str	r1, [r7, #0]
 800bcae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	2212      	movs	r2, #18
 800bcb4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bcb6:	4b03      	ldr	r3, [pc, #12]	@ (800bcc4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	370c      	adds	r7, #12
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc2:	4770      	bx	lr
 800bcc4:	200000cc 	.word	0x200000cc

0800bcc8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcc8:	b480      	push	{r7}
 800bcca:	b083      	sub	sp, #12
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	4603      	mov	r3, r0
 800bcd0:	6039      	str	r1, [r7, #0]
 800bcd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	2204      	movs	r2, #4
 800bcd8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bcda:	4b03      	ldr	r3, [pc, #12]	@ (800bce8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	370c      	adds	r7, #12
 800bce0:	46bd      	mov	sp, r7
 800bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce6:	4770      	bx	lr
 800bce8:	200000e0 	.word	0x200000e0

0800bcec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b082      	sub	sp, #8
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	6039      	str	r1, [r7, #0]
 800bcf6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bcf8:	79fb      	ldrb	r3, [r7, #7]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d105      	bne.n	800bd0a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bcfe:	683a      	ldr	r2, [r7, #0]
 800bd00:	4907      	ldr	r1, [pc, #28]	@ (800bd20 <USBD_FS_ProductStrDescriptor+0x34>)
 800bd02:	4808      	ldr	r0, [pc, #32]	@ (800bd24 <USBD_FS_ProductStrDescriptor+0x38>)
 800bd04:	f7fc ffb4 	bl	8008c70 <USBD_GetString>
 800bd08:	e004      	b.n	800bd14 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bd0a:	683a      	ldr	r2, [r7, #0]
 800bd0c:	4904      	ldr	r1, [pc, #16]	@ (800bd20 <USBD_FS_ProductStrDescriptor+0x34>)
 800bd0e:	4805      	ldr	r0, [pc, #20]	@ (800bd24 <USBD_FS_ProductStrDescriptor+0x38>)
 800bd10:	f7fc ffae 	bl	8008c70 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd14:	4b02      	ldr	r3, [pc, #8]	@ (800bd20 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bd16:	4618      	mov	r0, r3
 800bd18:	3708      	adds	r7, #8
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd80      	pop	{r7, pc}
 800bd1e:	bf00      	nop
 800bd20:	20005fcc 	.word	0x20005fcc
 800bd24:	0800c740 	.word	0x0800c740

0800bd28 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b082      	sub	sp, #8
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	4603      	mov	r3, r0
 800bd30:	6039      	str	r1, [r7, #0]
 800bd32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bd34:	683a      	ldr	r2, [r7, #0]
 800bd36:	4904      	ldr	r1, [pc, #16]	@ (800bd48 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bd38:	4804      	ldr	r0, [pc, #16]	@ (800bd4c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bd3a:	f7fc ff99 	bl	8008c70 <USBD_GetString>
  return USBD_StrDesc;
 800bd3e:	4b02      	ldr	r3, [pc, #8]	@ (800bd48 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bd40:	4618      	mov	r0, r3
 800bd42:	3708      	adds	r7, #8
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}
 800bd48:	20005fcc 	.word	0x20005fcc
 800bd4c:	0800c758 	.word	0x0800c758

0800bd50 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b082      	sub	sp, #8
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	4603      	mov	r3, r0
 800bd58:	6039      	str	r1, [r7, #0]
 800bd5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	221a      	movs	r2, #26
 800bd60:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bd62:	f000 f843 	bl	800bdec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bd66:	4b02      	ldr	r3, [pc, #8]	@ (800bd70 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bd68:	4618      	mov	r0, r3
 800bd6a:	3708      	adds	r7, #8
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}
 800bd70:	200000e4 	.word	0x200000e4

0800bd74 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b082      	sub	sp, #8
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	6039      	str	r1, [r7, #0]
 800bd7e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bd80:	79fb      	ldrb	r3, [r7, #7]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d105      	bne.n	800bd92 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bd86:	683a      	ldr	r2, [r7, #0]
 800bd88:	4907      	ldr	r1, [pc, #28]	@ (800bda8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bd8a:	4808      	ldr	r0, [pc, #32]	@ (800bdac <USBD_FS_ConfigStrDescriptor+0x38>)
 800bd8c:	f7fc ff70 	bl	8008c70 <USBD_GetString>
 800bd90:	e004      	b.n	800bd9c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bd92:	683a      	ldr	r2, [r7, #0]
 800bd94:	4904      	ldr	r1, [pc, #16]	@ (800bda8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bd96:	4805      	ldr	r0, [pc, #20]	@ (800bdac <USBD_FS_ConfigStrDescriptor+0x38>)
 800bd98:	f7fc ff6a 	bl	8008c70 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd9c:	4b02      	ldr	r3, [pc, #8]	@ (800bda8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3708      	adds	r7, #8
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}
 800bda6:	bf00      	nop
 800bda8:	20005fcc 	.word	0x20005fcc
 800bdac:	0800c76c 	.word	0x0800c76c

0800bdb0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b082      	sub	sp, #8
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	6039      	str	r1, [r7, #0]
 800bdba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bdbc:	79fb      	ldrb	r3, [r7, #7]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d105      	bne.n	800bdce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bdc2:	683a      	ldr	r2, [r7, #0]
 800bdc4:	4907      	ldr	r1, [pc, #28]	@ (800bde4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bdc6:	4808      	ldr	r0, [pc, #32]	@ (800bde8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bdc8:	f7fc ff52 	bl	8008c70 <USBD_GetString>
 800bdcc:	e004      	b.n	800bdd8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bdce:	683a      	ldr	r2, [r7, #0]
 800bdd0:	4904      	ldr	r1, [pc, #16]	@ (800bde4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bdd2:	4805      	ldr	r0, [pc, #20]	@ (800bde8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bdd4:	f7fc ff4c 	bl	8008c70 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bdd8:	4b02      	ldr	r3, [pc, #8]	@ (800bde4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bdda:	4618      	mov	r0, r3
 800bddc:	3708      	adds	r7, #8
 800bdde:	46bd      	mov	sp, r7
 800bde0:	bd80      	pop	{r7, pc}
 800bde2:	bf00      	nop
 800bde4:	20005fcc 	.word	0x20005fcc
 800bde8:	0800c778 	.word	0x0800c778

0800bdec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b084      	sub	sp, #16
 800bdf0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bdf2:	4b0f      	ldr	r3, [pc, #60]	@ (800be30 <Get_SerialNum+0x44>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bdf8:	4b0e      	ldr	r3, [pc, #56]	@ (800be34 <Get_SerialNum+0x48>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bdfe:	4b0e      	ldr	r3, [pc, #56]	@ (800be38 <Get_SerialNum+0x4c>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800be04:	68fa      	ldr	r2, [r7, #12]
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	4413      	add	r3, r2
 800be0a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d009      	beq.n	800be26 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800be12:	2208      	movs	r2, #8
 800be14:	4909      	ldr	r1, [pc, #36]	@ (800be3c <Get_SerialNum+0x50>)
 800be16:	68f8      	ldr	r0, [r7, #12]
 800be18:	f000 f814 	bl	800be44 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800be1c:	2204      	movs	r2, #4
 800be1e:	4908      	ldr	r1, [pc, #32]	@ (800be40 <Get_SerialNum+0x54>)
 800be20:	68b8      	ldr	r0, [r7, #8]
 800be22:	f000 f80f 	bl	800be44 <IntToUnicode>
  }
}
 800be26:	bf00      	nop
 800be28:	3710      	adds	r7, #16
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}
 800be2e:	bf00      	nop
 800be30:	1fff7a10 	.word	0x1fff7a10
 800be34:	1fff7a14 	.word	0x1fff7a14
 800be38:	1fff7a18 	.word	0x1fff7a18
 800be3c:	200000e6 	.word	0x200000e6
 800be40:	200000f6 	.word	0x200000f6

0800be44 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800be44:	b480      	push	{r7}
 800be46:	b087      	sub	sp, #28
 800be48:	af00      	add	r7, sp, #0
 800be4a:	60f8      	str	r0, [r7, #12]
 800be4c:	60b9      	str	r1, [r7, #8]
 800be4e:	4613      	mov	r3, r2
 800be50:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800be52:	2300      	movs	r3, #0
 800be54:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800be56:	2300      	movs	r3, #0
 800be58:	75fb      	strb	r3, [r7, #23]
 800be5a:	e027      	b.n	800beac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	0f1b      	lsrs	r3, r3, #28
 800be60:	2b09      	cmp	r3, #9
 800be62:	d80b      	bhi.n	800be7c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	0f1b      	lsrs	r3, r3, #28
 800be68:	b2da      	uxtb	r2, r3
 800be6a:	7dfb      	ldrb	r3, [r7, #23]
 800be6c:	005b      	lsls	r3, r3, #1
 800be6e:	4619      	mov	r1, r3
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	440b      	add	r3, r1
 800be74:	3230      	adds	r2, #48	@ 0x30
 800be76:	b2d2      	uxtb	r2, r2
 800be78:	701a      	strb	r2, [r3, #0]
 800be7a:	e00a      	b.n	800be92 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	0f1b      	lsrs	r3, r3, #28
 800be80:	b2da      	uxtb	r2, r3
 800be82:	7dfb      	ldrb	r3, [r7, #23]
 800be84:	005b      	lsls	r3, r3, #1
 800be86:	4619      	mov	r1, r3
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	440b      	add	r3, r1
 800be8c:	3237      	adds	r2, #55	@ 0x37
 800be8e:	b2d2      	uxtb	r2, r2
 800be90:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	011b      	lsls	r3, r3, #4
 800be96:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800be98:	7dfb      	ldrb	r3, [r7, #23]
 800be9a:	005b      	lsls	r3, r3, #1
 800be9c:	3301      	adds	r3, #1
 800be9e:	68ba      	ldr	r2, [r7, #8]
 800bea0:	4413      	add	r3, r2
 800bea2:	2200      	movs	r2, #0
 800bea4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bea6:	7dfb      	ldrb	r3, [r7, #23]
 800bea8:	3301      	adds	r3, #1
 800beaa:	75fb      	strb	r3, [r7, #23]
 800beac:	7dfa      	ldrb	r2, [r7, #23]
 800beae:	79fb      	ldrb	r3, [r7, #7]
 800beb0:	429a      	cmp	r2, r3
 800beb2:	d3d3      	bcc.n	800be5c <IntToUnicode+0x18>
  }
}
 800beb4:	bf00      	nop
 800beb6:	bf00      	nop
 800beb8:	371c      	adds	r7, #28
 800beba:	46bd      	mov	sp, r7
 800bebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec0:	4770      	bx	lr
	...

0800bec4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b08a      	sub	sp, #40	@ 0x28
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800becc:	f107 0314 	add.w	r3, r7, #20
 800bed0:	2200      	movs	r2, #0
 800bed2:	601a      	str	r2, [r3, #0]
 800bed4:	605a      	str	r2, [r3, #4]
 800bed6:	609a      	str	r2, [r3, #8]
 800bed8:	60da      	str	r2, [r3, #12]
 800beda:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bee4:	d147      	bne.n	800bf76 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bee6:	2300      	movs	r3, #0
 800bee8:	613b      	str	r3, [r7, #16]
 800beea:	4b25      	ldr	r3, [pc, #148]	@ (800bf80 <HAL_PCD_MspInit+0xbc>)
 800beec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800beee:	4a24      	ldr	r2, [pc, #144]	@ (800bf80 <HAL_PCD_MspInit+0xbc>)
 800bef0:	f043 0301 	orr.w	r3, r3, #1
 800bef4:	6313      	str	r3, [r2, #48]	@ 0x30
 800bef6:	4b22      	ldr	r3, [pc, #136]	@ (800bf80 <HAL_PCD_MspInit+0xbc>)
 800bef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800befa:	f003 0301 	and.w	r3, r3, #1
 800befe:	613b      	str	r3, [r7, #16]
 800bf00:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800bf02:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bf06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bf08:	2300      	movs	r3, #0
 800bf0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800bf10:	f107 0314 	add.w	r3, r7, #20
 800bf14:	4619      	mov	r1, r3
 800bf16:	481b      	ldr	r0, [pc, #108]	@ (800bf84 <HAL_PCD_MspInit+0xc0>)
 800bf18:	f7f5 fa92 	bl	8001440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800bf1c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800bf20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf22:	2302      	movs	r3, #2
 800bf24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf26:	2300      	movs	r3, #0
 800bf28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf2a:	2303      	movs	r3, #3
 800bf2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bf2e:	230a      	movs	r3, #10
 800bf30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bf32:	f107 0314 	add.w	r3, r7, #20
 800bf36:	4619      	mov	r1, r3
 800bf38:	4812      	ldr	r0, [pc, #72]	@ (800bf84 <HAL_PCD_MspInit+0xc0>)
 800bf3a:	f7f5 fa81 	bl	8001440 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bf3e:	4b10      	ldr	r3, [pc, #64]	@ (800bf80 <HAL_PCD_MspInit+0xbc>)
 800bf40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf42:	4a0f      	ldr	r2, [pc, #60]	@ (800bf80 <HAL_PCD_MspInit+0xbc>)
 800bf44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf48:	6353      	str	r3, [r2, #52]	@ 0x34
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	60fb      	str	r3, [r7, #12]
 800bf4e:	4b0c      	ldr	r3, [pc, #48]	@ (800bf80 <HAL_PCD_MspInit+0xbc>)
 800bf50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf52:	4a0b      	ldr	r2, [pc, #44]	@ (800bf80 <HAL_PCD_MspInit+0xbc>)
 800bf54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800bf58:	6453      	str	r3, [r2, #68]	@ 0x44
 800bf5a:	4b09      	ldr	r3, [pc, #36]	@ (800bf80 <HAL_PCD_MspInit+0xbc>)
 800bf5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bf62:	60fb      	str	r3, [r7, #12]
 800bf64:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800bf66:	2200      	movs	r2, #0
 800bf68:	2105      	movs	r1, #5
 800bf6a:	2043      	movs	r0, #67	@ 0x43
 800bf6c:	f7f5 fa3e 	bl	80013ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bf70:	2043      	movs	r0, #67	@ 0x43
 800bf72:	f7f5 fa57 	bl	8001424 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bf76:	bf00      	nop
 800bf78:	3728      	adds	r7, #40	@ 0x28
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}
 800bf7e:	bf00      	nop
 800bf80:	40023800 	.word	0x40023800
 800bf84:	40020000 	.word	0x40020000

0800bf88 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b082      	sub	sp, #8
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bf9c:	4619      	mov	r1, r3
 800bf9e:	4610      	mov	r0, r2
 800bfa0:	f7fb fd03 	bl	80079aa <USBD_LL_SetupStage>
}
 800bfa4:	bf00      	nop
 800bfa6:	3708      	adds	r7, #8
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bd80      	pop	{r7, pc}

0800bfac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b082      	sub	sp, #8
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
 800bfb4:	460b      	mov	r3, r1
 800bfb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800bfbe:	78fa      	ldrb	r2, [r7, #3]
 800bfc0:	6879      	ldr	r1, [r7, #4]
 800bfc2:	4613      	mov	r3, r2
 800bfc4:	00db      	lsls	r3, r3, #3
 800bfc6:	4413      	add	r3, r2
 800bfc8:	009b      	lsls	r3, r3, #2
 800bfca:	440b      	add	r3, r1
 800bfcc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800bfd0:	681a      	ldr	r2, [r3, #0]
 800bfd2:	78fb      	ldrb	r3, [r7, #3]
 800bfd4:	4619      	mov	r1, r3
 800bfd6:	f7fb fd3d 	bl	8007a54 <USBD_LL_DataOutStage>
}
 800bfda:	bf00      	nop
 800bfdc:	3708      	adds	r7, #8
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}

0800bfe2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfe2:	b580      	push	{r7, lr}
 800bfe4:	b082      	sub	sp, #8
 800bfe6:	af00      	add	r7, sp, #0
 800bfe8:	6078      	str	r0, [r7, #4]
 800bfea:	460b      	mov	r3, r1
 800bfec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800bff4:	78fa      	ldrb	r2, [r7, #3]
 800bff6:	6879      	ldr	r1, [r7, #4]
 800bff8:	4613      	mov	r3, r2
 800bffa:	00db      	lsls	r3, r3, #3
 800bffc:	4413      	add	r3, r2
 800bffe:	009b      	lsls	r3, r3, #2
 800c000:	440b      	add	r3, r1
 800c002:	3320      	adds	r3, #32
 800c004:	681a      	ldr	r2, [r3, #0]
 800c006:	78fb      	ldrb	r3, [r7, #3]
 800c008:	4619      	mov	r1, r3
 800c00a:	f7fb fdd6 	bl	8007bba <USBD_LL_DataInStage>
}
 800c00e:	bf00      	nop
 800c010:	3708      	adds	r7, #8
 800c012:	46bd      	mov	sp, r7
 800c014:	bd80      	pop	{r7, pc}

0800c016 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c016:	b580      	push	{r7, lr}
 800c018:	b082      	sub	sp, #8
 800c01a:	af00      	add	r7, sp, #0
 800c01c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c024:	4618      	mov	r0, r3
 800c026:	f7fb ff10 	bl	8007e4a <USBD_LL_SOF>
}
 800c02a:	bf00      	nop
 800c02c:	3708      	adds	r7, #8
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}

0800c032 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c032:	b580      	push	{r7, lr}
 800c034:	b084      	sub	sp, #16
 800c036:	af00      	add	r7, sp, #0
 800c038:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c03a:	2301      	movs	r3, #1
 800c03c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	79db      	ldrb	r3, [r3, #7]
 800c042:	2b02      	cmp	r3, #2
 800c044:	d001      	beq.n	800c04a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c046:	f7f4 fe3a 	bl	8000cbe <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c050:	7bfa      	ldrb	r2, [r7, #15]
 800c052:	4611      	mov	r1, r2
 800c054:	4618      	mov	r0, r3
 800c056:	f7fb feb4 	bl	8007dc2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c060:	4618      	mov	r0, r3
 800c062:	f7fb fe5c 	bl	8007d1e <USBD_LL_Reset>
}
 800c066:	bf00      	nop
 800c068:	3710      	adds	r7, #16
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}
	...

0800c070 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b082      	sub	sp, #8
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c07e:	4618      	mov	r0, r3
 800c080:	f7fb feaf 	bl	8007de2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	687a      	ldr	r2, [r7, #4]
 800c090:	6812      	ldr	r2, [r2, #0]
 800c092:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c096:	f043 0301 	orr.w	r3, r3, #1
 800c09a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	7adb      	ldrb	r3, [r3, #11]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d005      	beq.n	800c0b0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c0a4:	4b04      	ldr	r3, [pc, #16]	@ (800c0b8 <HAL_PCD_SuspendCallback+0x48>)
 800c0a6:	691b      	ldr	r3, [r3, #16]
 800c0a8:	4a03      	ldr	r2, [pc, #12]	@ (800c0b8 <HAL_PCD_SuspendCallback+0x48>)
 800c0aa:	f043 0306 	orr.w	r3, r3, #6
 800c0ae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c0b0:	bf00      	nop
 800c0b2:	3708      	adds	r7, #8
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	bd80      	pop	{r7, pc}
 800c0b8:	e000ed00 	.word	0xe000ed00

0800c0bc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b082      	sub	sp, #8
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f7fb fea5 	bl	8007e1a <USBD_LL_Resume>
}
 800c0d0:	bf00      	nop
 800c0d2:	3708      	adds	r7, #8
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd80      	pop	{r7, pc}

0800c0d8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b082      	sub	sp, #8
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
 800c0e0:	460b      	mov	r3, r1
 800c0e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c0ea:	78fa      	ldrb	r2, [r7, #3]
 800c0ec:	4611      	mov	r1, r2
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f7fb fefd 	bl	8007eee <USBD_LL_IsoOUTIncomplete>
}
 800c0f4:	bf00      	nop
 800c0f6:	3708      	adds	r7, #8
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}

0800c0fc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b082      	sub	sp, #8
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
 800c104:	460b      	mov	r3, r1
 800c106:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c10e:	78fa      	ldrb	r2, [r7, #3]
 800c110:	4611      	mov	r1, r2
 800c112:	4618      	mov	r0, r3
 800c114:	f7fb feb9 	bl	8007e8a <USBD_LL_IsoINIncomplete>
}
 800c118:	bf00      	nop
 800c11a:	3708      	adds	r7, #8
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}

0800c120 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b082      	sub	sp, #8
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c12e:	4618      	mov	r0, r3
 800c130:	f7fb ff0f 	bl	8007f52 <USBD_LL_DevConnected>
}
 800c134:	bf00      	nop
 800c136:	3708      	adds	r7, #8
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}

0800c13c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b082      	sub	sp, #8
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c14a:	4618      	mov	r0, r3
 800c14c:	f7fb ff0c 	bl	8007f68 <USBD_LL_DevDisconnected>
}
 800c150:	bf00      	nop
 800c152:	3708      	adds	r7, #8
 800c154:	46bd      	mov	sp, r7
 800c156:	bd80      	pop	{r7, pc}

0800c158 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b082      	sub	sp, #8
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	781b      	ldrb	r3, [r3, #0]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d13c      	bne.n	800c1e2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c168:	4a20      	ldr	r2, [pc, #128]	@ (800c1ec <USBD_LL_Init+0x94>)
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	4a1e      	ldr	r2, [pc, #120]	@ (800c1ec <USBD_LL_Init+0x94>)
 800c174:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c178:	4b1c      	ldr	r3, [pc, #112]	@ (800c1ec <USBD_LL_Init+0x94>)
 800c17a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c17e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c180:	4b1a      	ldr	r3, [pc, #104]	@ (800c1ec <USBD_LL_Init+0x94>)
 800c182:	2204      	movs	r2, #4
 800c184:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c186:	4b19      	ldr	r3, [pc, #100]	@ (800c1ec <USBD_LL_Init+0x94>)
 800c188:	2202      	movs	r2, #2
 800c18a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c18c:	4b17      	ldr	r3, [pc, #92]	@ (800c1ec <USBD_LL_Init+0x94>)
 800c18e:	2200      	movs	r2, #0
 800c190:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c192:	4b16      	ldr	r3, [pc, #88]	@ (800c1ec <USBD_LL_Init+0x94>)
 800c194:	2202      	movs	r2, #2
 800c196:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c198:	4b14      	ldr	r3, [pc, #80]	@ (800c1ec <USBD_LL_Init+0x94>)
 800c19a:	2200      	movs	r2, #0
 800c19c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c19e:	4b13      	ldr	r3, [pc, #76]	@ (800c1ec <USBD_LL_Init+0x94>)
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c1a4:	4b11      	ldr	r3, [pc, #68]	@ (800c1ec <USBD_LL_Init+0x94>)
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c1aa:	4b10      	ldr	r3, [pc, #64]	@ (800c1ec <USBD_LL_Init+0x94>)
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c1b0:	4b0e      	ldr	r3, [pc, #56]	@ (800c1ec <USBD_LL_Init+0x94>)
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c1b6:	480d      	ldr	r0, [pc, #52]	@ (800c1ec <USBD_LL_Init+0x94>)
 800c1b8:	f7f6 ffd6 	bl	8003168 <HAL_PCD_Init>
 800c1bc:	4603      	mov	r3, r0
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d001      	beq.n	800c1c6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c1c2:	f7f4 fd7c 	bl	8000cbe <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c1c6:	2180      	movs	r1, #128	@ 0x80
 800c1c8:	4808      	ldr	r0, [pc, #32]	@ (800c1ec <USBD_LL_Init+0x94>)
 800c1ca:	f7f8 fa02 	bl	80045d2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c1ce:	2240      	movs	r2, #64	@ 0x40
 800c1d0:	2100      	movs	r1, #0
 800c1d2:	4806      	ldr	r0, [pc, #24]	@ (800c1ec <USBD_LL_Init+0x94>)
 800c1d4:	f7f8 f9b6 	bl	8004544 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c1d8:	2280      	movs	r2, #128	@ 0x80
 800c1da:	2101      	movs	r1, #1
 800c1dc:	4803      	ldr	r0, [pc, #12]	@ (800c1ec <USBD_LL_Init+0x94>)
 800c1de:	f7f8 f9b1 	bl	8004544 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c1e2:	2300      	movs	r3, #0
}
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	3708      	adds	r7, #8
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bd80      	pop	{r7, pc}
 800c1ec:	200061cc 	.word	0x200061cc

0800c1f0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b084      	sub	sp, #16
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c206:	4618      	mov	r0, r3
 800c208:	f7f7 f8bd 	bl	8003386 <HAL_PCD_Start>
 800c20c:	4603      	mov	r3, r0
 800c20e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c210:	7bfb      	ldrb	r3, [r7, #15]
 800c212:	4618      	mov	r0, r3
 800c214:	f000 f942 	bl	800c49c <USBD_Get_USB_Status>
 800c218:	4603      	mov	r3, r0
 800c21a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c21c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c21e:	4618      	mov	r0, r3
 800c220:	3710      	adds	r7, #16
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}

0800c226 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c226:	b580      	push	{r7, lr}
 800c228:	b084      	sub	sp, #16
 800c22a:	af00      	add	r7, sp, #0
 800c22c:	6078      	str	r0, [r7, #4]
 800c22e:	4608      	mov	r0, r1
 800c230:	4611      	mov	r1, r2
 800c232:	461a      	mov	r2, r3
 800c234:	4603      	mov	r3, r0
 800c236:	70fb      	strb	r3, [r7, #3]
 800c238:	460b      	mov	r3, r1
 800c23a:	70bb      	strb	r3, [r7, #2]
 800c23c:	4613      	mov	r3, r2
 800c23e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c240:	2300      	movs	r3, #0
 800c242:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c244:	2300      	movs	r3, #0
 800c246:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c24e:	78bb      	ldrb	r3, [r7, #2]
 800c250:	883a      	ldrh	r2, [r7, #0]
 800c252:	78f9      	ldrb	r1, [r7, #3]
 800c254:	f7f7 fd91 	bl	8003d7a <HAL_PCD_EP_Open>
 800c258:	4603      	mov	r3, r0
 800c25a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c25c:	7bfb      	ldrb	r3, [r7, #15]
 800c25e:	4618      	mov	r0, r3
 800c260:	f000 f91c 	bl	800c49c <USBD_Get_USB_Status>
 800c264:	4603      	mov	r3, r0
 800c266:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c268:	7bbb      	ldrb	r3, [r7, #14]
}
 800c26a:	4618      	mov	r0, r3
 800c26c:	3710      	adds	r7, #16
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd80      	pop	{r7, pc}

0800c272 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c272:	b580      	push	{r7, lr}
 800c274:	b084      	sub	sp, #16
 800c276:	af00      	add	r7, sp, #0
 800c278:	6078      	str	r0, [r7, #4]
 800c27a:	460b      	mov	r3, r1
 800c27c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c27e:	2300      	movs	r3, #0
 800c280:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c282:	2300      	movs	r3, #0
 800c284:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c28c:	78fa      	ldrb	r2, [r7, #3]
 800c28e:	4611      	mov	r1, r2
 800c290:	4618      	mov	r0, r3
 800c292:	f7f7 fddc 	bl	8003e4e <HAL_PCD_EP_Close>
 800c296:	4603      	mov	r3, r0
 800c298:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c29a:	7bfb      	ldrb	r3, [r7, #15]
 800c29c:	4618      	mov	r0, r3
 800c29e:	f000 f8fd 	bl	800c49c <USBD_Get_USB_Status>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	3710      	adds	r7, #16
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	bd80      	pop	{r7, pc}

0800c2b0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b084      	sub	sp, #16
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
 800c2b8:	460b      	mov	r3, r1
 800c2ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2bc:	2300      	movs	r3, #0
 800c2be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c2ca:	78fa      	ldrb	r2, [r7, #3]
 800c2cc:	4611      	mov	r1, r2
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f7f7 fe94 	bl	8003ffc <HAL_PCD_EP_SetStall>
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2d8:	7bfb      	ldrb	r3, [r7, #15]
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f000 f8de 	bl	800c49c <USBD_Get_USB_Status>
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	3710      	adds	r7, #16
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	bd80      	pop	{r7, pc}

0800c2ee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c2ee:	b580      	push	{r7, lr}
 800c2f0:	b084      	sub	sp, #16
 800c2f2:	af00      	add	r7, sp, #0
 800c2f4:	6078      	str	r0, [r7, #4]
 800c2f6:	460b      	mov	r3, r1
 800c2f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2fe:	2300      	movs	r3, #0
 800c300:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c308:	78fa      	ldrb	r2, [r7, #3]
 800c30a:	4611      	mov	r1, r2
 800c30c:	4618      	mov	r0, r3
 800c30e:	f7f7 fed8 	bl	80040c2 <HAL_PCD_EP_ClrStall>
 800c312:	4603      	mov	r3, r0
 800c314:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c316:	7bfb      	ldrb	r3, [r7, #15]
 800c318:	4618      	mov	r0, r3
 800c31a:	f000 f8bf 	bl	800c49c <USBD_Get_USB_Status>
 800c31e:	4603      	mov	r3, r0
 800c320:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c322:	7bbb      	ldrb	r3, [r7, #14]
}
 800c324:	4618      	mov	r0, r3
 800c326:	3710      	adds	r7, #16
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}

0800c32c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c32c:	b480      	push	{r7}
 800c32e:	b085      	sub	sp, #20
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
 800c334:	460b      	mov	r3, r1
 800c336:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c33e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c340:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c344:	2b00      	cmp	r3, #0
 800c346:	da0b      	bge.n	800c360 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c348:	78fb      	ldrb	r3, [r7, #3]
 800c34a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c34e:	68f9      	ldr	r1, [r7, #12]
 800c350:	4613      	mov	r3, r2
 800c352:	00db      	lsls	r3, r3, #3
 800c354:	4413      	add	r3, r2
 800c356:	009b      	lsls	r3, r3, #2
 800c358:	440b      	add	r3, r1
 800c35a:	3316      	adds	r3, #22
 800c35c:	781b      	ldrb	r3, [r3, #0]
 800c35e:	e00b      	b.n	800c378 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c360:	78fb      	ldrb	r3, [r7, #3]
 800c362:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c366:	68f9      	ldr	r1, [r7, #12]
 800c368:	4613      	mov	r3, r2
 800c36a:	00db      	lsls	r3, r3, #3
 800c36c:	4413      	add	r3, r2
 800c36e:	009b      	lsls	r3, r3, #2
 800c370:	440b      	add	r3, r1
 800c372:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800c376:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c378:	4618      	mov	r0, r3
 800c37a:	3714      	adds	r7, #20
 800c37c:	46bd      	mov	sp, r7
 800c37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c382:	4770      	bx	lr

0800c384 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b084      	sub	sp, #16
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
 800c38c:	460b      	mov	r3, r1
 800c38e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c390:	2300      	movs	r3, #0
 800c392:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c394:	2300      	movs	r3, #0
 800c396:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c39e:	78fa      	ldrb	r2, [r7, #3]
 800c3a0:	4611      	mov	r1, r2
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f7f7 fcc5 	bl	8003d32 <HAL_PCD_SetAddress>
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3ac:	7bfb      	ldrb	r3, [r7, #15]
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f000 f874 	bl	800c49c <USBD_Get_USB_Status>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3710      	adds	r7, #16
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}

0800c3c2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c3c2:	b580      	push	{r7, lr}
 800c3c4:	b086      	sub	sp, #24
 800c3c6:	af00      	add	r7, sp, #0
 800c3c8:	60f8      	str	r0, [r7, #12]
 800c3ca:	607a      	str	r2, [r7, #4]
 800c3cc:	603b      	str	r3, [r7, #0]
 800c3ce:	460b      	mov	r3, r1
 800c3d0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c3e0:	7af9      	ldrb	r1, [r7, #11]
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	687a      	ldr	r2, [r7, #4]
 800c3e6:	f7f7 fdcf 	bl	8003f88 <HAL_PCD_EP_Transmit>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3ee:	7dfb      	ldrb	r3, [r7, #23]
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f000 f853 	bl	800c49c <USBD_Get_USB_Status>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c3fa:	7dbb      	ldrb	r3, [r7, #22]
}
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	3718      	adds	r7, #24
 800c400:	46bd      	mov	sp, r7
 800c402:	bd80      	pop	{r7, pc}

0800c404 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b086      	sub	sp, #24
 800c408:	af00      	add	r7, sp, #0
 800c40a:	60f8      	str	r0, [r7, #12]
 800c40c:	607a      	str	r2, [r7, #4]
 800c40e:	603b      	str	r3, [r7, #0]
 800c410:	460b      	mov	r3, r1
 800c412:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c414:	2300      	movs	r3, #0
 800c416:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c418:	2300      	movs	r3, #0
 800c41a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c422:	7af9      	ldrb	r1, [r7, #11]
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	687a      	ldr	r2, [r7, #4]
 800c428:	f7f7 fd5b 	bl	8003ee2 <HAL_PCD_EP_Receive>
 800c42c:	4603      	mov	r3, r0
 800c42e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c430:	7dfb      	ldrb	r3, [r7, #23]
 800c432:	4618      	mov	r0, r3
 800c434:	f000 f832 	bl	800c49c <USBD_Get_USB_Status>
 800c438:	4603      	mov	r3, r0
 800c43a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c43c:	7dbb      	ldrb	r3, [r7, #22]
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3718      	adds	r7, #24
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}

0800c446 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c446:	b580      	push	{r7, lr}
 800c448:	b082      	sub	sp, #8
 800c44a:	af00      	add	r7, sp, #0
 800c44c:	6078      	str	r0, [r7, #4]
 800c44e:	460b      	mov	r3, r1
 800c450:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c458:	78fa      	ldrb	r2, [r7, #3]
 800c45a:	4611      	mov	r1, r2
 800c45c:	4618      	mov	r0, r3
 800c45e:	f7f7 fd7b 	bl	8003f58 <HAL_PCD_EP_GetRxCount>
 800c462:	4603      	mov	r3, r0
}
 800c464:	4618      	mov	r0, r3
 800c466:	3708      	adds	r7, #8
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}

0800c46c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c46c:	b480      	push	{r7}
 800c46e:	b083      	sub	sp, #12
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c474:	4b03      	ldr	r3, [pc, #12]	@ (800c484 <USBD_static_malloc+0x18>)
}
 800c476:	4618      	mov	r0, r3
 800c478:	370c      	adds	r7, #12
 800c47a:	46bd      	mov	sp, r7
 800c47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c480:	4770      	bx	lr
 800c482:	bf00      	nop
 800c484:	200066b0 	.word	0x200066b0

0800c488 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c488:	b480      	push	{r7}
 800c48a:	b083      	sub	sp, #12
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]

}
 800c490:	bf00      	nop
 800c492:	370c      	adds	r7, #12
 800c494:	46bd      	mov	sp, r7
 800c496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49a:	4770      	bx	lr

0800c49c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c49c:	b480      	push	{r7}
 800c49e:	b085      	sub	sp, #20
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c4aa:	79fb      	ldrb	r3, [r7, #7]
 800c4ac:	2b03      	cmp	r3, #3
 800c4ae:	d817      	bhi.n	800c4e0 <USBD_Get_USB_Status+0x44>
 800c4b0:	a201      	add	r2, pc, #4	@ (adr r2, 800c4b8 <USBD_Get_USB_Status+0x1c>)
 800c4b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4b6:	bf00      	nop
 800c4b8:	0800c4c9 	.word	0x0800c4c9
 800c4bc:	0800c4cf 	.word	0x0800c4cf
 800c4c0:	0800c4d5 	.word	0x0800c4d5
 800c4c4:	0800c4db 	.word	0x0800c4db
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	73fb      	strb	r3, [r7, #15]
    break;
 800c4cc:	e00b      	b.n	800c4e6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c4ce:	2303      	movs	r3, #3
 800c4d0:	73fb      	strb	r3, [r7, #15]
    break;
 800c4d2:	e008      	b.n	800c4e6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c4d4:	2301      	movs	r3, #1
 800c4d6:	73fb      	strb	r3, [r7, #15]
    break;
 800c4d8:	e005      	b.n	800c4e6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c4da:	2303      	movs	r3, #3
 800c4dc:	73fb      	strb	r3, [r7, #15]
    break;
 800c4de:	e002      	b.n	800c4e6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c4e0:	2303      	movs	r3, #3
 800c4e2:	73fb      	strb	r3, [r7, #15]
    break;
 800c4e4:	bf00      	nop
  }
  return usb_status;
 800c4e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	3714      	adds	r7, #20
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f2:	4770      	bx	lr

0800c4f4 <memset>:
 800c4f4:	4402      	add	r2, r0
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	4293      	cmp	r3, r2
 800c4fa:	d100      	bne.n	800c4fe <memset+0xa>
 800c4fc:	4770      	bx	lr
 800c4fe:	f803 1b01 	strb.w	r1, [r3], #1
 800c502:	e7f9      	b.n	800c4f8 <memset+0x4>

0800c504 <_reclaim_reent>:
 800c504:	4b29      	ldr	r3, [pc, #164]	@ (800c5ac <_reclaim_reent+0xa8>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	4283      	cmp	r3, r0
 800c50a:	b570      	push	{r4, r5, r6, lr}
 800c50c:	4604      	mov	r4, r0
 800c50e:	d04b      	beq.n	800c5a8 <_reclaim_reent+0xa4>
 800c510:	69c3      	ldr	r3, [r0, #28]
 800c512:	b1ab      	cbz	r3, 800c540 <_reclaim_reent+0x3c>
 800c514:	68db      	ldr	r3, [r3, #12]
 800c516:	b16b      	cbz	r3, 800c534 <_reclaim_reent+0x30>
 800c518:	2500      	movs	r5, #0
 800c51a:	69e3      	ldr	r3, [r4, #28]
 800c51c:	68db      	ldr	r3, [r3, #12]
 800c51e:	5959      	ldr	r1, [r3, r5]
 800c520:	2900      	cmp	r1, #0
 800c522:	d13b      	bne.n	800c59c <_reclaim_reent+0x98>
 800c524:	3504      	adds	r5, #4
 800c526:	2d80      	cmp	r5, #128	@ 0x80
 800c528:	d1f7      	bne.n	800c51a <_reclaim_reent+0x16>
 800c52a:	69e3      	ldr	r3, [r4, #28]
 800c52c:	4620      	mov	r0, r4
 800c52e:	68d9      	ldr	r1, [r3, #12]
 800c530:	f000 f872 	bl	800c618 <_free_r>
 800c534:	69e3      	ldr	r3, [r4, #28]
 800c536:	6819      	ldr	r1, [r3, #0]
 800c538:	b111      	cbz	r1, 800c540 <_reclaim_reent+0x3c>
 800c53a:	4620      	mov	r0, r4
 800c53c:	f000 f86c 	bl	800c618 <_free_r>
 800c540:	6961      	ldr	r1, [r4, #20]
 800c542:	b111      	cbz	r1, 800c54a <_reclaim_reent+0x46>
 800c544:	4620      	mov	r0, r4
 800c546:	f000 f867 	bl	800c618 <_free_r>
 800c54a:	69e1      	ldr	r1, [r4, #28]
 800c54c:	b111      	cbz	r1, 800c554 <_reclaim_reent+0x50>
 800c54e:	4620      	mov	r0, r4
 800c550:	f000 f862 	bl	800c618 <_free_r>
 800c554:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c556:	b111      	cbz	r1, 800c55e <_reclaim_reent+0x5a>
 800c558:	4620      	mov	r0, r4
 800c55a:	f000 f85d 	bl	800c618 <_free_r>
 800c55e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c560:	b111      	cbz	r1, 800c568 <_reclaim_reent+0x64>
 800c562:	4620      	mov	r0, r4
 800c564:	f000 f858 	bl	800c618 <_free_r>
 800c568:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800c56a:	b111      	cbz	r1, 800c572 <_reclaim_reent+0x6e>
 800c56c:	4620      	mov	r0, r4
 800c56e:	f000 f853 	bl	800c618 <_free_r>
 800c572:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c574:	b111      	cbz	r1, 800c57c <_reclaim_reent+0x78>
 800c576:	4620      	mov	r0, r4
 800c578:	f000 f84e 	bl	800c618 <_free_r>
 800c57c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800c57e:	b111      	cbz	r1, 800c586 <_reclaim_reent+0x82>
 800c580:	4620      	mov	r0, r4
 800c582:	f000 f849 	bl	800c618 <_free_r>
 800c586:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c588:	b111      	cbz	r1, 800c590 <_reclaim_reent+0x8c>
 800c58a:	4620      	mov	r0, r4
 800c58c:	f000 f844 	bl	800c618 <_free_r>
 800c590:	6a23      	ldr	r3, [r4, #32]
 800c592:	b14b      	cbz	r3, 800c5a8 <_reclaim_reent+0xa4>
 800c594:	4620      	mov	r0, r4
 800c596:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c59a:	4718      	bx	r3
 800c59c:	680e      	ldr	r6, [r1, #0]
 800c59e:	4620      	mov	r0, r4
 800c5a0:	f000 f83a 	bl	800c618 <_free_r>
 800c5a4:	4631      	mov	r1, r6
 800c5a6:	e7bb      	b.n	800c520 <_reclaim_reent+0x1c>
 800c5a8:	bd70      	pop	{r4, r5, r6, pc}
 800c5aa:	bf00      	nop
 800c5ac:	20000100 	.word	0x20000100

0800c5b0 <__libc_init_array>:
 800c5b0:	b570      	push	{r4, r5, r6, lr}
 800c5b2:	4d0d      	ldr	r5, [pc, #52]	@ (800c5e8 <__libc_init_array+0x38>)
 800c5b4:	4c0d      	ldr	r4, [pc, #52]	@ (800c5ec <__libc_init_array+0x3c>)
 800c5b6:	1b64      	subs	r4, r4, r5
 800c5b8:	10a4      	asrs	r4, r4, #2
 800c5ba:	2600      	movs	r6, #0
 800c5bc:	42a6      	cmp	r6, r4
 800c5be:	d109      	bne.n	800c5d4 <__libc_init_array+0x24>
 800c5c0:	4d0b      	ldr	r5, [pc, #44]	@ (800c5f0 <__libc_init_array+0x40>)
 800c5c2:	4c0c      	ldr	r4, [pc, #48]	@ (800c5f4 <__libc_init_array+0x44>)
 800c5c4:	f000 f87e 	bl	800c6c4 <_init>
 800c5c8:	1b64      	subs	r4, r4, r5
 800c5ca:	10a4      	asrs	r4, r4, #2
 800c5cc:	2600      	movs	r6, #0
 800c5ce:	42a6      	cmp	r6, r4
 800c5d0:	d105      	bne.n	800c5de <__libc_init_array+0x2e>
 800c5d2:	bd70      	pop	{r4, r5, r6, pc}
 800c5d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5d8:	4798      	blx	r3
 800c5da:	3601      	adds	r6, #1
 800c5dc:	e7ee      	b.n	800c5bc <__libc_init_array+0xc>
 800c5de:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5e2:	4798      	blx	r3
 800c5e4:	3601      	adds	r6, #1
 800c5e6:	e7f2      	b.n	800c5ce <__libc_init_array+0x1e>
 800c5e8:	0800c7cc 	.word	0x0800c7cc
 800c5ec:	0800c7cc 	.word	0x0800c7cc
 800c5f0:	0800c7cc 	.word	0x0800c7cc
 800c5f4:	0800c7d0 	.word	0x0800c7d0

0800c5f8 <__retarget_lock_acquire_recursive>:
 800c5f8:	4770      	bx	lr

0800c5fa <__retarget_lock_release_recursive>:
 800c5fa:	4770      	bx	lr

0800c5fc <memcpy>:
 800c5fc:	440a      	add	r2, r1
 800c5fe:	4291      	cmp	r1, r2
 800c600:	f100 33ff 	add.w	r3, r0, #4294967295
 800c604:	d100      	bne.n	800c608 <memcpy+0xc>
 800c606:	4770      	bx	lr
 800c608:	b510      	push	{r4, lr}
 800c60a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c60e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c612:	4291      	cmp	r1, r2
 800c614:	d1f9      	bne.n	800c60a <memcpy+0xe>
 800c616:	bd10      	pop	{r4, pc}

0800c618 <_free_r>:
 800c618:	b538      	push	{r3, r4, r5, lr}
 800c61a:	4605      	mov	r5, r0
 800c61c:	2900      	cmp	r1, #0
 800c61e:	d041      	beq.n	800c6a4 <_free_r+0x8c>
 800c620:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c624:	1f0c      	subs	r4, r1, #4
 800c626:	2b00      	cmp	r3, #0
 800c628:	bfb8      	it	lt
 800c62a:	18e4      	addlt	r4, r4, r3
 800c62c:	f000 f83e 	bl	800c6ac <__malloc_lock>
 800c630:	4a1d      	ldr	r2, [pc, #116]	@ (800c6a8 <_free_r+0x90>)
 800c632:	6813      	ldr	r3, [r2, #0]
 800c634:	b933      	cbnz	r3, 800c644 <_free_r+0x2c>
 800c636:	6063      	str	r3, [r4, #4]
 800c638:	6014      	str	r4, [r2, #0]
 800c63a:	4628      	mov	r0, r5
 800c63c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c640:	f000 b83a 	b.w	800c6b8 <__malloc_unlock>
 800c644:	42a3      	cmp	r3, r4
 800c646:	d908      	bls.n	800c65a <_free_r+0x42>
 800c648:	6820      	ldr	r0, [r4, #0]
 800c64a:	1821      	adds	r1, r4, r0
 800c64c:	428b      	cmp	r3, r1
 800c64e:	bf01      	itttt	eq
 800c650:	6819      	ldreq	r1, [r3, #0]
 800c652:	685b      	ldreq	r3, [r3, #4]
 800c654:	1809      	addeq	r1, r1, r0
 800c656:	6021      	streq	r1, [r4, #0]
 800c658:	e7ed      	b.n	800c636 <_free_r+0x1e>
 800c65a:	461a      	mov	r2, r3
 800c65c:	685b      	ldr	r3, [r3, #4]
 800c65e:	b10b      	cbz	r3, 800c664 <_free_r+0x4c>
 800c660:	42a3      	cmp	r3, r4
 800c662:	d9fa      	bls.n	800c65a <_free_r+0x42>
 800c664:	6811      	ldr	r1, [r2, #0]
 800c666:	1850      	adds	r0, r2, r1
 800c668:	42a0      	cmp	r0, r4
 800c66a:	d10b      	bne.n	800c684 <_free_r+0x6c>
 800c66c:	6820      	ldr	r0, [r4, #0]
 800c66e:	4401      	add	r1, r0
 800c670:	1850      	adds	r0, r2, r1
 800c672:	4283      	cmp	r3, r0
 800c674:	6011      	str	r1, [r2, #0]
 800c676:	d1e0      	bne.n	800c63a <_free_r+0x22>
 800c678:	6818      	ldr	r0, [r3, #0]
 800c67a:	685b      	ldr	r3, [r3, #4]
 800c67c:	6053      	str	r3, [r2, #4]
 800c67e:	4408      	add	r0, r1
 800c680:	6010      	str	r0, [r2, #0]
 800c682:	e7da      	b.n	800c63a <_free_r+0x22>
 800c684:	d902      	bls.n	800c68c <_free_r+0x74>
 800c686:	230c      	movs	r3, #12
 800c688:	602b      	str	r3, [r5, #0]
 800c68a:	e7d6      	b.n	800c63a <_free_r+0x22>
 800c68c:	6820      	ldr	r0, [r4, #0]
 800c68e:	1821      	adds	r1, r4, r0
 800c690:	428b      	cmp	r3, r1
 800c692:	bf04      	itt	eq
 800c694:	6819      	ldreq	r1, [r3, #0]
 800c696:	685b      	ldreq	r3, [r3, #4]
 800c698:	6063      	str	r3, [r4, #4]
 800c69a:	bf04      	itt	eq
 800c69c:	1809      	addeq	r1, r1, r0
 800c69e:	6021      	streq	r1, [r4, #0]
 800c6a0:	6054      	str	r4, [r2, #4]
 800c6a2:	e7ca      	b.n	800c63a <_free_r+0x22>
 800c6a4:	bd38      	pop	{r3, r4, r5, pc}
 800c6a6:	bf00      	nop
 800c6a8:	20006a0c 	.word	0x20006a0c

0800c6ac <__malloc_lock>:
 800c6ac:	4801      	ldr	r0, [pc, #4]	@ (800c6b4 <__malloc_lock+0x8>)
 800c6ae:	f7ff bfa3 	b.w	800c5f8 <__retarget_lock_acquire_recursive>
 800c6b2:	bf00      	nop
 800c6b4:	20006a08 	.word	0x20006a08

0800c6b8 <__malloc_unlock>:
 800c6b8:	4801      	ldr	r0, [pc, #4]	@ (800c6c0 <__malloc_unlock+0x8>)
 800c6ba:	f7ff bf9e 	b.w	800c5fa <__retarget_lock_release_recursive>
 800c6be:	bf00      	nop
 800c6c0:	20006a08 	.word	0x20006a08

0800c6c4 <_init>:
 800c6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6c6:	bf00      	nop
 800c6c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6ca:	bc08      	pop	{r3}
 800c6cc:	469e      	mov	lr, r3
 800c6ce:	4770      	bx	lr

0800c6d0 <_fini>:
 800c6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6d2:	bf00      	nop
 800c6d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6d6:	bc08      	pop	{r3}
 800c6d8:	469e      	mov	lr, r3
 800c6da:	4770      	bx	lr
