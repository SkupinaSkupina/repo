
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a414  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800a5b4  0800a5b4  0001a5b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a62c  0800a62c  00020104  2**0
                  CONTENTS
  4 .ARM          00000008  0800a62c  0800a62c  0001a62c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a634  0800a634  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a634  0800a634  0001a634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a638  0800a638  0001a638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  0800a63c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014b0c  20000104  0800a740  00020104  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014c10  0800a740  00024c10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ae15  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044ae  00000000  00000000  0003af49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f8  00000000  00000000  0003f3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001528  00000000  00000000  00040af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b2e0  00000000  00000000  00042018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001da4c  00000000  00000000  0005d2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000971d3  00000000  00000000  0007ad44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00111f17  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f44  00000000  00000000  00111f68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000104 	.word	0x20000104
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a59c 	.word	0x0800a59c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000108 	.word	0x20000108
 80001dc:	0800a59c 	.word	0x0800a59c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e8:	f000 fc20 	bl	8000d2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ec:	f000 f812 	bl	8000514 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004f0:	f000 f878 	bl	80005e4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f4:	f000 f958 	bl	80007a8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004f8:	f000 f894 	bl	8000624 <MX_I2C1_Init>
  MX_I2S2_Init();
 80004fc:	f000 f8c0 	bl	8000680 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000500:	f000 f8ec 	bl	80006dc <MX_I2S3_Init>
  MX_SPI1_Init();
 8000504:	f000 f91a 	bl	800073c <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000508:	f009 fb16 	bl	8009b38 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  vTaskStartScheduler();
 800050c:	f005 ff38 	bl	8006380 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000510:	e7fe      	b.n	8000510 <main+0x2c>
	...

08000514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b094      	sub	sp, #80	; 0x50
 8000518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	f107 0320 	add.w	r3, r7, #32
 800051e:	2230      	movs	r2, #48	; 0x30
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f00a f832 	bl	800a58c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000528:	f107 030c 	add.w	r3, r7, #12
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]
 8000536:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000538:	2300      	movs	r3, #0
 800053a:	60bb      	str	r3, [r7, #8]
 800053c:	4b27      	ldr	r3, [pc, #156]	; (80005dc <SystemClock_Config+0xc8>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000540:	4a26      	ldr	r2, [pc, #152]	; (80005dc <SystemClock_Config+0xc8>)
 8000542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000546:	6413      	str	r3, [r2, #64]	; 0x40
 8000548:	4b24      	ldr	r3, [pc, #144]	; (80005dc <SystemClock_Config+0xc8>)
 800054a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800054c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000554:	2300      	movs	r3, #0
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	4b21      	ldr	r3, [pc, #132]	; (80005e0 <SystemClock_Config+0xcc>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a20      	ldr	r2, [pc, #128]	; (80005e0 <SystemClock_Config+0xcc>)
 800055e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000562:	6013      	str	r3, [r2, #0]
 8000564:	4b1e      	ldr	r3, [pc, #120]	; (80005e0 <SystemClock_Config+0xcc>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000570:	2301      	movs	r3, #1
 8000572:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000574:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000578:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057a:	2302      	movs	r3, #2
 800057c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800057e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000582:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000584:	2304      	movs	r3, #4
 8000586:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000588:	23c0      	movs	r3, #192	; 0xc0
 800058a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800058c:	2304      	movs	r3, #4
 800058e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000590:	2308      	movs	r3, #8
 8000592:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000594:	f107 0320 	add.w	r3, r7, #32
 8000598:	4618      	mov	r0, r3
 800059a:	f002 ff5b 	bl	8003454 <HAL_RCC_OscConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005a4:	f000 f9da 	bl	800095c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a8:	230f      	movs	r3, #15
 80005aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ac:	2302      	movs	r3, #2
 80005ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005be:	f107 030c 	add.w	r3, r7, #12
 80005c2:	2103      	movs	r1, #3
 80005c4:	4618      	mov	r0, r3
 80005c6:	f003 f9bd 	bl	8003944 <HAL_RCC_ClockConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005d0:	f000 f9c4 	bl	800095c <Error_Handler>
  }
}
 80005d4:	bf00      	nop
 80005d6:	3750      	adds	r7, #80	; 0x50
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40023800 	.word	0x40023800
 80005e0:	40007000 	.word	0x40007000

080005e4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005ea:	463b      	mov	r3, r7
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]
 80005f8:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80005fa:	2301      	movs	r3, #1
 80005fc:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80005fe:	23c8      	movs	r3, #200	; 0xc8
 8000600:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000602:	2305      	movs	r3, #5
 8000604:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000606:	2302      	movs	r3, #2
 8000608:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800060a:	463b      	mov	r3, r7
 800060c:	4618      	mov	r0, r3
 800060e:	f003 fba5 	bl	8003d5c <HAL_RCCEx_PeriphCLKConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000618:	f000 f9a0 	bl	800095c <Error_Handler>
  }
}
 800061c:	bf00      	nop
 800061e:	3718      	adds	r7, #24
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000628:	4b12      	ldr	r3, [pc, #72]	; (8000674 <MX_I2C1_Init+0x50>)
 800062a:	4a13      	ldr	r2, [pc, #76]	; (8000678 <MX_I2C1_Init+0x54>)
 800062c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800062e:	4b11      	ldr	r3, [pc, #68]	; (8000674 <MX_I2C1_Init+0x50>)
 8000630:	4a12      	ldr	r2, [pc, #72]	; (800067c <MX_I2C1_Init+0x58>)
 8000632:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000634:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <MX_I2C1_Init+0x50>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800063a:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <MX_I2C1_Init+0x50>)
 800063c:	2200      	movs	r2, #0
 800063e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000640:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <MX_I2C1_Init+0x50>)
 8000642:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000646:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000648:	4b0a      	ldr	r3, [pc, #40]	; (8000674 <MX_I2C1_Init+0x50>)
 800064a:	2200      	movs	r2, #0
 800064c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800064e:	4b09      	ldr	r3, [pc, #36]	; (8000674 <MX_I2C1_Init+0x50>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000654:	4b07      	ldr	r3, [pc, #28]	; (8000674 <MX_I2C1_Init+0x50>)
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800065a:	4b06      	ldr	r3, [pc, #24]	; (8000674 <MX_I2C1_Init+0x50>)
 800065c:	2200      	movs	r2, #0
 800065e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000660:	4804      	ldr	r0, [pc, #16]	; (8000674 <MX_I2C1_Init+0x50>)
 8000662:	f000 fe95 	bl	8001390 <HAL_I2C_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800066c:	f000 f976 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000120 	.word	0x20000120
 8000678:	40005400 	.word	0x40005400
 800067c:	000186a0 	.word	0x000186a0

08000680 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000684:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <MX_I2S2_Init+0x50>)
 8000686:	4a13      	ldr	r2, [pc, #76]	; (80006d4 <MX_I2S2_Init+0x54>)
 8000688:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800068a:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <MX_I2S2_Init+0x50>)
 800068c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000690:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000692:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <MX_I2S2_Init+0x50>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000698:	4b0d      	ldr	r3, [pc, #52]	; (80006d0 <MX_I2S2_Init+0x50>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800069e:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <MX_I2S2_Init+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006a4:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <MX_I2S2_Init+0x50>)
 80006a6:	4a0c      	ldr	r2, [pc, #48]	; (80006d8 <MX_I2S2_Init+0x58>)
 80006a8:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80006aa:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <MX_I2S2_Init+0x50>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80006b0:	4b07      	ldr	r3, [pc, #28]	; (80006d0 <MX_I2S2_Init+0x50>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <MX_I2S2_Init+0x50>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80006bc:	4804      	ldr	r0, [pc, #16]	; (80006d0 <MX_I2S2_Init+0x50>)
 80006be:	f000 ffab 	bl	8001618 <HAL_I2S_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80006c8:	f000 f948 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000174 	.word	0x20000174
 80006d4:	40003800 	.word	0x40003800
 80006d8:	00017700 	.word	0x00017700

080006dc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006e0:	4b13      	ldr	r3, [pc, #76]	; (8000730 <MX_I2S3_Init+0x54>)
 80006e2:	4a14      	ldr	r2, [pc, #80]	; (8000734 <MX_I2S3_Init+0x58>)
 80006e4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006e6:	4b12      	ldr	r3, [pc, #72]	; (8000730 <MX_I2S3_Init+0x54>)
 80006e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ec:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006ee:	4b10      	ldr	r3, [pc, #64]	; (8000730 <MX_I2S3_Init+0x54>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006f4:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <MX_I2S3_Init+0x54>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006fa:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <MX_I2S3_Init+0x54>)
 80006fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000700:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000702:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <MX_I2S3_Init+0x54>)
 8000704:	4a0c      	ldr	r2, [pc, #48]	; (8000738 <MX_I2S3_Init+0x5c>)
 8000706:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000708:	4b09      	ldr	r3, [pc, #36]	; (8000730 <MX_I2S3_Init+0x54>)
 800070a:	2200      	movs	r2, #0
 800070c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800070e:	4b08      	ldr	r3, [pc, #32]	; (8000730 <MX_I2S3_Init+0x54>)
 8000710:	2200      	movs	r2, #0
 8000712:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000714:	4b06      	ldr	r3, [pc, #24]	; (8000730 <MX_I2S3_Init+0x54>)
 8000716:	2200      	movs	r2, #0
 8000718:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800071a:	4805      	ldr	r0, [pc, #20]	; (8000730 <MX_I2S3_Init+0x54>)
 800071c:	f000 ff7c 	bl	8001618 <HAL_I2S_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000726:	f000 f919 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	200001bc 	.word	0x200001bc
 8000734:	40003c00 	.word	0x40003c00
 8000738:	00017700 	.word	0x00017700

0800073c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000740:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <MX_SPI1_Init+0x64>)
 8000742:	4a18      	ldr	r2, [pc, #96]	; (80007a4 <MX_SPI1_Init+0x68>)
 8000744:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000746:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <MX_SPI1_Init+0x64>)
 8000748:	f44f 7282 	mov.w	r2, #260	; 0x104
 800074c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800074e:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <MX_SPI1_Init+0x64>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <MX_SPI1_Init+0x64>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_SPI1_Init+0x64>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <MX_SPI1_Init+0x64>)
 8000762:	2200      	movs	r2, #0
 8000764:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <MX_SPI1_Init+0x64>)
 8000768:	f44f 7200 	mov.w	r2, #512	; 0x200
 800076c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800076e:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <MX_SPI1_Init+0x64>)
 8000770:	2200      	movs	r2, #0
 8000772:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000774:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <MX_SPI1_Init+0x64>)
 8000776:	2200      	movs	r2, #0
 8000778:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800077a:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <MX_SPI1_Init+0x64>)
 800077c:	2200      	movs	r2, #0
 800077e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000780:	4b07      	ldr	r3, [pc, #28]	; (80007a0 <MX_SPI1_Init+0x64>)
 8000782:	2200      	movs	r2, #0
 8000784:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000786:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <MX_SPI1_Init+0x64>)
 8000788:	220a      	movs	r2, #10
 800078a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800078c:	4804      	ldr	r0, [pc, #16]	; (80007a0 <MX_SPI1_Init+0x64>)
 800078e:	f003 fc35 	bl	8003ffc <HAL_SPI_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000798:	f000 f8e0 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000204 	.word	0x20000204
 80007a4:	40013000 	.word	0x40013000

080007a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08c      	sub	sp, #48	; 0x30
 80007ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ae:	f107 031c 	add.w	r3, r7, #28
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
 80007bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	61bb      	str	r3, [r7, #24]
 80007c2:	4b61      	ldr	r3, [pc, #388]	; (8000948 <MX_GPIO_Init+0x1a0>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a60      	ldr	r2, [pc, #384]	; (8000948 <MX_GPIO_Init+0x1a0>)
 80007c8:	f043 0310 	orr.w	r3, r3, #16
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b5e      	ldr	r3, [pc, #376]	; (8000948 <MX_GPIO_Init+0x1a0>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0310 	and.w	r3, r3, #16
 80007d6:	61bb      	str	r3, [r7, #24]
 80007d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]
 80007de:	4b5a      	ldr	r3, [pc, #360]	; (8000948 <MX_GPIO_Init+0x1a0>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a59      	ldr	r2, [pc, #356]	; (8000948 <MX_GPIO_Init+0x1a0>)
 80007e4:	f043 0304 	orr.w	r3, r3, #4
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b57      	ldr	r3, [pc, #348]	; (8000948 <MX_GPIO_Init+0x1a0>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0304 	and.w	r3, r3, #4
 80007f2:	617b      	str	r3, [r7, #20]
 80007f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	613b      	str	r3, [r7, #16]
 80007fa:	4b53      	ldr	r3, [pc, #332]	; (8000948 <MX_GPIO_Init+0x1a0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a52      	ldr	r2, [pc, #328]	; (8000948 <MX_GPIO_Init+0x1a0>)
 8000800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b50      	ldr	r3, [pc, #320]	; (8000948 <MX_GPIO_Init+0x1a0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	4b4c      	ldr	r3, [pc, #304]	; (8000948 <MX_GPIO_Init+0x1a0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a4b      	ldr	r2, [pc, #300]	; (8000948 <MX_GPIO_Init+0x1a0>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b49      	ldr	r3, [pc, #292]	; (8000948 <MX_GPIO_Init+0x1a0>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	60bb      	str	r3, [r7, #8]
 8000832:	4b45      	ldr	r3, [pc, #276]	; (8000948 <MX_GPIO_Init+0x1a0>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a44      	ldr	r2, [pc, #272]	; (8000948 <MX_GPIO_Init+0x1a0>)
 8000838:	f043 0302 	orr.w	r3, r3, #2
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b42      	ldr	r3, [pc, #264]	; (8000948 <MX_GPIO_Init+0x1a0>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	4b3e      	ldr	r3, [pc, #248]	; (8000948 <MX_GPIO_Init+0x1a0>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a3d      	ldr	r2, [pc, #244]	; (8000948 <MX_GPIO_Init+0x1a0>)
 8000854:	f043 0308 	orr.w	r3, r3, #8
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b3b      	ldr	r3, [pc, #236]	; (8000948 <MX_GPIO_Init+0x1a0>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0308 	and.w	r3, r3, #8
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	2108      	movs	r1, #8
 800086a:	4838      	ldr	r0, [pc, #224]	; (800094c <MX_GPIO_Init+0x1a4>)
 800086c:	f000 fd76 	bl	800135c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000870:	2201      	movs	r2, #1
 8000872:	2101      	movs	r1, #1
 8000874:	4836      	ldr	r0, [pc, #216]	; (8000950 <MX_GPIO_Init+0x1a8>)
 8000876:	f000 fd71 	bl	800135c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800087a:	2200      	movs	r2, #0
 800087c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000880:	4834      	ldr	r0, [pc, #208]	; (8000954 <MX_GPIO_Init+0x1ac>)
 8000882:	f000 fd6b 	bl	800135c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000886:	2304      	movs	r3, #4
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088a:	2300      	movs	r3, #0
 800088c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	4619      	mov	r1, r3
 8000898:	482c      	ldr	r0, [pc, #176]	; (800094c <MX_GPIO_Init+0x1a4>)
 800089a:	f000 fbdb 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800089e:	2308      	movs	r3, #8
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a2:	2301      	movs	r3, #1
 80008a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	4619      	mov	r1, r3
 80008b4:	4825      	ldr	r0, [pc, #148]	; (800094c <MX_GPIO_Init+0x1a4>)
 80008b6:	f000 fbcd 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80008ba:	2332      	movs	r3, #50	; 0x32
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008be:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	481f      	ldr	r0, [pc, #124]	; (800094c <MX_GPIO_Init+0x1a4>)
 80008d0:	f000 fbc0 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008d4:	2301      	movs	r3, #1
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d8:	2301      	movs	r3, #1
 80008da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e0:	2300      	movs	r3, #0
 80008e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	4619      	mov	r1, r3
 80008ea:	4819      	ldr	r0, [pc, #100]	; (8000950 <MX_GPIO_Init+0x1a8>)
 80008ec:	f000 fbb2 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008f0:	2301      	movs	r3, #1
 80008f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008f4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	4814      	ldr	r0, [pc, #80]	; (8000958 <MX_GPIO_Init+0x1b0>)
 8000906:	f000 fba5 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800090a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800090e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000910:	2301      	movs	r3, #1
 8000912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	4619      	mov	r1, r3
 8000922:	480c      	ldr	r0, [pc, #48]	; (8000954 <MX_GPIO_Init+0x1ac>)
 8000924:	f000 fb96 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000928:	2320      	movs	r3, #32
 800092a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	4619      	mov	r1, r3
 800093a:	4806      	ldr	r0, [pc, #24]	; (8000954 <MX_GPIO_Init+0x1ac>)
 800093c:	f000 fb8a 	bl	8001054 <HAL_GPIO_Init>

}
 8000940:	bf00      	nop
 8000942:	3730      	adds	r7, #48	; 0x30
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40023800 	.word	0x40023800
 800094c:	40021000 	.word	0x40021000
 8000950:	40020800 	.word	0x40020800
 8000954:	40020c00 	.word	0x40020c00
 8000958:	40020000 	.word	0x40020000

0800095c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000960:	b672      	cpsid	i
}
 8000962:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000964:	e7fe      	b.n	8000964 <Error_Handler+0x8>
	...

08000968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <HAL_MspInit+0x4c>)
 8000974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000976:	4a0f      	ldr	r2, [pc, #60]	; (80009b4 <HAL_MspInit+0x4c>)
 8000978:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800097c:	6453      	str	r3, [r2, #68]	; 0x44
 800097e:	4b0d      	ldr	r3, [pc, #52]	; (80009b4 <HAL_MspInit+0x4c>)
 8000980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	603b      	str	r3, [r7, #0]
 800098e:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <HAL_MspInit+0x4c>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000992:	4a08      	ldr	r2, [pc, #32]	; (80009b4 <HAL_MspInit+0x4c>)
 8000994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000998:	6413      	str	r3, [r2, #64]	; 0x40
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <HAL_MspInit+0x4c>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a2:	603b      	str	r3, [r7, #0]
 80009a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a6:	bf00      	nop
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	40023800 	.word	0x40023800

080009b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08a      	sub	sp, #40	; 0x28
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a19      	ldr	r2, [pc, #100]	; (8000a3c <HAL_I2C_MspInit+0x84>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d12c      	bne.n	8000a34 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	613b      	str	r3, [r7, #16]
 80009de:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <HAL_I2C_MspInit+0x88>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a17      	ldr	r2, [pc, #92]	; (8000a40 <HAL_I2C_MspInit+0x88>)
 80009e4:	f043 0302 	orr.w	r3, r3, #2
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <HAL_I2C_MspInit+0x88>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0302 	and.w	r3, r3, #2
 80009f2:	613b      	str	r3, [r7, #16]
 80009f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009f6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009fc:	2312      	movs	r3, #18
 80009fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a00:	2301      	movs	r3, #1
 8000a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	2300      	movs	r3, #0
 8000a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a08:	2304      	movs	r3, #4
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	4619      	mov	r1, r3
 8000a12:	480c      	ldr	r0, [pc, #48]	; (8000a44 <HAL_I2C_MspInit+0x8c>)
 8000a14:	f000 fb1e 	bl	8001054 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <HAL_I2C_MspInit+0x88>)
 8000a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a20:	4a07      	ldr	r2, [pc, #28]	; (8000a40 <HAL_I2C_MspInit+0x88>)
 8000a22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a26:	6413      	str	r3, [r2, #64]	; 0x40
 8000a28:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <HAL_I2C_MspInit+0x88>)
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a34:	bf00      	nop
 8000a36:	3728      	adds	r7, #40	; 0x28
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40005400 	.word	0x40005400
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40020400 	.word	0x40020400

08000a48 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08e      	sub	sp, #56	; 0x38
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a59      	ldr	r2, [pc, #356]	; (8000bcc <HAL_I2S_MspInit+0x184>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d15b      	bne.n	8000b22 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	623b      	str	r3, [r7, #32]
 8000a6e:	4b58      	ldr	r3, [pc, #352]	; (8000bd0 <HAL_I2S_MspInit+0x188>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a72:	4a57      	ldr	r2, [pc, #348]	; (8000bd0 <HAL_I2S_MspInit+0x188>)
 8000a74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a78:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7a:	4b55      	ldr	r3, [pc, #340]	; (8000bd0 <HAL_I2S_MspInit+0x188>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a82:	623b      	str	r3, [r7, #32]
 8000a84:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	61fb      	str	r3, [r7, #28]
 8000a8a:	4b51      	ldr	r3, [pc, #324]	; (8000bd0 <HAL_I2S_MspInit+0x188>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a50      	ldr	r2, [pc, #320]	; (8000bd0 <HAL_I2S_MspInit+0x188>)
 8000a90:	f043 0304 	orr.w	r3, r3, #4
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b4e      	ldr	r3, [pc, #312]	; (8000bd0 <HAL_I2S_MspInit+0x188>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0304 	and.w	r3, r3, #4
 8000a9e:	61fb      	str	r3, [r7, #28]
 8000aa0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61bb      	str	r3, [r7, #24]
 8000aa6:	4b4a      	ldr	r3, [pc, #296]	; (8000bd0 <HAL_I2S_MspInit+0x188>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a49      	ldr	r2, [pc, #292]	; (8000bd0 <HAL_I2S_MspInit+0x188>)
 8000aac:	f043 0302 	orr.w	r3, r3, #2
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b47      	ldr	r3, [pc, #284]	; (8000bd0 <HAL_I2S_MspInit+0x188>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0302 	and.w	r3, r3, #2
 8000aba:	61bb      	str	r3, [r7, #24]
 8000abc:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000abe:	2304      	movs	r3, #4
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aca:	2300      	movs	r3, #0
 8000acc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000ace:	2306      	movs	r3, #6
 8000ad0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	483e      	ldr	r0, [pc, #248]	; (8000bd4 <HAL_I2S_MspInit+0x18c>)
 8000ada:	f000 fabb 	bl	8001054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000ade:	2308      	movs	r3, #8
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	2300      	movs	r3, #0
 8000aec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000aee:	2305      	movs	r3, #5
 8000af0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000af2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af6:	4619      	mov	r1, r3
 8000af8:	4836      	ldr	r0, [pc, #216]	; (8000bd4 <HAL_I2S_MspInit+0x18c>)
 8000afa:	f000 faab 	bl	8001054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000afe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b04:	2302      	movs	r3, #2
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b10:	2305      	movs	r3, #5
 8000b12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b18:	4619      	mov	r1, r3
 8000b1a:	482f      	ldr	r0, [pc, #188]	; (8000bd8 <HAL_I2S_MspInit+0x190>)
 8000b1c:	f000 fa9a 	bl	8001054 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b20:	e04f      	b.n	8000bc2 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a2d      	ldr	r2, [pc, #180]	; (8000bdc <HAL_I2S_MspInit+0x194>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d14a      	bne.n	8000bc2 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	617b      	str	r3, [r7, #20]
 8000b30:	4b27      	ldr	r3, [pc, #156]	; (8000bd0 <HAL_I2S_MspInit+0x188>)
 8000b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b34:	4a26      	ldr	r2, [pc, #152]	; (8000bd0 <HAL_I2S_MspInit+0x188>)
 8000b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3c:	4b24      	ldr	r3, [pc, #144]	; (8000bd0 <HAL_I2S_MspInit+0x188>)
 8000b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b44:	617b      	str	r3, [r7, #20]
 8000b46:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b48:	2300      	movs	r3, #0
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	4b20      	ldr	r3, [pc, #128]	; (8000bd0 <HAL_I2S_MspInit+0x188>)
 8000b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b50:	4a1f      	ldr	r2, [pc, #124]	; (8000bd0 <HAL_I2S_MspInit+0x188>)
 8000b52:	f043 0301 	orr.w	r3, r3, #1
 8000b56:	6313      	str	r3, [r2, #48]	; 0x30
 8000b58:	4b1d      	ldr	r3, [pc, #116]	; (8000bd0 <HAL_I2S_MspInit+0x188>)
 8000b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5c:	f003 0301 	and.w	r3, r3, #1
 8000b60:	613b      	str	r3, [r7, #16]
 8000b62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b64:	2300      	movs	r3, #0
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <HAL_I2S_MspInit+0x188>)
 8000b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6c:	4a18      	ldr	r2, [pc, #96]	; (8000bd0 <HAL_I2S_MspInit+0x188>)
 8000b6e:	f043 0304 	orr.w	r3, r3, #4
 8000b72:	6313      	str	r3, [r2, #48]	; 0x30
 8000b74:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <HAL_I2S_MspInit+0x188>)
 8000b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b78:	f003 0304 	and.w	r3, r3, #4
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b80:	2310      	movs	r3, #16
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b84:	2302      	movs	r3, #2
 8000b86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b90:	2306      	movs	r3, #6
 8000b92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4811      	ldr	r0, [pc, #68]	; (8000be0 <HAL_I2S_MspInit+0x198>)
 8000b9c:	f000 fa5a 	bl	8001054 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ba0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bb2:	2306      	movs	r3, #6
 8000bb4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <HAL_I2S_MspInit+0x18c>)
 8000bbe:	f000 fa49 	bl	8001054 <HAL_GPIO_Init>
}
 8000bc2:	bf00      	nop
 8000bc4:	3738      	adds	r7, #56	; 0x38
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40003800 	.word	0x40003800
 8000bd0:	40023800 	.word	0x40023800
 8000bd4:	40020800 	.word	0x40020800
 8000bd8:	40020400 	.word	0x40020400
 8000bdc:	40003c00 	.word	0x40003c00
 8000be0:	40020000 	.word	0x40020000

08000be4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a19      	ldr	r2, [pc, #100]	; (8000c68 <HAL_SPI_MspInit+0x84>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d12b      	bne.n	8000c5e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	613b      	str	r3, [r7, #16]
 8000c0a:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <HAL_SPI_MspInit+0x88>)
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0e:	4a17      	ldr	r2, [pc, #92]	; (8000c6c <HAL_SPI_MspInit+0x88>)
 8000c10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c14:	6453      	str	r3, [r2, #68]	; 0x44
 8000c16:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <HAL_SPI_MspInit+0x88>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <HAL_SPI_MspInit+0x88>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a10      	ldr	r2, [pc, #64]	; (8000c6c <HAL_SPI_MspInit+0x88>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <HAL_SPI_MspInit+0x88>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c3e:	23e0      	movs	r3, #224	; 0xe0
 8000c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c42:	2302      	movs	r3, #2
 8000c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c4e:	2305      	movs	r3, #5
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	4619      	mov	r1, r3
 8000c58:	4805      	ldr	r0, [pc, #20]	; (8000c70 <HAL_SPI_MspInit+0x8c>)
 8000c5a:	f000 f9fb 	bl	8001054 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c5e:	bf00      	nop
 8000c60:	3728      	adds	r7, #40	; 0x28
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40013000 	.word	0x40013000
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40020000 	.word	0x40020000

08000c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <NMI_Handler+0x4>

08000c7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c7e:	e7fe      	b.n	8000c7e <HardFault_Handler+0x4>

08000c80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <MemManage_Handler+0x4>

08000c86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c8a:	e7fe      	b.n	8000c8a <BusFault_Handler+0x4>

08000c8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <UsageFault_Handler+0x4>

08000c92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ca4:	4802      	ldr	r0, [pc, #8]	; (8000cb0 <OTG_FS_IRQHandler+0x10>)
 8000ca6:	f001 faa7 	bl	80021f8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	200144e4 	.word	0x200144e4

08000cb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <SystemInit+0x20>)
 8000cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cbe:	4a05      	ldr	r2, [pc, #20]	; (8000cd4 <SystemInit+0x20>)
 8000cc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cdc:	480d      	ldr	r0, [pc, #52]	; (8000d14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cde:	490e      	ldr	r1, [pc, #56]	; (8000d18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ce0:	4a0e      	ldr	r2, [pc, #56]	; (8000d1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce4:	e002      	b.n	8000cec <LoopCopyDataInit>

08000ce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cea:	3304      	adds	r3, #4

08000cec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf0:	d3f9      	bcc.n	8000ce6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cf2:	4a0b      	ldr	r2, [pc, #44]	; (8000d20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cf4:	4c0b      	ldr	r4, [pc, #44]	; (8000d24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf8:	e001      	b.n	8000cfe <LoopFillZerobss>

08000cfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cfc:	3204      	adds	r2, #4

08000cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d00:	d3fb      	bcc.n	8000cfa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d02:	f7ff ffd7 	bl	8000cb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d06:	f009 fc0f 	bl	800a528 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d0a:	f7ff fbeb 	bl	80004e4 <main>
  bx  lr    
 8000d0e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d18:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8000d1c:	0800a63c 	.word	0x0800a63c
  ldr r2, =_sbss
 8000d20:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8000d24:	20014c10 	.word	0x20014c10

08000d28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d28:	e7fe      	b.n	8000d28 <ADC_IRQHandler>
	...

08000d2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d30:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <HAL_Init+0x40>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a0d      	ldr	r2, [pc, #52]	; (8000d6c <HAL_Init+0x40>)
 8000d36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <HAL_Init+0x40>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <HAL_Init+0x40>)
 8000d42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d48:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <HAL_Init+0x40>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a07      	ldr	r2, [pc, #28]	; (8000d6c <HAL_Init+0x40>)
 8000d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d54:	2003      	movs	r0, #3
 8000d56:	f000 f93b 	bl	8000fd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	f000 f808 	bl	8000d70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d60:	f7ff fe02 	bl	8000968 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40023c00 	.word	0x40023c00

08000d70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <HAL_InitTick+0x54>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <HAL_InitTick+0x58>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	4619      	mov	r1, r3
 8000d82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 f953 	bl	800103a <HAL_SYSTICK_Config>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e00e      	b.n	8000dbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2b0f      	cmp	r3, #15
 8000da2:	d80a      	bhi.n	8000dba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da4:	2200      	movs	r2, #0
 8000da6:	6879      	ldr	r1, [r7, #4]
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dac:	f000 f91b 	bl	8000fe6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db0:	4a06      	ldr	r2, [pc, #24]	; (8000dcc <HAL_InitTick+0x5c>)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000db6:	2300      	movs	r3, #0
 8000db8:	e000      	b.n	8000dbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000000 	.word	0x20000000
 8000dc8:	20000008 	.word	0x20000008
 8000dcc:	20000004 	.word	0x20000004

08000dd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd4:	4b03      	ldr	r3, [pc, #12]	; (8000de4 <HAL_GetTick+0x14>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	2000025c 	.word	0x2000025c

08000de8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000df0:	f7ff ffee 	bl	8000dd0 <HAL_GetTick>
 8000df4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e00:	d005      	beq.n	8000e0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e02:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <HAL_Delay+0x44>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	461a      	mov	r2, r3
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e0e:	bf00      	nop
 8000e10:	f7ff ffde 	bl	8000dd0 <HAL_GetTick>
 8000e14:	4602      	mov	r2, r0
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	68fa      	ldr	r2, [r7, #12]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d8f7      	bhi.n	8000e10 <HAL_Delay+0x28>
  {
  }
}
 8000e20:	bf00      	nop
 8000e22:	bf00      	nop
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000008 	.word	0x20000008

08000e30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e40:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <__NVIC_SetPriorityGrouping+0x44>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e46:	68ba      	ldr	r2, [r7, #8]
 8000e48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e62:	4a04      	ldr	r2, [pc, #16]	; (8000e74 <__NVIC_SetPriorityGrouping+0x44>)
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	60d3      	str	r3, [r2, #12]
}
 8000e68:	bf00      	nop
 8000e6a:	3714      	adds	r7, #20
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e7c:	4b04      	ldr	r3, [pc, #16]	; (8000e90 <__NVIC_GetPriorityGrouping+0x18>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	0a1b      	lsrs	r3, r3, #8
 8000e82:	f003 0307 	and.w	r3, r3, #7
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	db0b      	blt.n	8000ebe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	f003 021f 	and.w	r2, r3, #31
 8000eac:	4907      	ldr	r1, [pc, #28]	; (8000ecc <__NVIC_EnableIRQ+0x38>)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	095b      	lsrs	r3, r3, #5
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	e000e100 	.word	0xe000e100

08000ed0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	6039      	str	r1, [r7, #0]
 8000eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	db0a      	blt.n	8000efa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	490c      	ldr	r1, [pc, #48]	; (8000f1c <__NVIC_SetPriority+0x4c>)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	0112      	lsls	r2, r2, #4
 8000ef0:	b2d2      	uxtb	r2, r2
 8000ef2:	440b      	add	r3, r1
 8000ef4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef8:	e00a      	b.n	8000f10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	4908      	ldr	r1, [pc, #32]	; (8000f20 <__NVIC_SetPriority+0x50>)
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	f003 030f 	and.w	r3, r3, #15
 8000f06:	3b04      	subs	r3, #4
 8000f08:	0112      	lsls	r2, r2, #4
 8000f0a:	b2d2      	uxtb	r2, r2
 8000f0c:	440b      	add	r3, r1
 8000f0e:	761a      	strb	r2, [r3, #24]
}
 8000f10:	bf00      	nop
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	e000e100 	.word	0xe000e100
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b089      	sub	sp, #36	; 0x24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	f1c3 0307 	rsb	r3, r3, #7
 8000f3e:	2b04      	cmp	r3, #4
 8000f40:	bf28      	it	cs
 8000f42:	2304      	movcs	r3, #4
 8000f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3304      	adds	r3, #4
 8000f4a:	2b06      	cmp	r3, #6
 8000f4c:	d902      	bls.n	8000f54 <NVIC_EncodePriority+0x30>
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3b03      	subs	r3, #3
 8000f52:	e000      	b.n	8000f56 <NVIC_EncodePriority+0x32>
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f58:	f04f 32ff 	mov.w	r2, #4294967295
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43da      	mvns	r2, r3
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	401a      	ands	r2, r3
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	fa01 f303 	lsl.w	r3, r1, r3
 8000f76:	43d9      	mvns	r1, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f7c:	4313      	orrs	r3, r2
         );
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3724      	adds	r7, #36	; 0x24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
	...

08000f8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f9c:	d301      	bcc.n	8000fa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e00f      	b.n	8000fc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fa2:	4a0a      	ldr	r2, [pc, #40]	; (8000fcc <SysTick_Config+0x40>)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000faa:	210f      	movs	r1, #15
 8000fac:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb0:	f7ff ff8e 	bl	8000ed0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb4:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <SysTick_Config+0x40>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fba:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <SysTick_Config+0x40>)
 8000fbc:	2207      	movs	r2, #7
 8000fbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	e000e010 	.word	0xe000e010

08000fd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f7ff ff29 	bl	8000e30 <__NVIC_SetPriorityGrouping>
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b086      	sub	sp, #24
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	4603      	mov	r3, r0
 8000fee:	60b9      	str	r1, [r7, #8]
 8000ff0:	607a      	str	r2, [r7, #4]
 8000ff2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ff8:	f7ff ff3e 	bl	8000e78 <__NVIC_GetPriorityGrouping>
 8000ffc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	68b9      	ldr	r1, [r7, #8]
 8001002:	6978      	ldr	r0, [r7, #20]
 8001004:	f7ff ff8e 	bl	8000f24 <NVIC_EncodePriority>
 8001008:	4602      	mov	r2, r0
 800100a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800100e:	4611      	mov	r1, r2
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff ff5d 	bl	8000ed0 <__NVIC_SetPriority>
}
 8001016:	bf00      	nop
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	4603      	mov	r3, r0
 8001026:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff ff31 	bl	8000e94 <__NVIC_EnableIRQ>
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff ffa2 	bl	8000f8c <SysTick_Config>
 8001048:	4603      	mov	r3, r0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001054:	b480      	push	{r7}
 8001056:	b089      	sub	sp, #36	; 0x24
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001062:	2300      	movs	r3, #0
 8001064:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001066:	2300      	movs	r3, #0
 8001068:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
 800106e:	e159      	b.n	8001324 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001070:	2201      	movs	r2, #1
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	697a      	ldr	r2, [r7, #20]
 8001080:	4013      	ands	r3, r2
 8001082:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	429a      	cmp	r2, r3
 800108a:	f040 8148 	bne.w	800131e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f003 0303 	and.w	r3, r3, #3
 8001096:	2b01      	cmp	r3, #1
 8001098:	d005      	beq.n	80010a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d130      	bne.n	8001108 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	2203      	movs	r2, #3
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	43db      	mvns	r3, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4013      	ands	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	68da      	ldr	r2, [r3, #12]
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010dc:	2201      	movs	r2, #1
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	091b      	lsrs	r3, r3, #4
 80010f2:	f003 0201 	and.w	r2, r3, #1
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4313      	orrs	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f003 0303 	and.w	r3, r3, #3
 8001110:	2b03      	cmp	r3, #3
 8001112:	d017      	beq.n	8001144 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	2203      	movs	r2, #3
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	689a      	ldr	r2, [r3, #8]
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f003 0303 	and.w	r3, r3, #3
 800114c:	2b02      	cmp	r3, #2
 800114e:	d123      	bne.n	8001198 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	08da      	lsrs	r2, r3, #3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3208      	adds	r2, #8
 8001158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800115c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	f003 0307 	and.w	r3, r3, #7
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	220f      	movs	r2, #15
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	691a      	ldr	r2, [r3, #16]
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4313      	orrs	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	08da      	lsrs	r2, r3, #3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3208      	adds	r2, #8
 8001192:	69b9      	ldr	r1, [r7, #24]
 8001194:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	2203      	movs	r2, #3
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 0203 	and.w	r2, r3, #3
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	f000 80a2 	beq.w	800131e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	4b57      	ldr	r3, [pc, #348]	; (800133c <HAL_GPIO_Init+0x2e8>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e2:	4a56      	ldr	r2, [pc, #344]	; (800133c <HAL_GPIO_Init+0x2e8>)
 80011e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ea:	4b54      	ldr	r3, [pc, #336]	; (800133c <HAL_GPIO_Init+0x2e8>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011f6:	4a52      	ldr	r2, [pc, #328]	; (8001340 <HAL_GPIO_Init+0x2ec>)
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	089b      	lsrs	r3, r3, #2
 80011fc:	3302      	adds	r3, #2
 80011fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001202:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	f003 0303 	and.w	r3, r3, #3
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	220f      	movs	r2, #15
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43db      	mvns	r3, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4013      	ands	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a49      	ldr	r2, [pc, #292]	; (8001344 <HAL_GPIO_Init+0x2f0>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d019      	beq.n	8001256 <HAL_GPIO_Init+0x202>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a48      	ldr	r2, [pc, #288]	; (8001348 <HAL_GPIO_Init+0x2f4>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d013      	beq.n	8001252 <HAL_GPIO_Init+0x1fe>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a47      	ldr	r2, [pc, #284]	; (800134c <HAL_GPIO_Init+0x2f8>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d00d      	beq.n	800124e <HAL_GPIO_Init+0x1fa>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a46      	ldr	r2, [pc, #280]	; (8001350 <HAL_GPIO_Init+0x2fc>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d007      	beq.n	800124a <HAL_GPIO_Init+0x1f6>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a45      	ldr	r2, [pc, #276]	; (8001354 <HAL_GPIO_Init+0x300>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d101      	bne.n	8001246 <HAL_GPIO_Init+0x1f2>
 8001242:	2304      	movs	r3, #4
 8001244:	e008      	b.n	8001258 <HAL_GPIO_Init+0x204>
 8001246:	2307      	movs	r3, #7
 8001248:	e006      	b.n	8001258 <HAL_GPIO_Init+0x204>
 800124a:	2303      	movs	r3, #3
 800124c:	e004      	b.n	8001258 <HAL_GPIO_Init+0x204>
 800124e:	2302      	movs	r3, #2
 8001250:	e002      	b.n	8001258 <HAL_GPIO_Init+0x204>
 8001252:	2301      	movs	r3, #1
 8001254:	e000      	b.n	8001258 <HAL_GPIO_Init+0x204>
 8001256:	2300      	movs	r3, #0
 8001258:	69fa      	ldr	r2, [r7, #28]
 800125a:	f002 0203 	and.w	r2, r2, #3
 800125e:	0092      	lsls	r2, r2, #2
 8001260:	4093      	lsls	r3, r2
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4313      	orrs	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001268:	4935      	ldr	r1, [pc, #212]	; (8001340 <HAL_GPIO_Init+0x2ec>)
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	089b      	lsrs	r3, r3, #2
 800126e:	3302      	adds	r3, #2
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001276:	4b38      	ldr	r3, [pc, #224]	; (8001358 <HAL_GPIO_Init+0x304>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	43db      	mvns	r3, r3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4013      	ands	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	4313      	orrs	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800129a:	4a2f      	ldr	r2, [pc, #188]	; (8001358 <HAL_GPIO_Init+0x304>)
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012a0:	4b2d      	ldr	r3, [pc, #180]	; (8001358 <HAL_GPIO_Init+0x304>)
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d003      	beq.n	80012c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012c4:	4a24      	ldr	r2, [pc, #144]	; (8001358 <HAL_GPIO_Init+0x304>)
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012ca:	4b23      	ldr	r3, [pc, #140]	; (8001358 <HAL_GPIO_Init+0x304>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	43db      	mvns	r3, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4013      	ands	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012ee:	4a1a      	ldr	r2, [pc, #104]	; (8001358 <HAL_GPIO_Init+0x304>)
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012f4:	4b18      	ldr	r3, [pc, #96]	; (8001358 <HAL_GPIO_Init+0x304>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d003      	beq.n	8001318 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	4313      	orrs	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001318:	4a0f      	ldr	r2, [pc, #60]	; (8001358 <HAL_GPIO_Init+0x304>)
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	3301      	adds	r3, #1
 8001322:	61fb      	str	r3, [r7, #28]
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	2b0f      	cmp	r3, #15
 8001328:	f67f aea2 	bls.w	8001070 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800132c:	bf00      	nop
 800132e:	bf00      	nop
 8001330:	3724      	adds	r7, #36	; 0x24
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40023800 	.word	0x40023800
 8001340:	40013800 	.word	0x40013800
 8001344:	40020000 	.word	0x40020000
 8001348:	40020400 	.word	0x40020400
 800134c:	40020800 	.word	0x40020800
 8001350:	40020c00 	.word	0x40020c00
 8001354:	40021000 	.word	0x40021000
 8001358:	40013c00 	.word	0x40013c00

0800135c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	460b      	mov	r3, r1
 8001366:	807b      	strh	r3, [r7, #2]
 8001368:	4613      	mov	r3, r2
 800136a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800136c:	787b      	ldrb	r3, [r7, #1]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d003      	beq.n	800137a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001372:	887a      	ldrh	r2, [r7, #2]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001378:	e003      	b.n	8001382 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800137a:	887b      	ldrh	r3, [r7, #2]
 800137c:	041a      	lsls	r2, r3, #16
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	619a      	str	r2, [r3, #24]
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
	...

08001390 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d101      	bne.n	80013a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e12b      	b.n	80015fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d106      	bne.n	80013bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff fafe 	bl	80009b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2224      	movs	r2, #36	; 0x24
 80013c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f022 0201 	bic.w	r2, r2, #1
 80013d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80013f4:	f002 fc9e 	bl	8003d34 <HAL_RCC_GetPCLK1Freq>
 80013f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	4a81      	ldr	r2, [pc, #516]	; (8001604 <HAL_I2C_Init+0x274>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d807      	bhi.n	8001414 <HAL_I2C_Init+0x84>
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	4a80      	ldr	r2, [pc, #512]	; (8001608 <HAL_I2C_Init+0x278>)
 8001408:	4293      	cmp	r3, r2
 800140a:	bf94      	ite	ls
 800140c:	2301      	movls	r3, #1
 800140e:	2300      	movhi	r3, #0
 8001410:	b2db      	uxtb	r3, r3
 8001412:	e006      	b.n	8001422 <HAL_I2C_Init+0x92>
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4a7d      	ldr	r2, [pc, #500]	; (800160c <HAL_I2C_Init+0x27c>)
 8001418:	4293      	cmp	r3, r2
 800141a:	bf94      	ite	ls
 800141c:	2301      	movls	r3, #1
 800141e:	2300      	movhi	r3, #0
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e0e7      	b.n	80015fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	4a78      	ldr	r2, [pc, #480]	; (8001610 <HAL_I2C_Init+0x280>)
 800142e:	fba2 2303 	umull	r2, r3, r2, r3
 8001432:	0c9b      	lsrs	r3, r3, #18
 8001434:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	68ba      	ldr	r2, [r7, #8]
 8001446:	430a      	orrs	r2, r1
 8001448:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	6a1b      	ldr	r3, [r3, #32]
 8001450:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	4a6a      	ldr	r2, [pc, #424]	; (8001604 <HAL_I2C_Init+0x274>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d802      	bhi.n	8001464 <HAL_I2C_Init+0xd4>
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	3301      	adds	r3, #1
 8001462:	e009      	b.n	8001478 <HAL_I2C_Init+0xe8>
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800146a:	fb02 f303 	mul.w	r3, r2, r3
 800146e:	4a69      	ldr	r2, [pc, #420]	; (8001614 <HAL_I2C_Init+0x284>)
 8001470:	fba2 2303 	umull	r2, r3, r2, r3
 8001474:	099b      	lsrs	r3, r3, #6
 8001476:	3301      	adds	r3, #1
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	6812      	ldr	r2, [r2, #0]
 800147c:	430b      	orrs	r3, r1
 800147e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800148a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	495c      	ldr	r1, [pc, #368]	; (8001604 <HAL_I2C_Init+0x274>)
 8001494:	428b      	cmp	r3, r1
 8001496:	d819      	bhi.n	80014cc <HAL_I2C_Init+0x13c>
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	1e59      	subs	r1, r3, #1
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80014a6:	1c59      	adds	r1, r3, #1
 80014a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80014ac:	400b      	ands	r3, r1
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d00a      	beq.n	80014c8 <HAL_I2C_Init+0x138>
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	1e59      	subs	r1, r3, #1
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80014c0:	3301      	adds	r3, #1
 80014c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014c6:	e051      	b.n	800156c <HAL_I2C_Init+0x1dc>
 80014c8:	2304      	movs	r3, #4
 80014ca:	e04f      	b.n	800156c <HAL_I2C_Init+0x1dc>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d111      	bne.n	80014f8 <HAL_I2C_Init+0x168>
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	1e58      	subs	r0, r3, #1
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6859      	ldr	r1, [r3, #4]
 80014dc:	460b      	mov	r3, r1
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	440b      	add	r3, r1
 80014e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80014e6:	3301      	adds	r3, #1
 80014e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	bf0c      	ite	eq
 80014f0:	2301      	moveq	r3, #1
 80014f2:	2300      	movne	r3, #0
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	e012      	b.n	800151e <HAL_I2C_Init+0x18e>
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	1e58      	subs	r0, r3, #1
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6859      	ldr	r1, [r3, #4]
 8001500:	460b      	mov	r3, r1
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	440b      	add	r3, r1
 8001506:	0099      	lsls	r1, r3, #2
 8001508:	440b      	add	r3, r1
 800150a:	fbb0 f3f3 	udiv	r3, r0, r3
 800150e:	3301      	adds	r3, #1
 8001510:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001514:	2b00      	cmp	r3, #0
 8001516:	bf0c      	ite	eq
 8001518:	2301      	moveq	r3, #1
 800151a:	2300      	movne	r3, #0
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <HAL_I2C_Init+0x196>
 8001522:	2301      	movs	r3, #1
 8001524:	e022      	b.n	800156c <HAL_I2C_Init+0x1dc>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d10e      	bne.n	800154c <HAL_I2C_Init+0x1bc>
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	1e58      	subs	r0, r3, #1
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6859      	ldr	r1, [r3, #4]
 8001536:	460b      	mov	r3, r1
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	440b      	add	r3, r1
 800153c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001540:	3301      	adds	r3, #1
 8001542:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800154a:	e00f      	b.n	800156c <HAL_I2C_Init+0x1dc>
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	1e58      	subs	r0, r3, #1
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6859      	ldr	r1, [r3, #4]
 8001554:	460b      	mov	r3, r1
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	440b      	add	r3, r1
 800155a:	0099      	lsls	r1, r3, #2
 800155c:	440b      	add	r3, r1
 800155e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001562:	3301      	adds	r3, #1
 8001564:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001568:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800156c:	6879      	ldr	r1, [r7, #4]
 800156e:	6809      	ldr	r1, [r1, #0]
 8001570:	4313      	orrs	r3, r2
 8001572:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	69da      	ldr	r2, [r3, #28]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a1b      	ldr	r3, [r3, #32]
 8001586:	431a      	orrs	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	430a      	orrs	r2, r1
 800158e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800159a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	6911      	ldr	r1, [r2, #16]
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	68d2      	ldr	r2, [r2, #12]
 80015a6:	4311      	orrs	r1, r2
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	6812      	ldr	r2, [r2, #0]
 80015ac:	430b      	orrs	r3, r1
 80015ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	695a      	ldr	r2, [r3, #20]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	431a      	orrs	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	430a      	orrs	r2, r1
 80015ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f042 0201 	orr.w	r2, r2, #1
 80015da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2220      	movs	r2, #32
 80015e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	000186a0 	.word	0x000186a0
 8001608:	001e847f 	.word	0x001e847f
 800160c:	003d08ff 	.word	0x003d08ff
 8001610:	431bde83 	.word	0x431bde83
 8001614:	10624dd3 	.word	0x10624dd3

08001618 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b088      	sub	sp, #32
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e128      	b.n	800187c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d109      	bne.n	800164a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a90      	ldr	r2, [pc, #576]	; (8001884 <HAL_I2S_Init+0x26c>)
 8001642:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f7ff f9ff 	bl	8000a48 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2202      	movs	r2, #2
 800164e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	69db      	ldr	r3, [r3, #28]
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	6812      	ldr	r2, [r2, #0]
 800165c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001660:	f023 030f 	bic.w	r3, r3, #15
 8001664:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2202      	movs	r2, #2
 800166c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	2b02      	cmp	r3, #2
 8001674:	d060      	beq.n	8001738 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d102      	bne.n	8001684 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800167e:	2310      	movs	r3, #16
 8001680:	617b      	str	r3, [r7, #20]
 8001682:	e001      	b.n	8001688 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001684:	2320      	movs	r3, #32
 8001686:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	2b20      	cmp	r3, #32
 800168e:	d802      	bhi.n	8001696 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001696:	2001      	movs	r0, #1
 8001698:	f002 fc50 	bl	8003f3c <HAL_RCCEx_GetPeriphCLKFreq>
 800169c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016a6:	d125      	bne.n	80016f4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d010      	beq.n	80016d2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	68fa      	ldr	r2, [r7, #12]
 80016b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80016ba:	4613      	mov	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4413      	add	r3, r2
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	461a      	mov	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	695b      	ldr	r3, [r3, #20]
 80016c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016cc:	3305      	adds	r3, #5
 80016ce:	613b      	str	r3, [r7, #16]
 80016d0:	e01f      	b.n	8001712 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80016dc:	4613      	mov	r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	4413      	add	r3, r2
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	461a      	mov	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	695b      	ldr	r3, [r3, #20]
 80016ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ee:	3305      	adds	r3, #5
 80016f0:	613b      	str	r3, [r7, #16]
 80016f2:	e00e      	b.n	8001712 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80016f4:	68fa      	ldr	r2, [r7, #12]
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80016fc:	4613      	mov	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	461a      	mov	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	fbb2 f3f3 	udiv	r3, r2, r3
 800170e:	3305      	adds	r3, #5
 8001710:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	4a5c      	ldr	r2, [pc, #368]	; (8001888 <HAL_I2S_Init+0x270>)
 8001716:	fba2 2303 	umull	r2, r3, r2, r3
 800171a:	08db      	lsrs	r3, r3, #3
 800171c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	085b      	lsrs	r3, r3, #1
 800172e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	021b      	lsls	r3, r3, #8
 8001734:	61bb      	str	r3, [r7, #24]
 8001736:	e003      	b.n	8001740 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001738:	2302      	movs	r3, #2
 800173a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800173c:	2300      	movs	r3, #0
 800173e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d902      	bls.n	800174c <HAL_I2S_Init+0x134>
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	2bff      	cmp	r3, #255	; 0xff
 800174a:	d907      	bls.n	800175c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001750:	f043 0210 	orr.w	r2, r3, #16
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e08f      	b.n	800187c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	691a      	ldr	r2, [r3, #16]
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	ea42 0103 	orr.w	r1, r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	69fa      	ldr	r2, [r7, #28]
 800176c:	430a      	orrs	r2, r1
 800176e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800177a:	f023 030f 	bic.w	r3, r3, #15
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	6851      	ldr	r1, [r2, #4]
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	6892      	ldr	r2, [r2, #8]
 8001786:	4311      	orrs	r1, r2
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	68d2      	ldr	r2, [r2, #12]
 800178c:	4311      	orrs	r1, r2
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	6992      	ldr	r2, [r2, #24]
 8001792:	430a      	orrs	r2, r1
 8001794:	431a      	orrs	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800179e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a1b      	ldr	r3, [r3, #32]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d161      	bne.n	800186c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a38      	ldr	r2, [pc, #224]	; (800188c <HAL_I2S_Init+0x274>)
 80017ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a37      	ldr	r2, [pc, #220]	; (8001890 <HAL_I2S_Init+0x278>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d101      	bne.n	80017bc <HAL_I2S_Init+0x1a4>
 80017b8:	4b36      	ldr	r3, [pc, #216]	; (8001894 <HAL_I2S_Init+0x27c>)
 80017ba:	e001      	b.n	80017c0 <HAL_I2S_Init+0x1a8>
 80017bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80017c0:	69db      	ldr	r3, [r3, #28]
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	6812      	ldr	r2, [r2, #0]
 80017c6:	4932      	ldr	r1, [pc, #200]	; (8001890 <HAL_I2S_Init+0x278>)
 80017c8:	428a      	cmp	r2, r1
 80017ca:	d101      	bne.n	80017d0 <HAL_I2S_Init+0x1b8>
 80017cc:	4a31      	ldr	r2, [pc, #196]	; (8001894 <HAL_I2S_Init+0x27c>)
 80017ce:	e001      	b.n	80017d4 <HAL_I2S_Init+0x1bc>
 80017d0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80017d4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80017d8:	f023 030f 	bic.w	r3, r3, #15
 80017dc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a2b      	ldr	r2, [pc, #172]	; (8001890 <HAL_I2S_Init+0x278>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d101      	bne.n	80017ec <HAL_I2S_Init+0x1d4>
 80017e8:	4b2a      	ldr	r3, [pc, #168]	; (8001894 <HAL_I2S_Init+0x27c>)
 80017ea:	e001      	b.n	80017f0 <HAL_I2S_Init+0x1d8>
 80017ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80017f0:	2202      	movs	r2, #2
 80017f2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a25      	ldr	r2, [pc, #148]	; (8001890 <HAL_I2S_Init+0x278>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d101      	bne.n	8001802 <HAL_I2S_Init+0x1ea>
 80017fe:	4b25      	ldr	r3, [pc, #148]	; (8001894 <HAL_I2S_Init+0x27c>)
 8001800:	e001      	b.n	8001806 <HAL_I2S_Init+0x1ee>
 8001802:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001806:	69db      	ldr	r3, [r3, #28]
 8001808:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001812:	d003      	beq.n	800181c <HAL_I2S_Init+0x204>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d103      	bne.n	8001824 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800181c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001820:	613b      	str	r3, [r7, #16]
 8001822:	e001      	b.n	8001828 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001824:	2300      	movs	r3, #0
 8001826:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001832:	4313      	orrs	r3, r2
 8001834:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800183c:	4313      	orrs	r3, r2
 800183e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001846:	4313      	orrs	r3, r2
 8001848:	b29a      	uxth	r2, r3
 800184a:	897b      	ldrh	r3, [r7, #10]
 800184c:	4313      	orrs	r3, r2
 800184e:	b29b      	uxth	r3, r3
 8001850:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001854:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a0d      	ldr	r2, [pc, #52]	; (8001890 <HAL_I2S_Init+0x278>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d101      	bne.n	8001864 <HAL_I2S_Init+0x24c>
 8001860:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <HAL_I2S_Init+0x27c>)
 8001862:	e001      	b.n	8001868 <HAL_I2S_Init+0x250>
 8001864:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001868:	897a      	ldrh	r2, [r7, #10]
 800186a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2201      	movs	r2, #1
 8001876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	3720      	adds	r7, #32
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	0800198f 	.word	0x0800198f
 8001888:	cccccccd 	.word	0xcccccccd
 800188c:	08001aa5 	.word	0x08001aa5
 8001890:	40003800 	.word	0x40003800
 8001894:	40003400 	.word	0x40003400

08001898 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e0:	881a      	ldrh	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ec:	1c9a      	adds	r2, r3, #2
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	3b01      	subs	r3, #1
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001904:	b29b      	uxth	r3, r3
 8001906:	2b00      	cmp	r3, #0
 8001908:	d10e      	bne.n	8001928 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	685a      	ldr	r2, [r3, #4]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001918:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2201      	movs	r2, #1
 800191e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff ffb8 	bl	8001898 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001928:	bf00      	nop
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	68da      	ldr	r2, [r3, #12]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001942:	b292      	uxth	r2, r2
 8001944:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194a:	1c9a      	adds	r2, r3, #2
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001954:	b29b      	uxth	r3, r3
 8001956:	3b01      	subs	r3, #1
 8001958:	b29a      	uxth	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001962:	b29b      	uxth	r3, r3
 8001964:	2b00      	cmp	r3, #0
 8001966:	d10e      	bne.n	8001986 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	685a      	ldr	r2, [r3, #4]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001976:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f7ff ff93 	bl	80018ac <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b086      	sub	sp, #24
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	d13a      	bne.n	8001a20 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d109      	bne.n	80019c8 <I2S_IRQHandler+0x3a>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019be:	2b40      	cmp	r3, #64	; 0x40
 80019c0:	d102      	bne.n	80019c8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff ffb4 	bl	8001930 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019ce:	2b40      	cmp	r3, #64	; 0x40
 80019d0:	d126      	bne.n	8001a20 <I2S_IRQHandler+0x92>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f003 0320 	and.w	r3, r3, #32
 80019dc:	2b20      	cmp	r3, #32
 80019de:	d11f      	bne.n	8001a20 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80019ee:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80019f0:	2300      	movs	r3, #0
 80019f2:	613b      	str	r3, [r7, #16]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	613b      	str	r3, [r7, #16]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a12:	f043 0202 	orr.w	r2, r3, #2
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7ff ff50 	bl	80018c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	2b03      	cmp	r3, #3
 8001a2a:	d136      	bne.n	8001a9a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d109      	bne.n	8001a4a <I2S_IRQHandler+0xbc>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a40:	2b80      	cmp	r3, #128	; 0x80
 8001a42:	d102      	bne.n	8001a4a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f7ff ff45 	bl	80018d4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	f003 0308 	and.w	r3, r3, #8
 8001a50:	2b08      	cmp	r3, #8
 8001a52:	d122      	bne.n	8001a9a <I2S_IRQHandler+0x10c>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f003 0320 	and.w	r3, r3, #32
 8001a5e:	2b20      	cmp	r3, #32
 8001a60:	d11b      	bne.n	8001a9a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	685a      	ldr	r2, [r3, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001a70:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001a72:	2300      	movs	r3, #0
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8c:	f043 0204 	orr.w	r2, r3, #4
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f7ff ff13 	bl	80018c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001a9a:	bf00      	nop
 8001a9c:	3718      	adds	r7, #24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
	...

08001aa4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b088      	sub	sp, #32
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a92      	ldr	r2, [pc, #584]	; (8001d04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d101      	bne.n	8001ac2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001abe:	4b92      	ldr	r3, [pc, #584]	; (8001d08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001ac0:	e001      	b.n	8001ac6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001ac2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a8b      	ldr	r2, [pc, #556]	; (8001d04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d101      	bne.n	8001ae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001adc:	4b8a      	ldr	r3, [pc, #552]	; (8001d08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001ade:	e001      	b.n	8001ae4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001ae0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001af0:	d004      	beq.n	8001afc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f040 8099 	bne.w	8001c2e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d107      	bne.n	8001b16 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d002      	beq.n	8001b16 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 f925 	bl	8001d60 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	f003 0301 	and.w	r3, r3, #1
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d107      	bne.n	8001b30 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d002      	beq.n	8001b30 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f000 f9c8 	bl	8001ec0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b36:	2b40      	cmp	r3, #64	; 0x40
 8001b38:	d13a      	bne.n	8001bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	f003 0320 	and.w	r3, r3, #32
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d035      	beq.n	8001bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a6e      	ldr	r2, [pc, #440]	; (8001d04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d101      	bne.n	8001b52 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001b4e:	4b6e      	ldr	r3, [pc, #440]	; (8001d08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001b50:	e001      	b.n	8001b56 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001b52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b56:	685a      	ldr	r2, [r3, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4969      	ldr	r1, [pc, #420]	; (8001d04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001b5e:	428b      	cmp	r3, r1
 8001b60:	d101      	bne.n	8001b66 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001b62:	4b69      	ldr	r3, [pc, #420]	; (8001d08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001b64:	e001      	b.n	8001b6a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001b66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b6a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001b6e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	685a      	ldr	r2, [r3, #4]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001b7e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001b80:	2300      	movs	r3, #0
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba2:	f043 0202 	orr.w	r2, r3, #2
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff fe88 	bl	80018c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	f003 0308 	and.w	r3, r3, #8
 8001bb6:	2b08      	cmp	r3, #8
 8001bb8:	f040 80c3 	bne.w	8001d42 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	f003 0320 	and.w	r3, r3, #32
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f000 80bd 	beq.w	8001d42 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	685a      	ldr	r2, [r3, #4]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001bd6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a49      	ldr	r2, [pc, #292]	; (8001d04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d101      	bne.n	8001be6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001be2:	4b49      	ldr	r3, [pc, #292]	; (8001d08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001be4:	e001      	b.n	8001bea <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001be6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001bea:	685a      	ldr	r2, [r3, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4944      	ldr	r1, [pc, #272]	; (8001d04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001bf2:	428b      	cmp	r3, r1
 8001bf4:	d101      	bne.n	8001bfa <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001bf6:	4b44      	ldr	r3, [pc, #272]	; (8001d08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001bf8:	e001      	b.n	8001bfe <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001bfa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001bfe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001c02:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001c04:	2300      	movs	r3, #0
 8001c06:	60bb      	str	r3, [r7, #8]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	60bb      	str	r3, [r7, #8]
 8001c10:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2201      	movs	r2, #1
 8001c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1e:	f043 0204 	orr.w	r2, r3, #4
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7ff fe4a 	bl	80018c0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001c2c:	e089      	b.n	8001d42 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d107      	bne.n	8001c48 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d002      	beq.n	8001c48 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f8be 	bl	8001dc4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d107      	bne.n	8001c62 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d002      	beq.n	8001c62 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f000 f8fd 	bl	8001e5c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c68:	2b40      	cmp	r3, #64	; 0x40
 8001c6a:	d12f      	bne.n	8001ccc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	f003 0320 	and.w	r3, r3, #32
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d02a      	beq.n	8001ccc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	685a      	ldr	r2, [r3, #4]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001c84:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a1e      	ldr	r2, [pc, #120]	; (8001d04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d101      	bne.n	8001c94 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001c90:	4b1d      	ldr	r3, [pc, #116]	; (8001d08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001c92:	e001      	b.n	8001c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001c94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4919      	ldr	r1, [pc, #100]	; (8001d04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001ca0:	428b      	cmp	r3, r1
 8001ca2:	d101      	bne.n	8001ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001ca4:	4b18      	ldr	r3, [pc, #96]	; (8001d08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001ca6:	e001      	b.n	8001cac <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001ca8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001cac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001cb0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbe:	f043 0202 	orr.w	r2, r3, #2
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7ff fdfa 	bl	80018c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	2b08      	cmp	r3, #8
 8001cd4:	d136      	bne.n	8001d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	f003 0320 	and.w	r3, r3, #32
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d031      	beq.n	8001d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a07      	ldr	r2, [pc, #28]	; (8001d04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d101      	bne.n	8001cee <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001cea:	4b07      	ldr	r3, [pc, #28]	; (8001d08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001cec:	e001      	b.n	8001cf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001cee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001cf2:	685a      	ldr	r2, [r3, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4902      	ldr	r1, [pc, #8]	; (8001d04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001cfa:	428b      	cmp	r3, r1
 8001cfc:	d106      	bne.n	8001d0c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8001cfe:	4b02      	ldr	r3, [pc, #8]	; (8001d08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d00:	e006      	b.n	8001d10 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8001d02:	bf00      	nop
 8001d04:	40003800 	.word	0x40003800
 8001d08:	40003400 	.word	0x40003400
 8001d0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d10:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d14:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001d24:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d32:	f043 0204 	orr.w	r2, r3, #4
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7ff fdc0 	bl	80018c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001d40:	e000      	b.n	8001d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001d42:	bf00      	nop
}
 8001d44:	bf00      	nop
 8001d46:	3720      	adds	r7, #32
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6c:	1c99      	adds	r1, r3, #2
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	6251      	str	r1, [r2, #36]	; 0x24
 8001d72:	881a      	ldrh	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	3b01      	subs	r3, #1
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d113      	bne.n	8001dba <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001da0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d106      	bne.n	8001dba <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f7ff ffc9 	bl	8001d4c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
	...

08001dc4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd0:	1c99      	adds	r1, r3, #2
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	6251      	str	r1, [r2, #36]	; 0x24
 8001dd6:	8819      	ldrh	r1, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a1d      	ldr	r2, [pc, #116]	; (8001e54 <I2SEx_TxISR_I2SExt+0x90>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d101      	bne.n	8001de6 <I2SEx_TxISR_I2SExt+0x22>
 8001de2:	4b1d      	ldr	r3, [pc, #116]	; (8001e58 <I2SEx_TxISR_I2SExt+0x94>)
 8001de4:	e001      	b.n	8001dea <I2SEx_TxISR_I2SExt+0x26>
 8001de6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001dea:	460a      	mov	r2, r1
 8001dec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	3b01      	subs	r3, #1
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d121      	bne.n	8001e4a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a12      	ldr	r2, [pc, #72]	; (8001e54 <I2SEx_TxISR_I2SExt+0x90>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d101      	bne.n	8001e14 <I2SEx_TxISR_I2SExt+0x50>
 8001e10:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <I2SEx_TxISR_I2SExt+0x94>)
 8001e12:	e001      	b.n	8001e18 <I2SEx_TxISR_I2SExt+0x54>
 8001e14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e18:	685a      	ldr	r2, [r3, #4]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	490d      	ldr	r1, [pc, #52]	; (8001e54 <I2SEx_TxISR_I2SExt+0x90>)
 8001e20:	428b      	cmp	r3, r1
 8001e22:	d101      	bne.n	8001e28 <I2SEx_TxISR_I2SExt+0x64>
 8001e24:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <I2SEx_TxISR_I2SExt+0x94>)
 8001e26:	e001      	b.n	8001e2c <I2SEx_TxISR_I2SExt+0x68>
 8001e28:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e2c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e30:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d106      	bne.n	8001e4a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7ff ff81 	bl	8001d4c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40003800 	.word	0x40003800
 8001e58:	40003400 	.word	0x40003400

08001e5c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68d8      	ldr	r0, [r3, #12]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6e:	1c99      	adds	r1, r3, #2
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001e74:	b282      	uxth	r2, r0
 8001e76:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d113      	bne.n	8001eb8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e9e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d106      	bne.n	8001eb8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7ff ff4a 	bl	8001d4c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001eb8:	bf00      	nop
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a20      	ldr	r2, [pc, #128]	; (8001f50 <I2SEx_RxISR_I2SExt+0x90>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d101      	bne.n	8001ed6 <I2SEx_RxISR_I2SExt+0x16>
 8001ed2:	4b20      	ldr	r3, [pc, #128]	; (8001f54 <I2SEx_RxISR_I2SExt+0x94>)
 8001ed4:	e001      	b.n	8001eda <I2SEx_RxISR_I2SExt+0x1a>
 8001ed6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001eda:	68d8      	ldr	r0, [r3, #12]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee0:	1c99      	adds	r1, r3, #2
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001ee6:	b282      	uxth	r2, r0
 8001ee8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d121      	bne.n	8001f46 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a12      	ldr	r2, [pc, #72]	; (8001f50 <I2SEx_RxISR_I2SExt+0x90>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d101      	bne.n	8001f10 <I2SEx_RxISR_I2SExt+0x50>
 8001f0c:	4b11      	ldr	r3, [pc, #68]	; (8001f54 <I2SEx_RxISR_I2SExt+0x94>)
 8001f0e:	e001      	b.n	8001f14 <I2SEx_RxISR_I2SExt+0x54>
 8001f10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	490d      	ldr	r1, [pc, #52]	; (8001f50 <I2SEx_RxISR_I2SExt+0x90>)
 8001f1c:	428b      	cmp	r3, r1
 8001f1e:	d101      	bne.n	8001f24 <I2SEx_RxISR_I2SExt+0x64>
 8001f20:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <I2SEx_RxISR_I2SExt+0x94>)
 8001f22:	e001      	b.n	8001f28 <I2SEx_RxISR_I2SExt+0x68>
 8001f24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f28:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f2c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d106      	bne.n	8001f46 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f7ff ff03 	bl	8001d4c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001f46:	bf00      	nop
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40003800 	.word	0x40003800
 8001f54:	40003400 	.word	0x40003400

08001f58 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f5a:	b08f      	sub	sp, #60	; 0x3c
 8001f5c:	af0a      	add	r7, sp, #40	; 0x28
 8001f5e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e10f      	b.n	800218a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d106      	bne.n	8001f8a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f007 ffb7 	bl	8009ef8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2203      	movs	r2, #3
 8001f8e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d102      	bne.n	8001fa4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f002 f9c4 	bl	8004336 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	603b      	str	r3, [r7, #0]
 8001fb4:	687e      	ldr	r6, [r7, #4]
 8001fb6:	466d      	mov	r5, sp
 8001fb8:	f106 0410 	add.w	r4, r6, #16
 8001fbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fc4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fc8:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fcc:	1d33      	adds	r3, r6, #4
 8001fce:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fd0:	6838      	ldr	r0, [r7, #0]
 8001fd2:	f002 f89c 	bl	800410e <USB_CoreInit>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d005      	beq.n	8001fe8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2202      	movs	r2, #2
 8001fe0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e0d0      	b.n	800218a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2100      	movs	r1, #0
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f002 f9b2 	bl	8004358 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	73fb      	strb	r3, [r7, #15]
 8001ff8:	e04a      	b.n	8002090 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ffa:	7bfa      	ldrb	r2, [r7, #15]
 8001ffc:	6879      	ldr	r1, [r7, #4]
 8001ffe:	4613      	mov	r3, r2
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	4413      	add	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	440b      	add	r3, r1
 8002008:	333d      	adds	r3, #61	; 0x3d
 800200a:	2201      	movs	r2, #1
 800200c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800200e:	7bfa      	ldrb	r2, [r7, #15]
 8002010:	6879      	ldr	r1, [r7, #4]
 8002012:	4613      	mov	r3, r2
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	4413      	add	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	440b      	add	r3, r1
 800201c:	333c      	adds	r3, #60	; 0x3c
 800201e:	7bfa      	ldrb	r2, [r7, #15]
 8002020:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002022:	7bfa      	ldrb	r2, [r7, #15]
 8002024:	7bfb      	ldrb	r3, [r7, #15]
 8002026:	b298      	uxth	r0, r3
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	4613      	mov	r3, r2
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	4413      	add	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	440b      	add	r3, r1
 8002034:	3344      	adds	r3, #68	; 0x44
 8002036:	4602      	mov	r2, r0
 8002038:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800203a:	7bfa      	ldrb	r2, [r7, #15]
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	4413      	add	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	440b      	add	r3, r1
 8002048:	3340      	adds	r3, #64	; 0x40
 800204a:	2200      	movs	r2, #0
 800204c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800204e:	7bfa      	ldrb	r2, [r7, #15]
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	4613      	mov	r3, r2
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	4413      	add	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	440b      	add	r3, r1
 800205c:	3348      	adds	r3, #72	; 0x48
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002062:	7bfa      	ldrb	r2, [r7, #15]
 8002064:	6879      	ldr	r1, [r7, #4]
 8002066:	4613      	mov	r3, r2
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	4413      	add	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	440b      	add	r3, r1
 8002070:	334c      	adds	r3, #76	; 0x4c
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002076:	7bfa      	ldrb	r2, [r7, #15]
 8002078:	6879      	ldr	r1, [r7, #4]
 800207a:	4613      	mov	r3, r2
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	4413      	add	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	440b      	add	r3, r1
 8002084:	3354      	adds	r3, #84	; 0x54
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800208a:	7bfb      	ldrb	r3, [r7, #15]
 800208c:	3301      	adds	r3, #1
 800208e:	73fb      	strb	r3, [r7, #15]
 8002090:	7bfa      	ldrb	r2, [r7, #15]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	429a      	cmp	r2, r3
 8002098:	d3af      	bcc.n	8001ffa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800209a:	2300      	movs	r3, #0
 800209c:	73fb      	strb	r3, [r7, #15]
 800209e:	e044      	b.n	800212a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020a0:	7bfa      	ldrb	r2, [r7, #15]
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	4613      	mov	r3, r2
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	4413      	add	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	440b      	add	r3, r1
 80020ae:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80020b2:	2200      	movs	r2, #0
 80020b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020b6:	7bfa      	ldrb	r2, [r7, #15]
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	4613      	mov	r3, r2
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	4413      	add	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	440b      	add	r3, r1
 80020c4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80020c8:	7bfa      	ldrb	r2, [r7, #15]
 80020ca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020cc:	7bfa      	ldrb	r2, [r7, #15]
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	4613      	mov	r3, r2
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	4413      	add	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	440b      	add	r3, r1
 80020da:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80020de:	2200      	movs	r2, #0
 80020e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020e2:	7bfa      	ldrb	r2, [r7, #15]
 80020e4:	6879      	ldr	r1, [r7, #4]
 80020e6:	4613      	mov	r3, r2
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	4413      	add	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	440b      	add	r3, r1
 80020f0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020f8:	7bfa      	ldrb	r2, [r7, #15]
 80020fa:	6879      	ldr	r1, [r7, #4]
 80020fc:	4613      	mov	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	4413      	add	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	440b      	add	r3, r1
 8002106:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800210e:	7bfa      	ldrb	r2, [r7, #15]
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	4613      	mov	r3, r2
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	4413      	add	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	440b      	add	r3, r1
 800211c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002124:	7bfb      	ldrb	r3, [r7, #15]
 8002126:	3301      	adds	r3, #1
 8002128:	73fb      	strb	r3, [r7, #15]
 800212a:	7bfa      	ldrb	r2, [r7, #15]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	429a      	cmp	r2, r3
 8002132:	d3b5      	bcc.n	80020a0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	603b      	str	r3, [r7, #0]
 800213a:	687e      	ldr	r6, [r7, #4]
 800213c:	466d      	mov	r5, sp
 800213e:	f106 0410 	add.w	r4, r6, #16
 8002142:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002144:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002146:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002148:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800214a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800214e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002152:	1d33      	adds	r3, r6, #4
 8002154:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002156:	6838      	ldr	r0, [r7, #0]
 8002158:	f002 f94a 	bl	80043f0 <USB_DevInit>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d005      	beq.n	800216e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2202      	movs	r2, #2
 8002166:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e00d      	b.n	800218a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f003 fa99 	bl	80056ba <USB_DevDisconnect>

  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002192 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b084      	sub	sp, #16
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d101      	bne.n	80021ae <HAL_PCD_Start+0x1c>
 80021aa:	2302      	movs	r3, #2
 80021ac:	e020      	b.n	80021f0 <HAL_PCD_Start+0x5e>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2201      	movs	r2, #1
 80021b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d109      	bne.n	80021d2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d005      	beq.n	80021d2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f002 f89c 	bl	8004314 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f003 fa49 	bl	8005678 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80021f8:	b590      	push	{r4, r7, lr}
 80021fa:	b08d      	sub	sp, #52	; 0x34
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002206:	6a3b      	ldr	r3, [r7, #32]
 8002208:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f003 fb07 	bl	8005822 <USB_GetMode>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	f040 848a 	bne.w	8002b30 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f003 fa6b 	bl	80056fc <USB_ReadInterrupts>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	f000 8480 	beq.w	8002b2e <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	0a1b      	lsrs	r3, r3, #8
 8002238:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f003 fa58 	bl	80056fc <USB_ReadInterrupts>
 800224c:	4603      	mov	r3, r0
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b02      	cmp	r3, #2
 8002254:	d107      	bne.n	8002266 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	695a      	ldr	r2, [r3, #20]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f002 0202 	and.w	r2, r2, #2
 8002264:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4618      	mov	r0, r3
 800226c:	f003 fa46 	bl	80056fc <USB_ReadInterrupts>
 8002270:	4603      	mov	r3, r0
 8002272:	f003 0310 	and.w	r3, r3, #16
 8002276:	2b10      	cmp	r3, #16
 8002278:	d161      	bne.n	800233e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	699a      	ldr	r2, [r3, #24]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 0210 	bic.w	r2, r2, #16
 8002288:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800228a:	6a3b      	ldr	r3, [r7, #32]
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	f003 020f 	and.w	r2, r3, #15
 8002296:	4613      	mov	r3, r2
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	4413      	add	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	4413      	add	r3, r2
 80022a6:	3304      	adds	r3, #4
 80022a8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	0c5b      	lsrs	r3, r3, #17
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d124      	bne.n	8002300 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80022bc:	4013      	ands	r3, r2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d035      	beq.n	800232e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	091b      	lsrs	r3, r3, #4
 80022ca:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80022cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	461a      	mov	r2, r3
 80022d4:	6a38      	ldr	r0, [r7, #32]
 80022d6:	f003 f87d 	bl	80053d4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	691a      	ldr	r2, [r3, #16]
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	091b      	lsrs	r3, r3, #4
 80022e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022e6:	441a      	add	r2, r3
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	6a1a      	ldr	r2, [r3, #32]
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	091b      	lsrs	r3, r3, #4
 80022f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022f8:	441a      	add	r2, r3
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	621a      	str	r2, [r3, #32]
 80022fe:	e016      	b.n	800232e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	0c5b      	lsrs	r3, r3, #17
 8002304:	f003 030f 	and.w	r3, r3, #15
 8002308:	2b06      	cmp	r3, #6
 800230a:	d110      	bne.n	800232e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002312:	2208      	movs	r2, #8
 8002314:	4619      	mov	r1, r3
 8002316:	6a38      	ldr	r0, [r7, #32]
 8002318:	f003 f85c 	bl	80053d4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	6a1a      	ldr	r2, [r3, #32]
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	091b      	lsrs	r3, r3, #4
 8002324:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002328:	441a      	add	r2, r3
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	699a      	ldr	r2, [r3, #24]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f042 0210 	orr.w	r2, r2, #16
 800233c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4618      	mov	r0, r3
 8002344:	f003 f9da 	bl	80056fc <USB_ReadInterrupts>
 8002348:	4603      	mov	r3, r0
 800234a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800234e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002352:	f040 80a7 	bne.w	80024a4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002356:	2300      	movs	r3, #0
 8002358:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f003 f9df 	bl	8005722 <USB_ReadDevAllOutEpInterrupt>
 8002364:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002366:	e099      	b.n	800249c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b00      	cmp	r3, #0
 8002370:	f000 808e 	beq.w	8002490 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800237a:	b2d2      	uxtb	r2, r2
 800237c:	4611      	mov	r1, r2
 800237e:	4618      	mov	r0, r3
 8002380:	f003 fa03 	bl	800578a <USB_ReadDevOutEPInterrupt>
 8002384:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00c      	beq.n	80023aa <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	015a      	lsls	r2, r3, #5
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	4413      	add	r3, r2
 8002398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800239c:	461a      	mov	r2, r3
 800239e:	2301      	movs	r3, #1
 80023a0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80023a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f000 fec3 	bl	8003130 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	f003 0308 	and.w	r3, r3, #8
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00c      	beq.n	80023ce <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b6:	015a      	lsls	r2, r3, #5
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	4413      	add	r3, r2
 80023bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023c0:	461a      	mov	r2, r3
 80023c2:	2308      	movs	r3, #8
 80023c4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80023c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 ff99 	bl	8003300 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	f003 0310 	and.w	r3, r3, #16
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d008      	beq.n	80023ea <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80023d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023da:	015a      	lsls	r2, r3, #5
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	4413      	add	r3, r2
 80023e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023e4:	461a      	mov	r2, r3
 80023e6:	2310      	movs	r3, #16
 80023e8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d030      	beq.n	8002456 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80023f4:	6a3b      	ldr	r3, [r7, #32]
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023fc:	2b80      	cmp	r3, #128	; 0x80
 80023fe:	d109      	bne.n	8002414 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	69fa      	ldr	r2, [r7, #28]
 800240a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800240e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002412:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002416:	4613      	mov	r3, r2
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	4413      	add	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	4413      	add	r3, r2
 8002426:	3304      	adds	r3, #4
 8002428:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	78db      	ldrb	r3, [r3, #3]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d108      	bne.n	8002444 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	2200      	movs	r2, #0
 8002436:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	b2db      	uxtb	r3, r3
 800243c:	4619      	mov	r1, r3
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f007 fe64 	bl	800a10c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002446:	015a      	lsls	r2, r3, #5
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	4413      	add	r3, r2
 800244c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002450:	461a      	mov	r2, r3
 8002452:	2302      	movs	r3, #2
 8002454:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	f003 0320 	and.w	r3, r3, #32
 800245c:	2b00      	cmp	r3, #0
 800245e:	d008      	beq.n	8002472 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002462:	015a      	lsls	r2, r3, #5
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	4413      	add	r3, r2
 8002468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800246c:	461a      	mov	r2, r3
 800246e:	2320      	movs	r3, #32
 8002470:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d009      	beq.n	8002490 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	015a      	lsls	r2, r3, #5
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	4413      	add	r3, r2
 8002484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002488:	461a      	mov	r2, r3
 800248a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800248e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002492:	3301      	adds	r3, #1
 8002494:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002498:	085b      	lsrs	r3, r3, #1
 800249a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800249c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f47f af62 	bne.w	8002368 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f003 f927 	bl	80056fc <USB_ReadInterrupts>
 80024ae:	4603      	mov	r3, r0
 80024b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80024b8:	f040 80db 	bne.w	8002672 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f003 f948 	bl	8005756 <USB_ReadDevAllInEpInterrupt>
 80024c6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80024c8:	2300      	movs	r3, #0
 80024ca:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80024cc:	e0cd      	b.n	800266a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80024ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f000 80c2 	beq.w	800265e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	4611      	mov	r1, r2
 80024e4:	4618      	mov	r0, r3
 80024e6:	f003 f96e 	bl	80057c6 <USB_ReadDevInEPInterrupt>
 80024ea:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d057      	beq.n	80025a6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80024f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f8:	f003 030f 	and.w	r3, r3, #15
 80024fc:	2201      	movs	r2, #1
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800250a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	43db      	mvns	r3, r3
 8002510:	69f9      	ldr	r1, [r7, #28]
 8002512:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002516:	4013      	ands	r3, r2
 8002518:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	015a      	lsls	r2, r3, #5
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	4413      	add	r3, r2
 8002522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002526:	461a      	mov	r2, r3
 8002528:	2301      	movs	r3, #1
 800252a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d132      	bne.n	800259a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002534:	6879      	ldr	r1, [r7, #4]
 8002536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002538:	4613      	mov	r3, r2
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	4413      	add	r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	440b      	add	r3, r1
 8002542:	334c      	adds	r3, #76	; 0x4c
 8002544:	6819      	ldr	r1, [r3, #0]
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800254a:	4613      	mov	r3, r2
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	4413      	add	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	4403      	add	r3, r0
 8002554:	3348      	adds	r3, #72	; 0x48
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4419      	add	r1, r3
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800255e:	4613      	mov	r3, r2
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	4413      	add	r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4403      	add	r3, r0
 8002568:	334c      	adds	r3, #76	; 0x4c
 800256a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	2b00      	cmp	r3, #0
 8002570:	d113      	bne.n	800259a <HAL_PCD_IRQHandler+0x3a2>
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002576:	4613      	mov	r3, r2
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	4413      	add	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	440b      	add	r3, r1
 8002580:	3354      	adds	r3, #84	; 0x54
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d108      	bne.n	800259a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6818      	ldr	r0, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002592:	461a      	mov	r2, r3
 8002594:	2101      	movs	r1, #1
 8002596:	f003 f975 	bl	8005884 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	b2db      	uxtb	r3, r3
 800259e:	4619      	mov	r1, r3
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f007 fd38 	bl	800a016 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	f003 0308 	and.w	r3, r3, #8
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d008      	beq.n	80025c2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80025b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b2:	015a      	lsls	r2, r3, #5
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	4413      	add	r3, r2
 80025b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025bc:	461a      	mov	r2, r3
 80025be:	2308      	movs	r3, #8
 80025c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	f003 0310 	and.w	r3, r3, #16
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d008      	beq.n	80025de <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80025cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ce:	015a      	lsls	r2, r3, #5
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	4413      	add	r3, r2
 80025d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025d8:	461a      	mov	r2, r3
 80025da:	2310      	movs	r3, #16
 80025dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d008      	beq.n	80025fa <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	015a      	lsls	r2, r3, #5
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	4413      	add	r3, r2
 80025f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025f4:	461a      	mov	r2, r3
 80025f6:	2340      	movs	r3, #64	; 0x40
 80025f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d023      	beq.n	800264c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002604:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002606:	6a38      	ldr	r0, [r7, #32]
 8002608:	f002 f856 	bl	80046b8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800260c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800260e:	4613      	mov	r3, r2
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	4413      	add	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	3338      	adds	r3, #56	; 0x38
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	4413      	add	r3, r2
 800261c:	3304      	adds	r3, #4
 800261e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	78db      	ldrb	r3, [r3, #3]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d108      	bne.n	800263a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	2200      	movs	r2, #0
 800262c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	b2db      	uxtb	r3, r3
 8002632:	4619      	mov	r1, r3
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f007 fd7b 	bl	800a130 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	015a      	lsls	r2, r3, #5
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	4413      	add	r3, r2
 8002642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002646:	461a      	mov	r2, r3
 8002648:	2302      	movs	r3, #2
 800264a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002652:	2b00      	cmp	r3, #0
 8002654:	d003      	beq.n	800265e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002656:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f000 fcdb 	bl	8003014 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	3301      	adds	r3, #1
 8002662:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002666:	085b      	lsrs	r3, r3, #1
 8002668:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800266a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266c:	2b00      	cmp	r3, #0
 800266e:	f47f af2e 	bne.w	80024ce <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f003 f840 	bl	80056fc <USB_ReadInterrupts>
 800267c:	4603      	mov	r3, r0
 800267e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002682:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002686:	d122      	bne.n	80026ce <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	69fa      	ldr	r2, [r7, #28]
 8002692:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002696:	f023 0301 	bic.w	r3, r3, #1
 800269a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d108      	bne.n	80026b8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80026ae:	2100      	movs	r1, #0
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 fec3 	bl	800343c <HAL_PCDEx_LPM_Callback>
 80026b6:	e002      	b.n	80026be <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f007 fd19 	bl	800a0f0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	695a      	ldr	r2, [r3, #20]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80026cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f003 f812 	bl	80056fc <USB_ReadInterrupts>
 80026d8:	4603      	mov	r3, r0
 80026da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026e2:	d112      	bne.n	800270a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d102      	bne.n	80026fa <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f007 fcd5 	bl	800a0a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	695a      	ldr	r2, [r3, #20]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002708:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f002 fff4 	bl	80056fc <USB_ReadInterrupts>
 8002714:	4603      	mov	r3, r0
 8002716:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800271a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800271e:	f040 80b7 	bne.w	8002890 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	69fa      	ldr	r2, [r7, #28]
 800272c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002730:	f023 0301 	bic.w	r3, r3, #1
 8002734:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2110      	movs	r1, #16
 800273c:	4618      	mov	r0, r3
 800273e:	f001 ffbb 	bl	80046b8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002742:	2300      	movs	r3, #0
 8002744:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002746:	e046      	b.n	80027d6 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274a:	015a      	lsls	r2, r3, #5
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	4413      	add	r3, r2
 8002750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002754:	461a      	mov	r2, r3
 8002756:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800275a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800275c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275e:	015a      	lsls	r2, r3, #5
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	4413      	add	r3, r2
 8002764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800276c:	0151      	lsls	r1, r2, #5
 800276e:	69fa      	ldr	r2, [r7, #28]
 8002770:	440a      	add	r2, r1
 8002772:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002776:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800277a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800277c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800277e:	015a      	lsls	r2, r3, #5
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	4413      	add	r3, r2
 8002784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002788:	461a      	mov	r2, r3
 800278a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800278e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002792:	015a      	lsls	r2, r3, #5
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	4413      	add	r3, r2
 8002798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027a0:	0151      	lsls	r1, r2, #5
 80027a2:	69fa      	ldr	r2, [r7, #28]
 80027a4:	440a      	add	r2, r1
 80027a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80027aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027ae:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80027b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b2:	015a      	lsls	r2, r3, #5
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	4413      	add	r3, r2
 80027b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027c0:	0151      	lsls	r1, r2, #5
 80027c2:	69fa      	ldr	r2, [r7, #28]
 80027c4:	440a      	add	r2, r1
 80027c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80027ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80027ce:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d2:	3301      	adds	r3, #1
 80027d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027dc:	429a      	cmp	r2, r3
 80027de:	d3b3      	bcc.n	8002748 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027e6:	69db      	ldr	r3, [r3, #28]
 80027e8:	69fa      	ldr	r2, [r7, #28]
 80027ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027ee:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80027f2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d016      	beq.n	800282a <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002802:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002806:	69fa      	ldr	r2, [r7, #28]
 8002808:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800280c:	f043 030b 	orr.w	r3, r3, #11
 8002810:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800281a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281c:	69fa      	ldr	r2, [r7, #28]
 800281e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002822:	f043 030b 	orr.w	r3, r3, #11
 8002826:	6453      	str	r3, [r2, #68]	; 0x44
 8002828:	e015      	b.n	8002856 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	69fa      	ldr	r2, [r7, #28]
 8002834:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002838:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800283c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002840:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	69fa      	ldr	r2, [r7, #28]
 800284c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002850:	f043 030b 	orr.w	r3, r3, #11
 8002854:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	69fa      	ldr	r2, [r7, #28]
 8002860:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002864:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002868:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6818      	ldr	r0, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800287a:	461a      	mov	r2, r3
 800287c:	f003 f802 	bl	8005884 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	695a      	ldr	r2, [r3, #20]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800288e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4618      	mov	r0, r3
 8002896:	f002 ff31 	bl	80056fc <USB_ReadInterrupts>
 800289a:	4603      	mov	r3, r0
 800289c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028a4:	d124      	bne.n	80028f0 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f002 ffc7 	bl	800583e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f001 ff7c 	bl	80047b2 <USB_GetDevSpeed>
 80028ba:	4603      	mov	r3, r0
 80028bc:	461a      	mov	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681c      	ldr	r4, [r3, #0]
 80028c6:	f001 fa29 	bl	8003d1c <HAL_RCC_GetHCLKFreq>
 80028ca:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	461a      	mov	r2, r3
 80028d4:	4620      	mov	r0, r4
 80028d6:	f001 fc7b 	bl	80041d0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f007 fbc3 	bl	800a066 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	695a      	ldr	r2, [r3, #20]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80028ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f002 ff01 	bl	80056fc <USB_ReadInterrupts>
 80028fa:	4603      	mov	r3, r0
 80028fc:	f003 0308 	and.w	r3, r3, #8
 8002900:	2b08      	cmp	r3, #8
 8002902:	d10a      	bne.n	800291a <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f007 fba0 	bl	800a04a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	695a      	ldr	r2, [r3, #20]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f002 0208 	and.w	r2, r2, #8
 8002918:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4618      	mov	r0, r3
 8002920:	f002 feec 	bl	80056fc <USB_ReadInterrupts>
 8002924:	4603      	mov	r3, r0
 8002926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800292a:	2b80      	cmp	r3, #128	; 0x80
 800292c:	d122      	bne.n	8002974 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800292e:	6a3b      	ldr	r3, [r7, #32]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002936:	6a3b      	ldr	r3, [r7, #32]
 8002938:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800293a:	2301      	movs	r3, #1
 800293c:	627b      	str	r3, [r7, #36]	; 0x24
 800293e:	e014      	b.n	800296a <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002944:	4613      	mov	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	4413      	add	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d105      	bne.n	8002964 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	b2db      	uxtb	r3, r3
 800295c:	4619      	mov	r1, r3
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 fb27 	bl	8002fb2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	3301      	adds	r3, #1
 8002968:	627b      	str	r3, [r7, #36]	; 0x24
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002970:	429a      	cmp	r2, r3
 8002972:	d3e5      	bcc.n	8002940 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	f002 febf 	bl	80056fc <USB_ReadInterrupts>
 800297e:	4603      	mov	r3, r0
 8002980:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002984:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002988:	d13b      	bne.n	8002a02 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800298a:	2301      	movs	r3, #1
 800298c:	627b      	str	r3, [r7, #36]	; 0x24
 800298e:	e02b      	b.n	80029e8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002992:	015a      	lsls	r2, r3, #5
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	4413      	add	r3, r2
 8002998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80029a0:	6879      	ldr	r1, [r7, #4]
 80029a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029a4:	4613      	mov	r3, r2
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	4413      	add	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	440b      	add	r3, r1
 80029ae:	3340      	adds	r3, #64	; 0x40
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d115      	bne.n	80029e2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80029b6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	da12      	bge.n	80029e2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c0:	4613      	mov	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	4413      	add	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	333f      	adds	r3, #63	; 0x3f
 80029cc:	2201      	movs	r2, #1
 80029ce:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	4619      	mov	r1, r3
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 fae8 	bl	8002fb2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	3301      	adds	r3, #1
 80029e6:	627b      	str	r3, [r7, #36]	; 0x24
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d3ce      	bcc.n	8002990 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	695a      	ldr	r2, [r3, #20]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002a00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f002 fe78 	bl	80056fc <USB_ReadInterrupts>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a16:	d155      	bne.n	8002ac4 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a18:	2301      	movs	r3, #1
 8002a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a1c:	e045      	b.n	8002aaa <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	015a      	lsls	r2, r3, #5
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	4413      	add	r3, r2
 8002a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a32:	4613      	mov	r3, r2
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	4413      	add	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	440b      	add	r3, r1
 8002a3c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d12e      	bne.n	8002aa4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002a46:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	da2b      	bge.n	8002aa4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002a58:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d121      	bne.n	8002aa4 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002a60:	6879      	ldr	r1, [r7, #4]
 8002a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a64:	4613      	mov	r3, r2
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	4413      	add	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002a72:	2201      	movs	r2, #1
 8002a74:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002a7e:	6a3b      	ldr	r3, [r7, #32]
 8002a80:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002a82:	6a3b      	ldr	r3, [r7, #32]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10a      	bne.n	8002aa4 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	69fa      	ldr	r2, [r7, #28]
 8002a98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002aa0:	6053      	str	r3, [r2, #4]
            break;
 8002aa2:	e007      	b.n	8002ab4 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d3b4      	bcc.n	8002a1e <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	695a      	ldr	r2, [r3, #20]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002ac2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f002 fe17 	bl	80056fc <USB_ReadInterrupts>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ad8:	d10a      	bne.n	8002af0 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f007 fb3a 	bl	800a154 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	695a      	ldr	r2, [r3, #20]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002aee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f002 fe01 	bl	80056fc <USB_ReadInterrupts>
 8002afa:	4603      	mov	r3, r0
 8002afc:	f003 0304 	and.w	r3, r3, #4
 8002b00:	2b04      	cmp	r3, #4
 8002b02:	d115      	bne.n	8002b30 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	f003 0304 	and.w	r3, r3, #4
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d002      	beq.n	8002b1c <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f007 fb2a 	bl	800a170 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6859      	ldr	r1, [r3, #4]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	605a      	str	r2, [r3, #4]
 8002b2c:	e000      	b.n	8002b30 <HAL_PCD_IRQHandler+0x938>
      return;
 8002b2e:	bf00      	nop
    }
  }
}
 8002b30:	3734      	adds	r7, #52	; 0x34
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd90      	pop	{r4, r7, pc}

08002b36 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b082      	sub	sp, #8
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
 8002b3e:	460b      	mov	r3, r1
 8002b40:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d101      	bne.n	8002b50 <HAL_PCD_SetAddress+0x1a>
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	e013      	b.n	8002b78 <HAL_PCD_SetAddress+0x42>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	78fa      	ldrb	r2, [r7, #3]
 8002b5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	78fa      	ldrb	r2, [r7, #3]
 8002b66:	4611      	mov	r1, r2
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f002 fd5f 	bl	800562c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	4608      	mov	r0, r1
 8002b8a:	4611      	mov	r1, r2
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	4603      	mov	r3, r0
 8002b90:	70fb      	strb	r3, [r7, #3]
 8002b92:	460b      	mov	r3, r1
 8002b94:	803b      	strh	r3, [r7, #0]
 8002b96:	4613      	mov	r3, r2
 8002b98:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	da0f      	bge.n	8002bc6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ba6:	78fb      	ldrb	r3, [r7, #3]
 8002ba8:	f003 020f 	and.w	r2, r3, #15
 8002bac:	4613      	mov	r3, r2
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	4413      	add	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	3338      	adds	r3, #56	; 0x38
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	4413      	add	r3, r2
 8002bba:	3304      	adds	r3, #4
 8002bbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	705a      	strb	r2, [r3, #1]
 8002bc4:	e00f      	b.n	8002be6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bc6:	78fb      	ldrb	r3, [r7, #3]
 8002bc8:	f003 020f 	and.w	r2, r3, #15
 8002bcc:	4613      	mov	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	4413      	add	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	4413      	add	r3, r2
 8002bdc:	3304      	adds	r3, #4
 8002bde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002be6:	78fb      	ldrb	r3, [r7, #3]
 8002be8:	f003 030f 	and.w	r3, r3, #15
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002bf2:	883a      	ldrh	r2, [r7, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	78ba      	ldrb	r2, [r7, #2]
 8002bfc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	785b      	ldrb	r3, [r3, #1]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d004      	beq.n	8002c10 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002c10:	78bb      	ldrb	r3, [r7, #2]
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d102      	bne.n	8002c1c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d101      	bne.n	8002c2a <HAL_PCD_EP_Open+0xaa>
 8002c26:	2302      	movs	r3, #2
 8002c28:	e00e      	b.n	8002c48 <HAL_PCD_EP_Open+0xc8>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68f9      	ldr	r1, [r7, #12]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f001 fddf 	bl	80047fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002c46:	7afb      	ldrb	r3, [r7, #11]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	460b      	mov	r3, r1
 8002c5a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	da0f      	bge.n	8002c84 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c64:	78fb      	ldrb	r3, [r7, #3]
 8002c66:	f003 020f 	and.w	r2, r3, #15
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	4413      	add	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	3338      	adds	r3, #56	; 0x38
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	4413      	add	r3, r2
 8002c78:	3304      	adds	r3, #4
 8002c7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	705a      	strb	r2, [r3, #1]
 8002c82:	e00f      	b.n	8002ca4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c84:	78fb      	ldrb	r3, [r7, #3]
 8002c86:	f003 020f 	and.w	r2, r3, #15
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	4413      	add	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	4413      	add	r3, r2
 8002c9a:	3304      	adds	r3, #4
 8002c9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002ca4:	78fb      	ldrb	r3, [r7, #3]
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	b2da      	uxtb	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d101      	bne.n	8002cbe <HAL_PCD_EP_Close+0x6e>
 8002cba:	2302      	movs	r3, #2
 8002cbc:	e00e      	b.n	8002cdc <HAL_PCD_EP_Close+0x8c>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68f9      	ldr	r1, [r7, #12]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f001 fe1d 	bl	800490c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	607a      	str	r2, [r7, #4]
 8002cee:	603b      	str	r3, [r7, #0]
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cf4:	7afb      	ldrb	r3, [r7, #11]
 8002cf6:	f003 020f 	and.w	r2, r3, #15
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	4413      	add	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	4413      	add	r3, r2
 8002d0a:	3304      	adds	r3, #4
 8002d0c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	2200      	movs	r2, #0
 8002d24:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d26:	7afb      	ldrb	r3, [r7, #11]
 8002d28:	f003 030f 	and.w	r3, r3, #15
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d102      	bne.n	8002d40 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d40:	7afb      	ldrb	r3, [r7, #11]
 8002d42:	f003 030f 	and.w	r3, r3, #15
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d109      	bne.n	8002d5e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6818      	ldr	r0, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	461a      	mov	r2, r3
 8002d56:	6979      	ldr	r1, [r7, #20]
 8002d58:	f002 f8fc 	bl	8004f54 <USB_EP0StartXfer>
 8002d5c:	e008      	b.n	8002d70 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6818      	ldr	r0, [r3, #0]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	461a      	mov	r2, r3
 8002d6a:	6979      	ldr	r1, [r7, #20]
 8002d6c:	f001 feaa 	bl	8004ac4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3718      	adds	r7, #24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b083      	sub	sp, #12
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
 8002d82:	460b      	mov	r3, r1
 8002d84:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002d86:	78fb      	ldrb	r3, [r7, #3]
 8002d88:	f003 020f 	and.w	r2, r3, #15
 8002d8c:	6879      	ldr	r1, [r7, #4]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	4413      	add	r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	440b      	add	r3, r1
 8002d98:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002d9c:	681b      	ldr	r3, [r3, #0]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b086      	sub	sp, #24
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	60f8      	str	r0, [r7, #12]
 8002db2:	607a      	str	r2, [r7, #4]
 8002db4:	603b      	str	r3, [r7, #0]
 8002db6:	460b      	mov	r3, r1
 8002db8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dba:	7afb      	ldrb	r3, [r7, #11]
 8002dbc:	f003 020f 	and.w	r2, r3, #15
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	4413      	add	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	3338      	adds	r3, #56	; 0x38
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	4413      	add	r3, r2
 8002dce:	3304      	adds	r3, #4
 8002dd0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	2200      	movs	r2, #0
 8002de2:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	2201      	movs	r2, #1
 8002de8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dea:	7afb      	ldrb	r3, [r7, #11]
 8002dec:	f003 030f 	and.w	r3, r3, #15
 8002df0:	b2da      	uxtb	r2, r3
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d102      	bne.n	8002e04 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e04:	7afb      	ldrb	r3, [r7, #11]
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d109      	bne.n	8002e22 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6818      	ldr	r0, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	461a      	mov	r2, r3
 8002e1a:	6979      	ldr	r1, [r7, #20]
 8002e1c:	f002 f89a 	bl	8004f54 <USB_EP0StartXfer>
 8002e20:	e008      	b.n	8002e34 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6818      	ldr	r0, [r3, #0]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	6979      	ldr	r1, [r7, #20]
 8002e30:	f001 fe48 	bl	8004ac4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3718      	adds	r7, #24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b084      	sub	sp, #16
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
 8002e46:	460b      	mov	r3, r1
 8002e48:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002e4a:	78fb      	ldrb	r3, [r7, #3]
 8002e4c:	f003 020f 	and.w	r2, r3, #15
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d901      	bls.n	8002e5c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e050      	b.n	8002efe <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	da0f      	bge.n	8002e84 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e64:	78fb      	ldrb	r3, [r7, #3]
 8002e66:	f003 020f 	and.w	r2, r3, #15
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	4413      	add	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	3338      	adds	r3, #56	; 0x38
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	4413      	add	r3, r2
 8002e78:	3304      	adds	r3, #4
 8002e7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	705a      	strb	r2, [r3, #1]
 8002e82:	e00d      	b.n	8002ea0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e84:	78fa      	ldrb	r2, [r7, #3]
 8002e86:	4613      	mov	r3, r2
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	4413      	add	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	4413      	add	r3, r2
 8002e96:	3304      	adds	r3, #4
 8002e98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ea6:	78fb      	ldrb	r3, [r7, #3]
 8002ea8:	f003 030f 	and.w	r3, r3, #15
 8002eac:	b2da      	uxtb	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d101      	bne.n	8002ec0 <HAL_PCD_EP_SetStall+0x82>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	e01e      	b.n	8002efe <HAL_PCD_EP_SetStall+0xc0>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68f9      	ldr	r1, [r7, #12]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f002 fad8 	bl	8005484 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ed4:	78fb      	ldrb	r3, [r7, #3]
 8002ed6:	f003 030f 	and.w	r3, r3, #15
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10a      	bne.n	8002ef4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6818      	ldr	r0, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	b2d9      	uxtb	r1, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002eee:	461a      	mov	r2, r3
 8002ef0:	f002 fcc8 	bl	8005884 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b084      	sub	sp, #16
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
 8002f0e:	460b      	mov	r3, r1
 8002f10:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f12:	78fb      	ldrb	r3, [r7, #3]
 8002f14:	f003 020f 	and.w	r2, r3, #15
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d901      	bls.n	8002f24 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e042      	b.n	8002faa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	da0f      	bge.n	8002f4c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f2c:	78fb      	ldrb	r3, [r7, #3]
 8002f2e:	f003 020f 	and.w	r2, r3, #15
 8002f32:	4613      	mov	r3, r2
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	4413      	add	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	3338      	adds	r3, #56	; 0x38
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	4413      	add	r3, r2
 8002f40:	3304      	adds	r3, #4
 8002f42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2201      	movs	r2, #1
 8002f48:	705a      	strb	r2, [r3, #1]
 8002f4a:	e00f      	b.n	8002f6c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f4c:	78fb      	ldrb	r3, [r7, #3]
 8002f4e:	f003 020f 	and.w	r2, r3, #15
 8002f52:	4613      	mov	r3, r2
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	4413      	add	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	4413      	add	r3, r2
 8002f62:	3304      	adds	r3, #4
 8002f64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f72:	78fb      	ldrb	r3, [r7, #3]
 8002f74:	f003 030f 	and.w	r3, r3, #15
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d101      	bne.n	8002f8c <HAL_PCD_EP_ClrStall+0x86>
 8002f88:	2302      	movs	r3, #2
 8002f8a:	e00e      	b.n	8002faa <HAL_PCD_EP_ClrStall+0xa4>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68f9      	ldr	r1, [r7, #12]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f002 fae0 	bl	8005560 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b084      	sub	sp, #16
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
 8002fba:	460b      	mov	r3, r1
 8002fbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002fbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	da0c      	bge.n	8002fe0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fc6:	78fb      	ldrb	r3, [r7, #3]
 8002fc8:	f003 020f 	and.w	r2, r3, #15
 8002fcc:	4613      	mov	r3, r2
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	4413      	add	r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	3338      	adds	r3, #56	; 0x38
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	4413      	add	r3, r2
 8002fda:	3304      	adds	r3, #4
 8002fdc:	60fb      	str	r3, [r7, #12]
 8002fde:	e00c      	b.n	8002ffa <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fe0:	78fb      	ldrb	r3, [r7, #3]
 8002fe2:	f003 020f 	and.w	r2, r3, #15
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	00db      	lsls	r3, r3, #3
 8002fea:	4413      	add	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	3304      	adds	r3, #4
 8002ff8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68f9      	ldr	r1, [r7, #12]
 8003000:	4618      	mov	r0, r3
 8003002:	f002 f8ff 	bl	8005204 <USB_EPStopXfer>
 8003006:	4603      	mov	r3, r0
 8003008:	72fb      	strb	r3, [r7, #11]

  return ret;
 800300a:	7afb      	ldrb	r3, [r7, #11]
}
 800300c:	4618      	mov	r0, r3
 800300e:	3710      	adds	r7, #16
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b08a      	sub	sp, #40	; 0x28
 8003018:	af02      	add	r7, sp, #8
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003028:	683a      	ldr	r2, [r7, #0]
 800302a:	4613      	mov	r3, r2
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	4413      	add	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	3338      	adds	r3, #56	; 0x38
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	4413      	add	r3, r2
 8003038:	3304      	adds	r3, #4
 800303a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6a1a      	ldr	r2, [r3, #32]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	429a      	cmp	r2, r3
 8003046:	d901      	bls.n	800304c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e06c      	b.n	8003126 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	699a      	ldr	r2, [r3, #24]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	69fa      	ldr	r2, [r7, #28]
 800305e:	429a      	cmp	r2, r3
 8003060:	d902      	bls.n	8003068 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	3303      	adds	r3, #3
 800306c:	089b      	lsrs	r3, r3, #2
 800306e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003070:	e02b      	b.n	80030ca <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	699a      	ldr	r2, [r3, #24]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	69fa      	ldr	r2, [r7, #28]
 8003084:	429a      	cmp	r2, r3
 8003086:	d902      	bls.n	800308e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	3303      	adds	r3, #3
 8003092:	089b      	lsrs	r3, r3, #2
 8003094:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6919      	ldr	r1, [r3, #16]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	b2da      	uxtb	r2, r3
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	4603      	mov	r3, r0
 80030ac:	6978      	ldr	r0, [r7, #20]
 80030ae:	f002 f953 	bl	8005358 <USB_WritePacket>

    ep->xfer_buff  += len;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	691a      	ldr	r2, [r3, #16]
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	441a      	add	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6a1a      	ldr	r2, [r3, #32]
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	441a      	add	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	015a      	lsls	r2, r3, #5
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	4413      	add	r3, r2
 80030d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	b29b      	uxth	r3, r3
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d809      	bhi.n	80030f4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6a1a      	ldr	r2, [r3, #32]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d203      	bcs.n	80030f4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1be      	bne.n	8003072 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	699a      	ldr	r2, [r3, #24]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d811      	bhi.n	8003124 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	f003 030f 	and.w	r3, r3, #15
 8003106:	2201      	movs	r2, #1
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003114:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	43db      	mvns	r3, r3
 800311a:	6939      	ldr	r1, [r7, #16]
 800311c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003120:	4013      	ands	r3, r2
 8003122:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3720      	adds	r7, #32
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
	...

08003130 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b088      	sub	sp, #32
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	333c      	adds	r3, #60	; 0x3c
 8003148:	3304      	adds	r3, #4
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	015a      	lsls	r2, r3, #5
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	4413      	add	r3, r2
 8003156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d17b      	bne.n	800325e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	f003 0308 	and.w	r3, r3, #8
 800316c:	2b00      	cmp	r3, #0
 800316e:	d015      	beq.n	800319c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	4a61      	ldr	r2, [pc, #388]	; (80032f8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003174:	4293      	cmp	r3, r2
 8003176:	f240 80b9 	bls.w	80032ec <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003180:	2b00      	cmp	r3, #0
 8003182:	f000 80b3 	beq.w	80032ec <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	015a      	lsls	r2, r3, #5
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	4413      	add	r3, r2
 800318e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003192:	461a      	mov	r2, r3
 8003194:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003198:	6093      	str	r3, [r2, #8]
 800319a:	e0a7      	b.n	80032ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	f003 0320 	and.w	r3, r3, #32
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d009      	beq.n	80031ba <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	015a      	lsls	r2, r3, #5
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	4413      	add	r3, r2
 80031ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031b2:	461a      	mov	r2, r3
 80031b4:	2320      	movs	r3, #32
 80031b6:	6093      	str	r3, [r2, #8]
 80031b8:	e098      	b.n	80032ec <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f040 8093 	bne.w	80032ec <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	4a4b      	ldr	r2, [pc, #300]	; (80032f8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d90f      	bls.n	80031ee <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00a      	beq.n	80031ee <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	015a      	lsls	r2, r3, #5
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	4413      	add	r3, r2
 80031e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031e4:	461a      	mov	r2, r3
 80031e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031ea:	6093      	str	r3, [r2, #8]
 80031ec:	e07e      	b.n	80032ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	4613      	mov	r3, r2
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	4413      	add	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	4413      	add	r3, r2
 8003200:	3304      	adds	r3, #4
 8003202:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	69da      	ldr	r2, [r3, #28]
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	0159      	lsls	r1, r3, #5
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	440b      	add	r3, r1
 8003210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800321a:	1ad2      	subs	r2, r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d114      	bne.n	8003250 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d109      	bne.n	8003242 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6818      	ldr	r0, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003238:	461a      	mov	r2, r3
 800323a:	2101      	movs	r1, #1
 800323c:	f002 fb22 	bl	8005884 <USB_EP0_OutStart>
 8003240:	e006      	b.n	8003250 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	691a      	ldr	r2, [r3, #16]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	441a      	add	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	b2db      	uxtb	r3, r3
 8003254:	4619      	mov	r1, r3
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f006 fec2 	bl	8009fe0 <HAL_PCD_DataOutStageCallback>
 800325c:	e046      	b.n	80032ec <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	4a26      	ldr	r2, [pc, #152]	; (80032fc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d124      	bne.n	80032b0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00a      	beq.n	8003286 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	015a      	lsls	r2, r3, #5
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	4413      	add	r3, r2
 8003278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800327c:	461a      	mov	r2, r3
 800327e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003282:	6093      	str	r3, [r2, #8]
 8003284:	e032      	b.n	80032ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	f003 0320 	and.w	r3, r3, #32
 800328c:	2b00      	cmp	r3, #0
 800328e:	d008      	beq.n	80032a2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	015a      	lsls	r2, r3, #5
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	4413      	add	r3, r2
 8003298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800329c:	461a      	mov	r2, r3
 800329e:	2320      	movs	r3, #32
 80032a0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	4619      	mov	r1, r3
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f006 fe99 	bl	8009fe0 <HAL_PCD_DataOutStageCallback>
 80032ae:	e01d      	b.n	80032ec <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d114      	bne.n	80032e0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80032b6:	6879      	ldr	r1, [r7, #4]
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	4613      	mov	r3, r2
 80032bc:	00db      	lsls	r3, r3, #3
 80032be:	4413      	add	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	440b      	add	r3, r1
 80032c4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d108      	bne.n	80032e0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6818      	ldr	r0, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80032d8:	461a      	mov	r2, r3
 80032da:	2100      	movs	r1, #0
 80032dc:	f002 fad2 	bl	8005884 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	4619      	mov	r1, r3
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f006 fe7a 	bl	8009fe0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3720      	adds	r7, #32
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	4f54300a 	.word	0x4f54300a
 80032fc:	4f54310a 	.word	0x4f54310a

08003300 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	333c      	adds	r3, #60	; 0x3c
 8003318:	3304      	adds	r3, #4
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	015a      	lsls	r2, r3, #5
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	4413      	add	r3, r2
 8003326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	4a15      	ldr	r2, [pc, #84]	; (8003388 <PCD_EP_OutSetupPacket_int+0x88>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d90e      	bls.n	8003354 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800333c:	2b00      	cmp	r3, #0
 800333e:	d009      	beq.n	8003354 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	015a      	lsls	r2, r3, #5
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	4413      	add	r3, r2
 8003348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800334c:	461a      	mov	r2, r3
 800334e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003352:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f006 fe31 	bl	8009fbc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	4a0a      	ldr	r2, [pc, #40]	; (8003388 <PCD_EP_OutSetupPacket_int+0x88>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d90c      	bls.n	800337c <PCD_EP_OutSetupPacket_int+0x7c>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d108      	bne.n	800337c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6818      	ldr	r0, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003374:	461a      	mov	r2, r3
 8003376:	2101      	movs	r1, #1
 8003378:	f002 fa84 	bl	8005884 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3718      	adds	r7, #24
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	4f54300a 	.word	0x4f54300a

0800338c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	460b      	mov	r3, r1
 8003396:	70fb      	strb	r3, [r7, #3]
 8003398:	4613      	mov	r3, r2
 800339a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80033a4:	78fb      	ldrb	r3, [r7, #3]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d107      	bne.n	80033ba <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80033aa:	883b      	ldrh	r3, [r7, #0]
 80033ac:	0419      	lsls	r1, r3, #16
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68ba      	ldr	r2, [r7, #8]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	629a      	str	r2, [r3, #40]	; 0x28
 80033b8:	e028      	b.n	800340c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c0:	0c1b      	lsrs	r3, r3, #16
 80033c2:	68ba      	ldr	r2, [r7, #8]
 80033c4:	4413      	add	r3, r2
 80033c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80033c8:	2300      	movs	r3, #0
 80033ca:	73fb      	strb	r3, [r7, #15]
 80033cc:	e00d      	b.n	80033ea <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	7bfb      	ldrb	r3, [r7, #15]
 80033d4:	3340      	adds	r3, #64	; 0x40
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	4413      	add	r3, r2
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	0c1b      	lsrs	r3, r3, #16
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	4413      	add	r3, r2
 80033e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80033e4:	7bfb      	ldrb	r3, [r7, #15]
 80033e6:	3301      	adds	r3, #1
 80033e8:	73fb      	strb	r3, [r7, #15]
 80033ea:	7bfa      	ldrb	r2, [r7, #15]
 80033ec:	78fb      	ldrb	r3, [r7, #3]
 80033ee:	3b01      	subs	r3, #1
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d3ec      	bcc.n	80033ce <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80033f4:	883b      	ldrh	r3, [r7, #0]
 80033f6:	0418      	lsls	r0, r3, #16
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6819      	ldr	r1, [r3, #0]
 80033fc:	78fb      	ldrb	r3, [r7, #3]
 80033fe:	3b01      	subs	r3, #1
 8003400:	68ba      	ldr	r2, [r7, #8]
 8003402:	4302      	orrs	r2, r0
 8003404:	3340      	adds	r3, #64	; 0x40
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3714      	adds	r7, #20
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr

0800341a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800341a:	b480      	push	{r7}
 800341c:	b083      	sub	sp, #12
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
 8003422:	460b      	mov	r3, r1
 8003424:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	887a      	ldrh	r2, [r7, #2]
 800342c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	460b      	mov	r3, r1
 8003446:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e267      	b.n	8003936 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b00      	cmp	r3, #0
 8003470:	d075      	beq.n	800355e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003472:	4b88      	ldr	r3, [pc, #544]	; (8003694 <HAL_RCC_OscConfig+0x240>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 030c 	and.w	r3, r3, #12
 800347a:	2b04      	cmp	r3, #4
 800347c:	d00c      	beq.n	8003498 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800347e:	4b85      	ldr	r3, [pc, #532]	; (8003694 <HAL_RCC_OscConfig+0x240>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003486:	2b08      	cmp	r3, #8
 8003488:	d112      	bne.n	80034b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800348a:	4b82      	ldr	r3, [pc, #520]	; (8003694 <HAL_RCC_OscConfig+0x240>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003492:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003496:	d10b      	bne.n	80034b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003498:	4b7e      	ldr	r3, [pc, #504]	; (8003694 <HAL_RCC_OscConfig+0x240>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d05b      	beq.n	800355c <HAL_RCC_OscConfig+0x108>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d157      	bne.n	800355c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e242      	b.n	8003936 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034b8:	d106      	bne.n	80034c8 <HAL_RCC_OscConfig+0x74>
 80034ba:	4b76      	ldr	r3, [pc, #472]	; (8003694 <HAL_RCC_OscConfig+0x240>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a75      	ldr	r2, [pc, #468]	; (8003694 <HAL_RCC_OscConfig+0x240>)
 80034c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034c4:	6013      	str	r3, [r2, #0]
 80034c6:	e01d      	b.n	8003504 <HAL_RCC_OscConfig+0xb0>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034d0:	d10c      	bne.n	80034ec <HAL_RCC_OscConfig+0x98>
 80034d2:	4b70      	ldr	r3, [pc, #448]	; (8003694 <HAL_RCC_OscConfig+0x240>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a6f      	ldr	r2, [pc, #444]	; (8003694 <HAL_RCC_OscConfig+0x240>)
 80034d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034dc:	6013      	str	r3, [r2, #0]
 80034de:	4b6d      	ldr	r3, [pc, #436]	; (8003694 <HAL_RCC_OscConfig+0x240>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a6c      	ldr	r2, [pc, #432]	; (8003694 <HAL_RCC_OscConfig+0x240>)
 80034e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034e8:	6013      	str	r3, [r2, #0]
 80034ea:	e00b      	b.n	8003504 <HAL_RCC_OscConfig+0xb0>
 80034ec:	4b69      	ldr	r3, [pc, #420]	; (8003694 <HAL_RCC_OscConfig+0x240>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a68      	ldr	r2, [pc, #416]	; (8003694 <HAL_RCC_OscConfig+0x240>)
 80034f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034f6:	6013      	str	r3, [r2, #0]
 80034f8:	4b66      	ldr	r3, [pc, #408]	; (8003694 <HAL_RCC_OscConfig+0x240>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a65      	ldr	r2, [pc, #404]	; (8003694 <HAL_RCC_OscConfig+0x240>)
 80034fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003502:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d013      	beq.n	8003534 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800350c:	f7fd fc60 	bl	8000dd0 <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003514:	f7fd fc5c 	bl	8000dd0 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b64      	cmp	r3, #100	; 0x64
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e207      	b.n	8003936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003526:	4b5b      	ldr	r3, [pc, #364]	; (8003694 <HAL_RCC_OscConfig+0x240>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d0f0      	beq.n	8003514 <HAL_RCC_OscConfig+0xc0>
 8003532:	e014      	b.n	800355e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003534:	f7fd fc4c 	bl	8000dd0 <HAL_GetTick>
 8003538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800353a:	e008      	b.n	800354e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800353c:	f7fd fc48 	bl	8000dd0 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b64      	cmp	r3, #100	; 0x64
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e1f3      	b.n	8003936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800354e:	4b51      	ldr	r3, [pc, #324]	; (8003694 <HAL_RCC_OscConfig+0x240>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1f0      	bne.n	800353c <HAL_RCC_OscConfig+0xe8>
 800355a:	e000      	b.n	800355e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800355c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d063      	beq.n	8003632 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800356a:	4b4a      	ldr	r3, [pc, #296]	; (8003694 <HAL_RCC_OscConfig+0x240>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 030c 	and.w	r3, r3, #12
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00b      	beq.n	800358e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003576:	4b47      	ldr	r3, [pc, #284]	; (8003694 <HAL_RCC_OscConfig+0x240>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800357e:	2b08      	cmp	r3, #8
 8003580:	d11c      	bne.n	80035bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003582:	4b44      	ldr	r3, [pc, #272]	; (8003694 <HAL_RCC_OscConfig+0x240>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d116      	bne.n	80035bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800358e:	4b41      	ldr	r3, [pc, #260]	; (8003694 <HAL_RCC_OscConfig+0x240>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d005      	beq.n	80035a6 <HAL_RCC_OscConfig+0x152>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d001      	beq.n	80035a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e1c7      	b.n	8003936 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035a6:	4b3b      	ldr	r3, [pc, #236]	; (8003694 <HAL_RCC_OscConfig+0x240>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	4937      	ldr	r1, [pc, #220]	; (8003694 <HAL_RCC_OscConfig+0x240>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ba:	e03a      	b.n	8003632 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d020      	beq.n	8003606 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035c4:	4b34      	ldr	r3, [pc, #208]	; (8003698 <HAL_RCC_OscConfig+0x244>)
 80035c6:	2201      	movs	r2, #1
 80035c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ca:	f7fd fc01 	bl	8000dd0 <HAL_GetTick>
 80035ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035d0:	e008      	b.n	80035e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035d2:	f7fd fbfd 	bl	8000dd0 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d901      	bls.n	80035e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e1a8      	b.n	8003936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035e4:	4b2b      	ldr	r3, [pc, #172]	; (8003694 <HAL_RCC_OscConfig+0x240>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d0f0      	beq.n	80035d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035f0:	4b28      	ldr	r3, [pc, #160]	; (8003694 <HAL_RCC_OscConfig+0x240>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	4925      	ldr	r1, [pc, #148]	; (8003694 <HAL_RCC_OscConfig+0x240>)
 8003600:	4313      	orrs	r3, r2
 8003602:	600b      	str	r3, [r1, #0]
 8003604:	e015      	b.n	8003632 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003606:	4b24      	ldr	r3, [pc, #144]	; (8003698 <HAL_RCC_OscConfig+0x244>)
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800360c:	f7fd fbe0 	bl	8000dd0 <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003614:	f7fd fbdc 	bl	8000dd0 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b02      	cmp	r3, #2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e187      	b.n	8003936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003626:	4b1b      	ldr	r3, [pc, #108]	; (8003694 <HAL_RCC_OscConfig+0x240>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1f0      	bne.n	8003614 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0308 	and.w	r3, r3, #8
 800363a:	2b00      	cmp	r3, #0
 800363c:	d036      	beq.n	80036ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d016      	beq.n	8003674 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003646:	4b15      	ldr	r3, [pc, #84]	; (800369c <HAL_RCC_OscConfig+0x248>)
 8003648:	2201      	movs	r2, #1
 800364a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800364c:	f7fd fbc0 	bl	8000dd0 <HAL_GetTick>
 8003650:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003652:	e008      	b.n	8003666 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003654:	f7fd fbbc 	bl	8000dd0 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b02      	cmp	r3, #2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e167      	b.n	8003936 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003666:	4b0b      	ldr	r3, [pc, #44]	; (8003694 <HAL_RCC_OscConfig+0x240>)
 8003668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d0f0      	beq.n	8003654 <HAL_RCC_OscConfig+0x200>
 8003672:	e01b      	b.n	80036ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003674:	4b09      	ldr	r3, [pc, #36]	; (800369c <HAL_RCC_OscConfig+0x248>)
 8003676:	2200      	movs	r2, #0
 8003678:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800367a:	f7fd fba9 	bl	8000dd0 <HAL_GetTick>
 800367e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003680:	e00e      	b.n	80036a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003682:	f7fd fba5 	bl	8000dd0 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b02      	cmp	r3, #2
 800368e:	d907      	bls.n	80036a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e150      	b.n	8003936 <HAL_RCC_OscConfig+0x4e2>
 8003694:	40023800 	.word	0x40023800
 8003698:	42470000 	.word	0x42470000
 800369c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036a0:	4b88      	ldr	r3, [pc, #544]	; (80038c4 <HAL_RCC_OscConfig+0x470>)
 80036a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1ea      	bne.n	8003682 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0304 	and.w	r3, r3, #4
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 8097 	beq.w	80037e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036ba:	2300      	movs	r3, #0
 80036bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036be:	4b81      	ldr	r3, [pc, #516]	; (80038c4 <HAL_RCC_OscConfig+0x470>)
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10f      	bne.n	80036ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ca:	2300      	movs	r3, #0
 80036cc:	60bb      	str	r3, [r7, #8]
 80036ce:	4b7d      	ldr	r3, [pc, #500]	; (80038c4 <HAL_RCC_OscConfig+0x470>)
 80036d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d2:	4a7c      	ldr	r2, [pc, #496]	; (80038c4 <HAL_RCC_OscConfig+0x470>)
 80036d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036d8:	6413      	str	r3, [r2, #64]	; 0x40
 80036da:	4b7a      	ldr	r3, [pc, #488]	; (80038c4 <HAL_RCC_OscConfig+0x470>)
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e2:	60bb      	str	r3, [r7, #8]
 80036e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036e6:	2301      	movs	r3, #1
 80036e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ea:	4b77      	ldr	r3, [pc, #476]	; (80038c8 <HAL_RCC_OscConfig+0x474>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d118      	bne.n	8003728 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036f6:	4b74      	ldr	r3, [pc, #464]	; (80038c8 <HAL_RCC_OscConfig+0x474>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a73      	ldr	r2, [pc, #460]	; (80038c8 <HAL_RCC_OscConfig+0x474>)
 80036fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003700:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003702:	f7fd fb65 	bl	8000dd0 <HAL_GetTick>
 8003706:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003708:	e008      	b.n	800371c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800370a:	f7fd fb61 	bl	8000dd0 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d901      	bls.n	800371c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e10c      	b.n	8003936 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800371c:	4b6a      	ldr	r3, [pc, #424]	; (80038c8 <HAL_RCC_OscConfig+0x474>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003724:	2b00      	cmp	r3, #0
 8003726:	d0f0      	beq.n	800370a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d106      	bne.n	800373e <HAL_RCC_OscConfig+0x2ea>
 8003730:	4b64      	ldr	r3, [pc, #400]	; (80038c4 <HAL_RCC_OscConfig+0x470>)
 8003732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003734:	4a63      	ldr	r2, [pc, #396]	; (80038c4 <HAL_RCC_OscConfig+0x470>)
 8003736:	f043 0301 	orr.w	r3, r3, #1
 800373a:	6713      	str	r3, [r2, #112]	; 0x70
 800373c:	e01c      	b.n	8003778 <HAL_RCC_OscConfig+0x324>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	2b05      	cmp	r3, #5
 8003744:	d10c      	bne.n	8003760 <HAL_RCC_OscConfig+0x30c>
 8003746:	4b5f      	ldr	r3, [pc, #380]	; (80038c4 <HAL_RCC_OscConfig+0x470>)
 8003748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374a:	4a5e      	ldr	r2, [pc, #376]	; (80038c4 <HAL_RCC_OscConfig+0x470>)
 800374c:	f043 0304 	orr.w	r3, r3, #4
 8003750:	6713      	str	r3, [r2, #112]	; 0x70
 8003752:	4b5c      	ldr	r3, [pc, #368]	; (80038c4 <HAL_RCC_OscConfig+0x470>)
 8003754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003756:	4a5b      	ldr	r2, [pc, #364]	; (80038c4 <HAL_RCC_OscConfig+0x470>)
 8003758:	f043 0301 	orr.w	r3, r3, #1
 800375c:	6713      	str	r3, [r2, #112]	; 0x70
 800375e:	e00b      	b.n	8003778 <HAL_RCC_OscConfig+0x324>
 8003760:	4b58      	ldr	r3, [pc, #352]	; (80038c4 <HAL_RCC_OscConfig+0x470>)
 8003762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003764:	4a57      	ldr	r2, [pc, #348]	; (80038c4 <HAL_RCC_OscConfig+0x470>)
 8003766:	f023 0301 	bic.w	r3, r3, #1
 800376a:	6713      	str	r3, [r2, #112]	; 0x70
 800376c:	4b55      	ldr	r3, [pc, #340]	; (80038c4 <HAL_RCC_OscConfig+0x470>)
 800376e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003770:	4a54      	ldr	r2, [pc, #336]	; (80038c4 <HAL_RCC_OscConfig+0x470>)
 8003772:	f023 0304 	bic.w	r3, r3, #4
 8003776:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d015      	beq.n	80037ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003780:	f7fd fb26 	bl	8000dd0 <HAL_GetTick>
 8003784:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003786:	e00a      	b.n	800379e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003788:	f7fd fb22 	bl	8000dd0 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	f241 3288 	movw	r2, #5000	; 0x1388
 8003796:	4293      	cmp	r3, r2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e0cb      	b.n	8003936 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800379e:	4b49      	ldr	r3, [pc, #292]	; (80038c4 <HAL_RCC_OscConfig+0x470>)
 80037a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0ee      	beq.n	8003788 <HAL_RCC_OscConfig+0x334>
 80037aa:	e014      	b.n	80037d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ac:	f7fd fb10 	bl	8000dd0 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037b2:	e00a      	b.n	80037ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037b4:	f7fd fb0c 	bl	8000dd0 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e0b5      	b.n	8003936 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037ca:	4b3e      	ldr	r3, [pc, #248]	; (80038c4 <HAL_RCC_OscConfig+0x470>)
 80037cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1ee      	bne.n	80037b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037d6:	7dfb      	ldrb	r3, [r7, #23]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d105      	bne.n	80037e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037dc:	4b39      	ldr	r3, [pc, #228]	; (80038c4 <HAL_RCC_OscConfig+0x470>)
 80037de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e0:	4a38      	ldr	r2, [pc, #224]	; (80038c4 <HAL_RCC_OscConfig+0x470>)
 80037e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 80a1 	beq.w	8003934 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037f2:	4b34      	ldr	r3, [pc, #208]	; (80038c4 <HAL_RCC_OscConfig+0x470>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f003 030c 	and.w	r3, r3, #12
 80037fa:	2b08      	cmp	r3, #8
 80037fc:	d05c      	beq.n	80038b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	2b02      	cmp	r3, #2
 8003804:	d141      	bne.n	800388a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003806:	4b31      	ldr	r3, [pc, #196]	; (80038cc <HAL_RCC_OscConfig+0x478>)
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800380c:	f7fd fae0 	bl	8000dd0 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003814:	f7fd fadc 	bl	8000dd0 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e087      	b.n	8003936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003826:	4b27      	ldr	r3, [pc, #156]	; (80038c4 <HAL_RCC_OscConfig+0x470>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1f0      	bne.n	8003814 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	69da      	ldr	r2, [r3, #28]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	431a      	orrs	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003840:	019b      	lsls	r3, r3, #6
 8003842:	431a      	orrs	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003848:	085b      	lsrs	r3, r3, #1
 800384a:	3b01      	subs	r3, #1
 800384c:	041b      	lsls	r3, r3, #16
 800384e:	431a      	orrs	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003854:	061b      	lsls	r3, r3, #24
 8003856:	491b      	ldr	r1, [pc, #108]	; (80038c4 <HAL_RCC_OscConfig+0x470>)
 8003858:	4313      	orrs	r3, r2
 800385a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800385c:	4b1b      	ldr	r3, [pc, #108]	; (80038cc <HAL_RCC_OscConfig+0x478>)
 800385e:	2201      	movs	r2, #1
 8003860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003862:	f7fd fab5 	bl	8000dd0 <HAL_GetTick>
 8003866:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003868:	e008      	b.n	800387c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800386a:	f7fd fab1 	bl	8000dd0 <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	2b02      	cmp	r3, #2
 8003876:	d901      	bls.n	800387c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e05c      	b.n	8003936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800387c:	4b11      	ldr	r3, [pc, #68]	; (80038c4 <HAL_RCC_OscConfig+0x470>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d0f0      	beq.n	800386a <HAL_RCC_OscConfig+0x416>
 8003888:	e054      	b.n	8003934 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800388a:	4b10      	ldr	r3, [pc, #64]	; (80038cc <HAL_RCC_OscConfig+0x478>)
 800388c:	2200      	movs	r2, #0
 800388e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003890:	f7fd fa9e 	bl	8000dd0 <HAL_GetTick>
 8003894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003896:	e008      	b.n	80038aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003898:	f7fd fa9a 	bl	8000dd0 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e045      	b.n	8003936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038aa:	4b06      	ldr	r3, [pc, #24]	; (80038c4 <HAL_RCC_OscConfig+0x470>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1f0      	bne.n	8003898 <HAL_RCC_OscConfig+0x444>
 80038b6:	e03d      	b.n	8003934 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d107      	bne.n	80038d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e038      	b.n	8003936 <HAL_RCC_OscConfig+0x4e2>
 80038c4:	40023800 	.word	0x40023800
 80038c8:	40007000 	.word	0x40007000
 80038cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038d0:	4b1b      	ldr	r3, [pc, #108]	; (8003940 <HAL_RCC_OscConfig+0x4ec>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d028      	beq.n	8003930 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d121      	bne.n	8003930 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d11a      	bne.n	8003930 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003900:	4013      	ands	r3, r2
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003906:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003908:	4293      	cmp	r3, r2
 800390a:	d111      	bne.n	8003930 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003916:	085b      	lsrs	r3, r3, #1
 8003918:	3b01      	subs	r3, #1
 800391a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800391c:	429a      	cmp	r2, r3
 800391e:	d107      	bne.n	8003930 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800392c:	429a      	cmp	r2, r3
 800392e:	d001      	beq.n	8003934 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e000      	b.n	8003936 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3718      	adds	r7, #24
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	40023800 	.word	0x40023800

08003944 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d101      	bne.n	8003958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e0cc      	b.n	8003af2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003958:	4b68      	ldr	r3, [pc, #416]	; (8003afc <HAL_RCC_ClockConfig+0x1b8>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0307 	and.w	r3, r3, #7
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	429a      	cmp	r2, r3
 8003964:	d90c      	bls.n	8003980 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003966:	4b65      	ldr	r3, [pc, #404]	; (8003afc <HAL_RCC_ClockConfig+0x1b8>)
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	b2d2      	uxtb	r2, r2
 800396c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800396e:	4b63      	ldr	r3, [pc, #396]	; (8003afc <HAL_RCC_ClockConfig+0x1b8>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0307 	and.w	r3, r3, #7
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	429a      	cmp	r2, r3
 800397a:	d001      	beq.n	8003980 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e0b8      	b.n	8003af2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d020      	beq.n	80039ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0304 	and.w	r3, r3, #4
 8003994:	2b00      	cmp	r3, #0
 8003996:	d005      	beq.n	80039a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003998:	4b59      	ldr	r3, [pc, #356]	; (8003b00 <HAL_RCC_ClockConfig+0x1bc>)
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	4a58      	ldr	r2, [pc, #352]	; (8003b00 <HAL_RCC_ClockConfig+0x1bc>)
 800399e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0308 	and.w	r3, r3, #8
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d005      	beq.n	80039bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039b0:	4b53      	ldr	r3, [pc, #332]	; (8003b00 <HAL_RCC_ClockConfig+0x1bc>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	4a52      	ldr	r2, [pc, #328]	; (8003b00 <HAL_RCC_ClockConfig+0x1bc>)
 80039b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039bc:	4b50      	ldr	r3, [pc, #320]	; (8003b00 <HAL_RCC_ClockConfig+0x1bc>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	494d      	ldr	r1, [pc, #308]	; (8003b00 <HAL_RCC_ClockConfig+0x1bc>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d044      	beq.n	8003a64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d107      	bne.n	80039f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039e2:	4b47      	ldr	r3, [pc, #284]	; (8003b00 <HAL_RCC_ClockConfig+0x1bc>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d119      	bne.n	8003a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e07f      	b.n	8003af2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d003      	beq.n	8003a02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039fe:	2b03      	cmp	r3, #3
 8003a00:	d107      	bne.n	8003a12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a02:	4b3f      	ldr	r3, [pc, #252]	; (8003b00 <HAL_RCC_ClockConfig+0x1bc>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d109      	bne.n	8003a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e06f      	b.n	8003af2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a12:	4b3b      	ldr	r3, [pc, #236]	; (8003b00 <HAL_RCC_ClockConfig+0x1bc>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e067      	b.n	8003af2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a22:	4b37      	ldr	r3, [pc, #220]	; (8003b00 <HAL_RCC_ClockConfig+0x1bc>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f023 0203 	bic.w	r2, r3, #3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	4934      	ldr	r1, [pc, #208]	; (8003b00 <HAL_RCC_ClockConfig+0x1bc>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a34:	f7fd f9cc 	bl	8000dd0 <HAL_GetTick>
 8003a38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a3a:	e00a      	b.n	8003a52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a3c:	f7fd f9c8 	bl	8000dd0 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e04f      	b.n	8003af2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a52:	4b2b      	ldr	r3, [pc, #172]	; (8003b00 <HAL_RCC_ClockConfig+0x1bc>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f003 020c 	and.w	r2, r3, #12
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d1eb      	bne.n	8003a3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a64:	4b25      	ldr	r3, [pc, #148]	; (8003afc <HAL_RCC_ClockConfig+0x1b8>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0307 	and.w	r3, r3, #7
 8003a6c:	683a      	ldr	r2, [r7, #0]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d20c      	bcs.n	8003a8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a72:	4b22      	ldr	r3, [pc, #136]	; (8003afc <HAL_RCC_ClockConfig+0x1b8>)
 8003a74:	683a      	ldr	r2, [r7, #0]
 8003a76:	b2d2      	uxtb	r2, r2
 8003a78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a7a:	4b20      	ldr	r3, [pc, #128]	; (8003afc <HAL_RCC_ClockConfig+0x1b8>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0307 	and.w	r3, r3, #7
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d001      	beq.n	8003a8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e032      	b.n	8003af2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0304 	and.w	r3, r3, #4
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d008      	beq.n	8003aaa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a98:	4b19      	ldr	r3, [pc, #100]	; (8003b00 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	4916      	ldr	r1, [pc, #88]	; (8003b00 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0308 	and.w	r3, r3, #8
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d009      	beq.n	8003aca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ab6:	4b12      	ldr	r3, [pc, #72]	; (8003b00 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	490e      	ldr	r1, [pc, #56]	; (8003b00 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003aca:	f000 f821 	bl	8003b10 <HAL_RCC_GetSysClockFreq>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	4b0b      	ldr	r3, [pc, #44]	; (8003b00 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	091b      	lsrs	r3, r3, #4
 8003ad6:	f003 030f 	and.w	r3, r3, #15
 8003ada:	490a      	ldr	r1, [pc, #40]	; (8003b04 <HAL_RCC_ClockConfig+0x1c0>)
 8003adc:	5ccb      	ldrb	r3, [r1, r3]
 8003ade:	fa22 f303 	lsr.w	r3, r2, r3
 8003ae2:	4a09      	ldr	r2, [pc, #36]	; (8003b08 <HAL_RCC_ClockConfig+0x1c4>)
 8003ae4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ae6:	4b09      	ldr	r3, [pc, #36]	; (8003b0c <HAL_RCC_ClockConfig+0x1c8>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7fd f940 	bl	8000d70 <HAL_InitTick>

  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	40023c00 	.word	0x40023c00
 8003b00:	40023800 	.word	0x40023800
 8003b04:	0800a614 	.word	0x0800a614
 8003b08:	20000000 	.word	0x20000000
 8003b0c:	20000004 	.word	0x20000004

08003b10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b14:	b094      	sub	sp, #80	; 0x50
 8003b16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	647b      	str	r3, [r7, #68]	; 0x44
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b20:	2300      	movs	r3, #0
 8003b22:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003b24:	2300      	movs	r3, #0
 8003b26:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b28:	4b79      	ldr	r3, [pc, #484]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f003 030c 	and.w	r3, r3, #12
 8003b30:	2b08      	cmp	r3, #8
 8003b32:	d00d      	beq.n	8003b50 <HAL_RCC_GetSysClockFreq+0x40>
 8003b34:	2b08      	cmp	r3, #8
 8003b36:	f200 80e1 	bhi.w	8003cfc <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d002      	beq.n	8003b44 <HAL_RCC_GetSysClockFreq+0x34>
 8003b3e:	2b04      	cmp	r3, #4
 8003b40:	d003      	beq.n	8003b4a <HAL_RCC_GetSysClockFreq+0x3a>
 8003b42:	e0db      	b.n	8003cfc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b44:	4b73      	ldr	r3, [pc, #460]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b46:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003b48:	e0db      	b.n	8003d02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b4a:	4b73      	ldr	r3, [pc, #460]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x208>)
 8003b4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b4e:	e0d8      	b.n	8003d02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b50:	4b6f      	ldr	r3, [pc, #444]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b58:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b5a:	4b6d      	ldr	r3, [pc, #436]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d063      	beq.n	8003c2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b66:	4b6a      	ldr	r3, [pc, #424]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	099b      	lsrs	r3, r3, #6
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b70:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b78:	633b      	str	r3, [r7, #48]	; 0x30
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	637b      	str	r3, [r7, #52]	; 0x34
 8003b7e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003b82:	4622      	mov	r2, r4
 8003b84:	462b      	mov	r3, r5
 8003b86:	f04f 0000 	mov.w	r0, #0
 8003b8a:	f04f 0100 	mov.w	r1, #0
 8003b8e:	0159      	lsls	r1, r3, #5
 8003b90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b94:	0150      	lsls	r0, r2, #5
 8003b96:	4602      	mov	r2, r0
 8003b98:	460b      	mov	r3, r1
 8003b9a:	4621      	mov	r1, r4
 8003b9c:	1a51      	subs	r1, r2, r1
 8003b9e:	6139      	str	r1, [r7, #16]
 8003ba0:	4629      	mov	r1, r5
 8003ba2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ba6:	617b      	str	r3, [r7, #20]
 8003ba8:	f04f 0200 	mov.w	r2, #0
 8003bac:	f04f 0300 	mov.w	r3, #0
 8003bb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003bb4:	4659      	mov	r1, fp
 8003bb6:	018b      	lsls	r3, r1, #6
 8003bb8:	4651      	mov	r1, sl
 8003bba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bbe:	4651      	mov	r1, sl
 8003bc0:	018a      	lsls	r2, r1, #6
 8003bc2:	4651      	mov	r1, sl
 8003bc4:	ebb2 0801 	subs.w	r8, r2, r1
 8003bc8:	4659      	mov	r1, fp
 8003bca:	eb63 0901 	sbc.w	r9, r3, r1
 8003bce:	f04f 0200 	mov.w	r2, #0
 8003bd2:	f04f 0300 	mov.w	r3, #0
 8003bd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003be2:	4690      	mov	r8, r2
 8003be4:	4699      	mov	r9, r3
 8003be6:	4623      	mov	r3, r4
 8003be8:	eb18 0303 	adds.w	r3, r8, r3
 8003bec:	60bb      	str	r3, [r7, #8]
 8003bee:	462b      	mov	r3, r5
 8003bf0:	eb49 0303 	adc.w	r3, r9, r3
 8003bf4:	60fb      	str	r3, [r7, #12]
 8003bf6:	f04f 0200 	mov.w	r2, #0
 8003bfa:	f04f 0300 	mov.w	r3, #0
 8003bfe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c02:	4629      	mov	r1, r5
 8003c04:	024b      	lsls	r3, r1, #9
 8003c06:	4621      	mov	r1, r4
 8003c08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c0c:	4621      	mov	r1, r4
 8003c0e:	024a      	lsls	r2, r1, #9
 8003c10:	4610      	mov	r0, r2
 8003c12:	4619      	mov	r1, r3
 8003c14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c16:	2200      	movs	r2, #0
 8003c18:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c20:	f7fc fade 	bl	80001e0 <__aeabi_uldivmod>
 8003c24:	4602      	mov	r2, r0
 8003c26:	460b      	mov	r3, r1
 8003c28:	4613      	mov	r3, r2
 8003c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c2c:	e058      	b.n	8003ce0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c2e:	4b38      	ldr	r3, [pc, #224]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	099b      	lsrs	r3, r3, #6
 8003c34:	2200      	movs	r2, #0
 8003c36:	4618      	mov	r0, r3
 8003c38:	4611      	mov	r1, r2
 8003c3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c3e:	623b      	str	r3, [r7, #32]
 8003c40:	2300      	movs	r3, #0
 8003c42:	627b      	str	r3, [r7, #36]	; 0x24
 8003c44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c48:	4642      	mov	r2, r8
 8003c4a:	464b      	mov	r3, r9
 8003c4c:	f04f 0000 	mov.w	r0, #0
 8003c50:	f04f 0100 	mov.w	r1, #0
 8003c54:	0159      	lsls	r1, r3, #5
 8003c56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c5a:	0150      	lsls	r0, r2, #5
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	460b      	mov	r3, r1
 8003c60:	4641      	mov	r1, r8
 8003c62:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c66:	4649      	mov	r1, r9
 8003c68:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c6c:	f04f 0200 	mov.w	r2, #0
 8003c70:	f04f 0300 	mov.w	r3, #0
 8003c74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c80:	ebb2 040a 	subs.w	r4, r2, sl
 8003c84:	eb63 050b 	sbc.w	r5, r3, fp
 8003c88:	f04f 0200 	mov.w	r2, #0
 8003c8c:	f04f 0300 	mov.w	r3, #0
 8003c90:	00eb      	lsls	r3, r5, #3
 8003c92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c96:	00e2      	lsls	r2, r4, #3
 8003c98:	4614      	mov	r4, r2
 8003c9a:	461d      	mov	r5, r3
 8003c9c:	4643      	mov	r3, r8
 8003c9e:	18e3      	adds	r3, r4, r3
 8003ca0:	603b      	str	r3, [r7, #0]
 8003ca2:	464b      	mov	r3, r9
 8003ca4:	eb45 0303 	adc.w	r3, r5, r3
 8003ca8:	607b      	str	r3, [r7, #4]
 8003caa:	f04f 0200 	mov.w	r2, #0
 8003cae:	f04f 0300 	mov.w	r3, #0
 8003cb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cb6:	4629      	mov	r1, r5
 8003cb8:	028b      	lsls	r3, r1, #10
 8003cba:	4621      	mov	r1, r4
 8003cbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003cc0:	4621      	mov	r1, r4
 8003cc2:	028a      	lsls	r2, r1, #10
 8003cc4:	4610      	mov	r0, r2
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cca:	2200      	movs	r2, #0
 8003ccc:	61bb      	str	r3, [r7, #24]
 8003cce:	61fa      	str	r2, [r7, #28]
 8003cd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cd4:	f7fc fa84 	bl	80001e0 <__aeabi_uldivmod>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	460b      	mov	r3, r1
 8003cdc:	4613      	mov	r3, r2
 8003cde:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ce0:	4b0b      	ldr	r3, [pc, #44]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	0c1b      	lsrs	r3, r3, #16
 8003ce6:	f003 0303 	and.w	r3, r3, #3
 8003cea:	3301      	adds	r3, #1
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003cf0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003cf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cfa:	e002      	b.n	8003d02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cfc:	4b05      	ldr	r3, [pc, #20]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x204>)
 8003cfe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3750      	adds	r7, #80	; 0x50
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d0e:	bf00      	nop
 8003d10:	40023800 	.word	0x40023800
 8003d14:	00f42400 	.word	0x00f42400
 8003d18:	007a1200 	.word	0x007a1200

08003d1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d20:	4b03      	ldr	r3, [pc, #12]	; (8003d30 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d22:	681b      	ldr	r3, [r3, #0]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	20000000 	.word	0x20000000

08003d34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d38:	f7ff fff0 	bl	8003d1c <HAL_RCC_GetHCLKFreq>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	0a9b      	lsrs	r3, r3, #10
 8003d44:	f003 0307 	and.w	r3, r3, #7
 8003d48:	4903      	ldr	r1, [pc, #12]	; (8003d58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d4a:	5ccb      	ldrb	r3, [r1, r3]
 8003d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	40023800 	.word	0x40023800
 8003d58:	0800a624 	.word	0x0800a624

08003d5c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d64:	2300      	movs	r3, #0
 8003d66:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0301 	and.w	r3, r3, #1
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d105      	bne.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d038      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d84:	4b68      	ldr	r3, [pc, #416]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d8a:	f7fd f821 	bl	8000dd0 <HAL_GetTick>
 8003d8e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d90:	e008      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d92:	f7fd f81d 	bl	8000dd0 <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d901      	bls.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e0bd      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003da4:	4b61      	ldr	r3, [pc, #388]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1f0      	bne.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685a      	ldr	r2, [r3, #4]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	019b      	lsls	r3, r3, #6
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	071b      	lsls	r3, r3, #28
 8003dc2:	495a      	ldr	r1, [pc, #360]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003dca:	4b57      	ldr	r3, [pc, #348]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003dcc:	2201      	movs	r2, #1
 8003dce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003dd0:	f7fc fffe 	bl	8000dd0 <HAL_GetTick>
 8003dd4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003dd6:	e008      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003dd8:	f7fc fffa 	bl	8000dd0 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d901      	bls.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e09a      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003dea:	4b50      	ldr	r3, [pc, #320]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d0f0      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f000 8083 	beq.w	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e04:	2300      	movs	r3, #0
 8003e06:	60fb      	str	r3, [r7, #12]
 8003e08:	4b48      	ldr	r3, [pc, #288]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0c:	4a47      	ldr	r2, [pc, #284]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e12:	6413      	str	r3, [r2, #64]	; 0x40
 8003e14:	4b45      	ldr	r3, [pc, #276]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e1c:	60fb      	str	r3, [r7, #12]
 8003e1e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003e20:	4b43      	ldr	r3, [pc, #268]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a42      	ldr	r2, [pc, #264]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e2a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e2c:	f7fc ffd0 	bl	8000dd0 <HAL_GetTick>
 8003e30:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003e32:	e008      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003e34:	f7fc ffcc 	bl	8000dd0 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e06c      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003e46:	4b3a      	ldr	r3, [pc, #232]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d0f0      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e52:	4b36      	ldr	r3, [pc, #216]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e5a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d02f      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d028      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e70:	4b2e      	ldr	r3, [pc, #184]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e78:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e7a:	4b2e      	ldr	r3, [pc, #184]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e80:	4b2c      	ldr	r3, [pc, #176]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003e86:	4a29      	ldr	r2, [pc, #164]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e8c:	4b27      	ldr	r3, [pc, #156]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e90:	f003 0301 	and.w	r3, r3, #1
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d114      	bne.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003e98:	f7fc ff9a 	bl	8000dd0 <HAL_GetTick>
 8003e9c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e9e:	e00a      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ea0:	f7fc ff96 	bl	8000dd0 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e034      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eb6:	4b1d      	ldr	r3, [pc, #116]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d0ee      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ece:	d10d      	bne.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003ed0:	4b16      	ldr	r3, [pc, #88]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003ee0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ee4:	4911      	ldr	r1, [pc, #68]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	608b      	str	r3, [r1, #8]
 8003eea:	e005      	b.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003eec:	4b0f      	ldr	r3, [pc, #60]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	4a0e      	ldr	r2, [pc, #56]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ef2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003ef6:	6093      	str	r3, [r2, #8]
 8003ef8:	4b0c      	ldr	r3, [pc, #48]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003efa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f04:	4909      	ldr	r1, [pc, #36]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0308 	and.w	r3, r3, #8
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d003      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	7d1a      	ldrb	r2, [r3, #20]
 8003f1a:	4b07      	ldr	r3, [pc, #28]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003f1c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3718      	adds	r7, #24
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	42470068 	.word	0x42470068
 8003f2c:	40023800 	.word	0x40023800
 8003f30:	40007000 	.word	0x40007000
 8003f34:	42470e40 	.word	0x42470e40
 8003f38:	424711e0 	.word	0x424711e0

08003f3c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b087      	sub	sp, #28
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003f44:	2300      	movs	r3, #0
 8003f46:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003f50:	2300      	movs	r3, #0
 8003f52:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d140      	bne.n	8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003f5a:	4b24      	ldr	r3, [pc, #144]	; (8003fec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f62:	60fb      	str	r3, [r7, #12]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d005      	beq.n	8003f76 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d131      	bne.n	8003fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003f70:	4b1f      	ldr	r3, [pc, #124]	; (8003ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003f72:	617b      	str	r3, [r7, #20]
          break;
 8003f74:	e031      	b.n	8003fda <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003f76:	4b1d      	ldr	r3, [pc, #116]	; (8003fec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f82:	d109      	bne.n	8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003f84:	4b19      	ldr	r3, [pc, #100]	; (8003fec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003f86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f8e:	4a19      	ldr	r2, [pc, #100]	; (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f94:	613b      	str	r3, [r7, #16]
 8003f96:	e008      	b.n	8003faa <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003f98:	4b14      	ldr	r3, [pc, #80]	; (8003fec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003f9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fa2:	4a15      	ldr	r2, [pc, #84]	; (8003ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8003fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa8:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003faa:	4b10      	ldr	r3, [pc, #64]	; (8003fec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003fac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fb0:	099b      	lsrs	r3, r3, #6
 8003fb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	fb02 f303 	mul.w	r3, r2, r3
 8003fbc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003fbe:	4b0b      	ldr	r3, [pc, #44]	; (8003fec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003fc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fc4:	0f1b      	lsrs	r3, r3, #28
 8003fc6:	f003 0307 	and.w	r3, r3, #7
 8003fca:	68ba      	ldr	r2, [r7, #8]
 8003fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd0:	617b      	str	r3, [r7, #20]
          break;
 8003fd2:	e002      	b.n	8003fda <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	617b      	str	r3, [r7, #20]
          break;
 8003fd8:	bf00      	nop
        }
      }
      break;
 8003fda:	bf00      	nop
    }
  }
  return frequency;
 8003fdc:	697b      	ldr	r3, [r7, #20]
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	371c      	adds	r7, #28
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	40023800 	.word	0x40023800
 8003ff0:	00bb8000 	.word	0x00bb8000
 8003ff4:	007a1200 	.word	0x007a1200
 8003ff8:	00f42400 	.word	0x00f42400

08003ffc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e07b      	b.n	8004106 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004012:	2b00      	cmp	r3, #0
 8004014:	d108      	bne.n	8004028 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800401e:	d009      	beq.n	8004034 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	61da      	str	r2, [r3, #28]
 8004026:	e005      	b.n	8004034 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d106      	bne.n	8004054 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7fc fdc8 	bl	8000be4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2202      	movs	r2, #2
 8004058:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800406a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800407c:	431a      	orrs	r2, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004086:	431a      	orrs	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	431a      	orrs	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040a4:	431a      	orrs	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	69db      	ldr	r3, [r3, #28]
 80040aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040ae:	431a      	orrs	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a1b      	ldr	r3, [r3, #32]
 80040b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b8:	ea42 0103 	orr.w	r1, r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	430a      	orrs	r2, r1
 80040ca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	0c1b      	lsrs	r3, r3, #16
 80040d2:	f003 0104 	and.w	r1, r3, #4
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	f003 0210 	and.w	r2, r3, #16
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	430a      	orrs	r2, r1
 80040e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	69da      	ldr	r2, [r3, #28]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800410e:	b084      	sub	sp, #16
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	f107 001c 	add.w	r0, r7, #28
 800411c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004122:	2b01      	cmp	r3, #1
 8004124:	d122      	bne.n	800416c <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800413a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800414e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004150:	2b01      	cmp	r3, #1
 8004152:	d105      	bne.n	8004160 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f001 fbed 	bl	8005940 <USB_CoreReset>
 8004166:	4603      	mov	r3, r0
 8004168:	73fb      	strb	r3, [r7, #15]
 800416a:	e01a      	b.n	80041a2 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f001 fbe1 	bl	8005940 <USB_CoreReset>
 800417e:	4603      	mov	r3, r0
 8004180:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004182:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004184:	2b00      	cmp	r3, #0
 8004186:	d106      	bne.n	8004196 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	639a      	str	r2, [r3, #56]	; 0x38
 8004194:	e005      	b.n	80041a2 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80041a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d10b      	bne.n	80041c0 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f043 0206 	orr.w	r2, r3, #6
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f043 0220 	orr.w	r2, r3, #32
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80041c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80041cc:	b004      	add	sp, #16
 80041ce:	4770      	bx	lr

080041d0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b087      	sub	sp, #28
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	4613      	mov	r3, r2
 80041dc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80041de:	79fb      	ldrb	r3, [r7, #7]
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d165      	bne.n	80042b0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	4a41      	ldr	r2, [pc, #260]	; (80042ec <USB_SetTurnaroundTime+0x11c>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d906      	bls.n	80041fa <USB_SetTurnaroundTime+0x2a>
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	4a40      	ldr	r2, [pc, #256]	; (80042f0 <USB_SetTurnaroundTime+0x120>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d202      	bcs.n	80041fa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80041f4:	230f      	movs	r3, #15
 80041f6:	617b      	str	r3, [r7, #20]
 80041f8:	e062      	b.n	80042c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	4a3c      	ldr	r2, [pc, #240]	; (80042f0 <USB_SetTurnaroundTime+0x120>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d306      	bcc.n	8004210 <USB_SetTurnaroundTime+0x40>
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	4a3b      	ldr	r2, [pc, #236]	; (80042f4 <USB_SetTurnaroundTime+0x124>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d202      	bcs.n	8004210 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800420a:	230e      	movs	r3, #14
 800420c:	617b      	str	r3, [r7, #20]
 800420e:	e057      	b.n	80042c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	4a38      	ldr	r2, [pc, #224]	; (80042f4 <USB_SetTurnaroundTime+0x124>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d306      	bcc.n	8004226 <USB_SetTurnaroundTime+0x56>
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	4a37      	ldr	r2, [pc, #220]	; (80042f8 <USB_SetTurnaroundTime+0x128>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d202      	bcs.n	8004226 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004220:	230d      	movs	r3, #13
 8004222:	617b      	str	r3, [r7, #20]
 8004224:	e04c      	b.n	80042c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	4a33      	ldr	r2, [pc, #204]	; (80042f8 <USB_SetTurnaroundTime+0x128>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d306      	bcc.n	800423c <USB_SetTurnaroundTime+0x6c>
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	4a32      	ldr	r2, [pc, #200]	; (80042fc <USB_SetTurnaroundTime+0x12c>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d802      	bhi.n	800423c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004236:	230c      	movs	r3, #12
 8004238:	617b      	str	r3, [r7, #20]
 800423a:	e041      	b.n	80042c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	4a2f      	ldr	r2, [pc, #188]	; (80042fc <USB_SetTurnaroundTime+0x12c>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d906      	bls.n	8004252 <USB_SetTurnaroundTime+0x82>
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	4a2e      	ldr	r2, [pc, #184]	; (8004300 <USB_SetTurnaroundTime+0x130>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d802      	bhi.n	8004252 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800424c:	230b      	movs	r3, #11
 800424e:	617b      	str	r3, [r7, #20]
 8004250:	e036      	b.n	80042c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	4a2a      	ldr	r2, [pc, #168]	; (8004300 <USB_SetTurnaroundTime+0x130>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d906      	bls.n	8004268 <USB_SetTurnaroundTime+0x98>
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	4a29      	ldr	r2, [pc, #164]	; (8004304 <USB_SetTurnaroundTime+0x134>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d802      	bhi.n	8004268 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004262:	230a      	movs	r3, #10
 8004264:	617b      	str	r3, [r7, #20]
 8004266:	e02b      	b.n	80042c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	4a26      	ldr	r2, [pc, #152]	; (8004304 <USB_SetTurnaroundTime+0x134>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d906      	bls.n	800427e <USB_SetTurnaroundTime+0xae>
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	4a25      	ldr	r2, [pc, #148]	; (8004308 <USB_SetTurnaroundTime+0x138>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d202      	bcs.n	800427e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004278:	2309      	movs	r3, #9
 800427a:	617b      	str	r3, [r7, #20]
 800427c:	e020      	b.n	80042c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	4a21      	ldr	r2, [pc, #132]	; (8004308 <USB_SetTurnaroundTime+0x138>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d306      	bcc.n	8004294 <USB_SetTurnaroundTime+0xc4>
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	4a20      	ldr	r2, [pc, #128]	; (800430c <USB_SetTurnaroundTime+0x13c>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d802      	bhi.n	8004294 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800428e:	2308      	movs	r3, #8
 8004290:	617b      	str	r3, [r7, #20]
 8004292:	e015      	b.n	80042c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	4a1d      	ldr	r2, [pc, #116]	; (800430c <USB_SetTurnaroundTime+0x13c>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d906      	bls.n	80042aa <USB_SetTurnaroundTime+0xda>
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	4a1c      	ldr	r2, [pc, #112]	; (8004310 <USB_SetTurnaroundTime+0x140>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d202      	bcs.n	80042aa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80042a4:	2307      	movs	r3, #7
 80042a6:	617b      	str	r3, [r7, #20]
 80042a8:	e00a      	b.n	80042c0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80042aa:	2306      	movs	r3, #6
 80042ac:	617b      	str	r3, [r7, #20]
 80042ae:	e007      	b.n	80042c0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80042b0:	79fb      	ldrb	r3, [r7, #7]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d102      	bne.n	80042bc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80042b6:	2309      	movs	r3, #9
 80042b8:	617b      	str	r3, [r7, #20]
 80042ba:	e001      	b.n	80042c0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80042bc:	2309      	movs	r3, #9
 80042be:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	68da      	ldr	r2, [r3, #12]
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	029b      	lsls	r3, r3, #10
 80042d4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80042d8:	431a      	orrs	r2, r3
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	371c      	adds	r7, #28
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	00d8acbf 	.word	0x00d8acbf
 80042f0:	00e4e1c0 	.word	0x00e4e1c0
 80042f4:	00f42400 	.word	0x00f42400
 80042f8:	01067380 	.word	0x01067380
 80042fc:	011a499f 	.word	0x011a499f
 8004300:	01312cff 	.word	0x01312cff
 8004304:	014ca43f 	.word	0x014ca43f
 8004308:	016e3600 	.word	0x016e3600
 800430c:	01a6ab1f 	.word	0x01a6ab1f
 8004310:	01e84800 	.word	0x01e84800

08004314 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f043 0201 	orr.w	r2, r3, #1
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004336:	b480      	push	{r7}
 8004338:	b083      	sub	sp, #12
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f023 0201 	bic.w	r2, r3, #1
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	460b      	mov	r3, r1
 8004362:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004364:	2300      	movs	r3, #0
 8004366:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004374:	78fb      	ldrb	r3, [r7, #3]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d115      	bne.n	80043a6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004386:	2001      	movs	r0, #1
 8004388:	f7fc fd2e 	bl	8000de8 <HAL_Delay>
      ms++;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	3301      	adds	r3, #1
 8004390:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f001 fa45 	bl	8005822 <USB_GetMode>
 8004398:	4603      	mov	r3, r0
 800439a:	2b01      	cmp	r3, #1
 800439c:	d01e      	beq.n	80043dc <USB_SetCurrentMode+0x84>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2b31      	cmp	r3, #49	; 0x31
 80043a2:	d9f0      	bls.n	8004386 <USB_SetCurrentMode+0x2e>
 80043a4:	e01a      	b.n	80043dc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80043a6:	78fb      	ldrb	r3, [r7, #3]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d115      	bne.n	80043d8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80043b8:	2001      	movs	r0, #1
 80043ba:	f7fc fd15 	bl	8000de8 <HAL_Delay>
      ms++;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	3301      	adds	r3, #1
 80043c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f001 fa2c 	bl	8005822 <USB_GetMode>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d005      	beq.n	80043dc <USB_SetCurrentMode+0x84>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2b31      	cmp	r3, #49	; 0x31
 80043d4:	d9f0      	bls.n	80043b8 <USB_SetCurrentMode+0x60>
 80043d6:	e001      	b.n	80043dc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e005      	b.n	80043e8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2b32      	cmp	r3, #50	; 0x32
 80043e0:	d101      	bne.n	80043e6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e000      	b.n	80043e8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043f0:	b084      	sub	sp, #16
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b086      	sub	sp, #24
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
 80043fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80043fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004402:	2300      	movs	r3, #0
 8004404:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800440a:	2300      	movs	r3, #0
 800440c:	613b      	str	r3, [r7, #16]
 800440e:	e009      	b.n	8004424 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	3340      	adds	r3, #64	; 0x40
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	4413      	add	r3, r2
 800441a:	2200      	movs	r2, #0
 800441c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	3301      	adds	r3, #1
 8004422:	613b      	str	r3, [r7, #16]
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	2b0e      	cmp	r3, #14
 8004428:	d9f2      	bls.n	8004410 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800442a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800442c:	2b00      	cmp	r3, #0
 800442e:	d11c      	bne.n	800446a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800443e:	f043 0302 	orr.w	r3, r3, #2
 8004442:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004448:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004454:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004460:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	639a      	str	r2, [r3, #56]	; 0x38
 8004468:	e00b      	b.n	8004482 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004488:	461a      	mov	r2, r3
 800448a:	2300      	movs	r3, #0
 800448c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004494:	4619      	mov	r1, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800449c:	461a      	mov	r2, r3
 800449e:	680b      	ldr	r3, [r1, #0]
 80044a0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d10c      	bne.n	80044c2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80044a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d104      	bne.n	80044b8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80044ae:	2100      	movs	r1, #0
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 f965 	bl	8004780 <USB_SetDevSpeed>
 80044b6:	e008      	b.n	80044ca <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80044b8:	2101      	movs	r1, #1
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f960 	bl	8004780 <USB_SetDevSpeed>
 80044c0:	e003      	b.n	80044ca <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80044c2:	2103      	movs	r1, #3
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 f95b 	bl	8004780 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80044ca:	2110      	movs	r1, #16
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 f8f3 	bl	80046b8 <USB_FlushTxFifo>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d001      	beq.n	80044dc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 f91f 	bl	8004720 <USB_FlushRxFifo>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d001      	beq.n	80044ec <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044f2:	461a      	mov	r2, r3
 80044f4:	2300      	movs	r3, #0
 80044f6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044fe:	461a      	mov	r2, r3
 8004500:	2300      	movs	r3, #0
 8004502:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800450a:	461a      	mov	r2, r3
 800450c:	2300      	movs	r3, #0
 800450e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004510:	2300      	movs	r3, #0
 8004512:	613b      	str	r3, [r7, #16]
 8004514:	e043      	b.n	800459e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	015a      	lsls	r2, r3, #5
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	4413      	add	r3, r2
 800451e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004528:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800452c:	d118      	bne.n	8004560 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10a      	bne.n	800454a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	015a      	lsls	r2, r3, #5
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	4413      	add	r3, r2
 800453c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004540:	461a      	mov	r2, r3
 8004542:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004546:	6013      	str	r3, [r2, #0]
 8004548:	e013      	b.n	8004572 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	015a      	lsls	r2, r3, #5
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	4413      	add	r3, r2
 8004552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004556:	461a      	mov	r2, r3
 8004558:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800455c:	6013      	str	r3, [r2, #0]
 800455e:	e008      	b.n	8004572 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	015a      	lsls	r2, r3, #5
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	4413      	add	r3, r2
 8004568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800456c:	461a      	mov	r2, r3
 800456e:	2300      	movs	r3, #0
 8004570:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	015a      	lsls	r2, r3, #5
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	4413      	add	r3, r2
 800457a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800457e:	461a      	mov	r2, r3
 8004580:	2300      	movs	r3, #0
 8004582:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	015a      	lsls	r2, r3, #5
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	4413      	add	r3, r2
 800458c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004590:	461a      	mov	r2, r3
 8004592:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004596:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	3301      	adds	r3, #1
 800459c:	613b      	str	r3, [r7, #16]
 800459e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d3b7      	bcc.n	8004516 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045a6:	2300      	movs	r3, #0
 80045a8:	613b      	str	r3, [r7, #16]
 80045aa:	e043      	b.n	8004634 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	015a      	lsls	r2, r3, #5
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	4413      	add	r3, r2
 80045b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045c2:	d118      	bne.n	80045f6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10a      	bne.n	80045e0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	015a      	lsls	r2, r3, #5
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	4413      	add	r3, r2
 80045d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045d6:	461a      	mov	r2, r3
 80045d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80045dc:	6013      	str	r3, [r2, #0]
 80045de:	e013      	b.n	8004608 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	015a      	lsls	r2, r3, #5
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	4413      	add	r3, r2
 80045e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ec:	461a      	mov	r2, r3
 80045ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80045f2:	6013      	str	r3, [r2, #0]
 80045f4:	e008      	b.n	8004608 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	015a      	lsls	r2, r3, #5
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	4413      	add	r3, r2
 80045fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004602:	461a      	mov	r2, r3
 8004604:	2300      	movs	r3, #0
 8004606:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	015a      	lsls	r2, r3, #5
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	4413      	add	r3, r2
 8004610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004614:	461a      	mov	r2, r3
 8004616:	2300      	movs	r3, #0
 8004618:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	015a      	lsls	r2, r3, #5
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	4413      	add	r3, r2
 8004622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004626:	461a      	mov	r2, r3
 8004628:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800462c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	3301      	adds	r3, #1
 8004632:	613b      	str	r3, [r7, #16]
 8004634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	429a      	cmp	r2, r3
 800463a:	d3b7      	bcc.n	80045ac <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800464a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800464e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800465c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800465e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004660:	2b00      	cmp	r3, #0
 8004662:	d105      	bne.n	8004670 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	f043 0210 	orr.w	r2, r3, #16
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	699a      	ldr	r2, [r3, #24]
 8004674:	4b0f      	ldr	r3, [pc, #60]	; (80046b4 <USB_DevInit+0x2c4>)
 8004676:	4313      	orrs	r3, r2
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800467c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800467e:	2b00      	cmp	r3, #0
 8004680:	d005      	beq.n	800468e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	f043 0208 	orr.w	r2, r3, #8
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800468e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004690:	2b01      	cmp	r3, #1
 8004692:	d107      	bne.n	80046a4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800469c:	f043 0304 	orr.w	r3, r3, #4
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80046a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3718      	adds	r7, #24
 80046aa:	46bd      	mov	sp, r7
 80046ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046b0:	b004      	add	sp, #16
 80046b2:	4770      	bx	lr
 80046b4:	803c3800 	.word	0x803c3800

080046b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80046c2:	2300      	movs	r3, #0
 80046c4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	3301      	adds	r3, #1
 80046ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4a13      	ldr	r2, [pc, #76]	; (800471c <USB_FlushTxFifo+0x64>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d901      	bls.n	80046d8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e01b      	b.n	8004710 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	daf2      	bge.n	80046c6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80046e0:	2300      	movs	r3, #0
 80046e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	019b      	lsls	r3, r3, #6
 80046e8:	f043 0220 	orr.w	r2, r3, #32
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	3301      	adds	r3, #1
 80046f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	4a08      	ldr	r2, [pc, #32]	; (800471c <USB_FlushTxFifo+0x64>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d901      	bls.n	8004702 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e006      	b.n	8004710 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	f003 0320 	and.w	r3, r3, #32
 800470a:	2b20      	cmp	r3, #32
 800470c:	d0f0      	beq.n	80046f0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3714      	adds	r7, #20
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr
 800471c:	00030d40 	.word	0x00030d40

08004720 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004728:	2300      	movs	r3, #0
 800472a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	3301      	adds	r3, #1
 8004730:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	4a11      	ldr	r2, [pc, #68]	; (800477c <USB_FlushRxFifo+0x5c>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d901      	bls.n	800473e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e018      	b.n	8004770 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	2b00      	cmp	r3, #0
 8004744:	daf2      	bge.n	800472c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004746:	2300      	movs	r3, #0
 8004748:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2210      	movs	r2, #16
 800474e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	3301      	adds	r3, #1
 8004754:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	4a08      	ldr	r2, [pc, #32]	; (800477c <USB_FlushRxFifo+0x5c>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d901      	bls.n	8004762 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e006      	b.n	8004770 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	f003 0310 	and.w	r3, r3, #16
 800476a:	2b10      	cmp	r3, #16
 800476c:	d0f0      	beq.n	8004750 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	3714      	adds	r7, #20
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr
 800477c:	00030d40 	.word	0x00030d40

08004780 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	460b      	mov	r3, r1
 800478a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	78fb      	ldrb	r3, [r7, #3]
 800479a:	68f9      	ldr	r1, [r7, #12]
 800479c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047a0:	4313      	orrs	r3, r2
 80047a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3714      	adds	r7, #20
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr

080047b2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80047b2:	b480      	push	{r7}
 80047b4:	b087      	sub	sp, #28
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f003 0306 	and.w	r3, r3, #6
 80047ca:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d102      	bne.n	80047d8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80047d2:	2300      	movs	r3, #0
 80047d4:	75fb      	strb	r3, [r7, #23]
 80047d6:	e00a      	b.n	80047ee <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d002      	beq.n	80047e4 <USB_GetDevSpeed+0x32>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2b06      	cmp	r3, #6
 80047e2:	d102      	bne.n	80047ea <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80047e4:	2302      	movs	r3, #2
 80047e6:	75fb      	strb	r3, [r7, #23]
 80047e8:	e001      	b.n	80047ee <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80047ea:	230f      	movs	r3, #15
 80047ec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80047ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	371c      	adds	r7, #28
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	785b      	ldrb	r3, [r3, #1]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d13a      	bne.n	800488e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800481e:	69da      	ldr	r2, [r3, #28]
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	f003 030f 	and.w	r3, r3, #15
 8004828:	2101      	movs	r1, #1
 800482a:	fa01 f303 	lsl.w	r3, r1, r3
 800482e:	b29b      	uxth	r3, r3
 8004830:	68f9      	ldr	r1, [r7, #12]
 8004832:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004836:	4313      	orrs	r3, r2
 8004838:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	015a      	lsls	r2, r3, #5
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	4413      	add	r3, r2
 8004842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d155      	bne.n	80048fc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	015a      	lsls	r2, r3, #5
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	4413      	add	r3, r2
 8004858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	791b      	ldrb	r3, [r3, #4]
 800486a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800486c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	059b      	lsls	r3, r3, #22
 8004872:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004874:	4313      	orrs	r3, r2
 8004876:	68ba      	ldr	r2, [r7, #8]
 8004878:	0151      	lsls	r1, r2, #5
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	440a      	add	r2, r1
 800487e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004882:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800488a:	6013      	str	r3, [r2, #0]
 800488c:	e036      	b.n	80048fc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004894:	69da      	ldr	r2, [r3, #28]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	f003 030f 	and.w	r3, r3, #15
 800489e:	2101      	movs	r1, #1
 80048a0:	fa01 f303 	lsl.w	r3, r1, r3
 80048a4:	041b      	lsls	r3, r3, #16
 80048a6:	68f9      	ldr	r1, [r7, #12]
 80048a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048ac:	4313      	orrs	r3, r2
 80048ae:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	015a      	lsls	r2, r3, #5
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	4413      	add	r3, r2
 80048b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d11a      	bne.n	80048fc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	015a      	lsls	r2, r3, #5
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	4413      	add	r3, r2
 80048ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	791b      	ldrb	r3, [r3, #4]
 80048e0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80048e2:	430b      	orrs	r3, r1
 80048e4:	4313      	orrs	r3, r2
 80048e6:	68ba      	ldr	r2, [r7, #8]
 80048e8:	0151      	lsls	r1, r2, #5
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	440a      	add	r2, r1
 80048ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048fa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
	...

0800490c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	785b      	ldrb	r3, [r3, #1]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d161      	bne.n	80049ec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	015a      	lsls	r2, r3, #5
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4413      	add	r3, r2
 8004930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800493a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800493e:	d11f      	bne.n	8004980 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	015a      	lsls	r2, r3, #5
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	4413      	add	r3, r2
 8004948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	0151      	lsls	r1, r2, #5
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	440a      	add	r2, r1
 8004956:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800495a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800495e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	015a      	lsls	r2, r3, #5
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	4413      	add	r3, r2
 8004968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	0151      	lsls	r1, r2, #5
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	440a      	add	r2, r1
 8004976:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800497a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800497e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004986:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	f003 030f 	and.w	r3, r3, #15
 8004990:	2101      	movs	r1, #1
 8004992:	fa01 f303 	lsl.w	r3, r1, r3
 8004996:	b29b      	uxth	r3, r3
 8004998:	43db      	mvns	r3, r3
 800499a:	68f9      	ldr	r1, [r7, #12]
 800499c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049a0:	4013      	ands	r3, r2
 80049a2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049aa:	69da      	ldr	r2, [r3, #28]
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	f003 030f 	and.w	r3, r3, #15
 80049b4:	2101      	movs	r1, #1
 80049b6:	fa01 f303 	lsl.w	r3, r1, r3
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	43db      	mvns	r3, r3
 80049be:	68f9      	ldr	r1, [r7, #12]
 80049c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049c4:	4013      	ands	r3, r2
 80049c6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	015a      	lsls	r2, r3, #5
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	4413      	add	r3, r2
 80049d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	0159      	lsls	r1, r3, #5
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	440b      	add	r3, r1
 80049de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e2:	4619      	mov	r1, r3
 80049e4:	4b35      	ldr	r3, [pc, #212]	; (8004abc <USB_DeactivateEndpoint+0x1b0>)
 80049e6:	4013      	ands	r3, r2
 80049e8:	600b      	str	r3, [r1, #0]
 80049ea:	e060      	b.n	8004aae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	015a      	lsls	r2, r3, #5
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4413      	add	r3, r2
 80049f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a02:	d11f      	bne.n	8004a44 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	015a      	lsls	r2, r3, #5
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68ba      	ldr	r2, [r7, #8]
 8004a14:	0151      	lsls	r1, r2, #5
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	440a      	add	r2, r1
 8004a1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a22:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	015a      	lsls	r2, r3, #5
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68ba      	ldr	r2, [r7, #8]
 8004a34:	0151      	lsls	r1, r2, #5
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	440a      	add	r2, r1
 8004a3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a42:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	f003 030f 	and.w	r3, r3, #15
 8004a54:	2101      	movs	r1, #1
 8004a56:	fa01 f303 	lsl.w	r3, r1, r3
 8004a5a:	041b      	lsls	r3, r3, #16
 8004a5c:	43db      	mvns	r3, r3
 8004a5e:	68f9      	ldr	r1, [r7, #12]
 8004a60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a64:	4013      	ands	r3, r2
 8004a66:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a6e:	69da      	ldr	r2, [r3, #28]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	f003 030f 	and.w	r3, r3, #15
 8004a78:	2101      	movs	r1, #1
 8004a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a7e:	041b      	lsls	r3, r3, #16
 8004a80:	43db      	mvns	r3, r3
 8004a82:	68f9      	ldr	r1, [r7, #12]
 8004a84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a88:	4013      	ands	r3, r2
 8004a8a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	015a      	lsls	r2, r3, #5
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4413      	add	r3, r2
 8004a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	0159      	lsls	r1, r3, #5
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	440b      	add	r3, r1
 8004aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	4b05      	ldr	r3, [pc, #20]	; (8004ac0 <USB_DeactivateEndpoint+0x1b4>)
 8004aaa:	4013      	ands	r3, r2
 8004aac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3714      	adds	r7, #20
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr
 8004abc:	ec337800 	.word	0xec337800
 8004ac0:	eff37800 	.word	0xeff37800

08004ac4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b08a      	sub	sp, #40	; 0x28
 8004ac8:	af02      	add	r7, sp, #8
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	4613      	mov	r3, r2
 8004ad0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	785b      	ldrb	r3, [r3, #1]
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	f040 815c 	bne.w	8004d9e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d132      	bne.n	8004b54 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	015a      	lsls	r2, r3, #5
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	4413      	add	r3, r2
 8004af6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	0151      	lsls	r1, r2, #5
 8004b00:	69fa      	ldr	r2, [r7, #28]
 8004b02:	440a      	add	r2, r1
 8004b04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b08:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b0c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	015a      	lsls	r2, r3, #5
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	4413      	add	r3, r2
 8004b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	69ba      	ldr	r2, [r7, #24]
 8004b22:	0151      	lsls	r1, r2, #5
 8004b24:	69fa      	ldr	r2, [r7, #28]
 8004b26:	440a      	add	r2, r1
 8004b28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	015a      	lsls	r2, r3, #5
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	4413      	add	r3, r2
 8004b3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	69ba      	ldr	r2, [r7, #24]
 8004b42:	0151      	lsls	r1, r2, #5
 8004b44:	69fa      	ldr	r2, [r7, #28]
 8004b46:	440a      	add	r2, r1
 8004b48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b4c:	0cdb      	lsrs	r3, r3, #19
 8004b4e:	04db      	lsls	r3, r3, #19
 8004b50:	6113      	str	r3, [r2, #16]
 8004b52:	e074      	b.n	8004c3e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	015a      	lsls	r2, r3, #5
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	69ba      	ldr	r2, [r7, #24]
 8004b64:	0151      	lsls	r1, r2, #5
 8004b66:	69fa      	ldr	r2, [r7, #28]
 8004b68:	440a      	add	r2, r1
 8004b6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b6e:	0cdb      	lsrs	r3, r3, #19
 8004b70:	04db      	lsls	r3, r3, #19
 8004b72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	015a      	lsls	r2, r3, #5
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	69ba      	ldr	r2, [r7, #24]
 8004b84:	0151      	lsls	r1, r2, #5
 8004b86:	69fa      	ldr	r2, [r7, #28]
 8004b88:	440a      	add	r2, r1
 8004b8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b8e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b92:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	015a      	lsls	r2, r3, #5
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	6999      	ldr	r1, [r3, #24]
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	440b      	add	r3, r1
 8004bb0:	1e59      	subs	r1, r3, #1
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bba:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004bbc:	4b9d      	ldr	r3, [pc, #628]	; (8004e34 <USB_EPStartXfer+0x370>)
 8004bbe:	400b      	ands	r3, r1
 8004bc0:	69b9      	ldr	r1, [r7, #24]
 8004bc2:	0148      	lsls	r0, r1, #5
 8004bc4:	69f9      	ldr	r1, [r7, #28]
 8004bc6:	4401      	add	r1, r0
 8004bc8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	015a      	lsls	r2, r3, #5
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bdc:	691a      	ldr	r2, [r3, #16]
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004be6:	69b9      	ldr	r1, [r7, #24]
 8004be8:	0148      	lsls	r0, r1, #5
 8004bea:	69f9      	ldr	r1, [r7, #28]
 8004bec:	4401      	add	r1, r0
 8004bee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	791b      	ldrb	r3, [r3, #4]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d11f      	bne.n	8004c3e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	015a      	lsls	r2, r3, #5
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	4413      	add	r3, r2
 8004c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	0151      	lsls	r1, r2, #5
 8004c10:	69fa      	ldr	r2, [r7, #28]
 8004c12:	440a      	add	r2, r1
 8004c14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c18:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004c1c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	015a      	lsls	r2, r3, #5
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	4413      	add	r3, r2
 8004c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	69ba      	ldr	r2, [r7, #24]
 8004c2e:	0151      	lsls	r1, r2, #5
 8004c30:	69fa      	ldr	r2, [r7, #28]
 8004c32:	440a      	add	r2, r1
 8004c34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c3c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004c3e:	79fb      	ldrb	r3, [r7, #7]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d14b      	bne.n	8004cdc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d009      	beq.n	8004c60 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	015a      	lsls	r2, r3, #5
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	4413      	add	r3, r2
 8004c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c58:	461a      	mov	r2, r3
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	791b      	ldrb	r3, [r3, #4]
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d128      	bne.n	8004cba <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d110      	bne.n	8004c9a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	015a      	lsls	r2, r3, #5
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	4413      	add	r3, r2
 8004c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	69ba      	ldr	r2, [r7, #24]
 8004c88:	0151      	lsls	r1, r2, #5
 8004c8a:	69fa      	ldr	r2, [r7, #28]
 8004c8c:	440a      	add	r2, r1
 8004c8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c96:	6013      	str	r3, [r2, #0]
 8004c98:	e00f      	b.n	8004cba <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	015a      	lsls	r2, r3, #5
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	69ba      	ldr	r2, [r7, #24]
 8004caa:	0151      	lsls	r1, r2, #5
 8004cac:	69fa      	ldr	r2, [r7, #28]
 8004cae:	440a      	add	r2, r1
 8004cb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cb8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	015a      	lsls	r2, r3, #5
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	69ba      	ldr	r2, [r7, #24]
 8004cca:	0151      	lsls	r1, r2, #5
 8004ccc:	69fa      	ldr	r2, [r7, #28]
 8004cce:	440a      	add	r2, r1
 8004cd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cd4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004cd8:	6013      	str	r3, [r2, #0]
 8004cda:	e133      	b.n	8004f44 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	015a      	lsls	r2, r3, #5
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	69ba      	ldr	r2, [r7, #24]
 8004cec:	0151      	lsls	r1, r2, #5
 8004cee:	69fa      	ldr	r2, [r7, #28]
 8004cf0:	440a      	add	r2, r1
 8004cf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cf6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004cfa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	791b      	ldrb	r3, [r3, #4]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d015      	beq.n	8004d30 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f000 811b 	beq.w	8004f44 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	f003 030f 	and.w	r3, r3, #15
 8004d1e:	2101      	movs	r1, #1
 8004d20:	fa01 f303 	lsl.w	r3, r1, r3
 8004d24:	69f9      	ldr	r1, [r7, #28]
 8004d26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	634b      	str	r3, [r1, #52]	; 0x34
 8004d2e:	e109      	b.n	8004f44 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d110      	bne.n	8004d62 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	015a      	lsls	r2, r3, #5
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	4413      	add	r3, r2
 8004d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	69ba      	ldr	r2, [r7, #24]
 8004d50:	0151      	lsls	r1, r2, #5
 8004d52:	69fa      	ldr	r2, [r7, #28]
 8004d54:	440a      	add	r2, r1
 8004d56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d5e:	6013      	str	r3, [r2, #0]
 8004d60:	e00f      	b.n	8004d82 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	015a      	lsls	r2, r3, #5
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	4413      	add	r3, r2
 8004d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	69ba      	ldr	r2, [r7, #24]
 8004d72:	0151      	lsls	r1, r2, #5
 8004d74:	69fa      	ldr	r2, [r7, #28]
 8004d76:	440a      	add	r2, r1
 8004d78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d80:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	6919      	ldr	r1, [r3, #16]
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	781a      	ldrb	r2, [r3, #0]
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	b298      	uxth	r0, r3
 8004d90:	79fb      	ldrb	r3, [r7, #7]
 8004d92:	9300      	str	r3, [sp, #0]
 8004d94:	4603      	mov	r3, r0
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f000 fade 	bl	8005358 <USB_WritePacket>
 8004d9c:	e0d2      	b.n	8004f44 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	015a      	lsls	r2, r3, #5
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	4413      	add	r3, r2
 8004da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	69ba      	ldr	r2, [r7, #24]
 8004dae:	0151      	lsls	r1, r2, #5
 8004db0:	69fa      	ldr	r2, [r7, #28]
 8004db2:	440a      	add	r2, r1
 8004db4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004db8:	0cdb      	lsrs	r3, r3, #19
 8004dba:	04db      	lsls	r3, r3, #19
 8004dbc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	015a      	lsls	r2, r3, #5
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	69ba      	ldr	r2, [r7, #24]
 8004dce:	0151      	lsls	r1, r2, #5
 8004dd0:	69fa      	ldr	r2, [r7, #28]
 8004dd2:	440a      	add	r2, r1
 8004dd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dd8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ddc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004de0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d126      	bne.n	8004e38 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	015a      	lsls	r2, r3, #5
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	4413      	add	r3, r2
 8004df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df6:	691a      	ldr	r2, [r3, #16]
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e00:	69b9      	ldr	r1, [r7, #24]
 8004e02:	0148      	lsls	r0, r1, #5
 8004e04:	69f9      	ldr	r1, [r7, #28]
 8004e06:	4401      	add	r1, r0
 8004e08:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	015a      	lsls	r2, r3, #5
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	4413      	add	r3, r2
 8004e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	69ba      	ldr	r2, [r7, #24]
 8004e20:	0151      	lsls	r1, r2, #5
 8004e22:	69fa      	ldr	r2, [r7, #28]
 8004e24:	440a      	add	r2, r1
 8004e26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e2e:	6113      	str	r3, [r2, #16]
 8004e30:	e03a      	b.n	8004ea8 <USB_EPStartXfer+0x3e4>
 8004e32:	bf00      	nop
 8004e34:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	699a      	ldr	r2, [r3, #24]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	4413      	add	r3, r2
 8004e42:	1e5a      	subs	r2, r3, #1
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e4c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	8afa      	ldrh	r2, [r7, #22]
 8004e54:	fb03 f202 	mul.w	r2, r3, r2
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	015a      	lsls	r2, r3, #5
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	4413      	add	r3, r2
 8004e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e68:	691a      	ldr	r2, [r3, #16]
 8004e6a:	8afb      	ldrh	r3, [r7, #22]
 8004e6c:	04d9      	lsls	r1, r3, #19
 8004e6e:	4b38      	ldr	r3, [pc, #224]	; (8004f50 <USB_EPStartXfer+0x48c>)
 8004e70:	400b      	ands	r3, r1
 8004e72:	69b9      	ldr	r1, [r7, #24]
 8004e74:	0148      	lsls	r0, r1, #5
 8004e76:	69f9      	ldr	r1, [r7, #28]
 8004e78:	4401      	add	r1, r0
 8004e7a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	015a      	lsls	r2, r3, #5
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	4413      	add	r3, r2
 8004e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e8e:	691a      	ldr	r2, [r3, #16]
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	69db      	ldr	r3, [r3, #28]
 8004e94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e98:	69b9      	ldr	r1, [r7, #24]
 8004e9a:	0148      	lsls	r0, r1, #5
 8004e9c:	69f9      	ldr	r1, [r7, #28]
 8004e9e:	4401      	add	r1, r0
 8004ea0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004ea8:	79fb      	ldrb	r3, [r7, #7]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d10d      	bne.n	8004eca <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d009      	beq.n	8004eca <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	6919      	ldr	r1, [r3, #16]
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	015a      	lsls	r2, r3, #5
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec6:	460a      	mov	r2, r1
 8004ec8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	791b      	ldrb	r3, [r3, #4]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d128      	bne.n	8004f24 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d110      	bne.n	8004f04 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	015a      	lsls	r2, r3, #5
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	4413      	add	r3, r2
 8004eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	69ba      	ldr	r2, [r7, #24]
 8004ef2:	0151      	lsls	r1, r2, #5
 8004ef4:	69fa      	ldr	r2, [r7, #28]
 8004ef6:	440a      	add	r2, r1
 8004ef8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004efc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f00:	6013      	str	r3, [r2, #0]
 8004f02:	e00f      	b.n	8004f24 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	015a      	lsls	r2, r3, #5
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	69ba      	ldr	r2, [r7, #24]
 8004f14:	0151      	lsls	r1, r2, #5
 8004f16:	69fa      	ldr	r2, [r7, #28]
 8004f18:	440a      	add	r2, r1
 8004f1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f22:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	015a      	lsls	r2, r3, #5
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	69ba      	ldr	r2, [r7, #24]
 8004f34:	0151      	lsls	r1, r2, #5
 8004f36:	69fa      	ldr	r2, [r7, #28]
 8004f38:	440a      	add	r2, r1
 8004f3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f3e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f42:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3720      	adds	r7, #32
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	1ff80000 	.word	0x1ff80000

08004f54 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b087      	sub	sp, #28
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	785b      	ldrb	r3, [r3, #1]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	f040 80ce 	bne.w	8005112 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d132      	bne.n	8004fe4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	015a      	lsls	r2, r3, #5
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	4413      	add	r3, r2
 8004f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	0151      	lsls	r1, r2, #5
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	440a      	add	r2, r1
 8004f94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f98:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f9c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004fa0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	015a      	lsls	r2, r3, #5
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	4413      	add	r3, r2
 8004faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	0151      	lsls	r1, r2, #5
 8004fb4:	697a      	ldr	r2, [r7, #20]
 8004fb6:	440a      	add	r2, r1
 8004fb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004fc0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	015a      	lsls	r2, r3, #5
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	4413      	add	r3, r2
 8004fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	693a      	ldr	r2, [r7, #16]
 8004fd2:	0151      	lsls	r1, r2, #5
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	440a      	add	r2, r1
 8004fd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fdc:	0cdb      	lsrs	r3, r3, #19
 8004fde:	04db      	lsls	r3, r3, #19
 8004fe0:	6113      	str	r3, [r2, #16]
 8004fe2:	e04e      	b.n	8005082 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	015a      	lsls	r2, r3, #5
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	4413      	add	r3, r2
 8004fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	693a      	ldr	r2, [r7, #16]
 8004ff4:	0151      	lsls	r1, r2, #5
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	440a      	add	r2, r1
 8004ffa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ffe:	0cdb      	lsrs	r3, r3, #19
 8005000:	04db      	lsls	r3, r3, #19
 8005002:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	015a      	lsls	r2, r3, #5
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	4413      	add	r3, r2
 800500c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	0151      	lsls	r1, r2, #5
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	440a      	add	r2, r1
 800501a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800501e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005022:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005026:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	699a      	ldr	r2, [r3, #24]
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	429a      	cmp	r2, r3
 8005032:	d903      	bls.n	800503c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	68da      	ldr	r2, [r3, #12]
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	015a      	lsls	r2, r3, #5
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	4413      	add	r3, r2
 8005044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	693a      	ldr	r2, [r7, #16]
 800504c:	0151      	lsls	r1, r2, #5
 800504e:	697a      	ldr	r2, [r7, #20]
 8005050:	440a      	add	r2, r1
 8005052:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005056:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800505a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	015a      	lsls	r2, r3, #5
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	4413      	add	r3, r2
 8005064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005068:	691a      	ldr	r2, [r3, #16]
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005072:	6939      	ldr	r1, [r7, #16]
 8005074:	0148      	lsls	r0, r1, #5
 8005076:	6979      	ldr	r1, [r7, #20]
 8005078:	4401      	add	r1, r0
 800507a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800507e:	4313      	orrs	r3, r2
 8005080:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005082:	79fb      	ldrb	r3, [r7, #7]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d11e      	bne.n	80050c6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	695b      	ldr	r3, [r3, #20]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d009      	beq.n	80050a4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	015a      	lsls	r2, r3, #5
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	4413      	add	r3, r2
 8005098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800509c:	461a      	mov	r2, r3
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	015a      	lsls	r2, r3, #5
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	4413      	add	r3, r2
 80050ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	693a      	ldr	r2, [r7, #16]
 80050b4:	0151      	lsls	r1, r2, #5
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	440a      	add	r2, r1
 80050ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050c2:	6013      	str	r3, [r2, #0]
 80050c4:	e097      	b.n	80051f6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	015a      	lsls	r2, r3, #5
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	4413      	add	r3, r2
 80050ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	693a      	ldr	r2, [r7, #16]
 80050d6:	0151      	lsls	r1, r2, #5
 80050d8:	697a      	ldr	r2, [r7, #20]
 80050da:	440a      	add	r2, r1
 80050dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050e0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050e4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	f000 8083 	beq.w	80051f6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	f003 030f 	and.w	r3, r3, #15
 8005100:	2101      	movs	r1, #1
 8005102:	fa01 f303 	lsl.w	r3, r1, r3
 8005106:	6979      	ldr	r1, [r7, #20]
 8005108:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800510c:	4313      	orrs	r3, r2
 800510e:	634b      	str	r3, [r1, #52]	; 0x34
 8005110:	e071      	b.n	80051f6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	015a      	lsls	r2, r3, #5
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	4413      	add	r3, r2
 800511a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	0151      	lsls	r1, r2, #5
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	440a      	add	r2, r1
 8005128:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800512c:	0cdb      	lsrs	r3, r3, #19
 800512e:	04db      	lsls	r3, r3, #19
 8005130:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	015a      	lsls	r2, r3, #5
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	4413      	add	r3, r2
 800513a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	0151      	lsls	r1, r2, #5
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	440a      	add	r2, r1
 8005148:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800514c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005150:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005154:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d003      	beq.n	8005166 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	68da      	ldr	r2, [r3, #12]
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	68da      	ldr	r2, [r3, #12]
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	015a      	lsls	r2, r3, #5
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	4413      	add	r3, r2
 8005176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	0151      	lsls	r1, r2, #5
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	440a      	add	r2, r1
 8005184:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005188:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800518c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	015a      	lsls	r2, r3, #5
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	4413      	add	r3, r2
 8005196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800519a:	691a      	ldr	r2, [r3, #16]
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	69db      	ldr	r3, [r3, #28]
 80051a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051a4:	6939      	ldr	r1, [r7, #16]
 80051a6:	0148      	lsls	r0, r1, #5
 80051a8:	6979      	ldr	r1, [r7, #20]
 80051aa:	4401      	add	r1, r0
 80051ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80051b0:	4313      	orrs	r3, r2
 80051b2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80051b4:	79fb      	ldrb	r3, [r7, #7]
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d10d      	bne.n	80051d6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d009      	beq.n	80051d6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	6919      	ldr	r1, [r3, #16]
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	015a      	lsls	r2, r3, #5
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	4413      	add	r3, r2
 80051ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051d2:	460a      	mov	r2, r1
 80051d4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	015a      	lsls	r2, r3, #5
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	4413      	add	r3, r2
 80051de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	0151      	lsls	r1, r2, #5
 80051e8:	697a      	ldr	r2, [r7, #20]
 80051ea:	440a      	add	r2, r1
 80051ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80051f4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	371c      	adds	r7, #28
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005204:	b480      	push	{r7}
 8005206:	b087      	sub	sp, #28
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800520e:	2300      	movs	r3, #0
 8005210:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005212:	2300      	movs	r3, #0
 8005214:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	785b      	ldrb	r3, [r3, #1]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d14a      	bne.n	80052b8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	015a      	lsls	r2, r3, #5
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	4413      	add	r3, r2
 800522c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005236:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800523a:	f040 8086 	bne.w	800534a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	015a      	lsls	r2, r3, #5
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	4413      	add	r3, r2
 8005248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	683a      	ldr	r2, [r7, #0]
 8005250:	7812      	ldrb	r2, [r2, #0]
 8005252:	0151      	lsls	r1, r2, #5
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	440a      	add	r2, r1
 8005258:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800525c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005260:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	015a      	lsls	r2, r3, #5
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	4413      	add	r3, r2
 800526c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	683a      	ldr	r2, [r7, #0]
 8005274:	7812      	ldrb	r2, [r2, #0]
 8005276:	0151      	lsls	r1, r2, #5
 8005278:	693a      	ldr	r2, [r7, #16]
 800527a:	440a      	add	r2, r1
 800527c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005280:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005284:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	3301      	adds	r3, #1
 800528a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005292:	4293      	cmp	r3, r2
 8005294:	d902      	bls.n	800529c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	75fb      	strb	r3, [r7, #23]
          break;
 800529a:	e056      	b.n	800534a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	015a      	lsls	r2, r3, #5
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	4413      	add	r3, r2
 80052a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052b4:	d0e7      	beq.n	8005286 <USB_EPStopXfer+0x82>
 80052b6:	e048      	b.n	800534a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	015a      	lsls	r2, r3, #5
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	4413      	add	r3, r2
 80052c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052d0:	d13b      	bne.n	800534a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	683a      	ldr	r2, [r7, #0]
 80052e4:	7812      	ldrb	r2, [r2, #0]
 80052e6:	0151      	lsls	r1, r2, #5
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	440a      	add	r2, r1
 80052ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80052f4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	015a      	lsls	r2, r3, #5
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	4413      	add	r3, r2
 8005300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	683a      	ldr	r2, [r7, #0]
 8005308:	7812      	ldrb	r2, [r2, #0]
 800530a:	0151      	lsls	r1, r2, #5
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	440a      	add	r2, r1
 8005310:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005314:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005318:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	3301      	adds	r3, #1
 800531e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f242 7210 	movw	r2, #10000	; 0x2710
 8005326:	4293      	cmp	r3, r2
 8005328:	d902      	bls.n	8005330 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	75fb      	strb	r3, [r7, #23]
          break;
 800532e:	e00c      	b.n	800534a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	015a      	lsls	r2, r3, #5
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	4413      	add	r3, r2
 800533a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005344:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005348:	d0e7      	beq.n	800531a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800534a:	7dfb      	ldrb	r3, [r7, #23]
}
 800534c:	4618      	mov	r0, r3
 800534e:	371c      	adds	r7, #28
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005358:	b480      	push	{r7}
 800535a:	b089      	sub	sp, #36	; 0x24
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	4611      	mov	r1, r2
 8005364:	461a      	mov	r2, r3
 8005366:	460b      	mov	r3, r1
 8005368:	71fb      	strb	r3, [r7, #7]
 800536a:	4613      	mov	r3, r2
 800536c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005376:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800537a:	2b00      	cmp	r3, #0
 800537c:	d123      	bne.n	80053c6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800537e:	88bb      	ldrh	r3, [r7, #4]
 8005380:	3303      	adds	r3, #3
 8005382:	089b      	lsrs	r3, r3, #2
 8005384:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005386:	2300      	movs	r3, #0
 8005388:	61bb      	str	r3, [r7, #24]
 800538a:	e018      	b.n	80053be <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800538c:	79fb      	ldrb	r3, [r7, #7]
 800538e:	031a      	lsls	r2, r3, #12
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	4413      	add	r3, r2
 8005394:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005398:	461a      	mov	r2, r3
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	6013      	str	r3, [r2, #0]
      pSrc++;
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	3301      	adds	r3, #1
 80053a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	3301      	adds	r3, #1
 80053aa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	3301      	adds	r3, #1
 80053b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	3301      	adds	r3, #1
 80053b6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	3301      	adds	r3, #1
 80053bc:	61bb      	str	r3, [r7, #24]
 80053be:	69ba      	ldr	r2, [r7, #24]
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d3e2      	bcc.n	800538c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3724      	adds	r7, #36	; 0x24
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b08b      	sub	sp, #44	; 0x2c
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	4613      	mov	r3, r2
 80053e0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80053ea:	88fb      	ldrh	r3, [r7, #6]
 80053ec:	089b      	lsrs	r3, r3, #2
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80053f2:	88fb      	ldrh	r3, [r7, #6]
 80053f4:	f003 0303 	and.w	r3, r3, #3
 80053f8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80053fa:	2300      	movs	r3, #0
 80053fc:	623b      	str	r3, [r7, #32]
 80053fe:	e014      	b.n	800542a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540a:	601a      	str	r2, [r3, #0]
    pDest++;
 800540c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540e:	3301      	adds	r3, #1
 8005410:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005414:	3301      	adds	r3, #1
 8005416:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541a:	3301      	adds	r3, #1
 800541c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800541e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005420:	3301      	adds	r3, #1
 8005422:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005424:	6a3b      	ldr	r3, [r7, #32]
 8005426:	3301      	adds	r3, #1
 8005428:	623b      	str	r3, [r7, #32]
 800542a:	6a3a      	ldr	r2, [r7, #32]
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	429a      	cmp	r2, r3
 8005430:	d3e6      	bcc.n	8005400 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005432:	8bfb      	ldrh	r3, [r7, #30]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d01e      	beq.n	8005476 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005438:	2300      	movs	r3, #0
 800543a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005442:	461a      	mov	r2, r3
 8005444:	f107 0310 	add.w	r3, r7, #16
 8005448:	6812      	ldr	r2, [r2, #0]
 800544a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	6a3b      	ldr	r3, [r7, #32]
 8005450:	b2db      	uxtb	r3, r3
 8005452:	00db      	lsls	r3, r3, #3
 8005454:	fa22 f303 	lsr.w	r3, r2, r3
 8005458:	b2da      	uxtb	r2, r3
 800545a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545c:	701a      	strb	r2, [r3, #0]
      i++;
 800545e:	6a3b      	ldr	r3, [r7, #32]
 8005460:	3301      	adds	r3, #1
 8005462:	623b      	str	r3, [r7, #32]
      pDest++;
 8005464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005466:	3301      	adds	r3, #1
 8005468:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800546a:	8bfb      	ldrh	r3, [r7, #30]
 800546c:	3b01      	subs	r3, #1
 800546e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005470:	8bfb      	ldrh	r3, [r7, #30]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1ea      	bne.n	800544c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005478:	4618      	mov	r0, r3
 800547a:	372c      	adds	r7, #44	; 0x2c
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	785b      	ldrb	r3, [r3, #1]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d12c      	bne.n	80054fa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	015a      	lsls	r2, r3, #5
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	4413      	add	r3, r2
 80054a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	db12      	blt.n	80054d8 <USB_EPSetStall+0x54>
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00f      	beq.n	80054d8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	015a      	lsls	r2, r3, #5
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	4413      	add	r3, r2
 80054c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68ba      	ldr	r2, [r7, #8]
 80054c8:	0151      	lsls	r1, r2, #5
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	440a      	add	r2, r1
 80054ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80054d6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	015a      	lsls	r2, r3, #5
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	4413      	add	r3, r2
 80054e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68ba      	ldr	r2, [r7, #8]
 80054e8:	0151      	lsls	r1, r2, #5
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	440a      	add	r2, r1
 80054ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80054f6:	6013      	str	r3, [r2, #0]
 80054f8:	e02b      	b.n	8005552 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	015a      	lsls	r2, r3, #5
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	4413      	add	r3, r2
 8005502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	db12      	blt.n	8005532 <USB_EPSetStall+0xae>
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00f      	beq.n	8005532 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	015a      	lsls	r2, r3, #5
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	4413      	add	r3, r2
 800551a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68ba      	ldr	r2, [r7, #8]
 8005522:	0151      	lsls	r1, r2, #5
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	440a      	add	r2, r1
 8005528:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800552c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005530:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	015a      	lsls	r2, r3, #5
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	4413      	add	r3, r2
 800553a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68ba      	ldr	r2, [r7, #8]
 8005542:	0151      	lsls	r1, r2, #5
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	440a      	add	r2, r1
 8005548:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800554c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005550:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	3714      	adds	r7, #20
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005560:	b480      	push	{r7}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	785b      	ldrb	r3, [r3, #1]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d128      	bne.n	80055ce <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	015a      	lsls	r2, r3, #5
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	4413      	add	r3, r2
 8005584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68ba      	ldr	r2, [r7, #8]
 800558c:	0151      	lsls	r1, r2, #5
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	440a      	add	r2, r1
 8005592:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005596:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800559a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	791b      	ldrb	r3, [r3, #4]
 80055a0:	2b03      	cmp	r3, #3
 80055a2:	d003      	beq.n	80055ac <USB_EPClearStall+0x4c>
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	791b      	ldrb	r3, [r3, #4]
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d138      	bne.n	800561e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	015a      	lsls	r2, r3, #5
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	4413      	add	r3, r2
 80055b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	0151      	lsls	r1, r2, #5
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	440a      	add	r2, r1
 80055c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055ca:	6013      	str	r3, [r2, #0]
 80055cc:	e027      	b.n	800561e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	015a      	lsls	r2, r3, #5
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	4413      	add	r3, r2
 80055d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68ba      	ldr	r2, [r7, #8]
 80055de:	0151      	lsls	r1, r2, #5
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	440a      	add	r2, r1
 80055e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055ec:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	791b      	ldrb	r3, [r3, #4]
 80055f2:	2b03      	cmp	r3, #3
 80055f4:	d003      	beq.n	80055fe <USB_EPClearStall+0x9e>
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	791b      	ldrb	r3, [r3, #4]
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d10f      	bne.n	800561e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	015a      	lsls	r2, r3, #5
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	4413      	add	r3, r2
 8005606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68ba      	ldr	r2, [r7, #8]
 800560e:	0151      	lsls	r1, r2, #5
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	440a      	add	r2, r1
 8005614:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800561c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3714      	adds	r7, #20
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	460b      	mov	r3, r1
 8005636:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800564a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800564e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	78fb      	ldrb	r3, [r7, #3]
 800565a:	011b      	lsls	r3, r3, #4
 800565c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005660:	68f9      	ldr	r1, [r7, #12]
 8005662:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005666:	4313      	orrs	r3, r2
 8005668:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800566a:	2300      	movs	r3, #0
}
 800566c:	4618      	mov	r0, r3
 800566e:	3714      	adds	r7, #20
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005678:	b480      	push	{r7}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005692:	f023 0303 	bic.w	r3, r3, #3
 8005696:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056a6:	f023 0302 	bic.w	r3, r3, #2
 80056aa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3714      	adds	r7, #20
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr

080056ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80056ba:	b480      	push	{r7}
 80056bc:	b085      	sub	sp, #20
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80056d4:	f023 0303 	bic.w	r3, r3, #3
 80056d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056e8:	f043 0302 	orr.w	r3, r3, #2
 80056ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3714      	adds	r7, #20
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	695b      	ldr	r3, [r3, #20]
 8005708:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	699b      	ldr	r3, [r3, #24]
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	4013      	ands	r3, r2
 8005712:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005714:	68fb      	ldr	r3, [r7, #12]
}
 8005716:	4618      	mov	r0, r3
 8005718:	3714      	adds	r7, #20
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr

08005722 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005722:	b480      	push	{r7}
 8005724:	b085      	sub	sp, #20
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800573e:	69db      	ldr	r3, [r3, #28]
 8005740:	68ba      	ldr	r2, [r7, #8]
 8005742:	4013      	ands	r3, r2
 8005744:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	0c1b      	lsrs	r3, r3, #16
}
 800574a:	4618      	mov	r0, r3
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr

08005756 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005756:	b480      	push	{r7}
 8005758:	b085      	sub	sp, #20
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005772:	69db      	ldr	r3, [r3, #28]
 8005774:	68ba      	ldr	r2, [r7, #8]
 8005776:	4013      	ands	r3, r2
 8005778:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	b29b      	uxth	r3, r3
}
 800577e:	4618      	mov	r0, r3
 8005780:	3714      	adds	r7, #20
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr

0800578a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800578a:	b480      	push	{r7}
 800578c:	b085      	sub	sp, #20
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
 8005792:	460b      	mov	r3, r1
 8005794:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800579a:	78fb      	ldrb	r3, [r7, #3]
 800579c:	015a      	lsls	r2, r3, #5
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	4413      	add	r3, r2
 80057a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	68ba      	ldr	r2, [r7, #8]
 80057b4:	4013      	ands	r3, r2
 80057b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80057b8:	68bb      	ldr	r3, [r7, #8]
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3714      	adds	r7, #20
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr

080057c6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80057c6:	b480      	push	{r7}
 80057c8:	b087      	sub	sp, #28
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
 80057ce:	460b      	mov	r3, r1
 80057d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057e8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80057ea:	78fb      	ldrb	r3, [r7, #3]
 80057ec:	f003 030f 	and.w	r3, r3, #15
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	fa22 f303 	lsr.w	r3, r2, r3
 80057f6:	01db      	lsls	r3, r3, #7
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005800:	78fb      	ldrb	r3, [r7, #3]
 8005802:	015a      	lsls	r2, r3, #5
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	4413      	add	r3, r2
 8005808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	4013      	ands	r3, r2
 8005812:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005814:	68bb      	ldr	r3, [r7, #8]
}
 8005816:	4618      	mov	r0, r3
 8005818:	371c      	adds	r7, #28
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr

08005822 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005822:	b480      	push	{r7}
 8005824:	b083      	sub	sp, #12
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	f003 0301 	and.w	r3, r3, #1
}
 8005832:	4618      	mov	r0, r3
 8005834:	370c      	adds	r7, #12
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr

0800583e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800583e:	b480      	push	{r7}
 8005840:	b085      	sub	sp, #20
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005858:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800585c:	f023 0307 	bic.w	r3, r3, #7
 8005860:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005874:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	3714      	adds	r7, #20
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005884:	b480      	push	{r7}
 8005886:	b087      	sub	sp, #28
 8005888:	af00      	add	r7, sp, #0
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	460b      	mov	r3, r1
 800588e:	607a      	str	r2, [r7, #4]
 8005890:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	333c      	adds	r3, #60	; 0x3c
 800589a:	3304      	adds	r3, #4
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	4a26      	ldr	r2, [pc, #152]	; (800593c <USB_EP0_OutStart+0xb8>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d90a      	bls.n	80058be <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058b8:	d101      	bne.n	80058be <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80058ba:	2300      	movs	r3, #0
 80058bc:	e037      	b.n	800592e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c4:	461a      	mov	r2, r3
 80058c6:	2300      	movs	r3, #0
 80058c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	697a      	ldr	r2, [r7, #20]
 80058d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	697a      	ldr	r2, [r7, #20]
 80058e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058ec:	f043 0318 	orr.w	r3, r3, #24
 80058f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005900:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005904:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005906:	7afb      	ldrb	r3, [r7, #11]
 8005908:	2b01      	cmp	r3, #1
 800590a:	d10f      	bne.n	800592c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005912:	461a      	mov	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	697a      	ldr	r2, [r7, #20]
 8005922:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005926:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800592a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	371c      	adds	r7, #28
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	4f54300a 	.word	0x4f54300a

08005940 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005948:	2300      	movs	r3, #0
 800594a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	3301      	adds	r3, #1
 8005950:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	4a13      	ldr	r2, [pc, #76]	; (80059a4 <USB_CoreReset+0x64>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d901      	bls.n	800595e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	e01b      	b.n	8005996 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	2b00      	cmp	r3, #0
 8005964:	daf2      	bge.n	800594c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005966:	2300      	movs	r3, #0
 8005968:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	f043 0201 	orr.w	r2, r3, #1
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	3301      	adds	r3, #1
 800597a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	4a09      	ldr	r2, [pc, #36]	; (80059a4 <USB_CoreReset+0x64>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d901      	bls.n	8005988 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005984:	2303      	movs	r3, #3
 8005986:	e006      	b.n	8005996 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	f003 0301 	and.w	r3, r3, #1
 8005990:	2b01      	cmp	r3, #1
 8005992:	d0f0      	beq.n	8005976 <USB_CoreReset+0x36>

  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3714      	adds	r7, #20
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	00030d40 	.word	0x00030d40

080059a8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f103 0208 	add.w	r2, r3, #8
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f04f 32ff 	mov.w	r2, #4294967295
 80059c0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f103 0208 	add.w	r2, r3, #8
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f103 0208 	add.w	r2, r3, #8
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80059f6:	bf00      	nop
 80059f8:	370c      	adds	r7, #12
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr

08005a02 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8005a02:	b480      	push	{r7}
 8005a04:	b085      	sub	sp, #20
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
 8005a0a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a18:	d103      	bne.n	8005a22 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	60fb      	str	r3, [r7, #12]
 8005a20:	e00c      	b.n	8005a3c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	3308      	adds	r3, #8
 8005a26:	60fb      	str	r3, [r7, #12]
 8005a28:	e002      	b.n	8005a30 <vListInsert+0x2e>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	60fb      	str	r3, [r7, #12]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d2f6      	bcs.n	8005a2a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	685a      	ldr	r2, [r3, #4]
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	683a      	ldr	r2, [r7, #0]
 8005a4a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	683a      	ldr	r2, [r7, #0]
 8005a56:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	1c5a      	adds	r2, r3, #1
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	601a      	str	r2, [r3, #0]
}
 8005a68:	bf00      	nop
 8005a6a:	3714      	adds	r7, #20
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005a74:	b480      	push	{r7}
 8005a76:	b085      	sub	sp, #20
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	6892      	ldr	r2, [r2, #8]
 8005a8a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	6852      	ldr	r2, [r2, #4]
 8005a94:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d103      	bne.n	8005aa8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	689a      	ldr	r2, [r3, #8]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	1e5a      	subs	r2, r3, #1
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3714      	adds	r7, #20
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b086      	sub	sp, #24
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10a      	bne.n	8005af6 <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8005ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae4:	f383 8811 	msr	BASEPRI, r3
 8005ae8:	f3bf 8f6f 	isb	sy
 8005aec:	f3bf 8f4f 	dsb	sy
 8005af0:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8005af2:	bf00      	nop
 8005af4:	e7fe      	b.n	8005af4 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d05d      	beq.n	8005bb8 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d059      	beq.n	8005bb8 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b0c:	2100      	movs	r1, #0
 8005b0e:	fba3 2302 	umull	r2, r3, r3, r2
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d000      	beq.n	8005b18 <xQueueGenericReset+0x50>
 8005b16:	2101      	movs	r1, #1
 8005b18:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d14c      	bne.n	8005bb8 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8005b1e:	f001 fddb 	bl	80076d8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b2a:	6939      	ldr	r1, [r7, #16]
 8005b2c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005b2e:	fb01 f303 	mul.w	r3, r1, r3
 8005b32:	441a      	add	r2, r3
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	6939      	ldr	r1, [r7, #16]
 8005b52:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005b54:	fb01 f303 	mul.w	r3, r1, r3
 8005b58:	441a      	add	r2, r3
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	22ff      	movs	r2, #255	; 0xff
 8005b62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	22ff      	movs	r2, #255	; 0xff
 8005b6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d114      	bne.n	8005b9e <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d01a      	beq.n	8005bb2 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	3310      	adds	r3, #16
 8005b80:	4618      	mov	r0, r3
 8005b82:	f000 ff45 	bl	8006a10 <xTaskRemoveFromEventList>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d012      	beq.n	8005bb2 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005b8c:	4b15      	ldr	r3, [pc, #84]	; (8005be4 <xQueueGenericReset+0x11c>)
 8005b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b92:	601a      	str	r2, [r3, #0]
 8005b94:	f3bf 8f4f 	dsb	sy
 8005b98:	f3bf 8f6f 	isb	sy
 8005b9c:	e009      	b.n	8005bb2 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	3310      	adds	r3, #16
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f7ff ff00 	bl	80059a8 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	3324      	adds	r3, #36	; 0x24
 8005bac:	4618      	mov	r0, r3
 8005bae:	f7ff fefb 	bl	80059a8 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8005bb2:	f001 fdc1 	bl	8007738 <vPortExitCritical>
 8005bb6:	e001      	b.n	8005bbc <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d10a      	bne.n	8005bd8 <xQueueGenericReset+0x110>
        __asm volatile
 8005bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc6:	f383 8811 	msr	BASEPRI, r3
 8005bca:	f3bf 8f6f 	isb	sy
 8005bce:	f3bf 8f4f 	dsb	sy
 8005bd2:	60bb      	str	r3, [r7, #8]
    }
 8005bd4:	bf00      	nop
 8005bd6:	e7fe      	b.n	8005bd6 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8005bd8:	697b      	ldr	r3, [r7, #20]
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3718      	adds	r7, #24
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	e000ed04 	.word	0xe000ed04

08005be8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b08a      	sub	sp, #40	; 0x28
 8005bec:	af02      	add	r7, sp, #8
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	4613      	mov	r3, r2
 8005bf4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d02e      	beq.n	8005c5e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8005c00:	2100      	movs	r1, #0
 8005c02:	68ba      	ldr	r2, [r7, #8]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	fba3 2302 	umull	r2, r3, r3, r2
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d000      	beq.n	8005c10 <xQueueGenericCreate+0x28>
 8005c0e:	2101      	movs	r1, #1
 8005c10:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d123      	bne.n	8005c5e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	68ba      	ldr	r2, [r7, #8]
 8005c1a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8005c1e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8005c22:	d81c      	bhi.n	8005c5e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	68ba      	ldr	r2, [r7, #8]
 8005c28:	fb02 f303 	mul.w	r3, r2, r3
 8005c2c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	3350      	adds	r3, #80	; 0x50
 8005c32:	4618      	mov	r0, r3
 8005c34:	f001 fe32 	bl	800789c <pvPortMalloc>
 8005c38:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d01c      	beq.n	8005c7a <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	3350      	adds	r3, #80	; 0x50
 8005c48:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005c4a:	79fa      	ldrb	r2, [r7, #7]
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	9300      	str	r3, [sp, #0]
 8005c50:	4613      	mov	r3, r2
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	68b9      	ldr	r1, [r7, #8]
 8005c56:	68f8      	ldr	r0, [r7, #12]
 8005c58:	f000 f814 	bl	8005c84 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8005c5c:	e00d      	b.n	8005c7a <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d10a      	bne.n	8005c7a <xQueueGenericCreate+0x92>
        __asm volatile
 8005c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c68:	f383 8811 	msr	BASEPRI, r3
 8005c6c:	f3bf 8f6f 	isb	sy
 8005c70:	f3bf 8f4f 	dsb	sy
 8005c74:	613b      	str	r3, [r7, #16]
    }
 8005c76:	bf00      	nop
 8005c78:	e7fe      	b.n	8005c78 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8005c7a:	69fb      	ldr	r3, [r7, #28]
    }
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3720      	adds	r7, #32
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	607a      	str	r2, [r7, #4]
 8005c90:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d103      	bne.n	8005ca0 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	69ba      	ldr	r2, [r7, #24]
 8005c9c:	601a      	str	r2, [r3, #0]
 8005c9e:	e002      	b.n	8005ca6 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	68ba      	ldr	r2, [r7, #8]
 8005cb0:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005cb2:	2101      	movs	r1, #1
 8005cb4:	69b8      	ldr	r0, [r7, #24]
 8005cb6:	f7ff ff07 	bl	8005ac8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	78fa      	ldrb	r2, [r7, #3]
 8005cbe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8005cc2:	bf00      	nop
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
	...

08005ccc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b08c      	sub	sp, #48	; 0x30
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8005ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10a      	bne.n	8005cfc <xQueueReceive+0x30>
        __asm volatile
 8005ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cea:	f383 8811 	msr	BASEPRI, r3
 8005cee:	f3bf 8f6f 	isb	sy
 8005cf2:	f3bf 8f4f 	dsb	sy
 8005cf6:	623b      	str	r3, [r7, #32]
    }
 8005cf8:	bf00      	nop
 8005cfa:	e7fe      	b.n	8005cfa <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d103      	bne.n	8005d0a <xQueueReceive+0x3e>
 8005d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d101      	bne.n	8005d0e <xQueueReceive+0x42>
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e000      	b.n	8005d10 <xQueueReceive+0x44>
 8005d0e:	2300      	movs	r3, #0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10a      	bne.n	8005d2a <xQueueReceive+0x5e>
        __asm volatile
 8005d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d18:	f383 8811 	msr	BASEPRI, r3
 8005d1c:	f3bf 8f6f 	isb	sy
 8005d20:	f3bf 8f4f 	dsb	sy
 8005d24:	61fb      	str	r3, [r7, #28]
    }
 8005d26:	bf00      	nop
 8005d28:	e7fe      	b.n	8005d28 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d2a:	f001 f881 	bl	8006e30 <xTaskGetSchedulerState>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d102      	bne.n	8005d3a <xQueueReceive+0x6e>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d101      	bne.n	8005d3e <xQueueReceive+0x72>
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e000      	b.n	8005d40 <xQueueReceive+0x74>
 8005d3e:	2300      	movs	r3, #0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d10a      	bne.n	8005d5a <xQueueReceive+0x8e>
        __asm volatile
 8005d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d48:	f383 8811 	msr	BASEPRI, r3
 8005d4c:	f3bf 8f6f 	isb	sy
 8005d50:	f3bf 8f4f 	dsb	sy
 8005d54:	61bb      	str	r3, [r7, #24]
    }
 8005d56:	bf00      	nop
 8005d58:	e7fe      	b.n	8005d58 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005d5a:	f001 fcbd 	bl	80076d8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d62:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d01f      	beq.n	8005daa <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d6a:	68b9      	ldr	r1, [r7, #8]
 8005d6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d6e:	f000 f88d 	bl	8005e8c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d74:	1e5a      	subs	r2, r3, #1
 8005d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d78:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00f      	beq.n	8005da2 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d84:	3310      	adds	r3, #16
 8005d86:	4618      	mov	r0, r3
 8005d88:	f000 fe42 	bl	8006a10 <xTaskRemoveFromEventList>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d007      	beq.n	8005da2 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005d92:	4b3d      	ldr	r3, [pc, #244]	; (8005e88 <xQueueReceive+0x1bc>)
 8005d94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d98:	601a      	str	r2, [r3, #0]
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8005da2:	f001 fcc9 	bl	8007738 <vPortExitCritical>
                return pdPASS;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e069      	b.n	8005e7e <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d103      	bne.n	8005db8 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005db0:	f001 fcc2 	bl	8007738 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8005db4:	2300      	movs	r3, #0
 8005db6:	e062      	b.n	8005e7e <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d106      	bne.n	8005dcc <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005dbe:	f107 0310 	add.w	r3, r7, #16
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f000 fefa 	bl	8006bbc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005dcc:	f001 fcb4 	bl	8007738 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005dd0:	f000 fb28 	bl	8006424 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005dd4:	f001 fc80 	bl	80076d8 <vPortEnterCritical>
 8005dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005dde:	b25b      	sxtb	r3, r3
 8005de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005de4:	d103      	bne.n	8005dee <xQueueReceive+0x122>
 8005de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005df4:	b25b      	sxtb	r3, r3
 8005df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dfa:	d103      	bne.n	8005e04 <xQueueReceive+0x138>
 8005dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e04:	f001 fc98 	bl	8007738 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e08:	1d3a      	adds	r2, r7, #4
 8005e0a:	f107 0310 	add.w	r3, r7, #16
 8005e0e:	4611      	mov	r1, r2
 8005e10:	4618      	mov	r0, r3
 8005e12:	f000 fee9 	bl	8006be8 <xTaskCheckForTimeOut>
 8005e16:	4603      	mov	r3, r0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d123      	bne.n	8005e64 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e1e:	f000 f8ad 	bl	8005f7c <prvIsQueueEmpty>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d017      	beq.n	8005e58 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e2a:	3324      	adds	r3, #36	; 0x24
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	4611      	mov	r1, r2
 8005e30:	4618      	mov	r0, r3
 8005e32:	f000 fd83 	bl	800693c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8005e36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e38:	f000 f84e 	bl	8005ed8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8005e3c:	f000 fb00 	bl	8006440 <xTaskResumeAll>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d189      	bne.n	8005d5a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8005e46:	4b10      	ldr	r3, [pc, #64]	; (8005e88 <xQueueReceive+0x1bc>)
 8005e48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e4c:	601a      	str	r2, [r3, #0]
 8005e4e:	f3bf 8f4f 	dsb	sy
 8005e52:	f3bf 8f6f 	isb	sy
 8005e56:	e780      	b.n	8005d5a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8005e58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e5a:	f000 f83d 	bl	8005ed8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005e5e:	f000 faef 	bl	8006440 <xTaskResumeAll>
 8005e62:	e77a      	b.n	8005d5a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8005e64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e66:	f000 f837 	bl	8005ed8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005e6a:	f000 fae9 	bl	8006440 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e70:	f000 f884 	bl	8005f7c <prvIsQueueEmpty>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	f43f af6f 	beq.w	8005d5a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8005e7c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3730      	adds	r7, #48	; 0x30
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	e000ed04 	.word	0xe000ed04

08005e8c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d018      	beq.n	8005ed0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	68da      	ldr	r2, [r3, #12]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea6:	441a      	add	r2, r3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	68da      	ldr	r2, [r3, #12]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d303      	bcc.n	8005ec0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	68d9      	ldr	r1, [r3, #12]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec8:	461a      	mov	r2, r3
 8005eca:	6838      	ldr	r0, [r7, #0]
 8005ecc:	f004 fb50 	bl	800a570 <memcpy>
    }
}
 8005ed0:	bf00      	nop
 8005ed2:	3708      	adds	r7, #8
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8005ee0:	f001 fbfa 	bl	80076d8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005eea:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005eec:	e011      	b.n	8005f12 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d012      	beq.n	8005f1c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	3324      	adds	r3, #36	; 0x24
 8005efa:	4618      	mov	r0, r3
 8005efc:	f000 fd88 	bl	8006a10 <xTaskRemoveFromEventList>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d001      	beq.n	8005f0a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8005f06:	f000 fed5 	bl	8006cb4 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8005f0a:	7bfb      	ldrb	r3, [r7, #15]
 8005f0c:	3b01      	subs	r3, #1
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	dce9      	bgt.n	8005eee <prvUnlockQueue+0x16>
 8005f1a:	e000      	b.n	8005f1e <prvUnlockQueue+0x46>
                    break;
 8005f1c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	22ff      	movs	r2, #255	; 0xff
 8005f22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8005f26:	f001 fc07 	bl	8007738 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8005f2a:	f001 fbd5 	bl	80076d8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f34:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f36:	e011      	b.n	8005f5c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d012      	beq.n	8005f66 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	3310      	adds	r3, #16
 8005f44:	4618      	mov	r0, r3
 8005f46:	f000 fd63 	bl	8006a10 <xTaskRemoveFromEventList>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d001      	beq.n	8005f54 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8005f50:	f000 feb0 	bl	8006cb4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8005f54:	7bbb      	ldrb	r3, [r7, #14]
 8005f56:	3b01      	subs	r3, #1
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	dce9      	bgt.n	8005f38 <prvUnlockQueue+0x60>
 8005f64:	e000      	b.n	8005f68 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8005f66:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	22ff      	movs	r2, #255	; 0xff
 8005f6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8005f70:	f001 fbe2 	bl	8007738 <vPortExitCritical>
}
 8005f74:	bf00      	nop
 8005f76:	3710      	adds	r7, #16
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005f84:	f001 fba8 	bl	80076d8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d102      	bne.n	8005f96 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8005f90:	2301      	movs	r3, #1
 8005f92:	60fb      	str	r3, [r7, #12]
 8005f94:	e001      	b.n	8005f9a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8005f96:	2300      	movs	r3, #0
 8005f98:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005f9a:	f001 fbcd 	bl	8007738 <vPortExitCritical>

    return xReturn;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3710      	adds	r7, #16
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8005fa8:	b480      	push	{r7}
 8005faa:	b087      	sub	sp, #28
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d10a      	bne.n	8005fd2 <vQueueAddToRegistry+0x2a>
        __asm volatile
 8005fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc0:	f383 8811 	msr	BASEPRI, r3
 8005fc4:	f3bf 8f6f 	isb	sy
 8005fc8:	f3bf 8f4f 	dsb	sy
 8005fcc:	60fb      	str	r3, [r7, #12]
    }
 8005fce:	bf00      	nop
 8005fd0:	e7fe      	b.n	8005fd0 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d024      	beq.n	8006022 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005fd8:	2300      	movs	r3, #0
 8005fda:	617b      	str	r3, [r7, #20]
 8005fdc:	e01e      	b.n	800601c <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8005fde:	4a18      	ldr	r2, [pc, #96]	; (8006040 <vQueueAddToRegistry+0x98>)
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	00db      	lsls	r3, r3, #3
 8005fe4:	4413      	add	r3, r2
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d105      	bne.n	8005ffa <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	00db      	lsls	r3, r3, #3
 8005ff2:	4a13      	ldr	r2, [pc, #76]	; (8006040 <vQueueAddToRegistry+0x98>)
 8005ff4:	4413      	add	r3, r2
 8005ff6:	613b      	str	r3, [r7, #16]
                    break;
 8005ff8:	e013      	b.n	8006022 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d10a      	bne.n	8006016 <vQueueAddToRegistry+0x6e>
 8006000:	4a0f      	ldr	r2, [pc, #60]	; (8006040 <vQueueAddToRegistry+0x98>)
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d104      	bne.n	8006016 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	00db      	lsls	r3, r3, #3
 8006010:	4a0b      	ldr	r2, [pc, #44]	; (8006040 <vQueueAddToRegistry+0x98>)
 8006012:	4413      	add	r3, r2
 8006014:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	3301      	adds	r3, #1
 800601a:	617b      	str	r3, [r7, #20]
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	2b07      	cmp	r3, #7
 8006020:	d9dd      	bls.n	8005fde <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d005      	beq.n	8006034 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	683a      	ldr	r2, [r7, #0]
 800602c:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8006034:	bf00      	nop
 8006036:	371c      	adds	r7, #28
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr
 8006040:	20000260 	.word	0x20000260

08006044 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8006044:	b580      	push	{r7, lr}
 8006046:	b086      	sub	sp, #24
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8006054:	f001 fb40 	bl	80076d8 <vPortEnterCritical>
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800605e:	b25b      	sxtb	r3, r3
 8006060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006064:	d103      	bne.n	800606e <vQueueWaitForMessageRestricted+0x2a>
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	2200      	movs	r2, #0
 800606a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006074:	b25b      	sxtb	r3, r3
 8006076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800607a:	d103      	bne.n	8006084 <vQueueWaitForMessageRestricted+0x40>
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	2200      	movs	r2, #0
 8006080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006084:	f001 fb58 	bl	8007738 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800608c:	2b00      	cmp	r3, #0
 800608e:	d106      	bne.n	800609e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	3324      	adds	r3, #36	; 0x24
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	68b9      	ldr	r1, [r7, #8]
 8006098:	4618      	mov	r0, r3
 800609a:	f000 fc73 	bl	8006984 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800609e:	6978      	ldr	r0, [r7, #20]
 80060a0:	f7ff ff1a 	bl	8005ed8 <prvUnlockQueue>
    }
 80060a4:	bf00      	nop
 80060a6:	3718      	adds	r7, #24
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b08c      	sub	sp, #48	; 0x30
 80060b0:	af04      	add	r7, sp, #16
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	603b      	str	r3, [r7, #0]
 80060b8:	4613      	mov	r3, r2
 80060ba:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80060bc:	88fb      	ldrh	r3, [r7, #6]
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	4618      	mov	r0, r3
 80060c2:	f001 fbeb 	bl	800789c <pvPortMalloc>
 80060c6:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d013      	beq.n	80060f6 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80060ce:	2058      	movs	r0, #88	; 0x58
 80060d0:	f001 fbe4 	bl	800789c <pvPortMalloc>
 80060d4:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d008      	beq.n	80060ee <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80060dc:	2258      	movs	r2, #88	; 0x58
 80060de:	2100      	movs	r1, #0
 80060e0:	69f8      	ldr	r0, [r7, #28]
 80060e2:	f004 fa53 	bl	800a58c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	697a      	ldr	r2, [r7, #20]
 80060ea:	631a      	str	r2, [r3, #48]	; 0x30
 80060ec:	e005      	b.n	80060fa <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80060ee:	6978      	ldr	r0, [r7, #20]
 80060f0:	f001 fc8e 	bl	8007a10 <vPortFree>
 80060f4:	e001      	b.n	80060fa <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80060f6:	2300      	movs	r3, #0
 80060f8:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d013      	beq.n	8006128 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006100:	88fa      	ldrh	r2, [r7, #6]
 8006102:	2300      	movs	r3, #0
 8006104:	9303      	str	r3, [sp, #12]
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	9302      	str	r3, [sp, #8]
 800610a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800610c:	9301      	str	r3, [sp, #4]
 800610e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006110:	9300      	str	r3, [sp, #0]
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	68b9      	ldr	r1, [r7, #8]
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	f000 f80e 	bl	8006138 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800611c:	69f8      	ldr	r0, [r7, #28]
 800611e:	f000 f899 	bl	8006254 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8006122:	2301      	movs	r3, #1
 8006124:	61bb      	str	r3, [r7, #24]
 8006126:	e002      	b.n	800612e <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006128:	f04f 33ff 	mov.w	r3, #4294967295
 800612c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800612e:	69bb      	ldr	r3, [r7, #24]
    }
 8006130:	4618      	mov	r0, r3
 8006132:	3720      	adds	r7, #32
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b088      	sub	sp, #32
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
 8006144:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006148:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	461a      	mov	r2, r3
 8006150:	21a5      	movs	r1, #165	; 0xa5
 8006152:	f004 fa1b 	bl	800a58c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006158:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006160:	3b01      	subs	r3, #1
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	4413      	add	r3, r2
 8006166:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	f023 0307 	bic.w	r3, r3, #7
 800616e:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	f003 0307 	and.w	r3, r3, #7
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00a      	beq.n	8006190 <prvInitialiseNewTask+0x58>
        __asm volatile
 800617a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800617e:	f383 8811 	msr	BASEPRI, r3
 8006182:	f3bf 8f6f 	isb	sy
 8006186:	f3bf 8f4f 	dsb	sy
 800618a:	617b      	str	r3, [r7, #20]
    }
 800618c:	bf00      	nop
 800618e:	e7fe      	b.n	800618e <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d01e      	beq.n	80061d4 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006196:	2300      	movs	r3, #0
 8006198:	61fb      	str	r3, [r7, #28]
 800619a:	e012      	b.n	80061c2 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800619c:	68ba      	ldr	r2, [r7, #8]
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	4413      	add	r3, r2
 80061a2:	7819      	ldrb	r1, [r3, #0]
 80061a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	4413      	add	r3, r2
 80061aa:	3334      	adds	r3, #52	; 0x34
 80061ac:	460a      	mov	r2, r1
 80061ae:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80061b0:	68ba      	ldr	r2, [r7, #8]
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	4413      	add	r3, r2
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d006      	beq.n	80061ca <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	3301      	adds	r3, #1
 80061c0:	61fb      	str	r3, [r7, #28]
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	2b09      	cmp	r3, #9
 80061c6:	d9e9      	bls.n	800619c <prvInitialiseNewTask+0x64>
 80061c8:	e000      	b.n	80061cc <prvInitialiseNewTask+0x94>
            {
                break;
 80061ca:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80061cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ce:	2200      	movs	r2, #0
 80061d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80061d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d6:	2b04      	cmp	r3, #4
 80061d8:	d90a      	bls.n	80061f0 <prvInitialiseNewTask+0xb8>
        __asm volatile
 80061da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061de:	f383 8811 	msr	BASEPRI, r3
 80061e2:	f3bf 8f6f 	isb	sy
 80061e6:	f3bf 8f4f 	dsb	sy
 80061ea:	613b      	str	r3, [r7, #16]
    }
 80061ec:	bf00      	nop
 80061ee:	e7fe      	b.n	80061ee <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80061f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f2:	2b04      	cmp	r3, #4
 80061f4:	d901      	bls.n	80061fa <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80061f6:	2304      	movs	r3, #4
 80061f8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80061fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061fe:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8006200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006202:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006204:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006208:	3304      	adds	r3, #4
 800620a:	4618      	mov	r0, r3
 800620c:	f7ff fbec 	bl	80059e8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006212:	3318      	adds	r3, #24
 8006214:	4618      	mov	r0, r3
 8006216:	f7ff fbe7 	bl	80059e8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800621a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800621e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006222:	f1c3 0205 	rsb	r2, r3, #5
 8006226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006228:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800622a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800622c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800622e:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006230:	683a      	ldr	r2, [r7, #0]
 8006232:	68f9      	ldr	r1, [r7, #12]
 8006234:	69b8      	ldr	r0, [r7, #24]
 8006236:	f001 f91d 	bl	8007474 <pxPortInitialiseStack>
 800623a:	4602      	mov	r2, r0
 800623c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623e:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8006240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006242:	2b00      	cmp	r3, #0
 8006244:	d002      	beq.n	800624c <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006248:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800624a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800624c:	bf00      	nop
 800624e:	3720      	adds	r7, #32
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800625c:	f001 fa3c 	bl	80076d8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8006260:	4b40      	ldr	r3, [pc, #256]	; (8006364 <prvAddNewTaskToReadyList+0x110>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	3301      	adds	r3, #1
 8006266:	4a3f      	ldr	r2, [pc, #252]	; (8006364 <prvAddNewTaskToReadyList+0x110>)
 8006268:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800626a:	4b3f      	ldr	r3, [pc, #252]	; (8006368 <prvAddNewTaskToReadyList+0x114>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d109      	bne.n	8006286 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8006272:	4a3d      	ldr	r2, [pc, #244]	; (8006368 <prvAddNewTaskToReadyList+0x114>)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006278:	4b3a      	ldr	r3, [pc, #232]	; (8006364 <prvAddNewTaskToReadyList+0x110>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2b01      	cmp	r3, #1
 800627e:	d110      	bne.n	80062a2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8006280:	f000 fd3c 	bl	8006cfc <prvInitialiseTaskLists>
 8006284:	e00d      	b.n	80062a2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8006286:	4b39      	ldr	r3, [pc, #228]	; (800636c <prvAddNewTaskToReadyList+0x118>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d109      	bne.n	80062a2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800628e:	4b36      	ldr	r3, [pc, #216]	; (8006368 <prvAddNewTaskToReadyList+0x114>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006298:	429a      	cmp	r2, r3
 800629a:	d802      	bhi.n	80062a2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800629c:	4a32      	ldr	r2, [pc, #200]	; (8006368 <prvAddNewTaskToReadyList+0x114>)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80062a2:	4b33      	ldr	r3, [pc, #204]	; (8006370 <prvAddNewTaskToReadyList+0x11c>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	3301      	adds	r3, #1
 80062a8:	4a31      	ldr	r2, [pc, #196]	; (8006370 <prvAddNewTaskToReadyList+0x11c>)
 80062aa:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80062ac:	4b30      	ldr	r3, [pc, #192]	; (8006370 <prvAddNewTaskToReadyList+0x11c>)
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b8:	2201      	movs	r2, #1
 80062ba:	409a      	lsls	r2, r3
 80062bc:	4b2d      	ldr	r3, [pc, #180]	; (8006374 <prvAddNewTaskToReadyList+0x120>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	4a2c      	ldr	r2, [pc, #176]	; (8006374 <prvAddNewTaskToReadyList+0x120>)
 80062c4:	6013      	str	r3, [r2, #0]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ca:	492b      	ldr	r1, [pc, #172]	; (8006378 <prvAddNewTaskToReadyList+0x124>)
 80062cc:	4613      	mov	r3, r2
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	4413      	add	r3, r2
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	440b      	add	r3, r1
 80062d6:	3304      	adds	r3, #4
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	60fb      	str	r3, [r7, #12]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	609a      	str	r2, [r3, #8]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	689a      	ldr	r2, [r3, #8]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	60da      	str	r2, [r3, #12]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	3204      	adds	r2, #4
 80062f2:	605a      	str	r2, [r3, #4]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	1d1a      	adds	r2, r3, #4
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	609a      	str	r2, [r3, #8]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006300:	4613      	mov	r3, r2
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	4413      	add	r3, r2
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	4a1b      	ldr	r2, [pc, #108]	; (8006378 <prvAddNewTaskToReadyList+0x124>)
 800630a:	441a      	add	r2, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	615a      	str	r2, [r3, #20]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006314:	4918      	ldr	r1, [pc, #96]	; (8006378 <prvAddNewTaskToReadyList+0x124>)
 8006316:	4613      	mov	r3, r2
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	4413      	add	r3, r2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	440b      	add	r3, r1
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	1c59      	adds	r1, r3, #1
 8006324:	4814      	ldr	r0, [pc, #80]	; (8006378 <prvAddNewTaskToReadyList+0x124>)
 8006326:	4613      	mov	r3, r2
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4413      	add	r3, r2
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	4403      	add	r3, r0
 8006330:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8006332:	f001 fa01 	bl	8007738 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8006336:	4b0d      	ldr	r3, [pc, #52]	; (800636c <prvAddNewTaskToReadyList+0x118>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00e      	beq.n	800635c <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800633e:	4b0a      	ldr	r3, [pc, #40]	; (8006368 <prvAddNewTaskToReadyList+0x114>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006348:	429a      	cmp	r2, r3
 800634a:	d207      	bcs.n	800635c <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800634c:	4b0b      	ldr	r3, [pc, #44]	; (800637c <prvAddNewTaskToReadyList+0x128>)
 800634e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006352:	601a      	str	r2, [r3, #0]
 8006354:	f3bf 8f4f 	dsb	sy
 8006358:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800635c:	bf00      	nop
 800635e:	3710      	adds	r7, #16
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	20000378 	.word	0x20000378
 8006368:	200002a0 	.word	0x200002a0
 800636c:	20000384 	.word	0x20000384
 8006370:	20000394 	.word	0x20000394
 8006374:	20000380 	.word	0x20000380
 8006378:	200002a4 	.word	0x200002a4
 800637c:	e000ed04 	.word	0xe000ed04

08006380 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b086      	sub	sp, #24
 8006384:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8006386:	4b20      	ldr	r3, [pc, #128]	; (8006408 <vTaskStartScheduler+0x88>)
 8006388:	9301      	str	r3, [sp, #4]
 800638a:	2300      	movs	r3, #0
 800638c:	9300      	str	r3, [sp, #0]
 800638e:	2300      	movs	r3, #0
 8006390:	2282      	movs	r2, #130	; 0x82
 8006392:	491e      	ldr	r1, [pc, #120]	; (800640c <vTaskStartScheduler+0x8c>)
 8006394:	481e      	ldr	r0, [pc, #120]	; (8006410 <vTaskStartScheduler+0x90>)
 8006396:	f7ff fe89 	bl	80060ac <xTaskCreate>
 800639a:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d102      	bne.n	80063a8 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 80063a2:	f000 fde3 	bl	8006f6c <xTimerCreateTimerTask>
 80063a6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d116      	bne.n	80063dc <vTaskStartScheduler+0x5c>
        __asm volatile
 80063ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b2:	f383 8811 	msr	BASEPRI, r3
 80063b6:	f3bf 8f6f 	isb	sy
 80063ba:	f3bf 8f4f 	dsb	sy
 80063be:	60bb      	str	r3, [r7, #8]
    }
 80063c0:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80063c2:	4b14      	ldr	r3, [pc, #80]	; (8006414 <vTaskStartScheduler+0x94>)
 80063c4:	f04f 32ff 	mov.w	r2, #4294967295
 80063c8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80063ca:	4b13      	ldr	r3, [pc, #76]	; (8006418 <vTaskStartScheduler+0x98>)
 80063cc:	2201      	movs	r2, #1
 80063ce:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80063d0:	4b12      	ldr	r3, [pc, #72]	; (800641c <vTaskStartScheduler+0x9c>)
 80063d2:	2200      	movs	r2, #0
 80063d4:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80063d6:	f001 f8dd 	bl	8007594 <xPortStartScheduler>
 80063da:	e00e      	b.n	80063fa <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e2:	d10a      	bne.n	80063fa <vTaskStartScheduler+0x7a>
        __asm volatile
 80063e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e8:	f383 8811 	msr	BASEPRI, r3
 80063ec:	f3bf 8f6f 	isb	sy
 80063f0:	f3bf 8f4f 	dsb	sy
 80063f4:	607b      	str	r3, [r7, #4]
    }
 80063f6:	bf00      	nop
 80063f8:	e7fe      	b.n	80063f8 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80063fa:	4b09      	ldr	r3, [pc, #36]	; (8006420 <vTaskStartScheduler+0xa0>)
 80063fc:	681b      	ldr	r3, [r3, #0]
}
 80063fe:	bf00      	nop
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	2000039c 	.word	0x2000039c
 800640c:	0800a5b4 	.word	0x0800a5b4
 8006410:	08006ccd 	.word	0x08006ccd
 8006414:	20000398 	.word	0x20000398
 8006418:	20000384 	.word	0x20000384
 800641c:	2000037c 	.word	0x2000037c
 8006420:	2000000c 	.word	0x2000000c

08006424 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006424:	b480      	push	{r7}
 8006426:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8006428:	4b04      	ldr	r3, [pc, #16]	; (800643c <vTaskSuspendAll+0x18>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	3301      	adds	r3, #1
 800642e:	4a03      	ldr	r2, [pc, #12]	; (800643c <vTaskSuspendAll+0x18>)
 8006430:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8006432:	bf00      	nop
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr
 800643c:	200003a0 	.word	0x200003a0

08006440 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b088      	sub	sp, #32
 8006444:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8006446:	2300      	movs	r3, #0
 8006448:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800644a:	2300      	movs	r3, #0
 800644c:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800644e:	4b71      	ldr	r3, [pc, #452]	; (8006614 <xTaskResumeAll+0x1d4>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d10a      	bne.n	800646c <xTaskResumeAll+0x2c>
        __asm volatile
 8006456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645a:	f383 8811 	msr	BASEPRI, r3
 800645e:	f3bf 8f6f 	isb	sy
 8006462:	f3bf 8f4f 	dsb	sy
 8006466:	607b      	str	r3, [r7, #4]
    }
 8006468:	bf00      	nop
 800646a:	e7fe      	b.n	800646a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800646c:	f001 f934 	bl	80076d8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8006470:	4b68      	ldr	r3, [pc, #416]	; (8006614 <xTaskResumeAll+0x1d4>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	3b01      	subs	r3, #1
 8006476:	4a67      	ldr	r2, [pc, #412]	; (8006614 <xTaskResumeAll+0x1d4>)
 8006478:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800647a:	4b66      	ldr	r3, [pc, #408]	; (8006614 <xTaskResumeAll+0x1d4>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	f040 80c0 	bne.w	8006604 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006484:	4b64      	ldr	r3, [pc, #400]	; (8006618 <xTaskResumeAll+0x1d8>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	2b00      	cmp	r3, #0
 800648a:	f000 80bb 	beq.w	8006604 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800648e:	e08a      	b.n	80065a6 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006490:	4b62      	ldr	r3, [pc, #392]	; (800661c <xTaskResumeAll+0x1dc>)
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800649c:	613b      	str	r3, [r7, #16]
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	69db      	ldr	r3, [r3, #28]
 80064a2:	69fa      	ldr	r2, [r7, #28]
 80064a4:	6a12      	ldr	r2, [r2, #32]
 80064a6:	609a      	str	r2, [r3, #8]
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	6a1b      	ldr	r3, [r3, #32]
 80064ac:	69fa      	ldr	r2, [r7, #28]
 80064ae:	69d2      	ldr	r2, [r2, #28]
 80064b0:	605a      	str	r2, [r3, #4]
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	685a      	ldr	r2, [r3, #4]
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	3318      	adds	r3, #24
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d103      	bne.n	80064c6 <xTaskResumeAll+0x86>
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	6a1a      	ldr	r2, [r3, #32]
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	605a      	str	r2, [r3, #4]
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	2200      	movs	r2, #0
 80064ca:	629a      	str	r2, [r3, #40]	; 0x28
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	1e5a      	subs	r2, r3, #1
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	695b      	ldr	r3, [r3, #20]
 80064da:	60fb      	str	r3, [r7, #12]
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	69fa      	ldr	r2, [r7, #28]
 80064e2:	68d2      	ldr	r2, [r2, #12]
 80064e4:	609a      	str	r2, [r3, #8]
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	69fa      	ldr	r2, [r7, #28]
 80064ec:	6892      	ldr	r2, [r2, #8]
 80064ee:	605a      	str	r2, [r3, #4]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	685a      	ldr	r2, [r3, #4]
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	3304      	adds	r3, #4
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d103      	bne.n	8006504 <xTaskResumeAll+0xc4>
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	68da      	ldr	r2, [r3, #12]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	605a      	str	r2, [r3, #4]
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	2200      	movs	r2, #0
 8006508:	615a      	str	r2, [r3, #20]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	1e5a      	subs	r2, r3, #1
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006518:	2201      	movs	r2, #1
 800651a:	409a      	lsls	r2, r3
 800651c:	4b40      	ldr	r3, [pc, #256]	; (8006620 <xTaskResumeAll+0x1e0>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4313      	orrs	r3, r2
 8006522:	4a3f      	ldr	r2, [pc, #252]	; (8006620 <xTaskResumeAll+0x1e0>)
 8006524:	6013      	str	r3, [r2, #0]
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800652a:	493e      	ldr	r1, [pc, #248]	; (8006624 <xTaskResumeAll+0x1e4>)
 800652c:	4613      	mov	r3, r2
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	4413      	add	r3, r2
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	440b      	add	r3, r1
 8006536:	3304      	adds	r3, #4
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	60bb      	str	r3, [r7, #8]
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	68ba      	ldr	r2, [r7, #8]
 8006540:	609a      	str	r2, [r3, #8]
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	689a      	ldr	r2, [r3, #8]
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	60da      	str	r2, [r3, #12]
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	69fa      	ldr	r2, [r7, #28]
 8006550:	3204      	adds	r2, #4
 8006552:	605a      	str	r2, [r3, #4]
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	1d1a      	adds	r2, r3, #4
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	609a      	str	r2, [r3, #8]
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006560:	4613      	mov	r3, r2
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	4413      	add	r3, r2
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	4a2e      	ldr	r2, [pc, #184]	; (8006624 <xTaskResumeAll+0x1e4>)
 800656a:	441a      	add	r2, r3
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	615a      	str	r2, [r3, #20]
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006574:	492b      	ldr	r1, [pc, #172]	; (8006624 <xTaskResumeAll+0x1e4>)
 8006576:	4613      	mov	r3, r2
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	4413      	add	r3, r2
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	440b      	add	r3, r1
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	1c59      	adds	r1, r3, #1
 8006584:	4827      	ldr	r0, [pc, #156]	; (8006624 <xTaskResumeAll+0x1e4>)
 8006586:	4613      	mov	r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	4413      	add	r3, r2
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	4403      	add	r3, r0
 8006590:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006596:	4b24      	ldr	r3, [pc, #144]	; (8006628 <xTaskResumeAll+0x1e8>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659c:	429a      	cmp	r2, r3
 800659e:	d302      	bcc.n	80065a6 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 80065a0:	4b22      	ldr	r3, [pc, #136]	; (800662c <xTaskResumeAll+0x1ec>)
 80065a2:	2201      	movs	r2, #1
 80065a4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065a6:	4b1d      	ldr	r3, [pc, #116]	; (800661c <xTaskResumeAll+0x1dc>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	f47f af70 	bne.w	8006490 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d001      	beq.n	80065ba <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80065b6:	f000 fc1f 	bl	8006df8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80065ba:	4b1d      	ldr	r3, [pc, #116]	; (8006630 <xTaskResumeAll+0x1f0>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d010      	beq.n	80065e8 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80065c6:	f000 f847 	bl	8006658 <xTaskIncrementTick>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d002      	beq.n	80065d6 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 80065d0:	4b16      	ldr	r3, [pc, #88]	; (800662c <xTaskResumeAll+0x1ec>)
 80065d2:	2201      	movs	r2, #1
 80065d4:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	3b01      	subs	r3, #1
 80065da:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1f1      	bne.n	80065c6 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 80065e2:	4b13      	ldr	r3, [pc, #76]	; (8006630 <xTaskResumeAll+0x1f0>)
 80065e4:	2200      	movs	r2, #0
 80065e6:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80065e8:	4b10      	ldr	r3, [pc, #64]	; (800662c <xTaskResumeAll+0x1ec>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d009      	beq.n	8006604 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80065f0:	2301      	movs	r3, #1
 80065f2:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80065f4:	4b0f      	ldr	r3, [pc, #60]	; (8006634 <xTaskResumeAll+0x1f4>)
 80065f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065fa:	601a      	str	r2, [r3, #0]
 80065fc:	f3bf 8f4f 	dsb	sy
 8006600:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8006604:	f001 f898 	bl	8007738 <vPortExitCritical>

    return xAlreadyYielded;
 8006608:	69bb      	ldr	r3, [r7, #24]
}
 800660a:	4618      	mov	r0, r3
 800660c:	3720      	adds	r7, #32
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	200003a0 	.word	0x200003a0
 8006618:	20000378 	.word	0x20000378
 800661c:	20000338 	.word	0x20000338
 8006620:	20000380 	.word	0x20000380
 8006624:	200002a4 	.word	0x200002a4
 8006628:	200002a0 	.word	0x200002a0
 800662c:	2000038c 	.word	0x2000038c
 8006630:	20000388 	.word	0x20000388
 8006634:	e000ed04 	.word	0xe000ed04

08006638 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800663e:	4b05      	ldr	r3, [pc, #20]	; (8006654 <xTaskGetTickCount+0x1c>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8006644:	687b      	ldr	r3, [r7, #4]
}
 8006646:	4618      	mov	r0, r3
 8006648:	370c      	adds	r7, #12
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	2000037c 	.word	0x2000037c

08006658 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b08a      	sub	sp, #40	; 0x28
 800665c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800665e:	2300      	movs	r3, #0
 8006660:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006662:	4b7d      	ldr	r3, [pc, #500]	; (8006858 <xTaskIncrementTick+0x200>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2b00      	cmp	r3, #0
 8006668:	f040 80ec 	bne.w	8006844 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800666c:	4b7b      	ldr	r3, [pc, #492]	; (800685c <xTaskIncrementTick+0x204>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	3301      	adds	r3, #1
 8006672:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8006674:	4a79      	ldr	r2, [pc, #484]	; (800685c <xTaskIncrementTick+0x204>)
 8006676:	6a3b      	ldr	r3, [r7, #32]
 8006678:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800667a:	6a3b      	ldr	r3, [r7, #32]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d120      	bne.n	80066c2 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8006680:	4b77      	ldr	r3, [pc, #476]	; (8006860 <xTaskIncrementTick+0x208>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d00a      	beq.n	80066a0 <xTaskIncrementTick+0x48>
        __asm volatile
 800668a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800668e:	f383 8811 	msr	BASEPRI, r3
 8006692:	f3bf 8f6f 	isb	sy
 8006696:	f3bf 8f4f 	dsb	sy
 800669a:	607b      	str	r3, [r7, #4]
    }
 800669c:	bf00      	nop
 800669e:	e7fe      	b.n	800669e <xTaskIncrementTick+0x46>
 80066a0:	4b6f      	ldr	r3, [pc, #444]	; (8006860 <xTaskIncrementTick+0x208>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	61fb      	str	r3, [r7, #28]
 80066a6:	4b6f      	ldr	r3, [pc, #444]	; (8006864 <xTaskIncrementTick+0x20c>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a6d      	ldr	r2, [pc, #436]	; (8006860 <xTaskIncrementTick+0x208>)
 80066ac:	6013      	str	r3, [r2, #0]
 80066ae:	4a6d      	ldr	r2, [pc, #436]	; (8006864 <xTaskIncrementTick+0x20c>)
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	6013      	str	r3, [r2, #0]
 80066b4:	4b6c      	ldr	r3, [pc, #432]	; (8006868 <xTaskIncrementTick+0x210>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	3301      	adds	r3, #1
 80066ba:	4a6b      	ldr	r2, [pc, #428]	; (8006868 <xTaskIncrementTick+0x210>)
 80066bc:	6013      	str	r3, [r2, #0]
 80066be:	f000 fb9b 	bl	8006df8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80066c2:	4b6a      	ldr	r3, [pc, #424]	; (800686c <xTaskIncrementTick+0x214>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	6a3a      	ldr	r2, [r7, #32]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	f0c0 80a6 	bcc.w	800681a <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066ce:	4b64      	ldr	r3, [pc, #400]	; (8006860 <xTaskIncrementTick+0x208>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d104      	bne.n	80066e2 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066d8:	4b64      	ldr	r3, [pc, #400]	; (800686c <xTaskIncrementTick+0x214>)
 80066da:	f04f 32ff 	mov.w	r2, #4294967295
 80066de:	601a      	str	r2, [r3, #0]
                    break;
 80066e0:	e09b      	b.n	800681a <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066e2:	4b5f      	ldr	r3, [pc, #380]	; (8006860 <xTaskIncrementTick+0x208>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80066f2:	6a3a      	ldr	r2, [r7, #32]
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d203      	bcs.n	8006702 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80066fa:	4a5c      	ldr	r2, [pc, #368]	; (800686c <xTaskIncrementTick+0x214>)
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8006700:	e08b      	b.n	800681a <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	695b      	ldr	r3, [r3, #20]
 8006706:	613b      	str	r3, [r7, #16]
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	69ba      	ldr	r2, [r7, #24]
 800670e:	68d2      	ldr	r2, [r2, #12]
 8006710:	609a      	str	r2, [r3, #8]
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	69ba      	ldr	r2, [r7, #24]
 8006718:	6892      	ldr	r2, [r2, #8]
 800671a:	605a      	str	r2, [r3, #4]
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	685a      	ldr	r2, [r3, #4]
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	3304      	adds	r3, #4
 8006724:	429a      	cmp	r2, r3
 8006726:	d103      	bne.n	8006730 <xTaskIncrementTick+0xd8>
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	68da      	ldr	r2, [r3, #12]
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	605a      	str	r2, [r3, #4]
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	2200      	movs	r2, #0
 8006734:	615a      	str	r2, [r3, #20]
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	1e5a      	subs	r2, r3, #1
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006744:	2b00      	cmp	r3, #0
 8006746:	d01e      	beq.n	8006786 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800674c:	60fb      	str	r3, [r7, #12]
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	69db      	ldr	r3, [r3, #28]
 8006752:	69ba      	ldr	r2, [r7, #24]
 8006754:	6a12      	ldr	r2, [r2, #32]
 8006756:	609a      	str	r2, [r3, #8]
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	6a1b      	ldr	r3, [r3, #32]
 800675c:	69ba      	ldr	r2, [r7, #24]
 800675e:	69d2      	ldr	r2, [r2, #28]
 8006760:	605a      	str	r2, [r3, #4]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	685a      	ldr	r2, [r3, #4]
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	3318      	adds	r3, #24
 800676a:	429a      	cmp	r2, r3
 800676c:	d103      	bne.n	8006776 <xTaskIncrementTick+0x11e>
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	6a1a      	ldr	r2, [r3, #32]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	605a      	str	r2, [r3, #4]
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	2200      	movs	r2, #0
 800677a:	629a      	str	r2, [r3, #40]	; 0x28
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	1e5a      	subs	r2, r3, #1
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678a:	2201      	movs	r2, #1
 800678c:	409a      	lsls	r2, r3
 800678e:	4b38      	ldr	r3, [pc, #224]	; (8006870 <xTaskIncrementTick+0x218>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4313      	orrs	r3, r2
 8006794:	4a36      	ldr	r2, [pc, #216]	; (8006870 <xTaskIncrementTick+0x218>)
 8006796:	6013      	str	r3, [r2, #0]
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800679c:	4935      	ldr	r1, [pc, #212]	; (8006874 <xTaskIncrementTick+0x21c>)
 800679e:	4613      	mov	r3, r2
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	4413      	add	r3, r2
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	440b      	add	r3, r1
 80067a8:	3304      	adds	r3, #4
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	60bb      	str	r3, [r7, #8]
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	68ba      	ldr	r2, [r7, #8]
 80067b2:	609a      	str	r2, [r3, #8]
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	689a      	ldr	r2, [r3, #8]
 80067b8:	69bb      	ldr	r3, [r7, #24]
 80067ba:	60da      	str	r2, [r3, #12]
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	69ba      	ldr	r2, [r7, #24]
 80067c2:	3204      	adds	r2, #4
 80067c4:	605a      	str	r2, [r3, #4]
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	1d1a      	adds	r2, r3, #4
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	609a      	str	r2, [r3, #8]
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067d2:	4613      	mov	r3, r2
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	4413      	add	r3, r2
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	4a26      	ldr	r2, [pc, #152]	; (8006874 <xTaskIncrementTick+0x21c>)
 80067dc:	441a      	add	r2, r3
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	615a      	str	r2, [r3, #20]
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067e6:	4923      	ldr	r1, [pc, #140]	; (8006874 <xTaskIncrementTick+0x21c>)
 80067e8:	4613      	mov	r3, r2
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	4413      	add	r3, r2
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	440b      	add	r3, r1
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	1c59      	adds	r1, r3, #1
 80067f6:	481f      	ldr	r0, [pc, #124]	; (8006874 <xTaskIncrementTick+0x21c>)
 80067f8:	4613      	mov	r3, r2
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	4413      	add	r3, r2
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	4403      	add	r3, r0
 8006802:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006804:	69bb      	ldr	r3, [r7, #24]
 8006806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006808:	4b1b      	ldr	r3, [pc, #108]	; (8006878 <xTaskIncrementTick+0x220>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800680e:	429a      	cmp	r2, r3
 8006810:	f67f af5d 	bls.w	80066ce <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8006814:	2301      	movs	r3, #1
 8006816:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006818:	e759      	b.n	80066ce <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800681a:	4b17      	ldr	r3, [pc, #92]	; (8006878 <xTaskIncrementTick+0x220>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006820:	4914      	ldr	r1, [pc, #80]	; (8006874 <xTaskIncrementTick+0x21c>)
 8006822:	4613      	mov	r3, r2
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	4413      	add	r3, r2
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	440b      	add	r3, r1
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2b01      	cmp	r3, #1
 8006830:	d901      	bls.n	8006836 <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8006832:	2301      	movs	r3, #1
 8006834:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8006836:	4b11      	ldr	r3, [pc, #68]	; (800687c <xTaskIncrementTick+0x224>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d007      	beq.n	800684e <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 800683e:	2301      	movs	r3, #1
 8006840:	627b      	str	r3, [r7, #36]	; 0x24
 8006842:	e004      	b.n	800684e <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8006844:	4b0e      	ldr	r3, [pc, #56]	; (8006880 <xTaskIncrementTick+0x228>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	3301      	adds	r3, #1
 800684a:	4a0d      	ldr	r2, [pc, #52]	; (8006880 <xTaskIncrementTick+0x228>)
 800684c:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800684e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006850:	4618      	mov	r0, r3
 8006852:	3728      	adds	r7, #40	; 0x28
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}
 8006858:	200003a0 	.word	0x200003a0
 800685c:	2000037c 	.word	0x2000037c
 8006860:	20000330 	.word	0x20000330
 8006864:	20000334 	.word	0x20000334
 8006868:	20000390 	.word	0x20000390
 800686c:	20000398 	.word	0x20000398
 8006870:	20000380 	.word	0x20000380
 8006874:	200002a4 	.word	0x200002a4
 8006878:	200002a0 	.word	0x200002a0
 800687c:	2000038c 	.word	0x2000038c
 8006880:	20000388 	.word	0x20000388

08006884 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006884:	b480      	push	{r7}
 8006886:	b087      	sub	sp, #28
 8006888:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800688a:	4b27      	ldr	r3, [pc, #156]	; (8006928 <vTaskSwitchContext+0xa4>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d003      	beq.n	800689a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8006892:	4b26      	ldr	r3, [pc, #152]	; (800692c <vTaskSwitchContext+0xa8>)
 8006894:	2201      	movs	r2, #1
 8006896:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8006898:	e03f      	b.n	800691a <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800689a:	4b24      	ldr	r3, [pc, #144]	; (800692c <vTaskSwitchContext+0xa8>)
 800689c:	2200      	movs	r2, #0
 800689e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068a0:	4b23      	ldr	r3, [pc, #140]	; (8006930 <vTaskSwitchContext+0xac>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	fab3 f383 	clz	r3, r3
 80068ac:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80068ae:	7afb      	ldrb	r3, [r7, #11]
 80068b0:	f1c3 031f 	rsb	r3, r3, #31
 80068b4:	617b      	str	r3, [r7, #20]
 80068b6:	491f      	ldr	r1, [pc, #124]	; (8006934 <vTaskSwitchContext+0xb0>)
 80068b8:	697a      	ldr	r2, [r7, #20]
 80068ba:	4613      	mov	r3, r2
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	4413      	add	r3, r2
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	440b      	add	r3, r1
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d10a      	bne.n	80068e0 <vTaskSwitchContext+0x5c>
        __asm volatile
 80068ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ce:	f383 8811 	msr	BASEPRI, r3
 80068d2:	f3bf 8f6f 	isb	sy
 80068d6:	f3bf 8f4f 	dsb	sy
 80068da:	607b      	str	r3, [r7, #4]
    }
 80068dc:	bf00      	nop
 80068de:	e7fe      	b.n	80068de <vTaskSwitchContext+0x5a>
 80068e0:	697a      	ldr	r2, [r7, #20]
 80068e2:	4613      	mov	r3, r2
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	4413      	add	r3, r2
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	4a12      	ldr	r2, [pc, #72]	; (8006934 <vTaskSwitchContext+0xb0>)
 80068ec:	4413      	add	r3, r2
 80068ee:	613b      	str	r3, [r7, #16]
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	685a      	ldr	r2, [r3, #4]
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	605a      	str	r2, [r3, #4]
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	685a      	ldr	r2, [r3, #4]
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	3308      	adds	r3, #8
 8006902:	429a      	cmp	r2, r3
 8006904:	d104      	bne.n	8006910 <vTaskSwitchContext+0x8c>
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	685a      	ldr	r2, [r3, #4]
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	605a      	str	r2, [r3, #4]
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	4a08      	ldr	r2, [pc, #32]	; (8006938 <vTaskSwitchContext+0xb4>)
 8006918:	6013      	str	r3, [r2, #0]
}
 800691a:	bf00      	nop
 800691c:	371c      	adds	r7, #28
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	200003a0 	.word	0x200003a0
 800692c:	2000038c 	.word	0x2000038c
 8006930:	20000380 	.word	0x20000380
 8006934:	200002a4 	.word	0x200002a4
 8006938:	200002a0 	.word	0x200002a0

0800693c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b084      	sub	sp, #16
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d10a      	bne.n	8006962 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800694c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006950:	f383 8811 	msr	BASEPRI, r3
 8006954:	f3bf 8f6f 	isb	sy
 8006958:	f3bf 8f4f 	dsb	sy
 800695c:	60fb      	str	r3, [r7, #12]
    }
 800695e:	bf00      	nop
 8006960:	e7fe      	b.n	8006960 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006962:	4b07      	ldr	r3, [pc, #28]	; (8006980 <vTaskPlaceOnEventList+0x44>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	3318      	adds	r3, #24
 8006968:	4619      	mov	r1, r3
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f7ff f849 	bl	8005a02 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006970:	2101      	movs	r1, #1
 8006972:	6838      	ldr	r0, [r7, #0]
 8006974:	f000 fa7a 	bl	8006e6c <prvAddCurrentTaskToDelayedList>
}
 8006978:	bf00      	nop
 800697a:	3710      	adds	r7, #16
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}
 8006980:	200002a0 	.word	0x200002a0

08006984 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8006984:	b580      	push	{r7, lr}
 8006986:	b086      	sub	sp, #24
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d10a      	bne.n	80069ac <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8006996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699a:	f383 8811 	msr	BASEPRI, r3
 800699e:	f3bf 8f6f 	isb	sy
 80069a2:	f3bf 8f4f 	dsb	sy
 80069a6:	613b      	str	r3, [r7, #16]
    }
 80069a8:	bf00      	nop
 80069aa:	e7fe      	b.n	80069aa <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	617b      	str	r3, [r7, #20]
 80069b2:	4b16      	ldr	r3, [pc, #88]	; (8006a0c <vTaskPlaceOnEventListRestricted+0x88>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	697a      	ldr	r2, [r7, #20]
 80069b8:	61da      	str	r2, [r3, #28]
 80069ba:	4b14      	ldr	r3, [pc, #80]	; (8006a0c <vTaskPlaceOnEventListRestricted+0x88>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	697a      	ldr	r2, [r7, #20]
 80069c0:	6892      	ldr	r2, [r2, #8]
 80069c2:	621a      	str	r2, [r3, #32]
 80069c4:	4b11      	ldr	r3, [pc, #68]	; (8006a0c <vTaskPlaceOnEventListRestricted+0x88>)
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	3218      	adds	r2, #24
 80069ce:	605a      	str	r2, [r3, #4]
 80069d0:	4b0e      	ldr	r3, [pc, #56]	; (8006a0c <vTaskPlaceOnEventListRestricted+0x88>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f103 0218 	add.w	r2, r3, #24
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	609a      	str	r2, [r3, #8]
 80069dc:	4b0b      	ldr	r3, [pc, #44]	; (8006a0c <vTaskPlaceOnEventListRestricted+0x88>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	629a      	str	r2, [r3, #40]	; 0x28
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	1c5a      	adds	r2, r3, #1
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d002      	beq.n	80069fa <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80069f4:	f04f 33ff 	mov.w	r3, #4294967295
 80069f8:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80069fa:	6879      	ldr	r1, [r7, #4]
 80069fc:	68b8      	ldr	r0, [r7, #8]
 80069fe:	f000 fa35 	bl	8006e6c <prvAddCurrentTaskToDelayedList>
    }
 8006a02:	bf00      	nop
 8006a04:	3718      	adds	r7, #24
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	200002a0 	.word	0x200002a0

08006a10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006a10:	b480      	push	{r7}
 8006a12:	b08b      	sub	sp, #44	; 0x2c
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8006a20:	6a3b      	ldr	r3, [r7, #32]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d10a      	bne.n	8006a3c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8006a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2a:	f383 8811 	msr	BASEPRI, r3
 8006a2e:	f3bf 8f6f 	isb	sy
 8006a32:	f3bf 8f4f 	dsb	sy
 8006a36:	60fb      	str	r3, [r7, #12]
    }
 8006a38:	bf00      	nop
 8006a3a:	e7fe      	b.n	8006a3a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8006a3c:	6a3b      	ldr	r3, [r7, #32]
 8006a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a40:	61fb      	str	r3, [r7, #28]
 8006a42:	6a3b      	ldr	r3, [r7, #32]
 8006a44:	69db      	ldr	r3, [r3, #28]
 8006a46:	6a3a      	ldr	r2, [r7, #32]
 8006a48:	6a12      	ldr	r2, [r2, #32]
 8006a4a:	609a      	str	r2, [r3, #8]
 8006a4c:	6a3b      	ldr	r3, [r7, #32]
 8006a4e:	6a1b      	ldr	r3, [r3, #32]
 8006a50:	6a3a      	ldr	r2, [r7, #32]
 8006a52:	69d2      	ldr	r2, [r2, #28]
 8006a54:	605a      	str	r2, [r3, #4]
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	685a      	ldr	r2, [r3, #4]
 8006a5a:	6a3b      	ldr	r3, [r7, #32]
 8006a5c:	3318      	adds	r3, #24
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d103      	bne.n	8006a6a <xTaskRemoveFromEventList+0x5a>
 8006a62:	6a3b      	ldr	r3, [r7, #32]
 8006a64:	6a1a      	ldr	r2, [r3, #32]
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	605a      	str	r2, [r3, #4]
 8006a6a:	6a3b      	ldr	r3, [r7, #32]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	629a      	str	r2, [r3, #40]	; 0x28
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	1e5a      	subs	r2, r3, #1
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a7a:	4b4a      	ldr	r3, [pc, #296]	; (8006ba4 <xTaskRemoveFromEventList+0x194>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d15e      	bne.n	8006b40 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8006a82:	6a3b      	ldr	r3, [r7, #32]
 8006a84:	695b      	ldr	r3, [r3, #20]
 8006a86:	617b      	str	r3, [r7, #20]
 8006a88:	6a3b      	ldr	r3, [r7, #32]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	6a3a      	ldr	r2, [r7, #32]
 8006a8e:	68d2      	ldr	r2, [r2, #12]
 8006a90:	609a      	str	r2, [r3, #8]
 8006a92:	6a3b      	ldr	r3, [r7, #32]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	6a3a      	ldr	r2, [r7, #32]
 8006a98:	6892      	ldr	r2, [r2, #8]
 8006a9a:	605a      	str	r2, [r3, #4]
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	685a      	ldr	r2, [r3, #4]
 8006aa0:	6a3b      	ldr	r3, [r7, #32]
 8006aa2:	3304      	adds	r3, #4
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d103      	bne.n	8006ab0 <xTaskRemoveFromEventList+0xa0>
 8006aa8:	6a3b      	ldr	r3, [r7, #32]
 8006aaa:	68da      	ldr	r2, [r3, #12]
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	605a      	str	r2, [r3, #4]
 8006ab0:	6a3b      	ldr	r3, [r7, #32]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	615a      	str	r2, [r3, #20]
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	1e5a      	subs	r2, r3, #1
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8006ac0:	6a3b      	ldr	r3, [r7, #32]
 8006ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	409a      	lsls	r2, r3
 8006ac8:	4b37      	ldr	r3, [pc, #220]	; (8006ba8 <xTaskRemoveFromEventList+0x198>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	4a36      	ldr	r2, [pc, #216]	; (8006ba8 <xTaskRemoveFromEventList+0x198>)
 8006ad0:	6013      	str	r3, [r2, #0]
 8006ad2:	6a3b      	ldr	r3, [r7, #32]
 8006ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ad6:	4935      	ldr	r1, [pc, #212]	; (8006bac <xTaskRemoveFromEventList+0x19c>)
 8006ad8:	4613      	mov	r3, r2
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	4413      	add	r3, r2
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	440b      	add	r3, r1
 8006ae2:	3304      	adds	r3, #4
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	613b      	str	r3, [r7, #16]
 8006ae8:	6a3b      	ldr	r3, [r7, #32]
 8006aea:	693a      	ldr	r2, [r7, #16]
 8006aec:	609a      	str	r2, [r3, #8]
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	689a      	ldr	r2, [r3, #8]
 8006af2:	6a3b      	ldr	r3, [r7, #32]
 8006af4:	60da      	str	r2, [r3, #12]
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	6a3a      	ldr	r2, [r7, #32]
 8006afc:	3204      	adds	r2, #4
 8006afe:	605a      	str	r2, [r3, #4]
 8006b00:	6a3b      	ldr	r3, [r7, #32]
 8006b02:	1d1a      	adds	r2, r3, #4
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	609a      	str	r2, [r3, #8]
 8006b08:	6a3b      	ldr	r3, [r7, #32]
 8006b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	4413      	add	r3, r2
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	4a25      	ldr	r2, [pc, #148]	; (8006bac <xTaskRemoveFromEventList+0x19c>)
 8006b16:	441a      	add	r2, r3
 8006b18:	6a3b      	ldr	r3, [r7, #32]
 8006b1a:	615a      	str	r2, [r3, #20]
 8006b1c:	6a3b      	ldr	r3, [r7, #32]
 8006b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b20:	4922      	ldr	r1, [pc, #136]	; (8006bac <xTaskRemoveFromEventList+0x19c>)
 8006b22:	4613      	mov	r3, r2
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	4413      	add	r3, r2
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	440b      	add	r3, r1
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	1c59      	adds	r1, r3, #1
 8006b30:	481e      	ldr	r0, [pc, #120]	; (8006bac <xTaskRemoveFromEventList+0x19c>)
 8006b32:	4613      	mov	r3, r2
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	4413      	add	r3, r2
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	4403      	add	r3, r0
 8006b3c:	6019      	str	r1, [r3, #0]
 8006b3e:	e01b      	b.n	8006b78 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006b40:	4b1b      	ldr	r3, [pc, #108]	; (8006bb0 <xTaskRemoveFromEventList+0x1a0>)
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	61bb      	str	r3, [r7, #24]
 8006b46:	6a3b      	ldr	r3, [r7, #32]
 8006b48:	69ba      	ldr	r2, [r7, #24]
 8006b4a:	61da      	str	r2, [r3, #28]
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	689a      	ldr	r2, [r3, #8]
 8006b50:	6a3b      	ldr	r3, [r7, #32]
 8006b52:	621a      	str	r2, [r3, #32]
 8006b54:	69bb      	ldr	r3, [r7, #24]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	6a3a      	ldr	r2, [r7, #32]
 8006b5a:	3218      	adds	r2, #24
 8006b5c:	605a      	str	r2, [r3, #4]
 8006b5e:	6a3b      	ldr	r3, [r7, #32]
 8006b60:	f103 0218 	add.w	r2, r3, #24
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	609a      	str	r2, [r3, #8]
 8006b68:	6a3b      	ldr	r3, [r7, #32]
 8006b6a:	4a11      	ldr	r2, [pc, #68]	; (8006bb0 <xTaskRemoveFromEventList+0x1a0>)
 8006b6c:	629a      	str	r2, [r3, #40]	; 0x28
 8006b6e:	4b10      	ldr	r3, [pc, #64]	; (8006bb0 <xTaskRemoveFromEventList+0x1a0>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	3301      	adds	r3, #1
 8006b74:	4a0e      	ldr	r2, [pc, #56]	; (8006bb0 <xTaskRemoveFromEventList+0x1a0>)
 8006b76:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006b78:	6a3b      	ldr	r3, [r7, #32]
 8006b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b7c:	4b0d      	ldr	r3, [pc, #52]	; (8006bb4 <xTaskRemoveFromEventList+0x1a4>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d905      	bls.n	8006b92 <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8006b86:	2301      	movs	r3, #1
 8006b88:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8006b8a:	4b0b      	ldr	r3, [pc, #44]	; (8006bb8 <xTaskRemoveFromEventList+0x1a8>)
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	601a      	str	r2, [r3, #0]
 8006b90:	e001      	b.n	8006b96 <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 8006b92:	2300      	movs	r3, #0
 8006b94:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8006b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	372c      	adds	r7, #44	; 0x2c
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr
 8006ba4:	200003a0 	.word	0x200003a0
 8006ba8:	20000380 	.word	0x20000380
 8006bac:	200002a4 	.word	0x200002a4
 8006bb0:	20000338 	.word	0x20000338
 8006bb4:	200002a0 	.word	0x200002a0
 8006bb8:	2000038c 	.word	0x2000038c

08006bbc <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006bc4:	4b06      	ldr	r3, [pc, #24]	; (8006be0 <vTaskInternalSetTimeOutState+0x24>)
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8006bcc:	4b05      	ldr	r3, [pc, #20]	; (8006be4 <vTaskInternalSetTimeOutState+0x28>)
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	605a      	str	r2, [r3, #4]
}
 8006bd4:	bf00      	nop
 8006bd6:	370c      	adds	r7, #12
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr
 8006be0:	20000390 	.word	0x20000390
 8006be4:	2000037c 	.word	0x2000037c

08006be8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b088      	sub	sp, #32
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d10a      	bne.n	8006c0e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8006bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfc:	f383 8811 	msr	BASEPRI, r3
 8006c00:	f3bf 8f6f 	isb	sy
 8006c04:	f3bf 8f4f 	dsb	sy
 8006c08:	613b      	str	r3, [r7, #16]
    }
 8006c0a:	bf00      	nop
 8006c0c:	e7fe      	b.n	8006c0c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d10a      	bne.n	8006c2a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8006c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c18:	f383 8811 	msr	BASEPRI, r3
 8006c1c:	f3bf 8f6f 	isb	sy
 8006c20:	f3bf 8f4f 	dsb	sy
 8006c24:	60fb      	str	r3, [r7, #12]
    }
 8006c26:	bf00      	nop
 8006c28:	e7fe      	b.n	8006c28 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8006c2a:	f000 fd55 	bl	80076d8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8006c2e:	4b1f      	ldr	r3, [pc, #124]	; (8006cac <xTaskCheckForTimeOut+0xc4>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	69ba      	ldr	r2, [r7, #24]
 8006c3a:	1ad3      	subs	r3, r2, r3
 8006c3c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c46:	d102      	bne.n	8006c4e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	61fb      	str	r3, [r7, #28]
 8006c4c:	e026      	b.n	8006c9c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	4b17      	ldr	r3, [pc, #92]	; (8006cb0 <xTaskCheckForTimeOut+0xc8>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d00a      	beq.n	8006c70 <xTaskCheckForTimeOut+0x88>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	69ba      	ldr	r2, [r7, #24]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d305      	bcc.n	8006c70 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8006c64:	2301      	movs	r3, #1
 8006c66:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	601a      	str	r2, [r3, #0]
 8006c6e:	e015      	b.n	8006c9c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	697a      	ldr	r2, [r7, #20]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d20b      	bcs.n	8006c92 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	1ad2      	subs	r2, r2, r3
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f7ff ff98 	bl	8006bbc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	61fb      	str	r3, [r7, #28]
 8006c90:	e004      	b.n	8006c9c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	2200      	movs	r2, #0
 8006c96:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8006c9c:	f000 fd4c 	bl	8007738 <vPortExitCritical>

    return xReturn;
 8006ca0:	69fb      	ldr	r3, [r7, #28]
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3720      	adds	r7, #32
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	2000037c 	.word	0x2000037c
 8006cb0:	20000390 	.word	0x20000390

08006cb4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8006cb8:	4b03      	ldr	r3, [pc, #12]	; (8006cc8 <vTaskMissedYield+0x14>)
 8006cba:	2201      	movs	r2, #1
 8006cbc:	601a      	str	r2, [r3, #0]
}
 8006cbe:	bf00      	nop
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr
 8006cc8:	2000038c 	.word	0x2000038c

08006ccc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8006cd4:	f000 f852 	bl	8006d7c <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006cd8:	4b06      	ldr	r3, [pc, #24]	; (8006cf4 <prvIdleTask+0x28>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d9f9      	bls.n	8006cd4 <prvIdleTask+0x8>
            {
                taskYIELD();
 8006ce0:	4b05      	ldr	r3, [pc, #20]	; (8006cf8 <prvIdleTask+0x2c>)
 8006ce2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ce6:	601a      	str	r2, [r3, #0]
 8006ce8:	f3bf 8f4f 	dsb	sy
 8006cec:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8006cf0:	e7f0      	b.n	8006cd4 <prvIdleTask+0x8>
 8006cf2:	bf00      	nop
 8006cf4:	200002a4 	.word	0x200002a4
 8006cf8:	e000ed04 	.word	0xe000ed04

08006cfc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d02:	2300      	movs	r3, #0
 8006d04:	607b      	str	r3, [r7, #4]
 8006d06:	e00c      	b.n	8006d22 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	4413      	add	r3, r2
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	4a12      	ldr	r2, [pc, #72]	; (8006d5c <prvInitialiseTaskLists+0x60>)
 8006d14:	4413      	add	r3, r2
 8006d16:	4618      	mov	r0, r3
 8006d18:	f7fe fe46 	bl	80059a8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	3301      	adds	r3, #1
 8006d20:	607b      	str	r3, [r7, #4]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2b04      	cmp	r3, #4
 8006d26:	d9ef      	bls.n	8006d08 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8006d28:	480d      	ldr	r0, [pc, #52]	; (8006d60 <prvInitialiseTaskLists+0x64>)
 8006d2a:	f7fe fe3d 	bl	80059a8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8006d2e:	480d      	ldr	r0, [pc, #52]	; (8006d64 <prvInitialiseTaskLists+0x68>)
 8006d30:	f7fe fe3a 	bl	80059a8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8006d34:	480c      	ldr	r0, [pc, #48]	; (8006d68 <prvInitialiseTaskLists+0x6c>)
 8006d36:	f7fe fe37 	bl	80059a8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8006d3a:	480c      	ldr	r0, [pc, #48]	; (8006d6c <prvInitialiseTaskLists+0x70>)
 8006d3c:	f7fe fe34 	bl	80059a8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8006d40:	480b      	ldr	r0, [pc, #44]	; (8006d70 <prvInitialiseTaskLists+0x74>)
 8006d42:	f7fe fe31 	bl	80059a8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8006d46:	4b0b      	ldr	r3, [pc, #44]	; (8006d74 <prvInitialiseTaskLists+0x78>)
 8006d48:	4a05      	ldr	r2, [pc, #20]	; (8006d60 <prvInitialiseTaskLists+0x64>)
 8006d4a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006d4c:	4b0a      	ldr	r3, [pc, #40]	; (8006d78 <prvInitialiseTaskLists+0x7c>)
 8006d4e:	4a05      	ldr	r2, [pc, #20]	; (8006d64 <prvInitialiseTaskLists+0x68>)
 8006d50:	601a      	str	r2, [r3, #0]
}
 8006d52:	bf00      	nop
 8006d54:	3708      	adds	r7, #8
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	200002a4 	.word	0x200002a4
 8006d60:	20000308 	.word	0x20000308
 8006d64:	2000031c 	.word	0x2000031c
 8006d68:	20000338 	.word	0x20000338
 8006d6c:	2000034c 	.word	0x2000034c
 8006d70:	20000364 	.word	0x20000364
 8006d74:	20000330 	.word	0x20000330
 8006d78:	20000334 	.word	0x20000334

08006d7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d82:	e019      	b.n	8006db8 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8006d84:	f000 fca8 	bl	80076d8 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d88:	4b10      	ldr	r3, [pc, #64]	; (8006dcc <prvCheckTasksWaitingTermination+0x50>)
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	3304      	adds	r3, #4
 8006d94:	4618      	mov	r0, r3
 8006d96:	f7fe fe6d 	bl	8005a74 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8006d9a:	4b0d      	ldr	r3, [pc, #52]	; (8006dd0 <prvCheckTasksWaitingTermination+0x54>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	4a0b      	ldr	r2, [pc, #44]	; (8006dd0 <prvCheckTasksWaitingTermination+0x54>)
 8006da2:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8006da4:	4b0b      	ldr	r3, [pc, #44]	; (8006dd4 <prvCheckTasksWaitingTermination+0x58>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	3b01      	subs	r3, #1
 8006daa:	4a0a      	ldr	r2, [pc, #40]	; (8006dd4 <prvCheckTasksWaitingTermination+0x58>)
 8006dac:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8006dae:	f000 fcc3 	bl	8007738 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 f810 	bl	8006dd8 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006db8:	4b06      	ldr	r3, [pc, #24]	; (8006dd4 <prvCheckTasksWaitingTermination+0x58>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d1e1      	bne.n	8006d84 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8006dc0:	bf00      	nop
 8006dc2:	bf00      	nop
 8006dc4:	3708      	adds	r7, #8
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	2000034c 	.word	0x2000034c
 8006dd0:	20000378 	.word	0x20000378
 8006dd4:	20000360 	.word	0x20000360

08006dd8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006de4:	4618      	mov	r0, r3
 8006de6:	f000 fe13 	bl	8007a10 <vPortFree>
            vPortFree( pxTCB );
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 fe10 	bl	8007a10 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8006df0:	bf00      	nop
 8006df2:	3708      	adds	r7, #8
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006df8:	b480      	push	{r7}
 8006dfa:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006dfc:	4b0a      	ldr	r3, [pc, #40]	; (8006e28 <prvResetNextTaskUnblockTime+0x30>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d104      	bne.n	8006e10 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8006e06:	4b09      	ldr	r3, [pc, #36]	; (8006e2c <prvResetNextTaskUnblockTime+0x34>)
 8006e08:	f04f 32ff 	mov.w	r2, #4294967295
 8006e0c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8006e0e:	e005      	b.n	8006e1c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006e10:	4b05      	ldr	r3, [pc, #20]	; (8006e28 <prvResetNextTaskUnblockTime+0x30>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a04      	ldr	r2, [pc, #16]	; (8006e2c <prvResetNextTaskUnblockTime+0x34>)
 8006e1a:	6013      	str	r3, [r2, #0]
}
 8006e1c:	bf00      	nop
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr
 8006e26:	bf00      	nop
 8006e28:	20000330 	.word	0x20000330
 8006e2c:	20000398 	.word	0x20000398

08006e30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8006e36:	4b0b      	ldr	r3, [pc, #44]	; (8006e64 <xTaskGetSchedulerState+0x34>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d102      	bne.n	8006e44 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	607b      	str	r3, [r7, #4]
 8006e42:	e008      	b.n	8006e56 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e44:	4b08      	ldr	r3, [pc, #32]	; (8006e68 <xTaskGetSchedulerState+0x38>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d102      	bne.n	8006e52 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8006e4c:	2302      	movs	r3, #2
 8006e4e:	607b      	str	r3, [r7, #4]
 8006e50:	e001      	b.n	8006e56 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8006e52:	2300      	movs	r3, #0
 8006e54:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8006e56:	687b      	ldr	r3, [r7, #4]
    }
 8006e58:	4618      	mov	r0, r3
 8006e5a:	370c      	adds	r7, #12
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr
 8006e64:	20000384 	.word	0x20000384
 8006e68:	200003a0 	.word	0x200003a0

08006e6c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b086      	sub	sp, #24
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8006e76:	4b36      	ldr	r3, [pc, #216]	; (8006f50 <prvAddCurrentTaskToDelayedList+0xe4>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e7c:	4b35      	ldr	r3, [pc, #212]	; (8006f54 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	3304      	adds	r3, #4
 8006e82:	4618      	mov	r0, r3
 8006e84:	f7fe fdf6 	bl	8005a74 <uxListRemove>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d10b      	bne.n	8006ea6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006e8e:	4b31      	ldr	r3, [pc, #196]	; (8006f54 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e94:	2201      	movs	r2, #1
 8006e96:	fa02 f303 	lsl.w	r3, r2, r3
 8006e9a:	43da      	mvns	r2, r3
 8006e9c:	4b2e      	ldr	r3, [pc, #184]	; (8006f58 <prvAddCurrentTaskToDelayedList+0xec>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4013      	ands	r3, r2
 8006ea2:	4a2d      	ldr	r2, [pc, #180]	; (8006f58 <prvAddCurrentTaskToDelayedList+0xec>)
 8006ea4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eac:	d124      	bne.n	8006ef8 <prvAddCurrentTaskToDelayedList+0x8c>
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d021      	beq.n	8006ef8 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006eb4:	4b29      	ldr	r3, [pc, #164]	; (8006f5c <prvAddCurrentTaskToDelayedList+0xf0>)
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	613b      	str	r3, [r7, #16]
 8006eba:	4b26      	ldr	r3, [pc, #152]	; (8006f54 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	693a      	ldr	r2, [r7, #16]
 8006ec0:	609a      	str	r2, [r3, #8]
 8006ec2:	4b24      	ldr	r3, [pc, #144]	; (8006f54 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	693a      	ldr	r2, [r7, #16]
 8006ec8:	6892      	ldr	r2, [r2, #8]
 8006eca:	60da      	str	r2, [r3, #12]
 8006ecc:	4b21      	ldr	r3, [pc, #132]	; (8006f54 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	3204      	adds	r2, #4
 8006ed6:	605a      	str	r2, [r3, #4]
 8006ed8:	4b1e      	ldr	r3, [pc, #120]	; (8006f54 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	1d1a      	adds	r2, r3, #4
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	609a      	str	r2, [r3, #8]
 8006ee2:	4b1c      	ldr	r3, [pc, #112]	; (8006f54 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a1d      	ldr	r2, [pc, #116]	; (8006f5c <prvAddCurrentTaskToDelayedList+0xf0>)
 8006ee8:	615a      	str	r2, [r3, #20]
 8006eea:	4b1c      	ldr	r3, [pc, #112]	; (8006f5c <prvAddCurrentTaskToDelayedList+0xf0>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	3301      	adds	r3, #1
 8006ef0:	4a1a      	ldr	r2, [pc, #104]	; (8006f5c <prvAddCurrentTaskToDelayedList+0xf0>)
 8006ef2:	6013      	str	r3, [r2, #0]
 8006ef4:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8006ef6:	e026      	b.n	8006f46 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8006ef8:	697a      	ldr	r2, [r7, #20]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4413      	add	r3, r2
 8006efe:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006f00:	4b14      	ldr	r3, [pc, #80]	; (8006f54 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	68fa      	ldr	r2, [r7, #12]
 8006f06:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8006f08:	68fa      	ldr	r2, [r7, #12]
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d209      	bcs.n	8006f24 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f10:	4b13      	ldr	r3, [pc, #76]	; (8006f60 <prvAddCurrentTaskToDelayedList+0xf4>)
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	4b0f      	ldr	r3, [pc, #60]	; (8006f54 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	3304      	adds	r3, #4
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	4610      	mov	r0, r2
 8006f1e:	f7fe fd70 	bl	8005a02 <vListInsert>
}
 8006f22:	e010      	b.n	8006f46 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f24:	4b0f      	ldr	r3, [pc, #60]	; (8006f64 <prvAddCurrentTaskToDelayedList+0xf8>)
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	4b0a      	ldr	r3, [pc, #40]	; (8006f54 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	3304      	adds	r3, #4
 8006f2e:	4619      	mov	r1, r3
 8006f30:	4610      	mov	r0, r2
 8006f32:	f7fe fd66 	bl	8005a02 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8006f36:	4b0c      	ldr	r3, [pc, #48]	; (8006f68 <prvAddCurrentTaskToDelayedList+0xfc>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	68fa      	ldr	r2, [r7, #12]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d202      	bcs.n	8006f46 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8006f40:	4a09      	ldr	r2, [pc, #36]	; (8006f68 <prvAddCurrentTaskToDelayedList+0xfc>)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6013      	str	r3, [r2, #0]
}
 8006f46:	bf00      	nop
 8006f48:	3718      	adds	r7, #24
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	2000037c 	.word	0x2000037c
 8006f54:	200002a0 	.word	0x200002a0
 8006f58:	20000380 	.word	0x20000380
 8006f5c:	20000364 	.word	0x20000364
 8006f60:	20000334 	.word	0x20000334
 8006f64:	20000330 	.word	0x20000330
 8006f68:	20000398 	.word	0x20000398

08006f6c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8006f72:	2300      	movs	r3, #0
 8006f74:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8006f76:	f000 fa47 	bl	8007408 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8006f7a:	4b11      	ldr	r3, [pc, #68]	; (8006fc0 <xTimerCreateTimerTask+0x54>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00b      	beq.n	8006f9a <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8006f82:	4b10      	ldr	r3, [pc, #64]	; (8006fc4 <xTimerCreateTimerTask+0x58>)
 8006f84:	9301      	str	r3, [sp, #4]
 8006f86:	2302      	movs	r3, #2
 8006f88:	9300      	str	r3, [sp, #0]
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006f90:	490d      	ldr	r1, [pc, #52]	; (8006fc8 <xTimerCreateTimerTask+0x5c>)
 8006f92:	480e      	ldr	r0, [pc, #56]	; (8006fcc <xTimerCreateTimerTask+0x60>)
 8006f94:	f7ff f88a 	bl	80060ac <xTaskCreate>
 8006f98:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d10a      	bne.n	8006fb6 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8006fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa4:	f383 8811 	msr	BASEPRI, r3
 8006fa8:	f3bf 8f6f 	isb	sy
 8006fac:	f3bf 8f4f 	dsb	sy
 8006fb0:	603b      	str	r3, [r7, #0]
    }
 8006fb2:	bf00      	nop
 8006fb4:	e7fe      	b.n	8006fb4 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8006fb6:	687b      	ldr	r3, [r7, #4]
    }
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3708      	adds	r7, #8
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}
 8006fc0:	200003d4 	.word	0x200003d4
 8006fc4:	200003d8 	.word	0x200003d8
 8006fc8:	0800a5bc 	.word	0x0800a5bc
 8006fcc:	08007075 	.word	0x08007075

08006fd0 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8006fdc:	e008      	b.n	8006ff0 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	699b      	ldr	r3, [r3, #24]
 8006fe2:	68ba      	ldr	r2, [r7, #8]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6a1b      	ldr	r3, [r3, #32]
 8006fec:	68f8      	ldr	r0, [r7, #12]
 8006fee:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	699a      	ldr	r2, [r3, #24]
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	18d1      	adds	r1, r2, r3
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f000 f8dd 	bl	80071bc <prvInsertTimerInActiveList>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d1ea      	bne.n	8006fde <prvReloadTimer+0xe>
        }
    }
 8007008:	bf00      	nop
 800700a:	bf00      	nop
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
	...

08007014 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800701e:	4b14      	ldr	r3, [pc, #80]	; (8007070 <prvProcessExpiredTimer+0x5c>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	3304      	adds	r3, #4
 800702c:	4618      	mov	r0, r3
 800702e:	f7fe fd21 	bl	8005a74 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007038:	f003 0304 	and.w	r3, r3, #4
 800703c:	2b00      	cmp	r3, #0
 800703e:	d005      	beq.n	800704c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8007040:	683a      	ldr	r2, [r7, #0]
 8007042:	6879      	ldr	r1, [r7, #4]
 8007044:	68f8      	ldr	r0, [r7, #12]
 8007046:	f7ff ffc3 	bl	8006fd0 <prvReloadTimer>
 800704a:	e008      	b.n	800705e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007052:	f023 0301 	bic.w	r3, r3, #1
 8007056:	b2da      	uxtb	r2, r3
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6a1b      	ldr	r3, [r3, #32]
 8007062:	68f8      	ldr	r0, [r7, #12]
 8007064:	4798      	blx	r3
    }
 8007066:	bf00      	nop
 8007068:	3710      	adds	r7, #16
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	200003cc 	.word	0x200003cc

08007074 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800707c:	f107 0308 	add.w	r3, r7, #8
 8007080:	4618      	mov	r0, r3
 8007082:	f000 f857 	bl	8007134 <prvGetNextExpireTime>
 8007086:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	4619      	mov	r1, r3
 800708c:	68f8      	ldr	r0, [r7, #12]
 800708e:	f000 f803 	bl	8007098 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8007092:	f000 f8d5 	bl	8007240 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007096:	e7f1      	b.n	800707c <prvTimerTask+0x8>

08007098 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80070a2:	f7ff f9bf 	bl	8006424 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80070a6:	f107 0308 	add.w	r3, r7, #8
 80070aa:	4618      	mov	r0, r3
 80070ac:	f000 f866 	bl	800717c <prvSampleTimeNow>
 80070b0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d130      	bne.n	800711a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d10a      	bne.n	80070d4 <prvProcessTimerOrBlockTask+0x3c>
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d806      	bhi.n	80070d4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80070c6:	f7ff f9bb 	bl	8006440 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80070ca:	68f9      	ldr	r1, [r7, #12]
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f7ff ffa1 	bl	8007014 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80070d2:	e024      	b.n	800711e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d008      	beq.n	80070ec <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80070da:	4b13      	ldr	r3, [pc, #76]	; (8007128 <prvProcessTimerOrBlockTask+0x90>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d101      	bne.n	80070e8 <prvProcessTimerOrBlockTask+0x50>
 80070e4:	2301      	movs	r3, #1
 80070e6:	e000      	b.n	80070ea <prvProcessTimerOrBlockTask+0x52>
 80070e8:	2300      	movs	r3, #0
 80070ea:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80070ec:	4b0f      	ldr	r3, [pc, #60]	; (800712c <prvProcessTimerOrBlockTask+0x94>)
 80070ee:	6818      	ldr	r0, [r3, #0]
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	1ad3      	subs	r3, r2, r3
 80070f6:	683a      	ldr	r2, [r7, #0]
 80070f8:	4619      	mov	r1, r3
 80070fa:	f7fe ffa3 	bl	8006044 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80070fe:	f7ff f99f 	bl	8006440 <xTaskResumeAll>
 8007102:	4603      	mov	r3, r0
 8007104:	2b00      	cmp	r3, #0
 8007106:	d10a      	bne.n	800711e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8007108:	4b09      	ldr	r3, [pc, #36]	; (8007130 <prvProcessTimerOrBlockTask+0x98>)
 800710a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800710e:	601a      	str	r2, [r3, #0]
 8007110:	f3bf 8f4f 	dsb	sy
 8007114:	f3bf 8f6f 	isb	sy
    }
 8007118:	e001      	b.n	800711e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800711a:	f7ff f991 	bl	8006440 <xTaskResumeAll>
    }
 800711e:	bf00      	nop
 8007120:	3710      	adds	r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	200003d0 	.word	0x200003d0
 800712c:	200003d4 	.word	0x200003d4
 8007130:	e000ed04 	.word	0xe000ed04

08007134 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8007134:	b480      	push	{r7}
 8007136:	b085      	sub	sp, #20
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800713c:	4b0e      	ldr	r3, [pc, #56]	; (8007178 <prvGetNextExpireTime+0x44>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d101      	bne.n	800714a <prvGetNextExpireTime+0x16>
 8007146:	2201      	movs	r2, #1
 8007148:	e000      	b.n	800714c <prvGetNextExpireTime+0x18>
 800714a:	2200      	movs	r2, #0
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d105      	bne.n	8007164 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007158:	4b07      	ldr	r3, [pc, #28]	; (8007178 <prvGetNextExpireTime+0x44>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	60fb      	str	r3, [r7, #12]
 8007162:	e001      	b.n	8007168 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8007164:	2300      	movs	r3, #0
 8007166:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8007168:	68fb      	ldr	r3, [r7, #12]
    }
 800716a:	4618      	mov	r0, r3
 800716c:	3714      	adds	r7, #20
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	200003cc 	.word	0x200003cc

0800717c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8007184:	f7ff fa58 	bl	8006638 <xTaskGetTickCount>
 8007188:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800718a:	4b0b      	ldr	r3, [pc, #44]	; (80071b8 <prvSampleTimeNow+0x3c>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	68fa      	ldr	r2, [r7, #12]
 8007190:	429a      	cmp	r2, r3
 8007192:	d205      	bcs.n	80071a0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8007194:	f000 f912 	bl	80073bc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	601a      	str	r2, [r3, #0]
 800719e:	e002      	b.n	80071a6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80071a6:	4a04      	ldr	r2, [pc, #16]	; (80071b8 <prvSampleTimeNow+0x3c>)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80071ac:	68fb      	ldr	r3, [r7, #12]
    }
 80071ae:	4618      	mov	r0, r3
 80071b0:	3710      	adds	r7, #16
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	200003dc 	.word	0x200003dc

080071bc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80071bc:	b580      	push	{r7, lr}
 80071be:	b086      	sub	sp, #24
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	607a      	str	r2, [r7, #4]
 80071c8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80071ca:	2300      	movs	r3, #0
 80071cc:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	68ba      	ldr	r2, [r7, #8]
 80071d2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	68fa      	ldr	r2, [r7, #12]
 80071d8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80071da:	68ba      	ldr	r2, [r7, #8]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	429a      	cmp	r2, r3
 80071e0:	d812      	bhi.n	8007208 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	1ad2      	subs	r2, r2, r3
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	699b      	ldr	r3, [r3, #24]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d302      	bcc.n	80071f6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80071f0:	2301      	movs	r3, #1
 80071f2:	617b      	str	r3, [r7, #20]
 80071f4:	e01b      	b.n	800722e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80071f6:	4b10      	ldr	r3, [pc, #64]	; (8007238 <prvInsertTimerInActiveList+0x7c>)
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	3304      	adds	r3, #4
 80071fe:	4619      	mov	r1, r3
 8007200:	4610      	mov	r0, r2
 8007202:	f7fe fbfe 	bl	8005a02 <vListInsert>
 8007206:	e012      	b.n	800722e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	429a      	cmp	r2, r3
 800720e:	d206      	bcs.n	800721e <prvInsertTimerInActiveList+0x62>
 8007210:	68ba      	ldr	r2, [r7, #8]
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	429a      	cmp	r2, r3
 8007216:	d302      	bcc.n	800721e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8007218:	2301      	movs	r3, #1
 800721a:	617b      	str	r3, [r7, #20]
 800721c:	e007      	b.n	800722e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800721e:	4b07      	ldr	r3, [pc, #28]	; (800723c <prvInsertTimerInActiveList+0x80>)
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	3304      	adds	r3, #4
 8007226:	4619      	mov	r1, r3
 8007228:	4610      	mov	r0, r2
 800722a:	f7fe fbea 	bl	8005a02 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800722e:	697b      	ldr	r3, [r7, #20]
    }
 8007230:	4618      	mov	r0, r3
 8007232:	3718      	adds	r7, #24
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}
 8007238:	200003d0 	.word	0x200003d0
 800723c:	200003cc 	.word	0x200003cc

08007240 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8007240:	b580      	push	{r7, lr}
 8007242:	b088      	sub	sp, #32
 8007244:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007246:	e0a6      	b.n	8007396 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	2b00      	cmp	r3, #0
 800724c:	f2c0 80a2 	blt.w	8007394 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	695b      	ldr	r3, [r3, #20]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d004      	beq.n	8007266 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800725c:	69fb      	ldr	r3, [r7, #28]
 800725e:	3304      	adds	r3, #4
 8007260:	4618      	mov	r0, r3
 8007262:	f7fe fc07 	bl	8005a74 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007266:	1d3b      	adds	r3, r7, #4
 8007268:	4618      	mov	r0, r3
 800726a:	f7ff ff87 	bl	800717c <prvSampleTimeNow>
 800726e:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	3b01      	subs	r3, #1
 8007274:	2b08      	cmp	r3, #8
 8007276:	f200 808e 	bhi.w	8007396 <prvProcessReceivedCommands+0x156>
 800727a:	a201      	add	r2, pc, #4	; (adr r2, 8007280 <prvProcessReceivedCommands+0x40>)
 800727c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007280:	080072a5 	.word	0x080072a5
 8007284:	080072a5 	.word	0x080072a5
 8007288:	0800730d 	.word	0x0800730d
 800728c:	08007321 	.word	0x08007321
 8007290:	0800736b 	.word	0x0800736b
 8007294:	080072a5 	.word	0x080072a5
 8007298:	080072a5 	.word	0x080072a5
 800729c:	0800730d 	.word	0x0800730d
 80072a0:	08007321 	.word	0x08007321
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072aa:	f043 0301 	orr.w	r3, r3, #1
 80072ae:	b2da      	uxtb	r2, r3
 80072b0:	69fb      	ldr	r3, [r7, #28]
 80072b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80072b6:	68fa      	ldr	r2, [r7, #12]
 80072b8:	69fb      	ldr	r3, [r7, #28]
 80072ba:	699b      	ldr	r3, [r3, #24]
 80072bc:	18d1      	adds	r1, r2, r3
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	69ba      	ldr	r2, [r7, #24]
 80072c2:	69f8      	ldr	r0, [r7, #28]
 80072c4:	f7ff ff7a 	bl	80071bc <prvInsertTimerInActiveList>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d063      	beq.n	8007396 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072d4:	f003 0304 	and.w	r3, r3, #4
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d009      	beq.n	80072f0 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80072dc:	68fa      	ldr	r2, [r7, #12]
 80072de:	69fb      	ldr	r3, [r7, #28]
 80072e0:	699b      	ldr	r3, [r3, #24]
 80072e2:	4413      	add	r3, r2
 80072e4:	69ba      	ldr	r2, [r7, #24]
 80072e6:	4619      	mov	r1, r3
 80072e8:	69f8      	ldr	r0, [r7, #28]
 80072ea:	f7ff fe71 	bl	8006fd0 <prvReloadTimer>
 80072ee:	e008      	b.n	8007302 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072f6:	f023 0301 	bic.w	r3, r3, #1
 80072fa:	b2da      	uxtb	r2, r3
 80072fc:	69fb      	ldr	r3, [r7, #28]
 80072fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007302:	69fb      	ldr	r3, [r7, #28]
 8007304:	6a1b      	ldr	r3, [r3, #32]
 8007306:	69f8      	ldr	r0, [r7, #28]
 8007308:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800730a:	e044      	b.n	8007396 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007312:	f023 0301 	bic.w	r3, r3, #1
 8007316:	b2da      	uxtb	r2, r3
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800731e:	e03a      	b.n	8007396 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007326:	f043 0301 	orr.w	r3, r3, #1
 800732a:	b2da      	uxtb	r2, r3
 800732c:	69fb      	ldr	r3, [r7, #28]
 800732e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007332:	68fa      	ldr	r2, [r7, #12]
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007338:	69fb      	ldr	r3, [r7, #28]
 800733a:	699b      	ldr	r3, [r3, #24]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d10a      	bne.n	8007356 <prvProcessReceivedCommands+0x116>
        __asm volatile
 8007340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007344:	f383 8811 	msr	BASEPRI, r3
 8007348:	f3bf 8f6f 	isb	sy
 800734c:	f3bf 8f4f 	dsb	sy
 8007350:	617b      	str	r3, [r7, #20]
    }
 8007352:	bf00      	nop
 8007354:	e7fe      	b.n	8007354 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	699a      	ldr	r2, [r3, #24]
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	18d1      	adds	r1, r2, r3
 800735e:	69bb      	ldr	r3, [r7, #24]
 8007360:	69ba      	ldr	r2, [r7, #24]
 8007362:	69f8      	ldr	r0, [r7, #28]
 8007364:	f7ff ff2a 	bl	80071bc <prvInsertTimerInActiveList>
                        break;
 8007368:	e015      	b.n	8007396 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007370:	f003 0302 	and.w	r3, r3, #2
 8007374:	2b00      	cmp	r3, #0
 8007376:	d103      	bne.n	8007380 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8007378:	69f8      	ldr	r0, [r7, #28]
 800737a:	f000 fb49 	bl	8007a10 <vPortFree>
 800737e:	e00a      	b.n	8007396 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007386:	f023 0301 	bic.w	r3, r3, #1
 800738a:	b2da      	uxtb	r2, r3
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8007392:	e000      	b.n	8007396 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8007394:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007396:	4b08      	ldr	r3, [pc, #32]	; (80073b8 <prvProcessReceivedCommands+0x178>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f107 0108 	add.w	r1, r7, #8
 800739e:	2200      	movs	r2, #0
 80073a0:	4618      	mov	r0, r3
 80073a2:	f7fe fc93 	bl	8005ccc <xQueueReceive>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	f47f af4d 	bne.w	8007248 <prvProcessReceivedCommands+0x8>
        }
    }
 80073ae:	bf00      	nop
 80073b0:	bf00      	nop
 80073b2:	3720      	adds	r7, #32
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	200003d4 	.word	0x200003d4

080073bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80073c2:	e009      	b.n	80073d8 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80073c4:	4b0e      	ldr	r3, [pc, #56]	; (8007400 <prvSwitchTimerLists+0x44>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80073ce:	f04f 31ff 	mov.w	r1, #4294967295
 80073d2:	6838      	ldr	r0, [r7, #0]
 80073d4:	f7ff fe1e 	bl	8007014 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80073d8:	4b09      	ldr	r3, [pc, #36]	; (8007400 <prvSwitchTimerLists+0x44>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d1f0      	bne.n	80073c4 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80073e2:	4b07      	ldr	r3, [pc, #28]	; (8007400 <prvSwitchTimerLists+0x44>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80073e8:	4b06      	ldr	r3, [pc, #24]	; (8007404 <prvSwitchTimerLists+0x48>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a04      	ldr	r2, [pc, #16]	; (8007400 <prvSwitchTimerLists+0x44>)
 80073ee:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80073f0:	4a04      	ldr	r2, [pc, #16]	; (8007404 <prvSwitchTimerLists+0x48>)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6013      	str	r3, [r2, #0]
    }
 80073f6:	bf00      	nop
 80073f8:	3708      	adds	r7, #8
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop
 8007400:	200003cc 	.word	0x200003cc
 8007404:	200003d0 	.word	0x200003d0

08007408 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8007408:	b580      	push	{r7, lr}
 800740a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800740c:	f000 f964 	bl	80076d8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8007410:	4b12      	ldr	r3, [pc, #72]	; (800745c <prvCheckForValidListAndQueue+0x54>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d11d      	bne.n	8007454 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8007418:	4811      	ldr	r0, [pc, #68]	; (8007460 <prvCheckForValidListAndQueue+0x58>)
 800741a:	f7fe fac5 	bl	80059a8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800741e:	4811      	ldr	r0, [pc, #68]	; (8007464 <prvCheckForValidListAndQueue+0x5c>)
 8007420:	f7fe fac2 	bl	80059a8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8007424:	4b10      	ldr	r3, [pc, #64]	; (8007468 <prvCheckForValidListAndQueue+0x60>)
 8007426:	4a0e      	ldr	r2, [pc, #56]	; (8007460 <prvCheckForValidListAndQueue+0x58>)
 8007428:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800742a:	4b10      	ldr	r3, [pc, #64]	; (800746c <prvCheckForValidListAndQueue+0x64>)
 800742c:	4a0d      	ldr	r2, [pc, #52]	; (8007464 <prvCheckForValidListAndQueue+0x5c>)
 800742e:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8007430:	2200      	movs	r2, #0
 8007432:	210c      	movs	r1, #12
 8007434:	200a      	movs	r0, #10
 8007436:	f7fe fbd7 	bl	8005be8 <xQueueGenericCreate>
 800743a:	4603      	mov	r3, r0
 800743c:	4a07      	ldr	r2, [pc, #28]	; (800745c <prvCheckForValidListAndQueue+0x54>)
 800743e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8007440:	4b06      	ldr	r3, [pc, #24]	; (800745c <prvCheckForValidListAndQueue+0x54>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d005      	beq.n	8007454 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007448:	4b04      	ldr	r3, [pc, #16]	; (800745c <prvCheckForValidListAndQueue+0x54>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4908      	ldr	r1, [pc, #32]	; (8007470 <prvCheckForValidListAndQueue+0x68>)
 800744e:	4618      	mov	r0, r3
 8007450:	f7fe fdaa 	bl	8005fa8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007454:	f000 f970 	bl	8007738 <vPortExitCritical>
    }
 8007458:	bf00      	nop
 800745a:	bd80      	pop	{r7, pc}
 800745c:	200003d4 	.word	0x200003d4
 8007460:	200003a4 	.word	0x200003a4
 8007464:	200003b8 	.word	0x200003b8
 8007468:	200003cc 	.word	0x200003cc
 800746c:	200003d0 	.word	0x200003d0
 8007470:	0800a5c4 	.word	0x0800a5c4

08007474 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8007474:	b480      	push	{r7}
 8007476:	b085      	sub	sp, #20
 8007478:	af00      	add	r7, sp, #0
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	3b04      	subs	r3, #4
 8007484:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800748c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	3b04      	subs	r3, #4
 8007492:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	f023 0201 	bic.w	r2, r3, #1
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	3b04      	subs	r3, #4
 80074a2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80074a4:	4a0c      	ldr	r2, [pc, #48]	; (80074d8 <pxPortInitialiseStack+0x64>)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	3b14      	subs	r3, #20
 80074ae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	3b04      	subs	r3, #4
 80074ba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f06f 0202 	mvn.w	r2, #2
 80074c2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	3b20      	subs	r3, #32
 80074c8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80074ca:	68fb      	ldr	r3, [r7, #12]
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3714      	adds	r7, #20
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr
 80074d8:	080074dd 	.word	0x080074dd

080074dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80074dc:	b480      	push	{r7}
 80074de:	b085      	sub	sp, #20
 80074e0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80074e2:	2300      	movs	r3, #0
 80074e4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80074e6:	4b12      	ldr	r3, [pc, #72]	; (8007530 <prvTaskExitError+0x54>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ee:	d00a      	beq.n	8007506 <prvTaskExitError+0x2a>
        __asm volatile
 80074f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f4:	f383 8811 	msr	BASEPRI, r3
 80074f8:	f3bf 8f6f 	isb	sy
 80074fc:	f3bf 8f4f 	dsb	sy
 8007500:	60fb      	str	r3, [r7, #12]
    }
 8007502:	bf00      	nop
 8007504:	e7fe      	b.n	8007504 <prvTaskExitError+0x28>
        __asm volatile
 8007506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800750a:	f383 8811 	msr	BASEPRI, r3
 800750e:	f3bf 8f6f 	isb	sy
 8007512:	f3bf 8f4f 	dsb	sy
 8007516:	60bb      	str	r3, [r7, #8]
    }
 8007518:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800751a:	bf00      	nop
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d0fc      	beq.n	800751c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8007522:	bf00      	nop
 8007524:	bf00      	nop
 8007526:	3714      	adds	r7, #20
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr
 8007530:	20000010 	.word	0x20000010
	...

08007540 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007540:	4b07      	ldr	r3, [pc, #28]	; (8007560 <pxCurrentTCBConst2>)
 8007542:	6819      	ldr	r1, [r3, #0]
 8007544:	6808      	ldr	r0, [r1, #0]
 8007546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800754a:	f380 8809 	msr	PSP, r0
 800754e:	f3bf 8f6f 	isb	sy
 8007552:	f04f 0000 	mov.w	r0, #0
 8007556:	f380 8811 	msr	BASEPRI, r0
 800755a:	4770      	bx	lr
 800755c:	f3af 8000 	nop.w

08007560 <pxCurrentTCBConst2>:
 8007560:	200002a0 	.word	0x200002a0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8007564:	bf00      	nop
 8007566:	bf00      	nop

08007568 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8007568:	4808      	ldr	r0, [pc, #32]	; (800758c <prvPortStartFirstTask+0x24>)
 800756a:	6800      	ldr	r0, [r0, #0]
 800756c:	6800      	ldr	r0, [r0, #0]
 800756e:	f380 8808 	msr	MSP, r0
 8007572:	f04f 0000 	mov.w	r0, #0
 8007576:	f380 8814 	msr	CONTROL, r0
 800757a:	b662      	cpsie	i
 800757c:	b661      	cpsie	f
 800757e:	f3bf 8f4f 	dsb	sy
 8007582:	f3bf 8f6f 	isb	sy
 8007586:	df00      	svc	0
 8007588:	bf00      	nop
 800758a:	0000      	.short	0x0000
 800758c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8007590:	bf00      	nop
 8007592:	bf00      	nop

08007594 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b086      	sub	sp, #24
 8007598:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800759a:	4b46      	ldr	r3, [pc, #280]	; (80076b4 <xPortStartScheduler+0x120>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a46      	ldr	r2, [pc, #280]	; (80076b8 <xPortStartScheduler+0x124>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d10a      	bne.n	80075ba <xPortStartScheduler+0x26>
        __asm volatile
 80075a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a8:	f383 8811 	msr	BASEPRI, r3
 80075ac:	f3bf 8f6f 	isb	sy
 80075b0:	f3bf 8f4f 	dsb	sy
 80075b4:	613b      	str	r3, [r7, #16]
    }
 80075b6:	bf00      	nop
 80075b8:	e7fe      	b.n	80075b8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80075ba:	4b3e      	ldr	r3, [pc, #248]	; (80076b4 <xPortStartScheduler+0x120>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a3f      	ldr	r2, [pc, #252]	; (80076bc <xPortStartScheduler+0x128>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d10a      	bne.n	80075da <xPortStartScheduler+0x46>
        __asm volatile
 80075c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c8:	f383 8811 	msr	BASEPRI, r3
 80075cc:	f3bf 8f6f 	isb	sy
 80075d0:	f3bf 8f4f 	dsb	sy
 80075d4:	60fb      	str	r3, [r7, #12]
    }
 80075d6:	bf00      	nop
 80075d8:	e7fe      	b.n	80075d8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80075da:	4b39      	ldr	r3, [pc, #228]	; (80076c0 <xPortStartScheduler+0x12c>)
 80075dc:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	22ff      	movs	r2, #255	; 0xff
 80075ea:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80075f4:	78fb      	ldrb	r3, [r7, #3]
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80075fc:	b2da      	uxtb	r2, r3
 80075fe:	4b31      	ldr	r3, [pc, #196]	; (80076c4 <xPortStartScheduler+0x130>)
 8007600:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007602:	4b31      	ldr	r3, [pc, #196]	; (80076c8 <xPortStartScheduler+0x134>)
 8007604:	2207      	movs	r2, #7
 8007606:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007608:	e009      	b.n	800761e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800760a:	4b2f      	ldr	r3, [pc, #188]	; (80076c8 <xPortStartScheduler+0x134>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	3b01      	subs	r3, #1
 8007610:	4a2d      	ldr	r2, [pc, #180]	; (80076c8 <xPortStartScheduler+0x134>)
 8007612:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007614:	78fb      	ldrb	r3, [r7, #3]
 8007616:	b2db      	uxtb	r3, r3
 8007618:	005b      	lsls	r3, r3, #1
 800761a:	b2db      	uxtb	r3, r3
 800761c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800761e:	78fb      	ldrb	r3, [r7, #3]
 8007620:	b2db      	uxtb	r3, r3
 8007622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007626:	2b80      	cmp	r3, #128	; 0x80
 8007628:	d0ef      	beq.n	800760a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800762a:	4b27      	ldr	r3, [pc, #156]	; (80076c8 <xPortStartScheduler+0x134>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f1c3 0307 	rsb	r3, r3, #7
 8007632:	2b04      	cmp	r3, #4
 8007634:	d00a      	beq.n	800764c <xPortStartScheduler+0xb8>
        __asm volatile
 8007636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763a:	f383 8811 	msr	BASEPRI, r3
 800763e:	f3bf 8f6f 	isb	sy
 8007642:	f3bf 8f4f 	dsb	sy
 8007646:	60bb      	str	r3, [r7, #8]
    }
 8007648:	bf00      	nop
 800764a:	e7fe      	b.n	800764a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800764c:	4b1e      	ldr	r3, [pc, #120]	; (80076c8 <xPortStartScheduler+0x134>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	021b      	lsls	r3, r3, #8
 8007652:	4a1d      	ldr	r2, [pc, #116]	; (80076c8 <xPortStartScheduler+0x134>)
 8007654:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007656:	4b1c      	ldr	r3, [pc, #112]	; (80076c8 <xPortStartScheduler+0x134>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800765e:	4a1a      	ldr	r2, [pc, #104]	; (80076c8 <xPortStartScheduler+0x134>)
 8007660:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	b2da      	uxtb	r2, r3
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800766a:	4b18      	ldr	r3, [pc, #96]	; (80076cc <xPortStartScheduler+0x138>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a17      	ldr	r2, [pc, #92]	; (80076cc <xPortStartScheduler+0x138>)
 8007670:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007674:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8007676:	4b15      	ldr	r3, [pc, #84]	; (80076cc <xPortStartScheduler+0x138>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a14      	ldr	r2, [pc, #80]	; (80076cc <xPortStartScheduler+0x138>)
 800767c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007680:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8007682:	f000 f8db 	bl	800783c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8007686:	4b12      	ldr	r3, [pc, #72]	; (80076d0 <xPortStartScheduler+0x13c>)
 8007688:	2200      	movs	r2, #0
 800768a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800768c:	f000 f8fa 	bl	8007884 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007690:	4b10      	ldr	r3, [pc, #64]	; (80076d4 <xPortStartScheduler+0x140>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a0f      	ldr	r2, [pc, #60]	; (80076d4 <xPortStartScheduler+0x140>)
 8007696:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800769a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800769c:	f7ff ff64 	bl	8007568 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80076a0:	f7ff f8f0 	bl	8006884 <vTaskSwitchContext>
    prvTaskExitError();
 80076a4:	f7ff ff1a 	bl	80074dc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3718      	adds	r7, #24
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	bf00      	nop
 80076b4:	e000ed00 	.word	0xe000ed00
 80076b8:	410fc271 	.word	0x410fc271
 80076bc:	410fc270 	.word	0x410fc270
 80076c0:	e000e400 	.word	0xe000e400
 80076c4:	200003e0 	.word	0x200003e0
 80076c8:	200003e4 	.word	0x200003e4
 80076cc:	e000ed20 	.word	0xe000ed20
 80076d0:	20000010 	.word	0x20000010
 80076d4:	e000ef34 	.word	0xe000ef34

080076d8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
        __asm volatile
 80076de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e2:	f383 8811 	msr	BASEPRI, r3
 80076e6:	f3bf 8f6f 	isb	sy
 80076ea:	f3bf 8f4f 	dsb	sy
 80076ee:	607b      	str	r3, [r7, #4]
    }
 80076f0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80076f2:	4b0f      	ldr	r3, [pc, #60]	; (8007730 <vPortEnterCritical+0x58>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	3301      	adds	r3, #1
 80076f8:	4a0d      	ldr	r2, [pc, #52]	; (8007730 <vPortEnterCritical+0x58>)
 80076fa:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80076fc:	4b0c      	ldr	r3, [pc, #48]	; (8007730 <vPortEnterCritical+0x58>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	2b01      	cmp	r3, #1
 8007702:	d10f      	bne.n	8007724 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007704:	4b0b      	ldr	r3, [pc, #44]	; (8007734 <vPortEnterCritical+0x5c>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	b2db      	uxtb	r3, r3
 800770a:	2b00      	cmp	r3, #0
 800770c:	d00a      	beq.n	8007724 <vPortEnterCritical+0x4c>
        __asm volatile
 800770e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007712:	f383 8811 	msr	BASEPRI, r3
 8007716:	f3bf 8f6f 	isb	sy
 800771a:	f3bf 8f4f 	dsb	sy
 800771e:	603b      	str	r3, [r7, #0]
    }
 8007720:	bf00      	nop
 8007722:	e7fe      	b.n	8007722 <vPortEnterCritical+0x4a>
    }
}
 8007724:	bf00      	nop
 8007726:	370c      	adds	r7, #12
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr
 8007730:	20000010 	.word	0x20000010
 8007734:	e000ed04 	.word	0xe000ed04

08007738 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007738:	b480      	push	{r7}
 800773a:	b083      	sub	sp, #12
 800773c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800773e:	4b12      	ldr	r3, [pc, #72]	; (8007788 <vPortExitCritical+0x50>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d10a      	bne.n	800775c <vPortExitCritical+0x24>
        __asm volatile
 8007746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800774a:	f383 8811 	msr	BASEPRI, r3
 800774e:	f3bf 8f6f 	isb	sy
 8007752:	f3bf 8f4f 	dsb	sy
 8007756:	607b      	str	r3, [r7, #4]
    }
 8007758:	bf00      	nop
 800775a:	e7fe      	b.n	800775a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800775c:	4b0a      	ldr	r3, [pc, #40]	; (8007788 <vPortExitCritical+0x50>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	3b01      	subs	r3, #1
 8007762:	4a09      	ldr	r2, [pc, #36]	; (8007788 <vPortExitCritical+0x50>)
 8007764:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8007766:	4b08      	ldr	r3, [pc, #32]	; (8007788 <vPortExitCritical+0x50>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d105      	bne.n	800777a <vPortExitCritical+0x42>
 800776e:	2300      	movs	r3, #0
 8007770:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8007778:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800777a:	bf00      	nop
 800777c:	370c      	adds	r7, #12
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr
 8007786:	bf00      	nop
 8007788:	20000010 	.word	0x20000010
 800778c:	00000000 	.word	0x00000000

08007790 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8007790:	f3ef 8009 	mrs	r0, PSP
 8007794:	f3bf 8f6f 	isb	sy
 8007798:	4b15      	ldr	r3, [pc, #84]	; (80077f0 <pxCurrentTCBConst>)
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	f01e 0f10 	tst.w	lr, #16
 80077a0:	bf08      	it	eq
 80077a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80077a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077aa:	6010      	str	r0, [r2, #0]
 80077ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80077b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80077b4:	f380 8811 	msr	BASEPRI, r0
 80077b8:	f3bf 8f4f 	dsb	sy
 80077bc:	f3bf 8f6f 	isb	sy
 80077c0:	f7ff f860 	bl	8006884 <vTaskSwitchContext>
 80077c4:	f04f 0000 	mov.w	r0, #0
 80077c8:	f380 8811 	msr	BASEPRI, r0
 80077cc:	bc09      	pop	{r0, r3}
 80077ce:	6819      	ldr	r1, [r3, #0]
 80077d0:	6808      	ldr	r0, [r1, #0]
 80077d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077d6:	f01e 0f10 	tst.w	lr, #16
 80077da:	bf08      	it	eq
 80077dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80077e0:	f380 8809 	msr	PSP, r0
 80077e4:	f3bf 8f6f 	isb	sy
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop
 80077ec:	f3af 8000 	nop.w

080077f0 <pxCurrentTCBConst>:
 80077f0:	200002a0 	.word	0x200002a0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80077f4:	bf00      	nop
 80077f6:	bf00      	nop

080077f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
        __asm volatile
 80077fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007802:	f383 8811 	msr	BASEPRI, r3
 8007806:	f3bf 8f6f 	isb	sy
 800780a:	f3bf 8f4f 	dsb	sy
 800780e:	607b      	str	r3, [r7, #4]
    }
 8007810:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007812:	f7fe ff21 	bl	8006658 <xTaskIncrementTick>
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d003      	beq.n	8007824 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800781c:	4b06      	ldr	r3, [pc, #24]	; (8007838 <SysTick_Handler+0x40>)
 800781e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007822:	601a      	str	r2, [r3, #0]
 8007824:	2300      	movs	r3, #0
 8007826:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	f383 8811 	msr	BASEPRI, r3
    }
 800782e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8007830:	bf00      	nop
 8007832:	3708      	adds	r7, #8
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}
 8007838:	e000ed04 	.word	0xe000ed04

0800783c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800783c:	b480      	push	{r7}
 800783e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007840:	4b0b      	ldr	r3, [pc, #44]	; (8007870 <vPortSetupTimerInterrupt+0x34>)
 8007842:	2200      	movs	r2, #0
 8007844:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007846:	4b0b      	ldr	r3, [pc, #44]	; (8007874 <vPortSetupTimerInterrupt+0x38>)
 8007848:	2200      	movs	r2, #0
 800784a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800784c:	4b0a      	ldr	r3, [pc, #40]	; (8007878 <vPortSetupTimerInterrupt+0x3c>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a0a      	ldr	r2, [pc, #40]	; (800787c <vPortSetupTimerInterrupt+0x40>)
 8007852:	fba2 2303 	umull	r2, r3, r2, r3
 8007856:	099b      	lsrs	r3, r3, #6
 8007858:	4a09      	ldr	r2, [pc, #36]	; (8007880 <vPortSetupTimerInterrupt+0x44>)
 800785a:	3b01      	subs	r3, #1
 800785c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800785e:	4b04      	ldr	r3, [pc, #16]	; (8007870 <vPortSetupTimerInterrupt+0x34>)
 8007860:	2207      	movs	r2, #7
 8007862:	601a      	str	r2, [r3, #0]
}
 8007864:	bf00      	nop
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr
 800786e:	bf00      	nop
 8007870:	e000e010 	.word	0xe000e010
 8007874:	e000e018 	.word	0xe000e018
 8007878:	20000000 	.word	0x20000000
 800787c:	10624dd3 	.word	0x10624dd3
 8007880:	e000e014 	.word	0xe000e014

08007884 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8007884:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007894 <vPortEnableVFP+0x10>
 8007888:	6801      	ldr	r1, [r0, #0]
 800788a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800788e:	6001      	str	r1, [r0, #0]
 8007890:	4770      	bx	lr
 8007892:	0000      	.short	0x0000
 8007894:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8007898:	bf00      	nop
 800789a:	bf00      	nop

0800789c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b08a      	sub	sp, #40	; 0x28
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80078a4:	2300      	movs	r3, #0
 80078a6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80078a8:	f7fe fdbc 	bl	8006424 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80078ac:	4b53      	ldr	r3, [pc, #332]	; (80079fc <pvPortMalloc+0x160>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d101      	bne.n	80078b8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80078b4:	f000 f908 	bl	8007ac8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d012      	beq.n	80078e4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80078be:	2208      	movs	r2, #8
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f003 0307 	and.w	r3, r3, #7
 80078c6:	1ad3      	subs	r3, r2, r3
 80078c8:	3308      	adds	r3, #8
 80078ca:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	43db      	mvns	r3, r3
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d804      	bhi.n	80078e0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	4413      	add	r3, r2
 80078dc:	607b      	str	r3, [r7, #4]
 80078de:	e001      	b.n	80078e4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80078e0:	2300      	movs	r3, #0
 80078e2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	db70      	blt.n	80079cc <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d06d      	beq.n	80079cc <pvPortMalloc+0x130>
 80078f0:	4b43      	ldr	r3, [pc, #268]	; (8007a00 <pvPortMalloc+0x164>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d868      	bhi.n	80079cc <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80078fa:	4b42      	ldr	r3, [pc, #264]	; (8007a04 <pvPortMalloc+0x168>)
 80078fc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80078fe:	4b41      	ldr	r3, [pc, #260]	; (8007a04 <pvPortMalloc+0x168>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007904:	e004      	b.n	8007910 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8007906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007908:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800790a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	429a      	cmp	r2, r3
 8007918:	d903      	bls.n	8007922 <pvPortMalloc+0x86>
 800791a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d1f1      	bne.n	8007906 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8007922:	4b36      	ldr	r3, [pc, #216]	; (80079fc <pvPortMalloc+0x160>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007928:	429a      	cmp	r2, r3
 800792a:	d04f      	beq.n	80079cc <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800792c:	6a3b      	ldr	r3, [r7, #32]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2208      	movs	r2, #8
 8007932:	4413      	add	r3, r2
 8007934:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	6a3b      	ldr	r3, [r7, #32]
 800793c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800793e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007940:	685a      	ldr	r2, [r3, #4]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	1ad2      	subs	r2, r2, r3
 8007946:	2308      	movs	r3, #8
 8007948:	005b      	lsls	r3, r3, #1
 800794a:	429a      	cmp	r2, r3
 800794c:	d91f      	bls.n	800798e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800794e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4413      	add	r3, r2
 8007954:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	f003 0307 	and.w	r3, r3, #7
 800795c:	2b00      	cmp	r3, #0
 800795e:	d00a      	beq.n	8007976 <pvPortMalloc+0xda>
        __asm volatile
 8007960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007964:	f383 8811 	msr	BASEPRI, r3
 8007968:	f3bf 8f6f 	isb	sy
 800796c:	f3bf 8f4f 	dsb	sy
 8007970:	613b      	str	r3, [r7, #16]
    }
 8007972:	bf00      	nop
 8007974:	e7fe      	b.n	8007974 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007978:	685a      	ldr	r2, [r3, #4]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	1ad2      	subs	r2, r2, r3
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007984:	687a      	ldr	r2, [r7, #4]
 8007986:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007988:	6978      	ldr	r0, [r7, #20]
 800798a:	f000 f8f9 	bl	8007b80 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800798e:	4b1c      	ldr	r3, [pc, #112]	; (8007a00 <pvPortMalloc+0x164>)
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	1ad3      	subs	r3, r2, r3
 8007998:	4a19      	ldr	r2, [pc, #100]	; (8007a00 <pvPortMalloc+0x164>)
 800799a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800799c:	4b18      	ldr	r3, [pc, #96]	; (8007a00 <pvPortMalloc+0x164>)
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	4b19      	ldr	r3, [pc, #100]	; (8007a08 <pvPortMalloc+0x16c>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d203      	bcs.n	80079b0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80079a8:	4b15      	ldr	r3, [pc, #84]	; (8007a00 <pvPortMalloc+0x164>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a16      	ldr	r2, [pc, #88]	; (8007a08 <pvPortMalloc+0x16c>)
 80079ae:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80079b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80079b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ba:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80079bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079be:	2200      	movs	r2, #0
 80079c0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80079c2:	4b12      	ldr	r3, [pc, #72]	; (8007a0c <pvPortMalloc+0x170>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	3301      	adds	r3, #1
 80079c8:	4a10      	ldr	r2, [pc, #64]	; (8007a0c <pvPortMalloc+0x170>)
 80079ca:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80079cc:	f7fe fd38 	bl	8006440 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80079d0:	69fb      	ldr	r3, [r7, #28]
 80079d2:	f003 0307 	and.w	r3, r3, #7
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d00a      	beq.n	80079f0 <pvPortMalloc+0x154>
        __asm volatile
 80079da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079de:	f383 8811 	msr	BASEPRI, r3
 80079e2:	f3bf 8f6f 	isb	sy
 80079e6:	f3bf 8f4f 	dsb	sy
 80079ea:	60fb      	str	r3, [r7, #12]
    }
 80079ec:	bf00      	nop
 80079ee:	e7fe      	b.n	80079ee <pvPortMalloc+0x152>
    return pvReturn;
 80079f0:	69fb      	ldr	r3, [r7, #28]
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3728      	adds	r7, #40	; 0x28
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	bf00      	nop
 80079fc:	20012ff0 	.word	0x20012ff0
 8007a00:	20012ff4 	.word	0x20012ff4
 8007a04:	20012fe8 	.word	0x20012fe8
 8007a08:	20012ff8 	.word	0x20012ff8
 8007a0c:	20012ffc 	.word	0x20012ffc

08007a10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b086      	sub	sp, #24
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d049      	beq.n	8007ab6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8007a22:	2308      	movs	r3, #8
 8007a24:	425b      	negs	r3, r3
 8007a26:	697a      	ldr	r2, [r7, #20]
 8007a28:	4413      	add	r3, r2
 8007a2a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	db0a      	blt.n	8007a4e <vPortFree+0x3e>
        __asm volatile
 8007a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a3c:	f383 8811 	msr	BASEPRI, r3
 8007a40:	f3bf 8f6f 	isb	sy
 8007a44:	f3bf 8f4f 	dsb	sy
 8007a48:	60fb      	str	r3, [r7, #12]
    }
 8007a4a:	bf00      	nop
 8007a4c:	e7fe      	b.n	8007a4c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d00a      	beq.n	8007a6c <vPortFree+0x5c>
        __asm volatile
 8007a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a5a:	f383 8811 	msr	BASEPRI, r3
 8007a5e:	f3bf 8f6f 	isb	sy
 8007a62:	f3bf 8f4f 	dsb	sy
 8007a66:	60bb      	str	r3, [r7, #8]
    }
 8007a68:	bf00      	nop
 8007a6a:	e7fe      	b.n	8007a6a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	0fdb      	lsrs	r3, r3, #31
 8007a72:	f003 0301 	and.w	r3, r3, #1
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d01c      	beq.n	8007ab6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d118      	bne.n	8007ab6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8007a90:	f7fe fcc8 	bl	8006424 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	685a      	ldr	r2, [r3, #4]
 8007a98:	4b09      	ldr	r3, [pc, #36]	; (8007ac0 <vPortFree+0xb0>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4413      	add	r3, r2
 8007a9e:	4a08      	ldr	r2, [pc, #32]	; (8007ac0 <vPortFree+0xb0>)
 8007aa0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007aa2:	6938      	ldr	r0, [r7, #16]
 8007aa4:	f000 f86c 	bl	8007b80 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8007aa8:	4b06      	ldr	r3, [pc, #24]	; (8007ac4 <vPortFree+0xb4>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	3301      	adds	r3, #1
 8007aae:	4a05      	ldr	r2, [pc, #20]	; (8007ac4 <vPortFree+0xb4>)
 8007ab0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8007ab2:	f7fe fcc5 	bl	8006440 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8007ab6:	bf00      	nop
 8007ab8:	3718      	adds	r7, #24
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	20012ff4 	.word	0x20012ff4
 8007ac4:	20013000 	.word	0x20013000

08007ac8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b085      	sub	sp, #20
 8007acc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007ace:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8007ad2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8007ad4:	4b25      	ldr	r3, [pc, #148]	; (8007b6c <prvHeapInit+0xa4>)
 8007ad6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f003 0307 	and.w	r3, r3, #7
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00c      	beq.n	8007afc <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	3307      	adds	r3, #7
 8007ae6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f023 0307 	bic.w	r3, r3, #7
 8007aee:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8007af0:	68ba      	ldr	r2, [r7, #8]
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	1ad3      	subs	r3, r2, r3
 8007af6:	4a1d      	ldr	r2, [pc, #116]	; (8007b6c <prvHeapInit+0xa4>)
 8007af8:	4413      	add	r3, r2
 8007afa:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b00:	4a1b      	ldr	r2, [pc, #108]	; (8007b70 <prvHeapInit+0xa8>)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8007b06:	4b1a      	ldr	r3, [pc, #104]	; (8007b70 <prvHeapInit+0xa8>)
 8007b08:	2200      	movs	r2, #0
 8007b0a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	68ba      	ldr	r2, [r7, #8]
 8007b10:	4413      	add	r3, r2
 8007b12:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8007b14:	2208      	movs	r2, #8
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	1a9b      	subs	r3, r3, r2
 8007b1a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f023 0307 	bic.w	r3, r3, #7
 8007b22:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	4a13      	ldr	r2, [pc, #76]	; (8007b74 <prvHeapInit+0xac>)
 8007b28:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8007b2a:	4b12      	ldr	r3, [pc, #72]	; (8007b74 <prvHeapInit+0xac>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8007b32:	4b10      	ldr	r3, [pc, #64]	; (8007b74 <prvHeapInit+0xac>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	2200      	movs	r2, #0
 8007b38:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	68fa      	ldr	r2, [r7, #12]
 8007b42:	1ad2      	subs	r2, r2, r3
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b48:	4b0a      	ldr	r3, [pc, #40]	; (8007b74 <prvHeapInit+0xac>)
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	4a08      	ldr	r2, [pc, #32]	; (8007b78 <prvHeapInit+0xb0>)
 8007b56:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	4a07      	ldr	r2, [pc, #28]	; (8007b7c <prvHeapInit+0xb4>)
 8007b5e:	6013      	str	r3, [r2, #0]
}
 8007b60:	bf00      	nop
 8007b62:	3714      	adds	r7, #20
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr
 8007b6c:	200003e8 	.word	0x200003e8
 8007b70:	20012fe8 	.word	0x20012fe8
 8007b74:	20012ff0 	.word	0x20012ff0
 8007b78:	20012ff8 	.word	0x20012ff8
 8007b7c:	20012ff4 	.word	0x20012ff4

08007b80 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8007b80:	b480      	push	{r7}
 8007b82:	b085      	sub	sp, #20
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007b88:	4b28      	ldr	r3, [pc, #160]	; (8007c2c <prvInsertBlockIntoFreeList+0xac>)
 8007b8a:	60fb      	str	r3, [r7, #12]
 8007b8c:	e002      	b.n	8007b94 <prvInsertBlockIntoFreeList+0x14>
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	60fb      	str	r3, [r7, #12]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d8f7      	bhi.n	8007b8e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	68ba      	ldr	r2, [r7, #8]
 8007ba8:	4413      	add	r3, r2
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d108      	bne.n	8007bc2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	685a      	ldr	r2, [r3, #4]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	441a      	add	r2, r3
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	68ba      	ldr	r2, [r7, #8]
 8007bcc:	441a      	add	r2, r3
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d118      	bne.n	8007c08 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	4b15      	ldr	r3, [pc, #84]	; (8007c30 <prvInsertBlockIntoFreeList+0xb0>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d00d      	beq.n	8007bfe <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	685a      	ldr	r2, [r3, #4]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	441a      	add	r2, r3
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	601a      	str	r2, [r3, #0]
 8007bfc:	e008      	b.n	8007c10 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007bfe:	4b0c      	ldr	r3, [pc, #48]	; (8007c30 <prvInsertBlockIntoFreeList+0xb0>)
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	601a      	str	r2, [r3, #0]
 8007c06:	e003      	b.n	8007c10 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007c10:	68fa      	ldr	r2, [r7, #12]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d002      	beq.n	8007c1e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007c1e:	bf00      	nop
 8007c20:	3714      	adds	r7, #20
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr
 8007c2a:	bf00      	nop
 8007c2c:	20012fe8 	.word	0x20012fe8
 8007c30:	20012ff0 	.word	0x20012ff0

08007c34 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007c40:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007c44:	f002 fc2c 	bl	800a4a0 <USBD_static_malloc>
 8007c48:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d109      	bne.n	8007c64 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	32b0      	adds	r2, #176	; 0xb0
 8007c5a:	2100      	movs	r1, #0
 8007c5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007c60:	2302      	movs	r3, #2
 8007c62:	e0d4      	b.n	8007e0e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007c64:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007c68:	2100      	movs	r1, #0
 8007c6a:	68f8      	ldr	r0, [r7, #12]
 8007c6c:	f002 fc8e 	bl	800a58c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	32b0      	adds	r2, #176	; 0xb0
 8007c7a:	68f9      	ldr	r1, [r7, #12]
 8007c7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	32b0      	adds	r2, #176	; 0xb0
 8007c8a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	7c1b      	ldrb	r3, [r3, #16]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d138      	bne.n	8007d0e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007c9c:	4b5e      	ldr	r3, [pc, #376]	; (8007e18 <USBD_CDC_Init+0x1e4>)
 8007c9e:	7819      	ldrb	r1, [r3, #0]
 8007ca0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ca4:	2202      	movs	r2, #2
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f002 fad7 	bl	800a25a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007cac:	4b5a      	ldr	r3, [pc, #360]	; (8007e18 <USBD_CDC_Init+0x1e4>)
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	f003 020f 	and.w	r2, r3, #15
 8007cb4:	6879      	ldr	r1, [r7, #4]
 8007cb6:	4613      	mov	r3, r2
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	4413      	add	r3, r2
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	440b      	add	r3, r1
 8007cc0:	3324      	adds	r3, #36	; 0x24
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007cc6:	4b55      	ldr	r3, [pc, #340]	; (8007e1c <USBD_CDC_Init+0x1e8>)
 8007cc8:	7819      	ldrb	r1, [r3, #0]
 8007cca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007cce:	2202      	movs	r2, #2
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f002 fac2 	bl	800a25a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007cd6:	4b51      	ldr	r3, [pc, #324]	; (8007e1c <USBD_CDC_Init+0x1e8>)
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	f003 020f 	and.w	r2, r3, #15
 8007cde:	6879      	ldr	r1, [r7, #4]
 8007ce0:	4613      	mov	r3, r2
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	4413      	add	r3, r2
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	440b      	add	r3, r1
 8007cea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007cee:	2201      	movs	r2, #1
 8007cf0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007cf2:	4b4b      	ldr	r3, [pc, #300]	; (8007e20 <USBD_CDC_Init+0x1ec>)
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	f003 020f 	and.w	r2, r3, #15
 8007cfa:	6879      	ldr	r1, [r7, #4]
 8007cfc:	4613      	mov	r3, r2
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	4413      	add	r3, r2
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	440b      	add	r3, r1
 8007d06:	3326      	adds	r3, #38	; 0x26
 8007d08:	2210      	movs	r2, #16
 8007d0a:	801a      	strh	r2, [r3, #0]
 8007d0c:	e035      	b.n	8007d7a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007d0e:	4b42      	ldr	r3, [pc, #264]	; (8007e18 <USBD_CDC_Init+0x1e4>)
 8007d10:	7819      	ldrb	r1, [r3, #0]
 8007d12:	2340      	movs	r3, #64	; 0x40
 8007d14:	2202      	movs	r2, #2
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f002 fa9f 	bl	800a25a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007d1c:	4b3e      	ldr	r3, [pc, #248]	; (8007e18 <USBD_CDC_Init+0x1e4>)
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	f003 020f 	and.w	r2, r3, #15
 8007d24:	6879      	ldr	r1, [r7, #4]
 8007d26:	4613      	mov	r3, r2
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	4413      	add	r3, r2
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	440b      	add	r3, r1
 8007d30:	3324      	adds	r3, #36	; 0x24
 8007d32:	2201      	movs	r2, #1
 8007d34:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007d36:	4b39      	ldr	r3, [pc, #228]	; (8007e1c <USBD_CDC_Init+0x1e8>)
 8007d38:	7819      	ldrb	r1, [r3, #0]
 8007d3a:	2340      	movs	r3, #64	; 0x40
 8007d3c:	2202      	movs	r2, #2
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f002 fa8b 	bl	800a25a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007d44:	4b35      	ldr	r3, [pc, #212]	; (8007e1c <USBD_CDC_Init+0x1e8>)
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	f003 020f 	and.w	r2, r3, #15
 8007d4c:	6879      	ldr	r1, [r7, #4]
 8007d4e:	4613      	mov	r3, r2
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	4413      	add	r3, r2
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	440b      	add	r3, r1
 8007d58:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007d60:	4b2f      	ldr	r3, [pc, #188]	; (8007e20 <USBD_CDC_Init+0x1ec>)
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	f003 020f 	and.w	r2, r3, #15
 8007d68:	6879      	ldr	r1, [r7, #4]
 8007d6a:	4613      	mov	r3, r2
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	4413      	add	r3, r2
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	440b      	add	r3, r1
 8007d74:	3326      	adds	r3, #38	; 0x26
 8007d76:	2210      	movs	r2, #16
 8007d78:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007d7a:	4b29      	ldr	r3, [pc, #164]	; (8007e20 <USBD_CDC_Init+0x1ec>)
 8007d7c:	7819      	ldrb	r1, [r3, #0]
 8007d7e:	2308      	movs	r3, #8
 8007d80:	2203      	movs	r2, #3
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f002 fa69 	bl	800a25a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007d88:	4b25      	ldr	r3, [pc, #148]	; (8007e20 <USBD_CDC_Init+0x1ec>)
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	f003 020f 	and.w	r2, r3, #15
 8007d90:	6879      	ldr	r1, [r7, #4]
 8007d92:	4613      	mov	r3, r2
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	4413      	add	r3, r2
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	440b      	add	r3, r1
 8007d9c:	3324      	adds	r3, #36	; 0x24
 8007d9e:	2201      	movs	r2, #1
 8007da0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2200      	movs	r2, #0
 8007da6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	33b0      	adds	r3, #176	; 0xb0
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	4413      	add	r3, r2
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d101      	bne.n	8007ddc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007dd8:	2302      	movs	r3, #2
 8007dda:	e018      	b.n	8007e0e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	7c1b      	ldrb	r3, [r3, #16]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d10a      	bne.n	8007dfa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007de4:	4b0d      	ldr	r3, [pc, #52]	; (8007e1c <USBD_CDC_Init+0x1e8>)
 8007de6:	7819      	ldrb	r1, [r3, #0]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007dee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f002 fb20 	bl	800a438 <USBD_LL_PrepareReceive>
 8007df8:	e008      	b.n	8007e0c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007dfa:	4b08      	ldr	r3, [pc, #32]	; (8007e1c <USBD_CDC_Init+0x1e8>)
 8007dfc:	7819      	ldrb	r1, [r3, #0]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e04:	2340      	movs	r3, #64	; 0x40
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f002 fb16 	bl	800a438 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3710      	adds	r7, #16
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	2000009b 	.word	0x2000009b
 8007e1c:	2000009c 	.word	0x2000009c
 8007e20:	2000009d 	.word	0x2000009d

08007e24 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007e30:	4b3a      	ldr	r3, [pc, #232]	; (8007f1c <USBD_CDC_DeInit+0xf8>)
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	4619      	mov	r1, r3
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f002 fa35 	bl	800a2a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007e3c:	4b37      	ldr	r3, [pc, #220]	; (8007f1c <USBD_CDC_DeInit+0xf8>)
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	f003 020f 	and.w	r2, r3, #15
 8007e44:	6879      	ldr	r1, [r7, #4]
 8007e46:	4613      	mov	r3, r2
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	4413      	add	r3, r2
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	440b      	add	r3, r1
 8007e50:	3324      	adds	r3, #36	; 0x24
 8007e52:	2200      	movs	r2, #0
 8007e54:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007e56:	4b32      	ldr	r3, [pc, #200]	; (8007f20 <USBD_CDC_DeInit+0xfc>)
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f002 fa22 	bl	800a2a6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007e62:	4b2f      	ldr	r3, [pc, #188]	; (8007f20 <USBD_CDC_DeInit+0xfc>)
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	f003 020f 	and.w	r2, r3, #15
 8007e6a:	6879      	ldr	r1, [r7, #4]
 8007e6c:	4613      	mov	r3, r2
 8007e6e:	009b      	lsls	r3, r3, #2
 8007e70:	4413      	add	r3, r2
 8007e72:	009b      	lsls	r3, r3, #2
 8007e74:	440b      	add	r3, r1
 8007e76:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007e7e:	4b29      	ldr	r3, [pc, #164]	; (8007f24 <USBD_CDC_DeInit+0x100>)
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	4619      	mov	r1, r3
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f002 fa0e 	bl	800a2a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007e8a:	4b26      	ldr	r3, [pc, #152]	; (8007f24 <USBD_CDC_DeInit+0x100>)
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	f003 020f 	and.w	r2, r3, #15
 8007e92:	6879      	ldr	r1, [r7, #4]
 8007e94:	4613      	mov	r3, r2
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	4413      	add	r3, r2
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	440b      	add	r3, r1
 8007e9e:	3324      	adds	r3, #36	; 0x24
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007ea4:	4b1f      	ldr	r3, [pc, #124]	; (8007f24 <USBD_CDC_DeInit+0x100>)
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	f003 020f 	and.w	r2, r3, #15
 8007eac:	6879      	ldr	r1, [r7, #4]
 8007eae:	4613      	mov	r3, r2
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	4413      	add	r3, r2
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	440b      	add	r3, r1
 8007eb8:	3326      	adds	r3, #38	; 0x26
 8007eba:	2200      	movs	r2, #0
 8007ebc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	32b0      	adds	r2, #176	; 0xb0
 8007ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d01f      	beq.n	8007f10 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007ed6:	687a      	ldr	r2, [r7, #4]
 8007ed8:	33b0      	adds	r3, #176	; 0xb0
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	4413      	add	r3, r2
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	32b0      	adds	r2, #176	; 0xb0
 8007eee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f002 fae2 	bl	800a4bc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	32b0      	adds	r2, #176	; 0xb0
 8007f02:	2100      	movs	r1, #0
 8007f04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3708      	adds	r7, #8
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
 8007f1a:	bf00      	nop
 8007f1c:	2000009b 	.word	0x2000009b
 8007f20:	2000009c 	.word	0x2000009c
 8007f24:	2000009d 	.word	0x2000009d

08007f28 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b086      	sub	sp, #24
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	32b0      	adds	r2, #176	; 0xb0
 8007f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f40:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007f42:	2300      	movs	r3, #0
 8007f44:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007f46:	2300      	movs	r3, #0
 8007f48:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d101      	bne.n	8007f58 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007f54:	2303      	movs	r3, #3
 8007f56:	e0bf      	b.n	80080d8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d050      	beq.n	8008006 <USBD_CDC_Setup+0xde>
 8007f64:	2b20      	cmp	r3, #32
 8007f66:	f040 80af 	bne.w	80080c8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	88db      	ldrh	r3, [r3, #6]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d03a      	beq.n	8007fe8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	b25b      	sxtb	r3, r3
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	da1b      	bge.n	8007fb4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	33b0      	adds	r3, #176	; 0xb0
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	4413      	add	r3, r2
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	683a      	ldr	r2, [r7, #0]
 8007f90:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007f92:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007f94:	683a      	ldr	r2, [r7, #0]
 8007f96:	88d2      	ldrh	r2, [r2, #6]
 8007f98:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	88db      	ldrh	r3, [r3, #6]
 8007f9e:	2b07      	cmp	r3, #7
 8007fa0:	bf28      	it	cs
 8007fa2:	2307      	movcs	r3, #7
 8007fa4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	89fa      	ldrh	r2, [r7, #14]
 8007faa:	4619      	mov	r1, r3
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f001 fd43 	bl	8009a38 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007fb2:	e090      	b.n	80080d6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	785a      	ldrb	r2, [r3, #1]
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	88db      	ldrh	r3, [r3, #6]
 8007fc2:	2b3f      	cmp	r3, #63	; 0x3f
 8007fc4:	d803      	bhi.n	8007fce <USBD_CDC_Setup+0xa6>
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	88db      	ldrh	r3, [r3, #6]
 8007fca:	b2da      	uxtb	r2, r3
 8007fcc:	e000      	b.n	8007fd0 <USBD_CDC_Setup+0xa8>
 8007fce:	2240      	movs	r2, #64	; 0x40
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007fd6:	6939      	ldr	r1, [r7, #16]
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007fde:	461a      	mov	r2, r3
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f001 fd55 	bl	8009a90 <USBD_CtlPrepareRx>
      break;
 8007fe6:	e076      	b.n	80080d6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	33b0      	adds	r3, #176	; 0xb0
 8007ff2:	009b      	lsls	r3, r3, #2
 8007ff4:	4413      	add	r3, r2
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	683a      	ldr	r2, [r7, #0]
 8007ffc:	7850      	ldrb	r0, [r2, #1]
 8007ffe:	2200      	movs	r2, #0
 8008000:	6839      	ldr	r1, [r7, #0]
 8008002:	4798      	blx	r3
      break;
 8008004:	e067      	b.n	80080d6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	785b      	ldrb	r3, [r3, #1]
 800800a:	2b0b      	cmp	r3, #11
 800800c:	d851      	bhi.n	80080b2 <USBD_CDC_Setup+0x18a>
 800800e:	a201      	add	r2, pc, #4	; (adr r2, 8008014 <USBD_CDC_Setup+0xec>)
 8008010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008014:	08008045 	.word	0x08008045
 8008018:	080080c1 	.word	0x080080c1
 800801c:	080080b3 	.word	0x080080b3
 8008020:	080080b3 	.word	0x080080b3
 8008024:	080080b3 	.word	0x080080b3
 8008028:	080080b3 	.word	0x080080b3
 800802c:	080080b3 	.word	0x080080b3
 8008030:	080080b3 	.word	0x080080b3
 8008034:	080080b3 	.word	0x080080b3
 8008038:	080080b3 	.word	0x080080b3
 800803c:	0800806f 	.word	0x0800806f
 8008040:	08008099 	.word	0x08008099
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800804a:	b2db      	uxtb	r3, r3
 800804c:	2b03      	cmp	r3, #3
 800804e:	d107      	bne.n	8008060 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008050:	f107 030a 	add.w	r3, r7, #10
 8008054:	2202      	movs	r2, #2
 8008056:	4619      	mov	r1, r3
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f001 fced 	bl	8009a38 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800805e:	e032      	b.n	80080c6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008060:	6839      	ldr	r1, [r7, #0]
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f001 fc77 	bl	8009956 <USBD_CtlError>
            ret = USBD_FAIL;
 8008068:	2303      	movs	r3, #3
 800806a:	75fb      	strb	r3, [r7, #23]
          break;
 800806c:	e02b      	b.n	80080c6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008074:	b2db      	uxtb	r3, r3
 8008076:	2b03      	cmp	r3, #3
 8008078:	d107      	bne.n	800808a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800807a:	f107 030d 	add.w	r3, r7, #13
 800807e:	2201      	movs	r2, #1
 8008080:	4619      	mov	r1, r3
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f001 fcd8 	bl	8009a38 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008088:	e01d      	b.n	80080c6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800808a:	6839      	ldr	r1, [r7, #0]
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f001 fc62 	bl	8009956 <USBD_CtlError>
            ret = USBD_FAIL;
 8008092:	2303      	movs	r3, #3
 8008094:	75fb      	strb	r3, [r7, #23]
          break;
 8008096:	e016      	b.n	80080c6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	2b03      	cmp	r3, #3
 80080a2:	d00f      	beq.n	80080c4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80080a4:	6839      	ldr	r1, [r7, #0]
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f001 fc55 	bl	8009956 <USBD_CtlError>
            ret = USBD_FAIL;
 80080ac:	2303      	movs	r3, #3
 80080ae:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80080b0:	e008      	b.n	80080c4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80080b2:	6839      	ldr	r1, [r7, #0]
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f001 fc4e 	bl	8009956 <USBD_CtlError>
          ret = USBD_FAIL;
 80080ba:	2303      	movs	r3, #3
 80080bc:	75fb      	strb	r3, [r7, #23]
          break;
 80080be:	e002      	b.n	80080c6 <USBD_CDC_Setup+0x19e>
          break;
 80080c0:	bf00      	nop
 80080c2:	e008      	b.n	80080d6 <USBD_CDC_Setup+0x1ae>
          break;
 80080c4:	bf00      	nop
      }
      break;
 80080c6:	e006      	b.n	80080d6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80080c8:	6839      	ldr	r1, [r7, #0]
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f001 fc43 	bl	8009956 <USBD_CtlError>
      ret = USBD_FAIL;
 80080d0:	2303      	movs	r3, #3
 80080d2:	75fb      	strb	r3, [r7, #23]
      break;
 80080d4:	bf00      	nop
  }

  return (uint8_t)ret;
 80080d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3718      	adds	r7, #24
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	460b      	mov	r3, r1
 80080ea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80080f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	32b0      	adds	r2, #176	; 0xb0
 80080fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d101      	bne.n	800810a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008106:	2303      	movs	r3, #3
 8008108:	e065      	b.n	80081d6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	32b0      	adds	r2, #176	; 0xb0
 8008114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008118:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800811a:	78fb      	ldrb	r3, [r7, #3]
 800811c:	f003 020f 	and.w	r2, r3, #15
 8008120:	6879      	ldr	r1, [r7, #4]
 8008122:	4613      	mov	r3, r2
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	4413      	add	r3, r2
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	440b      	add	r3, r1
 800812c:	3318      	adds	r3, #24
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d02f      	beq.n	8008194 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008134:	78fb      	ldrb	r3, [r7, #3]
 8008136:	f003 020f 	and.w	r2, r3, #15
 800813a:	6879      	ldr	r1, [r7, #4]
 800813c:	4613      	mov	r3, r2
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	4413      	add	r3, r2
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	440b      	add	r3, r1
 8008146:	3318      	adds	r3, #24
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	78fb      	ldrb	r3, [r7, #3]
 800814c:	f003 010f 	and.w	r1, r3, #15
 8008150:	68f8      	ldr	r0, [r7, #12]
 8008152:	460b      	mov	r3, r1
 8008154:	00db      	lsls	r3, r3, #3
 8008156:	440b      	add	r3, r1
 8008158:	009b      	lsls	r3, r3, #2
 800815a:	4403      	add	r3, r0
 800815c:	3348      	adds	r3, #72	; 0x48
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	fbb2 f1f3 	udiv	r1, r2, r3
 8008164:	fb01 f303 	mul.w	r3, r1, r3
 8008168:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800816a:	2b00      	cmp	r3, #0
 800816c:	d112      	bne.n	8008194 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800816e:	78fb      	ldrb	r3, [r7, #3]
 8008170:	f003 020f 	and.w	r2, r3, #15
 8008174:	6879      	ldr	r1, [r7, #4]
 8008176:	4613      	mov	r3, r2
 8008178:	009b      	lsls	r3, r3, #2
 800817a:	4413      	add	r3, r2
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	440b      	add	r3, r1
 8008180:	3318      	adds	r3, #24
 8008182:	2200      	movs	r2, #0
 8008184:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008186:	78f9      	ldrb	r1, [r7, #3]
 8008188:	2300      	movs	r3, #0
 800818a:	2200      	movs	r2, #0
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f002 f932 	bl	800a3f6 <USBD_LL_Transmit>
 8008192:	e01f      	b.n	80081d4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	2200      	movs	r2, #0
 8008198:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	33b0      	adds	r3, #176	; 0xb0
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	4413      	add	r3, r2
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	691b      	ldr	r3, [r3, #16]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d010      	beq.n	80081d4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	33b0      	adds	r3, #176	; 0xb0
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	4413      	add	r3, r2
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	691b      	ldr	r3, [r3, #16]
 80081c4:	68ba      	ldr	r2, [r7, #8]
 80081c6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80081ca:	68ba      	ldr	r2, [r7, #8]
 80081cc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80081d0:	78fa      	ldrb	r2, [r7, #3]
 80081d2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80081d4:	2300      	movs	r3, #0
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3710      	adds	r7, #16
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}

080081de <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80081de:	b580      	push	{r7, lr}
 80081e0:	b084      	sub	sp, #16
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
 80081e6:	460b      	mov	r3, r1
 80081e8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	32b0      	adds	r2, #176	; 0xb0
 80081f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081f8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	32b0      	adds	r2, #176	; 0xb0
 8008204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d101      	bne.n	8008210 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800820c:	2303      	movs	r3, #3
 800820e:	e01a      	b.n	8008246 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008210:	78fb      	ldrb	r3, [r7, #3]
 8008212:	4619      	mov	r1, r3
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f002 f930 	bl	800a47a <USBD_LL_GetRxDataSize>
 800821a:	4602      	mov	r2, r0
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	33b0      	adds	r3, #176	; 0xb0
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	4413      	add	r3, r2
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	68db      	ldr	r3, [r3, #12]
 8008234:	68fa      	ldr	r2, [r7, #12]
 8008236:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800823a:	68fa      	ldr	r2, [r7, #12]
 800823c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008240:	4611      	mov	r1, r2
 8008242:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008244:	2300      	movs	r3, #0
}
 8008246:	4618      	mov	r0, r3
 8008248:	3710      	adds	r7, #16
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}

0800824e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800824e:	b580      	push	{r7, lr}
 8008250:	b084      	sub	sp, #16
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	32b0      	adds	r2, #176	; 0xb0
 8008260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008264:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d101      	bne.n	8008270 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800826c:	2303      	movs	r3, #3
 800826e:	e025      	b.n	80082bc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	33b0      	adds	r3, #176	; 0xb0
 800827a:	009b      	lsls	r3, r3, #2
 800827c:	4413      	add	r3, r2
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d01a      	beq.n	80082ba <USBD_CDC_EP0_RxReady+0x6c>
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800828a:	2bff      	cmp	r3, #255	; 0xff
 800828c:	d015      	beq.n	80082ba <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	33b0      	adds	r3, #176	; 0xb0
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	4413      	add	r3, r2
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	68fa      	ldr	r2, [r7, #12]
 80082a2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80082a6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80082ae:	b292      	uxth	r2, r2
 80082b0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	22ff      	movs	r2, #255	; 0xff
 80082b6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80082ba:	2300      	movs	r3, #0
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3710      	adds	r7, #16
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b086      	sub	sp, #24
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80082cc:	2182      	movs	r1, #130	; 0x82
 80082ce:	4818      	ldr	r0, [pc, #96]	; (8008330 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80082d0:	f000 fd09 	bl	8008ce6 <USBD_GetEpDesc>
 80082d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80082d6:	2101      	movs	r1, #1
 80082d8:	4815      	ldr	r0, [pc, #84]	; (8008330 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80082da:	f000 fd04 	bl	8008ce6 <USBD_GetEpDesc>
 80082de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80082e0:	2181      	movs	r1, #129	; 0x81
 80082e2:	4813      	ldr	r0, [pc, #76]	; (8008330 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80082e4:	f000 fcff 	bl	8008ce6 <USBD_GetEpDesc>
 80082e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d002      	beq.n	80082f6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	2210      	movs	r2, #16
 80082f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d006      	beq.n	800830a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	2200      	movs	r2, #0
 8008300:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008304:	711a      	strb	r2, [r3, #4]
 8008306:	2200      	movs	r2, #0
 8008308:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d006      	beq.n	800831e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2200      	movs	r2, #0
 8008314:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008318:	711a      	strb	r2, [r3, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2243      	movs	r2, #67	; 0x43
 8008322:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008324:	4b02      	ldr	r3, [pc, #8]	; (8008330 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008326:	4618      	mov	r0, r3
 8008328:	3718      	adds	r7, #24
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop
 8008330:	20000058 	.word	0x20000058

08008334 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b086      	sub	sp, #24
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800833c:	2182      	movs	r1, #130	; 0x82
 800833e:	4818      	ldr	r0, [pc, #96]	; (80083a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008340:	f000 fcd1 	bl	8008ce6 <USBD_GetEpDesc>
 8008344:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008346:	2101      	movs	r1, #1
 8008348:	4815      	ldr	r0, [pc, #84]	; (80083a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800834a:	f000 fccc 	bl	8008ce6 <USBD_GetEpDesc>
 800834e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008350:	2181      	movs	r1, #129	; 0x81
 8008352:	4813      	ldr	r0, [pc, #76]	; (80083a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008354:	f000 fcc7 	bl	8008ce6 <USBD_GetEpDesc>
 8008358:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d002      	beq.n	8008366 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	2210      	movs	r2, #16
 8008364:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d006      	beq.n	800837a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	2200      	movs	r2, #0
 8008370:	711a      	strb	r2, [r3, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	f042 0202 	orr.w	r2, r2, #2
 8008378:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d006      	beq.n	800838e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2200      	movs	r2, #0
 8008384:	711a      	strb	r2, [r3, #4]
 8008386:	2200      	movs	r2, #0
 8008388:	f042 0202 	orr.w	r2, r2, #2
 800838c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2243      	movs	r2, #67	; 0x43
 8008392:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008394:	4b02      	ldr	r3, [pc, #8]	; (80083a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008396:	4618      	mov	r0, r3
 8008398:	3718      	adds	r7, #24
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop
 80083a0:	20000058 	.word	0x20000058

080083a4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b086      	sub	sp, #24
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80083ac:	2182      	movs	r1, #130	; 0x82
 80083ae:	4818      	ldr	r0, [pc, #96]	; (8008410 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80083b0:	f000 fc99 	bl	8008ce6 <USBD_GetEpDesc>
 80083b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80083b6:	2101      	movs	r1, #1
 80083b8:	4815      	ldr	r0, [pc, #84]	; (8008410 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80083ba:	f000 fc94 	bl	8008ce6 <USBD_GetEpDesc>
 80083be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80083c0:	2181      	movs	r1, #129	; 0x81
 80083c2:	4813      	ldr	r0, [pc, #76]	; (8008410 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80083c4:	f000 fc8f 	bl	8008ce6 <USBD_GetEpDesc>
 80083c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d002      	beq.n	80083d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	2210      	movs	r2, #16
 80083d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d006      	beq.n	80083ea <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	2200      	movs	r2, #0
 80083e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083e4:	711a      	strb	r2, [r3, #4]
 80083e6:	2200      	movs	r2, #0
 80083e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d006      	beq.n	80083fe <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2200      	movs	r2, #0
 80083f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083f8:	711a      	strb	r2, [r3, #4]
 80083fa:	2200      	movs	r2, #0
 80083fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2243      	movs	r2, #67	; 0x43
 8008402:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008404:	4b02      	ldr	r3, [pc, #8]	; (8008410 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008406:	4618      	mov	r0, r3
 8008408:	3718      	adds	r7, #24
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
 800840e:	bf00      	nop
 8008410:	20000058 	.word	0x20000058

08008414 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008414:	b480      	push	{r7}
 8008416:	b083      	sub	sp, #12
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	220a      	movs	r2, #10
 8008420:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008422:	4b03      	ldr	r3, [pc, #12]	; (8008430 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008424:	4618      	mov	r0, r3
 8008426:	370c      	adds	r7, #12
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr
 8008430:	20000014 	.word	0x20000014

08008434 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d101      	bne.n	8008448 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008444:	2303      	movs	r3, #3
 8008446:	e009      	b.n	800845c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	33b0      	adds	r3, #176	; 0xb0
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	4413      	add	r3, r2
 8008456:	683a      	ldr	r2, [r7, #0]
 8008458:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800845a:	2300      	movs	r3, #0
}
 800845c:	4618      	mov	r0, r3
 800845e:	370c      	adds	r7, #12
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr

08008468 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008468:	b480      	push	{r7}
 800846a:	b087      	sub	sp, #28
 800846c:	af00      	add	r7, sp, #0
 800846e:	60f8      	str	r0, [r7, #12]
 8008470:	60b9      	str	r1, [r7, #8]
 8008472:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	32b0      	adds	r2, #176	; 0xb0
 800847e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008482:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d101      	bne.n	800848e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800848a:	2303      	movs	r3, #3
 800848c:	e008      	b.n	80084a0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	68ba      	ldr	r2, [r7, #8]
 8008492:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800849e:	2300      	movs	r3, #0
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	371c      	adds	r7, #28
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr

080084ac <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b085      	sub	sp, #20
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	32b0      	adds	r2, #176	; 0xb0
 80084c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084c4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d101      	bne.n	80084d0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80084cc:	2303      	movs	r3, #3
 80084ce:	e004      	b.n	80084da <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	683a      	ldr	r2, [r7, #0]
 80084d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80084d8:	2300      	movs	r3, #0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3714      	adds	r7, #20
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr
	...

080084e8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	32b0      	adds	r2, #176	; 0xb0
 80084fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084fe:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	32b0      	adds	r2, #176	; 0xb0
 800850a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d101      	bne.n	8008516 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008512:	2303      	movs	r3, #3
 8008514:	e018      	b.n	8008548 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	7c1b      	ldrb	r3, [r3, #16]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d10a      	bne.n	8008534 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800851e:	4b0c      	ldr	r3, [pc, #48]	; (8008550 <USBD_CDC_ReceivePacket+0x68>)
 8008520:	7819      	ldrb	r1, [r3, #0]
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008528:	f44f 7300 	mov.w	r3, #512	; 0x200
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f001 ff83 	bl	800a438 <USBD_LL_PrepareReceive>
 8008532:	e008      	b.n	8008546 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008534:	4b06      	ldr	r3, [pc, #24]	; (8008550 <USBD_CDC_ReceivePacket+0x68>)
 8008536:	7819      	ldrb	r1, [r3, #0]
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800853e:	2340      	movs	r3, #64	; 0x40
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f001 ff79 	bl	800a438 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008546:	2300      	movs	r3, #0
}
 8008548:	4618      	mov	r0, r3
 800854a:	3710      	adds	r7, #16
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}
 8008550:	2000009c 	.word	0x2000009c

08008554 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b086      	sub	sp, #24
 8008558:	af00      	add	r7, sp, #0
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	60b9      	str	r1, [r7, #8]
 800855e:	4613      	mov	r3, r2
 8008560:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d101      	bne.n	800856c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008568:	2303      	movs	r3, #3
 800856a:	e01f      	b.n	80085ac <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2200      	movs	r2, #0
 8008570:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2200      	movs	r2, #0
 8008578:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2200      	movs	r2, #0
 8008580:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d003      	beq.n	8008592 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	68ba      	ldr	r2, [r7, #8]
 800858e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2201      	movs	r2, #1
 8008596:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	79fa      	ldrb	r2, [r7, #7]
 800859e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80085a0:	68f8      	ldr	r0, [r7, #12]
 80085a2:	f001 fdf3 	bl	800a18c <USBD_LL_Init>
 80085a6:	4603      	mov	r3, r0
 80085a8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80085aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3718      	adds	r7, #24
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b084      	sub	sp, #16
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80085be:	2300      	movs	r3, #0
 80085c0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d101      	bne.n	80085cc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80085c8:	2303      	movs	r3, #3
 80085ca:	e025      	b.n	8008618 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	683a      	ldr	r2, [r7, #0]
 80085d0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	32ae      	adds	r2, #174	; 0xae
 80085de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d00f      	beq.n	8008608 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	32ae      	adds	r2, #174	; 0xae
 80085f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f8:	f107 020e 	add.w	r2, r7, #14
 80085fc:	4610      	mov	r0, r2
 80085fe:	4798      	blx	r3
 8008600:	4602      	mov	r2, r0
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800860e:	1c5a      	adds	r2, r3, #1
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008616:	2300      	movs	r3, #0
}
 8008618:	4618      	mov	r0, r3
 800861a:	3710      	adds	r7, #16
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b082      	sub	sp, #8
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f001 fdfb 	bl	800a224 <USBD_LL_Start>
 800862e:	4603      	mov	r3, r0
}
 8008630:	4618      	mov	r0, r3
 8008632:	3708      	adds	r7, #8
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008638:	b480      	push	{r7}
 800863a:	b083      	sub	sp, #12
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008640:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008642:	4618      	mov	r0, r3
 8008644:	370c      	adds	r7, #12
 8008646:	46bd      	mov	sp, r7
 8008648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864c:	4770      	bx	lr

0800864e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800864e:	b580      	push	{r7, lr}
 8008650:	b084      	sub	sp, #16
 8008652:	af00      	add	r7, sp, #0
 8008654:	6078      	str	r0, [r7, #4]
 8008656:	460b      	mov	r3, r1
 8008658:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800865a:	2300      	movs	r3, #0
 800865c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008664:	2b00      	cmp	r3, #0
 8008666:	d009      	beq.n	800867c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	78fa      	ldrb	r2, [r7, #3]
 8008672:	4611      	mov	r1, r2
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	4798      	blx	r3
 8008678:	4603      	mov	r3, r0
 800867a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800867c:	7bfb      	ldrb	r3, [r7, #15]
}
 800867e:	4618      	mov	r0, r3
 8008680:	3710      	adds	r7, #16
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}

08008686 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008686:	b580      	push	{r7, lr}
 8008688:	b084      	sub	sp, #16
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
 800868e:	460b      	mov	r3, r1
 8008690:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008692:	2300      	movs	r3, #0
 8008694:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	78fa      	ldrb	r2, [r7, #3]
 80086a0:	4611      	mov	r1, r2
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	4798      	blx	r3
 80086a6:	4603      	mov	r3, r0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d001      	beq.n	80086b0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80086ac:	2303      	movs	r3, #3
 80086ae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80086b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3710      	adds	r7, #16
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}

080086ba <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80086ba:	b580      	push	{r7, lr}
 80086bc:	b084      	sub	sp, #16
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
 80086c2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80086ca:	6839      	ldr	r1, [r7, #0]
 80086cc:	4618      	mov	r0, r3
 80086ce:	f001 f908 	bl	80098e2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2201      	movs	r2, #1
 80086d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80086e0:	461a      	mov	r2, r3
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80086ee:	f003 031f 	and.w	r3, r3, #31
 80086f2:	2b02      	cmp	r3, #2
 80086f4:	d01a      	beq.n	800872c <USBD_LL_SetupStage+0x72>
 80086f6:	2b02      	cmp	r3, #2
 80086f8:	d822      	bhi.n	8008740 <USBD_LL_SetupStage+0x86>
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d002      	beq.n	8008704 <USBD_LL_SetupStage+0x4a>
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d00a      	beq.n	8008718 <USBD_LL_SetupStage+0x5e>
 8008702:	e01d      	b.n	8008740 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800870a:	4619      	mov	r1, r3
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 fb5f 	bl	8008dd0 <USBD_StdDevReq>
 8008712:	4603      	mov	r3, r0
 8008714:	73fb      	strb	r3, [r7, #15]
      break;
 8008716:	e020      	b.n	800875a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800871e:	4619      	mov	r1, r3
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 fbc7 	bl	8008eb4 <USBD_StdItfReq>
 8008726:	4603      	mov	r3, r0
 8008728:	73fb      	strb	r3, [r7, #15]
      break;
 800872a:	e016      	b.n	800875a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008732:	4619      	mov	r1, r3
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 fc29 	bl	8008f8c <USBD_StdEPReq>
 800873a:	4603      	mov	r3, r0
 800873c:	73fb      	strb	r3, [r7, #15]
      break;
 800873e:	e00c      	b.n	800875a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008746:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800874a:	b2db      	uxtb	r3, r3
 800874c:	4619      	mov	r1, r3
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f001 fdc8 	bl	800a2e4 <USBD_LL_StallEP>
 8008754:	4603      	mov	r3, r0
 8008756:	73fb      	strb	r3, [r7, #15]
      break;
 8008758:	bf00      	nop
  }

  return ret;
 800875a:	7bfb      	ldrb	r3, [r7, #15]
}
 800875c:	4618      	mov	r0, r3
 800875e:	3710      	adds	r7, #16
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b086      	sub	sp, #24
 8008768:	af00      	add	r7, sp, #0
 800876a:	60f8      	str	r0, [r7, #12]
 800876c:	460b      	mov	r3, r1
 800876e:	607a      	str	r2, [r7, #4]
 8008770:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008772:	2300      	movs	r3, #0
 8008774:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008776:	7afb      	ldrb	r3, [r7, #11]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d16e      	bne.n	800885a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008782:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800878a:	2b03      	cmp	r3, #3
 800878c:	f040 8098 	bne.w	80088c0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	689a      	ldr	r2, [r3, #8]
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	68db      	ldr	r3, [r3, #12]
 8008798:	429a      	cmp	r2, r3
 800879a:	d913      	bls.n	80087c4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	689a      	ldr	r2, [r3, #8]
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	68db      	ldr	r3, [r3, #12]
 80087a4:	1ad2      	subs	r2, r2, r3
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	68da      	ldr	r2, [r3, #12]
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	4293      	cmp	r3, r2
 80087b4:	bf28      	it	cs
 80087b6:	4613      	movcs	r3, r2
 80087b8:	461a      	mov	r2, r3
 80087ba:	6879      	ldr	r1, [r7, #4]
 80087bc:	68f8      	ldr	r0, [r7, #12]
 80087be:	f001 f984 	bl	8009aca <USBD_CtlContinueRx>
 80087c2:	e07d      	b.n	80088c0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80087ca:	f003 031f 	and.w	r3, r3, #31
 80087ce:	2b02      	cmp	r3, #2
 80087d0:	d014      	beq.n	80087fc <USBD_LL_DataOutStage+0x98>
 80087d2:	2b02      	cmp	r3, #2
 80087d4:	d81d      	bhi.n	8008812 <USBD_LL_DataOutStage+0xae>
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d002      	beq.n	80087e0 <USBD_LL_DataOutStage+0x7c>
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d003      	beq.n	80087e6 <USBD_LL_DataOutStage+0x82>
 80087de:	e018      	b.n	8008812 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80087e0:	2300      	movs	r3, #0
 80087e2:	75bb      	strb	r3, [r7, #22]
            break;
 80087e4:	e018      	b.n	8008818 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	4619      	mov	r1, r3
 80087f0:	68f8      	ldr	r0, [r7, #12]
 80087f2:	f000 fa5e 	bl	8008cb2 <USBD_CoreFindIF>
 80087f6:	4603      	mov	r3, r0
 80087f8:	75bb      	strb	r3, [r7, #22]
            break;
 80087fa:	e00d      	b.n	8008818 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008802:	b2db      	uxtb	r3, r3
 8008804:	4619      	mov	r1, r3
 8008806:	68f8      	ldr	r0, [r7, #12]
 8008808:	f000 fa60 	bl	8008ccc <USBD_CoreFindEP>
 800880c:	4603      	mov	r3, r0
 800880e:	75bb      	strb	r3, [r7, #22]
            break;
 8008810:	e002      	b.n	8008818 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008812:	2300      	movs	r3, #0
 8008814:	75bb      	strb	r3, [r7, #22]
            break;
 8008816:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008818:	7dbb      	ldrb	r3, [r7, #22]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d119      	bne.n	8008852 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008824:	b2db      	uxtb	r3, r3
 8008826:	2b03      	cmp	r3, #3
 8008828:	d113      	bne.n	8008852 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800882a:	7dba      	ldrb	r2, [r7, #22]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	32ae      	adds	r2, #174	; 0xae
 8008830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008834:	691b      	ldr	r3, [r3, #16]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d00b      	beq.n	8008852 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800883a:	7dba      	ldrb	r2, [r7, #22]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008842:	7dba      	ldrb	r2, [r7, #22]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	32ae      	adds	r2, #174	; 0xae
 8008848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800884c:	691b      	ldr	r3, [r3, #16]
 800884e:	68f8      	ldr	r0, [r7, #12]
 8008850:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008852:	68f8      	ldr	r0, [r7, #12]
 8008854:	f001 f94a 	bl	8009aec <USBD_CtlSendStatus>
 8008858:	e032      	b.n	80088c0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800885a:	7afb      	ldrb	r3, [r7, #11]
 800885c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008860:	b2db      	uxtb	r3, r3
 8008862:	4619      	mov	r1, r3
 8008864:	68f8      	ldr	r0, [r7, #12]
 8008866:	f000 fa31 	bl	8008ccc <USBD_CoreFindEP>
 800886a:	4603      	mov	r3, r0
 800886c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800886e:	7dbb      	ldrb	r3, [r7, #22]
 8008870:	2bff      	cmp	r3, #255	; 0xff
 8008872:	d025      	beq.n	80088c0 <USBD_LL_DataOutStage+0x15c>
 8008874:	7dbb      	ldrb	r3, [r7, #22]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d122      	bne.n	80088c0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008880:	b2db      	uxtb	r3, r3
 8008882:	2b03      	cmp	r3, #3
 8008884:	d117      	bne.n	80088b6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008886:	7dba      	ldrb	r2, [r7, #22]
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	32ae      	adds	r2, #174	; 0xae
 800888c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008890:	699b      	ldr	r3, [r3, #24]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d00f      	beq.n	80088b6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008896:	7dba      	ldrb	r2, [r7, #22]
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800889e:	7dba      	ldrb	r2, [r7, #22]
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	32ae      	adds	r2, #174	; 0xae
 80088a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088a8:	699b      	ldr	r3, [r3, #24]
 80088aa:	7afa      	ldrb	r2, [r7, #11]
 80088ac:	4611      	mov	r1, r2
 80088ae:	68f8      	ldr	r0, [r7, #12]
 80088b0:	4798      	blx	r3
 80088b2:	4603      	mov	r3, r0
 80088b4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80088b6:	7dfb      	ldrb	r3, [r7, #23]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d001      	beq.n	80088c0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80088bc:	7dfb      	ldrb	r3, [r7, #23]
 80088be:	e000      	b.n	80088c2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80088c0:	2300      	movs	r3, #0
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3718      	adds	r7, #24
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}

080088ca <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80088ca:	b580      	push	{r7, lr}
 80088cc:	b086      	sub	sp, #24
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	60f8      	str	r0, [r7, #12]
 80088d2:	460b      	mov	r3, r1
 80088d4:	607a      	str	r2, [r7, #4]
 80088d6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80088d8:	7afb      	ldrb	r3, [r7, #11]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d16f      	bne.n	80089be <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	3314      	adds	r3, #20
 80088e2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80088ea:	2b02      	cmp	r3, #2
 80088ec:	d15a      	bne.n	80089a4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	689a      	ldr	r2, [r3, #8]
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	68db      	ldr	r3, [r3, #12]
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d914      	bls.n	8008924 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	689a      	ldr	r2, [r3, #8]
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	1ad2      	subs	r2, r2, r3
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	461a      	mov	r2, r3
 800890e:	6879      	ldr	r1, [r7, #4]
 8008910:	68f8      	ldr	r0, [r7, #12]
 8008912:	f001 f8ac 	bl	8009a6e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008916:	2300      	movs	r3, #0
 8008918:	2200      	movs	r2, #0
 800891a:	2100      	movs	r1, #0
 800891c:	68f8      	ldr	r0, [r7, #12]
 800891e:	f001 fd8b 	bl	800a438 <USBD_LL_PrepareReceive>
 8008922:	e03f      	b.n	80089a4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	68da      	ldr	r2, [r3, #12]
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	429a      	cmp	r2, r3
 800892e:	d11c      	bne.n	800896a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	685a      	ldr	r2, [r3, #4]
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008938:	429a      	cmp	r2, r3
 800893a:	d316      	bcc.n	800896a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	685a      	ldr	r2, [r3, #4]
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008946:	429a      	cmp	r2, r3
 8008948:	d20f      	bcs.n	800896a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800894a:	2200      	movs	r2, #0
 800894c:	2100      	movs	r1, #0
 800894e:	68f8      	ldr	r0, [r7, #12]
 8008950:	f001 f88d 	bl	8009a6e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2200      	movs	r2, #0
 8008958:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800895c:	2300      	movs	r3, #0
 800895e:	2200      	movs	r2, #0
 8008960:	2100      	movs	r1, #0
 8008962:	68f8      	ldr	r0, [r7, #12]
 8008964:	f001 fd68 	bl	800a438 <USBD_LL_PrepareReceive>
 8008968:	e01c      	b.n	80089a4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008970:	b2db      	uxtb	r3, r3
 8008972:	2b03      	cmp	r3, #3
 8008974:	d10f      	bne.n	8008996 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800897c:	68db      	ldr	r3, [r3, #12]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d009      	beq.n	8008996 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2200      	movs	r2, #0
 8008986:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008990:	68db      	ldr	r3, [r3, #12]
 8008992:	68f8      	ldr	r0, [r7, #12]
 8008994:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008996:	2180      	movs	r1, #128	; 0x80
 8008998:	68f8      	ldr	r0, [r7, #12]
 800899a:	f001 fca3 	bl	800a2e4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800899e:	68f8      	ldr	r0, [r7, #12]
 80089a0:	f001 f8b7 	bl	8009b12 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d03a      	beq.n	8008a24 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80089ae:	68f8      	ldr	r0, [r7, #12]
 80089b0:	f7ff fe42 	bl	8008638 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2200      	movs	r2, #0
 80089b8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80089bc:	e032      	b.n	8008a24 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80089be:	7afb      	ldrb	r3, [r7, #11]
 80089c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	4619      	mov	r1, r3
 80089c8:	68f8      	ldr	r0, [r7, #12]
 80089ca:	f000 f97f 	bl	8008ccc <USBD_CoreFindEP>
 80089ce:	4603      	mov	r3, r0
 80089d0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80089d2:	7dfb      	ldrb	r3, [r7, #23]
 80089d4:	2bff      	cmp	r3, #255	; 0xff
 80089d6:	d025      	beq.n	8008a24 <USBD_LL_DataInStage+0x15a>
 80089d8:	7dfb      	ldrb	r3, [r7, #23]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d122      	bne.n	8008a24 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	2b03      	cmp	r3, #3
 80089e8:	d11c      	bne.n	8008a24 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80089ea:	7dfa      	ldrb	r2, [r7, #23]
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	32ae      	adds	r2, #174	; 0xae
 80089f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089f4:	695b      	ldr	r3, [r3, #20]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d014      	beq.n	8008a24 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80089fa:	7dfa      	ldrb	r2, [r7, #23]
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008a02:	7dfa      	ldrb	r2, [r7, #23]
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	32ae      	adds	r2, #174	; 0xae
 8008a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a0c:	695b      	ldr	r3, [r3, #20]
 8008a0e:	7afa      	ldrb	r2, [r7, #11]
 8008a10:	4611      	mov	r1, r2
 8008a12:	68f8      	ldr	r0, [r7, #12]
 8008a14:	4798      	blx	r3
 8008a16:	4603      	mov	r3, r0
 8008a18:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008a1a:	7dbb      	ldrb	r3, [r7, #22]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d001      	beq.n	8008a24 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008a20:	7dbb      	ldrb	r3, [r7, #22]
 8008a22:	e000      	b.n	8008a26 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008a24:	2300      	movs	r3, #0
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3718      	adds	r7, #24
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}

08008a2e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008a2e:	b580      	push	{r7, lr}
 8008a30:	b084      	sub	sp, #16
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a36:	2300      	movs	r3, #0
 8008a38:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2200      	movs	r2, #0
 8008a54:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d014      	beq.n	8008a94 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d00e      	beq.n	8008a94 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	6852      	ldr	r2, [r2, #4]
 8008a82:	b2d2      	uxtb	r2, r2
 8008a84:	4611      	mov	r1, r2
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	4798      	blx	r3
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d001      	beq.n	8008a94 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008a90:	2303      	movs	r3, #3
 8008a92:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a94:	2340      	movs	r3, #64	; 0x40
 8008a96:	2200      	movs	r2, #0
 8008a98:	2100      	movs	r1, #0
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f001 fbdd 	bl	800a25a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2240      	movs	r2, #64	; 0x40
 8008aac:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ab0:	2340      	movs	r3, #64	; 0x40
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	2180      	movs	r1, #128	; 0x80
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f001 fbcf 	bl	800a25a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2201      	movs	r2, #1
 8008ac0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2240      	movs	r2, #64	; 0x40
 8008ac6:	621a      	str	r2, [r3, #32]

  return ret;
 8008ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3710      	adds	r7, #16
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}

08008ad2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008ad2:	b480      	push	{r7}
 8008ad4:	b083      	sub	sp, #12
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	6078      	str	r0, [r7, #4]
 8008ada:	460b      	mov	r3, r1
 8008adc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	78fa      	ldrb	r2, [r7, #3]
 8008ae2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008ae4:	2300      	movs	r3, #0
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	370c      	adds	r7, #12
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr

08008af2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008af2:	b480      	push	{r7}
 8008af4:	b083      	sub	sp, #12
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b00:	b2da      	uxtb	r2, r3
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2204      	movs	r2, #4
 8008b0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008b10:	2300      	movs	r3, #0
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	370c      	adds	r7, #12
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr

08008b1e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008b1e:	b480      	push	{r7}
 8008b20:	b083      	sub	sp, #12
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	2b04      	cmp	r3, #4
 8008b30:	d106      	bne.n	8008b40 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008b38:	b2da      	uxtb	r2, r3
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008b40:	2300      	movs	r3, #0
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	370c      	adds	r7, #12
 8008b46:	46bd      	mov	sp, r7
 8008b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4c:	4770      	bx	lr

08008b4e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008b4e:	b580      	push	{r7, lr}
 8008b50:	b082      	sub	sp, #8
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	2b03      	cmp	r3, #3
 8008b60:	d110      	bne.n	8008b84 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d00b      	beq.n	8008b84 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b72:	69db      	ldr	r3, [r3, #28]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d005      	beq.n	8008b84 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b7e:	69db      	ldr	r3, [r3, #28]
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008b84:	2300      	movs	r3, #0
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3708      	adds	r7, #8
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}

08008b8e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008b8e:	b580      	push	{r7, lr}
 8008b90:	b082      	sub	sp, #8
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	6078      	str	r0, [r7, #4]
 8008b96:	460b      	mov	r3, r1
 8008b98:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	32ae      	adds	r2, #174	; 0xae
 8008ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d101      	bne.n	8008bb0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008bac:	2303      	movs	r3, #3
 8008bae:	e01c      	b.n	8008bea <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	2b03      	cmp	r3, #3
 8008bba:	d115      	bne.n	8008be8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	32ae      	adds	r2, #174	; 0xae
 8008bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bca:	6a1b      	ldr	r3, [r3, #32]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d00b      	beq.n	8008be8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	32ae      	adds	r2, #174	; 0xae
 8008bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bde:	6a1b      	ldr	r3, [r3, #32]
 8008be0:	78fa      	ldrb	r2, [r7, #3]
 8008be2:	4611      	mov	r1, r2
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008be8:	2300      	movs	r3, #0
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3708      	adds	r7, #8
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}

08008bf2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008bf2:	b580      	push	{r7, lr}
 8008bf4:	b082      	sub	sp, #8
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	32ae      	adds	r2, #174	; 0xae
 8008c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d101      	bne.n	8008c14 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008c10:	2303      	movs	r3, #3
 8008c12:	e01c      	b.n	8008c4e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c1a:	b2db      	uxtb	r3, r3
 8008c1c:	2b03      	cmp	r3, #3
 8008c1e:	d115      	bne.n	8008c4c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	32ae      	adds	r2, #174	; 0xae
 8008c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d00b      	beq.n	8008c4c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	32ae      	adds	r2, #174	; 0xae
 8008c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c44:	78fa      	ldrb	r2, [r7, #3]
 8008c46:	4611      	mov	r1, r2
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008c4c:	2300      	movs	r3, #0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3708      	adds	r7, #8
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008c56:	b480      	push	{r7}
 8008c58:	b083      	sub	sp, #12
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008c5e:	2300      	movs	r3, #0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	370c      	adds	r7, #12
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr

08008c6c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b084      	sub	sp, #16
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008c74:	2300      	movs	r3, #0
 8008c76:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d00e      	beq.n	8008ca8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	6852      	ldr	r2, [r2, #4]
 8008c96:	b2d2      	uxtb	r2, r2
 8008c98:	4611      	mov	r1, r2
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	4798      	blx	r3
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d001      	beq.n	8008ca8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008ca4:	2303      	movs	r3, #3
 8008ca6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3710      	adds	r7, #16
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}

08008cb2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008cb2:	b480      	push	{r7}
 8008cb4:	b083      	sub	sp, #12
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
 8008cba:	460b      	mov	r3, r1
 8008cbc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008cbe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b083      	sub	sp, #12
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008cd8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	370c      	adds	r7, #12
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce4:	4770      	bx	lr

08008ce6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008ce6:	b580      	push	{r7, lr}
 8008ce8:	b086      	sub	sp, #24
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]
 8008cee:	460b      	mov	r3, r1
 8008cf0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	885b      	ldrh	r3, [r3, #2]
 8008d02:	b29a      	uxth	r2, r3
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	781b      	ldrb	r3, [r3, #0]
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d920      	bls.n	8008d50 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	781b      	ldrb	r3, [r3, #0]
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008d16:	e013      	b.n	8008d40 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008d18:	f107 030a 	add.w	r3, r7, #10
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	6978      	ldr	r0, [r7, #20]
 8008d20:	f000 f81b 	bl	8008d5a <USBD_GetNextDesc>
 8008d24:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	785b      	ldrb	r3, [r3, #1]
 8008d2a:	2b05      	cmp	r3, #5
 8008d2c:	d108      	bne.n	8008d40 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	789b      	ldrb	r3, [r3, #2]
 8008d36:	78fa      	ldrb	r2, [r7, #3]
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d008      	beq.n	8008d4e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	885b      	ldrh	r3, [r3, #2]
 8008d44:	b29a      	uxth	r2, r3
 8008d46:	897b      	ldrh	r3, [r7, #10]
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d8e5      	bhi.n	8008d18 <USBD_GetEpDesc+0x32>
 8008d4c:	e000      	b.n	8008d50 <USBD_GetEpDesc+0x6a>
          break;
 8008d4e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008d50:	693b      	ldr	r3, [r7, #16]
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3718      	adds	r7, #24
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}

08008d5a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008d5a:	b480      	push	{r7}
 8008d5c:	b085      	sub	sp, #20
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
 8008d62:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	881a      	ldrh	r2, [r3, #0]
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	781b      	ldrb	r3, [r3, #0]
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	4413      	add	r3, r2
 8008d74:	b29a      	uxth	r2, r3
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	461a      	mov	r2, r3
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	4413      	add	r3, r2
 8008d84:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008d86:	68fb      	ldr	r3, [r7, #12]
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3714      	adds	r7, #20
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b087      	sub	sp, #28
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	781b      	ldrb	r3, [r3, #0]
 8008da4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	3301      	adds	r3, #1
 8008daa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008db2:	8a3b      	ldrh	r3, [r7, #16]
 8008db4:	021b      	lsls	r3, r3, #8
 8008db6:	b21a      	sxth	r2, r3
 8008db8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008dbc:	4313      	orrs	r3, r2
 8008dbe:	b21b      	sxth	r3, r3
 8008dc0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008dc2:	89fb      	ldrh	r3, [r7, #14]
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	371c      	adds	r7, #28
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr

08008dd0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b084      	sub	sp, #16
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	781b      	ldrb	r3, [r3, #0]
 8008de2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008de6:	2b40      	cmp	r3, #64	; 0x40
 8008de8:	d005      	beq.n	8008df6 <USBD_StdDevReq+0x26>
 8008dea:	2b40      	cmp	r3, #64	; 0x40
 8008dec:	d857      	bhi.n	8008e9e <USBD_StdDevReq+0xce>
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d00f      	beq.n	8008e12 <USBD_StdDevReq+0x42>
 8008df2:	2b20      	cmp	r3, #32
 8008df4:	d153      	bne.n	8008e9e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	32ae      	adds	r2, #174	; 0xae
 8008e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e04:	689b      	ldr	r3, [r3, #8]
 8008e06:	6839      	ldr	r1, [r7, #0]
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	4798      	blx	r3
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	73fb      	strb	r3, [r7, #15]
      break;
 8008e10:	e04a      	b.n	8008ea8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	785b      	ldrb	r3, [r3, #1]
 8008e16:	2b09      	cmp	r3, #9
 8008e18:	d83b      	bhi.n	8008e92 <USBD_StdDevReq+0xc2>
 8008e1a:	a201      	add	r2, pc, #4	; (adr r2, 8008e20 <USBD_StdDevReq+0x50>)
 8008e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e20:	08008e75 	.word	0x08008e75
 8008e24:	08008e89 	.word	0x08008e89
 8008e28:	08008e93 	.word	0x08008e93
 8008e2c:	08008e7f 	.word	0x08008e7f
 8008e30:	08008e93 	.word	0x08008e93
 8008e34:	08008e53 	.word	0x08008e53
 8008e38:	08008e49 	.word	0x08008e49
 8008e3c:	08008e93 	.word	0x08008e93
 8008e40:	08008e6b 	.word	0x08008e6b
 8008e44:	08008e5d 	.word	0x08008e5d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008e48:	6839      	ldr	r1, [r7, #0]
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 fa3c 	bl	80092c8 <USBD_GetDescriptor>
          break;
 8008e50:	e024      	b.n	8008e9c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008e52:	6839      	ldr	r1, [r7, #0]
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 fba1 	bl	800959c <USBD_SetAddress>
          break;
 8008e5a:	e01f      	b.n	8008e9c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008e5c:	6839      	ldr	r1, [r7, #0]
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 fbe0 	bl	8009624 <USBD_SetConfig>
 8008e64:	4603      	mov	r3, r0
 8008e66:	73fb      	strb	r3, [r7, #15]
          break;
 8008e68:	e018      	b.n	8008e9c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008e6a:	6839      	ldr	r1, [r7, #0]
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 fc83 	bl	8009778 <USBD_GetConfig>
          break;
 8008e72:	e013      	b.n	8008e9c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008e74:	6839      	ldr	r1, [r7, #0]
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 fcb4 	bl	80097e4 <USBD_GetStatus>
          break;
 8008e7c:	e00e      	b.n	8008e9c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008e7e:	6839      	ldr	r1, [r7, #0]
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f000 fce3 	bl	800984c <USBD_SetFeature>
          break;
 8008e86:	e009      	b.n	8008e9c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008e88:	6839      	ldr	r1, [r7, #0]
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 fd07 	bl	800989e <USBD_ClrFeature>
          break;
 8008e90:	e004      	b.n	8008e9c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008e92:	6839      	ldr	r1, [r7, #0]
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f000 fd5e 	bl	8009956 <USBD_CtlError>
          break;
 8008e9a:	bf00      	nop
      }
      break;
 8008e9c:	e004      	b.n	8008ea8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008e9e:	6839      	ldr	r1, [r7, #0]
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 fd58 	bl	8009956 <USBD_CtlError>
      break;
 8008ea6:	bf00      	nop
  }

  return ret;
 8008ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3710      	adds	r7, #16
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop

08008eb4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b084      	sub	sp, #16
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008eca:	2b40      	cmp	r3, #64	; 0x40
 8008ecc:	d005      	beq.n	8008eda <USBD_StdItfReq+0x26>
 8008ece:	2b40      	cmp	r3, #64	; 0x40
 8008ed0:	d852      	bhi.n	8008f78 <USBD_StdItfReq+0xc4>
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d001      	beq.n	8008eda <USBD_StdItfReq+0x26>
 8008ed6:	2b20      	cmp	r3, #32
 8008ed8:	d14e      	bne.n	8008f78 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	3b01      	subs	r3, #1
 8008ee4:	2b02      	cmp	r3, #2
 8008ee6:	d840      	bhi.n	8008f6a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	889b      	ldrh	r3, [r3, #4]
 8008eec:	b2db      	uxtb	r3, r3
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	d836      	bhi.n	8008f60 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	889b      	ldrh	r3, [r3, #4]
 8008ef6:	b2db      	uxtb	r3, r3
 8008ef8:	4619      	mov	r1, r3
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f7ff fed9 	bl	8008cb2 <USBD_CoreFindIF>
 8008f00:	4603      	mov	r3, r0
 8008f02:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f04:	7bbb      	ldrb	r3, [r7, #14]
 8008f06:	2bff      	cmp	r3, #255	; 0xff
 8008f08:	d01d      	beq.n	8008f46 <USBD_StdItfReq+0x92>
 8008f0a:	7bbb      	ldrb	r3, [r7, #14]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d11a      	bne.n	8008f46 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008f10:	7bba      	ldrb	r2, [r7, #14]
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	32ae      	adds	r2, #174	; 0xae
 8008f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f1a:	689b      	ldr	r3, [r3, #8]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d00f      	beq.n	8008f40 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008f20:	7bba      	ldrb	r2, [r7, #14]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008f28:	7bba      	ldrb	r2, [r7, #14]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	32ae      	adds	r2, #174	; 0xae
 8008f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f32:	689b      	ldr	r3, [r3, #8]
 8008f34:	6839      	ldr	r1, [r7, #0]
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	4798      	blx	r3
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008f3e:	e004      	b.n	8008f4a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008f40:	2303      	movs	r3, #3
 8008f42:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008f44:	e001      	b.n	8008f4a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008f46:	2303      	movs	r3, #3
 8008f48:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	88db      	ldrh	r3, [r3, #6]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d110      	bne.n	8008f74 <USBD_StdItfReq+0xc0>
 8008f52:	7bfb      	ldrb	r3, [r7, #15]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d10d      	bne.n	8008f74 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f000 fdc7 	bl	8009aec <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008f5e:	e009      	b.n	8008f74 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008f60:	6839      	ldr	r1, [r7, #0]
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f000 fcf7 	bl	8009956 <USBD_CtlError>
          break;
 8008f68:	e004      	b.n	8008f74 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008f6a:	6839      	ldr	r1, [r7, #0]
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f000 fcf2 	bl	8009956 <USBD_CtlError>
          break;
 8008f72:	e000      	b.n	8008f76 <USBD_StdItfReq+0xc2>
          break;
 8008f74:	bf00      	nop
      }
      break;
 8008f76:	e004      	b.n	8008f82 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008f78:	6839      	ldr	r1, [r7, #0]
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 fceb 	bl	8009956 <USBD_CtlError>
      break;
 8008f80:	bf00      	nop
  }

  return ret;
 8008f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3710      	adds	r7, #16
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b084      	sub	sp, #16
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008f96:	2300      	movs	r3, #0
 8008f98:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	889b      	ldrh	r3, [r3, #4]
 8008f9e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008fa8:	2b40      	cmp	r3, #64	; 0x40
 8008faa:	d007      	beq.n	8008fbc <USBD_StdEPReq+0x30>
 8008fac:	2b40      	cmp	r3, #64	; 0x40
 8008fae:	f200 817f 	bhi.w	80092b0 <USBD_StdEPReq+0x324>
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d02a      	beq.n	800900c <USBD_StdEPReq+0x80>
 8008fb6:	2b20      	cmp	r3, #32
 8008fb8:	f040 817a 	bne.w	80092b0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008fbc:	7bbb      	ldrb	r3, [r7, #14]
 8008fbe:	4619      	mov	r1, r3
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f7ff fe83 	bl	8008ccc <USBD_CoreFindEP>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008fca:	7b7b      	ldrb	r3, [r7, #13]
 8008fcc:	2bff      	cmp	r3, #255	; 0xff
 8008fce:	f000 8174 	beq.w	80092ba <USBD_StdEPReq+0x32e>
 8008fd2:	7b7b      	ldrb	r3, [r7, #13]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	f040 8170 	bne.w	80092ba <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008fda:	7b7a      	ldrb	r2, [r7, #13]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008fe2:	7b7a      	ldrb	r2, [r7, #13]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	32ae      	adds	r2, #174	; 0xae
 8008fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fec:	689b      	ldr	r3, [r3, #8]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	f000 8163 	beq.w	80092ba <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008ff4:	7b7a      	ldrb	r2, [r7, #13]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	32ae      	adds	r2, #174	; 0xae
 8008ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	6839      	ldr	r1, [r7, #0]
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	4798      	blx	r3
 8009006:	4603      	mov	r3, r0
 8009008:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800900a:	e156      	b.n	80092ba <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	785b      	ldrb	r3, [r3, #1]
 8009010:	2b03      	cmp	r3, #3
 8009012:	d008      	beq.n	8009026 <USBD_StdEPReq+0x9a>
 8009014:	2b03      	cmp	r3, #3
 8009016:	f300 8145 	bgt.w	80092a4 <USBD_StdEPReq+0x318>
 800901a:	2b00      	cmp	r3, #0
 800901c:	f000 809b 	beq.w	8009156 <USBD_StdEPReq+0x1ca>
 8009020:	2b01      	cmp	r3, #1
 8009022:	d03c      	beq.n	800909e <USBD_StdEPReq+0x112>
 8009024:	e13e      	b.n	80092a4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800902c:	b2db      	uxtb	r3, r3
 800902e:	2b02      	cmp	r3, #2
 8009030:	d002      	beq.n	8009038 <USBD_StdEPReq+0xac>
 8009032:	2b03      	cmp	r3, #3
 8009034:	d016      	beq.n	8009064 <USBD_StdEPReq+0xd8>
 8009036:	e02c      	b.n	8009092 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009038:	7bbb      	ldrb	r3, [r7, #14]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d00d      	beq.n	800905a <USBD_StdEPReq+0xce>
 800903e:	7bbb      	ldrb	r3, [r7, #14]
 8009040:	2b80      	cmp	r3, #128	; 0x80
 8009042:	d00a      	beq.n	800905a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009044:	7bbb      	ldrb	r3, [r7, #14]
 8009046:	4619      	mov	r1, r3
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f001 f94b 	bl	800a2e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800904e:	2180      	movs	r1, #128	; 0x80
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f001 f947 	bl	800a2e4 <USBD_LL_StallEP>
 8009056:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009058:	e020      	b.n	800909c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800905a:	6839      	ldr	r1, [r7, #0]
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 fc7a 	bl	8009956 <USBD_CtlError>
              break;
 8009062:	e01b      	b.n	800909c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	885b      	ldrh	r3, [r3, #2]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d10e      	bne.n	800908a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800906c:	7bbb      	ldrb	r3, [r7, #14]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d00b      	beq.n	800908a <USBD_StdEPReq+0xfe>
 8009072:	7bbb      	ldrb	r3, [r7, #14]
 8009074:	2b80      	cmp	r3, #128	; 0x80
 8009076:	d008      	beq.n	800908a <USBD_StdEPReq+0xfe>
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	88db      	ldrh	r3, [r3, #6]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d104      	bne.n	800908a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009080:	7bbb      	ldrb	r3, [r7, #14]
 8009082:	4619      	mov	r1, r3
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f001 f92d 	bl	800a2e4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 fd2e 	bl	8009aec <USBD_CtlSendStatus>

              break;
 8009090:	e004      	b.n	800909c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009092:	6839      	ldr	r1, [r7, #0]
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f000 fc5e 	bl	8009956 <USBD_CtlError>
              break;
 800909a:	bf00      	nop
          }
          break;
 800909c:	e107      	b.n	80092ae <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090a4:	b2db      	uxtb	r3, r3
 80090a6:	2b02      	cmp	r3, #2
 80090a8:	d002      	beq.n	80090b0 <USBD_StdEPReq+0x124>
 80090aa:	2b03      	cmp	r3, #3
 80090ac:	d016      	beq.n	80090dc <USBD_StdEPReq+0x150>
 80090ae:	e04b      	b.n	8009148 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80090b0:	7bbb      	ldrb	r3, [r7, #14]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d00d      	beq.n	80090d2 <USBD_StdEPReq+0x146>
 80090b6:	7bbb      	ldrb	r3, [r7, #14]
 80090b8:	2b80      	cmp	r3, #128	; 0x80
 80090ba:	d00a      	beq.n	80090d2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80090bc:	7bbb      	ldrb	r3, [r7, #14]
 80090be:	4619      	mov	r1, r3
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f001 f90f 	bl	800a2e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80090c6:	2180      	movs	r1, #128	; 0x80
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f001 f90b 	bl	800a2e4 <USBD_LL_StallEP>
 80090ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80090d0:	e040      	b.n	8009154 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80090d2:	6839      	ldr	r1, [r7, #0]
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 fc3e 	bl	8009956 <USBD_CtlError>
              break;
 80090da:	e03b      	b.n	8009154 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	885b      	ldrh	r3, [r3, #2]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d136      	bne.n	8009152 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80090e4:	7bbb      	ldrb	r3, [r7, #14]
 80090e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d004      	beq.n	80090f8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80090ee:	7bbb      	ldrb	r3, [r7, #14]
 80090f0:	4619      	mov	r1, r3
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f001 f915 	bl	800a322 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 fcf7 	bl	8009aec <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80090fe:	7bbb      	ldrb	r3, [r7, #14]
 8009100:	4619      	mov	r1, r3
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f7ff fde2 	bl	8008ccc <USBD_CoreFindEP>
 8009108:	4603      	mov	r3, r0
 800910a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800910c:	7b7b      	ldrb	r3, [r7, #13]
 800910e:	2bff      	cmp	r3, #255	; 0xff
 8009110:	d01f      	beq.n	8009152 <USBD_StdEPReq+0x1c6>
 8009112:	7b7b      	ldrb	r3, [r7, #13]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d11c      	bne.n	8009152 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009118:	7b7a      	ldrb	r2, [r7, #13]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009120:	7b7a      	ldrb	r2, [r7, #13]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	32ae      	adds	r2, #174	; 0xae
 8009126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800912a:	689b      	ldr	r3, [r3, #8]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d010      	beq.n	8009152 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009130:	7b7a      	ldrb	r2, [r7, #13]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	32ae      	adds	r2, #174	; 0xae
 8009136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800913a:	689b      	ldr	r3, [r3, #8]
 800913c:	6839      	ldr	r1, [r7, #0]
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	4798      	blx	r3
 8009142:	4603      	mov	r3, r0
 8009144:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009146:	e004      	b.n	8009152 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009148:	6839      	ldr	r1, [r7, #0]
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 fc03 	bl	8009956 <USBD_CtlError>
              break;
 8009150:	e000      	b.n	8009154 <USBD_StdEPReq+0x1c8>
              break;
 8009152:	bf00      	nop
          }
          break;
 8009154:	e0ab      	b.n	80092ae <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800915c:	b2db      	uxtb	r3, r3
 800915e:	2b02      	cmp	r3, #2
 8009160:	d002      	beq.n	8009168 <USBD_StdEPReq+0x1dc>
 8009162:	2b03      	cmp	r3, #3
 8009164:	d032      	beq.n	80091cc <USBD_StdEPReq+0x240>
 8009166:	e097      	b.n	8009298 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009168:	7bbb      	ldrb	r3, [r7, #14]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d007      	beq.n	800917e <USBD_StdEPReq+0x1f2>
 800916e:	7bbb      	ldrb	r3, [r7, #14]
 8009170:	2b80      	cmp	r3, #128	; 0x80
 8009172:	d004      	beq.n	800917e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009174:	6839      	ldr	r1, [r7, #0]
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 fbed 	bl	8009956 <USBD_CtlError>
                break;
 800917c:	e091      	b.n	80092a2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800917e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009182:	2b00      	cmp	r3, #0
 8009184:	da0b      	bge.n	800919e <USBD_StdEPReq+0x212>
 8009186:	7bbb      	ldrb	r3, [r7, #14]
 8009188:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800918c:	4613      	mov	r3, r2
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	4413      	add	r3, r2
 8009192:	009b      	lsls	r3, r3, #2
 8009194:	3310      	adds	r3, #16
 8009196:	687a      	ldr	r2, [r7, #4]
 8009198:	4413      	add	r3, r2
 800919a:	3304      	adds	r3, #4
 800919c:	e00b      	b.n	80091b6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800919e:	7bbb      	ldrb	r3, [r7, #14]
 80091a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091a4:	4613      	mov	r3, r2
 80091a6:	009b      	lsls	r3, r3, #2
 80091a8:	4413      	add	r3, r2
 80091aa:	009b      	lsls	r3, r3, #2
 80091ac:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	4413      	add	r3, r2
 80091b4:	3304      	adds	r3, #4
 80091b6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	2200      	movs	r2, #0
 80091bc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	2202      	movs	r2, #2
 80091c2:	4619      	mov	r1, r3
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f000 fc37 	bl	8009a38 <USBD_CtlSendData>
              break;
 80091ca:	e06a      	b.n	80092a2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80091cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	da11      	bge.n	80091f8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80091d4:	7bbb      	ldrb	r3, [r7, #14]
 80091d6:	f003 020f 	and.w	r2, r3, #15
 80091da:	6879      	ldr	r1, [r7, #4]
 80091dc:	4613      	mov	r3, r2
 80091de:	009b      	lsls	r3, r3, #2
 80091e0:	4413      	add	r3, r2
 80091e2:	009b      	lsls	r3, r3, #2
 80091e4:	440b      	add	r3, r1
 80091e6:	3324      	adds	r3, #36	; 0x24
 80091e8:	881b      	ldrh	r3, [r3, #0]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d117      	bne.n	800921e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80091ee:	6839      	ldr	r1, [r7, #0]
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f000 fbb0 	bl	8009956 <USBD_CtlError>
                  break;
 80091f6:	e054      	b.n	80092a2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80091f8:	7bbb      	ldrb	r3, [r7, #14]
 80091fa:	f003 020f 	and.w	r2, r3, #15
 80091fe:	6879      	ldr	r1, [r7, #4]
 8009200:	4613      	mov	r3, r2
 8009202:	009b      	lsls	r3, r3, #2
 8009204:	4413      	add	r3, r2
 8009206:	009b      	lsls	r3, r3, #2
 8009208:	440b      	add	r3, r1
 800920a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800920e:	881b      	ldrh	r3, [r3, #0]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d104      	bne.n	800921e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009214:	6839      	ldr	r1, [r7, #0]
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 fb9d 	bl	8009956 <USBD_CtlError>
                  break;
 800921c:	e041      	b.n	80092a2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800921e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009222:	2b00      	cmp	r3, #0
 8009224:	da0b      	bge.n	800923e <USBD_StdEPReq+0x2b2>
 8009226:	7bbb      	ldrb	r3, [r7, #14]
 8009228:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800922c:	4613      	mov	r3, r2
 800922e:	009b      	lsls	r3, r3, #2
 8009230:	4413      	add	r3, r2
 8009232:	009b      	lsls	r3, r3, #2
 8009234:	3310      	adds	r3, #16
 8009236:	687a      	ldr	r2, [r7, #4]
 8009238:	4413      	add	r3, r2
 800923a:	3304      	adds	r3, #4
 800923c:	e00b      	b.n	8009256 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800923e:	7bbb      	ldrb	r3, [r7, #14]
 8009240:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009244:	4613      	mov	r3, r2
 8009246:	009b      	lsls	r3, r3, #2
 8009248:	4413      	add	r3, r2
 800924a:	009b      	lsls	r3, r3, #2
 800924c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009250:	687a      	ldr	r2, [r7, #4]
 8009252:	4413      	add	r3, r2
 8009254:	3304      	adds	r3, #4
 8009256:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009258:	7bbb      	ldrb	r3, [r7, #14]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d002      	beq.n	8009264 <USBD_StdEPReq+0x2d8>
 800925e:	7bbb      	ldrb	r3, [r7, #14]
 8009260:	2b80      	cmp	r3, #128	; 0x80
 8009262:	d103      	bne.n	800926c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	2200      	movs	r2, #0
 8009268:	601a      	str	r2, [r3, #0]
 800926a:	e00e      	b.n	800928a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800926c:	7bbb      	ldrb	r3, [r7, #14]
 800926e:	4619      	mov	r1, r3
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f001 f875 	bl	800a360 <USBD_LL_IsStallEP>
 8009276:	4603      	mov	r3, r0
 8009278:	2b00      	cmp	r3, #0
 800927a:	d003      	beq.n	8009284 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	2201      	movs	r2, #1
 8009280:	601a      	str	r2, [r3, #0]
 8009282:	e002      	b.n	800928a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	2200      	movs	r2, #0
 8009288:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	2202      	movs	r2, #2
 800928e:	4619      	mov	r1, r3
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 fbd1 	bl	8009a38 <USBD_CtlSendData>
              break;
 8009296:	e004      	b.n	80092a2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009298:	6839      	ldr	r1, [r7, #0]
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 fb5b 	bl	8009956 <USBD_CtlError>
              break;
 80092a0:	bf00      	nop
          }
          break;
 80092a2:	e004      	b.n	80092ae <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80092a4:	6839      	ldr	r1, [r7, #0]
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f000 fb55 	bl	8009956 <USBD_CtlError>
          break;
 80092ac:	bf00      	nop
      }
      break;
 80092ae:	e005      	b.n	80092bc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80092b0:	6839      	ldr	r1, [r7, #0]
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f000 fb4f 	bl	8009956 <USBD_CtlError>
      break;
 80092b8:	e000      	b.n	80092bc <USBD_StdEPReq+0x330>
      break;
 80092ba:	bf00      	nop
  }

  return ret;
 80092bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3710      	adds	r7, #16
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
	...

080092c8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b084      	sub	sp, #16
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80092d2:	2300      	movs	r3, #0
 80092d4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80092d6:	2300      	movs	r3, #0
 80092d8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80092da:	2300      	movs	r3, #0
 80092dc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	885b      	ldrh	r3, [r3, #2]
 80092e2:	0a1b      	lsrs	r3, r3, #8
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	3b01      	subs	r3, #1
 80092e8:	2b06      	cmp	r3, #6
 80092ea:	f200 8128 	bhi.w	800953e <USBD_GetDescriptor+0x276>
 80092ee:	a201      	add	r2, pc, #4	; (adr r2, 80092f4 <USBD_GetDescriptor+0x2c>)
 80092f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092f4:	08009311 	.word	0x08009311
 80092f8:	08009329 	.word	0x08009329
 80092fc:	08009369 	.word	0x08009369
 8009300:	0800953f 	.word	0x0800953f
 8009304:	0800953f 	.word	0x0800953f
 8009308:	080094df 	.word	0x080094df
 800930c:	0800950b 	.word	0x0800950b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	687a      	ldr	r2, [r7, #4]
 800931a:	7c12      	ldrb	r2, [r2, #16]
 800931c:	f107 0108 	add.w	r1, r7, #8
 8009320:	4610      	mov	r0, r2
 8009322:	4798      	blx	r3
 8009324:	60f8      	str	r0, [r7, #12]
      break;
 8009326:	e112      	b.n	800954e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	7c1b      	ldrb	r3, [r3, #16]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d10d      	bne.n	800934c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009338:	f107 0208 	add.w	r2, r7, #8
 800933c:	4610      	mov	r0, r2
 800933e:	4798      	blx	r3
 8009340:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	3301      	adds	r3, #1
 8009346:	2202      	movs	r2, #2
 8009348:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800934a:	e100      	b.n	800954e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009354:	f107 0208 	add.w	r2, r7, #8
 8009358:	4610      	mov	r0, r2
 800935a:	4798      	blx	r3
 800935c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	3301      	adds	r3, #1
 8009362:	2202      	movs	r2, #2
 8009364:	701a      	strb	r2, [r3, #0]
      break;
 8009366:	e0f2      	b.n	800954e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	885b      	ldrh	r3, [r3, #2]
 800936c:	b2db      	uxtb	r3, r3
 800936e:	2b05      	cmp	r3, #5
 8009370:	f200 80ac 	bhi.w	80094cc <USBD_GetDescriptor+0x204>
 8009374:	a201      	add	r2, pc, #4	; (adr r2, 800937c <USBD_GetDescriptor+0xb4>)
 8009376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800937a:	bf00      	nop
 800937c:	08009395 	.word	0x08009395
 8009380:	080093c9 	.word	0x080093c9
 8009384:	080093fd 	.word	0x080093fd
 8009388:	08009431 	.word	0x08009431
 800938c:	08009465 	.word	0x08009465
 8009390:	08009499 	.word	0x08009499
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800939a:	685b      	ldr	r3, [r3, #4]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d00b      	beq.n	80093b8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	687a      	ldr	r2, [r7, #4]
 80093aa:	7c12      	ldrb	r2, [r2, #16]
 80093ac:	f107 0108 	add.w	r1, r7, #8
 80093b0:	4610      	mov	r0, r2
 80093b2:	4798      	blx	r3
 80093b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093b6:	e091      	b.n	80094dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093b8:	6839      	ldr	r1, [r7, #0]
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f000 facb 	bl	8009956 <USBD_CtlError>
            err++;
 80093c0:	7afb      	ldrb	r3, [r7, #11]
 80093c2:	3301      	adds	r3, #1
 80093c4:	72fb      	strb	r3, [r7, #11]
          break;
 80093c6:	e089      	b.n	80094dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093ce:	689b      	ldr	r3, [r3, #8]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d00b      	beq.n	80093ec <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	687a      	ldr	r2, [r7, #4]
 80093de:	7c12      	ldrb	r2, [r2, #16]
 80093e0:	f107 0108 	add.w	r1, r7, #8
 80093e4:	4610      	mov	r0, r2
 80093e6:	4798      	blx	r3
 80093e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093ea:	e077      	b.n	80094dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093ec:	6839      	ldr	r1, [r7, #0]
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 fab1 	bl	8009956 <USBD_CtlError>
            err++;
 80093f4:	7afb      	ldrb	r3, [r7, #11]
 80093f6:	3301      	adds	r3, #1
 80093f8:	72fb      	strb	r3, [r7, #11]
          break;
 80093fa:	e06f      	b.n	80094dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d00b      	beq.n	8009420 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800940e:	68db      	ldr	r3, [r3, #12]
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	7c12      	ldrb	r2, [r2, #16]
 8009414:	f107 0108 	add.w	r1, r7, #8
 8009418:	4610      	mov	r0, r2
 800941a:	4798      	blx	r3
 800941c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800941e:	e05d      	b.n	80094dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009420:	6839      	ldr	r1, [r7, #0]
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 fa97 	bl	8009956 <USBD_CtlError>
            err++;
 8009428:	7afb      	ldrb	r3, [r7, #11]
 800942a:	3301      	adds	r3, #1
 800942c:	72fb      	strb	r3, [r7, #11]
          break;
 800942e:	e055      	b.n	80094dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009436:	691b      	ldr	r3, [r3, #16]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d00b      	beq.n	8009454 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009442:	691b      	ldr	r3, [r3, #16]
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	7c12      	ldrb	r2, [r2, #16]
 8009448:	f107 0108 	add.w	r1, r7, #8
 800944c:	4610      	mov	r0, r2
 800944e:	4798      	blx	r3
 8009450:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009452:	e043      	b.n	80094dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009454:	6839      	ldr	r1, [r7, #0]
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 fa7d 	bl	8009956 <USBD_CtlError>
            err++;
 800945c:	7afb      	ldrb	r3, [r7, #11]
 800945e:	3301      	adds	r3, #1
 8009460:	72fb      	strb	r3, [r7, #11]
          break;
 8009462:	e03b      	b.n	80094dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800946a:	695b      	ldr	r3, [r3, #20]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d00b      	beq.n	8009488 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009476:	695b      	ldr	r3, [r3, #20]
 8009478:	687a      	ldr	r2, [r7, #4]
 800947a:	7c12      	ldrb	r2, [r2, #16]
 800947c:	f107 0108 	add.w	r1, r7, #8
 8009480:	4610      	mov	r0, r2
 8009482:	4798      	blx	r3
 8009484:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009486:	e029      	b.n	80094dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009488:	6839      	ldr	r1, [r7, #0]
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 fa63 	bl	8009956 <USBD_CtlError>
            err++;
 8009490:	7afb      	ldrb	r3, [r7, #11]
 8009492:	3301      	adds	r3, #1
 8009494:	72fb      	strb	r3, [r7, #11]
          break;
 8009496:	e021      	b.n	80094dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800949e:	699b      	ldr	r3, [r3, #24]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d00b      	beq.n	80094bc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094aa:	699b      	ldr	r3, [r3, #24]
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	7c12      	ldrb	r2, [r2, #16]
 80094b0:	f107 0108 	add.w	r1, r7, #8
 80094b4:	4610      	mov	r0, r2
 80094b6:	4798      	blx	r3
 80094b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094ba:	e00f      	b.n	80094dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80094bc:	6839      	ldr	r1, [r7, #0]
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 fa49 	bl	8009956 <USBD_CtlError>
            err++;
 80094c4:	7afb      	ldrb	r3, [r7, #11]
 80094c6:	3301      	adds	r3, #1
 80094c8:	72fb      	strb	r3, [r7, #11]
          break;
 80094ca:	e007      	b.n	80094dc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80094cc:	6839      	ldr	r1, [r7, #0]
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 fa41 	bl	8009956 <USBD_CtlError>
          err++;
 80094d4:	7afb      	ldrb	r3, [r7, #11]
 80094d6:	3301      	adds	r3, #1
 80094d8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80094da:	bf00      	nop
      }
      break;
 80094dc:	e037      	b.n	800954e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	7c1b      	ldrb	r3, [r3, #16]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d109      	bne.n	80094fa <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094ee:	f107 0208 	add.w	r2, r7, #8
 80094f2:	4610      	mov	r0, r2
 80094f4:	4798      	blx	r3
 80094f6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80094f8:	e029      	b.n	800954e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80094fa:	6839      	ldr	r1, [r7, #0]
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 fa2a 	bl	8009956 <USBD_CtlError>
        err++;
 8009502:	7afb      	ldrb	r3, [r7, #11]
 8009504:	3301      	adds	r3, #1
 8009506:	72fb      	strb	r3, [r7, #11]
      break;
 8009508:	e021      	b.n	800954e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	7c1b      	ldrb	r3, [r3, #16]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d10d      	bne.n	800952e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800951a:	f107 0208 	add.w	r2, r7, #8
 800951e:	4610      	mov	r0, r2
 8009520:	4798      	blx	r3
 8009522:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	3301      	adds	r3, #1
 8009528:	2207      	movs	r2, #7
 800952a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800952c:	e00f      	b.n	800954e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800952e:	6839      	ldr	r1, [r7, #0]
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f000 fa10 	bl	8009956 <USBD_CtlError>
        err++;
 8009536:	7afb      	ldrb	r3, [r7, #11]
 8009538:	3301      	adds	r3, #1
 800953a:	72fb      	strb	r3, [r7, #11]
      break;
 800953c:	e007      	b.n	800954e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800953e:	6839      	ldr	r1, [r7, #0]
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f000 fa08 	bl	8009956 <USBD_CtlError>
      err++;
 8009546:	7afb      	ldrb	r3, [r7, #11]
 8009548:	3301      	adds	r3, #1
 800954a:	72fb      	strb	r3, [r7, #11]
      break;
 800954c:	bf00      	nop
  }

  if (err != 0U)
 800954e:	7afb      	ldrb	r3, [r7, #11]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d11e      	bne.n	8009592 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	88db      	ldrh	r3, [r3, #6]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d016      	beq.n	800958a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800955c:	893b      	ldrh	r3, [r7, #8]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d00e      	beq.n	8009580 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	88da      	ldrh	r2, [r3, #6]
 8009566:	893b      	ldrh	r3, [r7, #8]
 8009568:	4293      	cmp	r3, r2
 800956a:	bf28      	it	cs
 800956c:	4613      	movcs	r3, r2
 800956e:	b29b      	uxth	r3, r3
 8009570:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009572:	893b      	ldrh	r3, [r7, #8]
 8009574:	461a      	mov	r2, r3
 8009576:	68f9      	ldr	r1, [r7, #12]
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f000 fa5d 	bl	8009a38 <USBD_CtlSendData>
 800957e:	e009      	b.n	8009594 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009580:	6839      	ldr	r1, [r7, #0]
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f000 f9e7 	bl	8009956 <USBD_CtlError>
 8009588:	e004      	b.n	8009594 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f000 faae 	bl	8009aec <USBD_CtlSendStatus>
 8009590:	e000      	b.n	8009594 <USBD_GetDescriptor+0x2cc>
    return;
 8009592:	bf00      	nop
  }
}
 8009594:	3710      	adds	r7, #16
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}
 800959a:	bf00      	nop

0800959c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b084      	sub	sp, #16
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	889b      	ldrh	r3, [r3, #4]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d131      	bne.n	8009612 <USBD_SetAddress+0x76>
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	88db      	ldrh	r3, [r3, #6]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d12d      	bne.n	8009612 <USBD_SetAddress+0x76>
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	885b      	ldrh	r3, [r3, #2]
 80095ba:	2b7f      	cmp	r3, #127	; 0x7f
 80095bc:	d829      	bhi.n	8009612 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	885b      	ldrh	r3, [r3, #2]
 80095c2:	b2db      	uxtb	r3, r3
 80095c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095c8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095d0:	b2db      	uxtb	r3, r3
 80095d2:	2b03      	cmp	r3, #3
 80095d4:	d104      	bne.n	80095e0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80095d6:	6839      	ldr	r1, [r7, #0]
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 f9bc 	bl	8009956 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095de:	e01d      	b.n	800961c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	7bfa      	ldrb	r2, [r7, #15]
 80095e4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80095e8:	7bfb      	ldrb	r3, [r7, #15]
 80095ea:	4619      	mov	r1, r3
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f000 fee3 	bl	800a3b8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f000 fa7a 	bl	8009aec <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80095f8:	7bfb      	ldrb	r3, [r7, #15]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d004      	beq.n	8009608 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2202      	movs	r2, #2
 8009602:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009606:	e009      	b.n	800961c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2201      	movs	r2, #1
 800960c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009610:	e004      	b.n	800961c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009612:	6839      	ldr	r1, [r7, #0]
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f000 f99e 	bl	8009956 <USBD_CtlError>
  }
}
 800961a:	bf00      	nop
 800961c:	bf00      	nop
 800961e:	3710      	adds	r7, #16
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b084      	sub	sp, #16
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800962e:	2300      	movs	r3, #0
 8009630:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	885b      	ldrh	r3, [r3, #2]
 8009636:	b2da      	uxtb	r2, r3
 8009638:	4b4e      	ldr	r3, [pc, #312]	; (8009774 <USBD_SetConfig+0x150>)
 800963a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800963c:	4b4d      	ldr	r3, [pc, #308]	; (8009774 <USBD_SetConfig+0x150>)
 800963e:	781b      	ldrb	r3, [r3, #0]
 8009640:	2b01      	cmp	r3, #1
 8009642:	d905      	bls.n	8009650 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009644:	6839      	ldr	r1, [r7, #0]
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f000 f985 	bl	8009956 <USBD_CtlError>
    return USBD_FAIL;
 800964c:	2303      	movs	r3, #3
 800964e:	e08c      	b.n	800976a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009656:	b2db      	uxtb	r3, r3
 8009658:	2b02      	cmp	r3, #2
 800965a:	d002      	beq.n	8009662 <USBD_SetConfig+0x3e>
 800965c:	2b03      	cmp	r3, #3
 800965e:	d029      	beq.n	80096b4 <USBD_SetConfig+0x90>
 8009660:	e075      	b.n	800974e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009662:	4b44      	ldr	r3, [pc, #272]	; (8009774 <USBD_SetConfig+0x150>)
 8009664:	781b      	ldrb	r3, [r3, #0]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d020      	beq.n	80096ac <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800966a:	4b42      	ldr	r3, [pc, #264]	; (8009774 <USBD_SetConfig+0x150>)
 800966c:	781b      	ldrb	r3, [r3, #0]
 800966e:	461a      	mov	r2, r3
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009674:	4b3f      	ldr	r3, [pc, #252]	; (8009774 <USBD_SetConfig+0x150>)
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	4619      	mov	r1, r3
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f7fe ffe7 	bl	800864e <USBD_SetClassConfig>
 8009680:	4603      	mov	r3, r0
 8009682:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009684:	7bfb      	ldrb	r3, [r7, #15]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d008      	beq.n	800969c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800968a:	6839      	ldr	r1, [r7, #0]
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f000 f962 	bl	8009956 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2202      	movs	r2, #2
 8009696:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800969a:	e065      	b.n	8009768 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f000 fa25 	bl	8009aec <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2203      	movs	r2, #3
 80096a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80096aa:	e05d      	b.n	8009768 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f000 fa1d 	bl	8009aec <USBD_CtlSendStatus>
      break;
 80096b2:	e059      	b.n	8009768 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80096b4:	4b2f      	ldr	r3, [pc, #188]	; (8009774 <USBD_SetConfig+0x150>)
 80096b6:	781b      	ldrb	r3, [r3, #0]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d112      	bne.n	80096e2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2202      	movs	r2, #2
 80096c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80096c4:	4b2b      	ldr	r3, [pc, #172]	; (8009774 <USBD_SetConfig+0x150>)
 80096c6:	781b      	ldrb	r3, [r3, #0]
 80096c8:	461a      	mov	r2, r3
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80096ce:	4b29      	ldr	r3, [pc, #164]	; (8009774 <USBD_SetConfig+0x150>)
 80096d0:	781b      	ldrb	r3, [r3, #0]
 80096d2:	4619      	mov	r1, r3
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f7fe ffd6 	bl	8008686 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f000 fa06 	bl	8009aec <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80096e0:	e042      	b.n	8009768 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80096e2:	4b24      	ldr	r3, [pc, #144]	; (8009774 <USBD_SetConfig+0x150>)
 80096e4:	781b      	ldrb	r3, [r3, #0]
 80096e6:	461a      	mov	r2, r3
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	429a      	cmp	r2, r3
 80096ee:	d02a      	beq.n	8009746 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	4619      	mov	r1, r3
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f7fe ffc4 	bl	8008686 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80096fe:	4b1d      	ldr	r3, [pc, #116]	; (8009774 <USBD_SetConfig+0x150>)
 8009700:	781b      	ldrb	r3, [r3, #0]
 8009702:	461a      	mov	r2, r3
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009708:	4b1a      	ldr	r3, [pc, #104]	; (8009774 <USBD_SetConfig+0x150>)
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	4619      	mov	r1, r3
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f7fe ff9d 	bl	800864e <USBD_SetClassConfig>
 8009714:	4603      	mov	r3, r0
 8009716:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009718:	7bfb      	ldrb	r3, [r7, #15]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d00f      	beq.n	800973e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800971e:	6839      	ldr	r1, [r7, #0]
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f000 f918 	bl	8009956 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	685b      	ldr	r3, [r3, #4]
 800972a:	b2db      	uxtb	r3, r3
 800972c:	4619      	mov	r1, r3
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f7fe ffa9 	bl	8008686 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2202      	movs	r2, #2
 8009738:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800973c:	e014      	b.n	8009768 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 f9d4 	bl	8009aec <USBD_CtlSendStatus>
      break;
 8009744:	e010      	b.n	8009768 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f000 f9d0 	bl	8009aec <USBD_CtlSendStatus>
      break;
 800974c:	e00c      	b.n	8009768 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800974e:	6839      	ldr	r1, [r7, #0]
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f000 f900 	bl	8009956 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009756:	4b07      	ldr	r3, [pc, #28]	; (8009774 <USBD_SetConfig+0x150>)
 8009758:	781b      	ldrb	r3, [r3, #0]
 800975a:	4619      	mov	r1, r3
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f7fe ff92 	bl	8008686 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009762:	2303      	movs	r3, #3
 8009764:	73fb      	strb	r3, [r7, #15]
      break;
 8009766:	bf00      	nop
  }

  return ret;
 8009768:	7bfb      	ldrb	r3, [r7, #15]
}
 800976a:	4618      	mov	r0, r3
 800976c:	3710      	adds	r7, #16
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
 8009772:	bf00      	nop
 8009774:	20013004 	.word	0x20013004

08009778 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b082      	sub	sp, #8
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	88db      	ldrh	r3, [r3, #6]
 8009786:	2b01      	cmp	r3, #1
 8009788:	d004      	beq.n	8009794 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800978a:	6839      	ldr	r1, [r7, #0]
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f000 f8e2 	bl	8009956 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009792:	e023      	b.n	80097dc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800979a:	b2db      	uxtb	r3, r3
 800979c:	2b02      	cmp	r3, #2
 800979e:	dc02      	bgt.n	80097a6 <USBD_GetConfig+0x2e>
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	dc03      	bgt.n	80097ac <USBD_GetConfig+0x34>
 80097a4:	e015      	b.n	80097d2 <USBD_GetConfig+0x5a>
 80097a6:	2b03      	cmp	r3, #3
 80097a8:	d00b      	beq.n	80097c2 <USBD_GetConfig+0x4a>
 80097aa:	e012      	b.n	80097d2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2200      	movs	r2, #0
 80097b0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	3308      	adds	r3, #8
 80097b6:	2201      	movs	r2, #1
 80097b8:	4619      	mov	r1, r3
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f000 f93c 	bl	8009a38 <USBD_CtlSendData>
        break;
 80097c0:	e00c      	b.n	80097dc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	3304      	adds	r3, #4
 80097c6:	2201      	movs	r2, #1
 80097c8:	4619      	mov	r1, r3
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 f934 	bl	8009a38 <USBD_CtlSendData>
        break;
 80097d0:	e004      	b.n	80097dc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80097d2:	6839      	ldr	r1, [r7, #0]
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f000 f8be 	bl	8009956 <USBD_CtlError>
        break;
 80097da:	bf00      	nop
}
 80097dc:	bf00      	nop
 80097de:	3708      	adds	r7, #8
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097f4:	b2db      	uxtb	r3, r3
 80097f6:	3b01      	subs	r3, #1
 80097f8:	2b02      	cmp	r3, #2
 80097fa:	d81e      	bhi.n	800983a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	88db      	ldrh	r3, [r3, #6]
 8009800:	2b02      	cmp	r3, #2
 8009802:	d004      	beq.n	800980e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009804:	6839      	ldr	r1, [r7, #0]
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f000 f8a5 	bl	8009956 <USBD_CtlError>
        break;
 800980c:	e01a      	b.n	8009844 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2201      	movs	r2, #1
 8009812:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800981a:	2b00      	cmp	r3, #0
 800981c:	d005      	beq.n	800982a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	68db      	ldr	r3, [r3, #12]
 8009822:	f043 0202 	orr.w	r2, r3, #2
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	330c      	adds	r3, #12
 800982e:	2202      	movs	r2, #2
 8009830:	4619      	mov	r1, r3
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f000 f900 	bl	8009a38 <USBD_CtlSendData>
      break;
 8009838:	e004      	b.n	8009844 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800983a:	6839      	ldr	r1, [r7, #0]
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f000 f88a 	bl	8009956 <USBD_CtlError>
      break;
 8009842:	bf00      	nop
  }
}
 8009844:	bf00      	nop
 8009846:	3708      	adds	r7, #8
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b082      	sub	sp, #8
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	885b      	ldrh	r3, [r3, #2]
 800985a:	2b01      	cmp	r3, #1
 800985c:	d107      	bne.n	800986e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2201      	movs	r2, #1
 8009862:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 f940 	bl	8009aec <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800986c:	e013      	b.n	8009896 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	885b      	ldrh	r3, [r3, #2]
 8009872:	2b02      	cmp	r3, #2
 8009874:	d10b      	bne.n	800988e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	889b      	ldrh	r3, [r3, #4]
 800987a:	0a1b      	lsrs	r3, r3, #8
 800987c:	b29b      	uxth	r3, r3
 800987e:	b2da      	uxtb	r2, r3
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 f930 	bl	8009aec <USBD_CtlSendStatus>
}
 800988c:	e003      	b.n	8009896 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800988e:	6839      	ldr	r1, [r7, #0]
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f000 f860 	bl	8009956 <USBD_CtlError>
}
 8009896:	bf00      	nop
 8009898:	3708      	adds	r7, #8
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800989e:	b580      	push	{r7, lr}
 80098a0:	b082      	sub	sp, #8
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
 80098a6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098ae:	b2db      	uxtb	r3, r3
 80098b0:	3b01      	subs	r3, #1
 80098b2:	2b02      	cmp	r3, #2
 80098b4:	d80b      	bhi.n	80098ce <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	885b      	ldrh	r3, [r3, #2]
 80098ba:	2b01      	cmp	r3, #1
 80098bc:	d10c      	bne.n	80098d8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2200      	movs	r2, #0
 80098c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f000 f910 	bl	8009aec <USBD_CtlSendStatus>
      }
      break;
 80098cc:	e004      	b.n	80098d8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80098ce:	6839      	ldr	r1, [r7, #0]
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f000 f840 	bl	8009956 <USBD_CtlError>
      break;
 80098d6:	e000      	b.n	80098da <USBD_ClrFeature+0x3c>
      break;
 80098d8:	bf00      	nop
  }
}
 80098da:	bf00      	nop
 80098dc:	3708      	adds	r7, #8
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}

080098e2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80098e2:	b580      	push	{r7, lr}
 80098e4:	b084      	sub	sp, #16
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	6078      	str	r0, [r7, #4]
 80098ea:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	781a      	ldrb	r2, [r3, #0]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	3301      	adds	r3, #1
 80098fc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	781a      	ldrb	r2, [r3, #0]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	3301      	adds	r3, #1
 800990a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800990c:	68f8      	ldr	r0, [r7, #12]
 800990e:	f7ff fa41 	bl	8008d94 <SWAPBYTE>
 8009912:	4603      	mov	r3, r0
 8009914:	461a      	mov	r2, r3
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	3301      	adds	r3, #1
 800991e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	3301      	adds	r3, #1
 8009924:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009926:	68f8      	ldr	r0, [r7, #12]
 8009928:	f7ff fa34 	bl	8008d94 <SWAPBYTE>
 800992c:	4603      	mov	r3, r0
 800992e:	461a      	mov	r2, r3
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	3301      	adds	r3, #1
 8009938:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	3301      	adds	r3, #1
 800993e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009940:	68f8      	ldr	r0, [r7, #12]
 8009942:	f7ff fa27 	bl	8008d94 <SWAPBYTE>
 8009946:	4603      	mov	r3, r0
 8009948:	461a      	mov	r2, r3
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	80da      	strh	r2, [r3, #6]
}
 800994e:	bf00      	nop
 8009950:	3710      	adds	r7, #16
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}

08009956 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009956:	b580      	push	{r7, lr}
 8009958:	b082      	sub	sp, #8
 800995a:	af00      	add	r7, sp, #0
 800995c:	6078      	str	r0, [r7, #4]
 800995e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009960:	2180      	movs	r1, #128	; 0x80
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f000 fcbe 	bl	800a2e4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009968:	2100      	movs	r1, #0
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 fcba 	bl	800a2e4 <USBD_LL_StallEP>
}
 8009970:	bf00      	nop
 8009972:	3708      	adds	r7, #8
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}

08009978 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b086      	sub	sp, #24
 800997c:	af00      	add	r7, sp, #0
 800997e:	60f8      	str	r0, [r7, #12]
 8009980:	60b9      	str	r1, [r7, #8]
 8009982:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009984:	2300      	movs	r3, #0
 8009986:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d036      	beq.n	80099fc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009992:	6938      	ldr	r0, [r7, #16]
 8009994:	f000 f836 	bl	8009a04 <USBD_GetLen>
 8009998:	4603      	mov	r3, r0
 800999a:	3301      	adds	r3, #1
 800999c:	b29b      	uxth	r3, r3
 800999e:	005b      	lsls	r3, r3, #1
 80099a0:	b29a      	uxth	r2, r3
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80099a6:	7dfb      	ldrb	r3, [r7, #23]
 80099a8:	68ba      	ldr	r2, [r7, #8]
 80099aa:	4413      	add	r3, r2
 80099ac:	687a      	ldr	r2, [r7, #4]
 80099ae:	7812      	ldrb	r2, [r2, #0]
 80099b0:	701a      	strb	r2, [r3, #0]
  idx++;
 80099b2:	7dfb      	ldrb	r3, [r7, #23]
 80099b4:	3301      	adds	r3, #1
 80099b6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80099b8:	7dfb      	ldrb	r3, [r7, #23]
 80099ba:	68ba      	ldr	r2, [r7, #8]
 80099bc:	4413      	add	r3, r2
 80099be:	2203      	movs	r2, #3
 80099c0:	701a      	strb	r2, [r3, #0]
  idx++;
 80099c2:	7dfb      	ldrb	r3, [r7, #23]
 80099c4:	3301      	adds	r3, #1
 80099c6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80099c8:	e013      	b.n	80099f2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80099ca:	7dfb      	ldrb	r3, [r7, #23]
 80099cc:	68ba      	ldr	r2, [r7, #8]
 80099ce:	4413      	add	r3, r2
 80099d0:	693a      	ldr	r2, [r7, #16]
 80099d2:	7812      	ldrb	r2, [r2, #0]
 80099d4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	3301      	adds	r3, #1
 80099da:	613b      	str	r3, [r7, #16]
    idx++;
 80099dc:	7dfb      	ldrb	r3, [r7, #23]
 80099de:	3301      	adds	r3, #1
 80099e0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80099e2:	7dfb      	ldrb	r3, [r7, #23]
 80099e4:	68ba      	ldr	r2, [r7, #8]
 80099e6:	4413      	add	r3, r2
 80099e8:	2200      	movs	r2, #0
 80099ea:	701a      	strb	r2, [r3, #0]
    idx++;
 80099ec:	7dfb      	ldrb	r3, [r7, #23]
 80099ee:	3301      	adds	r3, #1
 80099f0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d1e7      	bne.n	80099ca <USBD_GetString+0x52>
 80099fa:	e000      	b.n	80099fe <USBD_GetString+0x86>
    return;
 80099fc:	bf00      	nop
  }
}
 80099fe:	3718      	adds	r7, #24
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}

08009a04 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b085      	sub	sp, #20
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009a14:	e005      	b.n	8009a22 <USBD_GetLen+0x1e>
  {
    len++;
 8009a16:	7bfb      	ldrb	r3, [r7, #15]
 8009a18:	3301      	adds	r3, #1
 8009a1a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	3301      	adds	r3, #1
 8009a20:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	781b      	ldrb	r3, [r3, #0]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d1f5      	bne.n	8009a16 <USBD_GetLen+0x12>
  }

  return len;
 8009a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3714      	adds	r7, #20
 8009a30:	46bd      	mov	sp, r7
 8009a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a36:	4770      	bx	lr

08009a38 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b084      	sub	sp, #16
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	60f8      	str	r0, [r7, #12]
 8009a40:	60b9      	str	r1, [r7, #8]
 8009a42:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	2202      	movs	r2, #2
 8009a48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	687a      	ldr	r2, [r7, #4]
 8009a56:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	68ba      	ldr	r2, [r7, #8]
 8009a5c:	2100      	movs	r1, #0
 8009a5e:	68f8      	ldr	r0, [r7, #12]
 8009a60:	f000 fcc9 	bl	800a3f6 <USBD_LL_Transmit>

  return USBD_OK;
 8009a64:	2300      	movs	r3, #0
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3710      	adds	r7, #16
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}

08009a6e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009a6e:	b580      	push	{r7, lr}
 8009a70:	b084      	sub	sp, #16
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	60f8      	str	r0, [r7, #12]
 8009a76:	60b9      	str	r1, [r7, #8]
 8009a78:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	68ba      	ldr	r2, [r7, #8]
 8009a7e:	2100      	movs	r1, #0
 8009a80:	68f8      	ldr	r0, [r7, #12]
 8009a82:	f000 fcb8 	bl	800a3f6 <USBD_LL_Transmit>

  return USBD_OK;
 8009a86:	2300      	movs	r3, #0
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3710      	adds	r7, #16
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b084      	sub	sp, #16
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	60b9      	str	r1, [r7, #8]
 8009a9a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	2203      	movs	r2, #3
 8009aa0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	687a      	ldr	r2, [r7, #4]
 8009aa8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	687a      	ldr	r2, [r7, #4]
 8009ab0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	68ba      	ldr	r2, [r7, #8]
 8009ab8:	2100      	movs	r1, #0
 8009aba:	68f8      	ldr	r0, [r7, #12]
 8009abc:	f000 fcbc 	bl	800a438 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ac0:	2300      	movs	r3, #0
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3710      	adds	r7, #16
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}

08009aca <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009aca:	b580      	push	{r7, lr}
 8009acc:	b084      	sub	sp, #16
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	60f8      	str	r0, [r7, #12]
 8009ad2:	60b9      	str	r1, [r7, #8]
 8009ad4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	68ba      	ldr	r2, [r7, #8]
 8009ada:	2100      	movs	r1, #0
 8009adc:	68f8      	ldr	r0, [r7, #12]
 8009ade:	f000 fcab 	bl	800a438 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ae2:	2300      	movs	r3, #0
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3710      	adds	r7, #16
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b082      	sub	sp, #8
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2204      	movs	r2, #4
 8009af8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009afc:	2300      	movs	r3, #0
 8009afe:	2200      	movs	r2, #0
 8009b00:	2100      	movs	r1, #0
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f000 fc77 	bl	800a3f6 <USBD_LL_Transmit>

  return USBD_OK;
 8009b08:	2300      	movs	r3, #0
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3708      	adds	r7, #8
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}

08009b12 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009b12:	b580      	push	{r7, lr}
 8009b14:	b082      	sub	sp, #8
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2205      	movs	r2, #5
 8009b1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b22:	2300      	movs	r3, #0
 8009b24:	2200      	movs	r2, #0
 8009b26:	2100      	movs	r1, #0
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 fc85 	bl	800a438 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b2e:	2300      	movs	r3, #0
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	3708      	adds	r7, #8
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}

08009b38 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	4912      	ldr	r1, [pc, #72]	; (8009b88 <MX_USB_DEVICE_Init+0x50>)
 8009b40:	4812      	ldr	r0, [pc, #72]	; (8009b8c <MX_USB_DEVICE_Init+0x54>)
 8009b42:	f7fe fd07 	bl	8008554 <USBD_Init>
 8009b46:	4603      	mov	r3, r0
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d001      	beq.n	8009b50 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009b4c:	f7f6 ff06 	bl	800095c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009b50:	490f      	ldr	r1, [pc, #60]	; (8009b90 <MX_USB_DEVICE_Init+0x58>)
 8009b52:	480e      	ldr	r0, [pc, #56]	; (8009b8c <MX_USB_DEVICE_Init+0x54>)
 8009b54:	f7fe fd2e 	bl	80085b4 <USBD_RegisterClass>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d001      	beq.n	8009b62 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009b5e:	f7f6 fefd 	bl	800095c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009b62:	490c      	ldr	r1, [pc, #48]	; (8009b94 <MX_USB_DEVICE_Init+0x5c>)
 8009b64:	4809      	ldr	r0, [pc, #36]	; (8009b8c <MX_USB_DEVICE_Init+0x54>)
 8009b66:	f7fe fc65 	bl	8008434 <USBD_CDC_RegisterInterface>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d001      	beq.n	8009b74 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009b70:	f7f6 fef4 	bl	800095c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009b74:	4805      	ldr	r0, [pc, #20]	; (8009b8c <MX_USB_DEVICE_Init+0x54>)
 8009b76:	f7fe fd53 	bl	8008620 <USBD_Start>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d001      	beq.n	8009b84 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009b80:	f7f6 feec 	bl	800095c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009b84:	bf00      	nop
 8009b86:	bd80      	pop	{r7, pc}
 8009b88:	200000b4 	.word	0x200000b4
 8009b8c:	20013008 	.word	0x20013008
 8009b90:	20000020 	.word	0x20000020
 8009b94:	200000a0 	.word	0x200000a0

08009b98 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	4905      	ldr	r1, [pc, #20]	; (8009bb4 <CDC_Init_FS+0x1c>)
 8009ba0:	4805      	ldr	r0, [pc, #20]	; (8009bb8 <CDC_Init_FS+0x20>)
 8009ba2:	f7fe fc61 	bl	8008468 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009ba6:	4905      	ldr	r1, [pc, #20]	; (8009bbc <CDC_Init_FS+0x24>)
 8009ba8:	4803      	ldr	r0, [pc, #12]	; (8009bb8 <CDC_Init_FS+0x20>)
 8009baa:	f7fe fc7f 	bl	80084ac <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009bae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	bd80      	pop	{r7, pc}
 8009bb4:	20013ae4 	.word	0x20013ae4
 8009bb8:	20013008 	.word	0x20013008
 8009bbc:	200132e4 	.word	0x200132e4

08009bc0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009bc4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr

08009bd0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b083      	sub	sp, #12
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	6039      	str	r1, [r7, #0]
 8009bda:	71fb      	strb	r3, [r7, #7]
 8009bdc:	4613      	mov	r3, r2
 8009bde:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009be0:	79fb      	ldrb	r3, [r7, #7]
 8009be2:	2b23      	cmp	r3, #35	; 0x23
 8009be4:	d84a      	bhi.n	8009c7c <CDC_Control_FS+0xac>
 8009be6:	a201      	add	r2, pc, #4	; (adr r2, 8009bec <CDC_Control_FS+0x1c>)
 8009be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bec:	08009c7d 	.word	0x08009c7d
 8009bf0:	08009c7d 	.word	0x08009c7d
 8009bf4:	08009c7d 	.word	0x08009c7d
 8009bf8:	08009c7d 	.word	0x08009c7d
 8009bfc:	08009c7d 	.word	0x08009c7d
 8009c00:	08009c7d 	.word	0x08009c7d
 8009c04:	08009c7d 	.word	0x08009c7d
 8009c08:	08009c7d 	.word	0x08009c7d
 8009c0c:	08009c7d 	.word	0x08009c7d
 8009c10:	08009c7d 	.word	0x08009c7d
 8009c14:	08009c7d 	.word	0x08009c7d
 8009c18:	08009c7d 	.word	0x08009c7d
 8009c1c:	08009c7d 	.word	0x08009c7d
 8009c20:	08009c7d 	.word	0x08009c7d
 8009c24:	08009c7d 	.word	0x08009c7d
 8009c28:	08009c7d 	.word	0x08009c7d
 8009c2c:	08009c7d 	.word	0x08009c7d
 8009c30:	08009c7d 	.word	0x08009c7d
 8009c34:	08009c7d 	.word	0x08009c7d
 8009c38:	08009c7d 	.word	0x08009c7d
 8009c3c:	08009c7d 	.word	0x08009c7d
 8009c40:	08009c7d 	.word	0x08009c7d
 8009c44:	08009c7d 	.word	0x08009c7d
 8009c48:	08009c7d 	.word	0x08009c7d
 8009c4c:	08009c7d 	.word	0x08009c7d
 8009c50:	08009c7d 	.word	0x08009c7d
 8009c54:	08009c7d 	.word	0x08009c7d
 8009c58:	08009c7d 	.word	0x08009c7d
 8009c5c:	08009c7d 	.word	0x08009c7d
 8009c60:	08009c7d 	.word	0x08009c7d
 8009c64:	08009c7d 	.word	0x08009c7d
 8009c68:	08009c7d 	.word	0x08009c7d
 8009c6c:	08009c7d 	.word	0x08009c7d
 8009c70:	08009c7d 	.word	0x08009c7d
 8009c74:	08009c7d 	.word	0x08009c7d
 8009c78:	08009c7d 	.word	0x08009c7d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009c7c:	bf00      	nop
  }

  return (USBD_OK);
 8009c7e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	370c      	adds	r7, #12
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr

08009c8c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b082      	sub	sp, #8
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009c96:	6879      	ldr	r1, [r7, #4]
 8009c98:	4805      	ldr	r0, [pc, #20]	; (8009cb0 <CDC_Receive_FS+0x24>)
 8009c9a:	f7fe fc07 	bl	80084ac <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009c9e:	4804      	ldr	r0, [pc, #16]	; (8009cb0 <CDC_Receive_FS+0x24>)
 8009ca0:	f7fe fc22 	bl	80084e8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009ca4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3708      	adds	r7, #8
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}
 8009cae:	bf00      	nop
 8009cb0:	20013008 	.word	0x20013008

08009cb4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b087      	sub	sp, #28
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	60f8      	str	r0, [r7, #12]
 8009cbc:	60b9      	str	r1, [r7, #8]
 8009cbe:	4613      	mov	r3, r2
 8009cc0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009cc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	371c      	adds	r7, #28
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd4:	4770      	bx	lr
	...

08009cd8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b083      	sub	sp, #12
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	4603      	mov	r3, r0
 8009ce0:	6039      	str	r1, [r7, #0]
 8009ce2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	2212      	movs	r2, #18
 8009ce8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009cea:	4b03      	ldr	r3, [pc, #12]	; (8009cf8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	370c      	adds	r7, #12
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf6:	4770      	bx	lr
 8009cf8:	200000d0 	.word	0x200000d0

08009cfc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b083      	sub	sp, #12
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	4603      	mov	r3, r0
 8009d04:	6039      	str	r1, [r7, #0]
 8009d06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	2204      	movs	r2, #4
 8009d0c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009d0e:	4b03      	ldr	r3, [pc, #12]	; (8009d1c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	370c      	adds	r7, #12
 8009d14:	46bd      	mov	sp, r7
 8009d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1a:	4770      	bx	lr
 8009d1c:	200000e4 	.word	0x200000e4

08009d20 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b082      	sub	sp, #8
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	4603      	mov	r3, r0
 8009d28:	6039      	str	r1, [r7, #0]
 8009d2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009d2c:	79fb      	ldrb	r3, [r7, #7]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d105      	bne.n	8009d3e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009d32:	683a      	ldr	r2, [r7, #0]
 8009d34:	4907      	ldr	r1, [pc, #28]	; (8009d54 <USBD_FS_ProductStrDescriptor+0x34>)
 8009d36:	4808      	ldr	r0, [pc, #32]	; (8009d58 <USBD_FS_ProductStrDescriptor+0x38>)
 8009d38:	f7ff fe1e 	bl	8009978 <USBD_GetString>
 8009d3c:	e004      	b.n	8009d48 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009d3e:	683a      	ldr	r2, [r7, #0]
 8009d40:	4904      	ldr	r1, [pc, #16]	; (8009d54 <USBD_FS_ProductStrDescriptor+0x34>)
 8009d42:	4805      	ldr	r0, [pc, #20]	; (8009d58 <USBD_FS_ProductStrDescriptor+0x38>)
 8009d44:	f7ff fe18 	bl	8009978 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d48:	4b02      	ldr	r3, [pc, #8]	; (8009d54 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3708      	adds	r7, #8
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
 8009d52:	bf00      	nop
 8009d54:	200142e4 	.word	0x200142e4
 8009d58:	0800a5cc 	.word	0x0800a5cc

08009d5c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b082      	sub	sp, #8
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	4603      	mov	r3, r0
 8009d64:	6039      	str	r1, [r7, #0]
 8009d66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009d68:	683a      	ldr	r2, [r7, #0]
 8009d6a:	4904      	ldr	r1, [pc, #16]	; (8009d7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009d6c:	4804      	ldr	r0, [pc, #16]	; (8009d80 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009d6e:	f7ff fe03 	bl	8009978 <USBD_GetString>
  return USBD_StrDesc;
 8009d72:	4b02      	ldr	r3, [pc, #8]	; (8009d7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3708      	adds	r7, #8
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}
 8009d7c:	200142e4 	.word	0x200142e4
 8009d80:	0800a5e4 	.word	0x0800a5e4

08009d84 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b082      	sub	sp, #8
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	6039      	str	r1, [r7, #0]
 8009d8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	221a      	movs	r2, #26
 8009d94:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009d96:	f000 f843 	bl	8009e20 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009d9a:	4b02      	ldr	r3, [pc, #8]	; (8009da4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3708      	adds	r7, #8
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}
 8009da4:	200000e8 	.word	0x200000e8

08009da8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b082      	sub	sp, #8
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	4603      	mov	r3, r0
 8009db0:	6039      	str	r1, [r7, #0]
 8009db2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009db4:	79fb      	ldrb	r3, [r7, #7]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d105      	bne.n	8009dc6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009dba:	683a      	ldr	r2, [r7, #0]
 8009dbc:	4907      	ldr	r1, [pc, #28]	; (8009ddc <USBD_FS_ConfigStrDescriptor+0x34>)
 8009dbe:	4808      	ldr	r0, [pc, #32]	; (8009de0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009dc0:	f7ff fdda 	bl	8009978 <USBD_GetString>
 8009dc4:	e004      	b.n	8009dd0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009dc6:	683a      	ldr	r2, [r7, #0]
 8009dc8:	4904      	ldr	r1, [pc, #16]	; (8009ddc <USBD_FS_ConfigStrDescriptor+0x34>)
 8009dca:	4805      	ldr	r0, [pc, #20]	; (8009de0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009dcc:	f7ff fdd4 	bl	8009978 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009dd0:	4b02      	ldr	r3, [pc, #8]	; (8009ddc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3708      	adds	r7, #8
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}
 8009dda:	bf00      	nop
 8009ddc:	200142e4 	.word	0x200142e4
 8009de0:	0800a5f8 	.word	0x0800a5f8

08009de4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b082      	sub	sp, #8
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	4603      	mov	r3, r0
 8009dec:	6039      	str	r1, [r7, #0]
 8009dee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009df0:	79fb      	ldrb	r3, [r7, #7]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d105      	bne.n	8009e02 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009df6:	683a      	ldr	r2, [r7, #0]
 8009df8:	4907      	ldr	r1, [pc, #28]	; (8009e18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009dfa:	4808      	ldr	r0, [pc, #32]	; (8009e1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009dfc:	f7ff fdbc 	bl	8009978 <USBD_GetString>
 8009e00:	e004      	b.n	8009e0c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009e02:	683a      	ldr	r2, [r7, #0]
 8009e04:	4904      	ldr	r1, [pc, #16]	; (8009e18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009e06:	4805      	ldr	r0, [pc, #20]	; (8009e1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009e08:	f7ff fdb6 	bl	8009978 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e0c:	4b02      	ldr	r3, [pc, #8]	; (8009e18 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3708      	adds	r7, #8
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}
 8009e16:	bf00      	nop
 8009e18:	200142e4 	.word	0x200142e4
 8009e1c:	0800a604 	.word	0x0800a604

08009e20 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009e26:	4b0f      	ldr	r3, [pc, #60]	; (8009e64 <Get_SerialNum+0x44>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009e2c:	4b0e      	ldr	r3, [pc, #56]	; (8009e68 <Get_SerialNum+0x48>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009e32:	4b0e      	ldr	r3, [pc, #56]	; (8009e6c <Get_SerialNum+0x4c>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009e38:	68fa      	ldr	r2, [r7, #12]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	4413      	add	r3, r2
 8009e3e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d009      	beq.n	8009e5a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009e46:	2208      	movs	r2, #8
 8009e48:	4909      	ldr	r1, [pc, #36]	; (8009e70 <Get_SerialNum+0x50>)
 8009e4a:	68f8      	ldr	r0, [r7, #12]
 8009e4c:	f000 f814 	bl	8009e78 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009e50:	2204      	movs	r2, #4
 8009e52:	4908      	ldr	r1, [pc, #32]	; (8009e74 <Get_SerialNum+0x54>)
 8009e54:	68b8      	ldr	r0, [r7, #8]
 8009e56:	f000 f80f 	bl	8009e78 <IntToUnicode>
  }
}
 8009e5a:	bf00      	nop
 8009e5c:	3710      	adds	r7, #16
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}
 8009e62:	bf00      	nop
 8009e64:	1fff7a10 	.word	0x1fff7a10
 8009e68:	1fff7a14 	.word	0x1fff7a14
 8009e6c:	1fff7a18 	.word	0x1fff7a18
 8009e70:	200000ea 	.word	0x200000ea
 8009e74:	200000fa 	.word	0x200000fa

08009e78 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b087      	sub	sp, #28
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	60f8      	str	r0, [r7, #12]
 8009e80:	60b9      	str	r1, [r7, #8]
 8009e82:	4613      	mov	r3, r2
 8009e84:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009e86:	2300      	movs	r3, #0
 8009e88:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	75fb      	strb	r3, [r7, #23]
 8009e8e:	e027      	b.n	8009ee0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	0f1b      	lsrs	r3, r3, #28
 8009e94:	2b09      	cmp	r3, #9
 8009e96:	d80b      	bhi.n	8009eb0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	0f1b      	lsrs	r3, r3, #28
 8009e9c:	b2da      	uxtb	r2, r3
 8009e9e:	7dfb      	ldrb	r3, [r7, #23]
 8009ea0:	005b      	lsls	r3, r3, #1
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	440b      	add	r3, r1
 8009ea8:	3230      	adds	r2, #48	; 0x30
 8009eaa:	b2d2      	uxtb	r2, r2
 8009eac:	701a      	strb	r2, [r3, #0]
 8009eae:	e00a      	b.n	8009ec6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	0f1b      	lsrs	r3, r3, #28
 8009eb4:	b2da      	uxtb	r2, r3
 8009eb6:	7dfb      	ldrb	r3, [r7, #23]
 8009eb8:	005b      	lsls	r3, r3, #1
 8009eba:	4619      	mov	r1, r3
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	440b      	add	r3, r1
 8009ec0:	3237      	adds	r2, #55	; 0x37
 8009ec2:	b2d2      	uxtb	r2, r2
 8009ec4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	011b      	lsls	r3, r3, #4
 8009eca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009ecc:	7dfb      	ldrb	r3, [r7, #23]
 8009ece:	005b      	lsls	r3, r3, #1
 8009ed0:	3301      	adds	r3, #1
 8009ed2:	68ba      	ldr	r2, [r7, #8]
 8009ed4:	4413      	add	r3, r2
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009eda:	7dfb      	ldrb	r3, [r7, #23]
 8009edc:	3301      	adds	r3, #1
 8009ede:	75fb      	strb	r3, [r7, #23]
 8009ee0:	7dfa      	ldrb	r2, [r7, #23]
 8009ee2:	79fb      	ldrb	r3, [r7, #7]
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d3d3      	bcc.n	8009e90 <IntToUnicode+0x18>
  }
}
 8009ee8:	bf00      	nop
 8009eea:	bf00      	nop
 8009eec:	371c      	adds	r7, #28
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef4:	4770      	bx	lr
	...

08009ef8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b08a      	sub	sp, #40	; 0x28
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f00:	f107 0314 	add.w	r3, r7, #20
 8009f04:	2200      	movs	r2, #0
 8009f06:	601a      	str	r2, [r3, #0]
 8009f08:	605a      	str	r2, [r3, #4]
 8009f0a:	609a      	str	r2, [r3, #8]
 8009f0c:	60da      	str	r2, [r3, #12]
 8009f0e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009f18:	d147      	bne.n	8009faa <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	613b      	str	r3, [r7, #16]
 8009f1e:	4b25      	ldr	r3, [pc, #148]	; (8009fb4 <HAL_PCD_MspInit+0xbc>)
 8009f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f22:	4a24      	ldr	r2, [pc, #144]	; (8009fb4 <HAL_PCD_MspInit+0xbc>)
 8009f24:	f043 0301 	orr.w	r3, r3, #1
 8009f28:	6313      	str	r3, [r2, #48]	; 0x30
 8009f2a:	4b22      	ldr	r3, [pc, #136]	; (8009fb4 <HAL_PCD_MspInit+0xbc>)
 8009f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f2e:	f003 0301 	and.w	r3, r3, #1
 8009f32:	613b      	str	r3, [r7, #16]
 8009f34:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009f36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f40:	2300      	movs	r3, #0
 8009f42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009f44:	f107 0314 	add.w	r3, r7, #20
 8009f48:	4619      	mov	r1, r3
 8009f4a:	481b      	ldr	r0, [pc, #108]	; (8009fb8 <HAL_PCD_MspInit+0xc0>)
 8009f4c:	f7f7 f882 	bl	8001054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009f50:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009f54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f56:	2302      	movs	r3, #2
 8009f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009f5e:	2303      	movs	r3, #3
 8009f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009f62:	230a      	movs	r3, #10
 8009f64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009f66:	f107 0314 	add.w	r3, r7, #20
 8009f6a:	4619      	mov	r1, r3
 8009f6c:	4812      	ldr	r0, [pc, #72]	; (8009fb8 <HAL_PCD_MspInit+0xc0>)
 8009f6e:	f7f7 f871 	bl	8001054 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009f72:	4b10      	ldr	r3, [pc, #64]	; (8009fb4 <HAL_PCD_MspInit+0xbc>)
 8009f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f76:	4a0f      	ldr	r2, [pc, #60]	; (8009fb4 <HAL_PCD_MspInit+0xbc>)
 8009f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f7c:	6353      	str	r3, [r2, #52]	; 0x34
 8009f7e:	2300      	movs	r3, #0
 8009f80:	60fb      	str	r3, [r7, #12]
 8009f82:	4b0c      	ldr	r3, [pc, #48]	; (8009fb4 <HAL_PCD_MspInit+0xbc>)
 8009f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f86:	4a0b      	ldr	r2, [pc, #44]	; (8009fb4 <HAL_PCD_MspInit+0xbc>)
 8009f88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009f8c:	6453      	str	r3, [r2, #68]	; 0x44
 8009f8e:	4b09      	ldr	r3, [pc, #36]	; (8009fb4 <HAL_PCD_MspInit+0xbc>)
 8009f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f96:	60fb      	str	r3, [r7, #12]
 8009f98:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	2100      	movs	r1, #0
 8009f9e:	2043      	movs	r0, #67	; 0x43
 8009fa0:	f7f7 f821 	bl	8000fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009fa4:	2043      	movs	r0, #67	; 0x43
 8009fa6:	f7f7 f83a 	bl	800101e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009faa:	bf00      	nop
 8009fac:	3728      	adds	r7, #40	; 0x28
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}
 8009fb2:	bf00      	nop
 8009fb4:	40023800 	.word	0x40023800
 8009fb8:	40020000 	.word	0x40020000

08009fbc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b082      	sub	sp, #8
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009fd0:	4619      	mov	r1, r3
 8009fd2:	4610      	mov	r0, r2
 8009fd4:	f7fe fb71 	bl	80086ba <USBD_LL_SetupStage>
}
 8009fd8:	bf00      	nop
 8009fda:	3708      	adds	r7, #8
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}

08009fe0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b082      	sub	sp, #8
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	460b      	mov	r3, r1
 8009fea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009ff2:	78fa      	ldrb	r2, [r7, #3]
 8009ff4:	6879      	ldr	r1, [r7, #4]
 8009ff6:	4613      	mov	r3, r2
 8009ff8:	00db      	lsls	r3, r3, #3
 8009ffa:	4413      	add	r3, r2
 8009ffc:	009b      	lsls	r3, r3, #2
 8009ffe:	440b      	add	r3, r1
 800a000:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a004:	681a      	ldr	r2, [r3, #0]
 800a006:	78fb      	ldrb	r3, [r7, #3]
 800a008:	4619      	mov	r1, r3
 800a00a:	f7fe fbab 	bl	8008764 <USBD_LL_DataOutStage>
}
 800a00e:	bf00      	nop
 800a010:	3708      	adds	r7, #8
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}

0800a016 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a016:	b580      	push	{r7, lr}
 800a018:	b082      	sub	sp, #8
 800a01a:	af00      	add	r7, sp, #0
 800a01c:	6078      	str	r0, [r7, #4]
 800a01e:	460b      	mov	r3, r1
 800a020:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a028:	78fa      	ldrb	r2, [r7, #3]
 800a02a:	6879      	ldr	r1, [r7, #4]
 800a02c:	4613      	mov	r3, r2
 800a02e:	00db      	lsls	r3, r3, #3
 800a030:	4413      	add	r3, r2
 800a032:	009b      	lsls	r3, r3, #2
 800a034:	440b      	add	r3, r1
 800a036:	334c      	adds	r3, #76	; 0x4c
 800a038:	681a      	ldr	r2, [r3, #0]
 800a03a:	78fb      	ldrb	r3, [r7, #3]
 800a03c:	4619      	mov	r1, r3
 800a03e:	f7fe fc44 	bl	80088ca <USBD_LL_DataInStage>
}
 800a042:	bf00      	nop
 800a044:	3708      	adds	r7, #8
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}

0800a04a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a04a:	b580      	push	{r7, lr}
 800a04c:	b082      	sub	sp, #8
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a058:	4618      	mov	r0, r3
 800a05a:	f7fe fd78 	bl	8008b4e <USBD_LL_SOF>
}
 800a05e:	bf00      	nop
 800a060:	3708      	adds	r7, #8
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}

0800a066 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a066:	b580      	push	{r7, lr}
 800a068:	b084      	sub	sp, #16
 800a06a:	af00      	add	r7, sp, #0
 800a06c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a06e:	2301      	movs	r3, #1
 800a070:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	68db      	ldr	r3, [r3, #12]
 800a076:	2b02      	cmp	r3, #2
 800a078:	d001      	beq.n	800a07e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a07a:	f7f6 fc6f 	bl	800095c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a084:	7bfa      	ldrb	r2, [r7, #15]
 800a086:	4611      	mov	r1, r2
 800a088:	4618      	mov	r0, r3
 800a08a:	f7fe fd22 	bl	8008ad2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a094:	4618      	mov	r0, r3
 800a096:	f7fe fcca 	bl	8008a2e <USBD_LL_Reset>
}
 800a09a:	bf00      	nop
 800a09c:	3710      	adds	r7, #16
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}
	...

0800a0a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b082      	sub	sp, #8
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f7fe fd1d 	bl	8008af2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	687a      	ldr	r2, [r7, #4]
 800a0c4:	6812      	ldr	r2, [r2, #0]
 800a0c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a0ca:	f043 0301 	orr.w	r3, r3, #1
 800a0ce:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6a1b      	ldr	r3, [r3, #32]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d005      	beq.n	800a0e4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a0d8:	4b04      	ldr	r3, [pc, #16]	; (800a0ec <HAL_PCD_SuspendCallback+0x48>)
 800a0da:	691b      	ldr	r3, [r3, #16]
 800a0dc:	4a03      	ldr	r2, [pc, #12]	; (800a0ec <HAL_PCD_SuspendCallback+0x48>)
 800a0de:	f043 0306 	orr.w	r3, r3, #6
 800a0e2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a0e4:	bf00      	nop
 800a0e6:	3708      	adds	r7, #8
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}
 800a0ec:	e000ed00 	.word	0xe000ed00

0800a0f0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b082      	sub	sp, #8
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a0fe:	4618      	mov	r0, r3
 800a100:	f7fe fd0d 	bl	8008b1e <USBD_LL_Resume>
}
 800a104:	bf00      	nop
 800a106:	3708      	adds	r7, #8
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}

0800a10c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b082      	sub	sp, #8
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	460b      	mov	r3, r1
 800a116:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a11e:	78fa      	ldrb	r2, [r7, #3]
 800a120:	4611      	mov	r1, r2
 800a122:	4618      	mov	r0, r3
 800a124:	f7fe fd65 	bl	8008bf2 <USBD_LL_IsoOUTIncomplete>
}
 800a128:	bf00      	nop
 800a12a:	3708      	adds	r7, #8
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}

0800a130 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b082      	sub	sp, #8
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
 800a138:	460b      	mov	r3, r1
 800a13a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a142:	78fa      	ldrb	r2, [r7, #3]
 800a144:	4611      	mov	r1, r2
 800a146:	4618      	mov	r0, r3
 800a148:	f7fe fd21 	bl	8008b8e <USBD_LL_IsoINIncomplete>
}
 800a14c:	bf00      	nop
 800a14e:	3708      	adds	r7, #8
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}

0800a154 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b082      	sub	sp, #8
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a162:	4618      	mov	r0, r3
 800a164:	f7fe fd77 	bl	8008c56 <USBD_LL_DevConnected>
}
 800a168:	bf00      	nop
 800a16a:	3708      	adds	r7, #8
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b082      	sub	sp, #8
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a17e:	4618      	mov	r0, r3
 800a180:	f7fe fd74 	bl	8008c6c <USBD_LL_DevDisconnected>
}
 800a184:	bf00      	nop
 800a186:	3708      	adds	r7, #8
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b082      	sub	sp, #8
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	781b      	ldrb	r3, [r3, #0]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d13c      	bne.n	800a216 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a19c:	4a20      	ldr	r2, [pc, #128]	; (800a220 <USBD_LL_Init+0x94>)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	4a1e      	ldr	r2, [pc, #120]	; (800a220 <USBD_LL_Init+0x94>)
 800a1a8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a1ac:	4b1c      	ldr	r3, [pc, #112]	; (800a220 <USBD_LL_Init+0x94>)
 800a1ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a1b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a1b4:	4b1a      	ldr	r3, [pc, #104]	; (800a220 <USBD_LL_Init+0x94>)
 800a1b6:	2204      	movs	r2, #4
 800a1b8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a1ba:	4b19      	ldr	r3, [pc, #100]	; (800a220 <USBD_LL_Init+0x94>)
 800a1bc:	2202      	movs	r2, #2
 800a1be:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a1c0:	4b17      	ldr	r3, [pc, #92]	; (800a220 <USBD_LL_Init+0x94>)
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a1c6:	4b16      	ldr	r3, [pc, #88]	; (800a220 <USBD_LL_Init+0x94>)
 800a1c8:	2202      	movs	r2, #2
 800a1ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a1cc:	4b14      	ldr	r3, [pc, #80]	; (800a220 <USBD_LL_Init+0x94>)
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a1d2:	4b13      	ldr	r3, [pc, #76]	; (800a220 <USBD_LL_Init+0x94>)
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a1d8:	4b11      	ldr	r3, [pc, #68]	; (800a220 <USBD_LL_Init+0x94>)
 800a1da:	2200      	movs	r2, #0
 800a1dc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800a1de:	4b10      	ldr	r3, [pc, #64]	; (800a220 <USBD_LL_Init+0x94>)
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a1e4:	4b0e      	ldr	r3, [pc, #56]	; (800a220 <USBD_LL_Init+0x94>)
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a1ea:	480d      	ldr	r0, [pc, #52]	; (800a220 <USBD_LL_Init+0x94>)
 800a1ec:	f7f7 feb4 	bl	8001f58 <HAL_PCD_Init>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d001      	beq.n	800a1fa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a1f6:	f7f6 fbb1 	bl	800095c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a1fa:	2180      	movs	r1, #128	; 0x80
 800a1fc:	4808      	ldr	r0, [pc, #32]	; (800a220 <USBD_LL_Init+0x94>)
 800a1fe:	f7f9 f90c 	bl	800341a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a202:	2240      	movs	r2, #64	; 0x40
 800a204:	2100      	movs	r1, #0
 800a206:	4806      	ldr	r0, [pc, #24]	; (800a220 <USBD_LL_Init+0x94>)
 800a208:	f7f9 f8c0 	bl	800338c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a20c:	2280      	movs	r2, #128	; 0x80
 800a20e:	2101      	movs	r1, #1
 800a210:	4803      	ldr	r0, [pc, #12]	; (800a220 <USBD_LL_Init+0x94>)
 800a212:	f7f9 f8bb 	bl	800338c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a216:	2300      	movs	r3, #0
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3708      	adds	r7, #8
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}
 800a220:	200144e4 	.word	0x200144e4

0800a224 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b084      	sub	sp, #16
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a22c:	2300      	movs	r3, #0
 800a22e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a230:	2300      	movs	r3, #0
 800a232:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a23a:	4618      	mov	r0, r3
 800a23c:	f7f7 ffa9 	bl	8002192 <HAL_PCD_Start>
 800a240:	4603      	mov	r3, r0
 800a242:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a244:	7bfb      	ldrb	r3, [r7, #15]
 800a246:	4618      	mov	r0, r3
 800a248:	f000 f942 	bl	800a4d0 <USBD_Get_USB_Status>
 800a24c:	4603      	mov	r3, r0
 800a24e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a250:	7bbb      	ldrb	r3, [r7, #14]
}
 800a252:	4618      	mov	r0, r3
 800a254:	3710      	adds	r7, #16
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}

0800a25a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a25a:	b580      	push	{r7, lr}
 800a25c:	b084      	sub	sp, #16
 800a25e:	af00      	add	r7, sp, #0
 800a260:	6078      	str	r0, [r7, #4]
 800a262:	4608      	mov	r0, r1
 800a264:	4611      	mov	r1, r2
 800a266:	461a      	mov	r2, r3
 800a268:	4603      	mov	r3, r0
 800a26a:	70fb      	strb	r3, [r7, #3]
 800a26c:	460b      	mov	r3, r1
 800a26e:	70bb      	strb	r3, [r7, #2]
 800a270:	4613      	mov	r3, r2
 800a272:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a274:	2300      	movs	r3, #0
 800a276:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a278:	2300      	movs	r3, #0
 800a27a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a282:	78bb      	ldrb	r3, [r7, #2]
 800a284:	883a      	ldrh	r2, [r7, #0]
 800a286:	78f9      	ldrb	r1, [r7, #3]
 800a288:	f7f8 fc7a 	bl	8002b80 <HAL_PCD_EP_Open>
 800a28c:	4603      	mov	r3, r0
 800a28e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a290:	7bfb      	ldrb	r3, [r7, #15]
 800a292:	4618      	mov	r0, r3
 800a294:	f000 f91c 	bl	800a4d0 <USBD_Get_USB_Status>
 800a298:	4603      	mov	r3, r0
 800a29a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a29c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3710      	adds	r7, #16
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}

0800a2a6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2a6:	b580      	push	{r7, lr}
 800a2a8:	b084      	sub	sp, #16
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
 800a2ae:	460b      	mov	r3, r1
 800a2b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a2c0:	78fa      	ldrb	r2, [r7, #3]
 800a2c2:	4611      	mov	r1, r2
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f7f8 fcc3 	bl	8002c50 <HAL_PCD_EP_Close>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2ce:	7bfb      	ldrb	r3, [r7, #15]
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f000 f8fd 	bl	800a4d0 <USBD_Get_USB_Status>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2da:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3710      	adds	r7, #16
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b084      	sub	sp, #16
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	460b      	mov	r3, r1
 800a2ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a2fe:	78fa      	ldrb	r2, [r7, #3]
 800a300:	4611      	mov	r1, r2
 800a302:	4618      	mov	r0, r3
 800a304:	f7f8 fd9b 	bl	8002e3e <HAL_PCD_EP_SetStall>
 800a308:	4603      	mov	r3, r0
 800a30a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a30c:	7bfb      	ldrb	r3, [r7, #15]
 800a30e:	4618      	mov	r0, r3
 800a310:	f000 f8de 	bl	800a4d0 <USBD_Get_USB_Status>
 800a314:	4603      	mov	r3, r0
 800a316:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a318:	7bbb      	ldrb	r3, [r7, #14]
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3710      	adds	r7, #16
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}

0800a322 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a322:	b580      	push	{r7, lr}
 800a324:	b084      	sub	sp, #16
 800a326:	af00      	add	r7, sp, #0
 800a328:	6078      	str	r0, [r7, #4]
 800a32a:	460b      	mov	r3, r1
 800a32c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a32e:	2300      	movs	r3, #0
 800a330:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a332:	2300      	movs	r3, #0
 800a334:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a33c:	78fa      	ldrb	r2, [r7, #3]
 800a33e:	4611      	mov	r1, r2
 800a340:	4618      	mov	r0, r3
 800a342:	f7f8 fde0 	bl	8002f06 <HAL_PCD_EP_ClrStall>
 800a346:	4603      	mov	r3, r0
 800a348:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a34a:	7bfb      	ldrb	r3, [r7, #15]
 800a34c:	4618      	mov	r0, r3
 800a34e:	f000 f8bf 	bl	800a4d0 <USBD_Get_USB_Status>
 800a352:	4603      	mov	r3, r0
 800a354:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a356:	7bbb      	ldrb	r3, [r7, #14]
}
 800a358:	4618      	mov	r0, r3
 800a35a:	3710      	adds	r7, #16
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}

0800a360 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a360:	b480      	push	{r7}
 800a362:	b085      	sub	sp, #20
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	460b      	mov	r3, r1
 800a36a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a372:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a374:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	da0b      	bge.n	800a394 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a37c:	78fb      	ldrb	r3, [r7, #3]
 800a37e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a382:	68f9      	ldr	r1, [r7, #12]
 800a384:	4613      	mov	r3, r2
 800a386:	00db      	lsls	r3, r3, #3
 800a388:	4413      	add	r3, r2
 800a38a:	009b      	lsls	r3, r3, #2
 800a38c:	440b      	add	r3, r1
 800a38e:	333e      	adds	r3, #62	; 0x3e
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	e00b      	b.n	800a3ac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a394:	78fb      	ldrb	r3, [r7, #3]
 800a396:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a39a:	68f9      	ldr	r1, [r7, #12]
 800a39c:	4613      	mov	r3, r2
 800a39e:	00db      	lsls	r3, r3, #3
 800a3a0:	4413      	add	r3, r2
 800a3a2:	009b      	lsls	r3, r3, #2
 800a3a4:	440b      	add	r3, r1
 800a3a6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a3aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3714      	adds	r7, #20
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b6:	4770      	bx	lr

0800a3b8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b084      	sub	sp, #16
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
 800a3c0:	460b      	mov	r3, r1
 800a3c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a3d2:	78fa      	ldrb	r2, [r7, #3]
 800a3d4:	4611      	mov	r1, r2
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f7f8 fbad 	bl	8002b36 <HAL_PCD_SetAddress>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3e0:	7bfb      	ldrb	r3, [r7, #15]
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f000 f874 	bl	800a4d0 <USBD_Get_USB_Status>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	3710      	adds	r7, #16
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}

0800a3f6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a3f6:	b580      	push	{r7, lr}
 800a3f8:	b086      	sub	sp, #24
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	60f8      	str	r0, [r7, #12]
 800a3fe:	607a      	str	r2, [r7, #4]
 800a400:	603b      	str	r3, [r7, #0]
 800a402:	460b      	mov	r3, r1
 800a404:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a406:	2300      	movs	r3, #0
 800a408:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a40a:	2300      	movs	r3, #0
 800a40c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a414:	7af9      	ldrb	r1, [r7, #11]
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	687a      	ldr	r2, [r7, #4]
 800a41a:	f7f8 fcc6 	bl	8002daa <HAL_PCD_EP_Transmit>
 800a41e:	4603      	mov	r3, r0
 800a420:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a422:	7dfb      	ldrb	r3, [r7, #23]
 800a424:	4618      	mov	r0, r3
 800a426:	f000 f853 	bl	800a4d0 <USBD_Get_USB_Status>
 800a42a:	4603      	mov	r3, r0
 800a42c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a42e:	7dbb      	ldrb	r3, [r7, #22]
}
 800a430:	4618      	mov	r0, r3
 800a432:	3718      	adds	r7, #24
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}

0800a438 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b086      	sub	sp, #24
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	60f8      	str	r0, [r7, #12]
 800a440:	607a      	str	r2, [r7, #4]
 800a442:	603b      	str	r3, [r7, #0]
 800a444:	460b      	mov	r3, r1
 800a446:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a448:	2300      	movs	r3, #0
 800a44a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a44c:	2300      	movs	r3, #0
 800a44e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a456:	7af9      	ldrb	r1, [r7, #11]
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	687a      	ldr	r2, [r7, #4]
 800a45c:	f7f8 fc42 	bl	8002ce4 <HAL_PCD_EP_Receive>
 800a460:	4603      	mov	r3, r0
 800a462:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a464:	7dfb      	ldrb	r3, [r7, #23]
 800a466:	4618      	mov	r0, r3
 800a468:	f000 f832 	bl	800a4d0 <USBD_Get_USB_Status>
 800a46c:	4603      	mov	r3, r0
 800a46e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a470:	7dbb      	ldrb	r3, [r7, #22]
}
 800a472:	4618      	mov	r0, r3
 800a474:	3718      	adds	r7, #24
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}

0800a47a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a47a:	b580      	push	{r7, lr}
 800a47c:	b082      	sub	sp, #8
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
 800a482:	460b      	mov	r3, r1
 800a484:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a48c:	78fa      	ldrb	r2, [r7, #3]
 800a48e:	4611      	mov	r1, r2
 800a490:	4618      	mov	r0, r3
 800a492:	f7f8 fc72 	bl	8002d7a <HAL_PCD_EP_GetRxCount>
 800a496:	4603      	mov	r3, r0
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3708      	adds	r7, #8
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}

0800a4a0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b083      	sub	sp, #12
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a4a8:	4b03      	ldr	r3, [pc, #12]	; (800a4b8 <USBD_static_malloc+0x18>)
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	370c      	adds	r7, #12
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b4:	4770      	bx	lr
 800a4b6:	bf00      	nop
 800a4b8:	200149f0 	.word	0x200149f0

0800a4bc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b083      	sub	sp, #12
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]

}
 800a4c4:	bf00      	nop
 800a4c6:	370c      	adds	r7, #12
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ce:	4770      	bx	lr

0800a4d0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b085      	sub	sp, #20
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a4de:	79fb      	ldrb	r3, [r7, #7]
 800a4e0:	2b03      	cmp	r3, #3
 800a4e2:	d817      	bhi.n	800a514 <USBD_Get_USB_Status+0x44>
 800a4e4:	a201      	add	r2, pc, #4	; (adr r2, 800a4ec <USBD_Get_USB_Status+0x1c>)
 800a4e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ea:	bf00      	nop
 800a4ec:	0800a4fd 	.word	0x0800a4fd
 800a4f0:	0800a503 	.word	0x0800a503
 800a4f4:	0800a509 	.word	0x0800a509
 800a4f8:	0800a50f 	.word	0x0800a50f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	73fb      	strb	r3, [r7, #15]
    break;
 800a500:	e00b      	b.n	800a51a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a502:	2303      	movs	r3, #3
 800a504:	73fb      	strb	r3, [r7, #15]
    break;
 800a506:	e008      	b.n	800a51a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a508:	2301      	movs	r3, #1
 800a50a:	73fb      	strb	r3, [r7, #15]
    break;
 800a50c:	e005      	b.n	800a51a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a50e:	2303      	movs	r3, #3
 800a510:	73fb      	strb	r3, [r7, #15]
    break;
 800a512:	e002      	b.n	800a51a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a514:	2303      	movs	r3, #3
 800a516:	73fb      	strb	r3, [r7, #15]
    break;
 800a518:	bf00      	nop
  }
  return usb_status;
 800a51a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3714      	adds	r7, #20
 800a520:	46bd      	mov	sp, r7
 800a522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a526:	4770      	bx	lr

0800a528 <__libc_init_array>:
 800a528:	b570      	push	{r4, r5, r6, lr}
 800a52a:	4d0d      	ldr	r5, [pc, #52]	; (800a560 <__libc_init_array+0x38>)
 800a52c:	4c0d      	ldr	r4, [pc, #52]	; (800a564 <__libc_init_array+0x3c>)
 800a52e:	1b64      	subs	r4, r4, r5
 800a530:	10a4      	asrs	r4, r4, #2
 800a532:	2600      	movs	r6, #0
 800a534:	42a6      	cmp	r6, r4
 800a536:	d109      	bne.n	800a54c <__libc_init_array+0x24>
 800a538:	4d0b      	ldr	r5, [pc, #44]	; (800a568 <__libc_init_array+0x40>)
 800a53a:	4c0c      	ldr	r4, [pc, #48]	; (800a56c <__libc_init_array+0x44>)
 800a53c:	f000 f82e 	bl	800a59c <_init>
 800a540:	1b64      	subs	r4, r4, r5
 800a542:	10a4      	asrs	r4, r4, #2
 800a544:	2600      	movs	r6, #0
 800a546:	42a6      	cmp	r6, r4
 800a548:	d105      	bne.n	800a556 <__libc_init_array+0x2e>
 800a54a:	bd70      	pop	{r4, r5, r6, pc}
 800a54c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a550:	4798      	blx	r3
 800a552:	3601      	adds	r6, #1
 800a554:	e7ee      	b.n	800a534 <__libc_init_array+0xc>
 800a556:	f855 3b04 	ldr.w	r3, [r5], #4
 800a55a:	4798      	blx	r3
 800a55c:	3601      	adds	r6, #1
 800a55e:	e7f2      	b.n	800a546 <__libc_init_array+0x1e>
 800a560:	0800a634 	.word	0x0800a634
 800a564:	0800a634 	.word	0x0800a634
 800a568:	0800a634 	.word	0x0800a634
 800a56c:	0800a638 	.word	0x0800a638

0800a570 <memcpy>:
 800a570:	440a      	add	r2, r1
 800a572:	4291      	cmp	r1, r2
 800a574:	f100 33ff 	add.w	r3, r0, #4294967295
 800a578:	d100      	bne.n	800a57c <memcpy+0xc>
 800a57a:	4770      	bx	lr
 800a57c:	b510      	push	{r4, lr}
 800a57e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a582:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a586:	4291      	cmp	r1, r2
 800a588:	d1f9      	bne.n	800a57e <memcpy+0xe>
 800a58a:	bd10      	pop	{r4, pc}

0800a58c <memset>:
 800a58c:	4402      	add	r2, r0
 800a58e:	4603      	mov	r3, r0
 800a590:	4293      	cmp	r3, r2
 800a592:	d100      	bne.n	800a596 <memset+0xa>
 800a594:	4770      	bx	lr
 800a596:	f803 1b01 	strb.w	r1, [r3], #1
 800a59a:	e7f9      	b.n	800a590 <memset+0x4>

0800a59c <_init>:
 800a59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a59e:	bf00      	nop
 800a5a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5a2:	bc08      	pop	{r3}
 800a5a4:	469e      	mov	lr, r3
 800a5a6:	4770      	bx	lr

0800a5a8 <_fini>:
 800a5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5aa:	bf00      	nop
 800a5ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5ae:	bc08      	pop	{r3}
 800a5b0:	469e      	mov	lr, r3
 800a5b2:	4770      	bx	lr
