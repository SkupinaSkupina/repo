
Projekt_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008298  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08008430  08008430  00018430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008498  08008498  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08008498  08008498  00018498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084a0  080084a0  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084a0  080084a0  000184a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080084a4  080084a4  000184a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  080084a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001dec  200000fc  080085a4  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ee8  080085a4  00021ee8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015426  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003634  00000000  00000000  00035552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e8  00000000  00000000  00038b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001078  00000000  00000000  00039d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019aaf  00000000  00000000  0003ade8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000180aa  00000000  00000000  00054897  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d94a  00000000  00000000  0006c941  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fa28b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a48  00000000  00000000  000fa2dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000fc 	.word	0x200000fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008418 	.word	0x08008418

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000100 	.word	0x20000100
 80001d4:	08008418 	.word	0x08008418

080001d8 <strcmp>:
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	bf28      	it	cs
 80001e4:	429a      	cmpcs	r2, r3
 80001e6:	d0f7      	beq.n	80001d8 <strcmp>
 80001e8:	1ad0      	subs	r0, r2, r3
 80001ea:	4770      	bx	lr

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <ProcessCommand>:

/**
  * @brief  The application entry point.
  * @retval int
  */
void ProcessCommand(char* cmd) {
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
    if (strcmp(cmd, "ON") == 0) {
 80004f8:	490f      	ldr	r1, [pc, #60]	; (8000538 <ProcessCommand+0x48>)
 80004fa:	6878      	ldr	r0, [r7, #4]
 80004fc:	f7ff fe6c 	bl	80001d8 <strcmp>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d106      	bne.n	8000514 <ProcessCommand+0x24>
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET); // Prižgi rdečo LED
 8000506:	2201      	movs	r2, #1
 8000508:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800050c:	480b      	ldr	r0, [pc, #44]	; (800053c <ProcessCommand+0x4c>)
 800050e:	f000 ff7b 	bl	8001408 <HAL_GPIO_WritePin>
    } else if (strcmp(cmd, "OFF") == 0){
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET); // Ugasi rdečo LED
    }
}
 8000512:	e00c      	b.n	800052e <ProcessCommand+0x3e>
    } else if (strcmp(cmd, "OFF") == 0){
 8000514:	490a      	ldr	r1, [pc, #40]	; (8000540 <ProcessCommand+0x50>)
 8000516:	6878      	ldr	r0, [r7, #4]
 8000518:	f7ff fe5e 	bl	80001d8 <strcmp>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d105      	bne.n	800052e <ProcessCommand+0x3e>
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET); // Ugasi rdečo LED
 8000522:	2200      	movs	r2, #0
 8000524:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000528:	4804      	ldr	r0, [pc, #16]	; (800053c <ProcessCommand+0x4c>)
 800052a:	f000 ff6d 	bl	8001408 <HAL_GPIO_WritePin>
}
 800052e:	bf00      	nop
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	08008430 	.word	0x08008430
 800053c:	40020c00 	.word	0x40020c00
 8000540:	08008434 	.word	0x08008434

08000544 <main>:
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000548:	f000 fc32 	bl	8000db0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054c:	f000 f810 	bl	8000570 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000550:	f000 f876 	bl	8000640 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000554:	f000 f956 	bl	8000804 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000558:	f000 f892 	bl	8000680 <MX_I2C1_Init>
  MX_I2S2_Init();
 800055c:	f000 f8be 	bl	80006dc <MX_I2S2_Init>
  MX_I2S3_Init();
 8000560:	f000 f8ea 	bl	8000738 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000564:	f000 f918 	bl	8000798 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000568:	f007 f9f6 	bl	8007958 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800056c:	e7fe      	b.n	800056c <main+0x28>
	...

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b094      	sub	sp, #80	; 0x50
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 0320 	add.w	r3, r7, #32
 800057a:	2230      	movs	r2, #48	; 0x30
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f007 ff42 	bl	8008408 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000594:	2300      	movs	r3, #0
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	4b27      	ldr	r3, [pc, #156]	; (8000638 <SystemClock_Config+0xc8>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059c:	4a26      	ldr	r2, [pc, #152]	; (8000638 <SystemClock_Config+0xc8>)
 800059e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a2:	6413      	str	r3, [r2, #64]	; 0x40
 80005a4:	4b24      	ldr	r3, [pc, #144]	; (8000638 <SystemClock_Config+0xc8>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ac:	60bb      	str	r3, [r7, #8]
 80005ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b0:	2300      	movs	r3, #0
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	4b21      	ldr	r3, [pc, #132]	; (800063c <SystemClock_Config+0xcc>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a20      	ldr	r2, [pc, #128]	; (800063c <SystemClock_Config+0xcc>)
 80005ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005be:	6013      	str	r3, [r2, #0]
 80005c0:	4b1e      	ldr	r3, [pc, #120]	; (800063c <SystemClock_Config+0xcc>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005c8:	607b      	str	r3, [r7, #4]
 80005ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005cc:	2301      	movs	r3, #1
 80005ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d6:	2302      	movs	r3, #2
 80005d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005e0:	2304      	movs	r3, #4
 80005e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80005e4:	23c0      	movs	r3, #192	; 0xc0
 80005e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005e8:	2304      	movs	r3, #4
 80005ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80005ec:	2308      	movs	r3, #8
 80005ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f0:	f107 0320 	add.w	r3, r7, #32
 80005f4:	4618      	mov	r0, r3
 80005f6:	f002 ff83 	bl	8003500 <HAL_RCC_OscConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000600:	f000 f9da 	bl	80009b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000604:	230f      	movs	r3, #15
 8000606:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000608:	2302      	movs	r3, #2
 800060a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000610:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000614:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800061a:	f107 030c 	add.w	r3, r7, #12
 800061e:	2103      	movs	r1, #3
 8000620:	4618      	mov	r0, r3
 8000622:	f003 f9e5 	bl	80039f0 <HAL_RCC_ClockConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800062c:	f000 f9c4 	bl	80009b8 <Error_Handler>
  }
}
 8000630:	bf00      	nop
 8000632:	3750      	adds	r7, #80	; 0x50
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40023800 	.word	0x40023800
 800063c:	40007000 	.word	0x40007000

08000640 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b086      	sub	sp, #24
 8000644:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000646:	463b      	mov	r3, r7
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]
 8000654:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000656:	2301      	movs	r3, #1
 8000658:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 800065a:	23c8      	movs	r3, #200	; 0xc8
 800065c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 800065e:	2305      	movs	r3, #5
 8000660:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000662:	2302      	movs	r3, #2
 8000664:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000666:	463b      	mov	r3, r7
 8000668:	4618      	mov	r0, r3
 800066a:	f003 fbcd 	bl	8003e08 <HAL_RCCEx_PeriphCLKConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000674:	f000 f9a0 	bl	80009b8 <Error_Handler>
  }
}
 8000678:	bf00      	nop
 800067a:	3718      	adds	r7, #24
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}

08000680 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000684:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <MX_I2C1_Init+0x50>)
 8000686:	4a13      	ldr	r2, [pc, #76]	; (80006d4 <MX_I2C1_Init+0x54>)
 8000688:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800068a:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <MX_I2C1_Init+0x50>)
 800068c:	4a12      	ldr	r2, [pc, #72]	; (80006d8 <MX_I2C1_Init+0x58>)
 800068e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000690:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <MX_I2C1_Init+0x50>)
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <MX_I2C1_Init+0x50>)
 8000698:	2200      	movs	r2, #0
 800069a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800069c:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <MX_I2C1_Init+0x50>)
 800069e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006a4:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <MX_I2C1_Init+0x50>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006aa:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <MX_I2C1_Init+0x50>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b0:	4b07      	ldr	r3, [pc, #28]	; (80006d0 <MX_I2C1_Init+0x50>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <MX_I2C1_Init+0x50>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006bc:	4804      	ldr	r0, [pc, #16]	; (80006d0 <MX_I2C1_Init+0x50>)
 80006be:	f000 febd 	bl	800143c <HAL_I2C_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006c8:	f000 f976 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000118 	.word	0x20000118
 80006d4:	40005400 	.word	0x40005400
 80006d8:	000186a0 	.word	0x000186a0

080006dc <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80006e0:	4b12      	ldr	r3, [pc, #72]	; (800072c <MX_I2S2_Init+0x50>)
 80006e2:	4a13      	ldr	r2, [pc, #76]	; (8000730 <MX_I2S2_Init+0x54>)
 80006e4:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80006e6:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_I2S2_Init+0x50>)
 80006e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ec:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80006ee:	4b0f      	ldr	r3, [pc, #60]	; (800072c <MX_I2S2_Init+0x50>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006f4:	4b0d      	ldr	r3, [pc, #52]	; (800072c <MX_I2S2_Init+0x50>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80006fa:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_I2S2_Init+0x50>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000700:	4b0a      	ldr	r3, [pc, #40]	; (800072c <MX_I2S2_Init+0x50>)
 8000702:	4a0c      	ldr	r2, [pc, #48]	; (8000734 <MX_I2S2_Init+0x58>)
 8000704:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_I2S2_Init+0x50>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800070c:	4b07      	ldr	r3, [pc, #28]	; (800072c <MX_I2S2_Init+0x50>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000712:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_I2S2_Init+0x50>)
 8000714:	2201      	movs	r2, #1
 8000716:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000718:	4804      	ldr	r0, [pc, #16]	; (800072c <MX_I2S2_Init+0x50>)
 800071a:	f000 ffd3 	bl	80016c4 <HAL_I2S_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000724:	f000 f948 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	2000016c 	.word	0x2000016c
 8000730:	40003800 	.word	0x40003800
 8000734:	00017700 	.word	0x00017700

08000738 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800073c:	4b13      	ldr	r3, [pc, #76]	; (800078c <MX_I2S3_Init+0x54>)
 800073e:	4a14      	ldr	r2, [pc, #80]	; (8000790 <MX_I2S3_Init+0x58>)
 8000740:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000742:	4b12      	ldr	r3, [pc, #72]	; (800078c <MX_I2S3_Init+0x54>)
 8000744:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000748:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <MX_I2S3_Init+0x54>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000750:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_I2S3_Init+0x54>)
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000756:	4b0d      	ldr	r3, [pc, #52]	; (800078c <MX_I2S3_Init+0x54>)
 8000758:	f44f 7200 	mov.w	r2, #512	; 0x200
 800075c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <MX_I2S3_Init+0x54>)
 8000760:	4a0c      	ldr	r2, [pc, #48]	; (8000794 <MX_I2S3_Init+0x5c>)
 8000762:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000764:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_I2S3_Init+0x54>)
 8000766:	2200      	movs	r2, #0
 8000768:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800076a:	4b08      	ldr	r3, [pc, #32]	; (800078c <MX_I2S3_Init+0x54>)
 800076c:	2200      	movs	r2, #0
 800076e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_I2S3_Init+0x54>)
 8000772:	2200      	movs	r2, #0
 8000774:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_I2S3_Init+0x54>)
 8000778:	f000 ffa4 	bl	80016c4 <HAL_I2S_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000782:	f000 f919 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	200001b4 	.word	0x200001b4
 8000790:	40003c00 	.word	0x40003c00
 8000794:	00017700 	.word	0x00017700

08000798 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800079c:	4b17      	ldr	r3, [pc, #92]	; (80007fc <MX_SPI1_Init+0x64>)
 800079e:	4a18      	ldr	r2, [pc, #96]	; (8000800 <MX_SPI1_Init+0x68>)
 80007a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007a2:	4b16      	ldr	r3, [pc, #88]	; (80007fc <MX_SPI1_Init+0x64>)
 80007a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007aa:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_SPI1_Init+0x64>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <MX_SPI1_Init+0x64>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_SPI1_Init+0x64>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_SPI1_Init+0x64>)
 80007be:	2200      	movs	r2, #0
 80007c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_SPI1_Init+0x64>)
 80007c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_SPI1_Init+0x64>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007d0:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <MX_SPI1_Init+0x64>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_SPI1_Init+0x64>)
 80007d8:	2200      	movs	r2, #0
 80007da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007dc:	4b07      	ldr	r3, [pc, #28]	; (80007fc <MX_SPI1_Init+0x64>)
 80007de:	2200      	movs	r2, #0
 80007e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_SPI1_Init+0x64>)
 80007e4:	220a      	movs	r2, #10
 80007e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007e8:	4804      	ldr	r0, [pc, #16]	; (80007fc <MX_SPI1_Init+0x64>)
 80007ea:	f003 fc5d 	bl	80040a8 <HAL_SPI_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007f4:	f000 f8e0 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	200001fc 	.word	0x200001fc
 8000800:	40013000 	.word	0x40013000

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08c      	sub	sp, #48	; 0x30
 8000808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080a:	f107 031c 	add.w	r3, r7, #28
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	61bb      	str	r3, [r7, #24]
 800081e:	4b61      	ldr	r3, [pc, #388]	; (80009a4 <MX_GPIO_Init+0x1a0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a60      	ldr	r2, [pc, #384]	; (80009a4 <MX_GPIO_Init+0x1a0>)
 8000824:	f043 0310 	orr.w	r3, r3, #16
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b5e      	ldr	r3, [pc, #376]	; (80009a4 <MX_GPIO_Init+0x1a0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0310 	and.w	r3, r3, #16
 8000832:	61bb      	str	r3, [r7, #24]
 8000834:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	617b      	str	r3, [r7, #20]
 800083a:	4b5a      	ldr	r3, [pc, #360]	; (80009a4 <MX_GPIO_Init+0x1a0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a59      	ldr	r2, [pc, #356]	; (80009a4 <MX_GPIO_Init+0x1a0>)
 8000840:	f043 0304 	orr.w	r3, r3, #4
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b57      	ldr	r3, [pc, #348]	; (80009a4 <MX_GPIO_Init+0x1a0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0304 	and.w	r3, r3, #4
 800084e:	617b      	str	r3, [r7, #20]
 8000850:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	613b      	str	r3, [r7, #16]
 8000856:	4b53      	ldr	r3, [pc, #332]	; (80009a4 <MX_GPIO_Init+0x1a0>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a52      	ldr	r2, [pc, #328]	; (80009a4 <MX_GPIO_Init+0x1a0>)
 800085c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b50      	ldr	r3, [pc, #320]	; (80009a4 <MX_GPIO_Init+0x1a0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	4b4c      	ldr	r3, [pc, #304]	; (80009a4 <MX_GPIO_Init+0x1a0>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a4b      	ldr	r2, [pc, #300]	; (80009a4 <MX_GPIO_Init+0x1a0>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b49      	ldr	r3, [pc, #292]	; (80009a4 <MX_GPIO_Init+0x1a0>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	4b45      	ldr	r3, [pc, #276]	; (80009a4 <MX_GPIO_Init+0x1a0>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a44      	ldr	r2, [pc, #272]	; (80009a4 <MX_GPIO_Init+0x1a0>)
 8000894:	f043 0302 	orr.w	r3, r3, #2
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b42      	ldr	r3, [pc, #264]	; (80009a4 <MX_GPIO_Init+0x1a0>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0302 	and.w	r3, r3, #2
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	4b3e      	ldr	r3, [pc, #248]	; (80009a4 <MX_GPIO_Init+0x1a0>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a3d      	ldr	r2, [pc, #244]	; (80009a4 <MX_GPIO_Init+0x1a0>)
 80008b0:	f043 0308 	orr.w	r3, r3, #8
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b3b      	ldr	r3, [pc, #236]	; (80009a4 <MX_GPIO_Init+0x1a0>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0308 	and.w	r3, r3, #8
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2108      	movs	r1, #8
 80008c6:	4838      	ldr	r0, [pc, #224]	; (80009a8 <MX_GPIO_Init+0x1a4>)
 80008c8:	f000 fd9e 	bl	8001408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008cc:	2201      	movs	r2, #1
 80008ce:	2101      	movs	r1, #1
 80008d0:	4836      	ldr	r0, [pc, #216]	; (80009ac <MX_GPIO_Init+0x1a8>)
 80008d2:	f000 fd99 	bl	8001408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008d6:	2200      	movs	r2, #0
 80008d8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008dc:	4834      	ldr	r0, [pc, #208]	; (80009b0 <MX_GPIO_Init+0x1ac>)
 80008de:	f000 fd93 	bl	8001408 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80008e2:	2304      	movs	r3, #4
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e6:	2300      	movs	r3, #0
 80008e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4619      	mov	r1, r3
 80008f4:	482c      	ldr	r0, [pc, #176]	; (80009a8 <MX_GPIO_Init+0x1a4>)
 80008f6:	f000 fc03 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008fa:	2308      	movs	r3, #8
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fe:	2301      	movs	r3, #1
 8000900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	4619      	mov	r1, r3
 8000910:	4825      	ldr	r0, [pc, #148]	; (80009a8 <MX_GPIO_Init+0x1a4>)
 8000912:	f000 fbf5 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000916:	2332      	movs	r3, #50	; 0x32
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800091a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800091e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	481f      	ldr	r0, [pc, #124]	; (80009a8 <MX_GPIO_Init+0x1a4>)
 800092c:	f000 fbe8 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000930:	2301      	movs	r3, #1
 8000932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000934:	2301      	movs	r3, #1
 8000936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093c:	2300      	movs	r3, #0
 800093e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000940:	f107 031c 	add.w	r3, r7, #28
 8000944:	4619      	mov	r1, r3
 8000946:	4819      	ldr	r0, [pc, #100]	; (80009ac <MX_GPIO_Init+0x1a8>)
 8000948:	f000 fbda 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800094c:	2301      	movs	r3, #1
 800094e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000950:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000954:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4619      	mov	r1, r3
 8000960:	4814      	ldr	r0, [pc, #80]	; (80009b4 <MX_GPIO_Init+0x1b0>)
 8000962:	f000 fbcd 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000966:	f24f 0310 	movw	r3, #61456	; 0xf010
 800096a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096c:	2301      	movs	r3, #1
 800096e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	2300      	movs	r3, #0
 8000976:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000978:	f107 031c 	add.w	r3, r7, #28
 800097c:	4619      	mov	r1, r3
 800097e:	480c      	ldr	r0, [pc, #48]	; (80009b0 <MX_GPIO_Init+0x1ac>)
 8000980:	f000 fbbe 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000984:	2320      	movs	r3, #32
 8000986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000988:	2300      	movs	r3, #0
 800098a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	4806      	ldr	r0, [pc, #24]	; (80009b0 <MX_GPIO_Init+0x1ac>)
 8000998:	f000 fbb2 	bl	8001100 <HAL_GPIO_Init>

}
 800099c:	bf00      	nop
 800099e:	3730      	adds	r7, #48	; 0x30
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40021000 	.word	0x40021000
 80009ac:	40020800 	.word	0x40020800
 80009b0:	40020c00 	.word	0x40020c00
 80009b4:	40020000 	.word	0x40020000

080009b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009bc:	b672      	cpsid	i
}
 80009be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <Error_Handler+0x8>
	...

080009c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	607b      	str	r3, [r7, #4]
 80009ce:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <HAL_MspInit+0x4c>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d2:	4a0f      	ldr	r2, [pc, #60]	; (8000a10 <HAL_MspInit+0x4c>)
 80009d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d8:	6453      	str	r3, [r2, #68]	; 0x44
 80009da:	4b0d      	ldr	r3, [pc, #52]	; (8000a10 <HAL_MspInit+0x4c>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	603b      	str	r3, [r7, #0]
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <HAL_MspInit+0x4c>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ee:	4a08      	ldr	r2, [pc, #32]	; (8000a10 <HAL_MspInit+0x4c>)
 80009f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f4:	6413      	str	r3, [r2, #64]	; 0x40
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <HAL_MspInit+0x4c>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fe:	603b      	str	r3, [r7, #0]
 8000a00:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a02:	2007      	movs	r0, #7
 8000a04:	f000 fb3a 	bl	800107c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40023800 	.word	0x40023800

08000a14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08a      	sub	sp, #40	; 0x28
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a19      	ldr	r2, [pc, #100]	; (8000a98 <HAL_I2C_MspInit+0x84>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d12c      	bne.n	8000a90 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	613b      	str	r3, [r7, #16]
 8000a3a:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <HAL_I2C_MspInit+0x88>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a17      	ldr	r2, [pc, #92]	; (8000a9c <HAL_I2C_MspInit+0x88>)
 8000a40:	f043 0302 	orr.w	r3, r3, #2
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <HAL_I2C_MspInit+0x88>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f003 0302 	and.w	r3, r3, #2
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a52:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a58:	2312      	movs	r3, #18
 8000a5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	2300      	movs	r3, #0
 8000a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a64:	2304      	movs	r3, #4
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	480c      	ldr	r0, [pc, #48]	; (8000aa0 <HAL_I2C_MspInit+0x8c>)
 8000a70:	f000 fb46 	bl	8001100 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a74:	2300      	movs	r3, #0
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <HAL_I2C_MspInit+0x88>)
 8000a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7c:	4a07      	ldr	r2, [pc, #28]	; (8000a9c <HAL_I2C_MspInit+0x88>)
 8000a7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a82:	6413      	str	r3, [r2, #64]	; 0x40
 8000a84:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <HAL_I2C_MspInit+0x88>)
 8000a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a90:	bf00      	nop
 8000a92:	3728      	adds	r7, #40	; 0x28
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40005400 	.word	0x40005400
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40020400 	.word	0x40020400

08000aa4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08e      	sub	sp, #56	; 0x38
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a59      	ldr	r2, [pc, #356]	; (8000c28 <HAL_I2S_MspInit+0x184>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d15b      	bne.n	8000b7e <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	623b      	str	r3, [r7, #32]
 8000aca:	4b58      	ldr	r3, [pc, #352]	; (8000c2c <HAL_I2S_MspInit+0x188>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	4a57      	ldr	r2, [pc, #348]	; (8000c2c <HAL_I2S_MspInit+0x188>)
 8000ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad6:	4b55      	ldr	r3, [pc, #340]	; (8000c2c <HAL_I2S_MspInit+0x188>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ade:	623b      	str	r3, [r7, #32]
 8000ae0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61fb      	str	r3, [r7, #28]
 8000ae6:	4b51      	ldr	r3, [pc, #324]	; (8000c2c <HAL_I2S_MspInit+0x188>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a50      	ldr	r2, [pc, #320]	; (8000c2c <HAL_I2S_MspInit+0x188>)
 8000aec:	f043 0304 	orr.w	r3, r3, #4
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b4e      	ldr	r3, [pc, #312]	; (8000c2c <HAL_I2S_MspInit+0x188>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0304 	and.w	r3, r3, #4
 8000afa:	61fb      	str	r3, [r7, #28]
 8000afc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	61bb      	str	r3, [r7, #24]
 8000b02:	4b4a      	ldr	r3, [pc, #296]	; (8000c2c <HAL_I2S_MspInit+0x188>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a49      	ldr	r2, [pc, #292]	; (8000c2c <HAL_I2S_MspInit+0x188>)
 8000b08:	f043 0302 	orr.w	r3, r3, #2
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b47      	ldr	r3, [pc, #284]	; (8000c2c <HAL_I2S_MspInit+0x188>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0302 	and.w	r3, r3, #2
 8000b16:	61bb      	str	r3, [r7, #24]
 8000b18:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b1a:	2304      	movs	r3, #4
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2300      	movs	r3, #0
 8000b28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000b2a:	2306      	movs	r3, #6
 8000b2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b32:	4619      	mov	r1, r3
 8000b34:	483e      	ldr	r0, [pc, #248]	; (8000c30 <HAL_I2S_MspInit+0x18c>)
 8000b36:	f000 fae3 	bl	8001100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000b3a:	2308      	movs	r3, #8
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2300      	movs	r3, #0
 8000b48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b4a:	2305      	movs	r3, #5
 8000b4c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b52:	4619      	mov	r1, r3
 8000b54:	4836      	ldr	r0, [pc, #216]	; (8000c30 <HAL_I2S_MspInit+0x18c>)
 8000b56:	f000 fad3 	bl	8001100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000b5a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b60:	2302      	movs	r3, #2
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b6c:	2305      	movs	r3, #5
 8000b6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b74:	4619      	mov	r1, r3
 8000b76:	482f      	ldr	r0, [pc, #188]	; (8000c34 <HAL_I2S_MspInit+0x190>)
 8000b78:	f000 fac2 	bl	8001100 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b7c:	e04f      	b.n	8000c1e <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a2d      	ldr	r2, [pc, #180]	; (8000c38 <HAL_I2S_MspInit+0x194>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d14a      	bne.n	8000c1e <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]
 8000b8c:	4b27      	ldr	r3, [pc, #156]	; (8000c2c <HAL_I2S_MspInit+0x188>)
 8000b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b90:	4a26      	ldr	r2, [pc, #152]	; (8000c2c <HAL_I2S_MspInit+0x188>)
 8000b92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b96:	6413      	str	r3, [r2, #64]	; 0x40
 8000b98:	4b24      	ldr	r3, [pc, #144]	; (8000c2c <HAL_I2S_MspInit+0x188>)
 8000b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ba0:	617b      	str	r3, [r7, #20]
 8000ba2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	4b20      	ldr	r3, [pc, #128]	; (8000c2c <HAL_I2S_MspInit+0x188>)
 8000baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bac:	4a1f      	ldr	r2, [pc, #124]	; (8000c2c <HAL_I2S_MspInit+0x188>)
 8000bae:	f043 0301 	orr.w	r3, r3, #1
 8000bb2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb4:	4b1d      	ldr	r3, [pc, #116]	; (8000c2c <HAL_I2S_MspInit+0x188>)
 8000bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb8:	f003 0301 	and.w	r3, r3, #1
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	4b19      	ldr	r3, [pc, #100]	; (8000c2c <HAL_I2S_MspInit+0x188>)
 8000bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc8:	4a18      	ldr	r2, [pc, #96]	; (8000c2c <HAL_I2S_MspInit+0x188>)
 8000bca:	f043 0304 	orr.w	r3, r3, #4
 8000bce:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd0:	4b16      	ldr	r3, [pc, #88]	; (8000c2c <HAL_I2S_MspInit+0x188>)
 8000bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd4:	f003 0304 	and.w	r3, r3, #4
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000bdc:	2310      	movs	r3, #16
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be0:	2302      	movs	r3, #2
 8000be2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	2300      	movs	r3, #0
 8000bea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bec:	2306      	movs	r3, #6
 8000bee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000bf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4811      	ldr	r0, [pc, #68]	; (8000c3c <HAL_I2S_MspInit+0x198>)
 8000bf8:	f000 fa82 	bl	8001100 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000bfc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c02:	2302      	movs	r3, #2
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c0e:	2306      	movs	r3, #6
 8000c10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c16:	4619      	mov	r1, r3
 8000c18:	4805      	ldr	r0, [pc, #20]	; (8000c30 <HAL_I2S_MspInit+0x18c>)
 8000c1a:	f000 fa71 	bl	8001100 <HAL_GPIO_Init>
}
 8000c1e:	bf00      	nop
 8000c20:	3738      	adds	r7, #56	; 0x38
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40003800 	.word	0x40003800
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40020800 	.word	0x40020800
 8000c34:	40020400 	.word	0x40020400
 8000c38:	40003c00 	.word	0x40003c00
 8000c3c:	40020000 	.word	0x40020000

08000c40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08a      	sub	sp, #40	; 0x28
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a19      	ldr	r2, [pc, #100]	; (8000cc4 <HAL_SPI_MspInit+0x84>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d12b      	bne.n	8000cba <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
 8000c66:	4b18      	ldr	r3, [pc, #96]	; (8000cc8 <HAL_SPI_MspInit+0x88>)
 8000c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6a:	4a17      	ldr	r2, [pc, #92]	; (8000cc8 <HAL_SPI_MspInit+0x88>)
 8000c6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c70:	6453      	str	r3, [r2, #68]	; 0x44
 8000c72:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <HAL_SPI_MspInit+0x88>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <HAL_SPI_MspInit+0x88>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4a10      	ldr	r2, [pc, #64]	; (8000cc8 <HAL_SPI_MspInit+0x88>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <HAL_SPI_MspInit+0x88>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c9a:	23e0      	movs	r3, #224	; 0xe0
 8000c9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000caa:	2305      	movs	r3, #5
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4805      	ldr	r0, [pc, #20]	; (8000ccc <HAL_SPI_MspInit+0x8c>)
 8000cb6:	f000 fa23 	bl	8001100 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cba:	bf00      	nop
 8000cbc:	3728      	adds	r7, #40	; 0x28
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40013000 	.word	0x40013000
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40020000 	.word	0x40020000

08000cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <NMI_Handler+0x4>

08000cd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cda:	e7fe      	b.n	8000cda <HardFault_Handler+0x4>

08000cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <MemManage_Handler+0x4>

08000ce2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce6:	e7fe      	b.n	8000ce6 <BusFault_Handler+0x4>

08000ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <UsageFault_Handler+0x4>

08000cee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d1c:	f000 f89a 	bl	8000e54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d28:	4802      	ldr	r0, [pc, #8]	; (8000d34 <OTG_FS_IRQHandler+0x10>)
 8000d2a:	f001 fabb 	bl	80022a4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	200017bc 	.word	0x200017bc

08000d38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d3c:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <SystemInit+0x20>)
 8000d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d42:	4a05      	ldr	r2, [pc, #20]	; (8000d58 <SystemInit+0x20>)
 8000d44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d60:	480d      	ldr	r0, [pc, #52]	; (8000d98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d62:	490e      	ldr	r1, [pc, #56]	; (8000d9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d64:	4a0e      	ldr	r2, [pc, #56]	; (8000da0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d68:	e002      	b.n	8000d70 <LoopCopyDataInit>

08000d6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6e:	3304      	adds	r3, #4

08000d70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d74:	d3f9      	bcc.n	8000d6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d76:	4a0b      	ldr	r2, [pc, #44]	; (8000da4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d78:	4c0b      	ldr	r4, [pc, #44]	; (8000da8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d7c:	e001      	b.n	8000d82 <LoopFillZerobss>

08000d7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d80:	3204      	adds	r2, #4

08000d82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d84:	d3fb      	bcc.n	8000d7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d86:	f7ff ffd7 	bl	8000d38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d8a:	f007 fb19 	bl	80083c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d8e:	f7ff fbd9 	bl	8000544 <main>
  bx  lr    
 8000d92:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d9c:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000da0:	080084a8 	.word	0x080084a8
  ldr r2, =_sbss
 8000da4:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000da8:	20001ee8 	.word	0x20001ee8

08000dac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dac:	e7fe      	b.n	8000dac <ADC_IRQHandler>
	...

08000db0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000db4:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <HAL_Init+0x40>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a0d      	ldr	r2, [pc, #52]	; (8000df0 <HAL_Init+0x40>)
 8000dba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dc0:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <HAL_Init+0x40>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <HAL_Init+0x40>)
 8000dc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dcc:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <HAL_Init+0x40>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a07      	ldr	r2, [pc, #28]	; (8000df0 <HAL_Init+0x40>)
 8000dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd8:	2003      	movs	r0, #3
 8000dda:	f000 f94f 	bl	800107c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dde:	2000      	movs	r0, #0
 8000de0:	f000 f808 	bl	8000df4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de4:	f7ff fdee 	bl	80009c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40023c00 	.word	0x40023c00

08000df4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dfc:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <HAL_InitTick+0x54>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <HAL_InitTick+0x58>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	4619      	mov	r1, r3
 8000e06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 f967 	bl	80010e6 <HAL_SYSTICK_Config>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e00e      	b.n	8000e40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2b0f      	cmp	r3, #15
 8000e26:	d80a      	bhi.n	8000e3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	6879      	ldr	r1, [r7, #4]
 8000e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e30:	f000 f92f 	bl	8001092 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e34:	4a06      	ldr	r2, [pc, #24]	; (8000e50 <HAL_InitTick+0x5c>)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	e000      	b.n	8000e40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000000 	.word	0x20000000
 8000e4c:	20000008 	.word	0x20000008
 8000e50:	20000004 	.word	0x20000004

08000e54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e58:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <HAL_IncTick+0x20>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <HAL_IncTick+0x24>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4413      	add	r3, r2
 8000e64:	4a04      	ldr	r2, [pc, #16]	; (8000e78 <HAL_IncTick+0x24>)
 8000e66:	6013      	str	r3, [r2, #0]
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	20000008 	.word	0x20000008
 8000e78:	20000254 	.word	0x20000254

08000e7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e80:	4b03      	ldr	r3, [pc, #12]	; (8000e90 <HAL_GetTick+0x14>)
 8000e82:	681b      	ldr	r3, [r3, #0]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	20000254 	.word	0x20000254

08000e94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e9c:	f7ff ffee 	bl	8000e7c <HAL_GetTick>
 8000ea0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eac:	d005      	beq.n	8000eba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eae:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <HAL_Delay+0x44>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eba:	bf00      	nop
 8000ebc:	f7ff ffde 	bl	8000e7c <HAL_GetTick>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	68fa      	ldr	r2, [r7, #12]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d8f7      	bhi.n	8000ebc <HAL_Delay+0x28>
  {
  }
}
 8000ecc:	bf00      	nop
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000008 	.word	0x20000008

08000edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f003 0307 	and.w	r3, r3, #7
 8000eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eec:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <__NVIC_SetPriorityGrouping+0x44>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef2:	68ba      	ldr	r2, [r7, #8]
 8000ef4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ef8:	4013      	ands	r3, r2
 8000efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f0e:	4a04      	ldr	r2, [pc, #16]	; (8000f20 <__NVIC_SetPriorityGrouping+0x44>)
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	60d3      	str	r3, [r2, #12]
}
 8000f14:	bf00      	nop
 8000f16:	3714      	adds	r7, #20
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f28:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <__NVIC_GetPriorityGrouping+0x18>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	0a1b      	lsrs	r3, r3, #8
 8000f2e:	f003 0307 	and.w	r3, r3, #7
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	db0b      	blt.n	8000f6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	f003 021f 	and.w	r2, r3, #31
 8000f58:	4907      	ldr	r1, [pc, #28]	; (8000f78 <__NVIC_EnableIRQ+0x38>)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	095b      	lsrs	r3, r3, #5
 8000f60:	2001      	movs	r0, #1
 8000f62:	fa00 f202 	lsl.w	r2, r0, r2
 8000f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	e000e100 	.word	0xe000e100

08000f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	6039      	str	r1, [r7, #0]
 8000f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	db0a      	blt.n	8000fa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	490c      	ldr	r1, [pc, #48]	; (8000fc8 <__NVIC_SetPriority+0x4c>)
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	0112      	lsls	r2, r2, #4
 8000f9c:	b2d2      	uxtb	r2, r2
 8000f9e:	440b      	add	r3, r1
 8000fa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa4:	e00a      	b.n	8000fbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	4908      	ldr	r1, [pc, #32]	; (8000fcc <__NVIC_SetPriority+0x50>)
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	f003 030f 	and.w	r3, r3, #15
 8000fb2:	3b04      	subs	r3, #4
 8000fb4:	0112      	lsls	r2, r2, #4
 8000fb6:	b2d2      	uxtb	r2, r2
 8000fb8:	440b      	add	r3, r1
 8000fba:	761a      	strb	r2, [r3, #24]
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000e100 	.word	0xe000e100
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b089      	sub	sp, #36	; 0x24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	f1c3 0307 	rsb	r3, r3, #7
 8000fea:	2b04      	cmp	r3, #4
 8000fec:	bf28      	it	cs
 8000fee:	2304      	movcs	r3, #4
 8000ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3304      	adds	r3, #4
 8000ff6:	2b06      	cmp	r3, #6
 8000ff8:	d902      	bls.n	8001000 <NVIC_EncodePriority+0x30>
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3b03      	subs	r3, #3
 8000ffe:	e000      	b.n	8001002 <NVIC_EncodePriority+0x32>
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001004:	f04f 32ff 	mov.w	r2, #4294967295
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43da      	mvns	r2, r3
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	401a      	ands	r2, r3
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001018:	f04f 31ff 	mov.w	r1, #4294967295
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	fa01 f303 	lsl.w	r3, r1, r3
 8001022:	43d9      	mvns	r1, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001028:	4313      	orrs	r3, r2
         );
}
 800102a:	4618      	mov	r0, r3
 800102c:	3724      	adds	r7, #36	; 0x24
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
	...

08001038 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3b01      	subs	r3, #1
 8001044:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001048:	d301      	bcc.n	800104e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800104a:	2301      	movs	r3, #1
 800104c:	e00f      	b.n	800106e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800104e:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <SysTick_Config+0x40>)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3b01      	subs	r3, #1
 8001054:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001056:	210f      	movs	r1, #15
 8001058:	f04f 30ff 	mov.w	r0, #4294967295
 800105c:	f7ff ff8e 	bl	8000f7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001060:	4b05      	ldr	r3, [pc, #20]	; (8001078 <SysTick_Config+0x40>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001066:	4b04      	ldr	r3, [pc, #16]	; (8001078 <SysTick_Config+0x40>)
 8001068:	2207      	movs	r2, #7
 800106a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	e000e010 	.word	0xe000e010

0800107c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f7ff ff29 	bl	8000edc <__NVIC_SetPriorityGrouping>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001092:	b580      	push	{r7, lr}
 8001094:	b086      	sub	sp, #24
 8001096:	af00      	add	r7, sp, #0
 8001098:	4603      	mov	r3, r0
 800109a:	60b9      	str	r1, [r7, #8]
 800109c:	607a      	str	r2, [r7, #4]
 800109e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010a4:	f7ff ff3e 	bl	8000f24 <__NVIC_GetPriorityGrouping>
 80010a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	68b9      	ldr	r1, [r7, #8]
 80010ae:	6978      	ldr	r0, [r7, #20]
 80010b0:	f7ff ff8e 	bl	8000fd0 <NVIC_EncodePriority>
 80010b4:	4602      	mov	r2, r0
 80010b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ba:	4611      	mov	r1, r2
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ff5d 	bl	8000f7c <__NVIC_SetPriority>
}
 80010c2:	bf00      	nop
 80010c4:	3718      	adds	r7, #24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	4603      	mov	r3, r0
 80010d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff ff31 	bl	8000f40 <__NVIC_EnableIRQ>
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff ffa2 	bl	8001038 <SysTick_Config>
 80010f4:	4603      	mov	r3, r0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001100:	b480      	push	{r7}
 8001102:	b089      	sub	sp, #36	; 0x24
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001112:	2300      	movs	r3, #0
 8001114:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]
 800111a:	e159      	b.n	80013d0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800111c:	2201      	movs	r2, #1
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	697a      	ldr	r2, [r7, #20]
 800112c:	4013      	ands	r3, r2
 800112e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	429a      	cmp	r2, r3
 8001136:	f040 8148 	bne.w	80013ca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f003 0303 	and.w	r3, r3, #3
 8001142:	2b01      	cmp	r3, #1
 8001144:	d005      	beq.n	8001152 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800114e:	2b02      	cmp	r3, #2
 8001150:	d130      	bne.n	80011b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	2203      	movs	r2, #3
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4013      	ands	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	68da      	ldr	r2, [r3, #12]
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4313      	orrs	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001188:	2201      	movs	r2, #1
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	091b      	lsrs	r3, r3, #4
 800119e:	f003 0201 	and.w	r2, r3, #1
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f003 0303 	and.w	r3, r3, #3
 80011bc:	2b03      	cmp	r3, #3
 80011be:	d017      	beq.n	80011f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	2203      	movs	r2, #3
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	689a      	ldr	r2, [r3, #8]
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f003 0303 	and.w	r3, r3, #3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d123      	bne.n	8001244 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	08da      	lsrs	r2, r3, #3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3208      	adds	r2, #8
 8001204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001208:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	f003 0307 	and.w	r3, r3, #7
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	220f      	movs	r2, #15
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	43db      	mvns	r3, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4013      	ands	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	691a      	ldr	r2, [r3, #16]
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	08da      	lsrs	r2, r3, #3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	3208      	adds	r2, #8
 800123e:	69b9      	ldr	r1, [r7, #24]
 8001240:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	2203      	movs	r2, #3
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 0203 	and.w	r2, r3, #3
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001280:	2b00      	cmp	r3, #0
 8001282:	f000 80a2 	beq.w	80013ca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	4b57      	ldr	r3, [pc, #348]	; (80013e8 <HAL_GPIO_Init+0x2e8>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128e:	4a56      	ldr	r2, [pc, #344]	; (80013e8 <HAL_GPIO_Init+0x2e8>)
 8001290:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001294:	6453      	str	r3, [r2, #68]	; 0x44
 8001296:	4b54      	ldr	r3, [pc, #336]	; (80013e8 <HAL_GPIO_Init+0x2e8>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012a2:	4a52      	ldr	r2, [pc, #328]	; (80013ec <HAL_GPIO_Init+0x2ec>)
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	089b      	lsrs	r3, r3, #2
 80012a8:	3302      	adds	r3, #2
 80012aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f003 0303 	and.w	r3, r3, #3
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	220f      	movs	r2, #15
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43db      	mvns	r3, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4013      	ands	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a49      	ldr	r2, [pc, #292]	; (80013f0 <HAL_GPIO_Init+0x2f0>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d019      	beq.n	8001302 <HAL_GPIO_Init+0x202>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a48      	ldr	r2, [pc, #288]	; (80013f4 <HAL_GPIO_Init+0x2f4>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d013      	beq.n	80012fe <HAL_GPIO_Init+0x1fe>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a47      	ldr	r2, [pc, #284]	; (80013f8 <HAL_GPIO_Init+0x2f8>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d00d      	beq.n	80012fa <HAL_GPIO_Init+0x1fa>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a46      	ldr	r2, [pc, #280]	; (80013fc <HAL_GPIO_Init+0x2fc>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d007      	beq.n	80012f6 <HAL_GPIO_Init+0x1f6>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a45      	ldr	r2, [pc, #276]	; (8001400 <HAL_GPIO_Init+0x300>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d101      	bne.n	80012f2 <HAL_GPIO_Init+0x1f2>
 80012ee:	2304      	movs	r3, #4
 80012f0:	e008      	b.n	8001304 <HAL_GPIO_Init+0x204>
 80012f2:	2307      	movs	r3, #7
 80012f4:	e006      	b.n	8001304 <HAL_GPIO_Init+0x204>
 80012f6:	2303      	movs	r3, #3
 80012f8:	e004      	b.n	8001304 <HAL_GPIO_Init+0x204>
 80012fa:	2302      	movs	r3, #2
 80012fc:	e002      	b.n	8001304 <HAL_GPIO_Init+0x204>
 80012fe:	2301      	movs	r3, #1
 8001300:	e000      	b.n	8001304 <HAL_GPIO_Init+0x204>
 8001302:	2300      	movs	r3, #0
 8001304:	69fa      	ldr	r2, [r7, #28]
 8001306:	f002 0203 	and.w	r2, r2, #3
 800130a:	0092      	lsls	r2, r2, #2
 800130c:	4093      	lsls	r3, r2
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4313      	orrs	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001314:	4935      	ldr	r1, [pc, #212]	; (80013ec <HAL_GPIO_Init+0x2ec>)
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	089b      	lsrs	r3, r3, #2
 800131a:	3302      	adds	r3, #2
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001322:	4b38      	ldr	r3, [pc, #224]	; (8001404 <HAL_GPIO_Init+0x304>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	43db      	mvns	r3, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4013      	ands	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	4313      	orrs	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001346:	4a2f      	ldr	r2, [pc, #188]	; (8001404 <HAL_GPIO_Init+0x304>)
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800134c:	4b2d      	ldr	r3, [pc, #180]	; (8001404 <HAL_GPIO_Init+0x304>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	43db      	mvns	r3, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d003      	beq.n	8001370 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	4313      	orrs	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001370:	4a24      	ldr	r2, [pc, #144]	; (8001404 <HAL_GPIO_Init+0x304>)
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001376:	4b23      	ldr	r3, [pc, #140]	; (8001404 <HAL_GPIO_Init+0x304>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	43db      	mvns	r3, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4013      	ands	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	4313      	orrs	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800139a:	4a1a      	ldr	r2, [pc, #104]	; (8001404 <HAL_GPIO_Init+0x304>)
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013a0:	4b18      	ldr	r3, [pc, #96]	; (8001404 <HAL_GPIO_Init+0x304>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	43db      	mvns	r3, r3
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4013      	ands	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d003      	beq.n	80013c4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013c4:	4a0f      	ldr	r2, [pc, #60]	; (8001404 <HAL_GPIO_Init+0x304>)
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	3301      	adds	r3, #1
 80013ce:	61fb      	str	r3, [r7, #28]
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	2b0f      	cmp	r3, #15
 80013d4:	f67f aea2 	bls.w	800111c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013d8:	bf00      	nop
 80013da:	bf00      	nop
 80013dc:	3724      	adds	r7, #36	; 0x24
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40013800 	.word	0x40013800
 80013f0:	40020000 	.word	0x40020000
 80013f4:	40020400 	.word	0x40020400
 80013f8:	40020800 	.word	0x40020800
 80013fc:	40020c00 	.word	0x40020c00
 8001400:	40021000 	.word	0x40021000
 8001404:	40013c00 	.word	0x40013c00

08001408 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	460b      	mov	r3, r1
 8001412:	807b      	strh	r3, [r7, #2]
 8001414:	4613      	mov	r3, r2
 8001416:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001418:	787b      	ldrb	r3, [r7, #1]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800141e:	887a      	ldrh	r2, [r7, #2]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001424:	e003      	b.n	800142e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001426:	887b      	ldrh	r3, [r7, #2]
 8001428:	041a      	lsls	r2, r3, #16
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	619a      	str	r2, [r3, #24]
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
	...

0800143c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d101      	bne.n	800144e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e12b      	b.n	80016a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001454:	b2db      	uxtb	r3, r3
 8001456:	2b00      	cmp	r3, #0
 8001458:	d106      	bne.n	8001468 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2200      	movs	r2, #0
 800145e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff fad6 	bl	8000a14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2224      	movs	r2, #36	; 0x24
 800146c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f022 0201 	bic.w	r2, r2, #1
 800147e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800148e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800149e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014a0:	f002 fc9e 	bl	8003de0 <HAL_RCC_GetPCLK1Freq>
 80014a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	4a81      	ldr	r2, [pc, #516]	; (80016b0 <HAL_I2C_Init+0x274>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d807      	bhi.n	80014c0 <HAL_I2C_Init+0x84>
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4a80      	ldr	r2, [pc, #512]	; (80016b4 <HAL_I2C_Init+0x278>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	bf94      	ite	ls
 80014b8:	2301      	movls	r3, #1
 80014ba:	2300      	movhi	r3, #0
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	e006      	b.n	80014ce <HAL_I2C_Init+0x92>
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	4a7d      	ldr	r2, [pc, #500]	; (80016b8 <HAL_I2C_Init+0x27c>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	bf94      	ite	ls
 80014c8:	2301      	movls	r3, #1
 80014ca:	2300      	movhi	r3, #0
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e0e7      	b.n	80016a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	4a78      	ldr	r2, [pc, #480]	; (80016bc <HAL_I2C_Init+0x280>)
 80014da:	fba2 2303 	umull	r2, r3, r2, r3
 80014de:	0c9b      	lsrs	r3, r3, #18
 80014e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	68ba      	ldr	r2, [r7, #8]
 80014f2:	430a      	orrs	r2, r1
 80014f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	6a1b      	ldr	r3, [r3, #32]
 80014fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	4a6a      	ldr	r2, [pc, #424]	; (80016b0 <HAL_I2C_Init+0x274>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d802      	bhi.n	8001510 <HAL_I2C_Init+0xd4>
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	3301      	adds	r3, #1
 800150e:	e009      	b.n	8001524 <HAL_I2C_Init+0xe8>
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001516:	fb02 f303 	mul.w	r3, r2, r3
 800151a:	4a69      	ldr	r2, [pc, #420]	; (80016c0 <HAL_I2C_Init+0x284>)
 800151c:	fba2 2303 	umull	r2, r3, r2, r3
 8001520:	099b      	lsrs	r3, r3, #6
 8001522:	3301      	adds	r3, #1
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	6812      	ldr	r2, [r2, #0]
 8001528:	430b      	orrs	r3, r1
 800152a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001536:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	495c      	ldr	r1, [pc, #368]	; (80016b0 <HAL_I2C_Init+0x274>)
 8001540:	428b      	cmp	r3, r1
 8001542:	d819      	bhi.n	8001578 <HAL_I2C_Init+0x13c>
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	1e59      	subs	r1, r3, #1
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001552:	1c59      	adds	r1, r3, #1
 8001554:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001558:	400b      	ands	r3, r1
 800155a:	2b00      	cmp	r3, #0
 800155c:	d00a      	beq.n	8001574 <HAL_I2C_Init+0x138>
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	1e59      	subs	r1, r3, #1
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	fbb1 f3f3 	udiv	r3, r1, r3
 800156c:	3301      	adds	r3, #1
 800156e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001572:	e051      	b.n	8001618 <HAL_I2C_Init+0x1dc>
 8001574:	2304      	movs	r3, #4
 8001576:	e04f      	b.n	8001618 <HAL_I2C_Init+0x1dc>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d111      	bne.n	80015a4 <HAL_I2C_Init+0x168>
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	1e58      	subs	r0, r3, #1
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6859      	ldr	r1, [r3, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	440b      	add	r3, r1
 800158e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001592:	3301      	adds	r3, #1
 8001594:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001598:	2b00      	cmp	r3, #0
 800159a:	bf0c      	ite	eq
 800159c:	2301      	moveq	r3, #1
 800159e:	2300      	movne	r3, #0
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	e012      	b.n	80015ca <HAL_I2C_Init+0x18e>
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	1e58      	subs	r0, r3, #1
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6859      	ldr	r1, [r3, #4]
 80015ac:	460b      	mov	r3, r1
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	440b      	add	r3, r1
 80015b2:	0099      	lsls	r1, r3, #2
 80015b4:	440b      	add	r3, r1
 80015b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80015ba:	3301      	adds	r3, #1
 80015bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	bf0c      	ite	eq
 80015c4:	2301      	moveq	r3, #1
 80015c6:	2300      	movne	r3, #0
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <HAL_I2C_Init+0x196>
 80015ce:	2301      	movs	r3, #1
 80015d0:	e022      	b.n	8001618 <HAL_I2C_Init+0x1dc>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d10e      	bne.n	80015f8 <HAL_I2C_Init+0x1bc>
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	1e58      	subs	r0, r3, #1
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6859      	ldr	r1, [r3, #4]
 80015e2:	460b      	mov	r3, r1
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	440b      	add	r3, r1
 80015e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80015ec:	3301      	adds	r3, #1
 80015ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015f6:	e00f      	b.n	8001618 <HAL_I2C_Init+0x1dc>
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	1e58      	subs	r0, r3, #1
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6859      	ldr	r1, [r3, #4]
 8001600:	460b      	mov	r3, r1
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	440b      	add	r3, r1
 8001606:	0099      	lsls	r1, r3, #2
 8001608:	440b      	add	r3, r1
 800160a:	fbb0 f3f3 	udiv	r3, r0, r3
 800160e:	3301      	adds	r3, #1
 8001610:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001614:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001618:	6879      	ldr	r1, [r7, #4]
 800161a:	6809      	ldr	r1, [r1, #0]
 800161c:	4313      	orrs	r3, r2
 800161e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	69da      	ldr	r2, [r3, #28]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a1b      	ldr	r3, [r3, #32]
 8001632:	431a      	orrs	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	430a      	orrs	r2, r1
 800163a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001646:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	6911      	ldr	r1, [r2, #16]
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	68d2      	ldr	r2, [r2, #12]
 8001652:	4311      	orrs	r1, r2
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	6812      	ldr	r2, [r2, #0]
 8001658:	430b      	orrs	r3, r1
 800165a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	695a      	ldr	r2, [r3, #20]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	431a      	orrs	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	430a      	orrs	r2, r1
 8001676:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f042 0201 	orr.w	r2, r2, #1
 8001686:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2220      	movs	r2, #32
 8001692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	000186a0 	.word	0x000186a0
 80016b4:	001e847f 	.word	0x001e847f
 80016b8:	003d08ff 	.word	0x003d08ff
 80016bc:	431bde83 	.word	0x431bde83
 80016c0:	10624dd3 	.word	0x10624dd3

080016c4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b088      	sub	sp, #32
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d101      	bne.n	80016d6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e128      	b.n	8001928 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d109      	bne.n	80016f6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a90      	ldr	r2, [pc, #576]	; (8001930 <HAL_I2S_Init+0x26c>)
 80016ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7ff f9d7 	bl	8000aa4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2202      	movs	r2, #2
 80016fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	69db      	ldr	r3, [r3, #28]
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	6812      	ldr	r2, [r2, #0]
 8001708:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800170c:	f023 030f 	bic.w	r3, r3, #15
 8001710:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2202      	movs	r2, #2
 8001718:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	2b02      	cmp	r3, #2
 8001720:	d060      	beq.n	80017e4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d102      	bne.n	8001730 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800172a:	2310      	movs	r3, #16
 800172c:	617b      	str	r3, [r7, #20]
 800172e:	e001      	b.n	8001734 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001730:	2320      	movs	r3, #32
 8001732:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	2b20      	cmp	r3, #32
 800173a:	d802      	bhi.n	8001742 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001742:	2001      	movs	r0, #1
 8001744:	f002 fc50 	bl	8003fe8 <HAL_RCCEx_GetPeriphCLKFreq>
 8001748:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001752:	d125      	bne.n	80017a0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d010      	beq.n	800177e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	68fa      	ldr	r2, [r7, #12]
 8001762:	fbb2 f2f3 	udiv	r2, r2, r3
 8001766:	4613      	mov	r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	4413      	add	r3, r2
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	461a      	mov	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	695b      	ldr	r3, [r3, #20]
 8001774:	fbb2 f3f3 	udiv	r3, r2, r3
 8001778:	3305      	adds	r3, #5
 800177a:	613b      	str	r3, [r7, #16]
 800177c:	e01f      	b.n	80017be <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	fbb2 f2f3 	udiv	r2, r2, r3
 8001788:	4613      	mov	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4413      	add	r3, r2
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	461a      	mov	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	695b      	ldr	r3, [r3, #20]
 8001796:	fbb2 f3f3 	udiv	r3, r2, r3
 800179a:	3305      	adds	r3, #5
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	e00e      	b.n	80017be <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80017a0:	68fa      	ldr	r2, [r7, #12]
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80017a8:	4613      	mov	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	4413      	add	r3, r2
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	461a      	mov	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ba:	3305      	adds	r3, #5
 80017bc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	4a5c      	ldr	r2, [pc, #368]	; (8001934 <HAL_I2S_Init+0x270>)
 80017c2:	fba2 2303 	umull	r2, r3, r2, r3
 80017c6:	08db      	lsrs	r3, r3, #3
 80017c8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	085b      	lsrs	r3, r3, #1
 80017da:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	021b      	lsls	r3, r3, #8
 80017e0:	61bb      	str	r3, [r7, #24]
 80017e2:	e003      	b.n	80017ec <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80017e4:	2302      	movs	r3, #2
 80017e6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80017e8:	2300      	movs	r3, #0
 80017ea:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d902      	bls.n	80017f8 <HAL_I2S_Init+0x134>
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	2bff      	cmp	r3, #255	; 0xff
 80017f6:	d907      	bls.n	8001808 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fc:	f043 0210 	orr.w	r2, r3, #16
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e08f      	b.n	8001928 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	691a      	ldr	r2, [r3, #16]
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	ea42 0103 	orr.w	r1, r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	69fa      	ldr	r2, [r7, #28]
 8001818:	430a      	orrs	r2, r1
 800181a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001826:	f023 030f 	bic.w	r3, r3, #15
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	6851      	ldr	r1, [r2, #4]
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	6892      	ldr	r2, [r2, #8]
 8001832:	4311      	orrs	r1, r2
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	68d2      	ldr	r2, [r2, #12]
 8001838:	4311      	orrs	r1, r2
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	6992      	ldr	r2, [r2, #24]
 800183e:	430a      	orrs	r2, r1
 8001840:	431a      	orrs	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800184a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a1b      	ldr	r3, [r3, #32]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d161      	bne.n	8001918 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a38      	ldr	r2, [pc, #224]	; (8001938 <HAL_I2S_Init+0x274>)
 8001858:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a37      	ldr	r2, [pc, #220]	; (800193c <HAL_I2S_Init+0x278>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d101      	bne.n	8001868 <HAL_I2S_Init+0x1a4>
 8001864:	4b36      	ldr	r3, [pc, #216]	; (8001940 <HAL_I2S_Init+0x27c>)
 8001866:	e001      	b.n	800186c <HAL_I2S_Init+0x1a8>
 8001868:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	6812      	ldr	r2, [r2, #0]
 8001872:	4932      	ldr	r1, [pc, #200]	; (800193c <HAL_I2S_Init+0x278>)
 8001874:	428a      	cmp	r2, r1
 8001876:	d101      	bne.n	800187c <HAL_I2S_Init+0x1b8>
 8001878:	4a31      	ldr	r2, [pc, #196]	; (8001940 <HAL_I2S_Init+0x27c>)
 800187a:	e001      	b.n	8001880 <HAL_I2S_Init+0x1bc>
 800187c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001880:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001884:	f023 030f 	bic.w	r3, r3, #15
 8001888:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a2b      	ldr	r2, [pc, #172]	; (800193c <HAL_I2S_Init+0x278>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d101      	bne.n	8001898 <HAL_I2S_Init+0x1d4>
 8001894:	4b2a      	ldr	r3, [pc, #168]	; (8001940 <HAL_I2S_Init+0x27c>)
 8001896:	e001      	b.n	800189c <HAL_I2S_Init+0x1d8>
 8001898:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800189c:	2202      	movs	r2, #2
 800189e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a25      	ldr	r2, [pc, #148]	; (800193c <HAL_I2S_Init+0x278>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d101      	bne.n	80018ae <HAL_I2S_Init+0x1ea>
 80018aa:	4b25      	ldr	r3, [pc, #148]	; (8001940 <HAL_I2S_Init+0x27c>)
 80018ac:	e001      	b.n	80018b2 <HAL_I2S_Init+0x1ee>
 80018ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80018b2:	69db      	ldr	r3, [r3, #28]
 80018b4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018be:	d003      	beq.n	80018c8 <HAL_I2S_Init+0x204>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d103      	bne.n	80018d0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80018c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018cc:	613b      	str	r3, [r7, #16]
 80018ce:	e001      	b.n	80018d4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80018d0:	2300      	movs	r3, #0
 80018d2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80018de:	4313      	orrs	r3, r2
 80018e0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80018e8:	4313      	orrs	r3, r2
 80018ea:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80018f2:	4313      	orrs	r3, r2
 80018f4:	b29a      	uxth	r2, r3
 80018f6:	897b      	ldrh	r3, [r7, #10]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001900:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a0d      	ldr	r2, [pc, #52]	; (800193c <HAL_I2S_Init+0x278>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d101      	bne.n	8001910 <HAL_I2S_Init+0x24c>
 800190c:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <HAL_I2S_Init+0x27c>)
 800190e:	e001      	b.n	8001914 <HAL_I2S_Init+0x250>
 8001910:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001914:	897a      	ldrh	r2, [r7, #10]
 8001916:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2201      	movs	r2, #1
 8001922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001926:	2300      	movs	r3, #0
}
 8001928:	4618      	mov	r0, r3
 800192a:	3720      	adds	r7, #32
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	08001a3b 	.word	0x08001a3b
 8001934:	cccccccd 	.word	0xcccccccd
 8001938:	08001b51 	.word	0x08001b51
 800193c:	40003800 	.word	0x40003800
 8001940:	40003400 	.word	0x40003400

08001944 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198c:	881a      	ldrh	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001998:	1c9a      	adds	r2, r3, #2
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	3b01      	subs	r3, #1
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d10e      	bne.n	80019d4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	685a      	ldr	r2, [r3, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80019c4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2201      	movs	r2, #1
 80019ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff ffb8 	bl	8001944 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80019d4:	bf00      	nop
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	68da      	ldr	r2, [r3, #12]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ee:	b292      	uxth	r2, r2
 80019f0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f6:	1c9a      	adds	r2, r3, #2
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	3b01      	subs	r3, #1
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d10e      	bne.n	8001a32 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001a22:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f7ff ff93 	bl	8001958 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b086      	sub	sp, #24
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	d13a      	bne.n	8001acc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d109      	bne.n	8001a74 <I2S_IRQHandler+0x3a>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a6a:	2b40      	cmp	r3, #64	; 0x40
 8001a6c:	d102      	bne.n	8001a74 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7ff ffb4 	bl	80019dc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a7a:	2b40      	cmp	r3, #64	; 0x40
 8001a7c:	d126      	bne.n	8001acc <I2S_IRQHandler+0x92>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 0320 	and.w	r3, r3, #32
 8001a88:	2b20      	cmp	r3, #32
 8001a8a:	d11f      	bne.n	8001acc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	685a      	ldr	r2, [r3, #4]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001a9a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	613b      	str	r3, [r7, #16]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	613b      	str	r3, [r7, #16]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	613b      	str	r3, [r7, #16]
 8001ab0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abe:	f043 0202 	orr.w	r2, r3, #2
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff ff50 	bl	800196c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	2b03      	cmp	r3, #3
 8001ad6:	d136      	bne.n	8001b46 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d109      	bne.n	8001af6 <I2S_IRQHandler+0xbc>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aec:	2b80      	cmp	r3, #128	; 0x80
 8001aee:	d102      	bne.n	8001af6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f7ff ff45 	bl	8001980 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	f003 0308 	and.w	r3, r3, #8
 8001afc:	2b08      	cmp	r3, #8
 8001afe:	d122      	bne.n	8001b46 <I2S_IRQHandler+0x10c>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f003 0320 	and.w	r3, r3, #32
 8001b0a:	2b20      	cmp	r3, #32
 8001b0c:	d11b      	bne.n	8001b46 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	685a      	ldr	r2, [r3, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001b1c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b38:	f043 0204 	orr.w	r2, r3, #4
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f7ff ff13 	bl	800196c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001b46:	bf00      	nop
 8001b48:	3718      	adds	r7, #24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
	...

08001b50 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b088      	sub	sp, #32
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a92      	ldr	r2, [pc, #584]	; (8001db0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d101      	bne.n	8001b6e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001b6a:	4b92      	ldr	r3, [pc, #584]	; (8001db4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001b6c:	e001      	b.n	8001b72 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001b6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a8b      	ldr	r2, [pc, #556]	; (8001db0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d101      	bne.n	8001b8c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001b88:	4b8a      	ldr	r3, [pc, #552]	; (8001db4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001b8a:	e001      	b.n	8001b90 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001b8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b9c:	d004      	beq.n	8001ba8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f040 8099 	bne.w	8001cda <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d107      	bne.n	8001bc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d002      	beq.n	8001bc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f000 f925 	bl	8001e0c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d107      	bne.n	8001bdc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d002      	beq.n	8001bdc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 f9c8 	bl	8001f6c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001be2:	2b40      	cmp	r3, #64	; 0x40
 8001be4:	d13a      	bne.n	8001c5c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	f003 0320 	and.w	r3, r3, #32
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d035      	beq.n	8001c5c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a6e      	ldr	r2, [pc, #440]	; (8001db0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d101      	bne.n	8001bfe <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001bfa:	4b6e      	ldr	r3, [pc, #440]	; (8001db4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001bfc:	e001      	b.n	8001c02 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001bfe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4969      	ldr	r1, [pc, #420]	; (8001db0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001c0a:	428b      	cmp	r3, r1
 8001c0c:	d101      	bne.n	8001c12 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001c0e:	4b69      	ldr	r3, [pc, #420]	; (8001db4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001c10:	e001      	b.n	8001c16 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001c12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c16:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001c1a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	685a      	ldr	r2, [r3, #4]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001c2a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2201      	movs	r2, #1
 8001c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	f043 0202 	orr.w	r2, r3, #2
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff fe88 	bl	800196c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	f003 0308 	and.w	r3, r3, #8
 8001c62:	2b08      	cmp	r3, #8
 8001c64:	f040 80c3 	bne.w	8001dee <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	f003 0320 	and.w	r3, r3, #32
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f000 80bd 	beq.w	8001dee <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	685a      	ldr	r2, [r3, #4]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001c82:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a49      	ldr	r2, [pc, #292]	; (8001db0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d101      	bne.n	8001c92 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001c8e:	4b49      	ldr	r3, [pc, #292]	; (8001db4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001c90:	e001      	b.n	8001c96 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001c92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4944      	ldr	r1, [pc, #272]	; (8001db0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001c9e:	428b      	cmp	r3, r1
 8001ca0:	d101      	bne.n	8001ca6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001ca2:	4b44      	ldr	r3, [pc, #272]	; (8001db4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001ca4:	e001      	b.n	8001caa <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001ca6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001caa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001cae:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	60bb      	str	r3, [r7, #8]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	60bb      	str	r3, [r7, #8]
 8001cbc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cca:	f043 0204 	orr.w	r2, r3, #4
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f7ff fe4a 	bl	800196c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001cd8:	e089      	b.n	8001dee <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d107      	bne.n	8001cf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d002      	beq.n	8001cf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 f8be 	bl	8001e70 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d107      	bne.n	8001d0e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d002      	beq.n	8001d0e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 f8fd 	bl	8001f08 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d14:	2b40      	cmp	r3, #64	; 0x40
 8001d16:	d12f      	bne.n	8001d78 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	f003 0320 	and.w	r3, r3, #32
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d02a      	beq.n	8001d78 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	685a      	ldr	r2, [r3, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001d30:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a1e      	ldr	r2, [pc, #120]	; (8001db0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d101      	bne.n	8001d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001d3c:	4b1d      	ldr	r3, [pc, #116]	; (8001db4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d3e:	e001      	b.n	8001d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001d40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d44:	685a      	ldr	r2, [r3, #4]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4919      	ldr	r1, [pc, #100]	; (8001db0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d4c:	428b      	cmp	r3, r1
 8001d4e:	d101      	bne.n	8001d54 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001d50:	4b18      	ldr	r3, [pc, #96]	; (8001db4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d52:	e001      	b.n	8001d58 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001d54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d58:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d5c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2201      	movs	r2, #1
 8001d62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6a:	f043 0202 	orr.w	r2, r3, #2
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7ff fdfa 	bl	800196c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	2b08      	cmp	r3, #8
 8001d80:	d136      	bne.n	8001df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	f003 0320 	and.w	r3, r3, #32
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d031      	beq.n	8001df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a07      	ldr	r2, [pc, #28]	; (8001db0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d101      	bne.n	8001d9a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001d96:	4b07      	ldr	r3, [pc, #28]	; (8001db4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d98:	e001      	b.n	8001d9e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001d9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d9e:	685a      	ldr	r2, [r3, #4]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4902      	ldr	r1, [pc, #8]	; (8001db0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001da6:	428b      	cmp	r3, r1
 8001da8:	d106      	bne.n	8001db8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8001daa:	4b02      	ldr	r3, [pc, #8]	; (8001db4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001dac:	e006      	b.n	8001dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8001dae:	bf00      	nop
 8001db0:	40003800 	.word	0x40003800
 8001db4:	40003400 	.word	0x40003400
 8001db8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001dbc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001dc0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001dd0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dde:	f043 0204 	orr.w	r2, r3, #4
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7ff fdc0 	bl	800196c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001dec:	e000      	b.n	8001df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001dee:	bf00      	nop
}
 8001df0:	bf00      	nop
 8001df2:	3720      	adds	r7, #32
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e18:	1c99      	adds	r1, r3, #2
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	6251      	str	r1, [r2, #36]	; 0x24
 8001e1e:	881a      	ldrh	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	3b01      	subs	r3, #1
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d113      	bne.n	8001e66 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	685a      	ldr	r2, [r3, #4]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e4c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d106      	bne.n	8001e66 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f7ff ffc9 	bl	8001df8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001e66:	bf00      	nop
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
	...

08001e70 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7c:	1c99      	adds	r1, r3, #2
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	6251      	str	r1, [r2, #36]	; 0x24
 8001e82:	8819      	ldrh	r1, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a1d      	ldr	r2, [pc, #116]	; (8001f00 <I2SEx_TxISR_I2SExt+0x90>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d101      	bne.n	8001e92 <I2SEx_TxISR_I2SExt+0x22>
 8001e8e:	4b1d      	ldr	r3, [pc, #116]	; (8001f04 <I2SEx_TxISR_I2SExt+0x94>)
 8001e90:	e001      	b.n	8001e96 <I2SEx_TxISR_I2SExt+0x26>
 8001e92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e96:	460a      	mov	r2, r1
 8001e98:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d121      	bne.n	8001ef6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a12      	ldr	r2, [pc, #72]	; (8001f00 <I2SEx_TxISR_I2SExt+0x90>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d101      	bne.n	8001ec0 <I2SEx_TxISR_I2SExt+0x50>
 8001ebc:	4b11      	ldr	r3, [pc, #68]	; (8001f04 <I2SEx_TxISR_I2SExt+0x94>)
 8001ebe:	e001      	b.n	8001ec4 <I2SEx_TxISR_I2SExt+0x54>
 8001ec0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	490d      	ldr	r1, [pc, #52]	; (8001f00 <I2SEx_TxISR_I2SExt+0x90>)
 8001ecc:	428b      	cmp	r3, r1
 8001ece:	d101      	bne.n	8001ed4 <I2SEx_TxISR_I2SExt+0x64>
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <I2SEx_TxISR_I2SExt+0x94>)
 8001ed2:	e001      	b.n	8001ed8 <I2SEx_TxISR_I2SExt+0x68>
 8001ed4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ed8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001edc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d106      	bne.n	8001ef6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f7ff ff81 	bl	8001df8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001ef6:	bf00      	nop
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40003800 	.word	0x40003800
 8001f04:	40003400 	.word	0x40003400

08001f08 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68d8      	ldr	r0, [r3, #12]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1a:	1c99      	adds	r1, r3, #2
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001f20:	b282      	uxth	r2, r0
 8001f22:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d113      	bne.n	8001f64 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	685a      	ldr	r2, [r3, #4]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f4a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d106      	bne.n	8001f64 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7ff ff4a 	bl	8001df8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001f64:	bf00      	nop
 8001f66:	3708      	adds	r7, #8
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a20      	ldr	r2, [pc, #128]	; (8001ffc <I2SEx_RxISR_I2SExt+0x90>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d101      	bne.n	8001f82 <I2SEx_RxISR_I2SExt+0x16>
 8001f7e:	4b20      	ldr	r3, [pc, #128]	; (8002000 <I2SEx_RxISR_I2SExt+0x94>)
 8001f80:	e001      	b.n	8001f86 <I2SEx_RxISR_I2SExt+0x1a>
 8001f82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f86:	68d8      	ldr	r0, [r3, #12]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8c:	1c99      	adds	r1, r3, #2
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001f92:	b282      	uxth	r2, r0
 8001f94:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d121      	bne.n	8001ff2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a12      	ldr	r2, [pc, #72]	; (8001ffc <I2SEx_RxISR_I2SExt+0x90>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d101      	bne.n	8001fbc <I2SEx_RxISR_I2SExt+0x50>
 8001fb8:	4b11      	ldr	r3, [pc, #68]	; (8002000 <I2SEx_RxISR_I2SExt+0x94>)
 8001fba:	e001      	b.n	8001fc0 <I2SEx_RxISR_I2SExt+0x54>
 8001fbc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	490d      	ldr	r1, [pc, #52]	; (8001ffc <I2SEx_RxISR_I2SExt+0x90>)
 8001fc8:	428b      	cmp	r3, r1
 8001fca:	d101      	bne.n	8001fd0 <I2SEx_RxISR_I2SExt+0x64>
 8001fcc:	4b0c      	ldr	r3, [pc, #48]	; (8002000 <I2SEx_RxISR_I2SExt+0x94>)
 8001fce:	e001      	b.n	8001fd4 <I2SEx_RxISR_I2SExt+0x68>
 8001fd0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fd4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001fd8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d106      	bne.n	8001ff2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7ff ff03 	bl	8001df8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40003800 	.word	0x40003800
 8002000:	40003400 	.word	0x40003400

08002004 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002006:	b08f      	sub	sp, #60	; 0x3c
 8002008:	af0a      	add	r7, sp, #40	; 0x28
 800200a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e10f      	b.n	8002236 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b00      	cmp	r3, #0
 8002026:	d106      	bne.n	8002036 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f005 fead 	bl	8007d90 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2203      	movs	r2, #3
 800203a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002046:	2b00      	cmp	r3, #0
 8002048:	d102      	bne.n	8002050 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f002 f9c4 	bl	80043e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	603b      	str	r3, [r7, #0]
 8002060:	687e      	ldr	r6, [r7, #4]
 8002062:	466d      	mov	r5, sp
 8002064:	f106 0410 	add.w	r4, r6, #16
 8002068:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800206a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800206c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800206e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002070:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002074:	e885 0003 	stmia.w	r5, {r0, r1}
 8002078:	1d33      	adds	r3, r6, #4
 800207a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800207c:	6838      	ldr	r0, [r7, #0]
 800207e:	f002 f89c 	bl	80041ba <USB_CoreInit>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d005      	beq.n	8002094 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2202      	movs	r2, #2
 800208c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e0d0      	b.n	8002236 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2100      	movs	r1, #0
 800209a:	4618      	mov	r0, r3
 800209c:	f002 f9b2 	bl	8004404 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020a0:	2300      	movs	r3, #0
 80020a2:	73fb      	strb	r3, [r7, #15]
 80020a4:	e04a      	b.n	800213c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020a6:	7bfa      	ldrb	r2, [r7, #15]
 80020a8:	6879      	ldr	r1, [r7, #4]
 80020aa:	4613      	mov	r3, r2
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	4413      	add	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	440b      	add	r3, r1
 80020b4:	333d      	adds	r3, #61	; 0x3d
 80020b6:	2201      	movs	r2, #1
 80020b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020ba:	7bfa      	ldrb	r2, [r7, #15]
 80020bc:	6879      	ldr	r1, [r7, #4]
 80020be:	4613      	mov	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	4413      	add	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	440b      	add	r3, r1
 80020c8:	333c      	adds	r3, #60	; 0x3c
 80020ca:	7bfa      	ldrb	r2, [r7, #15]
 80020cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80020ce:	7bfa      	ldrb	r2, [r7, #15]
 80020d0:	7bfb      	ldrb	r3, [r7, #15]
 80020d2:	b298      	uxth	r0, r3
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	4613      	mov	r3, r2
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	4413      	add	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	440b      	add	r3, r1
 80020e0:	3344      	adds	r3, #68	; 0x44
 80020e2:	4602      	mov	r2, r0
 80020e4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020e6:	7bfa      	ldrb	r2, [r7, #15]
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	4613      	mov	r3, r2
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	4413      	add	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	440b      	add	r3, r1
 80020f4:	3340      	adds	r3, #64	; 0x40
 80020f6:	2200      	movs	r2, #0
 80020f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020fa:	7bfa      	ldrb	r2, [r7, #15]
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	4613      	mov	r3, r2
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	4413      	add	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	440b      	add	r3, r1
 8002108:	3348      	adds	r3, #72	; 0x48
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800210e:	7bfa      	ldrb	r2, [r7, #15]
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	4613      	mov	r3, r2
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	4413      	add	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	440b      	add	r3, r1
 800211c:	334c      	adds	r3, #76	; 0x4c
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002122:	7bfa      	ldrb	r2, [r7, #15]
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	4613      	mov	r3, r2
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	4413      	add	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	440b      	add	r3, r1
 8002130:	3354      	adds	r3, #84	; 0x54
 8002132:	2200      	movs	r2, #0
 8002134:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002136:	7bfb      	ldrb	r3, [r7, #15]
 8002138:	3301      	adds	r3, #1
 800213a:	73fb      	strb	r3, [r7, #15]
 800213c:	7bfa      	ldrb	r2, [r7, #15]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	429a      	cmp	r2, r3
 8002144:	d3af      	bcc.n	80020a6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002146:	2300      	movs	r3, #0
 8002148:	73fb      	strb	r3, [r7, #15]
 800214a:	e044      	b.n	80021d6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800214c:	7bfa      	ldrb	r2, [r7, #15]
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	4613      	mov	r3, r2
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	4413      	add	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	440b      	add	r3, r1
 800215a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800215e:	2200      	movs	r2, #0
 8002160:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002162:	7bfa      	ldrb	r2, [r7, #15]
 8002164:	6879      	ldr	r1, [r7, #4]
 8002166:	4613      	mov	r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	4413      	add	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	440b      	add	r3, r1
 8002170:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002174:	7bfa      	ldrb	r2, [r7, #15]
 8002176:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002178:	7bfa      	ldrb	r2, [r7, #15]
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	4613      	mov	r3, r2
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	4413      	add	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	440b      	add	r3, r1
 8002186:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800218a:	2200      	movs	r2, #0
 800218c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800218e:	7bfa      	ldrb	r2, [r7, #15]
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	4613      	mov	r3, r2
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	4413      	add	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	440b      	add	r3, r1
 800219c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021a4:	7bfa      	ldrb	r2, [r7, #15]
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	4613      	mov	r3, r2
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	4413      	add	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	440b      	add	r3, r1
 80021b2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80021b6:	2200      	movs	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021ba:	7bfa      	ldrb	r2, [r7, #15]
 80021bc:	6879      	ldr	r1, [r7, #4]
 80021be:	4613      	mov	r3, r2
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	4413      	add	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	440b      	add	r3, r1
 80021c8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021d0:	7bfb      	ldrb	r3, [r7, #15]
 80021d2:	3301      	adds	r3, #1
 80021d4:	73fb      	strb	r3, [r7, #15]
 80021d6:	7bfa      	ldrb	r2, [r7, #15]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d3b5      	bcc.n	800214c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	603b      	str	r3, [r7, #0]
 80021e6:	687e      	ldr	r6, [r7, #4]
 80021e8:	466d      	mov	r5, sp
 80021ea:	f106 0410 	add.w	r4, r6, #16
 80021ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80021fe:	1d33      	adds	r3, r6, #4
 8002200:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002202:	6838      	ldr	r0, [r7, #0]
 8002204:	f002 f94a 	bl	800449c <USB_DevInit>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d005      	beq.n	800221a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2202      	movs	r2, #2
 8002212:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e00d      	b.n	8002236 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2201      	movs	r2, #1
 8002226:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f003 fa99 	bl	8005766 <USB_DevDisconnect>

  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3714      	adds	r7, #20
 800223a:	46bd      	mov	sp, r7
 800223c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800223e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b084      	sub	sp, #16
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002252:	2b01      	cmp	r3, #1
 8002254:	d101      	bne.n	800225a <HAL_PCD_Start+0x1c>
 8002256:	2302      	movs	r3, #2
 8002258:	e020      	b.n	800229c <HAL_PCD_Start+0x5e>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002266:	2b01      	cmp	r3, #1
 8002268:	d109      	bne.n	800227e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800226e:	2b01      	cmp	r3, #1
 8002270:	d005      	beq.n	800227e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002276:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f002 f89c 	bl	80043c0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f003 fa49 	bl	8005724 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80022a4:	b590      	push	{r4, r7, lr}
 80022a6:	b08d      	sub	sp, #52	; 0x34
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022b2:	6a3b      	ldr	r3, [r7, #32]
 80022b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f003 fb07 	bl	80058ce <USB_GetMode>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f040 848a 	bne.w	8002bdc <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f003 fa6b 	bl	80057a8 <USB_ReadInterrupts>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f000 8480 	beq.w	8002bda <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	0a1b      	lsrs	r3, r3, #8
 80022e4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f003 fa58 	bl	80057a8 <USB_ReadInterrupts>
 80022f8:	4603      	mov	r3, r0
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d107      	bne.n	8002312 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	695a      	ldr	r2, [r3, #20]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f002 0202 	and.w	r2, r2, #2
 8002310:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f003 fa46 	bl	80057a8 <USB_ReadInterrupts>
 800231c:	4603      	mov	r3, r0
 800231e:	f003 0310 	and.w	r3, r3, #16
 8002322:	2b10      	cmp	r3, #16
 8002324:	d161      	bne.n	80023ea <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	699a      	ldr	r2, [r3, #24]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 0210 	bic.w	r2, r2, #16
 8002334:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002336:	6a3b      	ldr	r3, [r7, #32]
 8002338:	6a1b      	ldr	r3, [r3, #32]
 800233a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	f003 020f 	and.w	r2, r3, #15
 8002342:	4613      	mov	r3, r2
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	4413      	add	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	4413      	add	r3, r2
 8002352:	3304      	adds	r3, #4
 8002354:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	0c5b      	lsrs	r3, r3, #17
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	2b02      	cmp	r3, #2
 8002360:	d124      	bne.n	80023ac <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002368:	4013      	ands	r3, r2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d035      	beq.n	80023da <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	091b      	lsrs	r3, r3, #4
 8002376:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002378:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800237c:	b29b      	uxth	r3, r3
 800237e:	461a      	mov	r2, r3
 8002380:	6a38      	ldr	r0, [r7, #32]
 8002382:	f003 f87d 	bl	8005480 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	691a      	ldr	r2, [r3, #16]
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	091b      	lsrs	r3, r3, #4
 800238e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002392:	441a      	add	r2, r3
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	6a1a      	ldr	r2, [r3, #32]
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	091b      	lsrs	r3, r3, #4
 80023a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023a4:	441a      	add	r2, r3
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	621a      	str	r2, [r3, #32]
 80023aa:	e016      	b.n	80023da <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	0c5b      	lsrs	r3, r3, #17
 80023b0:	f003 030f 	and.w	r3, r3, #15
 80023b4:	2b06      	cmp	r3, #6
 80023b6:	d110      	bne.n	80023da <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80023be:	2208      	movs	r2, #8
 80023c0:	4619      	mov	r1, r3
 80023c2:	6a38      	ldr	r0, [r7, #32]
 80023c4:	f003 f85c 	bl	8005480 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	6a1a      	ldr	r2, [r3, #32]
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	091b      	lsrs	r3, r3, #4
 80023d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023d4:	441a      	add	r2, r3
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	699a      	ldr	r2, [r3, #24]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f042 0210 	orr.w	r2, r2, #16
 80023e8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f003 f9da 	bl	80057a8 <USB_ReadInterrupts>
 80023f4:	4603      	mov	r3, r0
 80023f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023fa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80023fe:	f040 80a7 	bne.w	8002550 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002402:	2300      	movs	r3, #0
 8002404:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f003 f9df 	bl	80057ce <USB_ReadDevAllOutEpInterrupt>
 8002410:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002412:	e099      	b.n	8002548 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	f000 808e 	beq.w	800253c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	4611      	mov	r1, r2
 800242a:	4618      	mov	r0, r3
 800242c:	f003 fa03 	bl	8005836 <USB_ReadDevOutEPInterrupt>
 8002430:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00c      	beq.n	8002456 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243e:	015a      	lsls	r2, r3, #5
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	4413      	add	r3, r2
 8002444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002448:	461a      	mov	r2, r3
 800244a:	2301      	movs	r3, #1
 800244c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800244e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 fec3 	bl	80031dc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	f003 0308 	and.w	r3, r3, #8
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00c      	beq.n	800247a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002462:	015a      	lsls	r2, r3, #5
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	4413      	add	r3, r2
 8002468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800246c:	461a      	mov	r2, r3
 800246e:	2308      	movs	r3, #8
 8002470:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002472:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 ff99 	bl	80033ac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	f003 0310 	and.w	r3, r3, #16
 8002480:	2b00      	cmp	r3, #0
 8002482:	d008      	beq.n	8002496 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	015a      	lsls	r2, r3, #5
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	4413      	add	r3, r2
 800248c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002490:	461a      	mov	r2, r3
 8002492:	2310      	movs	r3, #16
 8002494:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d030      	beq.n	8002502 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80024a0:	6a3b      	ldr	r3, [r7, #32]
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a8:	2b80      	cmp	r3, #128	; 0x80
 80024aa:	d109      	bne.n	80024c0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	69fa      	ldr	r2, [r7, #28]
 80024b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024be:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80024c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024c2:	4613      	mov	r3, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	4413      	add	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	4413      	add	r3, r2
 80024d2:	3304      	adds	r3, #4
 80024d4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	78db      	ldrb	r3, [r3, #3]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d108      	bne.n	80024f0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	2200      	movs	r2, #0
 80024e2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	4619      	mov	r1, r3
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f005 fd5a 	bl	8007fa4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	015a      	lsls	r2, r3, #5
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	4413      	add	r3, r2
 80024f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024fc:	461a      	mov	r2, r3
 80024fe:	2302      	movs	r3, #2
 8002500:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	f003 0320 	and.w	r3, r3, #32
 8002508:	2b00      	cmp	r3, #0
 800250a:	d008      	beq.n	800251e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250e:	015a      	lsls	r2, r3, #5
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	4413      	add	r3, r2
 8002514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002518:	461a      	mov	r2, r3
 800251a:	2320      	movs	r3, #32
 800251c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d009      	beq.n	800253c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	015a      	lsls	r2, r3, #5
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	4413      	add	r3, r2
 8002530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002534:	461a      	mov	r2, r3
 8002536:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800253a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253e:	3301      	adds	r3, #1
 8002540:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002544:	085b      	lsrs	r3, r3, #1
 8002546:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254a:	2b00      	cmp	r3, #0
 800254c:	f47f af62 	bne.w	8002414 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4618      	mov	r0, r3
 8002556:	f003 f927 	bl	80057a8 <USB_ReadInterrupts>
 800255a:	4603      	mov	r3, r0
 800255c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002560:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002564:	f040 80db 	bne.w	800271e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4618      	mov	r0, r3
 800256e:	f003 f948 	bl	8005802 <USB_ReadDevAllInEpInterrupt>
 8002572:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002574:	2300      	movs	r3, #0
 8002576:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002578:	e0cd      	b.n	8002716 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800257a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b00      	cmp	r3, #0
 8002582:	f000 80c2 	beq.w	800270a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800258c:	b2d2      	uxtb	r2, r2
 800258e:	4611      	mov	r1, r2
 8002590:	4618      	mov	r0, r3
 8002592:	f003 f96e 	bl	8005872 <USB_ReadDevInEPInterrupt>
 8002596:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d057      	beq.n	8002652 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a4:	f003 030f 	and.w	r3, r3, #15
 80025a8:	2201      	movs	r2, #1
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	43db      	mvns	r3, r3
 80025bc:	69f9      	ldr	r1, [r7, #28]
 80025be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80025c2:	4013      	ands	r3, r2
 80025c4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	015a      	lsls	r2, r3, #5
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	4413      	add	r3, r2
 80025ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025d2:	461a      	mov	r2, r3
 80025d4:	2301      	movs	r3, #1
 80025d6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d132      	bne.n	8002646 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80025e0:	6879      	ldr	r1, [r7, #4]
 80025e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025e4:	4613      	mov	r3, r2
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	4413      	add	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	334c      	adds	r3, #76	; 0x4c
 80025f0:	6819      	ldr	r1, [r3, #0]
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025f6:	4613      	mov	r3, r2
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	4413      	add	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4403      	add	r3, r0
 8002600:	3348      	adds	r3, #72	; 0x48
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4419      	add	r1, r3
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800260a:	4613      	mov	r3, r2
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	4413      	add	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4403      	add	r3, r0
 8002614:	334c      	adds	r3, #76	; 0x4c
 8002616:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	2b00      	cmp	r3, #0
 800261c:	d113      	bne.n	8002646 <HAL_PCD_IRQHandler+0x3a2>
 800261e:	6879      	ldr	r1, [r7, #4]
 8002620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002622:	4613      	mov	r3, r2
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	4413      	add	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	440b      	add	r3, r1
 800262c:	3354      	adds	r3, #84	; 0x54
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d108      	bne.n	8002646 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6818      	ldr	r0, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800263e:	461a      	mov	r2, r3
 8002640:	2101      	movs	r1, #1
 8002642:	f003 f975 	bl	8005930 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	b2db      	uxtb	r3, r3
 800264a:	4619      	mov	r1, r3
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f005 fc2e 	bl	8007eae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b00      	cmp	r3, #0
 800265a:	d008      	beq.n	800266e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	015a      	lsls	r2, r3, #5
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	4413      	add	r3, r2
 8002664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002668:	461a      	mov	r2, r3
 800266a:	2308      	movs	r3, #8
 800266c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	f003 0310 	and.w	r3, r3, #16
 8002674:	2b00      	cmp	r3, #0
 8002676:	d008      	beq.n	800268a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267a:	015a      	lsls	r2, r3, #5
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	4413      	add	r3, r2
 8002680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002684:	461a      	mov	r2, r3
 8002686:	2310      	movs	r3, #16
 8002688:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002690:	2b00      	cmp	r3, #0
 8002692:	d008      	beq.n	80026a6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	015a      	lsls	r2, r3, #5
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	4413      	add	r3, r2
 800269c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026a0:	461a      	mov	r2, r3
 80026a2:	2340      	movs	r3, #64	; 0x40
 80026a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d023      	beq.n	80026f8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80026b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026b2:	6a38      	ldr	r0, [r7, #32]
 80026b4:	f002 f856 	bl	8004764 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80026b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ba:	4613      	mov	r3, r2
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	4413      	add	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	3338      	adds	r3, #56	; 0x38
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	4413      	add	r3, r2
 80026c8:	3304      	adds	r3, #4
 80026ca:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	78db      	ldrb	r3, [r3, #3]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d108      	bne.n	80026e6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	2200      	movs	r2, #0
 80026d8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	4619      	mov	r1, r3
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f005 fc71 	bl	8007fc8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	015a      	lsls	r2, r3, #5
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	4413      	add	r3, r2
 80026ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026f2:	461a      	mov	r2, r3
 80026f4:	2302      	movs	r3, #2
 80026f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002702:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 fcdb 	bl	80030c0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	3301      	adds	r3, #1
 800270e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002712:	085b      	lsrs	r3, r3, #1
 8002714:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002718:	2b00      	cmp	r3, #0
 800271a:	f47f af2e 	bne.w	800257a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f003 f840 	bl	80057a8 <USB_ReadInterrupts>
 8002728:	4603      	mov	r3, r0
 800272a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800272e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002732:	d122      	bne.n	800277a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	69fa      	ldr	r2, [r7, #28]
 800273e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002742:	f023 0301 	bic.w	r3, r3, #1
 8002746:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800274e:	2b01      	cmp	r3, #1
 8002750:	d108      	bne.n	8002764 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800275a:	2100      	movs	r1, #0
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f000 fec3 	bl	80034e8 <HAL_PCDEx_LPM_Callback>
 8002762:	e002      	b.n	800276a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f005 fc0f 	bl	8007f88 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	695a      	ldr	r2, [r3, #20]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002778:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f003 f812 	bl	80057a8 <USB_ReadInterrupts>
 8002784:	4603      	mov	r3, r0
 8002786:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800278a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800278e:	d112      	bne.n	80027b6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	2b01      	cmp	r3, #1
 800279e:	d102      	bne.n	80027a6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f005 fbcb 	bl	8007f3c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	695a      	ldr	r2, [r3, #20]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80027b4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f002 fff4 	bl	80057a8 <USB_ReadInterrupts>
 80027c0:	4603      	mov	r3, r0
 80027c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027ca:	f040 80b7 	bne.w	800293c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	69fa      	ldr	r2, [r7, #28]
 80027d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027dc:	f023 0301 	bic.w	r3, r3, #1
 80027e0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2110      	movs	r1, #16
 80027e8:	4618      	mov	r0, r3
 80027ea:	f001 ffbb 	bl	8004764 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027ee:	2300      	movs	r3, #0
 80027f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027f2:	e046      	b.n	8002882 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80027f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f6:	015a      	lsls	r2, r3, #5
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	4413      	add	r3, r2
 80027fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002800:	461a      	mov	r2, r3
 8002802:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002806:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800280a:	015a      	lsls	r2, r3, #5
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	4413      	add	r3, r2
 8002810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002818:	0151      	lsls	r1, r2, #5
 800281a:	69fa      	ldr	r2, [r7, #28]
 800281c:	440a      	add	r2, r1
 800281e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002822:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002826:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800282a:	015a      	lsls	r2, r3, #5
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	4413      	add	r3, r2
 8002830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002834:	461a      	mov	r2, r3
 8002836:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800283a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800283c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800283e:	015a      	lsls	r2, r3, #5
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	4413      	add	r3, r2
 8002844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800284c:	0151      	lsls	r1, r2, #5
 800284e:	69fa      	ldr	r2, [r7, #28]
 8002850:	440a      	add	r2, r1
 8002852:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002856:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800285a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800285c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800285e:	015a      	lsls	r2, r3, #5
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	4413      	add	r3, r2
 8002864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800286c:	0151      	lsls	r1, r2, #5
 800286e:	69fa      	ldr	r2, [r7, #28]
 8002870:	440a      	add	r2, r1
 8002872:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002876:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800287a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800287c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287e:	3301      	adds	r3, #1
 8002880:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002888:	429a      	cmp	r2, r3
 800288a:	d3b3      	bcc.n	80027f4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002892:	69db      	ldr	r3, [r3, #28]
 8002894:	69fa      	ldr	r2, [r7, #28]
 8002896:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800289a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800289e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d016      	beq.n	80028d6 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028b2:	69fa      	ldr	r2, [r7, #28]
 80028b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028b8:	f043 030b 	orr.w	r3, r3, #11
 80028bc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c8:	69fa      	ldr	r2, [r7, #28]
 80028ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028ce:	f043 030b 	orr.w	r3, r3, #11
 80028d2:	6453      	str	r3, [r2, #68]	; 0x44
 80028d4:	e015      	b.n	8002902 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	69fa      	ldr	r2, [r7, #28]
 80028e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80028e8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80028ec:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	69fa      	ldr	r2, [r7, #28]
 80028f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028fc:	f043 030b 	orr.w	r3, r3, #11
 8002900:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	69fa      	ldr	r2, [r7, #28]
 800290c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002910:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002914:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6818      	ldr	r0, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002926:	461a      	mov	r2, r3
 8002928:	f003 f802 	bl	8005930 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	695a      	ldr	r2, [r3, #20]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800293a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4618      	mov	r0, r3
 8002942:	f002 ff31 	bl	80057a8 <USB_ReadInterrupts>
 8002946:	4603      	mov	r3, r0
 8002948:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800294c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002950:	d124      	bne.n	800299c <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f002 ffc7 	bl	80058ea <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f001 ff7c 	bl	800485e <USB_GetDevSpeed>
 8002966:	4603      	mov	r3, r0
 8002968:	461a      	mov	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681c      	ldr	r4, [r3, #0]
 8002972:	f001 fa29 	bl	8003dc8 <HAL_RCC_GetHCLKFreq>
 8002976:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800297c:	b2db      	uxtb	r3, r3
 800297e:	461a      	mov	r2, r3
 8002980:	4620      	mov	r0, r4
 8002982:	f001 fc7b 	bl	800427c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f005 fab9 	bl	8007efe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	695a      	ldr	r2, [r3, #20]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800299a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f002 ff01 	bl	80057a8 <USB_ReadInterrupts>
 80029a6:	4603      	mov	r3, r0
 80029a8:	f003 0308 	and.w	r3, r3, #8
 80029ac:	2b08      	cmp	r3, #8
 80029ae:	d10a      	bne.n	80029c6 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f005 fa96 	bl	8007ee2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	695a      	ldr	r2, [r3, #20]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f002 0208 	and.w	r2, r2, #8
 80029c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f002 feec 	bl	80057a8 <USB_ReadInterrupts>
 80029d0:	4603      	mov	r3, r0
 80029d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d6:	2b80      	cmp	r3, #128	; 0x80
 80029d8:	d122      	bne.n	8002a20 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80029da:	6a3b      	ldr	r3, [r7, #32]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029e2:	6a3b      	ldr	r3, [r7, #32]
 80029e4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029e6:	2301      	movs	r3, #1
 80029e8:	627b      	str	r3, [r7, #36]	; 0x24
 80029ea:	e014      	b.n	8002a16 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80029ec:	6879      	ldr	r1, [r7, #4]
 80029ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f0:	4613      	mov	r3, r2
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	4413      	add	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	440b      	add	r3, r1
 80029fa:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d105      	bne.n	8002a10 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	4619      	mov	r1, r3
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 fb27 	bl	800305e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a12:	3301      	adds	r3, #1
 8002a14:	627b      	str	r3, [r7, #36]	; 0x24
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d3e5      	bcc.n	80029ec <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f002 febf 	bl	80057a8 <USB_ReadInterrupts>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a34:	d13b      	bne.n	8002aae <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a36:	2301      	movs	r3, #1
 8002a38:	627b      	str	r3, [r7, #36]	; 0x24
 8002a3a:	e02b      	b.n	8002a94 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3e:	015a      	lsls	r2, r3, #5
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	4413      	add	r3, r2
 8002a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a4c:	6879      	ldr	r1, [r7, #4]
 8002a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a50:	4613      	mov	r3, r2
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	4413      	add	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	440b      	add	r3, r1
 8002a5a:	3340      	adds	r3, #64	; 0x40
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d115      	bne.n	8002a8e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002a62:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	da12      	bge.n	8002a8e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002a68:	6879      	ldr	r1, [r7, #4]
 8002a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	4413      	add	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	440b      	add	r3, r1
 8002a76:	333f      	adds	r3, #63	; 0x3f
 8002a78:	2201      	movs	r2, #1
 8002a7a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	4619      	mov	r1, r3
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 fae8 	bl	800305e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a90:	3301      	adds	r3, #1
 8002a92:	627b      	str	r3, [r7, #36]	; 0x24
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d3ce      	bcc.n	8002a3c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	695a      	ldr	r2, [r3, #20]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002aac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f002 fe78 	bl	80057a8 <USB_ReadInterrupts>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002abe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ac2:	d155      	bne.n	8002b70 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ac8:	e045      	b.n	8002b56 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	015a      	lsls	r2, r3, #5
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ade:	4613      	mov	r3, r2
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	4413      	add	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	440b      	add	r3, r1
 8002ae8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d12e      	bne.n	8002b50 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002af2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	da2b      	bge.n	8002b50 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002b04:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d121      	bne.n	8002b50 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b10:	4613      	mov	r3, r2
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	4413      	add	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	440b      	add	r3, r1
 8002b1a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002b1e:	2201      	movs	r2, #1
 8002b20:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002b22:	6a3b      	ldr	r3, [r7, #32]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002b2a:	6a3b      	ldr	r3, [r7, #32]
 8002b2c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002b2e:	6a3b      	ldr	r3, [r7, #32]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10a      	bne.n	8002b50 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	69fa      	ldr	r2, [r7, #28]
 8002b44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b4c:	6053      	str	r3, [r2, #4]
            break;
 8002b4e:	e007      	b.n	8002b60 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b52:	3301      	adds	r3, #1
 8002b54:	627b      	str	r3, [r7, #36]	; 0x24
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d3b4      	bcc.n	8002aca <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	695a      	ldr	r2, [r3, #20]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002b6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f002 fe17 	bl	80057a8 <USB_ReadInterrupts>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b84:	d10a      	bne.n	8002b9c <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f005 fa30 	bl	8007fec <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	695a      	ldr	r2, [r3, #20]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002b9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f002 fe01 	bl	80057a8 <USB_ReadInterrupts>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	f003 0304 	and.w	r3, r3, #4
 8002bac:	2b04      	cmp	r3, #4
 8002bae:	d115      	bne.n	8002bdc <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	f003 0304 	and.w	r3, r3, #4
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d002      	beq.n	8002bc8 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f005 fa20 	bl	8008008 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6859      	ldr	r1, [r3, #4]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	605a      	str	r2, [r3, #4]
 8002bd8:	e000      	b.n	8002bdc <HAL_PCD_IRQHandler+0x938>
      return;
 8002bda:	bf00      	nop
    }
  }
}
 8002bdc:	3734      	adds	r7, #52	; 0x34
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd90      	pop	{r4, r7, pc}

08002be2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b082      	sub	sp, #8
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
 8002bea:	460b      	mov	r3, r1
 8002bec:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d101      	bne.n	8002bfc <HAL_PCD_SetAddress+0x1a>
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	e013      	b.n	8002c24 <HAL_PCD_SetAddress+0x42>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	78fa      	ldrb	r2, [r7, #3]
 8002c08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	78fa      	ldrb	r2, [r7, #3]
 8002c12:	4611      	mov	r1, r2
 8002c14:	4618      	mov	r0, r3
 8002c16:	f002 fd5f 	bl	80056d8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3708      	adds	r7, #8
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	4608      	mov	r0, r1
 8002c36:	4611      	mov	r1, r2
 8002c38:	461a      	mov	r2, r3
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	70fb      	strb	r3, [r7, #3]
 8002c3e:	460b      	mov	r3, r1
 8002c40:	803b      	strh	r3, [r7, #0]
 8002c42:	4613      	mov	r3, r2
 8002c44:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002c46:	2300      	movs	r3, #0
 8002c48:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	da0f      	bge.n	8002c72 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c52:	78fb      	ldrb	r3, [r7, #3]
 8002c54:	f003 020f 	and.w	r2, r3, #15
 8002c58:	4613      	mov	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	4413      	add	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	3338      	adds	r3, #56	; 0x38
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	4413      	add	r3, r2
 8002c66:	3304      	adds	r3, #4
 8002c68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	705a      	strb	r2, [r3, #1]
 8002c70:	e00f      	b.n	8002c92 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c72:	78fb      	ldrb	r3, [r7, #3]
 8002c74:	f003 020f 	and.w	r2, r3, #15
 8002c78:	4613      	mov	r3, r2
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	4413      	add	r3, r2
 8002c88:	3304      	adds	r3, #4
 8002c8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002c92:	78fb      	ldrb	r3, [r7, #3]
 8002c94:	f003 030f 	and.w	r3, r3, #15
 8002c98:	b2da      	uxtb	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002c9e:	883a      	ldrh	r2, [r7, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	78ba      	ldrb	r2, [r7, #2]
 8002ca8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	785b      	ldrb	r3, [r3, #1]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d004      	beq.n	8002cbc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002cbc:	78bb      	ldrb	r3, [r7, #2]
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d102      	bne.n	8002cc8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d101      	bne.n	8002cd6 <HAL_PCD_EP_Open+0xaa>
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	e00e      	b.n	8002cf4 <HAL_PCD_EP_Open+0xc8>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68f9      	ldr	r1, [r7, #12]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f001 fddf 	bl	80048a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002cf2:	7afb      	ldrb	r3, [r7, #11]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3710      	adds	r7, #16
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	460b      	mov	r3, r1
 8002d06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	da0f      	bge.n	8002d30 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d10:	78fb      	ldrb	r3, [r7, #3]
 8002d12:	f003 020f 	and.w	r2, r3, #15
 8002d16:	4613      	mov	r3, r2
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	4413      	add	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	3338      	adds	r3, #56	; 0x38
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	4413      	add	r3, r2
 8002d24:	3304      	adds	r3, #4
 8002d26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	705a      	strb	r2, [r3, #1]
 8002d2e:	e00f      	b.n	8002d50 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d30:	78fb      	ldrb	r3, [r7, #3]
 8002d32:	f003 020f 	and.w	r2, r3, #15
 8002d36:	4613      	mov	r3, r2
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	4413      	add	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	4413      	add	r3, r2
 8002d46:	3304      	adds	r3, #4
 8002d48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002d50:	78fb      	ldrb	r3, [r7, #3]
 8002d52:	f003 030f 	and.w	r3, r3, #15
 8002d56:	b2da      	uxtb	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d101      	bne.n	8002d6a <HAL_PCD_EP_Close+0x6e>
 8002d66:	2302      	movs	r3, #2
 8002d68:	e00e      	b.n	8002d88 <HAL_PCD_EP_Close+0x8c>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68f9      	ldr	r1, [r7, #12]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f001 fe1d 	bl	80049b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	607a      	str	r2, [r7, #4]
 8002d9a:	603b      	str	r3, [r7, #0]
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002da0:	7afb      	ldrb	r3, [r7, #11]
 8002da2:	f003 020f 	and.w	r2, r3, #15
 8002da6:	4613      	mov	r3, r2
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	4413      	add	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	4413      	add	r3, r2
 8002db6:	3304      	adds	r3, #4
 8002db8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dd2:	7afb      	ldrb	r3, [r7, #11]
 8002dd4:	f003 030f 	and.w	r3, r3, #15
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d102      	bne.n	8002dec <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002dec:	7afb      	ldrb	r3, [r7, #11]
 8002dee:	f003 030f 	and.w	r3, r3, #15
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d109      	bne.n	8002e0a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6818      	ldr	r0, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	461a      	mov	r2, r3
 8002e02:	6979      	ldr	r1, [r7, #20]
 8002e04:	f002 f8fc 	bl	8005000 <USB_EP0StartXfer>
 8002e08:	e008      	b.n	8002e1c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6818      	ldr	r0, [r3, #0]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	461a      	mov	r2, r3
 8002e16:	6979      	ldr	r1, [r7, #20]
 8002e18:	f001 feaa 	bl	8004b70 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3718      	adds	r7, #24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e26:	b480      	push	{r7}
 8002e28:	b083      	sub	sp, #12
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
 8002e2e:	460b      	mov	r3, r1
 8002e30:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e32:	78fb      	ldrb	r3, [r7, #3]
 8002e34:	f003 020f 	and.w	r2, r3, #15
 8002e38:	6879      	ldr	r1, [r7, #4]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	4413      	add	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	440b      	add	r3, r1
 8002e44:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002e48:	681b      	ldr	r3, [r3, #0]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b086      	sub	sp, #24
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	60f8      	str	r0, [r7, #12]
 8002e5e:	607a      	str	r2, [r7, #4]
 8002e60:	603b      	str	r3, [r7, #0]
 8002e62:	460b      	mov	r3, r1
 8002e64:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e66:	7afb      	ldrb	r3, [r7, #11]
 8002e68:	f003 020f 	and.w	r2, r3, #15
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	4413      	add	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	3338      	adds	r3, #56	; 0x38
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	4413      	add	r3, r2
 8002e7a:	3304      	adds	r3, #4
 8002e7c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	2201      	movs	r2, #1
 8002e94:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e96:	7afb      	ldrb	r3, [r7, #11]
 8002e98:	f003 030f 	and.w	r3, r3, #15
 8002e9c:	b2da      	uxtb	r2, r3
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d102      	bne.n	8002eb0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002eb0:	7afb      	ldrb	r3, [r7, #11]
 8002eb2:	f003 030f 	and.w	r3, r3, #15
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d109      	bne.n	8002ece <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6818      	ldr	r0, [r3, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	6979      	ldr	r1, [r7, #20]
 8002ec8:	f002 f89a 	bl	8005000 <USB_EP0StartXfer>
 8002ecc:	e008      	b.n	8002ee0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6818      	ldr	r0, [r3, #0]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	461a      	mov	r2, r3
 8002eda:	6979      	ldr	r1, [r7, #20]
 8002edc:	f001 fe48 	bl	8004b70 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3718      	adds	r7, #24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b084      	sub	sp, #16
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ef6:	78fb      	ldrb	r3, [r7, #3]
 8002ef8:	f003 020f 	and.w	r2, r3, #15
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d901      	bls.n	8002f08 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e050      	b.n	8002faa <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	da0f      	bge.n	8002f30 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f10:	78fb      	ldrb	r3, [r7, #3]
 8002f12:	f003 020f 	and.w	r2, r3, #15
 8002f16:	4613      	mov	r3, r2
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	4413      	add	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	3338      	adds	r3, #56	; 0x38
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	4413      	add	r3, r2
 8002f24:	3304      	adds	r3, #4
 8002f26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	705a      	strb	r2, [r3, #1]
 8002f2e:	e00d      	b.n	8002f4c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f30:	78fa      	ldrb	r2, [r7, #3]
 8002f32:	4613      	mov	r3, r2
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	4413      	add	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	4413      	add	r3, r2
 8002f42:	3304      	adds	r3, #4
 8002f44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f52:	78fb      	ldrb	r3, [r7, #3]
 8002f54:	f003 030f 	and.w	r3, r3, #15
 8002f58:	b2da      	uxtb	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d101      	bne.n	8002f6c <HAL_PCD_EP_SetStall+0x82>
 8002f68:	2302      	movs	r3, #2
 8002f6a:	e01e      	b.n	8002faa <HAL_PCD_EP_SetStall+0xc0>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68f9      	ldr	r1, [r7, #12]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f002 fad8 	bl	8005530 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f80:	78fb      	ldrb	r3, [r7, #3]
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10a      	bne.n	8002fa0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6818      	ldr	r0, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	b2d9      	uxtb	r1, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	f002 fcc8 	bl	8005930 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b084      	sub	sp, #16
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
 8002fba:	460b      	mov	r3, r1
 8002fbc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002fbe:	78fb      	ldrb	r3, [r7, #3]
 8002fc0:	f003 020f 	and.w	r2, r3, #15
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d901      	bls.n	8002fd0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e042      	b.n	8003056 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	da0f      	bge.n	8002ff8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fd8:	78fb      	ldrb	r3, [r7, #3]
 8002fda:	f003 020f 	and.w	r2, r3, #15
 8002fde:	4613      	mov	r3, r2
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	4413      	add	r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	3338      	adds	r3, #56	; 0x38
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	4413      	add	r3, r2
 8002fec:	3304      	adds	r3, #4
 8002fee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	705a      	strb	r2, [r3, #1]
 8002ff6:	e00f      	b.n	8003018 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ff8:	78fb      	ldrb	r3, [r7, #3]
 8002ffa:	f003 020f 	and.w	r2, r3, #15
 8002ffe:	4613      	mov	r3, r2
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	4413      	add	r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	4413      	add	r3, r2
 800300e:	3304      	adds	r3, #4
 8003010:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800301e:	78fb      	ldrb	r3, [r7, #3]
 8003020:	f003 030f 	and.w	r3, r3, #15
 8003024:	b2da      	uxtb	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003030:	2b01      	cmp	r3, #1
 8003032:	d101      	bne.n	8003038 <HAL_PCD_EP_ClrStall+0x86>
 8003034:	2302      	movs	r3, #2
 8003036:	e00e      	b.n	8003056 <HAL_PCD_EP_ClrStall+0xa4>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68f9      	ldr	r1, [r7, #12]
 8003046:	4618      	mov	r0, r3
 8003048:	f002 fae0 	bl	800560c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b084      	sub	sp, #16
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
 8003066:	460b      	mov	r3, r1
 8003068:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800306a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800306e:	2b00      	cmp	r3, #0
 8003070:	da0c      	bge.n	800308c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003072:	78fb      	ldrb	r3, [r7, #3]
 8003074:	f003 020f 	and.w	r2, r3, #15
 8003078:	4613      	mov	r3, r2
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	4413      	add	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	3338      	adds	r3, #56	; 0x38
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	4413      	add	r3, r2
 8003086:	3304      	adds	r3, #4
 8003088:	60fb      	str	r3, [r7, #12]
 800308a:	e00c      	b.n	80030a6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800308c:	78fb      	ldrb	r3, [r7, #3]
 800308e:	f003 020f 	and.w	r2, r3, #15
 8003092:	4613      	mov	r3, r2
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	4413      	add	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	4413      	add	r3, r2
 80030a2:	3304      	adds	r3, #4
 80030a4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68f9      	ldr	r1, [r7, #12]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f002 f8ff 	bl	80052b0 <USB_EPStopXfer>
 80030b2:	4603      	mov	r3, r0
 80030b4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80030b6:	7afb      	ldrb	r3, [r7, #11]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3710      	adds	r7, #16
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b08a      	sub	sp, #40	; 0x28
 80030c4:	af02      	add	r7, sp, #8
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	4613      	mov	r3, r2
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	4413      	add	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	3338      	adds	r3, #56	; 0x38
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	4413      	add	r3, r2
 80030e4:	3304      	adds	r3, #4
 80030e6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6a1a      	ldr	r2, [r3, #32]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d901      	bls.n	80030f8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e06c      	b.n	80031d2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	699a      	ldr	r2, [r3, #24]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	69fa      	ldr	r2, [r7, #28]
 800310a:	429a      	cmp	r2, r3
 800310c:	d902      	bls.n	8003114 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	3303      	adds	r3, #3
 8003118:	089b      	lsrs	r3, r3, #2
 800311a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800311c:	e02b      	b.n	8003176 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	699a      	ldr	r2, [r3, #24]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	69fa      	ldr	r2, [r7, #28]
 8003130:	429a      	cmp	r2, r3
 8003132:	d902      	bls.n	800313a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	3303      	adds	r3, #3
 800313e:	089b      	lsrs	r3, r3, #2
 8003140:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6919      	ldr	r1, [r3, #16]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	b2da      	uxtb	r2, r3
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003152:	b2db      	uxtb	r3, r3
 8003154:	9300      	str	r3, [sp, #0]
 8003156:	4603      	mov	r3, r0
 8003158:	6978      	ldr	r0, [r7, #20]
 800315a:	f002 f953 	bl	8005404 <USB_WritePacket>

    ep->xfer_buff  += len;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	691a      	ldr	r2, [r3, #16]
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	441a      	add	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6a1a      	ldr	r2, [r3, #32]
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	441a      	add	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	015a      	lsls	r2, r3, #5
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	4413      	add	r3, r2
 800317e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	b29b      	uxth	r3, r3
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	429a      	cmp	r2, r3
 800318a:	d809      	bhi.n	80031a0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6a1a      	ldr	r2, [r3, #32]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003194:	429a      	cmp	r2, r3
 8003196:	d203      	bcs.n	80031a0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1be      	bne.n	800311e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	699a      	ldr	r2, [r3, #24]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d811      	bhi.n	80031d0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	f003 030f 	and.w	r3, r3, #15
 80031b2:	2201      	movs	r2, #1
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	43db      	mvns	r3, r3
 80031c6:	6939      	ldr	r1, [r7, #16]
 80031c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031cc:	4013      	ands	r3, r2
 80031ce:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3720      	adds	r7, #32
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
	...

080031dc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b088      	sub	sp, #32
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	333c      	adds	r3, #60	; 0x3c
 80031f4:	3304      	adds	r3, #4
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	015a      	lsls	r2, r3, #5
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	4413      	add	r3, r2
 8003202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d17b      	bne.n	800330a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	f003 0308 	and.w	r3, r3, #8
 8003218:	2b00      	cmp	r3, #0
 800321a:	d015      	beq.n	8003248 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	4a61      	ldr	r2, [pc, #388]	; (80033a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003220:	4293      	cmp	r3, r2
 8003222:	f240 80b9 	bls.w	8003398 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800322c:	2b00      	cmp	r3, #0
 800322e:	f000 80b3 	beq.w	8003398 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	015a      	lsls	r2, r3, #5
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	4413      	add	r3, r2
 800323a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800323e:	461a      	mov	r2, r3
 8003240:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003244:	6093      	str	r3, [r2, #8]
 8003246:	e0a7      	b.n	8003398 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	f003 0320 	and.w	r3, r3, #32
 800324e:	2b00      	cmp	r3, #0
 8003250:	d009      	beq.n	8003266 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	015a      	lsls	r2, r3, #5
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	4413      	add	r3, r2
 800325a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800325e:	461a      	mov	r2, r3
 8003260:	2320      	movs	r3, #32
 8003262:	6093      	str	r3, [r2, #8]
 8003264:	e098      	b.n	8003398 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800326c:	2b00      	cmp	r3, #0
 800326e:	f040 8093 	bne.w	8003398 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	4a4b      	ldr	r2, [pc, #300]	; (80033a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d90f      	bls.n	800329a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00a      	beq.n	800329a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	015a      	lsls	r2, r3, #5
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	4413      	add	r3, r2
 800328c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003290:	461a      	mov	r2, r3
 8003292:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003296:	6093      	str	r3, [r2, #8]
 8003298:	e07e      	b.n	8003398 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	4613      	mov	r3, r2
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	4413      	add	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	4413      	add	r3, r2
 80032ac:	3304      	adds	r3, #4
 80032ae:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	69da      	ldr	r2, [r3, #28]
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	0159      	lsls	r1, r3, #5
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	440b      	add	r3, r1
 80032bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032c6:	1ad2      	subs	r2, r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d114      	bne.n	80032fc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d109      	bne.n	80032ee <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6818      	ldr	r0, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80032e4:	461a      	mov	r2, r3
 80032e6:	2101      	movs	r1, #1
 80032e8:	f002 fb22 	bl	8005930 <USB_EP0_OutStart>
 80032ec:	e006      	b.n	80032fc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	691a      	ldr	r2, [r3, #16]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	441a      	add	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	4619      	mov	r1, r3
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f004 fdb8 	bl	8007e78 <HAL_PCD_DataOutStageCallback>
 8003308:	e046      	b.n	8003398 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	4a26      	ldr	r2, [pc, #152]	; (80033a8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d124      	bne.n	800335c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00a      	beq.n	8003332 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	015a      	lsls	r2, r3, #5
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	4413      	add	r3, r2
 8003324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003328:	461a      	mov	r2, r3
 800332a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800332e:	6093      	str	r3, [r2, #8]
 8003330:	e032      	b.n	8003398 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	f003 0320 	and.w	r3, r3, #32
 8003338:	2b00      	cmp	r3, #0
 800333a:	d008      	beq.n	800334e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	015a      	lsls	r2, r3, #5
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	4413      	add	r3, r2
 8003344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003348:	461a      	mov	r2, r3
 800334a:	2320      	movs	r3, #32
 800334c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	b2db      	uxtb	r3, r3
 8003352:	4619      	mov	r1, r3
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f004 fd8f 	bl	8007e78 <HAL_PCD_DataOutStageCallback>
 800335a:	e01d      	b.n	8003398 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d114      	bne.n	800338c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003362:	6879      	ldr	r1, [r7, #4]
 8003364:	683a      	ldr	r2, [r7, #0]
 8003366:	4613      	mov	r3, r2
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	4413      	add	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	440b      	add	r3, r1
 8003370:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d108      	bne.n	800338c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6818      	ldr	r0, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003384:	461a      	mov	r2, r3
 8003386:	2100      	movs	r1, #0
 8003388:	f002 fad2 	bl	8005930 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	b2db      	uxtb	r3, r3
 8003390:	4619      	mov	r1, r3
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f004 fd70 	bl	8007e78 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3720      	adds	r7, #32
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	4f54300a 	.word	0x4f54300a
 80033a8:	4f54310a 	.word	0x4f54310a

080033ac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	333c      	adds	r3, #60	; 0x3c
 80033c4:	3304      	adds	r3, #4
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	015a      	lsls	r2, r3, #5
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	4413      	add	r3, r2
 80033d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	4a15      	ldr	r2, [pc, #84]	; (8003434 <PCD_EP_OutSetupPacket_int+0x88>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d90e      	bls.n	8003400 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d009      	beq.n	8003400 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	015a      	lsls	r2, r3, #5
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	4413      	add	r3, r2
 80033f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033f8:	461a      	mov	r2, r3
 80033fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033fe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f004 fd27 	bl	8007e54 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	4a0a      	ldr	r2, [pc, #40]	; (8003434 <PCD_EP_OutSetupPacket_int+0x88>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d90c      	bls.n	8003428 <PCD_EP_OutSetupPacket_int+0x7c>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d108      	bne.n	8003428 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6818      	ldr	r0, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003420:	461a      	mov	r2, r3
 8003422:	2101      	movs	r1, #1
 8003424:	f002 fa84 	bl	8005930 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3718      	adds	r7, #24
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	4f54300a 	.word	0x4f54300a

08003438 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	460b      	mov	r3, r1
 8003442:	70fb      	strb	r3, [r7, #3]
 8003444:	4613      	mov	r3, r2
 8003446:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003450:	78fb      	ldrb	r3, [r7, #3]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d107      	bne.n	8003466 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003456:	883b      	ldrh	r3, [r7, #0]
 8003458:	0419      	lsls	r1, r3, #16
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68ba      	ldr	r2, [r7, #8]
 8003460:	430a      	orrs	r2, r1
 8003462:	629a      	str	r2, [r3, #40]	; 0x28
 8003464:	e028      	b.n	80034b8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346c:	0c1b      	lsrs	r3, r3, #16
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	4413      	add	r3, r2
 8003472:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003474:	2300      	movs	r3, #0
 8003476:	73fb      	strb	r3, [r7, #15]
 8003478:	e00d      	b.n	8003496 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	7bfb      	ldrb	r3, [r7, #15]
 8003480:	3340      	adds	r3, #64	; 0x40
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4413      	add	r3, r2
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	0c1b      	lsrs	r3, r3, #16
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	4413      	add	r3, r2
 800348e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003490:	7bfb      	ldrb	r3, [r7, #15]
 8003492:	3301      	adds	r3, #1
 8003494:	73fb      	strb	r3, [r7, #15]
 8003496:	7bfa      	ldrb	r2, [r7, #15]
 8003498:	78fb      	ldrb	r3, [r7, #3]
 800349a:	3b01      	subs	r3, #1
 800349c:	429a      	cmp	r2, r3
 800349e:	d3ec      	bcc.n	800347a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80034a0:	883b      	ldrh	r3, [r7, #0]
 80034a2:	0418      	lsls	r0, r3, #16
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6819      	ldr	r1, [r3, #0]
 80034a8:	78fb      	ldrb	r3, [r7, #3]
 80034aa:	3b01      	subs	r3, #1
 80034ac:	68ba      	ldr	r2, [r7, #8]
 80034ae:	4302      	orrs	r2, r0
 80034b0:	3340      	adds	r3, #64	; 0x40
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	440b      	add	r3, r1
 80034b6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3714      	adds	r7, #20
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80034c6:	b480      	push	{r7}
 80034c8:	b083      	sub	sp, #12
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
 80034ce:	460b      	mov	r3, r1
 80034d0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	887a      	ldrh	r2, [r7, #2]
 80034d8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	460b      	mov	r3, r1
 80034f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e267      	b.n	80039e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b00      	cmp	r3, #0
 800351c:	d075      	beq.n	800360a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800351e:	4b88      	ldr	r3, [pc, #544]	; (8003740 <HAL_RCC_OscConfig+0x240>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f003 030c 	and.w	r3, r3, #12
 8003526:	2b04      	cmp	r3, #4
 8003528:	d00c      	beq.n	8003544 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800352a:	4b85      	ldr	r3, [pc, #532]	; (8003740 <HAL_RCC_OscConfig+0x240>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003532:	2b08      	cmp	r3, #8
 8003534:	d112      	bne.n	800355c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003536:	4b82      	ldr	r3, [pc, #520]	; (8003740 <HAL_RCC_OscConfig+0x240>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800353e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003542:	d10b      	bne.n	800355c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003544:	4b7e      	ldr	r3, [pc, #504]	; (8003740 <HAL_RCC_OscConfig+0x240>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d05b      	beq.n	8003608 <HAL_RCC_OscConfig+0x108>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d157      	bne.n	8003608 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e242      	b.n	80039e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003564:	d106      	bne.n	8003574 <HAL_RCC_OscConfig+0x74>
 8003566:	4b76      	ldr	r3, [pc, #472]	; (8003740 <HAL_RCC_OscConfig+0x240>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a75      	ldr	r2, [pc, #468]	; (8003740 <HAL_RCC_OscConfig+0x240>)
 800356c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003570:	6013      	str	r3, [r2, #0]
 8003572:	e01d      	b.n	80035b0 <HAL_RCC_OscConfig+0xb0>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800357c:	d10c      	bne.n	8003598 <HAL_RCC_OscConfig+0x98>
 800357e:	4b70      	ldr	r3, [pc, #448]	; (8003740 <HAL_RCC_OscConfig+0x240>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a6f      	ldr	r2, [pc, #444]	; (8003740 <HAL_RCC_OscConfig+0x240>)
 8003584:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003588:	6013      	str	r3, [r2, #0]
 800358a:	4b6d      	ldr	r3, [pc, #436]	; (8003740 <HAL_RCC_OscConfig+0x240>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a6c      	ldr	r2, [pc, #432]	; (8003740 <HAL_RCC_OscConfig+0x240>)
 8003590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003594:	6013      	str	r3, [r2, #0]
 8003596:	e00b      	b.n	80035b0 <HAL_RCC_OscConfig+0xb0>
 8003598:	4b69      	ldr	r3, [pc, #420]	; (8003740 <HAL_RCC_OscConfig+0x240>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a68      	ldr	r2, [pc, #416]	; (8003740 <HAL_RCC_OscConfig+0x240>)
 800359e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035a2:	6013      	str	r3, [r2, #0]
 80035a4:	4b66      	ldr	r3, [pc, #408]	; (8003740 <HAL_RCC_OscConfig+0x240>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a65      	ldr	r2, [pc, #404]	; (8003740 <HAL_RCC_OscConfig+0x240>)
 80035aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d013      	beq.n	80035e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b8:	f7fd fc60 	bl	8000e7c <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035c0:	f7fd fc5c 	bl	8000e7c <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b64      	cmp	r3, #100	; 0x64
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e207      	b.n	80039e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035d2:	4b5b      	ldr	r3, [pc, #364]	; (8003740 <HAL_RCC_OscConfig+0x240>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d0f0      	beq.n	80035c0 <HAL_RCC_OscConfig+0xc0>
 80035de:	e014      	b.n	800360a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e0:	f7fd fc4c 	bl	8000e7c <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035e8:	f7fd fc48 	bl	8000e7c <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b64      	cmp	r3, #100	; 0x64
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e1f3      	b.n	80039e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035fa:	4b51      	ldr	r3, [pc, #324]	; (8003740 <HAL_RCC_OscConfig+0x240>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1f0      	bne.n	80035e8 <HAL_RCC_OscConfig+0xe8>
 8003606:	e000      	b.n	800360a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003608:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d063      	beq.n	80036de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003616:	4b4a      	ldr	r3, [pc, #296]	; (8003740 <HAL_RCC_OscConfig+0x240>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 030c 	and.w	r3, r3, #12
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00b      	beq.n	800363a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003622:	4b47      	ldr	r3, [pc, #284]	; (8003740 <HAL_RCC_OscConfig+0x240>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800362a:	2b08      	cmp	r3, #8
 800362c:	d11c      	bne.n	8003668 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800362e:	4b44      	ldr	r3, [pc, #272]	; (8003740 <HAL_RCC_OscConfig+0x240>)
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d116      	bne.n	8003668 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800363a:	4b41      	ldr	r3, [pc, #260]	; (8003740 <HAL_RCC_OscConfig+0x240>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d005      	beq.n	8003652 <HAL_RCC_OscConfig+0x152>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d001      	beq.n	8003652 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e1c7      	b.n	80039e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003652:	4b3b      	ldr	r3, [pc, #236]	; (8003740 <HAL_RCC_OscConfig+0x240>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	4937      	ldr	r1, [pc, #220]	; (8003740 <HAL_RCC_OscConfig+0x240>)
 8003662:	4313      	orrs	r3, r2
 8003664:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003666:	e03a      	b.n	80036de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d020      	beq.n	80036b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003670:	4b34      	ldr	r3, [pc, #208]	; (8003744 <HAL_RCC_OscConfig+0x244>)
 8003672:	2201      	movs	r2, #1
 8003674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003676:	f7fd fc01 	bl	8000e7c <HAL_GetTick>
 800367a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800367c:	e008      	b.n	8003690 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800367e:	f7fd fbfd 	bl	8000e7c <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	2b02      	cmp	r3, #2
 800368a:	d901      	bls.n	8003690 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e1a8      	b.n	80039e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003690:	4b2b      	ldr	r3, [pc, #172]	; (8003740 <HAL_RCC_OscConfig+0x240>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d0f0      	beq.n	800367e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800369c:	4b28      	ldr	r3, [pc, #160]	; (8003740 <HAL_RCC_OscConfig+0x240>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	00db      	lsls	r3, r3, #3
 80036aa:	4925      	ldr	r1, [pc, #148]	; (8003740 <HAL_RCC_OscConfig+0x240>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	600b      	str	r3, [r1, #0]
 80036b0:	e015      	b.n	80036de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036b2:	4b24      	ldr	r3, [pc, #144]	; (8003744 <HAL_RCC_OscConfig+0x244>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b8:	f7fd fbe0 	bl	8000e7c <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036be:	e008      	b.n	80036d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036c0:	f7fd fbdc 	bl	8000e7c <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e187      	b.n	80039e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036d2:	4b1b      	ldr	r3, [pc, #108]	; (8003740 <HAL_RCC_OscConfig+0x240>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1f0      	bne.n	80036c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0308 	and.w	r3, r3, #8
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d036      	beq.n	8003758 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d016      	beq.n	8003720 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036f2:	4b15      	ldr	r3, [pc, #84]	; (8003748 <HAL_RCC_OscConfig+0x248>)
 80036f4:	2201      	movs	r2, #1
 80036f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f8:	f7fd fbc0 	bl	8000e7c <HAL_GetTick>
 80036fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036fe:	e008      	b.n	8003712 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003700:	f7fd fbbc 	bl	8000e7c <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d901      	bls.n	8003712 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e167      	b.n	80039e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003712:	4b0b      	ldr	r3, [pc, #44]	; (8003740 <HAL_RCC_OscConfig+0x240>)
 8003714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d0f0      	beq.n	8003700 <HAL_RCC_OscConfig+0x200>
 800371e:	e01b      	b.n	8003758 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003720:	4b09      	ldr	r3, [pc, #36]	; (8003748 <HAL_RCC_OscConfig+0x248>)
 8003722:	2200      	movs	r2, #0
 8003724:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003726:	f7fd fba9 	bl	8000e7c <HAL_GetTick>
 800372a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800372c:	e00e      	b.n	800374c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800372e:	f7fd fba5 	bl	8000e7c <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	2b02      	cmp	r3, #2
 800373a:	d907      	bls.n	800374c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e150      	b.n	80039e2 <HAL_RCC_OscConfig+0x4e2>
 8003740:	40023800 	.word	0x40023800
 8003744:	42470000 	.word	0x42470000
 8003748:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800374c:	4b88      	ldr	r3, [pc, #544]	; (8003970 <HAL_RCC_OscConfig+0x470>)
 800374e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1ea      	bne.n	800372e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0304 	and.w	r3, r3, #4
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 8097 	beq.w	8003894 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003766:	2300      	movs	r3, #0
 8003768:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800376a:	4b81      	ldr	r3, [pc, #516]	; (8003970 <HAL_RCC_OscConfig+0x470>)
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10f      	bne.n	8003796 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003776:	2300      	movs	r3, #0
 8003778:	60bb      	str	r3, [r7, #8]
 800377a:	4b7d      	ldr	r3, [pc, #500]	; (8003970 <HAL_RCC_OscConfig+0x470>)
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	4a7c      	ldr	r2, [pc, #496]	; (8003970 <HAL_RCC_OscConfig+0x470>)
 8003780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003784:	6413      	str	r3, [r2, #64]	; 0x40
 8003786:	4b7a      	ldr	r3, [pc, #488]	; (8003970 <HAL_RCC_OscConfig+0x470>)
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800378e:	60bb      	str	r3, [r7, #8]
 8003790:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003792:	2301      	movs	r3, #1
 8003794:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003796:	4b77      	ldr	r3, [pc, #476]	; (8003974 <HAL_RCC_OscConfig+0x474>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d118      	bne.n	80037d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037a2:	4b74      	ldr	r3, [pc, #464]	; (8003974 <HAL_RCC_OscConfig+0x474>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a73      	ldr	r2, [pc, #460]	; (8003974 <HAL_RCC_OscConfig+0x474>)
 80037a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ae:	f7fd fb65 	bl	8000e7c <HAL_GetTick>
 80037b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b4:	e008      	b.n	80037c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037b6:	f7fd fb61 	bl	8000e7c <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d901      	bls.n	80037c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e10c      	b.n	80039e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c8:	4b6a      	ldr	r3, [pc, #424]	; (8003974 <HAL_RCC_OscConfig+0x474>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d0f0      	beq.n	80037b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d106      	bne.n	80037ea <HAL_RCC_OscConfig+0x2ea>
 80037dc:	4b64      	ldr	r3, [pc, #400]	; (8003970 <HAL_RCC_OscConfig+0x470>)
 80037de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e0:	4a63      	ldr	r2, [pc, #396]	; (8003970 <HAL_RCC_OscConfig+0x470>)
 80037e2:	f043 0301 	orr.w	r3, r3, #1
 80037e6:	6713      	str	r3, [r2, #112]	; 0x70
 80037e8:	e01c      	b.n	8003824 <HAL_RCC_OscConfig+0x324>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	2b05      	cmp	r3, #5
 80037f0:	d10c      	bne.n	800380c <HAL_RCC_OscConfig+0x30c>
 80037f2:	4b5f      	ldr	r3, [pc, #380]	; (8003970 <HAL_RCC_OscConfig+0x470>)
 80037f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f6:	4a5e      	ldr	r2, [pc, #376]	; (8003970 <HAL_RCC_OscConfig+0x470>)
 80037f8:	f043 0304 	orr.w	r3, r3, #4
 80037fc:	6713      	str	r3, [r2, #112]	; 0x70
 80037fe:	4b5c      	ldr	r3, [pc, #368]	; (8003970 <HAL_RCC_OscConfig+0x470>)
 8003800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003802:	4a5b      	ldr	r2, [pc, #364]	; (8003970 <HAL_RCC_OscConfig+0x470>)
 8003804:	f043 0301 	orr.w	r3, r3, #1
 8003808:	6713      	str	r3, [r2, #112]	; 0x70
 800380a:	e00b      	b.n	8003824 <HAL_RCC_OscConfig+0x324>
 800380c:	4b58      	ldr	r3, [pc, #352]	; (8003970 <HAL_RCC_OscConfig+0x470>)
 800380e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003810:	4a57      	ldr	r2, [pc, #348]	; (8003970 <HAL_RCC_OscConfig+0x470>)
 8003812:	f023 0301 	bic.w	r3, r3, #1
 8003816:	6713      	str	r3, [r2, #112]	; 0x70
 8003818:	4b55      	ldr	r3, [pc, #340]	; (8003970 <HAL_RCC_OscConfig+0x470>)
 800381a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381c:	4a54      	ldr	r2, [pc, #336]	; (8003970 <HAL_RCC_OscConfig+0x470>)
 800381e:	f023 0304 	bic.w	r3, r3, #4
 8003822:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d015      	beq.n	8003858 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800382c:	f7fd fb26 	bl	8000e7c <HAL_GetTick>
 8003830:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003832:	e00a      	b.n	800384a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003834:	f7fd fb22 	bl	8000e7c <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003842:	4293      	cmp	r3, r2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e0cb      	b.n	80039e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800384a:	4b49      	ldr	r3, [pc, #292]	; (8003970 <HAL_RCC_OscConfig+0x470>)
 800384c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d0ee      	beq.n	8003834 <HAL_RCC_OscConfig+0x334>
 8003856:	e014      	b.n	8003882 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003858:	f7fd fb10 	bl	8000e7c <HAL_GetTick>
 800385c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800385e:	e00a      	b.n	8003876 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003860:	f7fd fb0c 	bl	8000e7c <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	f241 3288 	movw	r2, #5000	; 0x1388
 800386e:	4293      	cmp	r3, r2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e0b5      	b.n	80039e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003876:	4b3e      	ldr	r3, [pc, #248]	; (8003970 <HAL_RCC_OscConfig+0x470>)
 8003878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1ee      	bne.n	8003860 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003882:	7dfb      	ldrb	r3, [r7, #23]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d105      	bne.n	8003894 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003888:	4b39      	ldr	r3, [pc, #228]	; (8003970 <HAL_RCC_OscConfig+0x470>)
 800388a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388c:	4a38      	ldr	r2, [pc, #224]	; (8003970 <HAL_RCC_OscConfig+0x470>)
 800388e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003892:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 80a1 	beq.w	80039e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800389e:	4b34      	ldr	r3, [pc, #208]	; (8003970 <HAL_RCC_OscConfig+0x470>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f003 030c 	and.w	r3, r3, #12
 80038a6:	2b08      	cmp	r3, #8
 80038a8:	d05c      	beq.n	8003964 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d141      	bne.n	8003936 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038b2:	4b31      	ldr	r3, [pc, #196]	; (8003978 <HAL_RCC_OscConfig+0x478>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b8:	f7fd fae0 	bl	8000e7c <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038c0:	f7fd fadc 	bl	8000e7c <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e087      	b.n	80039e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038d2:	4b27      	ldr	r3, [pc, #156]	; (8003970 <HAL_RCC_OscConfig+0x470>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1f0      	bne.n	80038c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	69da      	ldr	r2, [r3, #28]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	431a      	orrs	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ec:	019b      	lsls	r3, r3, #6
 80038ee:	431a      	orrs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f4:	085b      	lsrs	r3, r3, #1
 80038f6:	3b01      	subs	r3, #1
 80038f8:	041b      	lsls	r3, r3, #16
 80038fa:	431a      	orrs	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003900:	061b      	lsls	r3, r3, #24
 8003902:	491b      	ldr	r1, [pc, #108]	; (8003970 <HAL_RCC_OscConfig+0x470>)
 8003904:	4313      	orrs	r3, r2
 8003906:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003908:	4b1b      	ldr	r3, [pc, #108]	; (8003978 <HAL_RCC_OscConfig+0x478>)
 800390a:	2201      	movs	r2, #1
 800390c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800390e:	f7fd fab5 	bl	8000e7c <HAL_GetTick>
 8003912:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003914:	e008      	b.n	8003928 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003916:	f7fd fab1 	bl	8000e7c <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	2b02      	cmp	r3, #2
 8003922:	d901      	bls.n	8003928 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e05c      	b.n	80039e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003928:	4b11      	ldr	r3, [pc, #68]	; (8003970 <HAL_RCC_OscConfig+0x470>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d0f0      	beq.n	8003916 <HAL_RCC_OscConfig+0x416>
 8003934:	e054      	b.n	80039e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003936:	4b10      	ldr	r3, [pc, #64]	; (8003978 <HAL_RCC_OscConfig+0x478>)
 8003938:	2200      	movs	r2, #0
 800393a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800393c:	f7fd fa9e 	bl	8000e7c <HAL_GetTick>
 8003940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003942:	e008      	b.n	8003956 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003944:	f7fd fa9a 	bl	8000e7c <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e045      	b.n	80039e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003956:	4b06      	ldr	r3, [pc, #24]	; (8003970 <HAL_RCC_OscConfig+0x470>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1f0      	bne.n	8003944 <HAL_RCC_OscConfig+0x444>
 8003962:	e03d      	b.n	80039e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d107      	bne.n	800397c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e038      	b.n	80039e2 <HAL_RCC_OscConfig+0x4e2>
 8003970:	40023800 	.word	0x40023800
 8003974:	40007000 	.word	0x40007000
 8003978:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800397c:	4b1b      	ldr	r3, [pc, #108]	; (80039ec <HAL_RCC_OscConfig+0x4ec>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d028      	beq.n	80039dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003994:	429a      	cmp	r2, r3
 8003996:	d121      	bne.n	80039dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d11a      	bne.n	80039dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039ac:	4013      	ands	r3, r2
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d111      	bne.n	80039dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c2:	085b      	lsrs	r3, r3, #1
 80039c4:	3b01      	subs	r3, #1
 80039c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d107      	bne.n	80039dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039d8:	429a      	cmp	r2, r3
 80039da:	d001      	beq.n	80039e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e000      	b.n	80039e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3718      	adds	r7, #24
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	40023800 	.word	0x40023800

080039f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d101      	bne.n	8003a04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e0cc      	b.n	8003b9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a04:	4b68      	ldr	r3, [pc, #416]	; (8003ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0307 	and.w	r3, r3, #7
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d90c      	bls.n	8003a2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a12:	4b65      	ldr	r3, [pc, #404]	; (8003ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	b2d2      	uxtb	r2, r2
 8003a18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a1a:	4b63      	ldr	r3, [pc, #396]	; (8003ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0307 	and.w	r3, r3, #7
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d001      	beq.n	8003a2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e0b8      	b.n	8003b9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d020      	beq.n	8003a7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0304 	and.w	r3, r3, #4
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d005      	beq.n	8003a50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a44:	4b59      	ldr	r3, [pc, #356]	; (8003bac <HAL_RCC_ClockConfig+0x1bc>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	4a58      	ldr	r2, [pc, #352]	; (8003bac <HAL_RCC_ClockConfig+0x1bc>)
 8003a4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0308 	and.w	r3, r3, #8
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d005      	beq.n	8003a68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a5c:	4b53      	ldr	r3, [pc, #332]	; (8003bac <HAL_RCC_ClockConfig+0x1bc>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	4a52      	ldr	r2, [pc, #328]	; (8003bac <HAL_RCC_ClockConfig+0x1bc>)
 8003a62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a68:	4b50      	ldr	r3, [pc, #320]	; (8003bac <HAL_RCC_ClockConfig+0x1bc>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	494d      	ldr	r1, [pc, #308]	; (8003bac <HAL_RCC_ClockConfig+0x1bc>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d044      	beq.n	8003b10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d107      	bne.n	8003a9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a8e:	4b47      	ldr	r3, [pc, #284]	; (8003bac <HAL_RCC_ClockConfig+0x1bc>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d119      	bne.n	8003ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e07f      	b.n	8003b9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d003      	beq.n	8003aae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aaa:	2b03      	cmp	r3, #3
 8003aac:	d107      	bne.n	8003abe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aae:	4b3f      	ldr	r3, [pc, #252]	; (8003bac <HAL_RCC_ClockConfig+0x1bc>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d109      	bne.n	8003ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e06f      	b.n	8003b9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003abe:	4b3b      	ldr	r3, [pc, #236]	; (8003bac <HAL_RCC_ClockConfig+0x1bc>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e067      	b.n	8003b9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ace:	4b37      	ldr	r3, [pc, #220]	; (8003bac <HAL_RCC_ClockConfig+0x1bc>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f023 0203 	bic.w	r2, r3, #3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	4934      	ldr	r1, [pc, #208]	; (8003bac <HAL_RCC_ClockConfig+0x1bc>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ae0:	f7fd f9cc 	bl	8000e7c <HAL_GetTick>
 8003ae4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ae6:	e00a      	b.n	8003afe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ae8:	f7fd f9c8 	bl	8000e7c <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e04f      	b.n	8003b9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003afe:	4b2b      	ldr	r3, [pc, #172]	; (8003bac <HAL_RCC_ClockConfig+0x1bc>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f003 020c 	and.w	r2, r3, #12
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d1eb      	bne.n	8003ae8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b10:	4b25      	ldr	r3, [pc, #148]	; (8003ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0307 	and.w	r3, r3, #7
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d20c      	bcs.n	8003b38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b1e:	4b22      	ldr	r3, [pc, #136]	; (8003ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b20:	683a      	ldr	r2, [r7, #0]
 8003b22:	b2d2      	uxtb	r2, r2
 8003b24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b26:	4b20      	ldr	r3, [pc, #128]	; (8003ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0307 	and.w	r3, r3, #7
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d001      	beq.n	8003b38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e032      	b.n	8003b9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0304 	and.w	r3, r3, #4
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d008      	beq.n	8003b56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b44:	4b19      	ldr	r3, [pc, #100]	; (8003bac <HAL_RCC_ClockConfig+0x1bc>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	4916      	ldr	r1, [pc, #88]	; (8003bac <HAL_RCC_ClockConfig+0x1bc>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0308 	and.w	r3, r3, #8
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d009      	beq.n	8003b76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b62:	4b12      	ldr	r3, [pc, #72]	; (8003bac <HAL_RCC_ClockConfig+0x1bc>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	490e      	ldr	r1, [pc, #56]	; (8003bac <HAL_RCC_ClockConfig+0x1bc>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b76:	f000 f821 	bl	8003bbc <HAL_RCC_GetSysClockFreq>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	4b0b      	ldr	r3, [pc, #44]	; (8003bac <HAL_RCC_ClockConfig+0x1bc>)
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	091b      	lsrs	r3, r3, #4
 8003b82:	f003 030f 	and.w	r3, r3, #15
 8003b86:	490a      	ldr	r1, [pc, #40]	; (8003bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b88:	5ccb      	ldrb	r3, [r1, r3]
 8003b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b8e:	4a09      	ldr	r2, [pc, #36]	; (8003bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b92:	4b09      	ldr	r3, [pc, #36]	; (8003bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7fd f92c 	bl	8000df4 <HAL_InitTick>

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	40023c00 	.word	0x40023c00
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	08008480 	.word	0x08008480
 8003bb4:	20000000 	.word	0x20000000
 8003bb8:	20000004 	.word	0x20000004

08003bbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bc0:	b094      	sub	sp, #80	; 0x50
 8003bc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	647b      	str	r3, [r7, #68]	; 0x44
 8003bc8:	2300      	movs	r3, #0
 8003bca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bcc:	2300      	movs	r3, #0
 8003bce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bd4:	4b79      	ldr	r3, [pc, #484]	; (8003dbc <HAL_RCC_GetSysClockFreq+0x200>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f003 030c 	and.w	r3, r3, #12
 8003bdc:	2b08      	cmp	r3, #8
 8003bde:	d00d      	beq.n	8003bfc <HAL_RCC_GetSysClockFreq+0x40>
 8003be0:	2b08      	cmp	r3, #8
 8003be2:	f200 80e1 	bhi.w	8003da8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d002      	beq.n	8003bf0 <HAL_RCC_GetSysClockFreq+0x34>
 8003bea:	2b04      	cmp	r3, #4
 8003bec:	d003      	beq.n	8003bf6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003bee:	e0db      	b.n	8003da8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bf0:	4b73      	ldr	r3, [pc, #460]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bf2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003bf4:	e0db      	b.n	8003dae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bf6:	4b73      	ldr	r3, [pc, #460]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003bf8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bfa:	e0d8      	b.n	8003dae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bfc:	4b6f      	ldr	r3, [pc, #444]	; (8003dbc <HAL_RCC_GetSysClockFreq+0x200>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c04:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c06:	4b6d      	ldr	r3, [pc, #436]	; (8003dbc <HAL_RCC_GetSysClockFreq+0x200>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d063      	beq.n	8003cda <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c12:	4b6a      	ldr	r3, [pc, #424]	; (8003dbc <HAL_RCC_GetSysClockFreq+0x200>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	099b      	lsrs	r3, r3, #6
 8003c18:	2200      	movs	r2, #0
 8003c1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c1c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c24:	633b      	str	r3, [r7, #48]	; 0x30
 8003c26:	2300      	movs	r3, #0
 8003c28:	637b      	str	r3, [r7, #52]	; 0x34
 8003c2a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c2e:	4622      	mov	r2, r4
 8003c30:	462b      	mov	r3, r5
 8003c32:	f04f 0000 	mov.w	r0, #0
 8003c36:	f04f 0100 	mov.w	r1, #0
 8003c3a:	0159      	lsls	r1, r3, #5
 8003c3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c40:	0150      	lsls	r0, r2, #5
 8003c42:	4602      	mov	r2, r0
 8003c44:	460b      	mov	r3, r1
 8003c46:	4621      	mov	r1, r4
 8003c48:	1a51      	subs	r1, r2, r1
 8003c4a:	6139      	str	r1, [r7, #16]
 8003c4c:	4629      	mov	r1, r5
 8003c4e:	eb63 0301 	sbc.w	r3, r3, r1
 8003c52:	617b      	str	r3, [r7, #20]
 8003c54:	f04f 0200 	mov.w	r2, #0
 8003c58:	f04f 0300 	mov.w	r3, #0
 8003c5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c60:	4659      	mov	r1, fp
 8003c62:	018b      	lsls	r3, r1, #6
 8003c64:	4651      	mov	r1, sl
 8003c66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c6a:	4651      	mov	r1, sl
 8003c6c:	018a      	lsls	r2, r1, #6
 8003c6e:	4651      	mov	r1, sl
 8003c70:	ebb2 0801 	subs.w	r8, r2, r1
 8003c74:	4659      	mov	r1, fp
 8003c76:	eb63 0901 	sbc.w	r9, r3, r1
 8003c7a:	f04f 0200 	mov.w	r2, #0
 8003c7e:	f04f 0300 	mov.w	r3, #0
 8003c82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c8e:	4690      	mov	r8, r2
 8003c90:	4699      	mov	r9, r3
 8003c92:	4623      	mov	r3, r4
 8003c94:	eb18 0303 	adds.w	r3, r8, r3
 8003c98:	60bb      	str	r3, [r7, #8]
 8003c9a:	462b      	mov	r3, r5
 8003c9c:	eb49 0303 	adc.w	r3, r9, r3
 8003ca0:	60fb      	str	r3, [r7, #12]
 8003ca2:	f04f 0200 	mov.w	r2, #0
 8003ca6:	f04f 0300 	mov.w	r3, #0
 8003caa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003cae:	4629      	mov	r1, r5
 8003cb0:	024b      	lsls	r3, r1, #9
 8003cb2:	4621      	mov	r1, r4
 8003cb4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003cb8:	4621      	mov	r1, r4
 8003cba:	024a      	lsls	r2, r1, #9
 8003cbc:	4610      	mov	r0, r2
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cc8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ccc:	f7fc fa8e 	bl	80001ec <__aeabi_uldivmod>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cd8:	e058      	b.n	8003d8c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cda:	4b38      	ldr	r3, [pc, #224]	; (8003dbc <HAL_RCC_GetSysClockFreq+0x200>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	099b      	lsrs	r3, r3, #6
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	4611      	mov	r1, r2
 8003ce6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cea:	623b      	str	r3, [r7, #32]
 8003cec:	2300      	movs	r3, #0
 8003cee:	627b      	str	r3, [r7, #36]	; 0x24
 8003cf0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003cf4:	4642      	mov	r2, r8
 8003cf6:	464b      	mov	r3, r9
 8003cf8:	f04f 0000 	mov.w	r0, #0
 8003cfc:	f04f 0100 	mov.w	r1, #0
 8003d00:	0159      	lsls	r1, r3, #5
 8003d02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d06:	0150      	lsls	r0, r2, #5
 8003d08:	4602      	mov	r2, r0
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	4641      	mov	r1, r8
 8003d0e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d12:	4649      	mov	r1, r9
 8003d14:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d18:	f04f 0200 	mov.w	r2, #0
 8003d1c:	f04f 0300 	mov.w	r3, #0
 8003d20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d2c:	ebb2 040a 	subs.w	r4, r2, sl
 8003d30:	eb63 050b 	sbc.w	r5, r3, fp
 8003d34:	f04f 0200 	mov.w	r2, #0
 8003d38:	f04f 0300 	mov.w	r3, #0
 8003d3c:	00eb      	lsls	r3, r5, #3
 8003d3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d42:	00e2      	lsls	r2, r4, #3
 8003d44:	4614      	mov	r4, r2
 8003d46:	461d      	mov	r5, r3
 8003d48:	4643      	mov	r3, r8
 8003d4a:	18e3      	adds	r3, r4, r3
 8003d4c:	603b      	str	r3, [r7, #0]
 8003d4e:	464b      	mov	r3, r9
 8003d50:	eb45 0303 	adc.w	r3, r5, r3
 8003d54:	607b      	str	r3, [r7, #4]
 8003d56:	f04f 0200 	mov.w	r2, #0
 8003d5a:	f04f 0300 	mov.w	r3, #0
 8003d5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d62:	4629      	mov	r1, r5
 8003d64:	028b      	lsls	r3, r1, #10
 8003d66:	4621      	mov	r1, r4
 8003d68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d6c:	4621      	mov	r1, r4
 8003d6e:	028a      	lsls	r2, r1, #10
 8003d70:	4610      	mov	r0, r2
 8003d72:	4619      	mov	r1, r3
 8003d74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d76:	2200      	movs	r2, #0
 8003d78:	61bb      	str	r3, [r7, #24]
 8003d7a:	61fa      	str	r2, [r7, #28]
 8003d7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d80:	f7fc fa34 	bl	80001ec <__aeabi_uldivmod>
 8003d84:	4602      	mov	r2, r0
 8003d86:	460b      	mov	r3, r1
 8003d88:	4613      	mov	r3, r2
 8003d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d8c:	4b0b      	ldr	r3, [pc, #44]	; (8003dbc <HAL_RCC_GetSysClockFreq+0x200>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	0c1b      	lsrs	r3, r3, #16
 8003d92:	f003 0303 	and.w	r3, r3, #3
 8003d96:	3301      	adds	r3, #1
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003d9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003da6:	e002      	b.n	8003dae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003da8:	4b05      	ldr	r3, [pc, #20]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003daa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003dac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3750      	adds	r7, #80	; 0x50
 8003db4:	46bd      	mov	sp, r7
 8003db6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dba:	bf00      	nop
 8003dbc:	40023800 	.word	0x40023800
 8003dc0:	00f42400 	.word	0x00f42400
 8003dc4:	007a1200 	.word	0x007a1200

08003dc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dcc:	4b03      	ldr	r3, [pc, #12]	; (8003ddc <HAL_RCC_GetHCLKFreq+0x14>)
 8003dce:	681b      	ldr	r3, [r3, #0]
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	20000000 	.word	0x20000000

08003de0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003de4:	f7ff fff0 	bl	8003dc8 <HAL_RCC_GetHCLKFreq>
 8003de8:	4602      	mov	r2, r0
 8003dea:	4b05      	ldr	r3, [pc, #20]	; (8003e00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	0a9b      	lsrs	r3, r3, #10
 8003df0:	f003 0307 	and.w	r3, r3, #7
 8003df4:	4903      	ldr	r1, [pc, #12]	; (8003e04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003df6:	5ccb      	ldrb	r3, [r1, r3]
 8003df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	40023800 	.word	0x40023800
 8003e04:	08008490 	.word	0x08008490

08003e08 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003e14:	2300      	movs	r3, #0
 8003e16:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d105      	bne.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d038      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e30:	4b68      	ldr	r3, [pc, #416]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e36:	f7fd f821 	bl	8000e7c <HAL_GetTick>
 8003e3a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e3c:	e008      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e3e:	f7fd f81d 	bl	8000e7c <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d901      	bls.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e0bd      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e50:	4b61      	ldr	r3, [pc, #388]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1f0      	bne.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685a      	ldr	r2, [r3, #4]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	019b      	lsls	r3, r3, #6
 8003e66:	431a      	orrs	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	071b      	lsls	r3, r3, #28
 8003e6e:	495a      	ldr	r1, [pc, #360]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e76:	4b57      	ldr	r3, [pc, #348]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e78:	2201      	movs	r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e7c:	f7fc fffe 	bl	8000e7c <HAL_GetTick>
 8003e80:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e82:	e008      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e84:	f7fc fffa 	bl	8000e7c <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d901      	bls.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e09a      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e96:	4b50      	ldr	r3, [pc, #320]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d0f0      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	f000 8083 	beq.w	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	60fb      	str	r3, [r7, #12]
 8003eb4:	4b48      	ldr	r3, [pc, #288]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb8:	4a47      	ldr	r2, [pc, #284]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ebe:	6413      	str	r3, [r2, #64]	; 0x40
 8003ec0:	4b45      	ldr	r3, [pc, #276]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec8:	60fb      	str	r3, [r7, #12]
 8003eca:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003ecc:	4b43      	ldr	r3, [pc, #268]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a42      	ldr	r2, [pc, #264]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ed2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ed6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003ed8:	f7fc ffd0 	bl	8000e7c <HAL_GetTick>
 8003edc:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003ede:	e008      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003ee0:	f7fc ffcc 	bl	8000e7c <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e06c      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003ef2:	4b3a      	ldr	r3, [pc, #232]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d0f0      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003efe:	4b36      	ldr	r3, [pc, #216]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f06:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d02f      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d028      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f1c:	4b2e      	ldr	r3, [pc, #184]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f24:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f26:	4b2e      	ldr	r3, [pc, #184]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003f28:	2201      	movs	r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f2c:	4b2c      	ldr	r3, [pc, #176]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003f32:	4a29      	ldr	r2, [pc, #164]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f38:	4b27      	ldr	r3, [pc, #156]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d114      	bne.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003f44:	f7fc ff9a 	bl	8000e7c <HAL_GetTick>
 8003f48:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f4a:	e00a      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f4c:	f7fc ff96 	bl	8000e7c <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e034      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f62:	4b1d      	ldr	r3, [pc, #116]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d0ee      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f7a:	d10d      	bne.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003f7c:	4b16      	ldr	r3, [pc, #88]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003f8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f90:	4911      	ldr	r1, [pc, #68]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	608b      	str	r3, [r1, #8]
 8003f96:	e005      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003f98:	4b0f      	ldr	r3, [pc, #60]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	4a0e      	ldr	r2, [pc, #56]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f9e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003fa2:	6093      	str	r3, [r2, #8]
 8003fa4:	4b0c      	ldr	r3, [pc, #48]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fa6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fb0:	4909      	ldr	r1, [pc, #36]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0308 	and.w	r3, r3, #8
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d003      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	7d1a      	ldrb	r2, [r3, #20]
 8003fc6:	4b07      	ldr	r3, [pc, #28]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003fc8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3718      	adds	r7, #24
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	42470068 	.word	0x42470068
 8003fd8:	40023800 	.word	0x40023800
 8003fdc:	40007000 	.word	0x40007000
 8003fe0:	42470e40 	.word	0x42470e40
 8003fe4:	424711e0 	.word	0x424711e0

08003fe8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b087      	sub	sp, #28
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d140      	bne.n	8004088 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004006:	4b24      	ldr	r3, [pc, #144]	; (8004098 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800400e:	60fb      	str	r3, [r7, #12]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d005      	beq.n	8004022 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d131      	bne.n	8004080 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800401c:	4b1f      	ldr	r3, [pc, #124]	; (800409c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800401e:	617b      	str	r3, [r7, #20]
          break;
 8004020:	e031      	b.n	8004086 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004022:	4b1d      	ldr	r3, [pc, #116]	; (8004098 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800402a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800402e:	d109      	bne.n	8004044 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004030:	4b19      	ldr	r3, [pc, #100]	; (8004098 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004032:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004036:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800403a:	4a19      	ldr	r2, [pc, #100]	; (80040a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800403c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004040:	613b      	str	r3, [r7, #16]
 8004042:	e008      	b.n	8004056 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004044:	4b14      	ldr	r3, [pc, #80]	; (8004098 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004046:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800404a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800404e:	4a15      	ldr	r2, [pc, #84]	; (80040a4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004050:	fbb2 f3f3 	udiv	r3, r2, r3
 8004054:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004056:	4b10      	ldr	r3, [pc, #64]	; (8004098 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004058:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800405c:	099b      	lsrs	r3, r3, #6
 800405e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	fb02 f303 	mul.w	r3, r2, r3
 8004068:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800406a:	4b0b      	ldr	r3, [pc, #44]	; (8004098 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800406c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004070:	0f1b      	lsrs	r3, r3, #28
 8004072:	f003 0307 	and.w	r3, r3, #7
 8004076:	68ba      	ldr	r2, [r7, #8]
 8004078:	fbb2 f3f3 	udiv	r3, r2, r3
 800407c:	617b      	str	r3, [r7, #20]
          break;
 800407e:	e002      	b.n	8004086 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004080:	2300      	movs	r3, #0
 8004082:	617b      	str	r3, [r7, #20]
          break;
 8004084:	bf00      	nop
        }
      }
      break;
 8004086:	bf00      	nop
    }
  }
  return frequency;
 8004088:	697b      	ldr	r3, [r7, #20]
}
 800408a:	4618      	mov	r0, r3
 800408c:	371c      	adds	r7, #28
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	40023800 	.word	0x40023800
 800409c:	00bb8000 	.word	0x00bb8000
 80040a0:	007a1200 	.word	0x007a1200
 80040a4:	00f42400 	.word	0x00f42400

080040a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e07b      	b.n	80041b2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d108      	bne.n	80040d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040ca:	d009      	beq.n	80040e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	61da      	str	r2, [r3, #28]
 80040d2:	e005      	b.n	80040e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d106      	bne.n	8004100 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7fc fda0 	bl	8000c40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2202      	movs	r2, #2
 8004104:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004116:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004128:	431a      	orrs	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004132:	431a      	orrs	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	431a      	orrs	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	431a      	orrs	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004150:	431a      	orrs	r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	69db      	ldr	r3, [r3, #28]
 8004156:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800415a:	431a      	orrs	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004164:	ea42 0103 	orr.w	r1, r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	430a      	orrs	r2, r1
 8004176:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	0c1b      	lsrs	r3, r3, #16
 800417e:	f003 0104 	and.w	r1, r3, #4
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004186:	f003 0210 	and.w	r2, r3, #16
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	430a      	orrs	r2, r1
 8004190:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	69da      	ldr	r2, [r3, #28]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041ba:	b084      	sub	sp, #16
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	f107 001c 	add.w	r0, r7, #28
 80041c8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80041cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d122      	bne.n	8004218 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80041e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80041fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d105      	bne.n	800420c <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f001 fbed 	bl	80059ec <USB_CoreReset>
 8004212:	4603      	mov	r3, r0
 8004214:	73fb      	strb	r3, [r7, #15]
 8004216:	e01a      	b.n	800424e <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f001 fbe1 	bl	80059ec <USB_CoreReset>
 800422a:	4603      	mov	r3, r0
 800422c:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800422e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004230:	2b00      	cmp	r3, #0
 8004232:	d106      	bne.n	8004242 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004238:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	639a      	str	r2, [r3, #56]	; 0x38
 8004240:	e005      	b.n	800424e <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004246:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800424e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004250:	2b01      	cmp	r3, #1
 8004252:	d10b      	bne.n	800426c <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f043 0206 	orr.w	r2, r3, #6
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f043 0220 	orr.w	r2, r3, #32
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800426c:	7bfb      	ldrb	r3, [r7, #15]
}
 800426e:	4618      	mov	r0, r3
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004278:	b004      	add	sp, #16
 800427a:	4770      	bx	lr

0800427c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800427c:	b480      	push	{r7}
 800427e:	b087      	sub	sp, #28
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	4613      	mov	r3, r2
 8004288:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800428a:	79fb      	ldrb	r3, [r7, #7]
 800428c:	2b02      	cmp	r3, #2
 800428e:	d165      	bne.n	800435c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	4a41      	ldr	r2, [pc, #260]	; (8004398 <USB_SetTurnaroundTime+0x11c>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d906      	bls.n	80042a6 <USB_SetTurnaroundTime+0x2a>
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	4a40      	ldr	r2, [pc, #256]	; (800439c <USB_SetTurnaroundTime+0x120>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d202      	bcs.n	80042a6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80042a0:	230f      	movs	r3, #15
 80042a2:	617b      	str	r3, [r7, #20]
 80042a4:	e062      	b.n	800436c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	4a3c      	ldr	r2, [pc, #240]	; (800439c <USB_SetTurnaroundTime+0x120>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d306      	bcc.n	80042bc <USB_SetTurnaroundTime+0x40>
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	4a3b      	ldr	r2, [pc, #236]	; (80043a0 <USB_SetTurnaroundTime+0x124>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d202      	bcs.n	80042bc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80042b6:	230e      	movs	r3, #14
 80042b8:	617b      	str	r3, [r7, #20]
 80042ba:	e057      	b.n	800436c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	4a38      	ldr	r2, [pc, #224]	; (80043a0 <USB_SetTurnaroundTime+0x124>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d306      	bcc.n	80042d2 <USB_SetTurnaroundTime+0x56>
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	4a37      	ldr	r2, [pc, #220]	; (80043a4 <USB_SetTurnaroundTime+0x128>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d202      	bcs.n	80042d2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80042cc:	230d      	movs	r3, #13
 80042ce:	617b      	str	r3, [r7, #20]
 80042d0:	e04c      	b.n	800436c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	4a33      	ldr	r2, [pc, #204]	; (80043a4 <USB_SetTurnaroundTime+0x128>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d306      	bcc.n	80042e8 <USB_SetTurnaroundTime+0x6c>
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	4a32      	ldr	r2, [pc, #200]	; (80043a8 <USB_SetTurnaroundTime+0x12c>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d802      	bhi.n	80042e8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80042e2:	230c      	movs	r3, #12
 80042e4:	617b      	str	r3, [r7, #20]
 80042e6:	e041      	b.n	800436c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	4a2f      	ldr	r2, [pc, #188]	; (80043a8 <USB_SetTurnaroundTime+0x12c>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d906      	bls.n	80042fe <USB_SetTurnaroundTime+0x82>
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	4a2e      	ldr	r2, [pc, #184]	; (80043ac <USB_SetTurnaroundTime+0x130>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d802      	bhi.n	80042fe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80042f8:	230b      	movs	r3, #11
 80042fa:	617b      	str	r3, [r7, #20]
 80042fc:	e036      	b.n	800436c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	4a2a      	ldr	r2, [pc, #168]	; (80043ac <USB_SetTurnaroundTime+0x130>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d906      	bls.n	8004314 <USB_SetTurnaroundTime+0x98>
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	4a29      	ldr	r2, [pc, #164]	; (80043b0 <USB_SetTurnaroundTime+0x134>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d802      	bhi.n	8004314 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800430e:	230a      	movs	r3, #10
 8004310:	617b      	str	r3, [r7, #20]
 8004312:	e02b      	b.n	800436c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	4a26      	ldr	r2, [pc, #152]	; (80043b0 <USB_SetTurnaroundTime+0x134>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d906      	bls.n	800432a <USB_SetTurnaroundTime+0xae>
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	4a25      	ldr	r2, [pc, #148]	; (80043b4 <USB_SetTurnaroundTime+0x138>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d202      	bcs.n	800432a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004324:	2309      	movs	r3, #9
 8004326:	617b      	str	r3, [r7, #20]
 8004328:	e020      	b.n	800436c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	4a21      	ldr	r2, [pc, #132]	; (80043b4 <USB_SetTurnaroundTime+0x138>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d306      	bcc.n	8004340 <USB_SetTurnaroundTime+0xc4>
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	4a20      	ldr	r2, [pc, #128]	; (80043b8 <USB_SetTurnaroundTime+0x13c>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d802      	bhi.n	8004340 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800433a:	2308      	movs	r3, #8
 800433c:	617b      	str	r3, [r7, #20]
 800433e:	e015      	b.n	800436c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	4a1d      	ldr	r2, [pc, #116]	; (80043b8 <USB_SetTurnaroundTime+0x13c>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d906      	bls.n	8004356 <USB_SetTurnaroundTime+0xda>
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	4a1c      	ldr	r2, [pc, #112]	; (80043bc <USB_SetTurnaroundTime+0x140>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d202      	bcs.n	8004356 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004350:	2307      	movs	r3, #7
 8004352:	617b      	str	r3, [r7, #20]
 8004354:	e00a      	b.n	800436c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004356:	2306      	movs	r3, #6
 8004358:	617b      	str	r3, [r7, #20]
 800435a:	e007      	b.n	800436c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800435c:	79fb      	ldrb	r3, [r7, #7]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d102      	bne.n	8004368 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004362:	2309      	movs	r3, #9
 8004364:	617b      	str	r3, [r7, #20]
 8004366:	e001      	b.n	800436c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004368:	2309      	movs	r3, #9
 800436a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	68da      	ldr	r2, [r3, #12]
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	029b      	lsls	r3, r3, #10
 8004380:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004384:	431a      	orrs	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	371c      	adds	r7, #28
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr
 8004398:	00d8acbf 	.word	0x00d8acbf
 800439c:	00e4e1c0 	.word	0x00e4e1c0
 80043a0:	00f42400 	.word	0x00f42400
 80043a4:	01067380 	.word	0x01067380
 80043a8:	011a499f 	.word	0x011a499f
 80043ac:	01312cff 	.word	0x01312cff
 80043b0:	014ca43f 	.word	0x014ca43f
 80043b4:	016e3600 	.word	0x016e3600
 80043b8:	01a6ab1f 	.word	0x01a6ab1f
 80043bc:	01e84800 	.word	0x01e84800

080043c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f043 0201 	orr.w	r2, r3, #1
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80043e2:	b480      	push	{r7}
 80043e4:	b083      	sub	sp, #12
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f023 0201 	bic.w	r2, r3, #1
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	460b      	mov	r3, r1
 800440e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004410:	2300      	movs	r3, #0
 8004412:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004420:	78fb      	ldrb	r3, [r7, #3]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d115      	bne.n	8004452 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004432:	2001      	movs	r0, #1
 8004434:	f7fc fd2e 	bl	8000e94 <HAL_Delay>
      ms++;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	3301      	adds	r3, #1
 800443c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f001 fa45 	bl	80058ce <USB_GetMode>
 8004444:	4603      	mov	r3, r0
 8004446:	2b01      	cmp	r3, #1
 8004448:	d01e      	beq.n	8004488 <USB_SetCurrentMode+0x84>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2b31      	cmp	r3, #49	; 0x31
 800444e:	d9f0      	bls.n	8004432 <USB_SetCurrentMode+0x2e>
 8004450:	e01a      	b.n	8004488 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004452:	78fb      	ldrb	r3, [r7, #3]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d115      	bne.n	8004484 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004464:	2001      	movs	r0, #1
 8004466:	f7fc fd15 	bl	8000e94 <HAL_Delay>
      ms++;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	3301      	adds	r3, #1
 800446e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f001 fa2c 	bl	80058ce <USB_GetMode>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d005      	beq.n	8004488 <USB_SetCurrentMode+0x84>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2b31      	cmp	r3, #49	; 0x31
 8004480:	d9f0      	bls.n	8004464 <USB_SetCurrentMode+0x60>
 8004482:	e001      	b.n	8004488 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e005      	b.n	8004494 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2b32      	cmp	r3, #50	; 0x32
 800448c:	d101      	bne.n	8004492 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e000      	b.n	8004494 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800449c:	b084      	sub	sp, #16
 800449e:	b580      	push	{r7, lr}
 80044a0:	b086      	sub	sp, #24
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
 80044a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80044aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80044ae:	2300      	movs	r3, #0
 80044b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80044b6:	2300      	movs	r3, #0
 80044b8:	613b      	str	r3, [r7, #16]
 80044ba:	e009      	b.n	80044d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	3340      	adds	r3, #64	; 0x40
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	4413      	add	r3, r2
 80044c6:	2200      	movs	r2, #0
 80044c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	3301      	adds	r3, #1
 80044ce:	613b      	str	r3, [r7, #16]
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	2b0e      	cmp	r3, #14
 80044d4:	d9f2      	bls.n	80044bc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80044d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d11c      	bne.n	8004516 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044ea:	f043 0302 	orr.w	r3, r3, #2
 80044ee:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004500:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	639a      	str	r2, [r3, #56]	; 0x38
 8004514:	e00b      	b.n	800452e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004526:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004534:	461a      	mov	r2, r3
 8004536:	2300      	movs	r3, #0
 8004538:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004540:	4619      	mov	r1, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004548:	461a      	mov	r2, r3
 800454a:	680b      	ldr	r3, [r1, #0]
 800454c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800454e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004550:	2b01      	cmp	r3, #1
 8004552:	d10c      	bne.n	800456e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004556:	2b00      	cmp	r3, #0
 8004558:	d104      	bne.n	8004564 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800455a:	2100      	movs	r1, #0
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 f965 	bl	800482c <USB_SetDevSpeed>
 8004562:	e008      	b.n	8004576 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004564:	2101      	movs	r1, #1
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f960 	bl	800482c <USB_SetDevSpeed>
 800456c:	e003      	b.n	8004576 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800456e:	2103      	movs	r1, #3
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 f95b 	bl	800482c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004576:	2110      	movs	r1, #16
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 f8f3 	bl	8004764 <USB_FlushTxFifo>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d001      	beq.n	8004588 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 f91f 	bl	80047cc <USB_FlushRxFifo>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d001      	beq.n	8004598 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800459e:	461a      	mov	r2, r3
 80045a0:	2300      	movs	r3, #0
 80045a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045aa:	461a      	mov	r2, r3
 80045ac:	2300      	movs	r3, #0
 80045ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045b6:	461a      	mov	r2, r3
 80045b8:	2300      	movs	r3, #0
 80045ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045bc:	2300      	movs	r3, #0
 80045be:	613b      	str	r3, [r7, #16]
 80045c0:	e043      	b.n	800464a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	015a      	lsls	r2, r3, #5
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	4413      	add	r3, r2
 80045ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045d8:	d118      	bne.n	800460c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d10a      	bne.n	80045f6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	015a      	lsls	r2, r3, #5
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	4413      	add	r3, r2
 80045e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ec:	461a      	mov	r2, r3
 80045ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80045f2:	6013      	str	r3, [r2, #0]
 80045f4:	e013      	b.n	800461e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	015a      	lsls	r2, r3, #5
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	4413      	add	r3, r2
 80045fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004602:	461a      	mov	r2, r3
 8004604:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004608:	6013      	str	r3, [r2, #0]
 800460a:	e008      	b.n	800461e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	015a      	lsls	r2, r3, #5
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	4413      	add	r3, r2
 8004614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004618:	461a      	mov	r2, r3
 800461a:	2300      	movs	r3, #0
 800461c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	015a      	lsls	r2, r3, #5
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	4413      	add	r3, r2
 8004626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800462a:	461a      	mov	r2, r3
 800462c:	2300      	movs	r3, #0
 800462e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	015a      	lsls	r2, r3, #5
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	4413      	add	r3, r2
 8004638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800463c:	461a      	mov	r2, r3
 800463e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004642:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	3301      	adds	r3, #1
 8004648:	613b      	str	r3, [r7, #16]
 800464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	429a      	cmp	r2, r3
 8004650:	d3b7      	bcc.n	80045c2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004652:	2300      	movs	r3, #0
 8004654:	613b      	str	r3, [r7, #16]
 8004656:	e043      	b.n	80046e0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	015a      	lsls	r2, r3, #5
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	4413      	add	r3, r2
 8004660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800466a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800466e:	d118      	bne.n	80046a2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10a      	bne.n	800468c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	015a      	lsls	r2, r3, #5
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	4413      	add	r3, r2
 800467e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004682:	461a      	mov	r2, r3
 8004684:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004688:	6013      	str	r3, [r2, #0]
 800468a:	e013      	b.n	80046b4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	015a      	lsls	r2, r3, #5
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	4413      	add	r3, r2
 8004694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004698:	461a      	mov	r2, r3
 800469a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800469e:	6013      	str	r3, [r2, #0]
 80046a0:	e008      	b.n	80046b4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	015a      	lsls	r2, r3, #5
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	4413      	add	r3, r2
 80046aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ae:	461a      	mov	r2, r3
 80046b0:	2300      	movs	r3, #0
 80046b2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	015a      	lsls	r2, r3, #5
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	4413      	add	r3, r2
 80046bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c0:	461a      	mov	r2, r3
 80046c2:	2300      	movs	r3, #0
 80046c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	015a      	lsls	r2, r3, #5
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	4413      	add	r3, r2
 80046ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046d2:	461a      	mov	r2, r3
 80046d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80046d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	3301      	adds	r3, #1
 80046de:	613b      	str	r3, [r7, #16]
 80046e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d3b7      	bcc.n	8004658 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046fa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004708:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800470a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800470c:	2b00      	cmp	r3, #0
 800470e:	d105      	bne.n	800471c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	f043 0210 	orr.w	r2, r3, #16
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	699a      	ldr	r2, [r3, #24]
 8004720:	4b0f      	ldr	r3, [pc, #60]	; (8004760 <USB_DevInit+0x2c4>)
 8004722:	4313      	orrs	r3, r2
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800472a:	2b00      	cmp	r3, #0
 800472c:	d005      	beq.n	800473a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	f043 0208 	orr.w	r2, r3, #8
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800473a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800473c:	2b01      	cmp	r3, #1
 800473e:	d107      	bne.n	8004750 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	699b      	ldr	r3, [r3, #24]
 8004744:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004748:	f043 0304 	orr.w	r3, r3, #4
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004750:	7dfb      	ldrb	r3, [r7, #23]
}
 8004752:	4618      	mov	r0, r3
 8004754:	3718      	adds	r7, #24
 8004756:	46bd      	mov	sp, r7
 8004758:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800475c:	b004      	add	sp, #16
 800475e:	4770      	bx	lr
 8004760:	803c3800 	.word	0x803c3800

08004764 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800476e:	2300      	movs	r3, #0
 8004770:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	3301      	adds	r3, #1
 8004776:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	4a13      	ldr	r2, [pc, #76]	; (80047c8 <USB_FlushTxFifo+0x64>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d901      	bls.n	8004784 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e01b      	b.n	80047bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	2b00      	cmp	r3, #0
 800478a:	daf2      	bge.n	8004772 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800478c:	2300      	movs	r3, #0
 800478e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	019b      	lsls	r3, r3, #6
 8004794:	f043 0220 	orr.w	r2, r3, #32
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	3301      	adds	r3, #1
 80047a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	4a08      	ldr	r2, [pc, #32]	; (80047c8 <USB_FlushTxFifo+0x64>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d901      	bls.n	80047ae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e006      	b.n	80047bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	f003 0320 	and.w	r3, r3, #32
 80047b6:	2b20      	cmp	r3, #32
 80047b8:	d0f0      	beq.n	800479c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3714      	adds	r7, #20
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr
 80047c8:	00030d40 	.word	0x00030d40

080047cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	3301      	adds	r3, #1
 80047dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	4a11      	ldr	r2, [pc, #68]	; (8004828 <USB_FlushRxFifo+0x5c>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d901      	bls.n	80047ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e018      	b.n	800481c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	daf2      	bge.n	80047d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80047f2:	2300      	movs	r3, #0
 80047f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2210      	movs	r2, #16
 80047fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	3301      	adds	r3, #1
 8004800:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	4a08      	ldr	r2, [pc, #32]	; (8004828 <USB_FlushRxFifo+0x5c>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d901      	bls.n	800480e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e006      	b.n	800481c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	f003 0310 	and.w	r3, r3, #16
 8004816:	2b10      	cmp	r3, #16
 8004818:	d0f0      	beq.n	80047fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3714      	adds	r7, #20
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr
 8004828:	00030d40 	.word	0x00030d40

0800482c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	460b      	mov	r3, r1
 8004836:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	78fb      	ldrb	r3, [r7, #3]
 8004846:	68f9      	ldr	r1, [r7, #12]
 8004848:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800484c:	4313      	orrs	r3, r2
 800484e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3714      	adds	r7, #20
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr

0800485e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800485e:	b480      	push	{r7}
 8004860:	b087      	sub	sp, #28
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f003 0306 	and.w	r3, r3, #6
 8004876:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d102      	bne.n	8004884 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800487e:	2300      	movs	r3, #0
 8004880:	75fb      	strb	r3, [r7, #23]
 8004882:	e00a      	b.n	800489a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2b02      	cmp	r3, #2
 8004888:	d002      	beq.n	8004890 <USB_GetDevSpeed+0x32>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2b06      	cmp	r3, #6
 800488e:	d102      	bne.n	8004896 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004890:	2302      	movs	r3, #2
 8004892:	75fb      	strb	r3, [r7, #23]
 8004894:	e001      	b.n	800489a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004896:	230f      	movs	r3, #15
 8004898:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800489a:	7dfb      	ldrb	r3, [r7, #23]
}
 800489c:	4618      	mov	r0, r3
 800489e:	371c      	adds	r7, #28
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	785b      	ldrb	r3, [r3, #1]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d13a      	bne.n	800493a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ca:	69da      	ldr	r2, [r3, #28]
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	f003 030f 	and.w	r3, r3, #15
 80048d4:	2101      	movs	r1, #1
 80048d6:	fa01 f303 	lsl.w	r3, r1, r3
 80048da:	b29b      	uxth	r3, r3
 80048dc:	68f9      	ldr	r1, [r7, #12]
 80048de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048e2:	4313      	orrs	r3, r2
 80048e4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	015a      	lsls	r2, r3, #5
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	4413      	add	r3, r2
 80048ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d155      	bne.n	80049a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	015a      	lsls	r2, r3, #5
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	4413      	add	r3, r2
 8004904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	791b      	ldrb	r3, [r3, #4]
 8004916:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004918:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	059b      	lsls	r3, r3, #22
 800491e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004920:	4313      	orrs	r3, r2
 8004922:	68ba      	ldr	r2, [r7, #8]
 8004924:	0151      	lsls	r1, r2, #5
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	440a      	add	r2, r1
 800492a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800492e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004932:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004936:	6013      	str	r3, [r2, #0]
 8004938:	e036      	b.n	80049a8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004940:	69da      	ldr	r2, [r3, #28]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	f003 030f 	and.w	r3, r3, #15
 800494a:	2101      	movs	r1, #1
 800494c:	fa01 f303 	lsl.w	r3, r1, r3
 8004950:	041b      	lsls	r3, r3, #16
 8004952:	68f9      	ldr	r1, [r7, #12]
 8004954:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004958:	4313      	orrs	r3, r2
 800495a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	015a      	lsls	r2, r3, #5
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	4413      	add	r3, r2
 8004964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d11a      	bne.n	80049a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	015a      	lsls	r2, r3, #5
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	4413      	add	r3, r2
 800497a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	791b      	ldrb	r3, [r3, #4]
 800498c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800498e:	430b      	orrs	r3, r1
 8004990:	4313      	orrs	r3, r2
 8004992:	68ba      	ldr	r2, [r7, #8]
 8004994:	0151      	lsls	r1, r2, #5
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	440a      	add	r2, r1
 800499a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800499e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049a6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
	...

080049b8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	785b      	ldrb	r3, [r3, #1]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d161      	bne.n	8004a98 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	015a      	lsls	r2, r3, #5
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	4413      	add	r3, r2
 80049dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049ea:	d11f      	bne.n	8004a2c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	015a      	lsls	r2, r3, #5
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4413      	add	r3, r2
 80049f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	0151      	lsls	r1, r2, #5
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	440a      	add	r2, r1
 8004a02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a06:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a0a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	015a      	lsls	r2, r3, #5
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	0151      	lsls	r1, r2, #5
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	440a      	add	r2, r1
 8004a22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a2a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	f003 030f 	and.w	r3, r3, #15
 8004a3c:	2101      	movs	r1, #1
 8004a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	43db      	mvns	r3, r3
 8004a46:	68f9      	ldr	r1, [r7, #12]
 8004a48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a56:	69da      	ldr	r2, [r3, #28]
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	f003 030f 	and.w	r3, r3, #15
 8004a60:	2101      	movs	r1, #1
 8004a62:	fa01 f303 	lsl.w	r3, r1, r3
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	43db      	mvns	r3, r3
 8004a6a:	68f9      	ldr	r1, [r7, #12]
 8004a6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a70:	4013      	ands	r3, r2
 8004a72:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	015a      	lsls	r2, r3, #5
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	0159      	lsls	r1, r3, #5
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	440b      	add	r3, r1
 8004a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a8e:	4619      	mov	r1, r3
 8004a90:	4b35      	ldr	r3, [pc, #212]	; (8004b68 <USB_DeactivateEndpoint+0x1b0>)
 8004a92:	4013      	ands	r3, r2
 8004a94:	600b      	str	r3, [r1, #0]
 8004a96:	e060      	b.n	8004b5a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	015a      	lsls	r2, r3, #5
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004aaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004aae:	d11f      	bne.n	8004af0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	015a      	lsls	r2, r3, #5
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68ba      	ldr	r2, [r7, #8]
 8004ac0:	0151      	lsls	r1, r2, #5
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	440a      	add	r2, r1
 8004ac6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004aca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004ace:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	015a      	lsls	r2, r3, #5
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	0151      	lsls	r1, r2, #5
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	440a      	add	r2, r1
 8004ae6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004aea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004aee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004af6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	f003 030f 	and.w	r3, r3, #15
 8004b00:	2101      	movs	r1, #1
 8004b02:	fa01 f303 	lsl.w	r3, r1, r3
 8004b06:	041b      	lsls	r3, r3, #16
 8004b08:	43db      	mvns	r3, r3
 8004b0a:	68f9      	ldr	r1, [r7, #12]
 8004b0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b10:	4013      	ands	r3, r2
 8004b12:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b1a:	69da      	ldr	r2, [r3, #28]
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	f003 030f 	and.w	r3, r3, #15
 8004b24:	2101      	movs	r1, #1
 8004b26:	fa01 f303 	lsl.w	r3, r1, r3
 8004b2a:	041b      	lsls	r3, r3, #16
 8004b2c:	43db      	mvns	r3, r3
 8004b2e:	68f9      	ldr	r1, [r7, #12]
 8004b30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b34:	4013      	ands	r3, r2
 8004b36:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	015a      	lsls	r2, r3, #5
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	4413      	add	r3, r2
 8004b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	0159      	lsls	r1, r3, #5
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	440b      	add	r3, r1
 8004b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b52:	4619      	mov	r1, r3
 8004b54:	4b05      	ldr	r3, [pc, #20]	; (8004b6c <USB_DeactivateEndpoint+0x1b4>)
 8004b56:	4013      	ands	r3, r2
 8004b58:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3714      	adds	r7, #20
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr
 8004b68:	ec337800 	.word	0xec337800
 8004b6c:	eff37800 	.word	0xeff37800

08004b70 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b08a      	sub	sp, #40	; 0x28
 8004b74:	af02      	add	r7, sp, #8
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	785b      	ldrb	r3, [r3, #1]
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	f040 815c 	bne.w	8004e4a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d132      	bne.n	8004c00 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	015a      	lsls	r2, r3, #5
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	69ba      	ldr	r2, [r7, #24]
 8004baa:	0151      	lsls	r1, r2, #5
 8004bac:	69fa      	ldr	r2, [r7, #28]
 8004bae:	440a      	add	r2, r1
 8004bb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bb4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004bb8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004bbc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	015a      	lsls	r2, r3, #5
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	69ba      	ldr	r2, [r7, #24]
 8004bce:	0151      	lsls	r1, r2, #5
 8004bd0:	69fa      	ldr	r2, [r7, #28]
 8004bd2:	440a      	add	r2, r1
 8004bd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bd8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004bdc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	015a      	lsls	r2, r3, #5
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	4413      	add	r3, r2
 8004be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	69ba      	ldr	r2, [r7, #24]
 8004bee:	0151      	lsls	r1, r2, #5
 8004bf0:	69fa      	ldr	r2, [r7, #28]
 8004bf2:	440a      	add	r2, r1
 8004bf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bf8:	0cdb      	lsrs	r3, r3, #19
 8004bfa:	04db      	lsls	r3, r3, #19
 8004bfc:	6113      	str	r3, [r2, #16]
 8004bfe:	e074      	b.n	8004cea <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	015a      	lsls	r2, r3, #5
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	4413      	add	r3, r2
 8004c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	69ba      	ldr	r2, [r7, #24]
 8004c10:	0151      	lsls	r1, r2, #5
 8004c12:	69fa      	ldr	r2, [r7, #28]
 8004c14:	440a      	add	r2, r1
 8004c16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c1a:	0cdb      	lsrs	r3, r3, #19
 8004c1c:	04db      	lsls	r3, r3, #19
 8004c1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	015a      	lsls	r2, r3, #5
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	4413      	add	r3, r2
 8004c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	69ba      	ldr	r2, [r7, #24]
 8004c30:	0151      	lsls	r1, r2, #5
 8004c32:	69fa      	ldr	r2, [r7, #28]
 8004c34:	440a      	add	r2, r1
 8004c36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c3a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c3e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	015a      	lsls	r2, r3, #5
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c50:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	6999      	ldr	r1, [r3, #24]
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	440b      	add	r3, r1
 8004c5c:	1e59      	subs	r1, r3, #1
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c66:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004c68:	4b9d      	ldr	r3, [pc, #628]	; (8004ee0 <USB_EPStartXfer+0x370>)
 8004c6a:	400b      	ands	r3, r1
 8004c6c:	69b9      	ldr	r1, [r7, #24]
 8004c6e:	0148      	lsls	r0, r1, #5
 8004c70:	69f9      	ldr	r1, [r7, #28]
 8004c72:	4401      	add	r1, r0
 8004c74:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	015a      	lsls	r2, r3, #5
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	4413      	add	r3, r2
 8004c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c88:	691a      	ldr	r2, [r3, #16]
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c92:	69b9      	ldr	r1, [r7, #24]
 8004c94:	0148      	lsls	r0, r1, #5
 8004c96:	69f9      	ldr	r1, [r7, #28]
 8004c98:	4401      	add	r1, r0
 8004c9a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	791b      	ldrb	r3, [r3, #4]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d11f      	bne.n	8004cea <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	015a      	lsls	r2, r3, #5
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	69ba      	ldr	r2, [r7, #24]
 8004cba:	0151      	lsls	r1, r2, #5
 8004cbc:	69fa      	ldr	r2, [r7, #28]
 8004cbe:	440a      	add	r2, r1
 8004cc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cc4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004cc8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	015a      	lsls	r2, r3, #5
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	69ba      	ldr	r2, [r7, #24]
 8004cda:	0151      	lsls	r1, r2, #5
 8004cdc:	69fa      	ldr	r2, [r7, #28]
 8004cde:	440a      	add	r2, r1
 8004ce0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ce4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ce8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004cea:	79fb      	ldrb	r3, [r7, #7]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d14b      	bne.n	8004d88 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	695b      	ldr	r3, [r3, #20]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d009      	beq.n	8004d0c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	015a      	lsls	r2, r3, #5
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	4413      	add	r3, r2
 8004d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d04:	461a      	mov	r2, r3
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	791b      	ldrb	r3, [r3, #4]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d128      	bne.n	8004d66 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d110      	bne.n	8004d46 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	015a      	lsls	r2, r3, #5
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	0151      	lsls	r1, r2, #5
 8004d36:	69fa      	ldr	r2, [r7, #28]
 8004d38:	440a      	add	r2, r1
 8004d3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d42:	6013      	str	r3, [r2, #0]
 8004d44:	e00f      	b.n	8004d66 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	015a      	lsls	r2, r3, #5
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	0151      	lsls	r1, r2, #5
 8004d58:	69fa      	ldr	r2, [r7, #28]
 8004d5a:	440a      	add	r2, r1
 8004d5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d64:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	015a      	lsls	r2, r3, #5
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	0151      	lsls	r1, r2, #5
 8004d78:	69fa      	ldr	r2, [r7, #28]
 8004d7a:	440a      	add	r2, r1
 8004d7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d80:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d84:	6013      	str	r3, [r2, #0]
 8004d86:	e133      	b.n	8004ff0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	015a      	lsls	r2, r3, #5
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	4413      	add	r3, r2
 8004d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	69ba      	ldr	r2, [r7, #24]
 8004d98:	0151      	lsls	r1, r2, #5
 8004d9a:	69fa      	ldr	r2, [r7, #28]
 8004d9c:	440a      	add	r2, r1
 8004d9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004da2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004da6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	791b      	ldrb	r3, [r3, #4]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d015      	beq.n	8004ddc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f000 811b 	beq.w	8004ff0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	f003 030f 	and.w	r3, r3, #15
 8004dca:	2101      	movs	r1, #1
 8004dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8004dd0:	69f9      	ldr	r1, [r7, #28]
 8004dd2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	634b      	str	r3, [r1, #52]	; 0x34
 8004dda:	e109      	b.n	8004ff0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d110      	bne.n	8004e0e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	015a      	lsls	r2, r3, #5
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	4413      	add	r3, r2
 8004df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	69ba      	ldr	r2, [r7, #24]
 8004dfc:	0151      	lsls	r1, r2, #5
 8004dfe:	69fa      	ldr	r2, [r7, #28]
 8004e00:	440a      	add	r2, r1
 8004e02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e0a:	6013      	str	r3, [r2, #0]
 8004e0c:	e00f      	b.n	8004e2e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	015a      	lsls	r2, r3, #5
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	4413      	add	r3, r2
 8004e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	69ba      	ldr	r2, [r7, #24]
 8004e1e:	0151      	lsls	r1, r2, #5
 8004e20:	69fa      	ldr	r2, [r7, #28]
 8004e22:	440a      	add	r2, r1
 8004e24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e2c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	6919      	ldr	r1, [r3, #16]
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	781a      	ldrb	r2, [r3, #0]
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	b298      	uxth	r0, r3
 8004e3c:	79fb      	ldrb	r3, [r7, #7]
 8004e3e:	9300      	str	r3, [sp, #0]
 8004e40:	4603      	mov	r3, r0
 8004e42:	68f8      	ldr	r0, [r7, #12]
 8004e44:	f000 fade 	bl	8005404 <USB_WritePacket>
 8004e48:	e0d2      	b.n	8004ff0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	015a      	lsls	r2, r3, #5
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	4413      	add	r3, r2
 8004e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	69ba      	ldr	r2, [r7, #24]
 8004e5a:	0151      	lsls	r1, r2, #5
 8004e5c:	69fa      	ldr	r2, [r7, #28]
 8004e5e:	440a      	add	r2, r1
 8004e60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e64:	0cdb      	lsrs	r3, r3, #19
 8004e66:	04db      	lsls	r3, r3, #19
 8004e68:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	015a      	lsls	r2, r3, #5
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	4413      	add	r3, r2
 8004e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	69ba      	ldr	r2, [r7, #24]
 8004e7a:	0151      	lsls	r1, r2, #5
 8004e7c:	69fa      	ldr	r2, [r7, #28]
 8004e7e:	440a      	add	r2, r1
 8004e80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e84:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e88:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e8c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d126      	bne.n	8004ee4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	015a      	lsls	r2, r3, #5
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea2:	691a      	ldr	r2, [r3, #16]
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eac:	69b9      	ldr	r1, [r7, #24]
 8004eae:	0148      	lsls	r0, r1, #5
 8004eb0:	69f9      	ldr	r1, [r7, #28]
 8004eb2:	4401      	add	r1, r0
 8004eb4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	015a      	lsls	r2, r3, #5
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	69ba      	ldr	r2, [r7, #24]
 8004ecc:	0151      	lsls	r1, r2, #5
 8004ece:	69fa      	ldr	r2, [r7, #28]
 8004ed0:	440a      	add	r2, r1
 8004ed2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ed6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004eda:	6113      	str	r3, [r2, #16]
 8004edc:	e03a      	b.n	8004f54 <USB_EPStartXfer+0x3e4>
 8004ede:	bf00      	nop
 8004ee0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	699a      	ldr	r2, [r3, #24]
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	4413      	add	r3, r2
 8004eee:	1e5a      	subs	r2, r3, #1
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	8afa      	ldrh	r2, [r7, #22]
 8004f00:	fb03 f202 	mul.w	r2, r3, r2
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	015a      	lsls	r2, r3, #5
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	4413      	add	r3, r2
 8004f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f14:	691a      	ldr	r2, [r3, #16]
 8004f16:	8afb      	ldrh	r3, [r7, #22]
 8004f18:	04d9      	lsls	r1, r3, #19
 8004f1a:	4b38      	ldr	r3, [pc, #224]	; (8004ffc <USB_EPStartXfer+0x48c>)
 8004f1c:	400b      	ands	r3, r1
 8004f1e:	69b9      	ldr	r1, [r7, #24]
 8004f20:	0148      	lsls	r0, r1, #5
 8004f22:	69f9      	ldr	r1, [r7, #28]
 8004f24:	4401      	add	r1, r0
 8004f26:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	015a      	lsls	r2, r3, #5
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	4413      	add	r3, r2
 8004f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f3a:	691a      	ldr	r2, [r3, #16]
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	69db      	ldr	r3, [r3, #28]
 8004f40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f44:	69b9      	ldr	r1, [r7, #24]
 8004f46:	0148      	lsls	r0, r1, #5
 8004f48:	69f9      	ldr	r1, [r7, #28]
 8004f4a:	4401      	add	r1, r0
 8004f4c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f50:	4313      	orrs	r3, r2
 8004f52:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004f54:	79fb      	ldrb	r3, [r7, #7]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d10d      	bne.n	8004f76 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d009      	beq.n	8004f76 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	6919      	ldr	r1, [r3, #16]
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	015a      	lsls	r2, r3, #5
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f72:	460a      	mov	r2, r1
 8004f74:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	791b      	ldrb	r3, [r3, #4]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d128      	bne.n	8004fd0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d110      	bne.n	8004fb0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	015a      	lsls	r2, r3, #5
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	4413      	add	r3, r2
 8004f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	69ba      	ldr	r2, [r7, #24]
 8004f9e:	0151      	lsls	r1, r2, #5
 8004fa0:	69fa      	ldr	r2, [r7, #28]
 8004fa2:	440a      	add	r2, r1
 8004fa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fa8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fac:	6013      	str	r3, [r2, #0]
 8004fae:	e00f      	b.n	8004fd0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	015a      	lsls	r2, r3, #5
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	69ba      	ldr	r2, [r7, #24]
 8004fc0:	0151      	lsls	r1, r2, #5
 8004fc2:	69fa      	ldr	r2, [r7, #28]
 8004fc4:	440a      	add	r2, r1
 8004fc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fce:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	015a      	lsls	r2, r3, #5
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	69ba      	ldr	r2, [r7, #24]
 8004fe0:	0151      	lsls	r1, r2, #5
 8004fe2:	69fa      	ldr	r2, [r7, #28]
 8004fe4:	440a      	add	r2, r1
 8004fe6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3720      	adds	r7, #32
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	1ff80000 	.word	0x1ff80000

08005000 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005000:	b480      	push	{r7}
 8005002:	b087      	sub	sp, #28
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	4613      	mov	r3, r2
 800500c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	785b      	ldrb	r3, [r3, #1]
 800501c:	2b01      	cmp	r3, #1
 800501e:	f040 80ce 	bne.w	80051be <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d132      	bne.n	8005090 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	015a      	lsls	r2, r3, #5
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	4413      	add	r3, r2
 8005032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	0151      	lsls	r1, r2, #5
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	440a      	add	r2, r1
 8005040:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005044:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005048:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800504c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	015a      	lsls	r2, r3, #5
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	4413      	add	r3, r2
 8005056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	0151      	lsls	r1, r2, #5
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	440a      	add	r2, r1
 8005064:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005068:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800506c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	015a      	lsls	r2, r3, #5
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	4413      	add	r3, r2
 8005076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	0151      	lsls	r1, r2, #5
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	440a      	add	r2, r1
 8005084:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005088:	0cdb      	lsrs	r3, r3, #19
 800508a:	04db      	lsls	r3, r3, #19
 800508c:	6113      	str	r3, [r2, #16]
 800508e:	e04e      	b.n	800512e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	015a      	lsls	r2, r3, #5
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	4413      	add	r3, r2
 8005098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	693a      	ldr	r2, [r7, #16]
 80050a0:	0151      	lsls	r1, r2, #5
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	440a      	add	r2, r1
 80050a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050aa:	0cdb      	lsrs	r3, r3, #19
 80050ac:	04db      	lsls	r3, r3, #19
 80050ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	015a      	lsls	r2, r3, #5
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	4413      	add	r3, r2
 80050b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	0151      	lsls	r1, r2, #5
 80050c2:	697a      	ldr	r2, [r7, #20]
 80050c4:	440a      	add	r2, r1
 80050c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80050ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80050d2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	699a      	ldr	r2, [r3, #24]
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d903      	bls.n	80050e8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	68da      	ldr	r2, [r3, #12]
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	015a      	lsls	r2, r3, #5
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	0151      	lsls	r1, r2, #5
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	440a      	add	r2, r1
 80050fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005102:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005106:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	015a      	lsls	r2, r3, #5
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	4413      	add	r3, r2
 8005110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005114:	691a      	ldr	r2, [r3, #16]
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800511e:	6939      	ldr	r1, [r7, #16]
 8005120:	0148      	lsls	r0, r1, #5
 8005122:	6979      	ldr	r1, [r7, #20]
 8005124:	4401      	add	r1, r0
 8005126:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800512a:	4313      	orrs	r3, r2
 800512c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800512e:	79fb      	ldrb	r3, [r7, #7]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d11e      	bne.n	8005172 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	695b      	ldr	r3, [r3, #20]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d009      	beq.n	8005150 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	015a      	lsls	r2, r3, #5
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	4413      	add	r3, r2
 8005144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005148:	461a      	mov	r2, r3
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	015a      	lsls	r2, r3, #5
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	4413      	add	r3, r2
 8005158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	0151      	lsls	r1, r2, #5
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	440a      	add	r2, r1
 8005166:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800516a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800516e:	6013      	str	r3, [r2, #0]
 8005170:	e097      	b.n	80052a2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	015a      	lsls	r2, r3, #5
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	4413      	add	r3, r2
 800517a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	0151      	lsls	r1, r2, #5
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	440a      	add	r2, r1
 8005188:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800518c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005190:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	2b00      	cmp	r3, #0
 8005198:	f000 8083 	beq.w	80052a2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	f003 030f 	and.w	r3, r3, #15
 80051ac:	2101      	movs	r1, #1
 80051ae:	fa01 f303 	lsl.w	r3, r1, r3
 80051b2:	6979      	ldr	r1, [r7, #20]
 80051b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051b8:	4313      	orrs	r3, r2
 80051ba:	634b      	str	r3, [r1, #52]	; 0x34
 80051bc:	e071      	b.n	80052a2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	015a      	lsls	r2, r3, #5
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	4413      	add	r3, r2
 80051c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	693a      	ldr	r2, [r7, #16]
 80051ce:	0151      	lsls	r1, r2, #5
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	440a      	add	r2, r1
 80051d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051d8:	0cdb      	lsrs	r3, r3, #19
 80051da:	04db      	lsls	r3, r3, #19
 80051dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	015a      	lsls	r2, r3, #5
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	4413      	add	r3, r2
 80051e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	693a      	ldr	r2, [r7, #16]
 80051ee:	0151      	lsls	r1, r2, #5
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	440a      	add	r2, r1
 80051f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005200:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d003      	beq.n	8005212 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	68da      	ldr	r2, [r3, #12]
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	68da      	ldr	r2, [r3, #12]
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	015a      	lsls	r2, r3, #5
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	4413      	add	r3, r2
 8005222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	0151      	lsls	r1, r2, #5
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	440a      	add	r2, r1
 8005230:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005234:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005238:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	015a      	lsls	r2, r3, #5
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	4413      	add	r3, r2
 8005242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005246:	691a      	ldr	r2, [r3, #16]
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	69db      	ldr	r3, [r3, #28]
 800524c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005250:	6939      	ldr	r1, [r7, #16]
 8005252:	0148      	lsls	r0, r1, #5
 8005254:	6979      	ldr	r1, [r7, #20]
 8005256:	4401      	add	r1, r0
 8005258:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800525c:	4313      	orrs	r3, r2
 800525e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005260:	79fb      	ldrb	r3, [r7, #7]
 8005262:	2b01      	cmp	r3, #1
 8005264:	d10d      	bne.n	8005282 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d009      	beq.n	8005282 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	6919      	ldr	r1, [r3, #16]
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	015a      	lsls	r2, r3, #5
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	4413      	add	r3, r2
 800527a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800527e:	460a      	mov	r2, r1
 8005280:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	015a      	lsls	r2, r3, #5
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	4413      	add	r3, r2
 800528a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	0151      	lsls	r1, r2, #5
 8005294:	697a      	ldr	r2, [r7, #20]
 8005296:	440a      	add	r2, r1
 8005298:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800529c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052a0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	371c      	adds	r7, #28
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b087      	sub	sp, #28
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80052ba:	2300      	movs	r3, #0
 80052bc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80052be:	2300      	movs	r3, #0
 80052c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	785b      	ldrb	r3, [r3, #1]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d14a      	bne.n	8005364 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	015a      	lsls	r2, r3, #5
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	4413      	add	r3, r2
 80052d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052e6:	f040 8086 	bne.w	80053f6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	015a      	lsls	r2, r3, #5
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	4413      	add	r3, r2
 80052f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	683a      	ldr	r2, [r7, #0]
 80052fc:	7812      	ldrb	r2, [r2, #0]
 80052fe:	0151      	lsls	r1, r2, #5
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	440a      	add	r2, r1
 8005304:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005308:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800530c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	015a      	lsls	r2, r3, #5
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	4413      	add	r3, r2
 8005318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	683a      	ldr	r2, [r7, #0]
 8005320:	7812      	ldrb	r2, [r2, #0]
 8005322:	0151      	lsls	r1, r2, #5
 8005324:	693a      	ldr	r2, [r7, #16]
 8005326:	440a      	add	r2, r1
 8005328:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800532c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005330:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	3301      	adds	r3, #1
 8005336:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f242 7210 	movw	r2, #10000	; 0x2710
 800533e:	4293      	cmp	r3, r2
 8005340:	d902      	bls.n	8005348 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	75fb      	strb	r3, [r7, #23]
          break;
 8005346:	e056      	b.n	80053f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	015a      	lsls	r2, r3, #5
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	4413      	add	r3, r2
 8005352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800535c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005360:	d0e7      	beq.n	8005332 <USB_EPStopXfer+0x82>
 8005362:	e048      	b.n	80053f6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	015a      	lsls	r2, r3, #5
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	4413      	add	r3, r2
 800536e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005378:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800537c:	d13b      	bne.n	80053f6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	015a      	lsls	r2, r3, #5
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	4413      	add	r3, r2
 8005388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	7812      	ldrb	r2, [r2, #0]
 8005392:	0151      	lsls	r1, r2, #5
 8005394:	693a      	ldr	r2, [r7, #16]
 8005396:	440a      	add	r2, r1
 8005398:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800539c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80053a0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	015a      	lsls	r2, r3, #5
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	4413      	add	r3, r2
 80053ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	7812      	ldrb	r2, [r2, #0]
 80053b6:	0151      	lsls	r1, r2, #5
 80053b8:	693a      	ldr	r2, [r7, #16]
 80053ba:	440a      	add	r2, r1
 80053bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	3301      	adds	r3, #1
 80053ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f242 7210 	movw	r2, #10000	; 0x2710
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d902      	bls.n	80053dc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	75fb      	strb	r3, [r7, #23]
          break;
 80053da:	e00c      	b.n	80053f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	015a      	lsls	r2, r3, #5
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	4413      	add	r3, r2
 80053e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053f4:	d0e7      	beq.n	80053c6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80053f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	371c      	adds	r7, #28
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005404:	b480      	push	{r7}
 8005406:	b089      	sub	sp, #36	; 0x24
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	4611      	mov	r1, r2
 8005410:	461a      	mov	r2, r3
 8005412:	460b      	mov	r3, r1
 8005414:	71fb      	strb	r3, [r7, #7]
 8005416:	4613      	mov	r3, r2
 8005418:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005422:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005426:	2b00      	cmp	r3, #0
 8005428:	d123      	bne.n	8005472 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800542a:	88bb      	ldrh	r3, [r7, #4]
 800542c:	3303      	adds	r3, #3
 800542e:	089b      	lsrs	r3, r3, #2
 8005430:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005432:	2300      	movs	r3, #0
 8005434:	61bb      	str	r3, [r7, #24]
 8005436:	e018      	b.n	800546a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005438:	79fb      	ldrb	r3, [r7, #7]
 800543a:	031a      	lsls	r2, r3, #12
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	4413      	add	r3, r2
 8005440:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005444:	461a      	mov	r2, r3
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	3301      	adds	r3, #1
 8005450:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	3301      	adds	r3, #1
 8005456:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	3301      	adds	r3, #1
 800545c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	3301      	adds	r3, #1
 8005462:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	3301      	adds	r3, #1
 8005468:	61bb      	str	r3, [r7, #24]
 800546a:	69ba      	ldr	r2, [r7, #24]
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	429a      	cmp	r2, r3
 8005470:	d3e2      	bcc.n	8005438 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	3724      	adds	r7, #36	; 0x24
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005480:	b480      	push	{r7}
 8005482:	b08b      	sub	sp, #44	; 0x2c
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	4613      	mov	r3, r2
 800548c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005496:	88fb      	ldrh	r3, [r7, #6]
 8005498:	089b      	lsrs	r3, r3, #2
 800549a:	b29b      	uxth	r3, r3
 800549c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800549e:	88fb      	ldrh	r3, [r7, #6]
 80054a0:	f003 0303 	and.w	r3, r3, #3
 80054a4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80054a6:	2300      	movs	r3, #0
 80054a8:	623b      	str	r3, [r7, #32]
 80054aa:	e014      	b.n	80054d6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b6:	601a      	str	r2, [r3, #0]
    pDest++;
 80054b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ba:	3301      	adds	r3, #1
 80054bc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80054be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c0:	3301      	adds	r3, #1
 80054c2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80054c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c6:	3301      	adds	r3, #1
 80054c8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80054ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054cc:	3301      	adds	r3, #1
 80054ce:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80054d0:	6a3b      	ldr	r3, [r7, #32]
 80054d2:	3301      	adds	r3, #1
 80054d4:	623b      	str	r3, [r7, #32]
 80054d6:	6a3a      	ldr	r2, [r7, #32]
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d3e6      	bcc.n	80054ac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80054de:	8bfb      	ldrh	r3, [r7, #30]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d01e      	beq.n	8005522 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80054e4:	2300      	movs	r3, #0
 80054e6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054ee:	461a      	mov	r2, r3
 80054f0:	f107 0310 	add.w	r3, r7, #16
 80054f4:	6812      	ldr	r2, [r2, #0]
 80054f6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80054f8:	693a      	ldr	r2, [r7, #16]
 80054fa:	6a3b      	ldr	r3, [r7, #32]
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	00db      	lsls	r3, r3, #3
 8005500:	fa22 f303 	lsr.w	r3, r2, r3
 8005504:	b2da      	uxtb	r2, r3
 8005506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005508:	701a      	strb	r2, [r3, #0]
      i++;
 800550a:	6a3b      	ldr	r3, [r7, #32]
 800550c:	3301      	adds	r3, #1
 800550e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005512:	3301      	adds	r3, #1
 8005514:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005516:	8bfb      	ldrh	r3, [r7, #30]
 8005518:	3b01      	subs	r3, #1
 800551a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800551c:	8bfb      	ldrh	r3, [r7, #30]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1ea      	bne.n	80054f8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005524:	4618      	mov	r0, r3
 8005526:	372c      	adds	r7, #44	; 0x2c
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	785b      	ldrb	r3, [r3, #1]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d12c      	bne.n	80055a6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	015a      	lsls	r2, r3, #5
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	4413      	add	r3, r2
 8005554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	db12      	blt.n	8005584 <USB_EPSetStall+0x54>
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00f      	beq.n	8005584 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	015a      	lsls	r2, r3, #5
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4413      	add	r3, r2
 800556c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68ba      	ldr	r2, [r7, #8]
 8005574:	0151      	lsls	r1, r2, #5
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	440a      	add	r2, r1
 800557a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800557e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005582:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	015a      	lsls	r2, r3, #5
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	4413      	add	r3, r2
 800558c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	0151      	lsls	r1, r2, #5
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	440a      	add	r2, r1
 800559a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800559e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80055a2:	6013      	str	r3, [r2, #0]
 80055a4:	e02b      	b.n	80055fe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	015a      	lsls	r2, r3, #5
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	db12      	blt.n	80055de <USB_EPSetStall+0xae>
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00f      	beq.n	80055de <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	015a      	lsls	r2, r3, #5
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	4413      	add	r3, r2
 80055c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68ba      	ldr	r2, [r7, #8]
 80055ce:	0151      	lsls	r1, r2, #5
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	440a      	add	r2, r1
 80055d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80055dc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	015a      	lsls	r2, r3, #5
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	4413      	add	r3, r2
 80055e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	0151      	lsls	r1, r2, #5
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	440a      	add	r2, r1
 80055f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80055fc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3714      	adds	r7, #20
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	785b      	ldrb	r3, [r3, #1]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d128      	bne.n	800567a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	015a      	lsls	r2, r3, #5
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	4413      	add	r3, r2
 8005630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68ba      	ldr	r2, [r7, #8]
 8005638:	0151      	lsls	r1, r2, #5
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	440a      	add	r2, r1
 800563e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005642:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005646:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	791b      	ldrb	r3, [r3, #4]
 800564c:	2b03      	cmp	r3, #3
 800564e:	d003      	beq.n	8005658 <USB_EPClearStall+0x4c>
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	791b      	ldrb	r3, [r3, #4]
 8005654:	2b02      	cmp	r3, #2
 8005656:	d138      	bne.n	80056ca <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	015a      	lsls	r2, r3, #5
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	4413      	add	r3, r2
 8005660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68ba      	ldr	r2, [r7, #8]
 8005668:	0151      	lsls	r1, r2, #5
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	440a      	add	r2, r1
 800566e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005676:	6013      	str	r3, [r2, #0]
 8005678:	e027      	b.n	80056ca <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	015a      	lsls	r2, r3, #5
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	4413      	add	r3, r2
 8005682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68ba      	ldr	r2, [r7, #8]
 800568a:	0151      	lsls	r1, r2, #5
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	440a      	add	r2, r1
 8005690:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005694:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005698:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	791b      	ldrb	r3, [r3, #4]
 800569e:	2b03      	cmp	r3, #3
 80056a0:	d003      	beq.n	80056aa <USB_EPClearStall+0x9e>
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	791b      	ldrb	r3, [r3, #4]
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d10f      	bne.n	80056ca <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	015a      	lsls	r2, r3, #5
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	4413      	add	r3, r2
 80056b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68ba      	ldr	r2, [r7, #8]
 80056ba:	0151      	lsls	r1, r2, #5
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	440a      	add	r2, r1
 80056c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056c8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3714      	adds	r7, #20
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	460b      	mov	r3, r1
 80056e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056f6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80056fa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	78fb      	ldrb	r3, [r7, #3]
 8005706:	011b      	lsls	r3, r3, #4
 8005708:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800570c:	68f9      	ldr	r1, [r7, #12]
 800570e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005712:	4313      	orrs	r3, r2
 8005714:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	3714      	adds	r7, #20
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800573e:	f023 0303 	bic.w	r3, r3, #3
 8005742:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005752:	f023 0302 	bic.w	r3, r3, #2
 8005756:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr

08005766 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005766:	b480      	push	{r7}
 8005768:	b085      	sub	sp, #20
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005780:	f023 0303 	bic.w	r3, r3, #3
 8005784:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005794:	f043 0302 	orr.w	r3, r3, #2
 8005798:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3714      	adds	r7, #20
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	699b      	ldr	r3, [r3, #24]
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	4013      	ands	r3, r2
 80057be:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80057c0:	68fb      	ldr	r3, [r7, #12]
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3714      	adds	r7, #20
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr

080057ce <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80057ce:	b480      	push	{r7}
 80057d0:	b085      	sub	sp, #20
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ea:	69db      	ldr	r3, [r3, #28]
 80057ec:	68ba      	ldr	r2, [r7, #8]
 80057ee:	4013      	ands	r3, r2
 80057f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	0c1b      	lsrs	r3, r3, #16
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3714      	adds	r7, #20
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr

08005802 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005802:	b480      	push	{r7}
 8005804:	b085      	sub	sp, #20
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800581e:	69db      	ldr	r3, [r3, #28]
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	4013      	ands	r3, r2
 8005824:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	b29b      	uxth	r3, r3
}
 800582a:	4618      	mov	r0, r3
 800582c:	3714      	adds	r7, #20
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr

08005836 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005836:	b480      	push	{r7}
 8005838:	b085      	sub	sp, #20
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
 800583e:	460b      	mov	r3, r1
 8005840:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005846:	78fb      	ldrb	r3, [r7, #3]
 8005848:	015a      	lsls	r2, r3, #5
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	4413      	add	r3, r2
 800584e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	68ba      	ldr	r2, [r7, #8]
 8005860:	4013      	ands	r3, r2
 8005862:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005864:	68bb      	ldr	r3, [r7, #8]
}
 8005866:	4618      	mov	r0, r3
 8005868:	3714      	adds	r7, #20
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr

08005872 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005872:	b480      	push	{r7}
 8005874:	b087      	sub	sp, #28
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
 800587a:	460b      	mov	r3, r1
 800587c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005894:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005896:	78fb      	ldrb	r3, [r7, #3]
 8005898:	f003 030f 	and.w	r3, r3, #15
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	fa22 f303 	lsr.w	r3, r2, r3
 80058a2:	01db      	lsls	r3, r3, #7
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	693a      	ldr	r2, [r7, #16]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80058ac:	78fb      	ldrb	r3, [r7, #3]
 80058ae:	015a      	lsls	r2, r3, #5
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	4413      	add	r3, r2
 80058b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	693a      	ldr	r2, [r7, #16]
 80058bc:	4013      	ands	r3, r2
 80058be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80058c0:	68bb      	ldr	r3, [r7, #8]
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	371c      	adds	r7, #28
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr

080058ce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80058ce:	b480      	push	{r7}
 80058d0:	b083      	sub	sp, #12
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	f003 0301 	and.w	r3, r3, #1
}
 80058de:	4618      	mov	r0, r3
 80058e0:	370c      	adds	r7, #12
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr

080058ea <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80058ea:	b480      	push	{r7}
 80058ec:	b085      	sub	sp, #20
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005904:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005908:	f023 0307 	bic.w	r3, r3, #7
 800590c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800591c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005920:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3714      	adds	r7, #20
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005930:	b480      	push	{r7}
 8005932:	b087      	sub	sp, #28
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	460b      	mov	r3, r1
 800593a:	607a      	str	r2, [r7, #4]
 800593c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	333c      	adds	r3, #60	; 0x3c
 8005946:	3304      	adds	r3, #4
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	4a26      	ldr	r2, [pc, #152]	; (80059e8 <USB_EP0_OutStart+0xb8>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d90a      	bls.n	800596a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005960:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005964:	d101      	bne.n	800596a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005966:	2300      	movs	r3, #0
 8005968:	e037      	b.n	80059da <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005970:	461a      	mov	r2, r3
 8005972:	2300      	movs	r3, #0
 8005974:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	697a      	ldr	r2, [r7, #20]
 8005980:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005984:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005988:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	697a      	ldr	r2, [r7, #20]
 8005994:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005998:	f043 0318 	orr.w	r3, r3, #24
 800599c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059ac:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80059b0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80059b2:	7afb      	ldrb	r3, [r7, #11]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d10f      	bne.n	80059d8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059be:	461a      	mov	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	697a      	ldr	r2, [r7, #20]
 80059ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059d2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80059d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	371c      	adds	r7, #28
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr
 80059e6:	bf00      	nop
 80059e8:	4f54300a 	.word	0x4f54300a

080059ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b085      	sub	sp, #20
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059f4:	2300      	movs	r3, #0
 80059f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	3301      	adds	r3, #1
 80059fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	4a13      	ldr	r2, [pc, #76]	; (8005a50 <USB_CoreReset+0x64>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d901      	bls.n	8005a0a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e01b      	b.n	8005a42 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	daf2      	bge.n	80059f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005a12:	2300      	movs	r3, #0
 8005a14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	f043 0201 	orr.w	r2, r3, #1
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	3301      	adds	r3, #1
 8005a26:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	4a09      	ldr	r2, [pc, #36]	; (8005a50 <USB_CoreReset+0x64>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d901      	bls.n	8005a34 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e006      	b.n	8005a42 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	f003 0301 	and.w	r3, r3, #1
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d0f0      	beq.n	8005a22 <USB_CoreReset+0x36>

  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3714      	adds	r7, #20
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	00030d40 	.word	0x00030d40

08005a54 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005a60:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005a64:	f002 fc68 	bl	8008338 <USBD_static_malloc>
 8005a68:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d109      	bne.n	8005a84 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	32b0      	adds	r2, #176	; 0xb0
 8005a7a:	2100      	movs	r1, #0
 8005a7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005a80:	2302      	movs	r3, #2
 8005a82:	e0d4      	b.n	8005c2e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005a84:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005a88:	2100      	movs	r1, #0
 8005a8a:	68f8      	ldr	r0, [r7, #12]
 8005a8c:	f002 fcbc 	bl	8008408 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	32b0      	adds	r2, #176	; 0xb0
 8005a9a:	68f9      	ldr	r1, [r7, #12]
 8005a9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	32b0      	adds	r2, #176	; 0xb0
 8005aaa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	7c1b      	ldrb	r3, [r3, #16]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d138      	bne.n	8005b2e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005abc:	4b5e      	ldr	r3, [pc, #376]	; (8005c38 <USBD_CDC_Init+0x1e4>)
 8005abe:	7819      	ldrb	r1, [r3, #0]
 8005ac0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ac4:	2202      	movs	r2, #2
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f002 fb13 	bl	80080f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005acc:	4b5a      	ldr	r3, [pc, #360]	; (8005c38 <USBD_CDC_Init+0x1e4>)
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	f003 020f 	and.w	r2, r3, #15
 8005ad4:	6879      	ldr	r1, [r7, #4]
 8005ad6:	4613      	mov	r3, r2
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	4413      	add	r3, r2
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	440b      	add	r3, r1
 8005ae0:	3324      	adds	r3, #36	; 0x24
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005ae6:	4b55      	ldr	r3, [pc, #340]	; (8005c3c <USBD_CDC_Init+0x1e8>)
 8005ae8:	7819      	ldrb	r1, [r3, #0]
 8005aea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005aee:	2202      	movs	r2, #2
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f002 fafe 	bl	80080f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005af6:	4b51      	ldr	r3, [pc, #324]	; (8005c3c <USBD_CDC_Init+0x1e8>)
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	f003 020f 	and.w	r2, r3, #15
 8005afe:	6879      	ldr	r1, [r7, #4]
 8005b00:	4613      	mov	r3, r2
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	4413      	add	r3, r2
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	440b      	add	r3, r1
 8005b0a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005b0e:	2201      	movs	r2, #1
 8005b10:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005b12:	4b4b      	ldr	r3, [pc, #300]	; (8005c40 <USBD_CDC_Init+0x1ec>)
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	f003 020f 	and.w	r2, r3, #15
 8005b1a:	6879      	ldr	r1, [r7, #4]
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	4413      	add	r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	440b      	add	r3, r1
 8005b26:	3326      	adds	r3, #38	; 0x26
 8005b28:	2210      	movs	r2, #16
 8005b2a:	801a      	strh	r2, [r3, #0]
 8005b2c:	e035      	b.n	8005b9a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005b2e:	4b42      	ldr	r3, [pc, #264]	; (8005c38 <USBD_CDC_Init+0x1e4>)
 8005b30:	7819      	ldrb	r1, [r3, #0]
 8005b32:	2340      	movs	r3, #64	; 0x40
 8005b34:	2202      	movs	r2, #2
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f002 fadb 	bl	80080f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005b3c:	4b3e      	ldr	r3, [pc, #248]	; (8005c38 <USBD_CDC_Init+0x1e4>)
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	f003 020f 	and.w	r2, r3, #15
 8005b44:	6879      	ldr	r1, [r7, #4]
 8005b46:	4613      	mov	r3, r2
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	4413      	add	r3, r2
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	440b      	add	r3, r1
 8005b50:	3324      	adds	r3, #36	; 0x24
 8005b52:	2201      	movs	r2, #1
 8005b54:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005b56:	4b39      	ldr	r3, [pc, #228]	; (8005c3c <USBD_CDC_Init+0x1e8>)
 8005b58:	7819      	ldrb	r1, [r3, #0]
 8005b5a:	2340      	movs	r3, #64	; 0x40
 8005b5c:	2202      	movs	r2, #2
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f002 fac7 	bl	80080f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005b64:	4b35      	ldr	r3, [pc, #212]	; (8005c3c <USBD_CDC_Init+0x1e8>)
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	f003 020f 	and.w	r2, r3, #15
 8005b6c:	6879      	ldr	r1, [r7, #4]
 8005b6e:	4613      	mov	r3, r2
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	4413      	add	r3, r2
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	440b      	add	r3, r1
 8005b78:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005b80:	4b2f      	ldr	r3, [pc, #188]	; (8005c40 <USBD_CDC_Init+0x1ec>)
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	f003 020f 	and.w	r2, r3, #15
 8005b88:	6879      	ldr	r1, [r7, #4]
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	4413      	add	r3, r2
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	440b      	add	r3, r1
 8005b94:	3326      	adds	r3, #38	; 0x26
 8005b96:	2210      	movs	r2, #16
 8005b98:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005b9a:	4b29      	ldr	r3, [pc, #164]	; (8005c40 <USBD_CDC_Init+0x1ec>)
 8005b9c:	7819      	ldrb	r1, [r3, #0]
 8005b9e:	2308      	movs	r3, #8
 8005ba0:	2203      	movs	r2, #3
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f002 faa5 	bl	80080f2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005ba8:	4b25      	ldr	r3, [pc, #148]	; (8005c40 <USBD_CDC_Init+0x1ec>)
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	f003 020f 	and.w	r2, r3, #15
 8005bb0:	6879      	ldr	r1, [r7, #4]
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	4413      	add	r3, r2
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	440b      	add	r3, r1
 8005bbc:	3324      	adds	r3, #36	; 0x24
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	33b0      	adds	r3, #176	; 0xb0
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	4413      	add	r3, r2
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d101      	bne.n	8005bfc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	e018      	b.n	8005c2e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	7c1b      	ldrb	r3, [r3, #16]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d10a      	bne.n	8005c1a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005c04:	4b0d      	ldr	r3, [pc, #52]	; (8005c3c <USBD_CDC_Init+0x1e8>)
 8005c06:	7819      	ldrb	r1, [r3, #0]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f002 fb5c 	bl	80082d0 <USBD_LL_PrepareReceive>
 8005c18:	e008      	b.n	8005c2c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005c1a:	4b08      	ldr	r3, [pc, #32]	; (8005c3c <USBD_CDC_Init+0x1e8>)
 8005c1c:	7819      	ldrb	r1, [r3, #0]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c24:	2340      	movs	r3, #64	; 0x40
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f002 fb52 	bl	80082d0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	20000093 	.word	0x20000093
 8005c3c:	20000094 	.word	0x20000094
 8005c40:	20000095 	.word	0x20000095

08005c44 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b082      	sub	sp, #8
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005c50:	4b3a      	ldr	r3, [pc, #232]	; (8005d3c <USBD_CDC_DeInit+0xf8>)
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	4619      	mov	r1, r3
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f002 fa71 	bl	800813e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005c5c:	4b37      	ldr	r3, [pc, #220]	; (8005d3c <USBD_CDC_DeInit+0xf8>)
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	f003 020f 	and.w	r2, r3, #15
 8005c64:	6879      	ldr	r1, [r7, #4]
 8005c66:	4613      	mov	r3, r2
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	4413      	add	r3, r2
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	440b      	add	r3, r1
 8005c70:	3324      	adds	r3, #36	; 0x24
 8005c72:	2200      	movs	r2, #0
 8005c74:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005c76:	4b32      	ldr	r3, [pc, #200]	; (8005d40 <USBD_CDC_DeInit+0xfc>)
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f002 fa5e 	bl	800813e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005c82:	4b2f      	ldr	r3, [pc, #188]	; (8005d40 <USBD_CDC_DeInit+0xfc>)
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	f003 020f 	and.w	r2, r3, #15
 8005c8a:	6879      	ldr	r1, [r7, #4]
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	4413      	add	r3, r2
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	440b      	add	r3, r1
 8005c96:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005c9e:	4b29      	ldr	r3, [pc, #164]	; (8005d44 <USBD_CDC_DeInit+0x100>)
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f002 fa4a 	bl	800813e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005caa:	4b26      	ldr	r3, [pc, #152]	; (8005d44 <USBD_CDC_DeInit+0x100>)
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	f003 020f 	and.w	r2, r3, #15
 8005cb2:	6879      	ldr	r1, [r7, #4]
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	4413      	add	r3, r2
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	440b      	add	r3, r1
 8005cbe:	3324      	adds	r3, #36	; 0x24
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005cc4:	4b1f      	ldr	r3, [pc, #124]	; (8005d44 <USBD_CDC_DeInit+0x100>)
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	f003 020f 	and.w	r2, r3, #15
 8005ccc:	6879      	ldr	r1, [r7, #4]
 8005cce:	4613      	mov	r3, r2
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	4413      	add	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	440b      	add	r3, r1
 8005cd8:	3326      	adds	r3, #38	; 0x26
 8005cda:	2200      	movs	r2, #0
 8005cdc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	32b0      	adds	r2, #176	; 0xb0
 8005ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d01f      	beq.n	8005d30 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	33b0      	adds	r3, #176	; 0xb0
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	4413      	add	r3, r2
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	32b0      	adds	r2, #176	; 0xb0
 8005d0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d12:	4618      	mov	r0, r3
 8005d14:	f002 fb1e 	bl	8008354 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	32b0      	adds	r2, #176	; 0xb0
 8005d22:	2100      	movs	r1, #0
 8005d24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3708      	adds	r7, #8
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	20000093 	.word	0x20000093
 8005d40:	20000094 	.word	0x20000094
 8005d44:	20000095 	.word	0x20000095

08005d48 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b086      	sub	sp, #24
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	32b0      	adds	r2, #176	; 0xb0
 8005d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d60:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005d62:	2300      	movs	r3, #0
 8005d64:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005d66:	2300      	movs	r3, #0
 8005d68:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d101      	bne.n	8005d78 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005d74:	2303      	movs	r3, #3
 8005d76:	e0bf      	b.n	8005ef8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d050      	beq.n	8005e26 <USBD_CDC_Setup+0xde>
 8005d84:	2b20      	cmp	r3, #32
 8005d86:	f040 80af 	bne.w	8005ee8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	88db      	ldrh	r3, [r3, #6]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d03a      	beq.n	8005e08 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	b25b      	sxtb	r3, r3
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	da1b      	bge.n	8005dd4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	33b0      	adds	r3, #176	; 0xb0
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	4413      	add	r3, r2
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	683a      	ldr	r2, [r7, #0]
 8005db0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005db2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005db4:	683a      	ldr	r2, [r7, #0]
 8005db6:	88d2      	ldrh	r2, [r2, #6]
 8005db8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	88db      	ldrh	r3, [r3, #6]
 8005dbe:	2b07      	cmp	r3, #7
 8005dc0:	bf28      	it	cs
 8005dc2:	2307      	movcs	r3, #7
 8005dc4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	89fa      	ldrh	r2, [r7, #14]
 8005dca:	4619      	mov	r1, r3
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f001 fd43 	bl	8007858 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005dd2:	e090      	b.n	8005ef6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	785a      	ldrb	r2, [r3, #1]
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	88db      	ldrh	r3, [r3, #6]
 8005de2:	2b3f      	cmp	r3, #63	; 0x3f
 8005de4:	d803      	bhi.n	8005dee <USBD_CDC_Setup+0xa6>
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	88db      	ldrh	r3, [r3, #6]
 8005dea:	b2da      	uxtb	r2, r3
 8005dec:	e000      	b.n	8005df0 <USBD_CDC_Setup+0xa8>
 8005dee:	2240      	movs	r2, #64	; 0x40
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005df6:	6939      	ldr	r1, [r7, #16]
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005dfe:	461a      	mov	r2, r3
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f001 fd55 	bl	80078b0 <USBD_CtlPrepareRx>
      break;
 8005e06:	e076      	b.n	8005ef6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	33b0      	adds	r3, #176	; 0xb0
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	4413      	add	r3, r2
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	683a      	ldr	r2, [r7, #0]
 8005e1c:	7850      	ldrb	r0, [r2, #1]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	6839      	ldr	r1, [r7, #0]
 8005e22:	4798      	blx	r3
      break;
 8005e24:	e067      	b.n	8005ef6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	785b      	ldrb	r3, [r3, #1]
 8005e2a:	2b0b      	cmp	r3, #11
 8005e2c:	d851      	bhi.n	8005ed2 <USBD_CDC_Setup+0x18a>
 8005e2e:	a201      	add	r2, pc, #4	; (adr r2, 8005e34 <USBD_CDC_Setup+0xec>)
 8005e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e34:	08005e65 	.word	0x08005e65
 8005e38:	08005ee1 	.word	0x08005ee1
 8005e3c:	08005ed3 	.word	0x08005ed3
 8005e40:	08005ed3 	.word	0x08005ed3
 8005e44:	08005ed3 	.word	0x08005ed3
 8005e48:	08005ed3 	.word	0x08005ed3
 8005e4c:	08005ed3 	.word	0x08005ed3
 8005e50:	08005ed3 	.word	0x08005ed3
 8005e54:	08005ed3 	.word	0x08005ed3
 8005e58:	08005ed3 	.word	0x08005ed3
 8005e5c:	08005e8f 	.word	0x08005e8f
 8005e60:	08005eb9 	.word	0x08005eb9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	2b03      	cmp	r3, #3
 8005e6e:	d107      	bne.n	8005e80 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005e70:	f107 030a 	add.w	r3, r7, #10
 8005e74:	2202      	movs	r2, #2
 8005e76:	4619      	mov	r1, r3
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f001 fced 	bl	8007858 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005e7e:	e032      	b.n	8005ee6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005e80:	6839      	ldr	r1, [r7, #0]
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f001 fc77 	bl	8007776 <USBD_CtlError>
            ret = USBD_FAIL;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	75fb      	strb	r3, [r7, #23]
          break;
 8005e8c:	e02b      	b.n	8005ee6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	2b03      	cmp	r3, #3
 8005e98:	d107      	bne.n	8005eaa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005e9a:	f107 030d 	add.w	r3, r7, #13
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f001 fcd8 	bl	8007858 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005ea8:	e01d      	b.n	8005ee6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005eaa:	6839      	ldr	r1, [r7, #0]
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f001 fc62 	bl	8007776 <USBD_CtlError>
            ret = USBD_FAIL;
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	75fb      	strb	r3, [r7, #23]
          break;
 8005eb6:	e016      	b.n	8005ee6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	2b03      	cmp	r3, #3
 8005ec2:	d00f      	beq.n	8005ee4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005ec4:	6839      	ldr	r1, [r7, #0]
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f001 fc55 	bl	8007776 <USBD_CtlError>
            ret = USBD_FAIL;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005ed0:	e008      	b.n	8005ee4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005ed2:	6839      	ldr	r1, [r7, #0]
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f001 fc4e 	bl	8007776 <USBD_CtlError>
          ret = USBD_FAIL;
 8005eda:	2303      	movs	r3, #3
 8005edc:	75fb      	strb	r3, [r7, #23]
          break;
 8005ede:	e002      	b.n	8005ee6 <USBD_CDC_Setup+0x19e>
          break;
 8005ee0:	bf00      	nop
 8005ee2:	e008      	b.n	8005ef6 <USBD_CDC_Setup+0x1ae>
          break;
 8005ee4:	bf00      	nop
      }
      break;
 8005ee6:	e006      	b.n	8005ef6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005ee8:	6839      	ldr	r1, [r7, #0]
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f001 fc43 	bl	8007776 <USBD_CtlError>
      ret = USBD_FAIL;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	75fb      	strb	r3, [r7, #23]
      break;
 8005ef4:	bf00      	nop
  }

  return (uint8_t)ret;
 8005ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3718      	adds	r7, #24
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	460b      	mov	r3, r1
 8005f0a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005f12:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	32b0      	adds	r2, #176	; 0xb0
 8005f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d101      	bne.n	8005f2a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e065      	b.n	8005ff6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	32b0      	adds	r2, #176	; 0xb0
 8005f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f38:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005f3a:	78fb      	ldrb	r3, [r7, #3]
 8005f3c:	f003 020f 	and.w	r2, r3, #15
 8005f40:	6879      	ldr	r1, [r7, #4]
 8005f42:	4613      	mov	r3, r2
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	4413      	add	r3, r2
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	440b      	add	r3, r1
 8005f4c:	3318      	adds	r3, #24
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d02f      	beq.n	8005fb4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005f54:	78fb      	ldrb	r3, [r7, #3]
 8005f56:	f003 020f 	and.w	r2, r3, #15
 8005f5a:	6879      	ldr	r1, [r7, #4]
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	4413      	add	r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	440b      	add	r3, r1
 8005f66:	3318      	adds	r3, #24
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	78fb      	ldrb	r3, [r7, #3]
 8005f6c:	f003 010f 	and.w	r1, r3, #15
 8005f70:	68f8      	ldr	r0, [r7, #12]
 8005f72:	460b      	mov	r3, r1
 8005f74:	00db      	lsls	r3, r3, #3
 8005f76:	440b      	add	r3, r1
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	4403      	add	r3, r0
 8005f7c:	3348      	adds	r3, #72	; 0x48
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	fbb2 f1f3 	udiv	r1, r2, r3
 8005f84:	fb01 f303 	mul.w	r3, r1, r3
 8005f88:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d112      	bne.n	8005fb4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005f8e:	78fb      	ldrb	r3, [r7, #3]
 8005f90:	f003 020f 	and.w	r2, r3, #15
 8005f94:	6879      	ldr	r1, [r7, #4]
 8005f96:	4613      	mov	r3, r2
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	4413      	add	r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	440b      	add	r3, r1
 8005fa0:	3318      	adds	r3, #24
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005fa6:	78f9      	ldrb	r1, [r7, #3]
 8005fa8:	2300      	movs	r3, #0
 8005faa:	2200      	movs	r2, #0
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f002 f96e 	bl	800828e <USBD_LL_Transmit>
 8005fb2:	e01f      	b.n	8005ff4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	33b0      	adds	r3, #176	; 0xb0
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	4413      	add	r3, r2
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d010      	beq.n	8005ff4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	33b0      	adds	r3, #176	; 0xb0
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	4413      	add	r3, r2
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	68ba      	ldr	r2, [r7, #8]
 8005fe6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005fea:	68ba      	ldr	r2, [r7, #8]
 8005fec:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005ff0:	78fa      	ldrb	r2, [r7, #3]
 8005ff2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b084      	sub	sp, #16
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
 8006006:	460b      	mov	r3, r1
 8006008:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	32b0      	adds	r2, #176	; 0xb0
 8006014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006018:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	32b0      	adds	r2, #176	; 0xb0
 8006024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d101      	bne.n	8006030 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800602c:	2303      	movs	r3, #3
 800602e:	e01a      	b.n	8006066 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006030:	78fb      	ldrb	r3, [r7, #3]
 8006032:	4619      	mov	r1, r3
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f002 f96c 	bl	8008312 <USBD_LL_GetRxDataSize>
 800603a:	4602      	mov	r2, r0
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	33b0      	adds	r3, #176	; 0xb0
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	4413      	add	r3, r2
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006060:	4611      	mov	r1, r2
 8006062:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3710      	adds	r7, #16
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}

0800606e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800606e:	b580      	push	{r7, lr}
 8006070:	b084      	sub	sp, #16
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	32b0      	adds	r2, #176	; 0xb0
 8006080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006084:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d101      	bne.n	8006090 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800608c:	2303      	movs	r3, #3
 800608e:	e025      	b.n	80060dc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	33b0      	adds	r3, #176	; 0xb0
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	4413      	add	r3, r2
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d01a      	beq.n	80060da <USBD_CDC_EP0_RxReady+0x6c>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80060aa:	2bff      	cmp	r3, #255	; 0xff
 80060ac:	d015      	beq.n	80060da <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	33b0      	adds	r3, #176	; 0xb0
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	4413      	add	r3, r2
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80060c6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80060ce:	b292      	uxth	r2, r2
 80060d0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	22ff      	movs	r2, #255	; 0xff
 80060d6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3710      	adds	r7, #16
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b086      	sub	sp, #24
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80060ec:	2182      	movs	r1, #130	; 0x82
 80060ee:	4818      	ldr	r0, [pc, #96]	; (8006150 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80060f0:	f000 fd09 	bl	8006b06 <USBD_GetEpDesc>
 80060f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80060f6:	2101      	movs	r1, #1
 80060f8:	4815      	ldr	r0, [pc, #84]	; (8006150 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80060fa:	f000 fd04 	bl	8006b06 <USBD_GetEpDesc>
 80060fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006100:	2181      	movs	r1, #129	; 0x81
 8006102:	4813      	ldr	r0, [pc, #76]	; (8006150 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006104:	f000 fcff 	bl	8006b06 <USBD_GetEpDesc>
 8006108:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d002      	beq.n	8006116 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	2210      	movs	r2, #16
 8006114:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d006      	beq.n	800612a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	2200      	movs	r2, #0
 8006120:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006124:	711a      	strb	r2, [r3, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d006      	beq.n	800613e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2200      	movs	r2, #0
 8006134:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006138:	711a      	strb	r2, [r3, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2243      	movs	r2, #67	; 0x43
 8006142:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006144:	4b02      	ldr	r3, [pc, #8]	; (8006150 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006146:	4618      	mov	r0, r3
 8006148:	3718      	adds	r7, #24
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	20000050 	.word	0x20000050

08006154 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b086      	sub	sp, #24
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800615c:	2182      	movs	r1, #130	; 0x82
 800615e:	4818      	ldr	r0, [pc, #96]	; (80061c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006160:	f000 fcd1 	bl	8006b06 <USBD_GetEpDesc>
 8006164:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006166:	2101      	movs	r1, #1
 8006168:	4815      	ldr	r0, [pc, #84]	; (80061c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800616a:	f000 fccc 	bl	8006b06 <USBD_GetEpDesc>
 800616e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006170:	2181      	movs	r1, #129	; 0x81
 8006172:	4813      	ldr	r0, [pc, #76]	; (80061c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006174:	f000 fcc7 	bl	8006b06 <USBD_GetEpDesc>
 8006178:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d002      	beq.n	8006186 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	2210      	movs	r2, #16
 8006184:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d006      	beq.n	800619a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	2200      	movs	r2, #0
 8006190:	711a      	strb	r2, [r3, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	f042 0202 	orr.w	r2, r2, #2
 8006198:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d006      	beq.n	80061ae <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2200      	movs	r2, #0
 80061a4:	711a      	strb	r2, [r3, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	f042 0202 	orr.w	r2, r2, #2
 80061ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2243      	movs	r2, #67	; 0x43
 80061b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80061b4:	4b02      	ldr	r3, [pc, #8]	; (80061c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3718      	adds	r7, #24
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	20000050 	.word	0x20000050

080061c4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b086      	sub	sp, #24
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80061cc:	2182      	movs	r1, #130	; 0x82
 80061ce:	4818      	ldr	r0, [pc, #96]	; (8006230 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80061d0:	f000 fc99 	bl	8006b06 <USBD_GetEpDesc>
 80061d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80061d6:	2101      	movs	r1, #1
 80061d8:	4815      	ldr	r0, [pc, #84]	; (8006230 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80061da:	f000 fc94 	bl	8006b06 <USBD_GetEpDesc>
 80061de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80061e0:	2181      	movs	r1, #129	; 0x81
 80061e2:	4813      	ldr	r0, [pc, #76]	; (8006230 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80061e4:	f000 fc8f 	bl	8006b06 <USBD_GetEpDesc>
 80061e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d002      	beq.n	80061f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	2210      	movs	r2, #16
 80061f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d006      	beq.n	800620a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	2200      	movs	r2, #0
 8006200:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006204:	711a      	strb	r2, [r3, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d006      	beq.n	800621e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2200      	movs	r2, #0
 8006214:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006218:	711a      	strb	r2, [r3, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2243      	movs	r2, #67	; 0x43
 8006222:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006224:	4b02      	ldr	r3, [pc, #8]	; (8006230 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006226:	4618      	mov	r0, r3
 8006228:	3718      	adds	r7, #24
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	20000050 	.word	0x20000050

08006234 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	220a      	movs	r2, #10
 8006240:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006242:	4b03      	ldr	r3, [pc, #12]	; (8006250 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006244:	4618      	mov	r0, r3
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr
 8006250:	2000000c 	.word	0x2000000c

08006254 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d101      	bne.n	8006268 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006264:	2303      	movs	r3, #3
 8006266:	e009      	b.n	800627c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	33b0      	adds	r3, #176	; 0xb0
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	4413      	add	r3, r2
 8006276:	683a      	ldr	r2, [r7, #0]
 8006278:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006288:	b480      	push	{r7}
 800628a:	b087      	sub	sp, #28
 800628c:	af00      	add	r7, sp, #0
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	32b0      	adds	r2, #176	; 0xb0
 800629e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062a2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d101      	bne.n	80062ae <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e008      	b.n	80062c0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	68ba      	ldr	r2, [r7, #8]
 80062b2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	371c      	adds	r7, #28
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b085      	sub	sp, #20
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	32b0      	adds	r2, #176	; 0xb0
 80062e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062e4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d101      	bne.n	80062f0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80062ec:	2303      	movs	r3, #3
 80062ee:	e004      	b.n	80062fa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	683a      	ldr	r2, [r7, #0]
 80062f4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3714      	adds	r7, #20
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
	...

08006308 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	32b0      	adds	r2, #176	; 0xb0
 800631a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800631e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	32b0      	adds	r2, #176	; 0xb0
 800632a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d101      	bne.n	8006336 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006332:	2303      	movs	r3, #3
 8006334:	e018      	b.n	8006368 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	7c1b      	ldrb	r3, [r3, #16]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d10a      	bne.n	8006354 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800633e:	4b0c      	ldr	r3, [pc, #48]	; (8006370 <USBD_CDC_ReceivePacket+0x68>)
 8006340:	7819      	ldrb	r1, [r3, #0]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006348:	f44f 7300 	mov.w	r3, #512	; 0x200
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f001 ffbf 	bl	80082d0 <USBD_LL_PrepareReceive>
 8006352:	e008      	b.n	8006366 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006354:	4b06      	ldr	r3, [pc, #24]	; (8006370 <USBD_CDC_ReceivePacket+0x68>)
 8006356:	7819      	ldrb	r1, [r3, #0]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800635e:	2340      	movs	r3, #64	; 0x40
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f001 ffb5 	bl	80082d0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	3710      	adds	r7, #16
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}
 8006370:	20000094 	.word	0x20000094

08006374 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b086      	sub	sp, #24
 8006378:	af00      	add	r7, sp, #0
 800637a:	60f8      	str	r0, [r7, #12]
 800637c:	60b9      	str	r1, [r7, #8]
 800637e:	4613      	mov	r3, r2
 8006380:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d101      	bne.n	800638c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006388:	2303      	movs	r3, #3
 800638a:	e01f      	b.n	80063cc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2200      	movs	r2, #0
 8006390:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2200      	movs	r2, #0
 8006398:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d003      	beq.n	80063b2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	68ba      	ldr	r2, [r7, #8]
 80063ae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	79fa      	ldrb	r2, [r7, #7]
 80063be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80063c0:	68f8      	ldr	r0, [r7, #12]
 80063c2:	f001 fe2f 	bl	8008024 <USBD_LL_Init>
 80063c6:	4603      	mov	r3, r0
 80063c8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80063ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3718      	adds	r7, #24
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80063de:	2300      	movs	r3, #0
 80063e0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d101      	bne.n	80063ec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80063e8:	2303      	movs	r3, #3
 80063ea:	e025      	b.n	8006438 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	683a      	ldr	r2, [r7, #0]
 80063f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	32ae      	adds	r2, #174	; 0xae
 80063fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00f      	beq.n	8006428 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	32ae      	adds	r2, #174	; 0xae
 8006412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006418:	f107 020e 	add.w	r2, r7, #14
 800641c:	4610      	mov	r0, r2
 800641e:	4798      	blx	r3
 8006420:	4602      	mov	r2, r0
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800642e:	1c5a      	adds	r2, r3, #1
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3710      	adds	r7, #16
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b082      	sub	sp, #8
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f001 fe37 	bl	80080bc <USBD_LL_Start>
 800644e:	4603      	mov	r3, r0
}
 8006450:	4618      	mov	r0, r3
 8006452:	3708      	adds	r7, #8
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006460:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006462:	4618      	mov	r0, r3
 8006464:	370c      	adds	r7, #12
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr

0800646e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800646e:	b580      	push	{r7, lr}
 8006470:	b084      	sub	sp, #16
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
 8006476:	460b      	mov	r3, r1
 8006478:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800647a:	2300      	movs	r3, #0
 800647c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006484:	2b00      	cmp	r3, #0
 8006486:	d009      	beq.n	800649c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	78fa      	ldrb	r2, [r7, #3]
 8006492:	4611      	mov	r1, r2
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	4798      	blx	r3
 8006498:	4603      	mov	r3, r0
 800649a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800649c:	7bfb      	ldrb	r3, [r7, #15]
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3710      	adds	r7, #16
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}

080064a6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80064a6:	b580      	push	{r7, lr}
 80064a8:	b084      	sub	sp, #16
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
 80064ae:	460b      	mov	r3, r1
 80064b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80064b2:	2300      	movs	r3, #0
 80064b4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	78fa      	ldrb	r2, [r7, #3]
 80064c0:	4611      	mov	r1, r2
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	4798      	blx	r3
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d001      	beq.n	80064d0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80064cc:	2303      	movs	r3, #3
 80064ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80064d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3710      	adds	r7, #16
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}

080064da <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80064da:	b580      	push	{r7, lr}
 80064dc:	b084      	sub	sp, #16
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
 80064e2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80064ea:	6839      	ldr	r1, [r7, #0]
 80064ec:	4618      	mov	r0, r3
 80064ee:	f001 f908 	bl	8007702 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2201      	movs	r2, #1
 80064f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006500:	461a      	mov	r2, r3
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800650e:	f003 031f 	and.w	r3, r3, #31
 8006512:	2b02      	cmp	r3, #2
 8006514:	d01a      	beq.n	800654c <USBD_LL_SetupStage+0x72>
 8006516:	2b02      	cmp	r3, #2
 8006518:	d822      	bhi.n	8006560 <USBD_LL_SetupStage+0x86>
 800651a:	2b00      	cmp	r3, #0
 800651c:	d002      	beq.n	8006524 <USBD_LL_SetupStage+0x4a>
 800651e:	2b01      	cmp	r3, #1
 8006520:	d00a      	beq.n	8006538 <USBD_LL_SetupStage+0x5e>
 8006522:	e01d      	b.n	8006560 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800652a:	4619      	mov	r1, r3
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 fb5f 	bl	8006bf0 <USBD_StdDevReq>
 8006532:	4603      	mov	r3, r0
 8006534:	73fb      	strb	r3, [r7, #15]
      break;
 8006536:	e020      	b.n	800657a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800653e:	4619      	mov	r1, r3
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 fbc7 	bl	8006cd4 <USBD_StdItfReq>
 8006546:	4603      	mov	r3, r0
 8006548:	73fb      	strb	r3, [r7, #15]
      break;
 800654a:	e016      	b.n	800657a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006552:	4619      	mov	r1, r3
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 fc29 	bl	8006dac <USBD_StdEPReq>
 800655a:	4603      	mov	r3, r0
 800655c:	73fb      	strb	r3, [r7, #15]
      break;
 800655e:	e00c      	b.n	800657a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006566:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800656a:	b2db      	uxtb	r3, r3
 800656c:	4619      	mov	r1, r3
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f001 fe04 	bl	800817c <USBD_LL_StallEP>
 8006574:	4603      	mov	r3, r0
 8006576:	73fb      	strb	r3, [r7, #15]
      break;
 8006578:	bf00      	nop
  }

  return ret;
 800657a:	7bfb      	ldrb	r3, [r7, #15]
}
 800657c:	4618      	mov	r0, r3
 800657e:	3710      	adds	r7, #16
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	460b      	mov	r3, r1
 800658e:	607a      	str	r2, [r7, #4]
 8006590:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006592:	2300      	movs	r3, #0
 8006594:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006596:	7afb      	ldrb	r3, [r7, #11]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d16e      	bne.n	800667a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80065a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80065aa:	2b03      	cmp	r3, #3
 80065ac:	f040 8098 	bne.w	80066e0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	689a      	ldr	r2, [r3, #8]
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d913      	bls.n	80065e4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	689a      	ldr	r2, [r3, #8]
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	1ad2      	subs	r2, r2, r3
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	68da      	ldr	r2, [r3, #12]
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	4293      	cmp	r3, r2
 80065d4:	bf28      	it	cs
 80065d6:	4613      	movcs	r3, r2
 80065d8:	461a      	mov	r2, r3
 80065da:	6879      	ldr	r1, [r7, #4]
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f001 f984 	bl	80078ea <USBD_CtlContinueRx>
 80065e2:	e07d      	b.n	80066e0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80065ea:	f003 031f 	and.w	r3, r3, #31
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d014      	beq.n	800661c <USBD_LL_DataOutStage+0x98>
 80065f2:	2b02      	cmp	r3, #2
 80065f4:	d81d      	bhi.n	8006632 <USBD_LL_DataOutStage+0xae>
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d002      	beq.n	8006600 <USBD_LL_DataOutStage+0x7c>
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d003      	beq.n	8006606 <USBD_LL_DataOutStage+0x82>
 80065fe:	e018      	b.n	8006632 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006600:	2300      	movs	r3, #0
 8006602:	75bb      	strb	r3, [r7, #22]
            break;
 8006604:	e018      	b.n	8006638 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800660c:	b2db      	uxtb	r3, r3
 800660e:	4619      	mov	r1, r3
 8006610:	68f8      	ldr	r0, [r7, #12]
 8006612:	f000 fa5e 	bl	8006ad2 <USBD_CoreFindIF>
 8006616:	4603      	mov	r3, r0
 8006618:	75bb      	strb	r3, [r7, #22]
            break;
 800661a:	e00d      	b.n	8006638 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006622:	b2db      	uxtb	r3, r3
 8006624:	4619      	mov	r1, r3
 8006626:	68f8      	ldr	r0, [r7, #12]
 8006628:	f000 fa60 	bl	8006aec <USBD_CoreFindEP>
 800662c:	4603      	mov	r3, r0
 800662e:	75bb      	strb	r3, [r7, #22]
            break;
 8006630:	e002      	b.n	8006638 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006632:	2300      	movs	r3, #0
 8006634:	75bb      	strb	r3, [r7, #22]
            break;
 8006636:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006638:	7dbb      	ldrb	r3, [r7, #22]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d119      	bne.n	8006672 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006644:	b2db      	uxtb	r3, r3
 8006646:	2b03      	cmp	r3, #3
 8006648:	d113      	bne.n	8006672 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800664a:	7dba      	ldrb	r2, [r7, #22]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	32ae      	adds	r2, #174	; 0xae
 8006650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00b      	beq.n	8006672 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800665a:	7dba      	ldrb	r2, [r7, #22]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006662:	7dba      	ldrb	r2, [r7, #22]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	32ae      	adds	r2, #174	; 0xae
 8006668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	68f8      	ldr	r0, [r7, #12]
 8006670:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006672:	68f8      	ldr	r0, [r7, #12]
 8006674:	f001 f94a 	bl	800790c <USBD_CtlSendStatus>
 8006678:	e032      	b.n	80066e0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800667a:	7afb      	ldrb	r3, [r7, #11]
 800667c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006680:	b2db      	uxtb	r3, r3
 8006682:	4619      	mov	r1, r3
 8006684:	68f8      	ldr	r0, [r7, #12]
 8006686:	f000 fa31 	bl	8006aec <USBD_CoreFindEP>
 800668a:	4603      	mov	r3, r0
 800668c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800668e:	7dbb      	ldrb	r3, [r7, #22]
 8006690:	2bff      	cmp	r3, #255	; 0xff
 8006692:	d025      	beq.n	80066e0 <USBD_LL_DataOutStage+0x15c>
 8006694:	7dbb      	ldrb	r3, [r7, #22]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d122      	bne.n	80066e0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	2b03      	cmp	r3, #3
 80066a4:	d117      	bne.n	80066d6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80066a6:	7dba      	ldrb	r2, [r7, #22]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	32ae      	adds	r2, #174	; 0xae
 80066ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066b0:	699b      	ldr	r3, [r3, #24]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00f      	beq.n	80066d6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80066b6:	7dba      	ldrb	r2, [r7, #22]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80066be:	7dba      	ldrb	r2, [r7, #22]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	32ae      	adds	r2, #174	; 0xae
 80066c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	7afa      	ldrb	r2, [r7, #11]
 80066cc:	4611      	mov	r1, r2
 80066ce:	68f8      	ldr	r0, [r7, #12]
 80066d0:	4798      	blx	r3
 80066d2:	4603      	mov	r3, r0
 80066d4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80066d6:	7dfb      	ldrb	r3, [r7, #23]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d001      	beq.n	80066e0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80066dc:	7dfb      	ldrb	r3, [r7, #23]
 80066de:	e000      	b.n	80066e2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3718      	adds	r7, #24
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}

080066ea <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80066ea:	b580      	push	{r7, lr}
 80066ec:	b086      	sub	sp, #24
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	60f8      	str	r0, [r7, #12]
 80066f2:	460b      	mov	r3, r1
 80066f4:	607a      	str	r2, [r7, #4]
 80066f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80066f8:	7afb      	ldrb	r3, [r7, #11]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d16f      	bne.n	80067de <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	3314      	adds	r3, #20
 8006702:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800670a:	2b02      	cmp	r3, #2
 800670c:	d15a      	bne.n	80067c4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	689a      	ldr	r2, [r3, #8]
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	429a      	cmp	r2, r3
 8006718:	d914      	bls.n	8006744 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	689a      	ldr	r2, [r3, #8]
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	1ad2      	subs	r2, r2, r3
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	461a      	mov	r2, r3
 800672e:	6879      	ldr	r1, [r7, #4]
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f001 f8ac 	bl	800788e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006736:	2300      	movs	r3, #0
 8006738:	2200      	movs	r2, #0
 800673a:	2100      	movs	r1, #0
 800673c:	68f8      	ldr	r0, [r7, #12]
 800673e:	f001 fdc7 	bl	80082d0 <USBD_LL_PrepareReceive>
 8006742:	e03f      	b.n	80067c4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	68da      	ldr	r2, [r3, #12]
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	429a      	cmp	r2, r3
 800674e:	d11c      	bne.n	800678a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	685a      	ldr	r2, [r3, #4]
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006758:	429a      	cmp	r2, r3
 800675a:	d316      	bcc.n	800678a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	685a      	ldr	r2, [r3, #4]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006766:	429a      	cmp	r2, r3
 8006768:	d20f      	bcs.n	800678a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800676a:	2200      	movs	r2, #0
 800676c:	2100      	movs	r1, #0
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	f001 f88d 	bl	800788e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2200      	movs	r2, #0
 8006778:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800677c:	2300      	movs	r3, #0
 800677e:	2200      	movs	r2, #0
 8006780:	2100      	movs	r1, #0
 8006782:	68f8      	ldr	r0, [r7, #12]
 8006784:	f001 fda4 	bl	80082d0 <USBD_LL_PrepareReceive>
 8006788:	e01c      	b.n	80067c4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006790:	b2db      	uxtb	r3, r3
 8006792:	2b03      	cmp	r3, #3
 8006794:	d10f      	bne.n	80067b6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d009      	beq.n	80067b6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	68f8      	ldr	r0, [r7, #12]
 80067b4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80067b6:	2180      	movs	r1, #128	; 0x80
 80067b8:	68f8      	ldr	r0, [r7, #12]
 80067ba:	f001 fcdf 	bl	800817c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80067be:	68f8      	ldr	r0, [r7, #12]
 80067c0:	f001 f8b7 	bl	8007932 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d03a      	beq.n	8006844 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80067ce:	68f8      	ldr	r0, [r7, #12]
 80067d0:	f7ff fe42 	bl	8006458 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80067dc:	e032      	b.n	8006844 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80067de:	7afb      	ldrb	r3, [r7, #11]
 80067e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	4619      	mov	r1, r3
 80067e8:	68f8      	ldr	r0, [r7, #12]
 80067ea:	f000 f97f 	bl	8006aec <USBD_CoreFindEP>
 80067ee:	4603      	mov	r3, r0
 80067f0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80067f2:	7dfb      	ldrb	r3, [r7, #23]
 80067f4:	2bff      	cmp	r3, #255	; 0xff
 80067f6:	d025      	beq.n	8006844 <USBD_LL_DataInStage+0x15a>
 80067f8:	7dfb      	ldrb	r3, [r7, #23]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d122      	bne.n	8006844 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006804:	b2db      	uxtb	r3, r3
 8006806:	2b03      	cmp	r3, #3
 8006808:	d11c      	bne.n	8006844 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800680a:	7dfa      	ldrb	r2, [r7, #23]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	32ae      	adds	r2, #174	; 0xae
 8006810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006814:	695b      	ldr	r3, [r3, #20]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d014      	beq.n	8006844 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800681a:	7dfa      	ldrb	r2, [r7, #23]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006822:	7dfa      	ldrb	r2, [r7, #23]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	32ae      	adds	r2, #174	; 0xae
 8006828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	7afa      	ldrb	r2, [r7, #11]
 8006830:	4611      	mov	r1, r2
 8006832:	68f8      	ldr	r0, [r7, #12]
 8006834:	4798      	blx	r3
 8006836:	4603      	mov	r3, r0
 8006838:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800683a:	7dbb      	ldrb	r3, [r7, #22]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d001      	beq.n	8006844 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006840:	7dbb      	ldrb	r3, [r7, #22]
 8006842:	e000      	b.n	8006846 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3718      	adds	r7, #24
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800684e:	b580      	push	{r7, lr}
 8006850:	b084      	sub	sp, #16
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006856:	2300      	movs	r3, #0
 8006858:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2201      	movs	r2, #1
 800685e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006886:	2b00      	cmp	r3, #0
 8006888:	d014      	beq.n	80068b4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00e      	beq.n	80068b4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	6852      	ldr	r2, [r2, #4]
 80068a2:	b2d2      	uxtb	r2, r2
 80068a4:	4611      	mov	r1, r2
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	4798      	blx	r3
 80068aa:	4603      	mov	r3, r0
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d001      	beq.n	80068b4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80068b0:	2303      	movs	r3, #3
 80068b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80068b4:	2340      	movs	r3, #64	; 0x40
 80068b6:	2200      	movs	r2, #0
 80068b8:	2100      	movs	r1, #0
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f001 fc19 	bl	80080f2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2240      	movs	r2, #64	; 0x40
 80068cc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80068d0:	2340      	movs	r3, #64	; 0x40
 80068d2:	2200      	movs	r2, #0
 80068d4:	2180      	movs	r1, #128	; 0x80
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f001 fc0b 	bl	80080f2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2240      	movs	r2, #64	; 0x40
 80068e6:	621a      	str	r2, [r3, #32]

  return ret;
 80068e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3710      	adds	r7, #16
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80068f2:	b480      	push	{r7}
 80068f4:	b083      	sub	sp, #12
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
 80068fa:	460b      	mov	r3, r1
 80068fc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	78fa      	ldrb	r2, [r7, #3]
 8006902:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	370c      	adds	r7, #12
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr

08006912 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006912:	b480      	push	{r7}
 8006914:	b083      	sub	sp, #12
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006920:	b2da      	uxtb	r2, r3
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2204      	movs	r2, #4
 800692c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	370c      	adds	r7, #12
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr

0800693e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800693e:	b480      	push	{r7}
 8006940:	b083      	sub	sp, #12
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800694c:	b2db      	uxtb	r3, r3
 800694e:	2b04      	cmp	r3, #4
 8006950:	d106      	bne.n	8006960 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006958:	b2da      	uxtb	r2, r3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	370c      	adds	r7, #12
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr

0800696e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800696e:	b580      	push	{r7, lr}
 8006970:	b082      	sub	sp, #8
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800697c:	b2db      	uxtb	r3, r3
 800697e:	2b03      	cmp	r3, #3
 8006980:	d110      	bne.n	80069a4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00b      	beq.n	80069a4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006992:	69db      	ldr	r3, [r3, #28]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d005      	beq.n	80069a4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800699e:	69db      	ldr	r3, [r3, #28]
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3708      	adds	r7, #8
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}

080069ae <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80069ae:	b580      	push	{r7, lr}
 80069b0:	b082      	sub	sp, #8
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
 80069b6:	460b      	mov	r3, r1
 80069b8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	32ae      	adds	r2, #174	; 0xae
 80069c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d101      	bne.n	80069d0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80069cc:	2303      	movs	r3, #3
 80069ce:	e01c      	b.n	8006a0a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	2b03      	cmp	r3, #3
 80069da:	d115      	bne.n	8006a08 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	32ae      	adds	r2, #174	; 0xae
 80069e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069ea:	6a1b      	ldr	r3, [r3, #32]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00b      	beq.n	8006a08 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	32ae      	adds	r2, #174	; 0xae
 80069fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069fe:	6a1b      	ldr	r3, [r3, #32]
 8006a00:	78fa      	ldrb	r2, [r7, #3]
 8006a02:	4611      	mov	r1, r2
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3708      	adds	r7, #8
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}

08006a12 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006a12:	b580      	push	{r7, lr}
 8006a14:	b082      	sub	sp, #8
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
 8006a1a:	460b      	mov	r3, r1
 8006a1c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	32ae      	adds	r2, #174	; 0xae
 8006a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d101      	bne.n	8006a34 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006a30:	2303      	movs	r3, #3
 8006a32:	e01c      	b.n	8006a6e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	2b03      	cmp	r3, #3
 8006a3e:	d115      	bne.n	8006a6c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	32ae      	adds	r2, #174	; 0xae
 8006a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00b      	beq.n	8006a6c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	32ae      	adds	r2, #174	; 0xae
 8006a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a64:	78fa      	ldrb	r2, [r7, #3]
 8006a66:	4611      	mov	r1, r2
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3708      	adds	r7, #8
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}

08006a76 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006a76:	b480      	push	{r7}
 8006a78:	b083      	sub	sp, #12
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006a7e:	2300      	movs	r3, #0
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006a94:	2300      	movs	r3, #0
 8006a96:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00e      	beq.n	8006ac8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	6852      	ldr	r2, [r2, #4]
 8006ab6:	b2d2      	uxtb	r2, r2
 8006ab8:	4611      	mov	r1, r2
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	4798      	blx	r3
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d001      	beq.n	8006ac8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006ac4:	2303      	movs	r3, #3
 8006ac6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3710      	adds	r7, #16
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}

08006ad2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006ad2:	b480      	push	{r7}
 8006ad4:	b083      	sub	sp, #12
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
 8006ada:	460b      	mov	r3, r1
 8006adc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006ade:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	460b      	mov	r3, r1
 8006af6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006af8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	370c      	adds	r7, #12
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr

08006b06 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b086      	sub	sp, #24
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
 8006b0e:	460b      	mov	r3, r1
 8006b10:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	885b      	ldrh	r3, [r3, #2]
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d920      	bls.n	8006b70 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006b36:	e013      	b.n	8006b60 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006b38:	f107 030a 	add.w	r3, r7, #10
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	6978      	ldr	r0, [r7, #20]
 8006b40:	f000 f81b 	bl	8006b7a <USBD_GetNextDesc>
 8006b44:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	785b      	ldrb	r3, [r3, #1]
 8006b4a:	2b05      	cmp	r3, #5
 8006b4c:	d108      	bne.n	8006b60 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	789b      	ldrb	r3, [r3, #2]
 8006b56:	78fa      	ldrb	r2, [r7, #3]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d008      	beq.n	8006b6e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	885b      	ldrh	r3, [r3, #2]
 8006b64:	b29a      	uxth	r2, r3
 8006b66:	897b      	ldrh	r3, [r7, #10]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d8e5      	bhi.n	8006b38 <USBD_GetEpDesc+0x32>
 8006b6c:	e000      	b.n	8006b70 <USBD_GetEpDesc+0x6a>
          break;
 8006b6e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006b70:	693b      	ldr	r3, [r7, #16]
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3718      	adds	r7, #24
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	b085      	sub	sp, #20
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
 8006b82:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	881a      	ldrh	r2, [r3, #0]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	4413      	add	r3, r2
 8006b94:	b29a      	uxth	r2, r3
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3714      	adds	r7, #20
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b087      	sub	sp, #28
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	3301      	adds	r3, #1
 8006bca:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006bd2:	8a3b      	ldrh	r3, [r7, #16]
 8006bd4:	021b      	lsls	r3, r3, #8
 8006bd6:	b21a      	sxth	r2, r3
 8006bd8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	b21b      	sxth	r3, r3
 8006be0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006be2:	89fb      	ldrh	r3, [r7, #14]
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	371c      	adds	r7, #28
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c06:	2b40      	cmp	r3, #64	; 0x40
 8006c08:	d005      	beq.n	8006c16 <USBD_StdDevReq+0x26>
 8006c0a:	2b40      	cmp	r3, #64	; 0x40
 8006c0c:	d857      	bhi.n	8006cbe <USBD_StdDevReq+0xce>
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d00f      	beq.n	8006c32 <USBD_StdDevReq+0x42>
 8006c12:	2b20      	cmp	r3, #32
 8006c14:	d153      	bne.n	8006cbe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	32ae      	adds	r2, #174	; 0xae
 8006c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	6839      	ldr	r1, [r7, #0]
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	4798      	blx	r3
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	73fb      	strb	r3, [r7, #15]
      break;
 8006c30:	e04a      	b.n	8006cc8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	785b      	ldrb	r3, [r3, #1]
 8006c36:	2b09      	cmp	r3, #9
 8006c38:	d83b      	bhi.n	8006cb2 <USBD_StdDevReq+0xc2>
 8006c3a:	a201      	add	r2, pc, #4	; (adr r2, 8006c40 <USBD_StdDevReq+0x50>)
 8006c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c40:	08006c95 	.word	0x08006c95
 8006c44:	08006ca9 	.word	0x08006ca9
 8006c48:	08006cb3 	.word	0x08006cb3
 8006c4c:	08006c9f 	.word	0x08006c9f
 8006c50:	08006cb3 	.word	0x08006cb3
 8006c54:	08006c73 	.word	0x08006c73
 8006c58:	08006c69 	.word	0x08006c69
 8006c5c:	08006cb3 	.word	0x08006cb3
 8006c60:	08006c8b 	.word	0x08006c8b
 8006c64:	08006c7d 	.word	0x08006c7d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006c68:	6839      	ldr	r1, [r7, #0]
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 fa3c 	bl	80070e8 <USBD_GetDescriptor>
          break;
 8006c70:	e024      	b.n	8006cbc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006c72:	6839      	ldr	r1, [r7, #0]
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 fba1 	bl	80073bc <USBD_SetAddress>
          break;
 8006c7a:	e01f      	b.n	8006cbc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006c7c:	6839      	ldr	r1, [r7, #0]
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 fbe0 	bl	8007444 <USBD_SetConfig>
 8006c84:	4603      	mov	r3, r0
 8006c86:	73fb      	strb	r3, [r7, #15]
          break;
 8006c88:	e018      	b.n	8006cbc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006c8a:	6839      	ldr	r1, [r7, #0]
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 fc83 	bl	8007598 <USBD_GetConfig>
          break;
 8006c92:	e013      	b.n	8006cbc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006c94:	6839      	ldr	r1, [r7, #0]
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 fcb4 	bl	8007604 <USBD_GetStatus>
          break;
 8006c9c:	e00e      	b.n	8006cbc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006c9e:	6839      	ldr	r1, [r7, #0]
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 fce3 	bl	800766c <USBD_SetFeature>
          break;
 8006ca6:	e009      	b.n	8006cbc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006ca8:	6839      	ldr	r1, [r7, #0]
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 fd07 	bl	80076be <USBD_ClrFeature>
          break;
 8006cb0:	e004      	b.n	8006cbc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006cb2:	6839      	ldr	r1, [r7, #0]
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 fd5e 	bl	8007776 <USBD_CtlError>
          break;
 8006cba:	bf00      	nop
      }
      break;
 8006cbc:	e004      	b.n	8006cc8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006cbe:	6839      	ldr	r1, [r7, #0]
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 fd58 	bl	8007776 <USBD_CtlError>
      break;
 8006cc6:	bf00      	nop
  }

  return ret;
 8006cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3710      	adds	r7, #16
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop

08006cd4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006cea:	2b40      	cmp	r3, #64	; 0x40
 8006cec:	d005      	beq.n	8006cfa <USBD_StdItfReq+0x26>
 8006cee:	2b40      	cmp	r3, #64	; 0x40
 8006cf0:	d852      	bhi.n	8006d98 <USBD_StdItfReq+0xc4>
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d001      	beq.n	8006cfa <USBD_StdItfReq+0x26>
 8006cf6:	2b20      	cmp	r3, #32
 8006cf8:	d14e      	bne.n	8006d98 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	3b01      	subs	r3, #1
 8006d04:	2b02      	cmp	r3, #2
 8006d06:	d840      	bhi.n	8006d8a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	889b      	ldrh	r3, [r3, #4]
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d836      	bhi.n	8006d80 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	889b      	ldrh	r3, [r3, #4]
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	4619      	mov	r1, r3
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f7ff fed9 	bl	8006ad2 <USBD_CoreFindIF>
 8006d20:	4603      	mov	r3, r0
 8006d22:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d24:	7bbb      	ldrb	r3, [r7, #14]
 8006d26:	2bff      	cmp	r3, #255	; 0xff
 8006d28:	d01d      	beq.n	8006d66 <USBD_StdItfReq+0x92>
 8006d2a:	7bbb      	ldrb	r3, [r7, #14]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d11a      	bne.n	8006d66 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006d30:	7bba      	ldrb	r2, [r7, #14]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	32ae      	adds	r2, #174	; 0xae
 8006d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00f      	beq.n	8006d60 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006d40:	7bba      	ldrb	r2, [r7, #14]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006d48:	7bba      	ldrb	r2, [r7, #14]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	32ae      	adds	r2, #174	; 0xae
 8006d4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	6839      	ldr	r1, [r7, #0]
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	4798      	blx	r3
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006d5e:	e004      	b.n	8006d6a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006d60:	2303      	movs	r3, #3
 8006d62:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006d64:	e001      	b.n	8006d6a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006d66:	2303      	movs	r3, #3
 8006d68:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	88db      	ldrh	r3, [r3, #6]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d110      	bne.n	8006d94 <USBD_StdItfReq+0xc0>
 8006d72:	7bfb      	ldrb	r3, [r7, #15]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d10d      	bne.n	8006d94 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 fdc7 	bl	800790c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006d7e:	e009      	b.n	8006d94 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006d80:	6839      	ldr	r1, [r7, #0]
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 fcf7 	bl	8007776 <USBD_CtlError>
          break;
 8006d88:	e004      	b.n	8006d94 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006d8a:	6839      	ldr	r1, [r7, #0]
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 fcf2 	bl	8007776 <USBD_CtlError>
          break;
 8006d92:	e000      	b.n	8006d96 <USBD_StdItfReq+0xc2>
          break;
 8006d94:	bf00      	nop
      }
      break;
 8006d96:	e004      	b.n	8006da2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006d98:	6839      	ldr	r1, [r7, #0]
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 fceb 	bl	8007776 <USBD_CtlError>
      break;
 8006da0:	bf00      	nop
  }

  return ret;
 8006da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3710      	adds	r7, #16
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006db6:	2300      	movs	r3, #0
 8006db8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	889b      	ldrh	r3, [r3, #4]
 8006dbe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006dc8:	2b40      	cmp	r3, #64	; 0x40
 8006dca:	d007      	beq.n	8006ddc <USBD_StdEPReq+0x30>
 8006dcc:	2b40      	cmp	r3, #64	; 0x40
 8006dce:	f200 817f 	bhi.w	80070d0 <USBD_StdEPReq+0x324>
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d02a      	beq.n	8006e2c <USBD_StdEPReq+0x80>
 8006dd6:	2b20      	cmp	r3, #32
 8006dd8:	f040 817a 	bne.w	80070d0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006ddc:	7bbb      	ldrb	r3, [r7, #14]
 8006dde:	4619      	mov	r1, r3
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f7ff fe83 	bl	8006aec <USBD_CoreFindEP>
 8006de6:	4603      	mov	r3, r0
 8006de8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006dea:	7b7b      	ldrb	r3, [r7, #13]
 8006dec:	2bff      	cmp	r3, #255	; 0xff
 8006dee:	f000 8174 	beq.w	80070da <USBD_StdEPReq+0x32e>
 8006df2:	7b7b      	ldrb	r3, [r7, #13]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f040 8170 	bne.w	80070da <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006dfa:	7b7a      	ldrb	r2, [r7, #13]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006e02:	7b7a      	ldrb	r2, [r7, #13]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	32ae      	adds	r2, #174	; 0xae
 8006e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	f000 8163 	beq.w	80070da <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006e14:	7b7a      	ldrb	r2, [r7, #13]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	32ae      	adds	r2, #174	; 0xae
 8006e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	6839      	ldr	r1, [r7, #0]
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	4798      	blx	r3
 8006e26:	4603      	mov	r3, r0
 8006e28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006e2a:	e156      	b.n	80070da <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	785b      	ldrb	r3, [r3, #1]
 8006e30:	2b03      	cmp	r3, #3
 8006e32:	d008      	beq.n	8006e46 <USBD_StdEPReq+0x9a>
 8006e34:	2b03      	cmp	r3, #3
 8006e36:	f300 8145 	bgt.w	80070c4 <USBD_StdEPReq+0x318>
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	f000 809b 	beq.w	8006f76 <USBD_StdEPReq+0x1ca>
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d03c      	beq.n	8006ebe <USBD_StdEPReq+0x112>
 8006e44:	e13e      	b.n	80070c4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d002      	beq.n	8006e58 <USBD_StdEPReq+0xac>
 8006e52:	2b03      	cmp	r3, #3
 8006e54:	d016      	beq.n	8006e84 <USBD_StdEPReq+0xd8>
 8006e56:	e02c      	b.n	8006eb2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e58:	7bbb      	ldrb	r3, [r7, #14]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00d      	beq.n	8006e7a <USBD_StdEPReq+0xce>
 8006e5e:	7bbb      	ldrb	r3, [r7, #14]
 8006e60:	2b80      	cmp	r3, #128	; 0x80
 8006e62:	d00a      	beq.n	8006e7a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e64:	7bbb      	ldrb	r3, [r7, #14]
 8006e66:	4619      	mov	r1, r3
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f001 f987 	bl	800817c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e6e:	2180      	movs	r1, #128	; 0x80
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f001 f983 	bl	800817c <USBD_LL_StallEP>
 8006e76:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006e78:	e020      	b.n	8006ebc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006e7a:	6839      	ldr	r1, [r7, #0]
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 fc7a 	bl	8007776 <USBD_CtlError>
              break;
 8006e82:	e01b      	b.n	8006ebc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	885b      	ldrh	r3, [r3, #2]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d10e      	bne.n	8006eaa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006e8c:	7bbb      	ldrb	r3, [r7, #14]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d00b      	beq.n	8006eaa <USBD_StdEPReq+0xfe>
 8006e92:	7bbb      	ldrb	r3, [r7, #14]
 8006e94:	2b80      	cmp	r3, #128	; 0x80
 8006e96:	d008      	beq.n	8006eaa <USBD_StdEPReq+0xfe>
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	88db      	ldrh	r3, [r3, #6]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d104      	bne.n	8006eaa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ea0:	7bbb      	ldrb	r3, [r7, #14]
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f001 f969 	bl	800817c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 fd2e 	bl	800790c <USBD_CtlSendStatus>

              break;
 8006eb0:	e004      	b.n	8006ebc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006eb2:	6839      	ldr	r1, [r7, #0]
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 fc5e 	bl	8007776 <USBD_CtlError>
              break;
 8006eba:	bf00      	nop
          }
          break;
 8006ebc:	e107      	b.n	80070ce <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	2b02      	cmp	r3, #2
 8006ec8:	d002      	beq.n	8006ed0 <USBD_StdEPReq+0x124>
 8006eca:	2b03      	cmp	r3, #3
 8006ecc:	d016      	beq.n	8006efc <USBD_StdEPReq+0x150>
 8006ece:	e04b      	b.n	8006f68 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ed0:	7bbb      	ldrb	r3, [r7, #14]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00d      	beq.n	8006ef2 <USBD_StdEPReq+0x146>
 8006ed6:	7bbb      	ldrb	r3, [r7, #14]
 8006ed8:	2b80      	cmp	r3, #128	; 0x80
 8006eda:	d00a      	beq.n	8006ef2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006edc:	7bbb      	ldrb	r3, [r7, #14]
 8006ede:	4619      	mov	r1, r3
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f001 f94b 	bl	800817c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ee6:	2180      	movs	r1, #128	; 0x80
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f001 f947 	bl	800817c <USBD_LL_StallEP>
 8006eee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ef0:	e040      	b.n	8006f74 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006ef2:	6839      	ldr	r1, [r7, #0]
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 fc3e 	bl	8007776 <USBD_CtlError>
              break;
 8006efa:	e03b      	b.n	8006f74 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	885b      	ldrh	r3, [r3, #2]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d136      	bne.n	8006f72 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006f04:	7bbb      	ldrb	r3, [r7, #14]
 8006f06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d004      	beq.n	8006f18 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006f0e:	7bbb      	ldrb	r3, [r7, #14]
 8006f10:	4619      	mov	r1, r3
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f001 f951 	bl	80081ba <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 fcf7 	bl	800790c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006f1e:	7bbb      	ldrb	r3, [r7, #14]
 8006f20:	4619      	mov	r1, r3
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f7ff fde2 	bl	8006aec <USBD_CoreFindEP>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006f2c:	7b7b      	ldrb	r3, [r7, #13]
 8006f2e:	2bff      	cmp	r3, #255	; 0xff
 8006f30:	d01f      	beq.n	8006f72 <USBD_StdEPReq+0x1c6>
 8006f32:	7b7b      	ldrb	r3, [r7, #13]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d11c      	bne.n	8006f72 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006f38:	7b7a      	ldrb	r2, [r7, #13]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006f40:	7b7a      	ldrb	r2, [r7, #13]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	32ae      	adds	r2, #174	; 0xae
 8006f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d010      	beq.n	8006f72 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006f50:	7b7a      	ldrb	r2, [r7, #13]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	32ae      	adds	r2, #174	; 0xae
 8006f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	6839      	ldr	r1, [r7, #0]
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	4798      	blx	r3
 8006f62:	4603      	mov	r3, r0
 8006f64:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006f66:	e004      	b.n	8006f72 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006f68:	6839      	ldr	r1, [r7, #0]
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 fc03 	bl	8007776 <USBD_CtlError>
              break;
 8006f70:	e000      	b.n	8006f74 <USBD_StdEPReq+0x1c8>
              break;
 8006f72:	bf00      	nop
          }
          break;
 8006f74:	e0ab      	b.n	80070ce <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	2b02      	cmp	r3, #2
 8006f80:	d002      	beq.n	8006f88 <USBD_StdEPReq+0x1dc>
 8006f82:	2b03      	cmp	r3, #3
 8006f84:	d032      	beq.n	8006fec <USBD_StdEPReq+0x240>
 8006f86:	e097      	b.n	80070b8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f88:	7bbb      	ldrb	r3, [r7, #14]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d007      	beq.n	8006f9e <USBD_StdEPReq+0x1f2>
 8006f8e:	7bbb      	ldrb	r3, [r7, #14]
 8006f90:	2b80      	cmp	r3, #128	; 0x80
 8006f92:	d004      	beq.n	8006f9e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006f94:	6839      	ldr	r1, [r7, #0]
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 fbed 	bl	8007776 <USBD_CtlError>
                break;
 8006f9c:	e091      	b.n	80070c2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	da0b      	bge.n	8006fbe <USBD_StdEPReq+0x212>
 8006fa6:	7bbb      	ldrb	r3, [r7, #14]
 8006fa8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006fac:	4613      	mov	r3, r2
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	4413      	add	r3, r2
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	3310      	adds	r3, #16
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	4413      	add	r3, r2
 8006fba:	3304      	adds	r3, #4
 8006fbc:	e00b      	b.n	8006fd6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006fbe:	7bbb      	ldrb	r3, [r7, #14]
 8006fc0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fc4:	4613      	mov	r3, r2
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	4413      	add	r3, r2
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	3304      	adds	r3, #4
 8006fd6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	2202      	movs	r2, #2
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 fc37 	bl	8007858 <USBD_CtlSendData>
              break;
 8006fea:	e06a      	b.n	80070c2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006fec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	da11      	bge.n	8007018 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006ff4:	7bbb      	ldrb	r3, [r7, #14]
 8006ff6:	f003 020f 	and.w	r2, r3, #15
 8006ffa:	6879      	ldr	r1, [r7, #4]
 8006ffc:	4613      	mov	r3, r2
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	4413      	add	r3, r2
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	440b      	add	r3, r1
 8007006:	3324      	adds	r3, #36	; 0x24
 8007008:	881b      	ldrh	r3, [r3, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d117      	bne.n	800703e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800700e:	6839      	ldr	r1, [r7, #0]
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 fbb0 	bl	8007776 <USBD_CtlError>
                  break;
 8007016:	e054      	b.n	80070c2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007018:	7bbb      	ldrb	r3, [r7, #14]
 800701a:	f003 020f 	and.w	r2, r3, #15
 800701e:	6879      	ldr	r1, [r7, #4]
 8007020:	4613      	mov	r3, r2
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	4413      	add	r3, r2
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	440b      	add	r3, r1
 800702a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800702e:	881b      	ldrh	r3, [r3, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d104      	bne.n	800703e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007034:	6839      	ldr	r1, [r7, #0]
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 fb9d 	bl	8007776 <USBD_CtlError>
                  break;
 800703c:	e041      	b.n	80070c2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800703e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007042:	2b00      	cmp	r3, #0
 8007044:	da0b      	bge.n	800705e <USBD_StdEPReq+0x2b2>
 8007046:	7bbb      	ldrb	r3, [r7, #14]
 8007048:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800704c:	4613      	mov	r3, r2
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	4413      	add	r3, r2
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	3310      	adds	r3, #16
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	4413      	add	r3, r2
 800705a:	3304      	adds	r3, #4
 800705c:	e00b      	b.n	8007076 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800705e:	7bbb      	ldrb	r3, [r7, #14]
 8007060:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007064:	4613      	mov	r3, r2
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	4413      	add	r3, r2
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	4413      	add	r3, r2
 8007074:	3304      	adds	r3, #4
 8007076:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007078:	7bbb      	ldrb	r3, [r7, #14]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d002      	beq.n	8007084 <USBD_StdEPReq+0x2d8>
 800707e:	7bbb      	ldrb	r3, [r7, #14]
 8007080:	2b80      	cmp	r3, #128	; 0x80
 8007082:	d103      	bne.n	800708c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	2200      	movs	r2, #0
 8007088:	601a      	str	r2, [r3, #0]
 800708a:	e00e      	b.n	80070aa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800708c:	7bbb      	ldrb	r3, [r7, #14]
 800708e:	4619      	mov	r1, r3
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f001 f8b1 	bl	80081f8 <USBD_LL_IsStallEP>
 8007096:	4603      	mov	r3, r0
 8007098:	2b00      	cmp	r3, #0
 800709a:	d003      	beq.n	80070a4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	2201      	movs	r2, #1
 80070a0:	601a      	str	r2, [r3, #0]
 80070a2:	e002      	b.n	80070aa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	2200      	movs	r2, #0
 80070a8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	2202      	movs	r2, #2
 80070ae:	4619      	mov	r1, r3
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 fbd1 	bl	8007858 <USBD_CtlSendData>
              break;
 80070b6:	e004      	b.n	80070c2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80070b8:	6839      	ldr	r1, [r7, #0]
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 fb5b 	bl	8007776 <USBD_CtlError>
              break;
 80070c0:	bf00      	nop
          }
          break;
 80070c2:	e004      	b.n	80070ce <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80070c4:	6839      	ldr	r1, [r7, #0]
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 fb55 	bl	8007776 <USBD_CtlError>
          break;
 80070cc:	bf00      	nop
      }
      break;
 80070ce:	e005      	b.n	80070dc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80070d0:	6839      	ldr	r1, [r7, #0]
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 fb4f 	bl	8007776 <USBD_CtlError>
      break;
 80070d8:	e000      	b.n	80070dc <USBD_StdEPReq+0x330>
      break;
 80070da:	bf00      	nop
  }

  return ret;
 80070dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3710      	adds	r7, #16
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
	...

080070e8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80070f2:	2300      	movs	r3, #0
 80070f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80070f6:	2300      	movs	r3, #0
 80070f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80070fa:	2300      	movs	r3, #0
 80070fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	885b      	ldrh	r3, [r3, #2]
 8007102:	0a1b      	lsrs	r3, r3, #8
 8007104:	b29b      	uxth	r3, r3
 8007106:	3b01      	subs	r3, #1
 8007108:	2b06      	cmp	r3, #6
 800710a:	f200 8128 	bhi.w	800735e <USBD_GetDescriptor+0x276>
 800710e:	a201      	add	r2, pc, #4	; (adr r2, 8007114 <USBD_GetDescriptor+0x2c>)
 8007110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007114:	08007131 	.word	0x08007131
 8007118:	08007149 	.word	0x08007149
 800711c:	08007189 	.word	0x08007189
 8007120:	0800735f 	.word	0x0800735f
 8007124:	0800735f 	.word	0x0800735f
 8007128:	080072ff 	.word	0x080072ff
 800712c:	0800732b 	.word	0x0800732b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	7c12      	ldrb	r2, [r2, #16]
 800713c:	f107 0108 	add.w	r1, r7, #8
 8007140:	4610      	mov	r0, r2
 8007142:	4798      	blx	r3
 8007144:	60f8      	str	r0, [r7, #12]
      break;
 8007146:	e112      	b.n	800736e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	7c1b      	ldrb	r3, [r3, #16]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d10d      	bne.n	800716c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007158:	f107 0208 	add.w	r2, r7, #8
 800715c:	4610      	mov	r0, r2
 800715e:	4798      	blx	r3
 8007160:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	3301      	adds	r3, #1
 8007166:	2202      	movs	r2, #2
 8007168:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800716a:	e100      	b.n	800736e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007174:	f107 0208 	add.w	r2, r7, #8
 8007178:	4610      	mov	r0, r2
 800717a:	4798      	blx	r3
 800717c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	3301      	adds	r3, #1
 8007182:	2202      	movs	r2, #2
 8007184:	701a      	strb	r2, [r3, #0]
      break;
 8007186:	e0f2      	b.n	800736e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	885b      	ldrh	r3, [r3, #2]
 800718c:	b2db      	uxtb	r3, r3
 800718e:	2b05      	cmp	r3, #5
 8007190:	f200 80ac 	bhi.w	80072ec <USBD_GetDescriptor+0x204>
 8007194:	a201      	add	r2, pc, #4	; (adr r2, 800719c <USBD_GetDescriptor+0xb4>)
 8007196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800719a:	bf00      	nop
 800719c:	080071b5 	.word	0x080071b5
 80071a0:	080071e9 	.word	0x080071e9
 80071a4:	0800721d 	.word	0x0800721d
 80071a8:	08007251 	.word	0x08007251
 80071ac:	08007285 	.word	0x08007285
 80071b0:	080072b9 	.word	0x080072b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00b      	beq.n	80071d8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	7c12      	ldrb	r2, [r2, #16]
 80071cc:	f107 0108 	add.w	r1, r7, #8
 80071d0:	4610      	mov	r0, r2
 80071d2:	4798      	blx	r3
 80071d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071d6:	e091      	b.n	80072fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071d8:	6839      	ldr	r1, [r7, #0]
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 facb 	bl	8007776 <USBD_CtlError>
            err++;
 80071e0:	7afb      	ldrb	r3, [r7, #11]
 80071e2:	3301      	adds	r3, #1
 80071e4:	72fb      	strb	r3, [r7, #11]
          break;
 80071e6:	e089      	b.n	80072fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d00b      	beq.n	800720c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	7c12      	ldrb	r2, [r2, #16]
 8007200:	f107 0108 	add.w	r1, r7, #8
 8007204:	4610      	mov	r0, r2
 8007206:	4798      	blx	r3
 8007208:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800720a:	e077      	b.n	80072fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800720c:	6839      	ldr	r1, [r7, #0]
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 fab1 	bl	8007776 <USBD_CtlError>
            err++;
 8007214:	7afb      	ldrb	r3, [r7, #11]
 8007216:	3301      	adds	r3, #1
 8007218:	72fb      	strb	r3, [r7, #11]
          break;
 800721a:	e06f      	b.n	80072fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d00b      	beq.n	8007240 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	7c12      	ldrb	r2, [r2, #16]
 8007234:	f107 0108 	add.w	r1, r7, #8
 8007238:	4610      	mov	r0, r2
 800723a:	4798      	blx	r3
 800723c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800723e:	e05d      	b.n	80072fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007240:	6839      	ldr	r1, [r7, #0]
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 fa97 	bl	8007776 <USBD_CtlError>
            err++;
 8007248:	7afb      	ldrb	r3, [r7, #11]
 800724a:	3301      	adds	r3, #1
 800724c:	72fb      	strb	r3, [r7, #11]
          break;
 800724e:	e055      	b.n	80072fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d00b      	beq.n	8007274 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007262:	691b      	ldr	r3, [r3, #16]
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	7c12      	ldrb	r2, [r2, #16]
 8007268:	f107 0108 	add.w	r1, r7, #8
 800726c:	4610      	mov	r0, r2
 800726e:	4798      	blx	r3
 8007270:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007272:	e043      	b.n	80072fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007274:	6839      	ldr	r1, [r7, #0]
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 fa7d 	bl	8007776 <USBD_CtlError>
            err++;
 800727c:	7afb      	ldrb	r3, [r7, #11]
 800727e:	3301      	adds	r3, #1
 8007280:	72fb      	strb	r3, [r7, #11]
          break;
 8007282:	e03b      	b.n	80072fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800728a:	695b      	ldr	r3, [r3, #20]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d00b      	beq.n	80072a8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007296:	695b      	ldr	r3, [r3, #20]
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	7c12      	ldrb	r2, [r2, #16]
 800729c:	f107 0108 	add.w	r1, r7, #8
 80072a0:	4610      	mov	r0, r2
 80072a2:	4798      	blx	r3
 80072a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072a6:	e029      	b.n	80072fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072a8:	6839      	ldr	r1, [r7, #0]
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 fa63 	bl	8007776 <USBD_CtlError>
            err++;
 80072b0:	7afb      	ldrb	r3, [r7, #11]
 80072b2:	3301      	adds	r3, #1
 80072b4:	72fb      	strb	r3, [r7, #11]
          break;
 80072b6:	e021      	b.n	80072fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072be:	699b      	ldr	r3, [r3, #24]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d00b      	beq.n	80072dc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072ca:	699b      	ldr	r3, [r3, #24]
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	7c12      	ldrb	r2, [r2, #16]
 80072d0:	f107 0108 	add.w	r1, r7, #8
 80072d4:	4610      	mov	r0, r2
 80072d6:	4798      	blx	r3
 80072d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072da:	e00f      	b.n	80072fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072dc:	6839      	ldr	r1, [r7, #0]
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 fa49 	bl	8007776 <USBD_CtlError>
            err++;
 80072e4:	7afb      	ldrb	r3, [r7, #11]
 80072e6:	3301      	adds	r3, #1
 80072e8:	72fb      	strb	r3, [r7, #11]
          break;
 80072ea:	e007      	b.n	80072fc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80072ec:	6839      	ldr	r1, [r7, #0]
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 fa41 	bl	8007776 <USBD_CtlError>
          err++;
 80072f4:	7afb      	ldrb	r3, [r7, #11]
 80072f6:	3301      	adds	r3, #1
 80072f8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80072fa:	bf00      	nop
      }
      break;
 80072fc:	e037      	b.n	800736e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	7c1b      	ldrb	r3, [r3, #16]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d109      	bne.n	800731a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800730c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800730e:	f107 0208 	add.w	r2, r7, #8
 8007312:	4610      	mov	r0, r2
 8007314:	4798      	blx	r3
 8007316:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007318:	e029      	b.n	800736e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800731a:	6839      	ldr	r1, [r7, #0]
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f000 fa2a 	bl	8007776 <USBD_CtlError>
        err++;
 8007322:	7afb      	ldrb	r3, [r7, #11]
 8007324:	3301      	adds	r3, #1
 8007326:	72fb      	strb	r3, [r7, #11]
      break;
 8007328:	e021      	b.n	800736e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	7c1b      	ldrb	r3, [r3, #16]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d10d      	bne.n	800734e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800733a:	f107 0208 	add.w	r2, r7, #8
 800733e:	4610      	mov	r0, r2
 8007340:	4798      	blx	r3
 8007342:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	3301      	adds	r3, #1
 8007348:	2207      	movs	r2, #7
 800734a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800734c:	e00f      	b.n	800736e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800734e:	6839      	ldr	r1, [r7, #0]
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 fa10 	bl	8007776 <USBD_CtlError>
        err++;
 8007356:	7afb      	ldrb	r3, [r7, #11]
 8007358:	3301      	adds	r3, #1
 800735a:	72fb      	strb	r3, [r7, #11]
      break;
 800735c:	e007      	b.n	800736e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800735e:	6839      	ldr	r1, [r7, #0]
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 fa08 	bl	8007776 <USBD_CtlError>
      err++;
 8007366:	7afb      	ldrb	r3, [r7, #11]
 8007368:	3301      	adds	r3, #1
 800736a:	72fb      	strb	r3, [r7, #11]
      break;
 800736c:	bf00      	nop
  }

  if (err != 0U)
 800736e:	7afb      	ldrb	r3, [r7, #11]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d11e      	bne.n	80073b2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	88db      	ldrh	r3, [r3, #6]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d016      	beq.n	80073aa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800737c:	893b      	ldrh	r3, [r7, #8]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d00e      	beq.n	80073a0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	88da      	ldrh	r2, [r3, #6]
 8007386:	893b      	ldrh	r3, [r7, #8]
 8007388:	4293      	cmp	r3, r2
 800738a:	bf28      	it	cs
 800738c:	4613      	movcs	r3, r2
 800738e:	b29b      	uxth	r3, r3
 8007390:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007392:	893b      	ldrh	r3, [r7, #8]
 8007394:	461a      	mov	r2, r3
 8007396:	68f9      	ldr	r1, [r7, #12]
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 fa5d 	bl	8007858 <USBD_CtlSendData>
 800739e:	e009      	b.n	80073b4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80073a0:	6839      	ldr	r1, [r7, #0]
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 f9e7 	bl	8007776 <USBD_CtlError>
 80073a8:	e004      	b.n	80073b4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 faae 	bl	800790c <USBD_CtlSendStatus>
 80073b0:	e000      	b.n	80073b4 <USBD_GetDescriptor+0x2cc>
    return;
 80073b2:	bf00      	nop
  }
}
 80073b4:	3710      	adds	r7, #16
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop

080073bc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	889b      	ldrh	r3, [r3, #4]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d131      	bne.n	8007432 <USBD_SetAddress+0x76>
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	88db      	ldrh	r3, [r3, #6]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d12d      	bne.n	8007432 <USBD_SetAddress+0x76>
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	885b      	ldrh	r3, [r3, #2]
 80073da:	2b7f      	cmp	r3, #127	; 0x7f
 80073dc:	d829      	bhi.n	8007432 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	885b      	ldrh	r3, [r3, #2]
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	2b03      	cmp	r3, #3
 80073f4:	d104      	bne.n	8007400 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80073f6:	6839      	ldr	r1, [r7, #0]
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 f9bc 	bl	8007776 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073fe:	e01d      	b.n	800743c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	7bfa      	ldrb	r2, [r7, #15]
 8007404:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007408:	7bfb      	ldrb	r3, [r7, #15]
 800740a:	4619      	mov	r1, r3
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 ff1f 	bl	8008250 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 fa7a 	bl	800790c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007418:	7bfb      	ldrb	r3, [r7, #15]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d004      	beq.n	8007428 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2202      	movs	r2, #2
 8007422:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007426:	e009      	b.n	800743c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2201      	movs	r2, #1
 800742c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007430:	e004      	b.n	800743c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007432:	6839      	ldr	r1, [r7, #0]
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 f99e 	bl	8007776 <USBD_CtlError>
  }
}
 800743a:	bf00      	nop
 800743c:	bf00      	nop
 800743e:	3710      	adds	r7, #16
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800744e:	2300      	movs	r3, #0
 8007450:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	885b      	ldrh	r3, [r3, #2]
 8007456:	b2da      	uxtb	r2, r3
 8007458:	4b4e      	ldr	r3, [pc, #312]	; (8007594 <USBD_SetConfig+0x150>)
 800745a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800745c:	4b4d      	ldr	r3, [pc, #308]	; (8007594 <USBD_SetConfig+0x150>)
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	2b01      	cmp	r3, #1
 8007462:	d905      	bls.n	8007470 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007464:	6839      	ldr	r1, [r7, #0]
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 f985 	bl	8007776 <USBD_CtlError>
    return USBD_FAIL;
 800746c:	2303      	movs	r3, #3
 800746e:	e08c      	b.n	800758a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007476:	b2db      	uxtb	r3, r3
 8007478:	2b02      	cmp	r3, #2
 800747a:	d002      	beq.n	8007482 <USBD_SetConfig+0x3e>
 800747c:	2b03      	cmp	r3, #3
 800747e:	d029      	beq.n	80074d4 <USBD_SetConfig+0x90>
 8007480:	e075      	b.n	800756e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007482:	4b44      	ldr	r3, [pc, #272]	; (8007594 <USBD_SetConfig+0x150>)
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d020      	beq.n	80074cc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800748a:	4b42      	ldr	r3, [pc, #264]	; (8007594 <USBD_SetConfig+0x150>)
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	461a      	mov	r2, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007494:	4b3f      	ldr	r3, [pc, #252]	; (8007594 <USBD_SetConfig+0x150>)
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	4619      	mov	r1, r3
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f7fe ffe7 	bl	800646e <USBD_SetClassConfig>
 80074a0:	4603      	mov	r3, r0
 80074a2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80074a4:	7bfb      	ldrb	r3, [r7, #15]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d008      	beq.n	80074bc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80074aa:	6839      	ldr	r1, [r7, #0]
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 f962 	bl	8007776 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2202      	movs	r2, #2
 80074b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80074ba:	e065      	b.n	8007588 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 fa25 	bl	800790c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2203      	movs	r2, #3
 80074c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80074ca:	e05d      	b.n	8007588 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 fa1d 	bl	800790c <USBD_CtlSendStatus>
      break;
 80074d2:	e059      	b.n	8007588 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80074d4:	4b2f      	ldr	r3, [pc, #188]	; (8007594 <USBD_SetConfig+0x150>)
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d112      	bne.n	8007502 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2202      	movs	r2, #2
 80074e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80074e4:	4b2b      	ldr	r3, [pc, #172]	; (8007594 <USBD_SetConfig+0x150>)
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	461a      	mov	r2, r3
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80074ee:	4b29      	ldr	r3, [pc, #164]	; (8007594 <USBD_SetConfig+0x150>)
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	4619      	mov	r1, r3
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f7fe ffd6 	bl	80064a6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 fa06 	bl	800790c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007500:	e042      	b.n	8007588 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007502:	4b24      	ldr	r3, [pc, #144]	; (8007594 <USBD_SetConfig+0x150>)
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	461a      	mov	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	429a      	cmp	r2, r3
 800750e:	d02a      	beq.n	8007566 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	b2db      	uxtb	r3, r3
 8007516:	4619      	mov	r1, r3
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f7fe ffc4 	bl	80064a6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800751e:	4b1d      	ldr	r3, [pc, #116]	; (8007594 <USBD_SetConfig+0x150>)
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	461a      	mov	r2, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007528:	4b1a      	ldr	r3, [pc, #104]	; (8007594 <USBD_SetConfig+0x150>)
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	4619      	mov	r1, r3
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f7fe ff9d 	bl	800646e <USBD_SetClassConfig>
 8007534:	4603      	mov	r3, r0
 8007536:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007538:	7bfb      	ldrb	r3, [r7, #15]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00f      	beq.n	800755e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800753e:	6839      	ldr	r1, [r7, #0]
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 f918 	bl	8007776 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	b2db      	uxtb	r3, r3
 800754c:	4619      	mov	r1, r3
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f7fe ffa9 	bl	80064a6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2202      	movs	r2, #2
 8007558:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800755c:	e014      	b.n	8007588 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 f9d4 	bl	800790c <USBD_CtlSendStatus>
      break;
 8007564:	e010      	b.n	8007588 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 f9d0 	bl	800790c <USBD_CtlSendStatus>
      break;
 800756c:	e00c      	b.n	8007588 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800756e:	6839      	ldr	r1, [r7, #0]
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 f900 	bl	8007776 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007576:	4b07      	ldr	r3, [pc, #28]	; (8007594 <USBD_SetConfig+0x150>)
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	4619      	mov	r1, r3
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f7fe ff92 	bl	80064a6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007582:	2303      	movs	r3, #3
 8007584:	73fb      	strb	r3, [r7, #15]
      break;
 8007586:	bf00      	nop
  }

  return ret;
 8007588:	7bfb      	ldrb	r3, [r7, #15]
}
 800758a:	4618      	mov	r0, r3
 800758c:	3710      	adds	r7, #16
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	20000258 	.word	0x20000258

08007598 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	88db      	ldrh	r3, [r3, #6]
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d004      	beq.n	80075b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80075aa:	6839      	ldr	r1, [r7, #0]
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 f8e2 	bl	8007776 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80075b2:	e023      	b.n	80075fc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	2b02      	cmp	r3, #2
 80075be:	dc02      	bgt.n	80075c6 <USBD_GetConfig+0x2e>
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	dc03      	bgt.n	80075cc <USBD_GetConfig+0x34>
 80075c4:	e015      	b.n	80075f2 <USBD_GetConfig+0x5a>
 80075c6:	2b03      	cmp	r3, #3
 80075c8:	d00b      	beq.n	80075e2 <USBD_GetConfig+0x4a>
 80075ca:	e012      	b.n	80075f2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	3308      	adds	r3, #8
 80075d6:	2201      	movs	r2, #1
 80075d8:	4619      	mov	r1, r3
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 f93c 	bl	8007858 <USBD_CtlSendData>
        break;
 80075e0:	e00c      	b.n	80075fc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	3304      	adds	r3, #4
 80075e6:	2201      	movs	r2, #1
 80075e8:	4619      	mov	r1, r3
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 f934 	bl	8007858 <USBD_CtlSendData>
        break;
 80075f0:	e004      	b.n	80075fc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80075f2:	6839      	ldr	r1, [r7, #0]
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 f8be 	bl	8007776 <USBD_CtlError>
        break;
 80075fa:	bf00      	nop
}
 80075fc:	bf00      	nop
 80075fe:	3708      	adds	r7, #8
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b082      	sub	sp, #8
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007614:	b2db      	uxtb	r3, r3
 8007616:	3b01      	subs	r3, #1
 8007618:	2b02      	cmp	r3, #2
 800761a:	d81e      	bhi.n	800765a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	88db      	ldrh	r3, [r3, #6]
 8007620:	2b02      	cmp	r3, #2
 8007622:	d004      	beq.n	800762e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007624:	6839      	ldr	r1, [r7, #0]
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 f8a5 	bl	8007776 <USBD_CtlError>
        break;
 800762c:	e01a      	b.n	8007664 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2201      	movs	r2, #1
 8007632:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800763a:	2b00      	cmp	r3, #0
 800763c:	d005      	beq.n	800764a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	68db      	ldr	r3, [r3, #12]
 8007642:	f043 0202 	orr.w	r2, r3, #2
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	330c      	adds	r3, #12
 800764e:	2202      	movs	r2, #2
 8007650:	4619      	mov	r1, r3
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 f900 	bl	8007858 <USBD_CtlSendData>
      break;
 8007658:	e004      	b.n	8007664 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800765a:	6839      	ldr	r1, [r7, #0]
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 f88a 	bl	8007776 <USBD_CtlError>
      break;
 8007662:	bf00      	nop
  }
}
 8007664:	bf00      	nop
 8007666:	3708      	adds	r7, #8
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b082      	sub	sp, #8
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	885b      	ldrh	r3, [r3, #2]
 800767a:	2b01      	cmp	r3, #1
 800767c:	d107      	bne.n	800768e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2201      	movs	r2, #1
 8007682:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 f940 	bl	800790c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800768c:	e013      	b.n	80076b6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	885b      	ldrh	r3, [r3, #2]
 8007692:	2b02      	cmp	r3, #2
 8007694:	d10b      	bne.n	80076ae <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	889b      	ldrh	r3, [r3, #4]
 800769a:	0a1b      	lsrs	r3, r3, #8
 800769c:	b29b      	uxth	r3, r3
 800769e:	b2da      	uxtb	r2, r3
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 f930 	bl	800790c <USBD_CtlSendStatus>
}
 80076ac:	e003      	b.n	80076b6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80076ae:	6839      	ldr	r1, [r7, #0]
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 f860 	bl	8007776 <USBD_CtlError>
}
 80076b6:	bf00      	nop
 80076b8:	3708      	adds	r7, #8
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076be:	b580      	push	{r7, lr}
 80076c0:	b082      	sub	sp, #8
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
 80076c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	3b01      	subs	r3, #1
 80076d2:	2b02      	cmp	r3, #2
 80076d4:	d80b      	bhi.n	80076ee <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	885b      	ldrh	r3, [r3, #2]
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d10c      	bne.n	80076f8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 f910 	bl	800790c <USBD_CtlSendStatus>
      }
      break;
 80076ec:	e004      	b.n	80076f8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80076ee:	6839      	ldr	r1, [r7, #0]
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 f840 	bl	8007776 <USBD_CtlError>
      break;
 80076f6:	e000      	b.n	80076fa <USBD_ClrFeature+0x3c>
      break;
 80076f8:	bf00      	nop
  }
}
 80076fa:	bf00      	nop
 80076fc:	3708      	adds	r7, #8
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}

08007702 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007702:	b580      	push	{r7, lr}
 8007704:	b084      	sub	sp, #16
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
 800770a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	781a      	ldrb	r2, [r3, #0]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	3301      	adds	r3, #1
 800771c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	781a      	ldrb	r2, [r3, #0]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	3301      	adds	r3, #1
 800772a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800772c:	68f8      	ldr	r0, [r7, #12]
 800772e:	f7ff fa41 	bl	8006bb4 <SWAPBYTE>
 8007732:	4603      	mov	r3, r0
 8007734:	461a      	mov	r2, r3
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	3301      	adds	r3, #1
 800773e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	3301      	adds	r3, #1
 8007744:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007746:	68f8      	ldr	r0, [r7, #12]
 8007748:	f7ff fa34 	bl	8006bb4 <SWAPBYTE>
 800774c:	4603      	mov	r3, r0
 800774e:	461a      	mov	r2, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	3301      	adds	r3, #1
 8007758:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	3301      	adds	r3, #1
 800775e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007760:	68f8      	ldr	r0, [r7, #12]
 8007762:	f7ff fa27 	bl	8006bb4 <SWAPBYTE>
 8007766:	4603      	mov	r3, r0
 8007768:	461a      	mov	r2, r3
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	80da      	strh	r2, [r3, #6]
}
 800776e:	bf00      	nop
 8007770:	3710      	adds	r7, #16
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}

08007776 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007776:	b580      	push	{r7, lr}
 8007778:	b082      	sub	sp, #8
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
 800777e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007780:	2180      	movs	r1, #128	; 0x80
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 fcfa 	bl	800817c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007788:	2100      	movs	r1, #0
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 fcf6 	bl	800817c <USBD_LL_StallEP>
}
 8007790:	bf00      	nop
 8007792:	3708      	adds	r7, #8
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b086      	sub	sp, #24
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80077a4:	2300      	movs	r3, #0
 80077a6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d036      	beq.n	800781c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80077b2:	6938      	ldr	r0, [r7, #16]
 80077b4:	f000 f836 	bl	8007824 <USBD_GetLen>
 80077b8:	4603      	mov	r3, r0
 80077ba:	3301      	adds	r3, #1
 80077bc:	b29b      	uxth	r3, r3
 80077be:	005b      	lsls	r3, r3, #1
 80077c0:	b29a      	uxth	r2, r3
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80077c6:	7dfb      	ldrb	r3, [r7, #23]
 80077c8:	68ba      	ldr	r2, [r7, #8]
 80077ca:	4413      	add	r3, r2
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	7812      	ldrb	r2, [r2, #0]
 80077d0:	701a      	strb	r2, [r3, #0]
  idx++;
 80077d2:	7dfb      	ldrb	r3, [r7, #23]
 80077d4:	3301      	adds	r3, #1
 80077d6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80077d8:	7dfb      	ldrb	r3, [r7, #23]
 80077da:	68ba      	ldr	r2, [r7, #8]
 80077dc:	4413      	add	r3, r2
 80077de:	2203      	movs	r2, #3
 80077e0:	701a      	strb	r2, [r3, #0]
  idx++;
 80077e2:	7dfb      	ldrb	r3, [r7, #23]
 80077e4:	3301      	adds	r3, #1
 80077e6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80077e8:	e013      	b.n	8007812 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80077ea:	7dfb      	ldrb	r3, [r7, #23]
 80077ec:	68ba      	ldr	r2, [r7, #8]
 80077ee:	4413      	add	r3, r2
 80077f0:	693a      	ldr	r2, [r7, #16]
 80077f2:	7812      	ldrb	r2, [r2, #0]
 80077f4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	3301      	adds	r3, #1
 80077fa:	613b      	str	r3, [r7, #16]
    idx++;
 80077fc:	7dfb      	ldrb	r3, [r7, #23]
 80077fe:	3301      	adds	r3, #1
 8007800:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007802:	7dfb      	ldrb	r3, [r7, #23]
 8007804:	68ba      	ldr	r2, [r7, #8]
 8007806:	4413      	add	r3, r2
 8007808:	2200      	movs	r2, #0
 800780a:	701a      	strb	r2, [r3, #0]
    idx++;
 800780c:	7dfb      	ldrb	r3, [r7, #23]
 800780e:	3301      	adds	r3, #1
 8007810:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d1e7      	bne.n	80077ea <USBD_GetString+0x52>
 800781a:	e000      	b.n	800781e <USBD_GetString+0x86>
    return;
 800781c:	bf00      	nop
  }
}
 800781e:	3718      	adds	r7, #24
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007824:	b480      	push	{r7}
 8007826:	b085      	sub	sp, #20
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800782c:	2300      	movs	r3, #0
 800782e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007834:	e005      	b.n	8007842 <USBD_GetLen+0x1e>
  {
    len++;
 8007836:	7bfb      	ldrb	r3, [r7, #15]
 8007838:	3301      	adds	r3, #1
 800783a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	3301      	adds	r3, #1
 8007840:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d1f5      	bne.n	8007836 <USBD_GetLen+0x12>
  }

  return len;
 800784a:	7bfb      	ldrb	r3, [r7, #15]
}
 800784c:	4618      	mov	r0, r3
 800784e:	3714      	adds	r7, #20
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	60f8      	str	r0, [r7, #12]
 8007860:	60b9      	str	r1, [r7, #8]
 8007862:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2202      	movs	r2, #2
 8007868:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	68ba      	ldr	r2, [r7, #8]
 800787c:	2100      	movs	r1, #0
 800787e:	68f8      	ldr	r0, [r7, #12]
 8007880:	f000 fd05 	bl	800828e <USBD_LL_Transmit>

  return USBD_OK;
 8007884:	2300      	movs	r3, #0
}
 8007886:	4618      	mov	r0, r3
 8007888:	3710      	adds	r7, #16
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}

0800788e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800788e:	b580      	push	{r7, lr}
 8007890:	b084      	sub	sp, #16
 8007892:	af00      	add	r7, sp, #0
 8007894:	60f8      	str	r0, [r7, #12]
 8007896:	60b9      	str	r1, [r7, #8]
 8007898:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	68ba      	ldr	r2, [r7, #8]
 800789e:	2100      	movs	r1, #0
 80078a0:	68f8      	ldr	r0, [r7, #12]
 80078a2:	f000 fcf4 	bl	800828e <USBD_LL_Transmit>

  return USBD_OK;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3710      	adds	r7, #16
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	60b9      	str	r1, [r7, #8]
 80078ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2203      	movs	r2, #3
 80078c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	68ba      	ldr	r2, [r7, #8]
 80078d8:	2100      	movs	r1, #0
 80078da:	68f8      	ldr	r0, [r7, #12]
 80078dc:	f000 fcf8 	bl	80082d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80078e0:	2300      	movs	r3, #0
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3710      	adds	r7, #16
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}

080078ea <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80078ea:	b580      	push	{r7, lr}
 80078ec:	b084      	sub	sp, #16
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	60f8      	str	r0, [r7, #12]
 80078f2:	60b9      	str	r1, [r7, #8]
 80078f4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	68ba      	ldr	r2, [r7, #8]
 80078fa:	2100      	movs	r1, #0
 80078fc:	68f8      	ldr	r0, [r7, #12]
 80078fe:	f000 fce7 	bl	80082d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007902:	2300      	movs	r3, #0
}
 8007904:	4618      	mov	r0, r3
 8007906:	3710      	adds	r7, #16
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b082      	sub	sp, #8
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2204      	movs	r2, #4
 8007918:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800791c:	2300      	movs	r3, #0
 800791e:	2200      	movs	r2, #0
 8007920:	2100      	movs	r1, #0
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 fcb3 	bl	800828e <USBD_LL_Transmit>

  return USBD_OK;
 8007928:	2300      	movs	r3, #0
}
 800792a:	4618      	mov	r0, r3
 800792c:	3708      	adds	r7, #8
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}

08007932 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007932:	b580      	push	{r7, lr}
 8007934:	b082      	sub	sp, #8
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2205      	movs	r2, #5
 800793e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007942:	2300      	movs	r3, #0
 8007944:	2200      	movs	r2, #0
 8007946:	2100      	movs	r1, #0
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 fcc1 	bl	80082d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800794e:	2300      	movs	r3, #0
}
 8007950:	4618      	mov	r0, r3
 8007952:	3708      	adds	r7, #8
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800795c:	2200      	movs	r2, #0
 800795e:	4912      	ldr	r1, [pc, #72]	; (80079a8 <MX_USB_DEVICE_Init+0x50>)
 8007960:	4812      	ldr	r0, [pc, #72]	; (80079ac <MX_USB_DEVICE_Init+0x54>)
 8007962:	f7fe fd07 	bl	8006374 <USBD_Init>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d001      	beq.n	8007970 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800796c:	f7f9 f824 	bl	80009b8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007970:	490f      	ldr	r1, [pc, #60]	; (80079b0 <MX_USB_DEVICE_Init+0x58>)
 8007972:	480e      	ldr	r0, [pc, #56]	; (80079ac <MX_USB_DEVICE_Init+0x54>)
 8007974:	f7fe fd2e 	bl	80063d4 <USBD_RegisterClass>
 8007978:	4603      	mov	r3, r0
 800797a:	2b00      	cmp	r3, #0
 800797c:	d001      	beq.n	8007982 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800797e:	f7f9 f81b 	bl	80009b8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007982:	490c      	ldr	r1, [pc, #48]	; (80079b4 <MX_USB_DEVICE_Init+0x5c>)
 8007984:	4809      	ldr	r0, [pc, #36]	; (80079ac <MX_USB_DEVICE_Init+0x54>)
 8007986:	f7fe fc65 	bl	8006254 <USBD_CDC_RegisterInterface>
 800798a:	4603      	mov	r3, r0
 800798c:	2b00      	cmp	r3, #0
 800798e:	d001      	beq.n	8007994 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007990:	f7f9 f812 	bl	80009b8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007994:	4805      	ldr	r0, [pc, #20]	; (80079ac <MX_USB_DEVICE_Init+0x54>)
 8007996:	f7fe fd53 	bl	8006440 <USBD_Start>
 800799a:	4603      	mov	r3, r0
 800799c:	2b00      	cmp	r3, #0
 800799e:	d001      	beq.n	80079a4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80079a0:	f7f9 f80a 	bl	80009b8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80079a4:	bf00      	nop
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	200000ac 	.word	0x200000ac
 80079ac:	2000025c 	.word	0x2000025c
 80079b0:	20000018 	.word	0x20000018
 80079b4:	20000098 	.word	0x20000098

080079b8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80079bc:	2200      	movs	r2, #0
 80079be:	4905      	ldr	r1, [pc, #20]	; (80079d4 <CDC_Init_FS+0x1c>)
 80079c0:	4805      	ldr	r0, [pc, #20]	; (80079d8 <CDC_Init_FS+0x20>)
 80079c2:	f7fe fc61 	bl	8006288 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80079c6:	4905      	ldr	r1, [pc, #20]	; (80079dc <CDC_Init_FS+0x24>)
 80079c8:	4803      	ldr	r0, [pc, #12]	; (80079d8 <CDC_Init_FS+0x20>)
 80079ca:	f7fe fc7f 	bl	80062cc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80079ce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	bd80      	pop	{r7, pc}
 80079d4:	20000dbc 	.word	0x20000dbc
 80079d8:	2000025c 	.word	0x2000025c
 80079dc:	200005bc 	.word	0x200005bc

080079e0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80079e0:	b480      	push	{r7}
 80079e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80079e4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	4603      	mov	r3, r0
 80079f8:	6039      	str	r1, [r7, #0]
 80079fa:	71fb      	strb	r3, [r7, #7]
 80079fc:	4613      	mov	r3, r2
 80079fe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007a00:	79fb      	ldrb	r3, [r7, #7]
 8007a02:	2b23      	cmp	r3, #35	; 0x23
 8007a04:	d84a      	bhi.n	8007a9c <CDC_Control_FS+0xac>
 8007a06:	a201      	add	r2, pc, #4	; (adr r2, 8007a0c <CDC_Control_FS+0x1c>)
 8007a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a0c:	08007a9d 	.word	0x08007a9d
 8007a10:	08007a9d 	.word	0x08007a9d
 8007a14:	08007a9d 	.word	0x08007a9d
 8007a18:	08007a9d 	.word	0x08007a9d
 8007a1c:	08007a9d 	.word	0x08007a9d
 8007a20:	08007a9d 	.word	0x08007a9d
 8007a24:	08007a9d 	.word	0x08007a9d
 8007a28:	08007a9d 	.word	0x08007a9d
 8007a2c:	08007a9d 	.word	0x08007a9d
 8007a30:	08007a9d 	.word	0x08007a9d
 8007a34:	08007a9d 	.word	0x08007a9d
 8007a38:	08007a9d 	.word	0x08007a9d
 8007a3c:	08007a9d 	.word	0x08007a9d
 8007a40:	08007a9d 	.word	0x08007a9d
 8007a44:	08007a9d 	.word	0x08007a9d
 8007a48:	08007a9d 	.word	0x08007a9d
 8007a4c:	08007a9d 	.word	0x08007a9d
 8007a50:	08007a9d 	.word	0x08007a9d
 8007a54:	08007a9d 	.word	0x08007a9d
 8007a58:	08007a9d 	.word	0x08007a9d
 8007a5c:	08007a9d 	.word	0x08007a9d
 8007a60:	08007a9d 	.word	0x08007a9d
 8007a64:	08007a9d 	.word	0x08007a9d
 8007a68:	08007a9d 	.word	0x08007a9d
 8007a6c:	08007a9d 	.word	0x08007a9d
 8007a70:	08007a9d 	.word	0x08007a9d
 8007a74:	08007a9d 	.word	0x08007a9d
 8007a78:	08007a9d 	.word	0x08007a9d
 8007a7c:	08007a9d 	.word	0x08007a9d
 8007a80:	08007a9d 	.word	0x08007a9d
 8007a84:	08007a9d 	.word	0x08007a9d
 8007a88:	08007a9d 	.word	0x08007a9d
 8007a8c:	08007a9d 	.word	0x08007a9d
 8007a90:	08007a9d 	.word	0x08007a9d
 8007a94:	08007a9d 	.word	0x08007a9d
 8007a98:	08007a9d 	.word	0x08007a9d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007a9c:	bf00      	nop
  }

  return (USBD_OK);
 8007a9e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007ab6:	6879      	ldr	r1, [r7, #4]
 8007ab8:	4821      	ldr	r0, [pc, #132]	; (8007b40 <CDC_Receive_FS+0x94>)
 8007aba:	f7fe fc07 	bl	80062cc <USBD_CDC_SetRxBuffer>
  //START CODE FOR LED ON/OFF LOGIC
  for (uint32_t i = 0; i < *Len; ++i) {
 8007abe:	2300      	movs	r3, #0
 8007ac0:	60fb      	str	r3, [r7, #12]
 8007ac2:	e02f      	b.n	8007b24 <CDC_Receive_FS+0x78>
      // Konec ukaza (npr. nova vrstica ali povratni znak)
      if (Buf[i] == '\n' || Buf[i] == '\r') {
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	4413      	add	r3, r2
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	2b0a      	cmp	r3, #10
 8007ace:	d005      	beq.n	8007adc <CDC_Receive_FS+0x30>
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	4413      	add	r3, r2
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	2b0d      	cmp	r3, #13
 8007ada:	d10e      	bne.n	8007afa <CDC_Receive_FS+0x4e>
        buffer[bufferIndex++] = '\0'; // Zaključimo niz ukaza z ničelnim znakom
 8007adc:	4b19      	ldr	r3, [pc, #100]	; (8007b44 <CDC_Receive_FS+0x98>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	1c5a      	adds	r2, r3, #1
 8007ae2:	4918      	ldr	r1, [pc, #96]	; (8007b44 <CDC_Receive_FS+0x98>)
 8007ae4:	600a      	str	r2, [r1, #0]
 8007ae6:	4a18      	ldr	r2, [pc, #96]	; (8007b48 <CDC_Receive_FS+0x9c>)
 8007ae8:	2100      	movs	r1, #0
 8007aea:	54d1      	strb	r1, [r2, r3]
        ProcessCommand(buffer);       // Obdelamo prejeti ukaz
 8007aec:	4816      	ldr	r0, [pc, #88]	; (8007b48 <CDC_Receive_FS+0x9c>)
 8007aee:	f7f8 fcff 	bl	80004f0 <ProcessCommand>
        bufferIndex = 0;              // Ponastavimo indeks za naslednji ukaz
 8007af2:	4b14      	ldr	r3, [pc, #80]	; (8007b44 <CDC_Receive_FS+0x98>)
 8007af4:	2200      	movs	r2, #0
 8007af6:	601a      	str	r2, [r3, #0]
        continue;
 8007af8:	e011      	b.n	8007b1e <CDC_Receive_FS+0x72>
      }

      // Preprečimo prelivanje medpomnilnika
      if (bufferIndex >= BUFFER_SIZE - 1) {
 8007afa:	4b12      	ldr	r3, [pc, #72]	; (8007b44 <CDC_Receive_FS+0x98>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	2b7e      	cmp	r3, #126	; 0x7e
 8007b00:	d902      	bls.n	8007b08 <CDC_Receive_FS+0x5c>
        bufferIndex = 0;  // Ponastavimo, če se preseže velikost medpomnilnika
 8007b02:	4b10      	ldr	r3, [pc, #64]	; (8007b44 <CDC_Receive_FS+0x98>)
 8007b04:	2200      	movs	r2, #0
 8007b06:	601a      	str	r2, [r3, #0]
      }

      buffer[bufferIndex++] = Buf[i]; // Dodamo znak v medpomnilnik
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	441a      	add	r2, r3
 8007b0e:	4b0d      	ldr	r3, [pc, #52]	; (8007b44 <CDC_Receive_FS+0x98>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	1c59      	adds	r1, r3, #1
 8007b14:	480b      	ldr	r0, [pc, #44]	; (8007b44 <CDC_Receive_FS+0x98>)
 8007b16:	6001      	str	r1, [r0, #0]
 8007b18:	7811      	ldrb	r1, [r2, #0]
 8007b1a:	4a0b      	ldr	r2, [pc, #44]	; (8007b48 <CDC_Receive_FS+0x9c>)
 8007b1c:	54d1      	strb	r1, [r2, r3]
  for (uint32_t i = 0; i < *Len; ++i) {
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	3301      	adds	r3, #1
 8007b22:	60fb      	str	r3, [r7, #12]
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	68fa      	ldr	r2, [r7, #12]
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d3ca      	bcc.n	8007ac4 <CDC_Receive_FS+0x18>
    }
  //END CODE FOR LED
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007b2e:	4804      	ldr	r0, [pc, #16]	; (8007b40 <CDC_Receive_FS+0x94>)
 8007b30:	f7fe fbea 	bl	8006308 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007b34:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3710      	adds	r7, #16
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	2000025c 	.word	0x2000025c
 8007b44:	200005b8 	.word	0x200005b8
 8007b48:	20000538 	.word	0x20000538

08007b4c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b087      	sub	sp, #28
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	60f8      	str	r0, [r7, #12]
 8007b54:	60b9      	str	r1, [r7, #8]
 8007b56:	4613      	mov	r3, r2
 8007b58:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007b5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	371c      	adds	r7, #28
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr
	...

08007b70 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	4603      	mov	r3, r0
 8007b78:	6039      	str	r1, [r7, #0]
 8007b7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	2212      	movs	r2, #18
 8007b80:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007b82:	4b03      	ldr	r3, [pc, #12]	; (8007b90 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	370c      	adds	r7, #12
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr
 8007b90:	200000c8 	.word	0x200000c8

08007b94 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	6039      	str	r1, [r7, #0]
 8007b9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	2204      	movs	r2, #4
 8007ba4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007ba6:	4b03      	ldr	r3, [pc, #12]	; (8007bb4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	370c      	adds	r7, #12
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr
 8007bb4:	200000dc 	.word	0x200000dc

08007bb8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	6039      	str	r1, [r7, #0]
 8007bc2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007bc4:	79fb      	ldrb	r3, [r7, #7]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d105      	bne.n	8007bd6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007bca:	683a      	ldr	r2, [r7, #0]
 8007bcc:	4907      	ldr	r1, [pc, #28]	; (8007bec <USBD_FS_ProductStrDescriptor+0x34>)
 8007bce:	4808      	ldr	r0, [pc, #32]	; (8007bf0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007bd0:	f7ff fde2 	bl	8007798 <USBD_GetString>
 8007bd4:	e004      	b.n	8007be0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007bd6:	683a      	ldr	r2, [r7, #0]
 8007bd8:	4904      	ldr	r1, [pc, #16]	; (8007bec <USBD_FS_ProductStrDescriptor+0x34>)
 8007bda:	4805      	ldr	r0, [pc, #20]	; (8007bf0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007bdc:	f7ff fddc 	bl	8007798 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007be0:	4b02      	ldr	r3, [pc, #8]	; (8007bec <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3708      	adds	r7, #8
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	200015bc 	.word	0x200015bc
 8007bf0:	08008438 	.word	0x08008438

08007bf4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	6039      	str	r1, [r7, #0]
 8007bfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007c00:	683a      	ldr	r2, [r7, #0]
 8007c02:	4904      	ldr	r1, [pc, #16]	; (8007c14 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007c04:	4804      	ldr	r0, [pc, #16]	; (8007c18 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007c06:	f7ff fdc7 	bl	8007798 <USBD_GetString>
  return USBD_StrDesc;
 8007c0a:	4b02      	ldr	r3, [pc, #8]	; (8007c14 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3708      	adds	r7, #8
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}
 8007c14:	200015bc 	.word	0x200015bc
 8007c18:	08008450 	.word	0x08008450

08007c1c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	4603      	mov	r3, r0
 8007c24:	6039      	str	r1, [r7, #0]
 8007c26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	221a      	movs	r2, #26
 8007c2c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007c2e:	f000 f843 	bl	8007cb8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007c32:	4b02      	ldr	r3, [pc, #8]	; (8007c3c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3708      	adds	r7, #8
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	200000e0 	.word	0x200000e0

08007c40 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	4603      	mov	r3, r0
 8007c48:	6039      	str	r1, [r7, #0]
 8007c4a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007c4c:	79fb      	ldrb	r3, [r7, #7]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d105      	bne.n	8007c5e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c52:	683a      	ldr	r2, [r7, #0]
 8007c54:	4907      	ldr	r1, [pc, #28]	; (8007c74 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007c56:	4808      	ldr	r0, [pc, #32]	; (8007c78 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c58:	f7ff fd9e 	bl	8007798 <USBD_GetString>
 8007c5c:	e004      	b.n	8007c68 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c5e:	683a      	ldr	r2, [r7, #0]
 8007c60:	4904      	ldr	r1, [pc, #16]	; (8007c74 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007c62:	4805      	ldr	r0, [pc, #20]	; (8007c78 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c64:	f7ff fd98 	bl	8007798 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c68:	4b02      	ldr	r3, [pc, #8]	; (8007c74 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3708      	adds	r7, #8
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
 8007c72:	bf00      	nop
 8007c74:	200015bc 	.word	0x200015bc
 8007c78:	08008464 	.word	0x08008464

08007c7c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b082      	sub	sp, #8
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	4603      	mov	r3, r0
 8007c84:	6039      	str	r1, [r7, #0]
 8007c86:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007c88:	79fb      	ldrb	r3, [r7, #7]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d105      	bne.n	8007c9a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c8e:	683a      	ldr	r2, [r7, #0]
 8007c90:	4907      	ldr	r1, [pc, #28]	; (8007cb0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c92:	4808      	ldr	r0, [pc, #32]	; (8007cb4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c94:	f7ff fd80 	bl	8007798 <USBD_GetString>
 8007c98:	e004      	b.n	8007ca4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c9a:	683a      	ldr	r2, [r7, #0]
 8007c9c:	4904      	ldr	r1, [pc, #16]	; (8007cb0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c9e:	4805      	ldr	r0, [pc, #20]	; (8007cb4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007ca0:	f7ff fd7a 	bl	8007798 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ca4:	4b02      	ldr	r3, [pc, #8]	; (8007cb0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3708      	adds	r7, #8
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	200015bc 	.word	0x200015bc
 8007cb4:	08008470 	.word	0x08008470

08007cb8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007cbe:	4b0f      	ldr	r3, [pc, #60]	; (8007cfc <Get_SerialNum+0x44>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007cc4:	4b0e      	ldr	r3, [pc, #56]	; (8007d00 <Get_SerialNum+0x48>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007cca:	4b0e      	ldr	r3, [pc, #56]	; (8007d04 <Get_SerialNum+0x4c>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007cd0:	68fa      	ldr	r2, [r7, #12]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	4413      	add	r3, r2
 8007cd6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d009      	beq.n	8007cf2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007cde:	2208      	movs	r2, #8
 8007ce0:	4909      	ldr	r1, [pc, #36]	; (8007d08 <Get_SerialNum+0x50>)
 8007ce2:	68f8      	ldr	r0, [r7, #12]
 8007ce4:	f000 f814 	bl	8007d10 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007ce8:	2204      	movs	r2, #4
 8007cea:	4908      	ldr	r1, [pc, #32]	; (8007d0c <Get_SerialNum+0x54>)
 8007cec:	68b8      	ldr	r0, [r7, #8]
 8007cee:	f000 f80f 	bl	8007d10 <IntToUnicode>
  }
}
 8007cf2:	bf00      	nop
 8007cf4:	3710      	adds	r7, #16
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	1fff7a10 	.word	0x1fff7a10
 8007d00:	1fff7a14 	.word	0x1fff7a14
 8007d04:	1fff7a18 	.word	0x1fff7a18
 8007d08:	200000e2 	.word	0x200000e2
 8007d0c:	200000f2 	.word	0x200000f2

08007d10 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b087      	sub	sp, #28
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	60f8      	str	r0, [r7, #12]
 8007d18:	60b9      	str	r1, [r7, #8]
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007d22:	2300      	movs	r3, #0
 8007d24:	75fb      	strb	r3, [r7, #23]
 8007d26:	e027      	b.n	8007d78 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	0f1b      	lsrs	r3, r3, #28
 8007d2c:	2b09      	cmp	r3, #9
 8007d2e:	d80b      	bhi.n	8007d48 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	0f1b      	lsrs	r3, r3, #28
 8007d34:	b2da      	uxtb	r2, r3
 8007d36:	7dfb      	ldrb	r3, [r7, #23]
 8007d38:	005b      	lsls	r3, r3, #1
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	440b      	add	r3, r1
 8007d40:	3230      	adds	r2, #48	; 0x30
 8007d42:	b2d2      	uxtb	r2, r2
 8007d44:	701a      	strb	r2, [r3, #0]
 8007d46:	e00a      	b.n	8007d5e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	0f1b      	lsrs	r3, r3, #28
 8007d4c:	b2da      	uxtb	r2, r3
 8007d4e:	7dfb      	ldrb	r3, [r7, #23]
 8007d50:	005b      	lsls	r3, r3, #1
 8007d52:	4619      	mov	r1, r3
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	440b      	add	r3, r1
 8007d58:	3237      	adds	r2, #55	; 0x37
 8007d5a:	b2d2      	uxtb	r2, r2
 8007d5c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	011b      	lsls	r3, r3, #4
 8007d62:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007d64:	7dfb      	ldrb	r3, [r7, #23]
 8007d66:	005b      	lsls	r3, r3, #1
 8007d68:	3301      	adds	r3, #1
 8007d6a:	68ba      	ldr	r2, [r7, #8]
 8007d6c:	4413      	add	r3, r2
 8007d6e:	2200      	movs	r2, #0
 8007d70:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007d72:	7dfb      	ldrb	r3, [r7, #23]
 8007d74:	3301      	adds	r3, #1
 8007d76:	75fb      	strb	r3, [r7, #23]
 8007d78:	7dfa      	ldrb	r2, [r7, #23]
 8007d7a:	79fb      	ldrb	r3, [r7, #7]
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d3d3      	bcc.n	8007d28 <IntToUnicode+0x18>
  }
}
 8007d80:	bf00      	nop
 8007d82:	bf00      	nop
 8007d84:	371c      	adds	r7, #28
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr
	...

08007d90 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b08a      	sub	sp, #40	; 0x28
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d98:	f107 0314 	add.w	r3, r7, #20
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	601a      	str	r2, [r3, #0]
 8007da0:	605a      	str	r2, [r3, #4]
 8007da2:	609a      	str	r2, [r3, #8]
 8007da4:	60da      	str	r2, [r3, #12]
 8007da6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007db0:	d147      	bne.n	8007e42 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007db2:	2300      	movs	r3, #0
 8007db4:	613b      	str	r3, [r7, #16]
 8007db6:	4b25      	ldr	r3, [pc, #148]	; (8007e4c <HAL_PCD_MspInit+0xbc>)
 8007db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dba:	4a24      	ldr	r2, [pc, #144]	; (8007e4c <HAL_PCD_MspInit+0xbc>)
 8007dbc:	f043 0301 	orr.w	r3, r3, #1
 8007dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8007dc2:	4b22      	ldr	r3, [pc, #136]	; (8007e4c <HAL_PCD_MspInit+0xbc>)
 8007dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dc6:	f003 0301 	and.w	r3, r3, #1
 8007dca:	613b      	str	r3, [r7, #16]
 8007dcc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007dce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007dd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007ddc:	f107 0314 	add.w	r3, r7, #20
 8007de0:	4619      	mov	r1, r3
 8007de2:	481b      	ldr	r0, [pc, #108]	; (8007e50 <HAL_PCD_MspInit+0xc0>)
 8007de4:	f7f9 f98c 	bl	8001100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007de8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007dec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007dee:	2302      	movs	r3, #2
 8007df0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007df2:	2300      	movs	r3, #0
 8007df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007df6:	2303      	movs	r3, #3
 8007df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007dfa:	230a      	movs	r3, #10
 8007dfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007dfe:	f107 0314 	add.w	r3, r7, #20
 8007e02:	4619      	mov	r1, r3
 8007e04:	4812      	ldr	r0, [pc, #72]	; (8007e50 <HAL_PCD_MspInit+0xc0>)
 8007e06:	f7f9 f97b 	bl	8001100 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007e0a:	4b10      	ldr	r3, [pc, #64]	; (8007e4c <HAL_PCD_MspInit+0xbc>)
 8007e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e0e:	4a0f      	ldr	r2, [pc, #60]	; (8007e4c <HAL_PCD_MspInit+0xbc>)
 8007e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e14:	6353      	str	r3, [r2, #52]	; 0x34
 8007e16:	2300      	movs	r3, #0
 8007e18:	60fb      	str	r3, [r7, #12]
 8007e1a:	4b0c      	ldr	r3, [pc, #48]	; (8007e4c <HAL_PCD_MspInit+0xbc>)
 8007e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e1e:	4a0b      	ldr	r2, [pc, #44]	; (8007e4c <HAL_PCD_MspInit+0xbc>)
 8007e20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e24:	6453      	str	r3, [r2, #68]	; 0x44
 8007e26:	4b09      	ldr	r3, [pc, #36]	; (8007e4c <HAL_PCD_MspInit+0xbc>)
 8007e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e2e:	60fb      	str	r3, [r7, #12]
 8007e30:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007e32:	2200      	movs	r2, #0
 8007e34:	2100      	movs	r1, #0
 8007e36:	2043      	movs	r0, #67	; 0x43
 8007e38:	f7f9 f92b 	bl	8001092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007e3c:	2043      	movs	r0, #67	; 0x43
 8007e3e:	f7f9 f944 	bl	80010ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007e42:	bf00      	nop
 8007e44:	3728      	adds	r7, #40	; 0x28
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}
 8007e4a:	bf00      	nop
 8007e4c:	40023800 	.word	0x40023800
 8007e50:	40020000 	.word	0x40020000

08007e54 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b082      	sub	sp, #8
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007e68:	4619      	mov	r1, r3
 8007e6a:	4610      	mov	r0, r2
 8007e6c:	f7fe fb35 	bl	80064da <USBD_LL_SetupStage>
}
 8007e70:	bf00      	nop
 8007e72:	3708      	adds	r7, #8
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b082      	sub	sp, #8
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	460b      	mov	r3, r1
 8007e82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007e8a:	78fa      	ldrb	r2, [r7, #3]
 8007e8c:	6879      	ldr	r1, [r7, #4]
 8007e8e:	4613      	mov	r3, r2
 8007e90:	00db      	lsls	r3, r3, #3
 8007e92:	4413      	add	r3, r2
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	440b      	add	r3, r1
 8007e98:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	78fb      	ldrb	r3, [r7, #3]
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	f7fe fb6f 	bl	8006584 <USBD_LL_DataOutStage>
}
 8007ea6:	bf00      	nop
 8007ea8:	3708      	adds	r7, #8
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}

08007eae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007eae:	b580      	push	{r7, lr}
 8007eb0:	b082      	sub	sp, #8
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	6078      	str	r0, [r7, #4]
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007ec0:	78fa      	ldrb	r2, [r7, #3]
 8007ec2:	6879      	ldr	r1, [r7, #4]
 8007ec4:	4613      	mov	r3, r2
 8007ec6:	00db      	lsls	r3, r3, #3
 8007ec8:	4413      	add	r3, r2
 8007eca:	009b      	lsls	r3, r3, #2
 8007ecc:	440b      	add	r3, r1
 8007ece:	334c      	adds	r3, #76	; 0x4c
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	78fb      	ldrb	r3, [r7, #3]
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	f7fe fc08 	bl	80066ea <USBD_LL_DataInStage>
}
 8007eda:	bf00      	nop
 8007edc:	3708      	adds	r7, #8
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}

08007ee2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ee2:	b580      	push	{r7, lr}
 8007ee4:	b082      	sub	sp, #8
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f7fe fd3c 	bl	800696e <USBD_LL_SOF>
}
 8007ef6:	bf00      	nop
 8007ef8:	3708      	adds	r7, #8
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}

08007efe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007efe:	b580      	push	{r7, lr}
 8007f00:	b084      	sub	sp, #16
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007f06:	2301      	movs	r3, #1
 8007f08:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	2b02      	cmp	r3, #2
 8007f10:	d001      	beq.n	8007f16 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007f12:	f7f8 fd51 	bl	80009b8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007f1c:	7bfa      	ldrb	r2, [r7, #15]
 8007f1e:	4611      	mov	r1, r2
 8007f20:	4618      	mov	r0, r3
 8007f22:	f7fe fce6 	bl	80068f2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f7fe fc8e 	bl	800684e <USBD_LL_Reset>
}
 8007f32:	bf00      	nop
 8007f34:	3710      	adds	r7, #16
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
	...

08007f3c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b082      	sub	sp, #8
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f7fe fce1 	bl	8006912 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	687a      	ldr	r2, [r7, #4]
 8007f5c:	6812      	ldr	r2, [r2, #0]
 8007f5e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007f62:	f043 0301 	orr.w	r3, r3, #1
 8007f66:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6a1b      	ldr	r3, [r3, #32]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d005      	beq.n	8007f7c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007f70:	4b04      	ldr	r3, [pc, #16]	; (8007f84 <HAL_PCD_SuspendCallback+0x48>)
 8007f72:	691b      	ldr	r3, [r3, #16]
 8007f74:	4a03      	ldr	r2, [pc, #12]	; (8007f84 <HAL_PCD_SuspendCallback+0x48>)
 8007f76:	f043 0306 	orr.w	r3, r3, #6
 8007f7a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007f7c:	bf00      	nop
 8007f7e:	3708      	adds	r7, #8
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}
 8007f84:	e000ed00 	.word	0xe000ed00

08007f88 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7fe fcd1 	bl	800693e <USBD_LL_Resume>
}
 8007f9c:	bf00      	nop
 8007f9e:	3708      	adds	r7, #8
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b082      	sub	sp, #8
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	460b      	mov	r3, r1
 8007fae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007fb6:	78fa      	ldrb	r2, [r7, #3]
 8007fb8:	4611      	mov	r1, r2
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f7fe fd29 	bl	8006a12 <USBD_LL_IsoOUTIncomplete>
}
 8007fc0:	bf00      	nop
 8007fc2:	3708      	adds	r7, #8
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007fda:	78fa      	ldrb	r2, [r7, #3]
 8007fdc:	4611      	mov	r1, r2
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7fe fce5 	bl	80069ae <USBD_LL_IsoINIncomplete>
}
 8007fe4:	bf00      	nop
 8007fe6:	3708      	adds	r7, #8
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b082      	sub	sp, #8
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f7fe fd3b 	bl	8006a76 <USBD_LL_DevConnected>
}
 8008000:	bf00      	nop
 8008002:	3708      	adds	r7, #8
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b082      	sub	sp, #8
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008016:	4618      	mov	r0, r3
 8008018:	f7fe fd38 	bl	8006a8c <USBD_LL_DevDisconnected>
}
 800801c:	bf00      	nop
 800801e:	3708      	adds	r7, #8
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b082      	sub	sp, #8
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d13c      	bne.n	80080ae <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008034:	4a20      	ldr	r2, [pc, #128]	; (80080b8 <USBD_LL_Init+0x94>)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	4a1e      	ldr	r2, [pc, #120]	; (80080b8 <USBD_LL_Init+0x94>)
 8008040:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008044:	4b1c      	ldr	r3, [pc, #112]	; (80080b8 <USBD_LL_Init+0x94>)
 8008046:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800804a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800804c:	4b1a      	ldr	r3, [pc, #104]	; (80080b8 <USBD_LL_Init+0x94>)
 800804e:	2204      	movs	r2, #4
 8008050:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008052:	4b19      	ldr	r3, [pc, #100]	; (80080b8 <USBD_LL_Init+0x94>)
 8008054:	2202      	movs	r2, #2
 8008056:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008058:	4b17      	ldr	r3, [pc, #92]	; (80080b8 <USBD_LL_Init+0x94>)
 800805a:	2200      	movs	r2, #0
 800805c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800805e:	4b16      	ldr	r3, [pc, #88]	; (80080b8 <USBD_LL_Init+0x94>)
 8008060:	2202      	movs	r2, #2
 8008062:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008064:	4b14      	ldr	r3, [pc, #80]	; (80080b8 <USBD_LL_Init+0x94>)
 8008066:	2200      	movs	r2, #0
 8008068:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800806a:	4b13      	ldr	r3, [pc, #76]	; (80080b8 <USBD_LL_Init+0x94>)
 800806c:	2200      	movs	r2, #0
 800806e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008070:	4b11      	ldr	r3, [pc, #68]	; (80080b8 <USBD_LL_Init+0x94>)
 8008072:	2200      	movs	r2, #0
 8008074:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8008076:	4b10      	ldr	r3, [pc, #64]	; (80080b8 <USBD_LL_Init+0x94>)
 8008078:	2201      	movs	r2, #1
 800807a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800807c:	4b0e      	ldr	r3, [pc, #56]	; (80080b8 <USBD_LL_Init+0x94>)
 800807e:	2200      	movs	r2, #0
 8008080:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008082:	480d      	ldr	r0, [pc, #52]	; (80080b8 <USBD_LL_Init+0x94>)
 8008084:	f7f9 ffbe 	bl	8002004 <HAL_PCD_Init>
 8008088:	4603      	mov	r3, r0
 800808a:	2b00      	cmp	r3, #0
 800808c:	d001      	beq.n	8008092 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800808e:	f7f8 fc93 	bl	80009b8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008092:	2180      	movs	r1, #128	; 0x80
 8008094:	4808      	ldr	r0, [pc, #32]	; (80080b8 <USBD_LL_Init+0x94>)
 8008096:	f7fb fa16 	bl	80034c6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800809a:	2240      	movs	r2, #64	; 0x40
 800809c:	2100      	movs	r1, #0
 800809e:	4806      	ldr	r0, [pc, #24]	; (80080b8 <USBD_LL_Init+0x94>)
 80080a0:	f7fb f9ca 	bl	8003438 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80080a4:	2280      	movs	r2, #128	; 0x80
 80080a6:	2101      	movs	r1, #1
 80080a8:	4803      	ldr	r0, [pc, #12]	; (80080b8 <USBD_LL_Init+0x94>)
 80080aa:	f7fb f9c5 	bl	8003438 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80080ae:	2300      	movs	r3, #0
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3708      	adds	r7, #8
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	200017bc 	.word	0x200017bc

080080bc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b084      	sub	sp, #16
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080c4:	2300      	movs	r3, #0
 80080c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080c8:	2300      	movs	r3, #0
 80080ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7fa f8b3 	bl	800223e <HAL_PCD_Start>
 80080d8:	4603      	mov	r3, r0
 80080da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080dc:	7bfb      	ldrb	r3, [r7, #15]
 80080de:	4618      	mov	r0, r3
 80080e0:	f000 f942 	bl	8008368 <USBD_Get_USB_Status>
 80080e4:	4603      	mov	r3, r0
 80080e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3710      	adds	r7, #16
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b084      	sub	sp, #16
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
 80080fa:	4608      	mov	r0, r1
 80080fc:	4611      	mov	r1, r2
 80080fe:	461a      	mov	r2, r3
 8008100:	4603      	mov	r3, r0
 8008102:	70fb      	strb	r3, [r7, #3]
 8008104:	460b      	mov	r3, r1
 8008106:	70bb      	strb	r3, [r7, #2]
 8008108:	4613      	mov	r3, r2
 800810a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800810c:	2300      	movs	r3, #0
 800810e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008110:	2300      	movs	r3, #0
 8008112:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800811a:	78bb      	ldrb	r3, [r7, #2]
 800811c:	883a      	ldrh	r2, [r7, #0]
 800811e:	78f9      	ldrb	r1, [r7, #3]
 8008120:	f7fa fd84 	bl	8002c2c <HAL_PCD_EP_Open>
 8008124:	4603      	mov	r3, r0
 8008126:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008128:	7bfb      	ldrb	r3, [r7, #15]
 800812a:	4618      	mov	r0, r3
 800812c:	f000 f91c 	bl	8008368 <USBD_Get_USB_Status>
 8008130:	4603      	mov	r3, r0
 8008132:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008134:	7bbb      	ldrb	r3, [r7, #14]
}
 8008136:	4618      	mov	r0, r3
 8008138:	3710      	adds	r7, #16
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}

0800813e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800813e:	b580      	push	{r7, lr}
 8008140:	b084      	sub	sp, #16
 8008142:	af00      	add	r7, sp, #0
 8008144:	6078      	str	r0, [r7, #4]
 8008146:	460b      	mov	r3, r1
 8008148:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800814a:	2300      	movs	r3, #0
 800814c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800814e:	2300      	movs	r3, #0
 8008150:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008158:	78fa      	ldrb	r2, [r7, #3]
 800815a:	4611      	mov	r1, r2
 800815c:	4618      	mov	r0, r3
 800815e:	f7fa fdcd 	bl	8002cfc <HAL_PCD_EP_Close>
 8008162:	4603      	mov	r3, r0
 8008164:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008166:	7bfb      	ldrb	r3, [r7, #15]
 8008168:	4618      	mov	r0, r3
 800816a:	f000 f8fd 	bl	8008368 <USBD_Get_USB_Status>
 800816e:	4603      	mov	r3, r0
 8008170:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008172:	7bbb      	ldrb	r3, [r7, #14]
}
 8008174:	4618      	mov	r0, r3
 8008176:	3710      	adds	r7, #16
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	460b      	mov	r3, r1
 8008186:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008188:	2300      	movs	r3, #0
 800818a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800818c:	2300      	movs	r3, #0
 800818e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008196:	78fa      	ldrb	r2, [r7, #3]
 8008198:	4611      	mov	r1, r2
 800819a:	4618      	mov	r0, r3
 800819c:	f7fa fea5 	bl	8002eea <HAL_PCD_EP_SetStall>
 80081a0:	4603      	mov	r3, r0
 80081a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081a4:	7bfb      	ldrb	r3, [r7, #15]
 80081a6:	4618      	mov	r0, r3
 80081a8:	f000 f8de 	bl	8008368 <USBD_Get_USB_Status>
 80081ac:	4603      	mov	r3, r0
 80081ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b084      	sub	sp, #16
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
 80081c2:	460b      	mov	r3, r1
 80081c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081c6:	2300      	movs	r3, #0
 80081c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081ca:	2300      	movs	r3, #0
 80081cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80081d4:	78fa      	ldrb	r2, [r7, #3]
 80081d6:	4611      	mov	r1, r2
 80081d8:	4618      	mov	r0, r3
 80081da:	f7fa feea 	bl	8002fb2 <HAL_PCD_EP_ClrStall>
 80081de:	4603      	mov	r3, r0
 80081e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081e2:	7bfb      	ldrb	r3, [r7, #15]
 80081e4:	4618      	mov	r0, r3
 80081e6:	f000 f8bf 	bl	8008368 <USBD_Get_USB_Status>
 80081ea:	4603      	mov	r3, r0
 80081ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3710      	adds	r7, #16
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b085      	sub	sp, #20
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	460b      	mov	r3, r1
 8008202:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800820a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800820c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008210:	2b00      	cmp	r3, #0
 8008212:	da0b      	bge.n	800822c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008214:	78fb      	ldrb	r3, [r7, #3]
 8008216:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800821a:	68f9      	ldr	r1, [r7, #12]
 800821c:	4613      	mov	r3, r2
 800821e:	00db      	lsls	r3, r3, #3
 8008220:	4413      	add	r3, r2
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	440b      	add	r3, r1
 8008226:	333e      	adds	r3, #62	; 0x3e
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	e00b      	b.n	8008244 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800822c:	78fb      	ldrb	r3, [r7, #3]
 800822e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008232:	68f9      	ldr	r1, [r7, #12]
 8008234:	4613      	mov	r3, r2
 8008236:	00db      	lsls	r3, r3, #3
 8008238:	4413      	add	r3, r2
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	440b      	add	r3, r1
 800823e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008242:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008244:	4618      	mov	r0, r3
 8008246:	3714      	adds	r7, #20
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr

08008250 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	460b      	mov	r3, r1
 800825a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800825c:	2300      	movs	r3, #0
 800825e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008260:	2300      	movs	r3, #0
 8008262:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800826a:	78fa      	ldrb	r2, [r7, #3]
 800826c:	4611      	mov	r1, r2
 800826e:	4618      	mov	r0, r3
 8008270:	f7fa fcb7 	bl	8002be2 <HAL_PCD_SetAddress>
 8008274:	4603      	mov	r3, r0
 8008276:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008278:	7bfb      	ldrb	r3, [r7, #15]
 800827a:	4618      	mov	r0, r3
 800827c:	f000 f874 	bl	8008368 <USBD_Get_USB_Status>
 8008280:	4603      	mov	r3, r0
 8008282:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008284:	7bbb      	ldrb	r3, [r7, #14]
}
 8008286:	4618      	mov	r0, r3
 8008288:	3710      	adds	r7, #16
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}

0800828e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800828e:	b580      	push	{r7, lr}
 8008290:	b086      	sub	sp, #24
 8008292:	af00      	add	r7, sp, #0
 8008294:	60f8      	str	r0, [r7, #12]
 8008296:	607a      	str	r2, [r7, #4]
 8008298:	603b      	str	r3, [r7, #0]
 800829a:	460b      	mov	r3, r1
 800829c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800829e:	2300      	movs	r3, #0
 80082a0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082a2:	2300      	movs	r3, #0
 80082a4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80082ac:	7af9      	ldrb	r1, [r7, #11]
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	f7fa fdd0 	bl	8002e56 <HAL_PCD_EP_Transmit>
 80082b6:	4603      	mov	r3, r0
 80082b8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082ba:	7dfb      	ldrb	r3, [r7, #23]
 80082bc:	4618      	mov	r0, r3
 80082be:	f000 f853 	bl	8008368 <USBD_Get_USB_Status>
 80082c2:	4603      	mov	r3, r0
 80082c4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80082c6:	7dbb      	ldrb	r3, [r7, #22]
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3718      	adds	r7, #24
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b086      	sub	sp, #24
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	607a      	str	r2, [r7, #4]
 80082da:	603b      	str	r3, [r7, #0]
 80082dc:	460b      	mov	r3, r1
 80082de:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082e0:	2300      	movs	r3, #0
 80082e2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082e4:	2300      	movs	r3, #0
 80082e6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80082ee:	7af9      	ldrb	r1, [r7, #11]
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	f7fa fd4c 	bl	8002d90 <HAL_PCD_EP_Receive>
 80082f8:	4603      	mov	r3, r0
 80082fa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082fc:	7dfb      	ldrb	r3, [r7, #23]
 80082fe:	4618      	mov	r0, r3
 8008300:	f000 f832 	bl	8008368 <USBD_Get_USB_Status>
 8008304:	4603      	mov	r3, r0
 8008306:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008308:	7dbb      	ldrb	r3, [r7, #22]
}
 800830a:	4618      	mov	r0, r3
 800830c:	3718      	adds	r7, #24
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}

08008312 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008312:	b580      	push	{r7, lr}
 8008314:	b082      	sub	sp, #8
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
 800831a:	460b      	mov	r3, r1
 800831c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008324:	78fa      	ldrb	r2, [r7, #3]
 8008326:	4611      	mov	r1, r2
 8008328:	4618      	mov	r0, r3
 800832a:	f7fa fd7c 	bl	8002e26 <HAL_PCD_EP_GetRxCount>
 800832e:	4603      	mov	r3, r0
}
 8008330:	4618      	mov	r0, r3
 8008332:	3708      	adds	r7, #8
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008340:	4b03      	ldr	r3, [pc, #12]	; (8008350 <USBD_static_malloc+0x18>)
}
 8008342:	4618      	mov	r0, r3
 8008344:	370c      	adds	r7, #12
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr
 800834e:	bf00      	nop
 8008350:	20001cc8 	.word	0x20001cc8

08008354 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]

}
 800835c:	bf00      	nop
 800835e:	370c      	adds	r7, #12
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008368:	b480      	push	{r7}
 800836a:	b085      	sub	sp, #20
 800836c:	af00      	add	r7, sp, #0
 800836e:	4603      	mov	r3, r0
 8008370:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008372:	2300      	movs	r3, #0
 8008374:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008376:	79fb      	ldrb	r3, [r7, #7]
 8008378:	2b03      	cmp	r3, #3
 800837a:	d817      	bhi.n	80083ac <USBD_Get_USB_Status+0x44>
 800837c:	a201      	add	r2, pc, #4	; (adr r2, 8008384 <USBD_Get_USB_Status+0x1c>)
 800837e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008382:	bf00      	nop
 8008384:	08008395 	.word	0x08008395
 8008388:	0800839b 	.word	0x0800839b
 800838c:	080083a1 	.word	0x080083a1
 8008390:	080083a7 	.word	0x080083a7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008394:	2300      	movs	r3, #0
 8008396:	73fb      	strb	r3, [r7, #15]
    break;
 8008398:	e00b      	b.n	80083b2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800839a:	2303      	movs	r3, #3
 800839c:	73fb      	strb	r3, [r7, #15]
    break;
 800839e:	e008      	b.n	80083b2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80083a0:	2301      	movs	r3, #1
 80083a2:	73fb      	strb	r3, [r7, #15]
    break;
 80083a4:	e005      	b.n	80083b2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80083a6:	2303      	movs	r3, #3
 80083a8:	73fb      	strb	r3, [r7, #15]
    break;
 80083aa:	e002      	b.n	80083b2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80083ac:	2303      	movs	r3, #3
 80083ae:	73fb      	strb	r3, [r7, #15]
    break;
 80083b0:	bf00      	nop
  }
  return usb_status;
 80083b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3714      	adds	r7, #20
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr

080083c0 <__libc_init_array>:
 80083c0:	b570      	push	{r4, r5, r6, lr}
 80083c2:	4d0d      	ldr	r5, [pc, #52]	; (80083f8 <__libc_init_array+0x38>)
 80083c4:	4c0d      	ldr	r4, [pc, #52]	; (80083fc <__libc_init_array+0x3c>)
 80083c6:	1b64      	subs	r4, r4, r5
 80083c8:	10a4      	asrs	r4, r4, #2
 80083ca:	2600      	movs	r6, #0
 80083cc:	42a6      	cmp	r6, r4
 80083ce:	d109      	bne.n	80083e4 <__libc_init_array+0x24>
 80083d0:	4d0b      	ldr	r5, [pc, #44]	; (8008400 <__libc_init_array+0x40>)
 80083d2:	4c0c      	ldr	r4, [pc, #48]	; (8008404 <__libc_init_array+0x44>)
 80083d4:	f000 f820 	bl	8008418 <_init>
 80083d8:	1b64      	subs	r4, r4, r5
 80083da:	10a4      	asrs	r4, r4, #2
 80083dc:	2600      	movs	r6, #0
 80083de:	42a6      	cmp	r6, r4
 80083e0:	d105      	bne.n	80083ee <__libc_init_array+0x2e>
 80083e2:	bd70      	pop	{r4, r5, r6, pc}
 80083e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80083e8:	4798      	blx	r3
 80083ea:	3601      	adds	r6, #1
 80083ec:	e7ee      	b.n	80083cc <__libc_init_array+0xc>
 80083ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80083f2:	4798      	blx	r3
 80083f4:	3601      	adds	r6, #1
 80083f6:	e7f2      	b.n	80083de <__libc_init_array+0x1e>
 80083f8:	080084a0 	.word	0x080084a0
 80083fc:	080084a0 	.word	0x080084a0
 8008400:	080084a0 	.word	0x080084a0
 8008404:	080084a4 	.word	0x080084a4

08008408 <memset>:
 8008408:	4402      	add	r2, r0
 800840a:	4603      	mov	r3, r0
 800840c:	4293      	cmp	r3, r2
 800840e:	d100      	bne.n	8008412 <memset+0xa>
 8008410:	4770      	bx	lr
 8008412:	f803 1b01 	strb.w	r1, [r3], #1
 8008416:	e7f9      	b.n	800840c <memset+0x4>

08008418 <_init>:
 8008418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800841a:	bf00      	nop
 800841c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800841e:	bc08      	pop	{r3}
 8008420:	469e      	mov	lr, r3
 8008422:	4770      	bx	lr

08008424 <_fini>:
 8008424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008426:	bf00      	nop
 8008428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800842a:	bc08      	pop	{r3}
 800842c:	469e      	mov	lr, r3
 800842e:	4770      	bx	lr
