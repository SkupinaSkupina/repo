
Projekt_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000828c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08008424  08008424  00009424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800848c  0800848c  0000a0fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800848c  0800848c  0000948c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008494  08008494  0000a0fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008494  08008494  00009494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008498  08008498  00009498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800849c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001dec  200000fc  08008598  0000a0fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ee8  08008598  0000aee8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000143b1  00000000  00000000  0000a12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037b0  00000000  00000000  0001e4dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e8  00000000  00000000  00021c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000da7  00000000  00000000  00022e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000194f1  00000000  00000000  00023c1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018cab  00000000  00000000  0003d110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d443  00000000  00000000  00055dbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e31fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a48  00000000  00000000  000e3244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000e7c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000fc 	.word	0x200000fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800840c 	.word	0x0800840c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000100 	.word	0x20000100
 80001d4:	0800840c 	.word	0x0800840c

080001d8 <strcmp>:
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	bf28      	it	cs
 80001e4:	429a      	cmpcs	r2, r3
 80001e6:	d0f7      	beq.n	80001d8 <strcmp>
 80001e8:	1ad0      	subs	r0, r2, r3
 80001ea:	4770      	bx	lr

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ProcessCommand>:

/**
  * @brief  The application entry point.
  * @retval int
  */
void ProcessCommand(char* cmd) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
    if (strcmp(cmd, "ON") == 0) {
 80004e4:	490f      	ldr	r1, [pc, #60]	@ (8000524 <ProcessCommand+0x48>)
 80004e6:	6878      	ldr	r0, [r7, #4]
 80004e8:	f7ff fe76 	bl	80001d8 <strcmp>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d106      	bne.n	8000500 <ProcessCommand+0x24>
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET); // Prižgi rdečo LED
 80004f2:	2201      	movs	r2, #1
 80004f4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80004f8:	480b      	ldr	r0, [pc, #44]	@ (8000528 <ProcessCommand+0x4c>)
 80004fa:	f000 ff81 	bl	8001400 <HAL_GPIO_WritePin>
    } else if (strcmp(cmd, "OFF") == 0){
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET); // Ugasi rdečo LED
    }
}
 80004fe:	e00c      	b.n	800051a <ProcessCommand+0x3e>
    } else if (strcmp(cmd, "OFF") == 0){
 8000500:	490a      	ldr	r1, [pc, #40]	@ (800052c <ProcessCommand+0x50>)
 8000502:	6878      	ldr	r0, [r7, #4]
 8000504:	f7ff fe68 	bl	80001d8 <strcmp>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d105      	bne.n	800051a <ProcessCommand+0x3e>
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET); // Ugasi rdečo LED
 800050e:	2200      	movs	r2, #0
 8000510:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000514:	4804      	ldr	r0, [pc, #16]	@ (8000528 <ProcessCommand+0x4c>)
 8000516:	f000 ff73 	bl	8001400 <HAL_GPIO_WritePin>
}
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	08008424 	.word	0x08008424
 8000528:	40020c00 	.word	0x40020c00
 800052c:	08008428 	.word	0x08008428

08000530 <main>:
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000534:	f000 fc38 	bl	8000da8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000538:	f000 f810 	bl	800055c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800053c:	f000 f876 	bl	800062c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000540:	f000 f956 	bl	80007f0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000544:	f000 f892 	bl	800066c <MX_I2C1_Init>
  MX_I2S2_Init();
 8000548:	f000 f8be 	bl	80006c8 <MX_I2S2_Init>
  MX_I2S3_Init();
 800054c:	f000 f8ea 	bl	8000724 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000550:	f000 f918 	bl	8000784 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000554:	f007 f9fa 	bl	800794c <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000558:	bf00      	nop
 800055a:	e7fd      	b.n	8000558 <main+0x28>

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b094      	sub	sp, #80	@ 0x50
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 0320 	add.w	r3, r7, #32
 8000566:	2230      	movs	r2, #48	@ 0x30
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f007 ff22 	bl	80083b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	f107 030c 	add.w	r3, r7, #12
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000580:	2300      	movs	r3, #0
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	4b27      	ldr	r3, [pc, #156]	@ (8000624 <SystemClock_Config+0xc8>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000588:	4a26      	ldr	r2, [pc, #152]	@ (8000624 <SystemClock_Config+0xc8>)
 800058a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800058e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000590:	4b24      	ldr	r3, [pc, #144]	@ (8000624 <SystemClock_Config+0xc8>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000594:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800059c:	2300      	movs	r3, #0
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	4b21      	ldr	r3, [pc, #132]	@ (8000628 <SystemClock_Config+0xcc>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a20      	ldr	r2, [pc, #128]	@ (8000628 <SystemClock_Config+0xcc>)
 80005a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005aa:	6013      	str	r3, [r2, #0]
 80005ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000628 <SystemClock_Config+0xcc>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b8:	2301      	movs	r3, #1
 80005ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c2:	2302      	movs	r3, #2
 80005c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005cc:	2304      	movs	r3, #4
 80005ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80005d0:	23c0      	movs	r3, #192	@ 0xc0
 80005d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005d4:	2304      	movs	r3, #4
 80005d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80005d8:	2308      	movs	r3, #8
 80005da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005dc:	f107 0320 	add.w	r3, r7, #32
 80005e0:	4618      	mov	r0, r3
 80005e2:	f002 ff89 	bl	80034f8 <HAL_RCC_OscConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005ec:	f000 f9da 	bl	80009a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f0:	230f      	movs	r3, #15
 80005f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f4:	2302      	movs	r3, #2
 80005f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005fc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000600:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000606:	f107 030c 	add.w	r3, r7, #12
 800060a:	2103      	movs	r1, #3
 800060c:	4618      	mov	r0, r3
 800060e:	f003 f9eb 	bl	80039e8 <HAL_RCC_ClockConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000618:	f000 f9c4 	bl	80009a4 <Error_Handler>
  }
}
 800061c:	bf00      	nop
 800061e:	3750      	adds	r7, #80	@ 0x50
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40023800 	.word	0x40023800
 8000628:	40007000 	.word	0x40007000

0800062c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000632:	463b      	mov	r3, r7
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]
 8000640:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000642:	2301      	movs	r3, #1
 8000644:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000646:	23c8      	movs	r3, #200	@ 0xc8
 8000648:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 800064a:	2305      	movs	r3, #5
 800064c:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800064e:	2302      	movs	r3, #2
 8000650:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000652:	463b      	mov	r3, r7
 8000654:	4618      	mov	r0, r3
 8000656:	f003 fbd3 	bl	8003e00 <HAL_RCCEx_PeriphCLKConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000660:	f000 f9a0 	bl	80009a4 <Error_Handler>
  }
}
 8000664:	bf00      	nop
 8000666:	3718      	adds	r7, #24
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}

0800066c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000670:	4b12      	ldr	r3, [pc, #72]	@ (80006bc <MX_I2C1_Init+0x50>)
 8000672:	4a13      	ldr	r2, [pc, #76]	@ (80006c0 <MX_I2C1_Init+0x54>)
 8000674:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000676:	4b11      	ldr	r3, [pc, #68]	@ (80006bc <MX_I2C1_Init+0x50>)
 8000678:	4a12      	ldr	r2, [pc, #72]	@ (80006c4 <MX_I2C1_Init+0x58>)
 800067a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800067c:	4b0f      	ldr	r3, [pc, #60]	@ (80006bc <MX_I2C1_Init+0x50>)
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000682:	4b0e      	ldr	r3, [pc, #56]	@ (80006bc <MX_I2C1_Init+0x50>)
 8000684:	2200      	movs	r2, #0
 8000686:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000688:	4b0c      	ldr	r3, [pc, #48]	@ (80006bc <MX_I2C1_Init+0x50>)
 800068a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800068e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000690:	4b0a      	ldr	r3, [pc, #40]	@ (80006bc <MX_I2C1_Init+0x50>)
 8000692:	2200      	movs	r2, #0
 8000694:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000696:	4b09      	ldr	r3, [pc, #36]	@ (80006bc <MX_I2C1_Init+0x50>)
 8000698:	2200      	movs	r2, #0
 800069a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800069c:	4b07      	ldr	r3, [pc, #28]	@ (80006bc <MX_I2C1_Init+0x50>)
 800069e:	2200      	movs	r2, #0
 80006a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006a2:	4b06      	ldr	r3, [pc, #24]	@ (80006bc <MX_I2C1_Init+0x50>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006a8:	4804      	ldr	r0, [pc, #16]	@ (80006bc <MX_I2C1_Init+0x50>)
 80006aa:	f000 fec3 	bl	8001434 <HAL_I2C_Init>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006b4:	f000 f976 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000118 	.word	0x20000118
 80006c0:	40005400 	.word	0x40005400
 80006c4:	000186a0 	.word	0x000186a0

080006c8 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80006cc:	4b12      	ldr	r3, [pc, #72]	@ (8000718 <MX_I2S2_Init+0x50>)
 80006ce:	4a13      	ldr	r2, [pc, #76]	@ (800071c <MX_I2S2_Init+0x54>)
 80006d0:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80006d2:	4b11      	ldr	r3, [pc, #68]	@ (8000718 <MX_I2S2_Init+0x50>)
 80006d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006d8:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80006da:	4b0f      	ldr	r3, [pc, #60]	@ (8000718 <MX_I2S2_Init+0x50>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000718 <MX_I2S2_Init+0x50>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80006e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000718 <MX_I2S2_Init+0x50>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000718 <MX_I2S2_Init+0x50>)
 80006ee:	4a0c      	ldr	r2, [pc, #48]	@ (8000720 <MX_I2S2_Init+0x58>)
 80006f0:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80006f2:	4b09      	ldr	r3, [pc, #36]	@ (8000718 <MX_I2S2_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80006f8:	4b07      	ldr	r3, [pc, #28]	@ (8000718 <MX_I2S2_Init+0x50>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80006fe:	4b06      	ldr	r3, [pc, #24]	@ (8000718 <MX_I2S2_Init+0x50>)
 8000700:	2201      	movs	r2, #1
 8000702:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000704:	4804      	ldr	r0, [pc, #16]	@ (8000718 <MX_I2S2_Init+0x50>)
 8000706:	f000 ffd9 	bl	80016bc <HAL_I2S_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000710:	f000 f948 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	2000016c 	.word	0x2000016c
 800071c:	40003800 	.word	0x40003800
 8000720:	00017700 	.word	0x00017700

08000724 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000728:	4b13      	ldr	r3, [pc, #76]	@ (8000778 <MX_I2S3_Init+0x54>)
 800072a:	4a14      	ldr	r2, [pc, #80]	@ (800077c <MX_I2S3_Init+0x58>)
 800072c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800072e:	4b12      	ldr	r3, [pc, #72]	@ (8000778 <MX_I2S3_Init+0x54>)
 8000730:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000734:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000736:	4b10      	ldr	r3, [pc, #64]	@ (8000778 <MX_I2S3_Init+0x54>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800073c:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <MX_I2S3_Init+0x54>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000742:	4b0d      	ldr	r3, [pc, #52]	@ (8000778 <MX_I2S3_Init+0x54>)
 8000744:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000748:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800074a:	4b0b      	ldr	r3, [pc, #44]	@ (8000778 <MX_I2S3_Init+0x54>)
 800074c:	4a0c      	ldr	r2, [pc, #48]	@ (8000780 <MX_I2S3_Init+0x5c>)
 800074e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000750:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <MX_I2S3_Init+0x54>)
 8000752:	2200      	movs	r2, #0
 8000754:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000756:	4b08      	ldr	r3, [pc, #32]	@ (8000778 <MX_I2S3_Init+0x54>)
 8000758:	2200      	movs	r2, #0
 800075a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800075c:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <MX_I2S3_Init+0x54>)
 800075e:	2200      	movs	r2, #0
 8000760:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000762:	4805      	ldr	r0, [pc, #20]	@ (8000778 <MX_I2S3_Init+0x54>)
 8000764:	f000 ffaa 	bl	80016bc <HAL_I2S_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800076e:	f000 f919 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	200001b4 	.word	0x200001b4
 800077c:	40003c00 	.word	0x40003c00
 8000780:	00017700 	.word	0x00017700

08000784 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000788:	4b17      	ldr	r3, [pc, #92]	@ (80007e8 <MX_SPI1_Init+0x64>)
 800078a:	4a18      	ldr	r2, [pc, #96]	@ (80007ec <MX_SPI1_Init+0x68>)
 800078c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800078e:	4b16      	ldr	r3, [pc, #88]	@ (80007e8 <MX_SPI1_Init+0x64>)
 8000790:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000794:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000796:	4b14      	ldr	r3, [pc, #80]	@ (80007e8 <MX_SPI1_Init+0x64>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800079c:	4b12      	ldr	r3, [pc, #72]	@ (80007e8 <MX_SPI1_Init+0x64>)
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007a2:	4b11      	ldr	r3, [pc, #68]	@ (80007e8 <MX_SPI1_Init+0x64>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <MX_SPI1_Init+0x64>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	@ (80007e8 <MX_SPI1_Init+0x64>)
 80007b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007b6:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <MX_SPI1_Init+0x64>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007bc:	4b0a      	ldr	r3, [pc, #40]	@ (80007e8 <MX_SPI1_Init+0x64>)
 80007be:	2200      	movs	r2, #0
 80007c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007c2:	4b09      	ldr	r3, [pc, #36]	@ (80007e8 <MX_SPI1_Init+0x64>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007c8:	4b07      	ldr	r3, [pc, #28]	@ (80007e8 <MX_SPI1_Init+0x64>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007ce:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <MX_SPI1_Init+0x64>)
 80007d0:	220a      	movs	r2, #10
 80007d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007d4:	4804      	ldr	r0, [pc, #16]	@ (80007e8 <MX_SPI1_Init+0x64>)
 80007d6:	f003 fc63 	bl	80040a0 <HAL_SPI_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007e0:	f000 f8e0 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	200001fc 	.word	0x200001fc
 80007ec:	40013000 	.word	0x40013000

080007f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08c      	sub	sp, #48	@ 0x30
 80007f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	61bb      	str	r3, [r7, #24]
 800080a:	4b61      	ldr	r3, [pc, #388]	@ (8000990 <MX_GPIO_Init+0x1a0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	4a60      	ldr	r2, [pc, #384]	@ (8000990 <MX_GPIO_Init+0x1a0>)
 8000810:	f043 0310 	orr.w	r3, r3, #16
 8000814:	6313      	str	r3, [r2, #48]	@ 0x30
 8000816:	4b5e      	ldr	r3, [pc, #376]	@ (8000990 <MX_GPIO_Init+0x1a0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	f003 0310 	and.w	r3, r3, #16
 800081e:	61bb      	str	r3, [r7, #24]
 8000820:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
 8000826:	4b5a      	ldr	r3, [pc, #360]	@ (8000990 <MX_GPIO_Init+0x1a0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	4a59      	ldr	r2, [pc, #356]	@ (8000990 <MX_GPIO_Init+0x1a0>)
 800082c:	f043 0304 	orr.w	r3, r3, #4
 8000830:	6313      	str	r3, [r2, #48]	@ 0x30
 8000832:	4b57      	ldr	r3, [pc, #348]	@ (8000990 <MX_GPIO_Init+0x1a0>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	f003 0304 	and.w	r3, r3, #4
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
 8000842:	4b53      	ldr	r3, [pc, #332]	@ (8000990 <MX_GPIO_Init+0x1a0>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	4a52      	ldr	r2, [pc, #328]	@ (8000990 <MX_GPIO_Init+0x1a0>)
 8000848:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800084c:	6313      	str	r3, [r2, #48]	@ 0x30
 800084e:	4b50      	ldr	r3, [pc, #320]	@ (8000990 <MX_GPIO_Init+0x1a0>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	4b4c      	ldr	r3, [pc, #304]	@ (8000990 <MX_GPIO_Init+0x1a0>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	4a4b      	ldr	r2, [pc, #300]	@ (8000990 <MX_GPIO_Init+0x1a0>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6313      	str	r3, [r2, #48]	@ 0x30
 800086a:	4b49      	ldr	r3, [pc, #292]	@ (8000990 <MX_GPIO_Init+0x1a0>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	4b45      	ldr	r3, [pc, #276]	@ (8000990 <MX_GPIO_Init+0x1a0>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a44      	ldr	r2, [pc, #272]	@ (8000990 <MX_GPIO_Init+0x1a0>)
 8000880:	f043 0302 	orr.w	r3, r3, #2
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b42      	ldr	r3, [pc, #264]	@ (8000990 <MX_GPIO_Init+0x1a0>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f003 0302 	and.w	r3, r3, #2
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	4b3e      	ldr	r3, [pc, #248]	@ (8000990 <MX_GPIO_Init+0x1a0>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	4a3d      	ldr	r2, [pc, #244]	@ (8000990 <MX_GPIO_Init+0x1a0>)
 800089c:	f043 0308 	orr.w	r3, r3, #8
 80008a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a2:	4b3b      	ldr	r3, [pc, #236]	@ (8000990 <MX_GPIO_Init+0x1a0>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	f003 0308 	and.w	r3, r3, #8
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2108      	movs	r1, #8
 80008b2:	4838      	ldr	r0, [pc, #224]	@ (8000994 <MX_GPIO_Init+0x1a4>)
 80008b4:	f000 fda4 	bl	8001400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008b8:	2201      	movs	r2, #1
 80008ba:	2101      	movs	r1, #1
 80008bc:	4836      	ldr	r0, [pc, #216]	@ (8000998 <MX_GPIO_Init+0x1a8>)
 80008be:	f000 fd9f 	bl	8001400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008c2:	2200      	movs	r2, #0
 80008c4:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80008c8:	4834      	ldr	r0, [pc, #208]	@ (800099c <MX_GPIO_Init+0x1ac>)
 80008ca:	f000 fd99 	bl	8001400 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80008ce:	2304      	movs	r3, #4
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d2:	2300      	movs	r3, #0
 80008d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	482c      	ldr	r0, [pc, #176]	@ (8000994 <MX_GPIO_Init+0x1a4>)
 80008e2:	f000 fc09 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008e6:	2308      	movs	r3, #8
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ea:	2301      	movs	r3, #1
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	4825      	ldr	r0, [pc, #148]	@ (8000994 <MX_GPIO_Init+0x1a4>)
 80008fe:	f000 fbfb 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000902:	2332      	movs	r3, #50	@ 0x32
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000906:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800090a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	4619      	mov	r1, r3
 8000916:	481f      	ldr	r0, [pc, #124]	@ (8000994 <MX_GPIO_Init+0x1a4>)
 8000918:	f000 fbee 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800091c:	2301      	movs	r3, #1
 800091e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000920:	2301      	movs	r3, #1
 8000922:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	2300      	movs	r3, #0
 800092a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800092c:	f107 031c 	add.w	r3, r7, #28
 8000930:	4619      	mov	r1, r3
 8000932:	4819      	ldr	r0, [pc, #100]	@ (8000998 <MX_GPIO_Init+0x1a8>)
 8000934:	f000 fbe0 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000938:	2301      	movs	r3, #1
 800093a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800093c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	4619      	mov	r1, r3
 800094c:	4814      	ldr	r0, [pc, #80]	@ (80009a0 <MX_GPIO_Init+0x1b0>)
 800094e:	f000 fbd3 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000952:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000956:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000958:	2301      	movs	r3, #1
 800095a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000964:	f107 031c 	add.w	r3, r7, #28
 8000968:	4619      	mov	r1, r3
 800096a:	480c      	ldr	r0, [pc, #48]	@ (800099c <MX_GPIO_Init+0x1ac>)
 800096c:	f000 fbc4 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000970:	2320      	movs	r3, #32
 8000972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000974:	2300      	movs	r3, #0
 8000976:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800097c:	f107 031c 	add.w	r3, r7, #28
 8000980:	4619      	mov	r1, r3
 8000982:	4806      	ldr	r0, [pc, #24]	@ (800099c <MX_GPIO_Init+0x1ac>)
 8000984:	f000 fbb8 	bl	80010f8 <HAL_GPIO_Init>

}
 8000988:	bf00      	nop
 800098a:	3730      	adds	r7, #48	@ 0x30
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40023800 	.word	0x40023800
 8000994:	40021000 	.word	0x40021000
 8000998:	40020800 	.word	0x40020800
 800099c:	40020c00 	.word	0x40020c00
 80009a0:	40020000 	.word	0x40020000

080009a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a8:	b672      	cpsid	i
}
 80009aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <Error_Handler+0x8>

080009b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	4b10      	ldr	r3, [pc, #64]	@ (80009fc <HAL_MspInit+0x4c>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009be:	4a0f      	ldr	r2, [pc, #60]	@ (80009fc <HAL_MspInit+0x4c>)
 80009c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009c6:	4b0d      	ldr	r3, [pc, #52]	@ (80009fc <HAL_MspInit+0x4c>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	603b      	str	r3, [r7, #0]
 80009d6:	4b09      	ldr	r3, [pc, #36]	@ (80009fc <HAL_MspInit+0x4c>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009da:	4a08      	ldr	r2, [pc, #32]	@ (80009fc <HAL_MspInit+0x4c>)
 80009dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009e2:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <HAL_MspInit+0x4c>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ea:	603b      	str	r3, [r7, #0]
 80009ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009ee:	2007      	movs	r0, #7
 80009f0:	f000 fb40 	bl	8001074 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f4:	bf00      	nop
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40023800 	.word	0x40023800

08000a00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08a      	sub	sp, #40	@ 0x28
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a19      	ldr	r2, [pc, #100]	@ (8000a84 <HAL_I2C_MspInit+0x84>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d12c      	bne.n	8000a7c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	613b      	str	r3, [r7, #16]
 8000a26:	4b18      	ldr	r3, [pc, #96]	@ (8000a88 <HAL_I2C_MspInit+0x88>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	4a17      	ldr	r2, [pc, #92]	@ (8000a88 <HAL_I2C_MspInit+0x88>)
 8000a2c:	f043 0302 	orr.w	r3, r3, #2
 8000a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a32:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <HAL_I2C_MspInit+0x88>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	f003 0302 	and.w	r3, r3, #2
 8000a3a:	613b      	str	r3, [r7, #16]
 8000a3c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a3e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a44:	2312      	movs	r3, #18
 8000a46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a50:	2304      	movs	r3, #4
 8000a52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4619      	mov	r1, r3
 8000a5a:	480c      	ldr	r0, [pc, #48]	@ (8000a8c <HAL_I2C_MspInit+0x8c>)
 8000a5c:	f000 fb4c 	bl	80010f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a60:	2300      	movs	r3, #0
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	4b08      	ldr	r3, [pc, #32]	@ (8000a88 <HAL_I2C_MspInit+0x88>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a68:	4a07      	ldr	r2, [pc, #28]	@ (8000a88 <HAL_I2C_MspInit+0x88>)
 8000a6a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a70:	4b05      	ldr	r3, [pc, #20]	@ (8000a88 <HAL_I2C_MspInit+0x88>)
 8000a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a7c:	bf00      	nop
 8000a7e:	3728      	adds	r7, #40	@ 0x28
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40005400 	.word	0x40005400
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40020400 	.word	0x40020400

08000a90 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08e      	sub	sp, #56	@ 0x38
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a59      	ldr	r2, [pc, #356]	@ (8000c14 <HAL_I2S_MspInit+0x184>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d15b      	bne.n	8000b6a <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	623b      	str	r3, [r7, #32]
 8000ab6:	4b58      	ldr	r3, [pc, #352]	@ (8000c18 <HAL_I2S_MspInit+0x188>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aba:	4a57      	ldr	r2, [pc, #348]	@ (8000c18 <HAL_I2S_MspInit+0x188>)
 8000abc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ac0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ac2:	4b55      	ldr	r3, [pc, #340]	@ (8000c18 <HAL_I2S_MspInit+0x188>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aca:	623b      	str	r3, [r7, #32]
 8000acc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61fb      	str	r3, [r7, #28]
 8000ad2:	4b51      	ldr	r3, [pc, #324]	@ (8000c18 <HAL_I2S_MspInit+0x188>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	4a50      	ldr	r2, [pc, #320]	@ (8000c18 <HAL_I2S_MspInit+0x188>)
 8000ad8:	f043 0304 	orr.w	r3, r3, #4
 8000adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ade:	4b4e      	ldr	r3, [pc, #312]	@ (8000c18 <HAL_I2S_MspInit+0x188>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	f003 0304 	and.w	r3, r3, #4
 8000ae6:	61fb      	str	r3, [r7, #28]
 8000ae8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	61bb      	str	r3, [r7, #24]
 8000aee:	4b4a      	ldr	r3, [pc, #296]	@ (8000c18 <HAL_I2S_MspInit+0x188>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	4a49      	ldr	r2, [pc, #292]	@ (8000c18 <HAL_I2S_MspInit+0x188>)
 8000af4:	f043 0302 	orr.w	r3, r3, #2
 8000af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afa:	4b47      	ldr	r3, [pc, #284]	@ (8000c18 <HAL_I2S_MspInit+0x188>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	f003 0302 	and.w	r3, r3, #2
 8000b02:	61bb      	str	r3, [r7, #24]
 8000b04:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b06:	2304      	movs	r3, #4
 8000b08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b12:	2300      	movs	r3, #0
 8000b14:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000b16:	2306      	movs	r3, #6
 8000b18:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b1e:	4619      	mov	r1, r3
 8000b20:	483e      	ldr	r0, [pc, #248]	@ (8000c1c <HAL_I2S_MspInit+0x18c>)
 8000b22:	f000 fae9 	bl	80010f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000b26:	2308      	movs	r3, #8
 8000b28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b32:	2300      	movs	r3, #0
 8000b34:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b36:	2305      	movs	r3, #5
 8000b38:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000b3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4836      	ldr	r0, [pc, #216]	@ (8000c1c <HAL_I2S_MspInit+0x18c>)
 8000b42:	f000 fad9 	bl	80010f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000b46:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b4a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b54:	2300      	movs	r3, #0
 8000b56:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b58:	2305      	movs	r3, #5
 8000b5a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b60:	4619      	mov	r1, r3
 8000b62:	482f      	ldr	r0, [pc, #188]	@ (8000c20 <HAL_I2S_MspInit+0x190>)
 8000b64:	f000 fac8 	bl	80010f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b68:	e04f      	b.n	8000c0a <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a2d      	ldr	r2, [pc, #180]	@ (8000c24 <HAL_I2S_MspInit+0x194>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d14a      	bne.n	8000c0a <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]
 8000b78:	4b27      	ldr	r3, [pc, #156]	@ (8000c18 <HAL_I2S_MspInit+0x188>)
 8000b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7c:	4a26      	ldr	r2, [pc, #152]	@ (8000c18 <HAL_I2S_MspInit+0x188>)
 8000b7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b82:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b84:	4b24      	ldr	r3, [pc, #144]	@ (8000c18 <HAL_I2S_MspInit+0x188>)
 8000b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b8c:	617b      	str	r3, [r7, #20]
 8000b8e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b90:	2300      	movs	r3, #0
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	4b20      	ldr	r3, [pc, #128]	@ (8000c18 <HAL_I2S_MspInit+0x188>)
 8000b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b98:	4a1f      	ldr	r2, [pc, #124]	@ (8000c18 <HAL_I2S_MspInit+0x188>)
 8000b9a:	f043 0301 	orr.w	r3, r3, #1
 8000b9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c18 <HAL_I2S_MspInit+0x188>)
 8000ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba4:	f003 0301 	and.w	r3, r3, #1
 8000ba8:	613b      	str	r3, [r7, #16]
 8000baa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bac:	2300      	movs	r3, #0
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	4b19      	ldr	r3, [pc, #100]	@ (8000c18 <HAL_I2S_MspInit+0x188>)
 8000bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb4:	4a18      	ldr	r2, [pc, #96]	@ (8000c18 <HAL_I2S_MspInit+0x188>)
 8000bb6:	f043 0304 	orr.w	r3, r3, #4
 8000bba:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bbc:	4b16      	ldr	r3, [pc, #88]	@ (8000c18 <HAL_I2S_MspInit+0x188>)
 8000bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc0:	f003 0304 	and.w	r3, r3, #4
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000bc8:	2310      	movs	r3, #16
 8000bca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bd8:	2306      	movs	r3, #6
 8000bda:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000bdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000be0:	4619      	mov	r1, r3
 8000be2:	4811      	ldr	r0, [pc, #68]	@ (8000c28 <HAL_I2S_MspInit+0x198>)
 8000be4:	f000 fa88 	bl	80010f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000be8:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000bec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bfa:	2306      	movs	r3, #6
 8000bfc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c02:	4619      	mov	r1, r3
 8000c04:	4805      	ldr	r0, [pc, #20]	@ (8000c1c <HAL_I2S_MspInit+0x18c>)
 8000c06:	f000 fa77 	bl	80010f8 <HAL_GPIO_Init>
}
 8000c0a:	bf00      	nop
 8000c0c:	3738      	adds	r7, #56	@ 0x38
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40003800 	.word	0x40003800
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40020800 	.word	0x40020800
 8000c20:	40020400 	.word	0x40020400
 8000c24:	40003c00 	.word	0x40003c00
 8000c28:	40020000 	.word	0x40020000

08000c2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08a      	sub	sp, #40	@ 0x28
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a19      	ldr	r2, [pc, #100]	@ (8000cb0 <HAL_SPI_MspInit+0x84>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d12b      	bne.n	8000ca6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	613b      	str	r3, [r7, #16]
 8000c52:	4b18      	ldr	r3, [pc, #96]	@ (8000cb4 <HAL_SPI_MspInit+0x88>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c56:	4a17      	ldr	r2, [pc, #92]	@ (8000cb4 <HAL_SPI_MspInit+0x88>)
 8000c58:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c5e:	4b15      	ldr	r3, [pc, #84]	@ (8000cb4 <HAL_SPI_MspInit+0x88>)
 8000c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c66:	613b      	str	r3, [r7, #16]
 8000c68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	4b11      	ldr	r3, [pc, #68]	@ (8000cb4 <HAL_SPI_MspInit+0x88>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c72:	4a10      	ldr	r2, [pc, #64]	@ (8000cb4 <HAL_SPI_MspInit+0x88>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb4 <HAL_SPI_MspInit+0x88>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c86:	23e0      	movs	r3, #224	@ 0xe0
 8000c88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c92:	2303      	movs	r3, #3
 8000c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c96:	2305      	movs	r3, #5
 8000c98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9a:	f107 0314 	add.w	r3, r7, #20
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4805      	ldr	r0, [pc, #20]	@ (8000cb8 <HAL_SPI_MspInit+0x8c>)
 8000ca2:	f000 fa29 	bl	80010f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ca6:	bf00      	nop
 8000ca8:	3728      	adds	r7, #40	@ 0x28
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40013000 	.word	0x40013000
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	40020000 	.word	0x40020000

08000cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cc0:	bf00      	nop
 8000cc2:	e7fd      	b.n	8000cc0 <NMI_Handler+0x4>

08000cc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc8:	bf00      	nop
 8000cca:	e7fd      	b.n	8000cc8 <HardFault_Handler+0x4>

08000ccc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <MemManage_Handler+0x4>

08000cd4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd8:	bf00      	nop
 8000cda:	e7fd      	b.n	8000cd8 <BusFault_Handler+0x4>

08000cdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce0:	bf00      	nop
 8000ce2:	e7fd      	b.n	8000ce0 <UsageFault_Handler+0x4>

08000ce4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d12:	f000 f89b 	bl	8000e4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
	...

08000d1c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d20:	4802      	ldr	r0, [pc, #8]	@ (8000d2c <OTG_FS_IRQHandler+0x10>)
 8000d22:	f001 fabb 	bl	800229c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	200017bc 	.word	0x200017bc

08000d30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d34:	4b06      	ldr	r3, [pc, #24]	@ (8000d50 <SystemInit+0x20>)
 8000d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d3a:	4a05      	ldr	r2, [pc, #20]	@ (8000d50 <SystemInit+0x20>)
 8000d3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d58:	480d      	ldr	r0, [pc, #52]	@ (8000d90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d5a:	490e      	ldr	r1, [pc, #56]	@ (8000d94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d5c:	4a0e      	ldr	r2, [pc, #56]	@ (8000d98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d60:	e002      	b.n	8000d68 <LoopCopyDataInit>

08000d62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d66:	3304      	adds	r3, #4

08000d68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d6c:	d3f9      	bcc.n	8000d62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d6e:	4a0b      	ldr	r2, [pc, #44]	@ (8000d9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d70:	4c0b      	ldr	r4, [pc, #44]	@ (8000da0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d74:	e001      	b.n	8000d7a <LoopFillZerobss>

08000d76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d78:	3204      	adds	r2, #4

08000d7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d7c:	d3fb      	bcc.n	8000d76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d7e:	f7ff ffd7 	bl	8000d30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d82:	f007 fb1f 	bl	80083c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d86:	f7ff fbd3 	bl	8000530 <main>
  bx  lr    
 8000d8a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d94:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000d98:	0800849c 	.word	0x0800849c
  ldr r2, =_sbss
 8000d9c:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000da0:	20001ee8 	.word	0x20001ee8

08000da4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000da4:	e7fe      	b.n	8000da4 <ADC_IRQHandler>
	...

08000da8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dac:	4b0e      	ldr	r3, [pc, #56]	@ (8000de8 <HAL_Init+0x40>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a0d      	ldr	r2, [pc, #52]	@ (8000de8 <HAL_Init+0x40>)
 8000db2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000db6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000db8:	4b0b      	ldr	r3, [pc, #44]	@ (8000de8 <HAL_Init+0x40>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a0a      	ldr	r2, [pc, #40]	@ (8000de8 <HAL_Init+0x40>)
 8000dbe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc4:	4b08      	ldr	r3, [pc, #32]	@ (8000de8 <HAL_Init+0x40>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a07      	ldr	r2, [pc, #28]	@ (8000de8 <HAL_Init+0x40>)
 8000dca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd0:	2003      	movs	r0, #3
 8000dd2:	f000 f94f 	bl	8001074 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dd6:	2000      	movs	r0, #0
 8000dd8:	f000 f808 	bl	8000dec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ddc:	f7ff fde8 	bl	80009b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40023c00 	.word	0x40023c00

08000dec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000df4:	4b12      	ldr	r3, [pc, #72]	@ (8000e40 <HAL_InitTick+0x54>)
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	4b12      	ldr	r3, [pc, #72]	@ (8000e44 <HAL_InitTick+0x58>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 f967 	bl	80010de <HAL_SYSTICK_Config>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e00e      	b.n	8000e38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2b0f      	cmp	r3, #15
 8000e1e:	d80a      	bhi.n	8000e36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e20:	2200      	movs	r2, #0
 8000e22:	6879      	ldr	r1, [r7, #4]
 8000e24:	f04f 30ff 	mov.w	r0, #4294967295
 8000e28:	f000 f92f 	bl	800108a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e2c:	4a06      	ldr	r2, [pc, #24]	@ (8000e48 <HAL_InitTick+0x5c>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e32:	2300      	movs	r3, #0
 8000e34:	e000      	b.n	8000e38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000000 	.word	0x20000000
 8000e44:	20000008 	.word	0x20000008
 8000e48:	20000004 	.word	0x20000004

08000e4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e50:	4b06      	ldr	r3, [pc, #24]	@ (8000e6c <HAL_IncTick+0x20>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	461a      	mov	r2, r3
 8000e56:	4b06      	ldr	r3, [pc, #24]	@ (8000e70 <HAL_IncTick+0x24>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	4a04      	ldr	r2, [pc, #16]	@ (8000e70 <HAL_IncTick+0x24>)
 8000e5e:	6013      	str	r3, [r2, #0]
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	20000008 	.word	0x20000008
 8000e70:	20000254 	.word	0x20000254

08000e74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  return uwTick;
 8000e78:	4b03      	ldr	r3, [pc, #12]	@ (8000e88 <HAL_GetTick+0x14>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	20000254 	.word	0x20000254

08000e8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e94:	f7ff ffee 	bl	8000e74 <HAL_GetTick>
 8000e98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ea4:	d005      	beq.n	8000eb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed0 <HAL_Delay+0x44>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	461a      	mov	r2, r3
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	4413      	add	r3, r2
 8000eb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eb2:	bf00      	nop
 8000eb4:	f7ff ffde 	bl	8000e74 <HAL_GetTick>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	68fa      	ldr	r2, [r7, #12]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d8f7      	bhi.n	8000eb4 <HAL_Delay+0x28>
  {
  }
}
 8000ec4:	bf00      	nop
 8000ec6:	bf00      	nop
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000008 	.word	0x20000008

08000ed4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eea:	68ba      	ldr	r2, [r7, #8]
 8000eec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000efc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f06:	4a04      	ldr	r2, [pc, #16]	@ (8000f18 <__NVIC_SetPriorityGrouping+0x44>)
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	60d3      	str	r3, [r2, #12]
}
 8000f0c:	bf00      	nop
 8000f0e:	3714      	adds	r7, #20
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f20:	4b04      	ldr	r3, [pc, #16]	@ (8000f34 <__NVIC_GetPriorityGrouping+0x18>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	0a1b      	lsrs	r3, r3, #8
 8000f26:	f003 0307 	and.w	r3, r3, #7
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	db0b      	blt.n	8000f62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	f003 021f 	and.w	r2, r3, #31
 8000f50:	4907      	ldr	r1, [pc, #28]	@ (8000f70 <__NVIC_EnableIRQ+0x38>)
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	095b      	lsrs	r3, r3, #5
 8000f58:	2001      	movs	r0, #1
 8000f5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	e000e100 	.word	0xe000e100

08000f74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	6039      	str	r1, [r7, #0]
 8000f7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	db0a      	blt.n	8000f9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	490c      	ldr	r1, [pc, #48]	@ (8000fc0 <__NVIC_SetPriority+0x4c>)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	0112      	lsls	r2, r2, #4
 8000f94:	b2d2      	uxtb	r2, r2
 8000f96:	440b      	add	r3, r1
 8000f98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f9c:	e00a      	b.n	8000fb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	4908      	ldr	r1, [pc, #32]	@ (8000fc4 <__NVIC_SetPriority+0x50>)
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	f003 030f 	and.w	r3, r3, #15
 8000faa:	3b04      	subs	r3, #4
 8000fac:	0112      	lsls	r2, r2, #4
 8000fae:	b2d2      	uxtb	r2, r2
 8000fb0:	440b      	add	r3, r1
 8000fb2:	761a      	strb	r2, [r3, #24]
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000e100 	.word	0xe000e100
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b089      	sub	sp, #36	@ 0x24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	f1c3 0307 	rsb	r3, r3, #7
 8000fe2:	2b04      	cmp	r3, #4
 8000fe4:	bf28      	it	cs
 8000fe6:	2304      	movcs	r3, #4
 8000fe8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	3304      	adds	r3, #4
 8000fee:	2b06      	cmp	r3, #6
 8000ff0:	d902      	bls.n	8000ff8 <NVIC_EncodePriority+0x30>
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3b03      	subs	r3, #3
 8000ff6:	e000      	b.n	8000ffa <NVIC_EncodePriority+0x32>
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43da      	mvns	r2, r3
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	401a      	ands	r2, r3
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001010:	f04f 31ff 	mov.w	r1, #4294967295
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	fa01 f303 	lsl.w	r3, r1, r3
 800101a:	43d9      	mvns	r1, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001020:	4313      	orrs	r3, r2
         );
}
 8001022:	4618      	mov	r0, r3
 8001024:	3724      	adds	r7, #36	@ 0x24
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
	...

08001030 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3b01      	subs	r3, #1
 800103c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001040:	d301      	bcc.n	8001046 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001042:	2301      	movs	r3, #1
 8001044:	e00f      	b.n	8001066 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001046:	4a0a      	ldr	r2, [pc, #40]	@ (8001070 <SysTick_Config+0x40>)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3b01      	subs	r3, #1
 800104c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800104e:	210f      	movs	r1, #15
 8001050:	f04f 30ff 	mov.w	r0, #4294967295
 8001054:	f7ff ff8e 	bl	8000f74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001058:	4b05      	ldr	r3, [pc, #20]	@ (8001070 <SysTick_Config+0x40>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800105e:	4b04      	ldr	r3, [pc, #16]	@ (8001070 <SysTick_Config+0x40>)
 8001060:	2207      	movs	r2, #7
 8001062:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	e000e010 	.word	0xe000e010

08001074 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ff29 	bl	8000ed4 <__NVIC_SetPriorityGrouping>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800108a:	b580      	push	{r7, lr}
 800108c:	b086      	sub	sp, #24
 800108e:	af00      	add	r7, sp, #0
 8001090:	4603      	mov	r3, r0
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	607a      	str	r2, [r7, #4]
 8001096:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800109c:	f7ff ff3e 	bl	8000f1c <__NVIC_GetPriorityGrouping>
 80010a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	68b9      	ldr	r1, [r7, #8]
 80010a6:	6978      	ldr	r0, [r7, #20]
 80010a8:	f7ff ff8e 	bl	8000fc8 <NVIC_EncodePriority>
 80010ac:	4602      	mov	r2, r0
 80010ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b2:	4611      	mov	r1, r2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff5d 	bl	8000f74 <__NVIC_SetPriority>
}
 80010ba:	bf00      	nop
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	4603      	mov	r3, r0
 80010ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff31 	bl	8000f38 <__NVIC_EnableIRQ>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff ffa2 	bl	8001030 <SysTick_Config>
 80010ec:	4603      	mov	r3, r0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b089      	sub	sp, #36	@ 0x24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800110a:	2300      	movs	r3, #0
 800110c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
 8001112:	e159      	b.n	80013c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001114:	2201      	movs	r2, #1
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	697a      	ldr	r2, [r7, #20]
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	429a      	cmp	r2, r3
 800112e:	f040 8148 	bne.w	80013c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f003 0303 	and.w	r3, r3, #3
 800113a:	2b01      	cmp	r3, #1
 800113c:	d005      	beq.n	800114a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001146:	2b02      	cmp	r3, #2
 8001148:	d130      	bne.n	80011ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	2203      	movs	r2, #3
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43db      	mvns	r3, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4013      	ands	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	68da      	ldr	r2, [r3, #12]
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4313      	orrs	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001180:	2201      	movs	r2, #1
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	091b      	lsrs	r3, r3, #4
 8001196:	f003 0201 	and.w	r2, r3, #1
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	2b03      	cmp	r3, #3
 80011b6:	d017      	beq.n	80011e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	2203      	movs	r2, #3
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	689a      	ldr	r2, [r3, #8]
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4313      	orrs	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 0303 	and.w	r3, r3, #3
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d123      	bne.n	800123c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	08da      	lsrs	r2, r3, #3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3208      	adds	r2, #8
 80011fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001200:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	f003 0307 	and.w	r3, r3, #7
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	220f      	movs	r2, #15
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	691a      	ldr	r2, [r3, #16]
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	08da      	lsrs	r2, r3, #3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3208      	adds	r2, #8
 8001236:	69b9      	ldr	r1, [r7, #24]
 8001238:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	2203      	movs	r2, #3
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 0203 	and.w	r2, r3, #3
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001278:	2b00      	cmp	r3, #0
 800127a:	f000 80a2 	beq.w	80013c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	4b57      	ldr	r3, [pc, #348]	@ (80013e0 <HAL_GPIO_Init+0x2e8>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001286:	4a56      	ldr	r2, [pc, #344]	@ (80013e0 <HAL_GPIO_Init+0x2e8>)
 8001288:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800128c:	6453      	str	r3, [r2, #68]	@ 0x44
 800128e:	4b54      	ldr	r3, [pc, #336]	@ (80013e0 <HAL_GPIO_Init+0x2e8>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001292:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800129a:	4a52      	ldr	r2, [pc, #328]	@ (80013e4 <HAL_GPIO_Init+0x2ec>)
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	089b      	lsrs	r3, r3, #2
 80012a0:	3302      	adds	r3, #2
 80012a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	f003 0303 	and.w	r3, r3, #3
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	220f      	movs	r2, #15
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43db      	mvns	r3, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4013      	ands	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a49      	ldr	r2, [pc, #292]	@ (80013e8 <HAL_GPIO_Init+0x2f0>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d019      	beq.n	80012fa <HAL_GPIO_Init+0x202>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a48      	ldr	r2, [pc, #288]	@ (80013ec <HAL_GPIO_Init+0x2f4>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d013      	beq.n	80012f6 <HAL_GPIO_Init+0x1fe>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a47      	ldr	r2, [pc, #284]	@ (80013f0 <HAL_GPIO_Init+0x2f8>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d00d      	beq.n	80012f2 <HAL_GPIO_Init+0x1fa>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a46      	ldr	r2, [pc, #280]	@ (80013f4 <HAL_GPIO_Init+0x2fc>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d007      	beq.n	80012ee <HAL_GPIO_Init+0x1f6>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a45      	ldr	r2, [pc, #276]	@ (80013f8 <HAL_GPIO_Init+0x300>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d101      	bne.n	80012ea <HAL_GPIO_Init+0x1f2>
 80012e6:	2304      	movs	r3, #4
 80012e8:	e008      	b.n	80012fc <HAL_GPIO_Init+0x204>
 80012ea:	2307      	movs	r3, #7
 80012ec:	e006      	b.n	80012fc <HAL_GPIO_Init+0x204>
 80012ee:	2303      	movs	r3, #3
 80012f0:	e004      	b.n	80012fc <HAL_GPIO_Init+0x204>
 80012f2:	2302      	movs	r3, #2
 80012f4:	e002      	b.n	80012fc <HAL_GPIO_Init+0x204>
 80012f6:	2301      	movs	r3, #1
 80012f8:	e000      	b.n	80012fc <HAL_GPIO_Init+0x204>
 80012fa:	2300      	movs	r3, #0
 80012fc:	69fa      	ldr	r2, [r7, #28]
 80012fe:	f002 0203 	and.w	r2, r2, #3
 8001302:	0092      	lsls	r2, r2, #2
 8001304:	4093      	lsls	r3, r2
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4313      	orrs	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800130c:	4935      	ldr	r1, [pc, #212]	@ (80013e4 <HAL_GPIO_Init+0x2ec>)
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	089b      	lsrs	r3, r3, #2
 8001312:	3302      	adds	r3, #2
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800131a:	4b38      	ldr	r3, [pc, #224]	@ (80013fc <HAL_GPIO_Init+0x304>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	43db      	mvns	r3, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4013      	ands	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800133e:	4a2f      	ldr	r2, [pc, #188]	@ (80013fc <HAL_GPIO_Init+0x304>)
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001344:	4b2d      	ldr	r3, [pc, #180]	@ (80013fc <HAL_GPIO_Init+0x304>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d003      	beq.n	8001368 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001368:	4a24      	ldr	r2, [pc, #144]	@ (80013fc <HAL_GPIO_Init+0x304>)
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800136e:	4b23      	ldr	r3, [pc, #140]	@ (80013fc <HAL_GPIO_Init+0x304>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	43db      	mvns	r3, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4013      	ands	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	4313      	orrs	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001392:	4a1a      	ldr	r2, [pc, #104]	@ (80013fc <HAL_GPIO_Init+0x304>)
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001398:	4b18      	ldr	r3, [pc, #96]	@ (80013fc <HAL_GPIO_Init+0x304>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d003      	beq.n	80013bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013bc:	4a0f      	ldr	r2, [pc, #60]	@ (80013fc <HAL_GPIO_Init+0x304>)
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3301      	adds	r3, #1
 80013c6:	61fb      	str	r3, [r7, #28]
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	2b0f      	cmp	r3, #15
 80013cc:	f67f aea2 	bls.w	8001114 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013d0:	bf00      	nop
 80013d2:	bf00      	nop
 80013d4:	3724      	adds	r7, #36	@ 0x24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	40023800 	.word	0x40023800
 80013e4:	40013800 	.word	0x40013800
 80013e8:	40020000 	.word	0x40020000
 80013ec:	40020400 	.word	0x40020400
 80013f0:	40020800 	.word	0x40020800
 80013f4:	40020c00 	.word	0x40020c00
 80013f8:	40021000 	.word	0x40021000
 80013fc:	40013c00 	.word	0x40013c00

08001400 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	460b      	mov	r3, r1
 800140a:	807b      	strh	r3, [r7, #2]
 800140c:	4613      	mov	r3, r2
 800140e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001410:	787b      	ldrb	r3, [r7, #1]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001416:	887a      	ldrh	r2, [r7, #2]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800141c:	e003      	b.n	8001426 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800141e:	887b      	ldrh	r3, [r7, #2]
 8001420:	041a      	lsls	r2, r3, #16
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	619a      	str	r2, [r3, #24]
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
	...

08001434 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d101      	bne.n	8001446 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e12b      	b.n	800169e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2b00      	cmp	r3, #0
 8001450:	d106      	bne.n	8001460 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff fad0 	bl	8000a00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2224      	movs	r2, #36	@ 0x24
 8001464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f022 0201 	bic.w	r2, r2, #1
 8001476:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001486:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001496:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001498:	f002 fc9e 	bl	8003dd8 <HAL_RCC_GetPCLK1Freq>
 800149c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	4a81      	ldr	r2, [pc, #516]	@ (80016a8 <HAL_I2C_Init+0x274>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d807      	bhi.n	80014b8 <HAL_I2C_Init+0x84>
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4a80      	ldr	r2, [pc, #512]	@ (80016ac <HAL_I2C_Init+0x278>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	bf94      	ite	ls
 80014b0:	2301      	movls	r3, #1
 80014b2:	2300      	movhi	r3, #0
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	e006      	b.n	80014c6 <HAL_I2C_Init+0x92>
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	4a7d      	ldr	r2, [pc, #500]	@ (80016b0 <HAL_I2C_Init+0x27c>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	bf94      	ite	ls
 80014c0:	2301      	movls	r3, #1
 80014c2:	2300      	movhi	r3, #0
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e0e7      	b.n	800169e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	4a78      	ldr	r2, [pc, #480]	@ (80016b4 <HAL_I2C_Init+0x280>)
 80014d2:	fba2 2303 	umull	r2, r3, r2, r3
 80014d6:	0c9b      	lsrs	r3, r3, #18
 80014d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	68ba      	ldr	r2, [r7, #8]
 80014ea:	430a      	orrs	r2, r1
 80014ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	6a1b      	ldr	r3, [r3, #32]
 80014f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	4a6a      	ldr	r2, [pc, #424]	@ (80016a8 <HAL_I2C_Init+0x274>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d802      	bhi.n	8001508 <HAL_I2C_Init+0xd4>
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	3301      	adds	r3, #1
 8001506:	e009      	b.n	800151c <HAL_I2C_Init+0xe8>
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800150e:	fb02 f303 	mul.w	r3, r2, r3
 8001512:	4a69      	ldr	r2, [pc, #420]	@ (80016b8 <HAL_I2C_Init+0x284>)
 8001514:	fba2 2303 	umull	r2, r3, r2, r3
 8001518:	099b      	lsrs	r3, r3, #6
 800151a:	3301      	adds	r3, #1
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	6812      	ldr	r2, [r2, #0]
 8001520:	430b      	orrs	r3, r1
 8001522:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	69db      	ldr	r3, [r3, #28]
 800152a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800152e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	495c      	ldr	r1, [pc, #368]	@ (80016a8 <HAL_I2C_Init+0x274>)
 8001538:	428b      	cmp	r3, r1
 800153a:	d819      	bhi.n	8001570 <HAL_I2C_Init+0x13c>
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	1e59      	subs	r1, r3, #1
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	fbb1 f3f3 	udiv	r3, r1, r3
 800154a:	1c59      	adds	r1, r3, #1
 800154c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001550:	400b      	ands	r3, r1
 8001552:	2b00      	cmp	r3, #0
 8001554:	d00a      	beq.n	800156c <HAL_I2C_Init+0x138>
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	1e59      	subs	r1, r3, #1
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	fbb1 f3f3 	udiv	r3, r1, r3
 8001564:	3301      	adds	r3, #1
 8001566:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800156a:	e051      	b.n	8001610 <HAL_I2C_Init+0x1dc>
 800156c:	2304      	movs	r3, #4
 800156e:	e04f      	b.n	8001610 <HAL_I2C_Init+0x1dc>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d111      	bne.n	800159c <HAL_I2C_Init+0x168>
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	1e58      	subs	r0, r3, #1
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6859      	ldr	r1, [r3, #4]
 8001580:	460b      	mov	r3, r1
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	440b      	add	r3, r1
 8001586:	fbb0 f3f3 	udiv	r3, r0, r3
 800158a:	3301      	adds	r3, #1
 800158c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001590:	2b00      	cmp	r3, #0
 8001592:	bf0c      	ite	eq
 8001594:	2301      	moveq	r3, #1
 8001596:	2300      	movne	r3, #0
 8001598:	b2db      	uxtb	r3, r3
 800159a:	e012      	b.n	80015c2 <HAL_I2C_Init+0x18e>
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	1e58      	subs	r0, r3, #1
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6859      	ldr	r1, [r3, #4]
 80015a4:	460b      	mov	r3, r1
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	440b      	add	r3, r1
 80015aa:	0099      	lsls	r1, r3, #2
 80015ac:	440b      	add	r3, r1
 80015ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80015b2:	3301      	adds	r3, #1
 80015b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	bf0c      	ite	eq
 80015bc:	2301      	moveq	r3, #1
 80015be:	2300      	movne	r3, #0
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <HAL_I2C_Init+0x196>
 80015c6:	2301      	movs	r3, #1
 80015c8:	e022      	b.n	8001610 <HAL_I2C_Init+0x1dc>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d10e      	bne.n	80015f0 <HAL_I2C_Init+0x1bc>
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	1e58      	subs	r0, r3, #1
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6859      	ldr	r1, [r3, #4]
 80015da:	460b      	mov	r3, r1
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	440b      	add	r3, r1
 80015e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80015e4:	3301      	adds	r3, #1
 80015e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015ee:	e00f      	b.n	8001610 <HAL_I2C_Init+0x1dc>
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	1e58      	subs	r0, r3, #1
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6859      	ldr	r1, [r3, #4]
 80015f8:	460b      	mov	r3, r1
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	440b      	add	r3, r1
 80015fe:	0099      	lsls	r1, r3, #2
 8001600:	440b      	add	r3, r1
 8001602:	fbb0 f3f3 	udiv	r3, r0, r3
 8001606:	3301      	adds	r3, #1
 8001608:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800160c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001610:	6879      	ldr	r1, [r7, #4]
 8001612:	6809      	ldr	r1, [r1, #0]
 8001614:	4313      	orrs	r3, r2
 8001616:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	69da      	ldr	r2, [r3, #28]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a1b      	ldr	r3, [r3, #32]
 800162a:	431a      	orrs	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	430a      	orrs	r2, r1
 8001632:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800163e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	6911      	ldr	r1, [r2, #16]
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	68d2      	ldr	r2, [r2, #12]
 800164a:	4311      	orrs	r1, r2
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	6812      	ldr	r2, [r2, #0]
 8001650:	430b      	orrs	r3, r1
 8001652:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	695a      	ldr	r2, [r3, #20]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	431a      	orrs	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	430a      	orrs	r2, r1
 800166e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f042 0201 	orr.w	r2, r2, #1
 800167e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2220      	movs	r2, #32
 800168a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	000186a0 	.word	0x000186a0
 80016ac:	001e847f 	.word	0x001e847f
 80016b0:	003d08ff 	.word	0x003d08ff
 80016b4:	431bde83 	.word	0x431bde83
 80016b8:	10624dd3 	.word	0x10624dd3

080016bc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b088      	sub	sp, #32
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e128      	b.n	8001920 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d109      	bne.n	80016ee <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a90      	ldr	r2, [pc, #576]	@ (8001928 <HAL_I2S_Init+0x26c>)
 80016e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f7ff f9d1 	bl	8000a90 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2202      	movs	r2, #2
 80016f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	69db      	ldr	r3, [r3, #28]
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	6812      	ldr	r2, [r2, #0]
 8001700:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001704:	f023 030f 	bic.w	r3, r3, #15
 8001708:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2202      	movs	r2, #2
 8001710:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	2b02      	cmp	r3, #2
 8001718:	d060      	beq.n	80017dc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d102      	bne.n	8001728 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001722:	2310      	movs	r3, #16
 8001724:	617b      	str	r3, [r7, #20]
 8001726:	e001      	b.n	800172c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001728:	2320      	movs	r3, #32
 800172a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	2b20      	cmp	r3, #32
 8001732:	d802      	bhi.n	800173a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800173a:	2001      	movs	r0, #1
 800173c:	f002 fc50 	bl	8003fe0 <HAL_RCCEx_GetPeriphCLKFreq>
 8001740:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800174a:	d125      	bne.n	8001798 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d010      	beq.n	8001776 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	68fa      	ldr	r2, [r7, #12]
 800175a:	fbb2 f2f3 	udiv	r2, r2, r3
 800175e:	4613      	mov	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	461a      	mov	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	695b      	ldr	r3, [r3, #20]
 800176c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001770:	3305      	adds	r3, #5
 8001772:	613b      	str	r3, [r7, #16]
 8001774:	e01f      	b.n	80017b6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	68fa      	ldr	r2, [r7, #12]
 800177c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001780:	4613      	mov	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	461a      	mov	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	695b      	ldr	r3, [r3, #20]
 800178e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001792:	3305      	adds	r3, #5
 8001794:	613b      	str	r3, [r7, #16]
 8001796:	e00e      	b.n	80017b6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001798:	68fa      	ldr	r2, [r7, #12]
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	fbb2 f2f3 	udiv	r2, r2, r3
 80017a0:	4613      	mov	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	461a      	mov	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	695b      	ldr	r3, [r3, #20]
 80017ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b2:	3305      	adds	r3, #5
 80017b4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	4a5c      	ldr	r2, [pc, #368]	@ (800192c <HAL_I2S_Init+0x270>)
 80017ba:	fba2 2303 	umull	r2, r3, r2, r3
 80017be:	08db      	lsrs	r3, r3, #3
 80017c0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	085b      	lsrs	r3, r3, #1
 80017d2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	021b      	lsls	r3, r3, #8
 80017d8:	61bb      	str	r3, [r7, #24]
 80017da:	e003      	b.n	80017e4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80017dc:	2302      	movs	r3, #2
 80017de:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d902      	bls.n	80017f0 <HAL_I2S_Init+0x134>
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	2bff      	cmp	r3, #255	@ 0xff
 80017ee:	d907      	bls.n	8001800 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f4:	f043 0210 	orr.w	r2, r3, #16
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e08f      	b.n	8001920 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	691a      	ldr	r2, [r3, #16]
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	ea42 0103 	orr.w	r1, r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	69fa      	ldr	r2, [r7, #28]
 8001810:	430a      	orrs	r2, r1
 8001812:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800181e:	f023 030f 	bic.w	r3, r3, #15
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	6851      	ldr	r1, [r2, #4]
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	6892      	ldr	r2, [r2, #8]
 800182a:	4311      	orrs	r1, r2
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	68d2      	ldr	r2, [r2, #12]
 8001830:	4311      	orrs	r1, r2
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	6992      	ldr	r2, [r2, #24]
 8001836:	430a      	orrs	r2, r1
 8001838:	431a      	orrs	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001842:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d161      	bne.n	8001910 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4a38      	ldr	r2, [pc, #224]	@ (8001930 <HAL_I2S_Init+0x274>)
 8001850:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a37      	ldr	r2, [pc, #220]	@ (8001934 <HAL_I2S_Init+0x278>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d101      	bne.n	8001860 <HAL_I2S_Init+0x1a4>
 800185c:	4b36      	ldr	r3, [pc, #216]	@ (8001938 <HAL_I2S_Init+0x27c>)
 800185e:	e001      	b.n	8001864 <HAL_I2S_Init+0x1a8>
 8001860:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	6812      	ldr	r2, [r2, #0]
 800186a:	4932      	ldr	r1, [pc, #200]	@ (8001934 <HAL_I2S_Init+0x278>)
 800186c:	428a      	cmp	r2, r1
 800186e:	d101      	bne.n	8001874 <HAL_I2S_Init+0x1b8>
 8001870:	4a31      	ldr	r2, [pc, #196]	@ (8001938 <HAL_I2S_Init+0x27c>)
 8001872:	e001      	b.n	8001878 <HAL_I2S_Init+0x1bc>
 8001874:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001878:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800187c:	f023 030f 	bic.w	r3, r3, #15
 8001880:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a2b      	ldr	r2, [pc, #172]	@ (8001934 <HAL_I2S_Init+0x278>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d101      	bne.n	8001890 <HAL_I2S_Init+0x1d4>
 800188c:	4b2a      	ldr	r3, [pc, #168]	@ (8001938 <HAL_I2S_Init+0x27c>)
 800188e:	e001      	b.n	8001894 <HAL_I2S_Init+0x1d8>
 8001890:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001894:	2202      	movs	r2, #2
 8001896:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a25      	ldr	r2, [pc, #148]	@ (8001934 <HAL_I2S_Init+0x278>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d101      	bne.n	80018a6 <HAL_I2S_Init+0x1ea>
 80018a2:	4b25      	ldr	r3, [pc, #148]	@ (8001938 <HAL_I2S_Init+0x27c>)
 80018a4:	e001      	b.n	80018aa <HAL_I2S_Init+0x1ee>
 80018a6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80018aa:	69db      	ldr	r3, [r3, #28]
 80018ac:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80018b6:	d003      	beq.n	80018c0 <HAL_I2S_Init+0x204>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d103      	bne.n	80018c8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80018c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018c4:	613b      	str	r3, [r7, #16]
 80018c6:	e001      	b.n	80018cc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80018c8:	2300      	movs	r3, #0
 80018ca:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80018d6:	4313      	orrs	r3, r2
 80018d8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80018e0:	4313      	orrs	r3, r2
 80018e2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80018ea:	4313      	orrs	r3, r2
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	897b      	ldrh	r3, [r7, #10]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80018f8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a0d      	ldr	r2, [pc, #52]	@ (8001934 <HAL_I2S_Init+0x278>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d101      	bne.n	8001908 <HAL_I2S_Init+0x24c>
 8001904:	4b0c      	ldr	r3, [pc, #48]	@ (8001938 <HAL_I2S_Init+0x27c>)
 8001906:	e001      	b.n	800190c <HAL_I2S_Init+0x250>
 8001908:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800190c:	897a      	ldrh	r2, [r7, #10]
 800190e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2201      	movs	r2, #1
 800191a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	3720      	adds	r7, #32
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	08001a33 	.word	0x08001a33
 800192c:	cccccccd 	.word	0xcccccccd
 8001930:	08001b49 	.word	0x08001b49
 8001934:	40003800 	.word	0x40003800
 8001938:	40003400 	.word	0x40003400

0800193c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001984:	881a      	ldrh	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001990:	1c9a      	adds	r2, r3, #2
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800199a:	b29b      	uxth	r3, r3
 800199c:	3b01      	subs	r3, #1
 800199e:	b29a      	uxth	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d10e      	bne.n	80019cc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	685a      	ldr	r2, [r3, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80019bc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2201      	movs	r2, #1
 80019c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7ff ffb8 	bl	800193c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80019cc:	bf00      	nop
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	68da      	ldr	r2, [r3, #12]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019e6:	b292      	uxth	r2, r2
 80019e8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ee:	1c9a      	adds	r2, r3, #2
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	3b01      	subs	r3, #1
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d10e      	bne.n	8001a2a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	685a      	ldr	r2, [r3, #4]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001a1a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7ff ff93 	bl	8001950 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b086      	sub	sp, #24
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b04      	cmp	r3, #4
 8001a4c:	d13a      	bne.n	8001ac4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d109      	bne.n	8001a6c <I2S_IRQHandler+0x3a>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a62:	2b40      	cmp	r3, #64	@ 0x40
 8001a64:	d102      	bne.n	8001a6c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff ffb4 	bl	80019d4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a72:	2b40      	cmp	r3, #64	@ 0x40
 8001a74:	d126      	bne.n	8001ac4 <I2S_IRQHandler+0x92>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 0320 	and.w	r3, r3, #32
 8001a80:	2b20      	cmp	r3, #32
 8001a82:	d11f      	bne.n	8001ac4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	685a      	ldr	r2, [r3, #4]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001a92:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001a94:	2300      	movs	r3, #0
 8001a96:	613b      	str	r3, [r7, #16]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	613b      	str	r3, [r7, #16]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	613b      	str	r3, [r7, #16]
 8001aa8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2201      	movs	r2, #1
 8001aae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab6:	f043 0202 	orr.w	r2, r3, #2
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff ff50 	bl	8001964 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	2b03      	cmp	r3, #3
 8001ace:	d136      	bne.n	8001b3e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d109      	bne.n	8001aee <I2S_IRQHandler+0xbc>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ae4:	2b80      	cmp	r3, #128	@ 0x80
 8001ae6:	d102      	bne.n	8001aee <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f7ff ff45 	bl	8001978 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	f003 0308 	and.w	r3, r3, #8
 8001af4:	2b08      	cmp	r3, #8
 8001af6:	d122      	bne.n	8001b3e <I2S_IRQHandler+0x10c>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f003 0320 	and.w	r3, r3, #32
 8001b02:	2b20      	cmp	r3, #32
 8001b04:	d11b      	bne.n	8001b3e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001b14:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001b16:	2300      	movs	r3, #0
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b30:	f043 0204 	orr.w	r2, r3, #4
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f7ff ff13 	bl	8001964 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001b3e:	bf00      	nop
 8001b40:	3718      	adds	r7, #24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b088      	sub	sp, #32
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a92      	ldr	r2, [pc, #584]	@ (8001da8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d101      	bne.n	8001b66 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001b62:	4b92      	ldr	r3, [pc, #584]	@ (8001dac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001b64:	e001      	b.n	8001b6a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001b66:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a8b      	ldr	r2, [pc, #556]	@ (8001da8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d101      	bne.n	8001b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001b80:	4b8a      	ldr	r3, [pc, #552]	@ (8001dac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001b82:	e001      	b.n	8001b88 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001b84:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b94:	d004      	beq.n	8001ba0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f040 8099 	bne.w	8001cd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d107      	bne.n	8001bba <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d002      	beq.n	8001bba <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 f925 	bl	8001e04 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d107      	bne.n	8001bd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d002      	beq.n	8001bd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 f9c8 	bl	8001f64 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bda:	2b40      	cmp	r3, #64	@ 0x40
 8001bdc:	d13a      	bne.n	8001c54 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	f003 0320 	and.w	r3, r3, #32
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d035      	beq.n	8001c54 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a6e      	ldr	r2, [pc, #440]	@ (8001da8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d101      	bne.n	8001bf6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001bf2:	4b6e      	ldr	r3, [pc, #440]	@ (8001dac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001bf4:	e001      	b.n	8001bfa <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001bf6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001bfa:	685a      	ldr	r2, [r3, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4969      	ldr	r1, [pc, #420]	@ (8001da8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001c02:	428b      	cmp	r3, r1
 8001c04:	d101      	bne.n	8001c0a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001c06:	4b69      	ldr	r3, [pc, #420]	@ (8001dac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001c08:	e001      	b.n	8001c0e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001c0a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001c0e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001c12:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	685a      	ldr	r2, [r3, #4]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001c22:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001c24:	2300      	movs	r3, #0
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c46:	f043 0202 	orr.w	r2, r3, #2
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7ff fe88 	bl	8001964 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	f003 0308 	and.w	r3, r3, #8
 8001c5a:	2b08      	cmp	r3, #8
 8001c5c:	f040 80c3 	bne.w	8001de6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	f003 0320 	and.w	r3, r3, #32
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f000 80bd 	beq.w	8001de6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001c7a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a49      	ldr	r2, [pc, #292]	@ (8001da8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d101      	bne.n	8001c8a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001c86:	4b49      	ldr	r3, [pc, #292]	@ (8001dac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001c88:	e001      	b.n	8001c8e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001c8a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001c8e:	685a      	ldr	r2, [r3, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4944      	ldr	r1, [pc, #272]	@ (8001da8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001c96:	428b      	cmp	r3, r1
 8001c98:	d101      	bne.n	8001c9e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001c9a:	4b44      	ldr	r3, [pc, #272]	@ (8001dac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001c9c:	e001      	b.n	8001ca2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001c9e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001ca2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001ca6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001ca8:	2300      	movs	r3, #0
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	60bb      	str	r3, [r7, #8]
 8001cb4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc2:	f043 0204 	orr.w	r2, r3, #4
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff fe4a 	bl	8001964 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001cd0:	e089      	b.n	8001de6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d107      	bne.n	8001cec <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d002      	beq.n	8001cec <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 f8be 	bl	8001e68 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d107      	bne.n	8001d06 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d002      	beq.n	8001d06 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 f8fd 	bl	8001f00 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d0c:	2b40      	cmp	r3, #64	@ 0x40
 8001d0e:	d12f      	bne.n	8001d70 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	f003 0320 	and.w	r3, r3, #32
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d02a      	beq.n	8001d70 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001d28:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a1e      	ldr	r2, [pc, #120]	@ (8001da8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d101      	bne.n	8001d38 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001d34:	4b1d      	ldr	r3, [pc, #116]	@ (8001dac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d36:	e001      	b.n	8001d3c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001d38:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4919      	ldr	r1, [pc, #100]	@ (8001da8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d44:	428b      	cmp	r3, r1
 8001d46:	d101      	bne.n	8001d4c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001d48:	4b18      	ldr	r3, [pc, #96]	@ (8001dac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d4a:	e001      	b.n	8001d50 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001d4c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001d50:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001d54:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d62:	f043 0202 	orr.w	r2, r3, #2
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7ff fdfa 	bl	8001964 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	f003 0308 	and.w	r3, r3, #8
 8001d76:	2b08      	cmp	r3, #8
 8001d78:	d136      	bne.n	8001de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	f003 0320 	and.w	r3, r3, #32
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d031      	beq.n	8001de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a07      	ldr	r2, [pc, #28]	@ (8001da8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d101      	bne.n	8001d92 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001d8e:	4b07      	ldr	r3, [pc, #28]	@ (8001dac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d90:	e001      	b.n	8001d96 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001d92:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4902      	ldr	r1, [pc, #8]	@ (8001da8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d9e:	428b      	cmp	r3, r1
 8001da0:	d106      	bne.n	8001db0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8001da2:	4b02      	ldr	r3, [pc, #8]	@ (8001dac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001da4:	e006      	b.n	8001db4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8001da6:	bf00      	nop
 8001da8:	40003800 	.word	0x40003800
 8001dac:	40003400 	.word	0x40003400
 8001db0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001db4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001db8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001dc8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd6:	f043 0204 	orr.w	r2, r3, #4
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7ff fdc0 	bl	8001964 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001de4:	e000      	b.n	8001de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001de6:	bf00      	nop
}
 8001de8:	bf00      	nop
 8001dea:	3720      	adds	r7, #32
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e10:	1c99      	adds	r1, r3, #2
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6251      	str	r1, [r2, #36]	@ 0x24
 8001e16:	881a      	ldrh	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	3b01      	subs	r3, #1
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d113      	bne.n	8001e5e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001e44:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d106      	bne.n	8001e5e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f7ff ffc9 	bl	8001df0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
	...

08001e68 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e74:	1c99      	adds	r1, r3, #2
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	6251      	str	r1, [r2, #36]	@ 0x24
 8001e7a:	8819      	ldrh	r1, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a1d      	ldr	r2, [pc, #116]	@ (8001ef8 <I2SEx_TxISR_I2SExt+0x90>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d101      	bne.n	8001e8a <I2SEx_TxISR_I2SExt+0x22>
 8001e86:	4b1d      	ldr	r3, [pc, #116]	@ (8001efc <I2SEx_TxISR_I2SExt+0x94>)
 8001e88:	e001      	b.n	8001e8e <I2SEx_TxISR_I2SExt+0x26>
 8001e8a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001e8e:	460a      	mov	r2, r1
 8001e90:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d121      	bne.n	8001eee <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a12      	ldr	r2, [pc, #72]	@ (8001ef8 <I2SEx_TxISR_I2SExt+0x90>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d101      	bne.n	8001eb8 <I2SEx_TxISR_I2SExt+0x50>
 8001eb4:	4b11      	ldr	r3, [pc, #68]	@ (8001efc <I2SEx_TxISR_I2SExt+0x94>)
 8001eb6:	e001      	b.n	8001ebc <I2SEx_TxISR_I2SExt+0x54>
 8001eb8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	490d      	ldr	r1, [pc, #52]	@ (8001ef8 <I2SEx_TxISR_I2SExt+0x90>)
 8001ec4:	428b      	cmp	r3, r1
 8001ec6:	d101      	bne.n	8001ecc <I2SEx_TxISR_I2SExt+0x64>
 8001ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8001efc <I2SEx_TxISR_I2SExt+0x94>)
 8001eca:	e001      	b.n	8001ed0 <I2SEx_TxISR_I2SExt+0x68>
 8001ecc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001ed0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001ed4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d106      	bne.n	8001eee <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7ff ff81 	bl	8001df0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40003800 	.word	0x40003800
 8001efc:	40003400 	.word	0x40003400

08001f00 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68d8      	ldr	r0, [r3, #12]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f12:	1c99      	adds	r1, r3, #2
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8001f18:	b282      	uxth	r2, r0
 8001f1a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	3b01      	subs	r3, #1
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d113      	bne.n	8001f5c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001f42:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d106      	bne.n	8001f5c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7ff ff4a 	bl	8001df0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001f5c:	bf00      	nop
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a20      	ldr	r2, [pc, #128]	@ (8001ff4 <I2SEx_RxISR_I2SExt+0x90>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d101      	bne.n	8001f7a <I2SEx_RxISR_I2SExt+0x16>
 8001f76:	4b20      	ldr	r3, [pc, #128]	@ (8001ff8 <I2SEx_RxISR_I2SExt+0x94>)
 8001f78:	e001      	b.n	8001f7e <I2SEx_RxISR_I2SExt+0x1a>
 8001f7a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001f7e:	68d8      	ldr	r0, [r3, #12]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f84:	1c99      	adds	r1, r3, #2
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8001f8a:	b282      	uxth	r2, r0
 8001f8c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	3b01      	subs	r3, #1
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d121      	bne.n	8001fea <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a12      	ldr	r2, [pc, #72]	@ (8001ff4 <I2SEx_RxISR_I2SExt+0x90>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d101      	bne.n	8001fb4 <I2SEx_RxISR_I2SExt+0x50>
 8001fb0:	4b11      	ldr	r3, [pc, #68]	@ (8001ff8 <I2SEx_RxISR_I2SExt+0x94>)
 8001fb2:	e001      	b.n	8001fb8 <I2SEx_RxISR_I2SExt+0x54>
 8001fb4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	490d      	ldr	r1, [pc, #52]	@ (8001ff4 <I2SEx_RxISR_I2SExt+0x90>)
 8001fc0:	428b      	cmp	r3, r1
 8001fc2:	d101      	bne.n	8001fc8 <I2SEx_RxISR_I2SExt+0x64>
 8001fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff8 <I2SEx_RxISR_I2SExt+0x94>)
 8001fc6:	e001      	b.n	8001fcc <I2SEx_RxISR_I2SExt+0x68>
 8001fc8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001fcc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001fd0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d106      	bne.n	8001fea <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f7ff ff03 	bl	8001df0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001fea:	bf00      	nop
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40003800 	.word	0x40003800
 8001ff8:	40003400 	.word	0x40003400

08001ffc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ffe:	b08f      	sub	sp, #60	@ 0x3c
 8002000:	af0a      	add	r7, sp, #40	@ 0x28
 8002002:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e10f      	b.n	800222e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b00      	cmp	r3, #0
 800201e:	d106      	bne.n	800202e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f005 feab 	bl	8007d84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2203      	movs	r2, #3
 8002032:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800203a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800203e:	2b00      	cmp	r3, #0
 8002040:	d102      	bne.n	8002048 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f002 f9c4 	bl	80043da <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	603b      	str	r3, [r7, #0]
 8002058:	687e      	ldr	r6, [r7, #4]
 800205a:	466d      	mov	r5, sp
 800205c:	f106 0410 	add.w	r4, r6, #16
 8002060:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002062:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002064:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002066:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002068:	e894 0003 	ldmia.w	r4, {r0, r1}
 800206c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002070:	1d33      	adds	r3, r6, #4
 8002072:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002074:	6838      	ldr	r0, [r7, #0]
 8002076:	f002 f89c 	bl	80041b2 <USB_CoreInit>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d005      	beq.n	800208c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2202      	movs	r2, #2
 8002084:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e0d0      	b.n	800222e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2100      	movs	r1, #0
 8002092:	4618      	mov	r0, r3
 8002094:	f002 f9b2 	bl	80043fc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002098:	2300      	movs	r3, #0
 800209a:	73fb      	strb	r3, [r7, #15]
 800209c:	e04a      	b.n	8002134 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800209e:	7bfa      	ldrb	r2, [r7, #15]
 80020a0:	6879      	ldr	r1, [r7, #4]
 80020a2:	4613      	mov	r3, r2
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	4413      	add	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	440b      	add	r3, r1
 80020ac:	333d      	adds	r3, #61	@ 0x3d
 80020ae:	2201      	movs	r2, #1
 80020b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020b2:	7bfa      	ldrb	r2, [r7, #15]
 80020b4:	6879      	ldr	r1, [r7, #4]
 80020b6:	4613      	mov	r3, r2
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	4413      	add	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	440b      	add	r3, r1
 80020c0:	333c      	adds	r3, #60	@ 0x3c
 80020c2:	7bfa      	ldrb	r2, [r7, #15]
 80020c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80020c6:	7bfa      	ldrb	r2, [r7, #15]
 80020c8:	7bfb      	ldrb	r3, [r7, #15]
 80020ca:	b298      	uxth	r0, r3
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	4613      	mov	r3, r2
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	4413      	add	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	440b      	add	r3, r1
 80020d8:	3344      	adds	r3, #68	@ 0x44
 80020da:	4602      	mov	r2, r0
 80020dc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020de:	7bfa      	ldrb	r2, [r7, #15]
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	4613      	mov	r3, r2
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	4413      	add	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	440b      	add	r3, r1
 80020ec:	3340      	adds	r3, #64	@ 0x40
 80020ee:	2200      	movs	r2, #0
 80020f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020f2:	7bfa      	ldrb	r2, [r7, #15]
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	4613      	mov	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	4413      	add	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	440b      	add	r3, r1
 8002100:	3348      	adds	r3, #72	@ 0x48
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002106:	7bfa      	ldrb	r2, [r7, #15]
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	4613      	mov	r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	4413      	add	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	440b      	add	r3, r1
 8002114:	334c      	adds	r3, #76	@ 0x4c
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800211a:	7bfa      	ldrb	r2, [r7, #15]
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	4613      	mov	r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	4413      	add	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	440b      	add	r3, r1
 8002128:	3354      	adds	r3, #84	@ 0x54
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800212e:	7bfb      	ldrb	r3, [r7, #15]
 8002130:	3301      	adds	r3, #1
 8002132:	73fb      	strb	r3, [r7, #15]
 8002134:	7bfa      	ldrb	r2, [r7, #15]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	429a      	cmp	r2, r3
 800213c:	d3af      	bcc.n	800209e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800213e:	2300      	movs	r3, #0
 8002140:	73fb      	strb	r3, [r7, #15]
 8002142:	e044      	b.n	80021ce <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002144:	7bfa      	ldrb	r2, [r7, #15]
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	4613      	mov	r3, r2
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	4413      	add	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	440b      	add	r3, r1
 8002152:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8002156:	2200      	movs	r2, #0
 8002158:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800215a:	7bfa      	ldrb	r2, [r7, #15]
 800215c:	6879      	ldr	r1, [r7, #4]
 800215e:	4613      	mov	r3, r2
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	4413      	add	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	440b      	add	r3, r1
 8002168:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 800216c:	7bfa      	ldrb	r2, [r7, #15]
 800216e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002170:	7bfa      	ldrb	r2, [r7, #15]
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	4613      	mov	r3, r2
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	4413      	add	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	440b      	add	r3, r1
 800217e:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8002182:	2200      	movs	r2, #0
 8002184:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002186:	7bfa      	ldrb	r2, [r7, #15]
 8002188:	6879      	ldr	r1, [r7, #4]
 800218a:	4613      	mov	r3, r2
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	4413      	add	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	440b      	add	r3, r1
 8002194:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800219c:	7bfa      	ldrb	r2, [r7, #15]
 800219e:	6879      	ldr	r1, [r7, #4]
 80021a0:	4613      	mov	r3, r2
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	4413      	add	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	440b      	add	r3, r1
 80021aa:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021b2:	7bfa      	ldrb	r2, [r7, #15]
 80021b4:	6879      	ldr	r1, [r7, #4]
 80021b6:	4613      	mov	r3, r2
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	4413      	add	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	440b      	add	r3, r1
 80021c0:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
 80021ca:	3301      	adds	r3, #1
 80021cc:	73fb      	strb	r3, [r7, #15]
 80021ce:	7bfa      	ldrb	r2, [r7, #15]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d3b5      	bcc.n	8002144 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	603b      	str	r3, [r7, #0]
 80021de:	687e      	ldr	r6, [r7, #4]
 80021e0:	466d      	mov	r5, sp
 80021e2:	f106 0410 	add.w	r4, r6, #16
 80021e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80021f6:	1d33      	adds	r3, r6, #4
 80021f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021fa:	6838      	ldr	r0, [r7, #0]
 80021fc:	f002 f94a 	bl	8004494 <USB_DevInit>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d005      	beq.n	8002212 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2202      	movs	r2, #2
 800220a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e00d      	b.n	800222e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2201      	movs	r2, #1
 800221e:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4618      	mov	r0, r3
 8002228:	f003 fa99 	bl	800575e <USB_DevDisconnect>

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002236 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b084      	sub	sp, #16
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800224a:	2b01      	cmp	r3, #1
 800224c:	d101      	bne.n	8002252 <HAL_PCD_Start+0x1c>
 800224e:	2302      	movs	r3, #2
 8002250:	e020      	b.n	8002294 <HAL_PCD_Start+0x5e>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2201      	movs	r2, #1
 8002256:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800225e:	2b01      	cmp	r3, #1
 8002260:	d109      	bne.n	8002276 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002266:	2b01      	cmp	r3, #1
 8002268:	d005      	beq.n	8002276 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800226e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f002 f89c 	bl	80043b8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	f003 fa49 	bl	800571c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800229c:	b590      	push	{r4, r7, lr}
 800229e:	b08d      	sub	sp, #52	@ 0x34
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022aa:	6a3b      	ldr	r3, [r7, #32]
 80022ac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f003 fb07 	bl	80058c6 <USB_GetMode>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f040 848a 	bne.w	8002bd4 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f003 fa6b 	bl	80057a0 <USB_ReadInterrupts>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f000 8480 	beq.w	8002bd2 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	0a1b      	lsrs	r3, r3, #8
 80022dc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f003 fa58 	bl	80057a0 <USB_ReadInterrupts>
 80022f0:	4603      	mov	r3, r0
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d107      	bne.n	800230a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	695a      	ldr	r2, [r3, #20]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f002 0202 	and.w	r2, r2, #2
 8002308:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f003 fa46 	bl	80057a0 <USB_ReadInterrupts>
 8002314:	4603      	mov	r3, r0
 8002316:	f003 0310 	and.w	r3, r3, #16
 800231a:	2b10      	cmp	r3, #16
 800231c:	d161      	bne.n	80023e2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	699a      	ldr	r2, [r3, #24]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f022 0210 	bic.w	r2, r2, #16
 800232c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800232e:	6a3b      	ldr	r3, [r7, #32]
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	f003 020f 	and.w	r2, r3, #15
 800233a:	4613      	mov	r3, r2
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	4413      	add	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	4413      	add	r3, r2
 800234a:	3304      	adds	r3, #4
 800234c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	0c5b      	lsrs	r3, r3, #17
 8002352:	f003 030f 	and.w	r3, r3, #15
 8002356:	2b02      	cmp	r3, #2
 8002358:	d124      	bne.n	80023a4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002360:	4013      	ands	r3, r2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d035      	beq.n	80023d2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	091b      	lsrs	r3, r3, #4
 800236e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002370:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002374:	b29b      	uxth	r3, r3
 8002376:	461a      	mov	r2, r3
 8002378:	6a38      	ldr	r0, [r7, #32]
 800237a:	f003 f87d 	bl	8005478 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	691a      	ldr	r2, [r3, #16]
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	091b      	lsrs	r3, r3, #4
 8002386:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800238a:	441a      	add	r2, r3
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	6a1a      	ldr	r2, [r3, #32]
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	091b      	lsrs	r3, r3, #4
 8002398:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800239c:	441a      	add	r2, r3
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	621a      	str	r2, [r3, #32]
 80023a2:	e016      	b.n	80023d2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	0c5b      	lsrs	r3, r3, #17
 80023a8:	f003 030f 	and.w	r3, r3, #15
 80023ac:	2b06      	cmp	r3, #6
 80023ae:	d110      	bne.n	80023d2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80023b6:	2208      	movs	r2, #8
 80023b8:	4619      	mov	r1, r3
 80023ba:	6a38      	ldr	r0, [r7, #32]
 80023bc:	f003 f85c 	bl	8005478 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	6a1a      	ldr	r2, [r3, #32]
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	091b      	lsrs	r3, r3, #4
 80023c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023cc:	441a      	add	r2, r3
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	699a      	ldr	r2, [r3, #24]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f042 0210 	orr.w	r2, r2, #16
 80023e0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f003 f9da 	bl	80057a0 <USB_ReadInterrupts>
 80023ec:	4603      	mov	r3, r0
 80023ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023f2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80023f6:	f040 80a7 	bne.w	8002548 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f003 f9df 	bl	80057c6 <USB_ReadDevAllOutEpInterrupt>
 8002408:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800240a:	e099      	b.n	8002540 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800240c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b00      	cmp	r3, #0
 8002414:	f000 808e 	beq.w	8002534 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	4611      	mov	r1, r2
 8002422:	4618      	mov	r0, r3
 8002424:	f003 fa03 	bl	800582e <USB_ReadDevOutEPInterrupt>
 8002428:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00c      	beq.n	800244e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002436:	015a      	lsls	r2, r3, #5
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	4413      	add	r3, r2
 800243c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002440:	461a      	mov	r2, r3
 8002442:	2301      	movs	r3, #1
 8002444:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002446:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f000 fec3 	bl	80031d4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	f003 0308 	and.w	r3, r3, #8
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00c      	beq.n	8002472 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245a:	015a      	lsls	r2, r3, #5
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	4413      	add	r3, r2
 8002460:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002464:	461a      	mov	r2, r3
 8002466:	2308      	movs	r3, #8
 8002468:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800246a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f000 ff99 	bl	80033a4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	f003 0310 	and.w	r3, r3, #16
 8002478:	2b00      	cmp	r3, #0
 800247a:	d008      	beq.n	800248e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800247c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247e:	015a      	lsls	r2, r3, #5
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	4413      	add	r3, r2
 8002484:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002488:	461a      	mov	r2, r3
 800248a:	2310      	movs	r3, #16
 800248c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d030      	beq.n	80024fa <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002498:	6a3b      	ldr	r3, [r7, #32]
 800249a:	695b      	ldr	r3, [r3, #20]
 800249c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024a0:	2b80      	cmp	r3, #128	@ 0x80
 80024a2:	d109      	bne.n	80024b8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	69fa      	ldr	r2, [r7, #28]
 80024ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80024b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024b6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80024b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024ba:	4613      	mov	r3, r2
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	4413      	add	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	4413      	add	r3, r2
 80024ca:	3304      	adds	r3, #4
 80024cc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	78db      	ldrb	r3, [r3, #3]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d108      	bne.n	80024e8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	2200      	movs	r2, #0
 80024da:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80024dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	4619      	mov	r1, r3
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f005 fd58 	bl	8007f98 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80024e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ea:	015a      	lsls	r2, r3, #5
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	4413      	add	r3, r2
 80024f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024f4:	461a      	mov	r2, r3
 80024f6:	2302      	movs	r3, #2
 80024f8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	f003 0320 	and.w	r3, r3, #32
 8002500:	2b00      	cmp	r3, #0
 8002502:	d008      	beq.n	8002516 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002506:	015a      	lsls	r2, r3, #5
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	4413      	add	r3, r2
 800250c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002510:	461a      	mov	r2, r3
 8002512:	2320      	movs	r3, #32
 8002514:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d009      	beq.n	8002534 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002522:	015a      	lsls	r2, r3, #5
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	4413      	add	r3, r2
 8002528:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800252c:	461a      	mov	r2, r3
 800252e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002532:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002536:	3301      	adds	r3, #1
 8002538:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800253a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800253c:	085b      	lsrs	r3, r3, #1
 800253e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002542:	2b00      	cmp	r3, #0
 8002544:	f47f af62 	bne.w	800240c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4618      	mov	r0, r3
 800254e:	f003 f927 	bl	80057a0 <USB_ReadInterrupts>
 8002552:	4603      	mov	r3, r0
 8002554:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002558:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800255c:	f040 80db 	bne.w	8002716 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f003 f948 	bl	80057fa <USB_ReadDevAllInEpInterrupt>
 800256a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800256c:	2300      	movs	r3, #0
 800256e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002570:	e0cd      	b.n	800270e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b00      	cmp	r3, #0
 800257a:	f000 80c2 	beq.w	8002702 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002584:	b2d2      	uxtb	r2, r2
 8002586:	4611      	mov	r1, r2
 8002588:	4618      	mov	r0, r3
 800258a:	f003 f96e 	bl	800586a <USB_ReadDevInEPInterrupt>
 800258e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	d057      	beq.n	800264a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800259a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259c:	f003 030f 	and.w	r3, r3, #15
 80025a0:	2201      	movs	r2, #1
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	43db      	mvns	r3, r3
 80025b4:	69f9      	ldr	r1, [r7, #28]
 80025b6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80025ba:	4013      	ands	r3, r2
 80025bc:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80025be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c0:	015a      	lsls	r2, r3, #5
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	4413      	add	r3, r2
 80025c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80025ca:	461a      	mov	r2, r3
 80025cc:	2301      	movs	r3, #1
 80025ce:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d132      	bne.n	800263e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025dc:	4613      	mov	r3, r2
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	4413      	add	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	440b      	add	r3, r1
 80025e6:	334c      	adds	r3, #76	@ 0x4c
 80025e8:	6819      	ldr	r1, [r3, #0]
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025ee:	4613      	mov	r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	4413      	add	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4403      	add	r3, r0
 80025f8:	3348      	adds	r3, #72	@ 0x48
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4419      	add	r1, r3
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002602:	4613      	mov	r3, r2
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	4413      	add	r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	4403      	add	r3, r0
 800260c:	334c      	adds	r3, #76	@ 0x4c
 800260e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002612:	2b00      	cmp	r3, #0
 8002614:	d113      	bne.n	800263e <HAL_PCD_IRQHandler+0x3a2>
 8002616:	6879      	ldr	r1, [r7, #4]
 8002618:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800261a:	4613      	mov	r3, r2
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	4413      	add	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	440b      	add	r3, r1
 8002624:	3354      	adds	r3, #84	@ 0x54
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d108      	bne.n	800263e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6818      	ldr	r0, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8002636:	461a      	mov	r2, r3
 8002638:	2101      	movs	r1, #1
 800263a:	f003 f975 	bl	8005928 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800263e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002640:	b2db      	uxtb	r3, r3
 8002642:	4619      	mov	r1, r3
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f005 fc2c 	bl	8007ea2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	f003 0308 	and.w	r3, r3, #8
 8002650:	2b00      	cmp	r3, #0
 8002652:	d008      	beq.n	8002666 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002656:	015a      	lsls	r2, r3, #5
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	4413      	add	r3, r2
 800265c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002660:	461a      	mov	r2, r3
 8002662:	2308      	movs	r3, #8
 8002664:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	f003 0310 	and.w	r3, r3, #16
 800266c:	2b00      	cmp	r3, #0
 800266e:	d008      	beq.n	8002682 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002672:	015a      	lsls	r2, r3, #5
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	4413      	add	r3, r2
 8002678:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800267c:	461a      	mov	r2, r3
 800267e:	2310      	movs	r3, #16
 8002680:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002688:	2b00      	cmp	r3, #0
 800268a:	d008      	beq.n	800269e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800268c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268e:	015a      	lsls	r2, r3, #5
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	4413      	add	r3, r2
 8002694:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002698:	461a      	mov	r2, r3
 800269a:	2340      	movs	r3, #64	@ 0x40
 800269c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d023      	beq.n	80026f0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80026a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80026aa:	6a38      	ldr	r0, [r7, #32]
 80026ac:	f002 f856 	bl	800475c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80026b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026b2:	4613      	mov	r3, r2
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	4413      	add	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	3338      	adds	r3, #56	@ 0x38
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	4413      	add	r3, r2
 80026c0:	3304      	adds	r3, #4
 80026c2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	78db      	ldrb	r3, [r3, #3]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d108      	bne.n	80026de <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	2200      	movs	r2, #0
 80026d0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80026d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	4619      	mov	r1, r3
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f005 fc6f 	bl	8007fbc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80026de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e0:	015a      	lsls	r2, r3, #5
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	4413      	add	r3, r2
 80026e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80026ea:	461a      	mov	r2, r3
 80026ec:	2302      	movs	r3, #2
 80026ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80026fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f000 fcdb 	bl	80030b8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002704:	3301      	adds	r3, #1
 8002706:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800270a:	085b      	lsrs	r3, r3, #1
 800270c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800270e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002710:	2b00      	cmp	r3, #0
 8002712:	f47f af2e 	bne.w	8002572 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f003 f840 	bl	80057a0 <USB_ReadInterrupts>
 8002720:	4603      	mov	r3, r0
 8002722:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002726:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800272a:	d122      	bne.n	8002772 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	69fa      	ldr	r2, [r7, #28]
 8002736:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800273a:	f023 0301 	bic.w	r3, r3, #1
 800273e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8002746:	2b01      	cmp	r3, #1
 8002748:	d108      	bne.n	800275c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002752:	2100      	movs	r1, #0
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 fec3 	bl	80034e0 <HAL_PCDEx_LPM_Callback>
 800275a:	e002      	b.n	8002762 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f005 fc0d 	bl	8007f7c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	695a      	ldr	r2, [r3, #20]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002770:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f003 f812 	bl	80057a0 <USB_ReadInterrupts>
 800277c:	4603      	mov	r3, r0
 800277e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002782:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002786:	d112      	bne.n	80027ae <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	2b01      	cmp	r3, #1
 8002796:	d102      	bne.n	800279e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f005 fbc9 	bl	8007f30 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	695a      	ldr	r2, [r3, #20]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80027ac:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f002 fff4 	bl	80057a0 <USB_ReadInterrupts>
 80027b8:	4603      	mov	r3, r0
 80027ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027c2:	f040 80b7 	bne.w	8002934 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	69fa      	ldr	r2, [r7, #28]
 80027d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80027d4:	f023 0301 	bic.w	r3, r3, #1
 80027d8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2110      	movs	r1, #16
 80027e0:	4618      	mov	r0, r3
 80027e2:	f001 ffbb 	bl	800475c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027e6:	2300      	movs	r3, #0
 80027e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027ea:	e046      	b.n	800287a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80027ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027ee:	015a      	lsls	r2, r3, #5
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	4413      	add	r3, r2
 80027f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80027f8:	461a      	mov	r2, r3
 80027fa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80027fe:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002802:	015a      	lsls	r2, r3, #5
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	4413      	add	r3, r2
 8002808:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002810:	0151      	lsls	r1, r2, #5
 8002812:	69fa      	ldr	r2, [r7, #28]
 8002814:	440a      	add	r2, r1
 8002816:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800281a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800281e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002822:	015a      	lsls	r2, r3, #5
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	4413      	add	r3, r2
 8002828:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800282c:	461a      	mov	r2, r3
 800282e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002832:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002836:	015a      	lsls	r2, r3, #5
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	4413      	add	r3, r2
 800283c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002844:	0151      	lsls	r1, r2, #5
 8002846:	69fa      	ldr	r2, [r7, #28]
 8002848:	440a      	add	r2, r1
 800284a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800284e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002852:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002856:	015a      	lsls	r2, r3, #5
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	4413      	add	r3, r2
 800285c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002864:	0151      	lsls	r1, r2, #5
 8002866:	69fa      	ldr	r2, [r7, #28]
 8002868:	440a      	add	r2, r1
 800286a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800286e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002872:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002876:	3301      	adds	r3, #1
 8002878:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002880:	429a      	cmp	r2, r3
 8002882:	d3b3      	bcc.n	80027ec <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800288a:	69db      	ldr	r3, [r3, #28]
 800288c:	69fa      	ldr	r2, [r7, #28]
 800288e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002892:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002896:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289c:	2b00      	cmp	r3, #0
 800289e:	d016      	beq.n	80028ce <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028aa:	69fa      	ldr	r2, [r7, #28]
 80028ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028b0:	f043 030b 	orr.w	r3, r3, #11
 80028b4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c0:	69fa      	ldr	r2, [r7, #28]
 80028c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028c6:	f043 030b 	orr.w	r3, r3, #11
 80028ca:	6453      	str	r3, [r2, #68]	@ 0x44
 80028cc:	e015      	b.n	80028fa <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	69fa      	ldr	r2, [r7, #28]
 80028d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028dc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80028e0:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80028e4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	69fa      	ldr	r2, [r7, #28]
 80028f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028f4:	f043 030b 	orr.w	r3, r3, #11
 80028f8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	69fa      	ldr	r2, [r7, #28]
 8002904:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002908:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800290c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6818      	ldr	r0, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800291e:	461a      	mov	r2, r3
 8002920:	f003 f802 	bl	8005928 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	695a      	ldr	r2, [r3, #20]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002932:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4618      	mov	r0, r3
 800293a:	f002 ff31 	bl	80057a0 <USB_ReadInterrupts>
 800293e:	4603      	mov	r3, r0
 8002940:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002944:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002948:	d124      	bne.n	8002994 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f002 ffc7 	bl	80058e2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4618      	mov	r0, r3
 800295a:	f001 ff7c 	bl	8004856 <USB_GetDevSpeed>
 800295e:	4603      	mov	r3, r0
 8002960:	461a      	mov	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681c      	ldr	r4, [r3, #0]
 800296a:	f001 fa29 	bl	8003dc0 <HAL_RCC_GetHCLKFreq>
 800296e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002974:	b2db      	uxtb	r3, r3
 8002976:	461a      	mov	r2, r3
 8002978:	4620      	mov	r0, r4
 800297a:	f001 fc7b 	bl	8004274 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f005 fab7 	bl	8007ef2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	695a      	ldr	r2, [r3, #20]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002992:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f002 ff01 	bl	80057a0 <USB_ReadInterrupts>
 800299e:	4603      	mov	r3, r0
 80029a0:	f003 0308 	and.w	r3, r3, #8
 80029a4:	2b08      	cmp	r3, #8
 80029a6:	d10a      	bne.n	80029be <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f005 fa94 	bl	8007ed6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	695a      	ldr	r2, [r3, #20]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f002 0208 	and.w	r2, r2, #8
 80029bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f002 feec 	bl	80057a0 <USB_ReadInterrupts>
 80029c8:	4603      	mov	r3, r0
 80029ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ce:	2b80      	cmp	r3, #128	@ 0x80
 80029d0:	d122      	bne.n	8002a18 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80029d2:	6a3b      	ldr	r3, [r7, #32]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80029da:	6a3b      	ldr	r3, [r7, #32]
 80029dc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029de:	2301      	movs	r3, #1
 80029e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80029e2:	e014      	b.n	8002a0e <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80029e4:	6879      	ldr	r1, [r7, #4]
 80029e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029e8:	4613      	mov	r3, r2
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	4413      	add	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	440b      	add	r3, r1
 80029f2:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d105      	bne.n	8002a08 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80029fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	4619      	mov	r1, r3
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 fb27 	bl	8003056 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d3e5      	bcc.n	80029e4 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f002 febf 	bl	80057a0 <USB_ReadInterrupts>
 8002a22:	4603      	mov	r3, r0
 8002a24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a28:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a2c:	d13b      	bne.n	8002aa6 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a2e:	2301      	movs	r3, #1
 8002a30:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a32:	e02b      	b.n	8002a8c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a36:	015a      	lsls	r2, r3, #5
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a48:	4613      	mov	r3, r2
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	4413      	add	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	440b      	add	r3, r1
 8002a52:	3340      	adds	r3, #64	@ 0x40
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d115      	bne.n	8002a86 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002a5a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	da12      	bge.n	8002a86 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002a60:	6879      	ldr	r1, [r7, #4]
 8002a62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a64:	4613      	mov	r3, r2
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	4413      	add	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	333f      	adds	r3, #63	@ 0x3f
 8002a70:	2201      	movs	r2, #1
 8002a72:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	4619      	mov	r1, r3
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 fae8 	bl	8003056 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a88:	3301      	adds	r3, #1
 8002a8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d3ce      	bcc.n	8002a34 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	695a      	ldr	r2, [r3, #20]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002aa4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f002 fe78 	bl	80057a0 <USB_ReadInterrupts>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ab6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002aba:	d155      	bne.n	8002b68 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002abc:	2301      	movs	r3, #1
 8002abe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ac0:	e045      	b.n	8002b4e <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac4:	015a      	lsls	r2, r3, #5
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	4413      	add	r3, r2
 8002aca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	4413      	add	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	440b      	add	r3, r1
 8002ae0:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d12e      	bne.n	8002b48 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002aea:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	da2b      	bge.n	8002b48 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8002afc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d121      	bne.n	8002b48 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b08:	4613      	mov	r3, r2
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	4413      	add	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	440b      	add	r3, r1
 8002b12:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8002b16:	2201      	movs	r2, #1
 8002b18:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002b1a:	6a3b      	ldr	r3, [r7, #32]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002b22:	6a3b      	ldr	r3, [r7, #32]
 8002b24:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002b26:	6a3b      	ldr	r3, [r7, #32]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10a      	bne.n	8002b48 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	69fa      	ldr	r2, [r7, #28]
 8002b3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b40:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b44:	6053      	str	r3, [r2, #4]
            break;
 8002b46:	e007      	b.n	8002b58 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d3b4      	bcc.n	8002ac2 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	695a      	ldr	r2, [r3, #20]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002b66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f002 fe17 	bl	80057a0 <USB_ReadInterrupts>
 8002b72:	4603      	mov	r3, r0
 8002b74:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002b78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b7c:	d10a      	bne.n	8002b94 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f005 fa2e 	bl	8007fe0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	695a      	ldr	r2, [r3, #20]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002b92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f002 fe01 	bl	80057a0 <USB_ReadInterrupts>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	2b04      	cmp	r3, #4
 8002ba6:	d115      	bne.n	8002bd4 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	f003 0304 	and.w	r3, r3, #4
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d002      	beq.n	8002bc0 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f005 fa1e 	bl	8007ffc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6859      	ldr	r1, [r3, #4]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	605a      	str	r2, [r3, #4]
 8002bd0:	e000      	b.n	8002bd4 <HAL_PCD_IRQHandler+0x938>
      return;
 8002bd2:	bf00      	nop
    }
  }
}
 8002bd4:	3734      	adds	r7, #52	@ 0x34
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd90      	pop	{r4, r7, pc}

08002bda <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b082      	sub	sp, #8
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
 8002be2:	460b      	mov	r3, r1
 8002be4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d101      	bne.n	8002bf4 <HAL_PCD_SetAddress+0x1a>
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	e013      	b.n	8002c1c <HAL_PCD_SetAddress+0x42>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	78fa      	ldrb	r2, [r7, #3]
 8002c00:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	78fa      	ldrb	r2, [r7, #3]
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f002 fd5f 	bl	80056d0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3708      	adds	r7, #8
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	4608      	mov	r0, r1
 8002c2e:	4611      	mov	r1, r2
 8002c30:	461a      	mov	r2, r3
 8002c32:	4603      	mov	r3, r0
 8002c34:	70fb      	strb	r3, [r7, #3]
 8002c36:	460b      	mov	r3, r1
 8002c38:	803b      	strh	r3, [r7, #0]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	da0f      	bge.n	8002c6a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c4a:	78fb      	ldrb	r3, [r7, #3]
 8002c4c:	f003 020f 	and.w	r2, r3, #15
 8002c50:	4613      	mov	r3, r2
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	4413      	add	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	3338      	adds	r3, #56	@ 0x38
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	3304      	adds	r3, #4
 8002c60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2201      	movs	r2, #1
 8002c66:	705a      	strb	r2, [r3, #1]
 8002c68:	e00f      	b.n	8002c8a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c6a:	78fb      	ldrb	r3, [r7, #3]
 8002c6c:	f003 020f 	and.w	r2, r3, #15
 8002c70:	4613      	mov	r3, r2
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	4413      	add	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	4413      	add	r3, r2
 8002c80:	3304      	adds	r3, #4
 8002c82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002c8a:	78fb      	ldrb	r3, [r7, #3]
 8002c8c:	f003 030f 	and.w	r3, r3, #15
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002c96:	883a      	ldrh	r2, [r7, #0]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	78ba      	ldrb	r2, [r7, #2]
 8002ca0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	785b      	ldrb	r3, [r3, #1]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d004      	beq.n	8002cb4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002cb4:	78bb      	ldrb	r3, [r7, #2]
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d102      	bne.n	8002cc0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d101      	bne.n	8002cce <HAL_PCD_EP_Open+0xaa>
 8002cca:	2302      	movs	r3, #2
 8002ccc:	e00e      	b.n	8002cec <HAL_PCD_EP_Open+0xc8>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68f9      	ldr	r1, [r7, #12]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f001 fddf 	bl	80048a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8002cea:	7afb      	ldrb	r3, [r7, #11]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	da0f      	bge.n	8002d28 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d08:	78fb      	ldrb	r3, [r7, #3]
 8002d0a:	f003 020f 	and.w	r2, r3, #15
 8002d0e:	4613      	mov	r3, r2
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	4413      	add	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	3338      	adds	r3, #56	@ 0x38
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2201      	movs	r2, #1
 8002d24:	705a      	strb	r2, [r3, #1]
 8002d26:	e00f      	b.n	8002d48 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d28:	78fb      	ldrb	r3, [r7, #3]
 8002d2a:	f003 020f 	and.w	r2, r3, #15
 8002d2e:	4613      	mov	r3, r2
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	4413      	add	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	3304      	adds	r3, #4
 8002d40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002d48:	78fb      	ldrb	r3, [r7, #3]
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	b2da      	uxtb	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d101      	bne.n	8002d62 <HAL_PCD_EP_Close+0x6e>
 8002d5e:	2302      	movs	r3, #2
 8002d60:	e00e      	b.n	8002d80 <HAL_PCD_EP_Close+0x8c>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68f9      	ldr	r1, [r7, #12]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f001 fe1d 	bl	80049b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3710      	adds	r7, #16
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	607a      	str	r2, [r7, #4]
 8002d92:	603b      	str	r3, [r7, #0]
 8002d94:	460b      	mov	r3, r1
 8002d96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d98:	7afb      	ldrb	r3, [r7, #11]
 8002d9a:	f003 020f 	and.w	r2, r3, #15
 8002d9e:	4613      	mov	r3, r2
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	4413      	add	r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	4413      	add	r3, r2
 8002dae:	3304      	adds	r3, #4
 8002db0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dca:	7afb      	ldrb	r3, [r7, #11]
 8002dcc:	f003 030f 	and.w	r3, r3, #15
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d102      	bne.n	8002de4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002de4:	7afb      	ldrb	r3, [r7, #11]
 8002de6:	f003 030f 	and.w	r3, r3, #15
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d109      	bne.n	8002e02 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6818      	ldr	r0, [r3, #0]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	461a      	mov	r2, r3
 8002dfa:	6979      	ldr	r1, [r7, #20]
 8002dfc:	f002 f8fc 	bl	8004ff8 <USB_EP0StartXfer>
 8002e00:	e008      	b.n	8002e14 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6818      	ldr	r0, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	6979      	ldr	r1, [r7, #20]
 8002e10:	f001 feaa 	bl	8004b68 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3718      	adds	r7, #24
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b083      	sub	sp, #12
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
 8002e26:	460b      	mov	r3, r1
 8002e28:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e2a:	78fb      	ldrb	r3, [r7, #3]
 8002e2c:	f003 020f 	and.w	r2, r3, #15
 8002e30:	6879      	ldr	r1, [r7, #4]
 8002e32:	4613      	mov	r3, r2
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	4413      	add	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	440b      	add	r3, r1
 8002e3c:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8002e40:	681b      	ldr	r3, [r3, #0]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b086      	sub	sp, #24
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	60f8      	str	r0, [r7, #12]
 8002e56:	607a      	str	r2, [r7, #4]
 8002e58:	603b      	str	r3, [r7, #0]
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e5e:	7afb      	ldrb	r3, [r7, #11]
 8002e60:	f003 020f 	and.w	r2, r3, #15
 8002e64:	4613      	mov	r3, r2
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	4413      	add	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	3338      	adds	r3, #56	@ 0x38
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	4413      	add	r3, r2
 8002e72:	3304      	adds	r3, #4
 8002e74:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	2200      	movs	r2, #0
 8002e86:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e8e:	7afb      	ldrb	r3, [r7, #11]
 8002e90:	f003 030f 	and.w	r3, r3, #15
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d102      	bne.n	8002ea8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ea8:	7afb      	ldrb	r3, [r7, #11]
 8002eaa:	f003 030f 	and.w	r3, r3, #15
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d109      	bne.n	8002ec6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6818      	ldr	r0, [r3, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	6979      	ldr	r1, [r7, #20]
 8002ec0:	f002 f89a 	bl	8004ff8 <USB_EP0StartXfer>
 8002ec4:	e008      	b.n	8002ed8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6818      	ldr	r0, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	6979      	ldr	r1, [r7, #20]
 8002ed4:	f001 fe48 	bl	8004b68 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3718      	adds	r7, #24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b084      	sub	sp, #16
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
 8002eea:	460b      	mov	r3, r1
 8002eec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002eee:	78fb      	ldrb	r3, [r7, #3]
 8002ef0:	f003 020f 	and.w	r2, r3, #15
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d901      	bls.n	8002f00 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e050      	b.n	8002fa2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	da0f      	bge.n	8002f28 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f08:	78fb      	ldrb	r3, [r7, #3]
 8002f0a:	f003 020f 	and.w	r2, r3, #15
 8002f0e:	4613      	mov	r3, r2
 8002f10:	00db      	lsls	r3, r3, #3
 8002f12:	4413      	add	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	3338      	adds	r3, #56	@ 0x38
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	3304      	adds	r3, #4
 8002f1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2201      	movs	r2, #1
 8002f24:	705a      	strb	r2, [r3, #1]
 8002f26:	e00d      	b.n	8002f44 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f28:	78fa      	ldrb	r2, [r7, #3]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	4413      	add	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	4413      	add	r3, r2
 8002f3a:	3304      	adds	r3, #4
 8002f3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2201      	movs	r2, #1
 8002f48:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f4a:	78fb      	ldrb	r3, [r7, #3]
 8002f4c:	f003 030f 	and.w	r3, r3, #15
 8002f50:	b2da      	uxtb	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d101      	bne.n	8002f64 <HAL_PCD_EP_SetStall+0x82>
 8002f60:	2302      	movs	r3, #2
 8002f62:	e01e      	b.n	8002fa2 <HAL_PCD_EP_SetStall+0xc0>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68f9      	ldr	r1, [r7, #12]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f002 fad8 	bl	8005528 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f78:	78fb      	ldrb	r3, [r7, #3]
 8002f7a:	f003 030f 	and.w	r3, r3, #15
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d10a      	bne.n	8002f98 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6818      	ldr	r0, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	b2d9      	uxtb	r1, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8002f92:	461a      	mov	r2, r3
 8002f94:	f002 fcc8 	bl	8005928 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b084      	sub	sp, #16
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002fb6:	78fb      	ldrb	r3, [r7, #3]
 8002fb8:	f003 020f 	and.w	r2, r3, #15
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d901      	bls.n	8002fc8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e042      	b.n	800304e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	da0f      	bge.n	8002ff0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fd0:	78fb      	ldrb	r3, [r7, #3]
 8002fd2:	f003 020f 	and.w	r2, r3, #15
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	4413      	add	r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	3338      	adds	r3, #56	@ 0x38
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	3304      	adds	r3, #4
 8002fe6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2201      	movs	r2, #1
 8002fec:	705a      	strb	r2, [r3, #1]
 8002fee:	e00f      	b.n	8003010 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ff0:	78fb      	ldrb	r3, [r7, #3]
 8002ff2:	f003 020f 	and.w	r2, r3, #15
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	00db      	lsls	r3, r3, #3
 8002ffa:	4413      	add	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	4413      	add	r3, r2
 8003006:	3304      	adds	r3, #4
 8003008:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003016:	78fb      	ldrb	r3, [r7, #3]
 8003018:	f003 030f 	and.w	r3, r3, #15
 800301c:	b2da      	uxtb	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003028:	2b01      	cmp	r3, #1
 800302a:	d101      	bne.n	8003030 <HAL_PCD_EP_ClrStall+0x86>
 800302c:	2302      	movs	r3, #2
 800302e:	e00e      	b.n	800304e <HAL_PCD_EP_ClrStall+0xa4>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68f9      	ldr	r1, [r7, #12]
 800303e:	4618      	mov	r0, r3
 8003040:	f002 fae0 	bl	8005604 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b084      	sub	sp, #16
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
 800305e:	460b      	mov	r3, r1
 8003060:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003062:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003066:	2b00      	cmp	r3, #0
 8003068:	da0c      	bge.n	8003084 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800306a:	78fb      	ldrb	r3, [r7, #3]
 800306c:	f003 020f 	and.w	r2, r3, #15
 8003070:	4613      	mov	r3, r2
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	4413      	add	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	3338      	adds	r3, #56	@ 0x38
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	4413      	add	r3, r2
 800307e:	3304      	adds	r3, #4
 8003080:	60fb      	str	r3, [r7, #12]
 8003082:	e00c      	b.n	800309e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003084:	78fb      	ldrb	r3, [r7, #3]
 8003086:	f003 020f 	and.w	r2, r3, #15
 800308a:	4613      	mov	r3, r2
 800308c:	00db      	lsls	r3, r3, #3
 800308e:	4413      	add	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	4413      	add	r3, r2
 800309a:	3304      	adds	r3, #4
 800309c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68f9      	ldr	r1, [r7, #12]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f002 f8ff 	bl	80052a8 <USB_EPStopXfer>
 80030aa:	4603      	mov	r3, r0
 80030ac:	72fb      	strb	r3, [r7, #11]

  return ret;
 80030ae:	7afb      	ldrb	r3, [r7, #11]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3710      	adds	r7, #16
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b08a      	sub	sp, #40	@ 0x28
 80030bc:	af02      	add	r7, sp, #8
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	4613      	mov	r3, r2
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	4413      	add	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	3338      	adds	r3, #56	@ 0x38
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	4413      	add	r3, r2
 80030dc:	3304      	adds	r3, #4
 80030de:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6a1a      	ldr	r2, [r3, #32]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d901      	bls.n	80030f0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e06c      	b.n	80031ca <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	699a      	ldr	r2, [r3, #24]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	69fa      	ldr	r2, [r7, #28]
 8003102:	429a      	cmp	r2, r3
 8003104:	d902      	bls.n	800310c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	3303      	adds	r3, #3
 8003110:	089b      	lsrs	r3, r3, #2
 8003112:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003114:	e02b      	b.n	800316e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	699a      	ldr	r2, [r3, #24]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	69fa      	ldr	r2, [r7, #28]
 8003128:	429a      	cmp	r2, r3
 800312a:	d902      	bls.n	8003132 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	3303      	adds	r3, #3
 8003136:	089b      	lsrs	r3, r3, #2
 8003138:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6919      	ldr	r1, [r3, #16]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	b2da      	uxtb	r2, r3
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800314a:	b2db      	uxtb	r3, r3
 800314c:	9300      	str	r3, [sp, #0]
 800314e:	4603      	mov	r3, r0
 8003150:	6978      	ldr	r0, [r7, #20]
 8003152:	f002 f953 	bl	80053fc <USB_WritePacket>

    ep->xfer_buff  += len;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	691a      	ldr	r2, [r3, #16]
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	441a      	add	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6a1a      	ldr	r2, [r3, #32]
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	441a      	add	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	015a      	lsls	r2, r3, #5
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	4413      	add	r3, r2
 8003176:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	429a      	cmp	r2, r3
 8003182:	d809      	bhi.n	8003198 <PCD_WriteEmptyTxFifo+0xe0>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6a1a      	ldr	r2, [r3, #32]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800318c:	429a      	cmp	r2, r3
 800318e:	d203      	bcs.n	8003198 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d1be      	bne.n	8003116 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	699a      	ldr	r2, [r3, #24]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d811      	bhi.n	80031c8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	f003 030f 	and.w	r3, r3, #15
 80031aa:	2201      	movs	r2, #1
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	43db      	mvns	r3, r3
 80031be:	6939      	ldr	r1, [r7, #16]
 80031c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80031c4:	4013      	ands	r3, r2
 80031c6:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3720      	adds	r7, #32
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
	...

080031d4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b088      	sub	sp, #32
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	333c      	adds	r3, #60	@ 0x3c
 80031ec:	3304      	adds	r3, #4
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	015a      	lsls	r2, r3, #5
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	4413      	add	r3, r2
 80031fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d17b      	bne.n	8003302 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	f003 0308 	and.w	r3, r3, #8
 8003210:	2b00      	cmp	r3, #0
 8003212:	d015      	beq.n	8003240 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	4a61      	ldr	r2, [pc, #388]	@ (800339c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003218:	4293      	cmp	r3, r2
 800321a:	f240 80b9 	bls.w	8003390 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003224:	2b00      	cmp	r3, #0
 8003226:	f000 80b3 	beq.w	8003390 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	015a      	lsls	r2, r3, #5
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	4413      	add	r3, r2
 8003232:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003236:	461a      	mov	r2, r3
 8003238:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800323c:	6093      	str	r3, [r2, #8]
 800323e:	e0a7      	b.n	8003390 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	f003 0320 	and.w	r3, r3, #32
 8003246:	2b00      	cmp	r3, #0
 8003248:	d009      	beq.n	800325e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	015a      	lsls	r2, r3, #5
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	4413      	add	r3, r2
 8003252:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003256:	461a      	mov	r2, r3
 8003258:	2320      	movs	r3, #32
 800325a:	6093      	str	r3, [r2, #8]
 800325c:	e098      	b.n	8003390 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003264:	2b00      	cmp	r3, #0
 8003266:	f040 8093 	bne.w	8003390 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	4a4b      	ldr	r2, [pc, #300]	@ (800339c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d90f      	bls.n	8003292 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00a      	beq.n	8003292 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	015a      	lsls	r2, r3, #5
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	4413      	add	r3, r2
 8003284:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003288:	461a      	mov	r2, r3
 800328a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800328e:	6093      	str	r3, [r2, #8]
 8003290:	e07e      	b.n	8003390 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	4613      	mov	r3, r2
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	4413      	add	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	4413      	add	r3, r2
 80032a4:	3304      	adds	r3, #4
 80032a6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	69da      	ldr	r2, [r3, #28]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	0159      	lsls	r1, r3, #5
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	440b      	add	r3, r1
 80032b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032be:	1ad2      	subs	r2, r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d114      	bne.n	80032f4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d109      	bne.n	80032e6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6818      	ldr	r0, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80032dc:	461a      	mov	r2, r3
 80032de:	2101      	movs	r1, #1
 80032e0:	f002 fb22 	bl	8005928 <USB_EP0_OutStart>
 80032e4:	e006      	b.n	80032f4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	691a      	ldr	r2, [r3, #16]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	441a      	add	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	4619      	mov	r1, r3
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f004 fdb6 	bl	8007e6c <HAL_PCD_DataOutStageCallback>
 8003300:	e046      	b.n	8003390 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	4a26      	ldr	r2, [pc, #152]	@ (80033a0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d124      	bne.n	8003354 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00a      	beq.n	800332a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	015a      	lsls	r2, r3, #5
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	4413      	add	r3, r2
 800331c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003320:	461a      	mov	r2, r3
 8003322:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003326:	6093      	str	r3, [r2, #8]
 8003328:	e032      	b.n	8003390 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	f003 0320 	and.w	r3, r3, #32
 8003330:	2b00      	cmp	r3, #0
 8003332:	d008      	beq.n	8003346 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	015a      	lsls	r2, r3, #5
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	4413      	add	r3, r2
 800333c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003340:	461a      	mov	r2, r3
 8003342:	2320      	movs	r3, #32
 8003344:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	b2db      	uxtb	r3, r3
 800334a:	4619      	mov	r1, r3
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f004 fd8d 	bl	8007e6c <HAL_PCD_DataOutStageCallback>
 8003352:	e01d      	b.n	8003390 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d114      	bne.n	8003384 <PCD_EP_OutXfrComplete_int+0x1b0>
 800335a:	6879      	ldr	r1, [r7, #4]
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	4613      	mov	r3, r2
 8003360:	00db      	lsls	r3, r3, #3
 8003362:	4413      	add	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	440b      	add	r3, r1
 8003368:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d108      	bne.n	8003384 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6818      	ldr	r0, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800337c:	461a      	mov	r2, r3
 800337e:	2100      	movs	r1, #0
 8003380:	f002 fad2 	bl	8005928 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	b2db      	uxtb	r3, r3
 8003388:	4619      	mov	r1, r3
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f004 fd6e 	bl	8007e6c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3720      	adds	r7, #32
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	4f54300a 	.word	0x4f54300a
 80033a0:	4f54310a 	.word	0x4f54310a

080033a4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	333c      	adds	r3, #60	@ 0x3c
 80033bc:	3304      	adds	r3, #4
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	015a      	lsls	r2, r3, #5
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	4413      	add	r3, r2
 80033ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	4a15      	ldr	r2, [pc, #84]	@ (800342c <PCD_EP_OutSetupPacket_int+0x88>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d90e      	bls.n	80033f8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d009      	beq.n	80033f8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	015a      	lsls	r2, r3, #5
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	4413      	add	r3, r2
 80033ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033f0:	461a      	mov	r2, r3
 80033f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033f6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f004 fd25 	bl	8007e48 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	4a0a      	ldr	r2, [pc, #40]	@ (800342c <PCD_EP_OutSetupPacket_int+0x88>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d90c      	bls.n	8003420 <PCD_EP_OutSetupPacket_int+0x7c>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d108      	bne.n	8003420 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6818      	ldr	r0, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003418:	461a      	mov	r2, r3
 800341a:	2101      	movs	r1, #1
 800341c:	f002 fa84 	bl	8005928 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3718      	adds	r7, #24
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	4f54300a 	.word	0x4f54300a

08003430 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	460b      	mov	r3, r1
 800343a:	70fb      	strb	r3, [r7, #3]
 800343c:	4613      	mov	r3, r2
 800343e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003446:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003448:	78fb      	ldrb	r3, [r7, #3]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d107      	bne.n	800345e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800344e:	883b      	ldrh	r3, [r7, #0]
 8003450:	0419      	lsls	r1, r3, #16
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68ba      	ldr	r2, [r7, #8]
 8003458:	430a      	orrs	r2, r1
 800345a:	629a      	str	r2, [r3, #40]	@ 0x28
 800345c:	e028      	b.n	80034b0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003464:	0c1b      	lsrs	r3, r3, #16
 8003466:	68ba      	ldr	r2, [r7, #8]
 8003468:	4413      	add	r3, r2
 800346a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800346c:	2300      	movs	r3, #0
 800346e:	73fb      	strb	r3, [r7, #15]
 8003470:	e00d      	b.n	800348e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	7bfb      	ldrb	r3, [r7, #15]
 8003478:	3340      	adds	r3, #64	@ 0x40
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4413      	add	r3, r2
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	0c1b      	lsrs	r3, r3, #16
 8003482:	68ba      	ldr	r2, [r7, #8]
 8003484:	4413      	add	r3, r2
 8003486:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003488:	7bfb      	ldrb	r3, [r7, #15]
 800348a:	3301      	adds	r3, #1
 800348c:	73fb      	strb	r3, [r7, #15]
 800348e:	7bfa      	ldrb	r2, [r7, #15]
 8003490:	78fb      	ldrb	r3, [r7, #3]
 8003492:	3b01      	subs	r3, #1
 8003494:	429a      	cmp	r2, r3
 8003496:	d3ec      	bcc.n	8003472 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003498:	883b      	ldrh	r3, [r7, #0]
 800349a:	0418      	lsls	r0, r3, #16
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6819      	ldr	r1, [r3, #0]
 80034a0:	78fb      	ldrb	r3, [r7, #3]
 80034a2:	3b01      	subs	r3, #1
 80034a4:	68ba      	ldr	r2, [r7, #8]
 80034a6:	4302      	orrs	r2, r0
 80034a8:	3340      	adds	r3, #64	@ 0x40
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3714      	adds	r7, #20
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr

080034be <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80034be:	b480      	push	{r7}
 80034c0:	b083      	sub	sp, #12
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
 80034c6:	460b      	mov	r3, r1
 80034c8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	887a      	ldrh	r2, [r7, #2]
 80034d0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	460b      	mov	r3, r1
 80034ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e267      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	d075      	beq.n	8003602 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003516:	4b88      	ldr	r3, [pc, #544]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 030c 	and.w	r3, r3, #12
 800351e:	2b04      	cmp	r3, #4
 8003520:	d00c      	beq.n	800353c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003522:	4b85      	ldr	r3, [pc, #532]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800352a:	2b08      	cmp	r3, #8
 800352c:	d112      	bne.n	8003554 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800352e:	4b82      	ldr	r3, [pc, #520]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003536:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800353a:	d10b      	bne.n	8003554 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800353c:	4b7e      	ldr	r3, [pc, #504]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d05b      	beq.n	8003600 <HAL_RCC_OscConfig+0x108>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d157      	bne.n	8003600 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e242      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800355c:	d106      	bne.n	800356c <HAL_RCC_OscConfig+0x74>
 800355e:	4b76      	ldr	r3, [pc, #472]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a75      	ldr	r2, [pc, #468]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 8003564:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003568:	6013      	str	r3, [r2, #0]
 800356a:	e01d      	b.n	80035a8 <HAL_RCC_OscConfig+0xb0>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003574:	d10c      	bne.n	8003590 <HAL_RCC_OscConfig+0x98>
 8003576:	4b70      	ldr	r3, [pc, #448]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a6f      	ldr	r2, [pc, #444]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 800357c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003580:	6013      	str	r3, [r2, #0]
 8003582:	4b6d      	ldr	r3, [pc, #436]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a6c      	ldr	r2, [pc, #432]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 8003588:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800358c:	6013      	str	r3, [r2, #0]
 800358e:	e00b      	b.n	80035a8 <HAL_RCC_OscConfig+0xb0>
 8003590:	4b69      	ldr	r3, [pc, #420]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a68      	ldr	r2, [pc, #416]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 8003596:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800359a:	6013      	str	r3, [r2, #0]
 800359c:	4b66      	ldr	r3, [pc, #408]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a65      	ldr	r2, [pc, #404]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 80035a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d013      	beq.n	80035d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b0:	f7fd fc60 	bl	8000e74 <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035b8:	f7fd fc5c 	bl	8000e74 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b64      	cmp	r3, #100	@ 0x64
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e207      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ca:	4b5b      	ldr	r3, [pc, #364]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d0f0      	beq.n	80035b8 <HAL_RCC_OscConfig+0xc0>
 80035d6:	e014      	b.n	8003602 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d8:	f7fd fc4c 	bl	8000e74 <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035de:	e008      	b.n	80035f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035e0:	f7fd fc48 	bl	8000e74 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b64      	cmp	r3, #100	@ 0x64
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e1f3      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035f2:	4b51      	ldr	r3, [pc, #324]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1f0      	bne.n	80035e0 <HAL_RCC_OscConfig+0xe8>
 80035fe:	e000      	b.n	8003602 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003600:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d063      	beq.n	80036d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800360e:	4b4a      	ldr	r3, [pc, #296]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f003 030c 	and.w	r3, r3, #12
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00b      	beq.n	8003632 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800361a:	4b47      	ldr	r3, [pc, #284]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003622:	2b08      	cmp	r3, #8
 8003624:	d11c      	bne.n	8003660 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003626:	4b44      	ldr	r3, [pc, #272]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d116      	bne.n	8003660 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003632:	4b41      	ldr	r3, [pc, #260]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d005      	beq.n	800364a <HAL_RCC_OscConfig+0x152>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d001      	beq.n	800364a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e1c7      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800364a:	4b3b      	ldr	r3, [pc, #236]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	4937      	ldr	r1, [pc, #220]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 800365a:	4313      	orrs	r3, r2
 800365c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800365e:	e03a      	b.n	80036d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d020      	beq.n	80036aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003668:	4b34      	ldr	r3, [pc, #208]	@ (800373c <HAL_RCC_OscConfig+0x244>)
 800366a:	2201      	movs	r2, #1
 800366c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366e:	f7fd fc01 	bl	8000e74 <HAL_GetTick>
 8003672:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003674:	e008      	b.n	8003688 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003676:	f7fd fbfd 	bl	8000e74 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e1a8      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003688:	4b2b      	ldr	r3, [pc, #172]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d0f0      	beq.n	8003676 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003694:	4b28      	ldr	r3, [pc, #160]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	4925      	ldr	r1, [pc, #148]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	600b      	str	r3, [r1, #0]
 80036a8:	e015      	b.n	80036d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036aa:	4b24      	ldr	r3, [pc, #144]	@ (800373c <HAL_RCC_OscConfig+0x244>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b0:	f7fd fbe0 	bl	8000e74 <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036b8:	f7fd fbdc 	bl	8000e74 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e187      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ca:	4b1b      	ldr	r3, [pc, #108]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1f0      	bne.n	80036b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0308 	and.w	r3, r3, #8
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d036      	beq.n	8003750 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d016      	beq.n	8003718 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ea:	4b15      	ldr	r3, [pc, #84]	@ (8003740 <HAL_RCC_OscConfig+0x248>)
 80036ec:	2201      	movs	r2, #1
 80036ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f0:	f7fd fbc0 	bl	8000e74 <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036f6:	e008      	b.n	800370a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036f8:	f7fd fbbc 	bl	8000e74 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e167      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800370a:	4b0b      	ldr	r3, [pc, #44]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 800370c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d0f0      	beq.n	80036f8 <HAL_RCC_OscConfig+0x200>
 8003716:	e01b      	b.n	8003750 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003718:	4b09      	ldr	r3, [pc, #36]	@ (8003740 <HAL_RCC_OscConfig+0x248>)
 800371a:	2200      	movs	r2, #0
 800371c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800371e:	f7fd fba9 	bl	8000e74 <HAL_GetTick>
 8003722:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003724:	e00e      	b.n	8003744 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003726:	f7fd fba5 	bl	8000e74 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d907      	bls.n	8003744 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e150      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
 8003738:	40023800 	.word	0x40023800
 800373c:	42470000 	.word	0x42470000
 8003740:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003744:	4b88      	ldr	r3, [pc, #544]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 8003746:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1ea      	bne.n	8003726 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0304 	and.w	r3, r3, #4
 8003758:	2b00      	cmp	r3, #0
 800375a:	f000 8097 	beq.w	800388c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800375e:	2300      	movs	r3, #0
 8003760:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003762:	4b81      	ldr	r3, [pc, #516]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 8003764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10f      	bne.n	800378e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800376e:	2300      	movs	r3, #0
 8003770:	60bb      	str	r3, [r7, #8]
 8003772:	4b7d      	ldr	r3, [pc, #500]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 8003774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003776:	4a7c      	ldr	r2, [pc, #496]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 8003778:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800377c:	6413      	str	r3, [r2, #64]	@ 0x40
 800377e:	4b7a      	ldr	r3, [pc, #488]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 8003780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003782:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003786:	60bb      	str	r3, [r7, #8]
 8003788:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800378a:	2301      	movs	r3, #1
 800378c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800378e:	4b77      	ldr	r3, [pc, #476]	@ (800396c <HAL_RCC_OscConfig+0x474>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003796:	2b00      	cmp	r3, #0
 8003798:	d118      	bne.n	80037cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800379a:	4b74      	ldr	r3, [pc, #464]	@ (800396c <HAL_RCC_OscConfig+0x474>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a73      	ldr	r2, [pc, #460]	@ (800396c <HAL_RCC_OscConfig+0x474>)
 80037a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037a6:	f7fd fb65 	bl	8000e74 <HAL_GetTick>
 80037aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ac:	e008      	b.n	80037c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ae:	f7fd fb61 	bl	8000e74 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d901      	bls.n	80037c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e10c      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c0:	4b6a      	ldr	r3, [pc, #424]	@ (800396c <HAL_RCC_OscConfig+0x474>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d0f0      	beq.n	80037ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d106      	bne.n	80037e2 <HAL_RCC_OscConfig+0x2ea>
 80037d4:	4b64      	ldr	r3, [pc, #400]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 80037d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037d8:	4a63      	ldr	r2, [pc, #396]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 80037da:	f043 0301 	orr.w	r3, r3, #1
 80037de:	6713      	str	r3, [r2, #112]	@ 0x70
 80037e0:	e01c      	b.n	800381c <HAL_RCC_OscConfig+0x324>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	2b05      	cmp	r3, #5
 80037e8:	d10c      	bne.n	8003804 <HAL_RCC_OscConfig+0x30c>
 80037ea:	4b5f      	ldr	r3, [pc, #380]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 80037ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ee:	4a5e      	ldr	r2, [pc, #376]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 80037f0:	f043 0304 	orr.w	r3, r3, #4
 80037f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80037f6:	4b5c      	ldr	r3, [pc, #368]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 80037f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037fa:	4a5b      	ldr	r2, [pc, #364]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 80037fc:	f043 0301 	orr.w	r3, r3, #1
 8003800:	6713      	str	r3, [r2, #112]	@ 0x70
 8003802:	e00b      	b.n	800381c <HAL_RCC_OscConfig+0x324>
 8003804:	4b58      	ldr	r3, [pc, #352]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 8003806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003808:	4a57      	ldr	r2, [pc, #348]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 800380a:	f023 0301 	bic.w	r3, r3, #1
 800380e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003810:	4b55      	ldr	r3, [pc, #340]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 8003812:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003814:	4a54      	ldr	r2, [pc, #336]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 8003816:	f023 0304 	bic.w	r3, r3, #4
 800381a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d015      	beq.n	8003850 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003824:	f7fd fb26 	bl	8000e74 <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800382a:	e00a      	b.n	8003842 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800382c:	f7fd fb22 	bl	8000e74 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	f241 3288 	movw	r2, #5000	@ 0x1388
 800383a:	4293      	cmp	r3, r2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e0cb      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003842:	4b49      	ldr	r3, [pc, #292]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 8003844:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d0ee      	beq.n	800382c <HAL_RCC_OscConfig+0x334>
 800384e:	e014      	b.n	800387a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003850:	f7fd fb10 	bl	8000e74 <HAL_GetTick>
 8003854:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003856:	e00a      	b.n	800386e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003858:	f7fd fb0c 	bl	8000e74 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003866:	4293      	cmp	r3, r2
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e0b5      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800386e:	4b3e      	ldr	r3, [pc, #248]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 8003870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1ee      	bne.n	8003858 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800387a:	7dfb      	ldrb	r3, [r7, #23]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d105      	bne.n	800388c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003880:	4b39      	ldr	r3, [pc, #228]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 8003882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003884:	4a38      	ldr	r2, [pc, #224]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 8003886:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800388a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 80a1 	beq.w	80039d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003896:	4b34      	ldr	r3, [pc, #208]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f003 030c 	and.w	r3, r3, #12
 800389e:	2b08      	cmp	r3, #8
 80038a0:	d05c      	beq.n	800395c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d141      	bne.n	800392e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038aa:	4b31      	ldr	r3, [pc, #196]	@ (8003970 <HAL_RCC_OscConfig+0x478>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b0:	f7fd fae0 	bl	8000e74 <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038b8:	f7fd fadc 	bl	8000e74 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e087      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ca:	4b27      	ldr	r3, [pc, #156]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1f0      	bne.n	80038b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	69da      	ldr	r2, [r3, #28]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	431a      	orrs	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e4:	019b      	lsls	r3, r3, #6
 80038e6:	431a      	orrs	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ec:	085b      	lsrs	r3, r3, #1
 80038ee:	3b01      	subs	r3, #1
 80038f0:	041b      	lsls	r3, r3, #16
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f8:	061b      	lsls	r3, r3, #24
 80038fa:	491b      	ldr	r1, [pc, #108]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003900:	4b1b      	ldr	r3, [pc, #108]	@ (8003970 <HAL_RCC_OscConfig+0x478>)
 8003902:	2201      	movs	r2, #1
 8003904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003906:	f7fd fab5 	bl	8000e74 <HAL_GetTick>
 800390a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800390c:	e008      	b.n	8003920 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800390e:	f7fd fab1 	bl	8000e74 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	2b02      	cmp	r3, #2
 800391a:	d901      	bls.n	8003920 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e05c      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003920:	4b11      	ldr	r3, [pc, #68]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d0f0      	beq.n	800390e <HAL_RCC_OscConfig+0x416>
 800392c:	e054      	b.n	80039d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800392e:	4b10      	ldr	r3, [pc, #64]	@ (8003970 <HAL_RCC_OscConfig+0x478>)
 8003930:	2200      	movs	r2, #0
 8003932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003934:	f7fd fa9e 	bl	8000e74 <HAL_GetTick>
 8003938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800393a:	e008      	b.n	800394e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800393c:	f7fd fa9a 	bl	8000e74 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e045      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800394e:	4b06      	ldr	r3, [pc, #24]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1f0      	bne.n	800393c <HAL_RCC_OscConfig+0x444>
 800395a:	e03d      	b.n	80039d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d107      	bne.n	8003974 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e038      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
 8003968:	40023800 	.word	0x40023800
 800396c:	40007000 	.word	0x40007000
 8003970:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003974:	4b1b      	ldr	r3, [pc, #108]	@ (80039e4 <HAL_RCC_OscConfig+0x4ec>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d028      	beq.n	80039d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800398c:	429a      	cmp	r2, r3
 800398e:	d121      	bne.n	80039d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800399a:	429a      	cmp	r2, r3
 800399c:	d11a      	bne.n	80039d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80039a4:	4013      	ands	r3, r2
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80039aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d111      	bne.n	80039d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ba:	085b      	lsrs	r3, r3, #1
 80039bc:	3b01      	subs	r3, #1
 80039be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d107      	bne.n	80039d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d001      	beq.n	80039d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e000      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3718      	adds	r7, #24
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	40023800 	.word	0x40023800

080039e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e0cc      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039fc:	4b68      	ldr	r3, [pc, #416]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1b8>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0307 	and.w	r3, r3, #7
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d90c      	bls.n	8003a24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a0a:	4b65      	ldr	r3, [pc, #404]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	b2d2      	uxtb	r2, r2
 8003a10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a12:	4b63      	ldr	r3, [pc, #396]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0307 	and.w	r3, r3, #7
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d001      	beq.n	8003a24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e0b8      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d020      	beq.n	8003a72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0304 	and.w	r3, r3, #4
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d005      	beq.n	8003a48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a3c:	4b59      	ldr	r3, [pc, #356]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	4a58      	ldr	r2, [pc, #352]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a42:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0308 	and.w	r3, r3, #8
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d005      	beq.n	8003a60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a54:	4b53      	ldr	r3, [pc, #332]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	4a52      	ldr	r2, [pc, #328]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a60:	4b50      	ldr	r3, [pc, #320]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	494d      	ldr	r1, [pc, #308]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d044      	beq.n	8003b08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d107      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a86:	4b47      	ldr	r3, [pc, #284]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d119      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e07f      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d003      	beq.n	8003aa6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aa2:	2b03      	cmp	r3, #3
 8003aa4:	d107      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aa6:	4b3f      	ldr	r3, [pc, #252]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d109      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e06f      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ab6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e067      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ac6:	4b37      	ldr	r3, [pc, #220]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f023 0203 	bic.w	r2, r3, #3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	4934      	ldr	r1, [pc, #208]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ad8:	f7fd f9cc 	bl	8000e74 <HAL_GetTick>
 8003adc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ade:	e00a      	b.n	8003af6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ae0:	f7fd f9c8 	bl	8000e74 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e04f      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003af6:	4b2b      	ldr	r3, [pc, #172]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f003 020c 	and.w	r2, r3, #12
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d1eb      	bne.n	8003ae0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b08:	4b25      	ldr	r3, [pc, #148]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d20c      	bcs.n	8003b30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b16:	4b22      	ldr	r3, [pc, #136]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	b2d2      	uxtb	r2, r2
 8003b1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b1e:	4b20      	ldr	r3, [pc, #128]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0307 	and.w	r3, r3, #7
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d001      	beq.n	8003b30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e032      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0304 	and.w	r3, r3, #4
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d008      	beq.n	8003b4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b3c:	4b19      	ldr	r3, [pc, #100]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	4916      	ldr	r1, [pc, #88]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0308 	and.w	r3, r3, #8
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d009      	beq.n	8003b6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b5a:	4b12      	ldr	r3, [pc, #72]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	490e      	ldr	r1, [pc, #56]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b6e:	f000 f821 	bl	8003bb4 <HAL_RCC_GetSysClockFreq>
 8003b72:	4602      	mov	r2, r0
 8003b74:	4b0b      	ldr	r3, [pc, #44]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	091b      	lsrs	r3, r3, #4
 8003b7a:	f003 030f 	and.w	r3, r3, #15
 8003b7e:	490a      	ldr	r1, [pc, #40]	@ (8003ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b80:	5ccb      	ldrb	r3, [r1, r3]
 8003b82:	fa22 f303 	lsr.w	r3, r2, r3
 8003b86:	4a09      	ldr	r2, [pc, #36]	@ (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003b88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b8a:	4b09      	ldr	r3, [pc, #36]	@ (8003bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fd f92c 	bl	8000dec <HAL_InitTick>

  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	40023c00 	.word	0x40023c00
 8003ba4:	40023800 	.word	0x40023800
 8003ba8:	08008474 	.word	0x08008474
 8003bac:	20000000 	.word	0x20000000
 8003bb0:	20000004 	.word	0x20000004

08003bb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bb8:	b094      	sub	sp, #80	@ 0x50
 8003bba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bcc:	4b79      	ldr	r3, [pc, #484]	@ (8003db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f003 030c 	and.w	r3, r3, #12
 8003bd4:	2b08      	cmp	r3, #8
 8003bd6:	d00d      	beq.n	8003bf4 <HAL_RCC_GetSysClockFreq+0x40>
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	f200 80e1 	bhi.w	8003da0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d002      	beq.n	8003be8 <HAL_RCC_GetSysClockFreq+0x34>
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	d003      	beq.n	8003bee <HAL_RCC_GetSysClockFreq+0x3a>
 8003be6:	e0db      	b.n	8003da0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003be8:	4b73      	ldr	r3, [pc, #460]	@ (8003db8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bea:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003bec:	e0db      	b.n	8003da6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bee:	4b73      	ldr	r3, [pc, #460]	@ (8003dbc <HAL_RCC_GetSysClockFreq+0x208>)
 8003bf0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003bf2:	e0d8      	b.n	8003da6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bf4:	4b6f      	ldr	r3, [pc, #444]	@ (8003db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bfc:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bfe:	4b6d      	ldr	r3, [pc, #436]	@ (8003db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d063      	beq.n	8003cd2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c0a:	4b6a      	ldr	r3, [pc, #424]	@ (8003db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	099b      	lsrs	r3, r3, #6
 8003c10:	2200      	movs	r2, #0
 8003c12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c14:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c1e:	2300      	movs	r3, #0
 8003c20:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003c26:	4622      	mov	r2, r4
 8003c28:	462b      	mov	r3, r5
 8003c2a:	f04f 0000 	mov.w	r0, #0
 8003c2e:	f04f 0100 	mov.w	r1, #0
 8003c32:	0159      	lsls	r1, r3, #5
 8003c34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c38:	0150      	lsls	r0, r2, #5
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	4621      	mov	r1, r4
 8003c40:	1a51      	subs	r1, r2, r1
 8003c42:	6139      	str	r1, [r7, #16]
 8003c44:	4629      	mov	r1, r5
 8003c46:	eb63 0301 	sbc.w	r3, r3, r1
 8003c4a:	617b      	str	r3, [r7, #20]
 8003c4c:	f04f 0200 	mov.w	r2, #0
 8003c50:	f04f 0300 	mov.w	r3, #0
 8003c54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c58:	4659      	mov	r1, fp
 8003c5a:	018b      	lsls	r3, r1, #6
 8003c5c:	4651      	mov	r1, sl
 8003c5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c62:	4651      	mov	r1, sl
 8003c64:	018a      	lsls	r2, r1, #6
 8003c66:	4651      	mov	r1, sl
 8003c68:	ebb2 0801 	subs.w	r8, r2, r1
 8003c6c:	4659      	mov	r1, fp
 8003c6e:	eb63 0901 	sbc.w	r9, r3, r1
 8003c72:	f04f 0200 	mov.w	r2, #0
 8003c76:	f04f 0300 	mov.w	r3, #0
 8003c7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c86:	4690      	mov	r8, r2
 8003c88:	4699      	mov	r9, r3
 8003c8a:	4623      	mov	r3, r4
 8003c8c:	eb18 0303 	adds.w	r3, r8, r3
 8003c90:	60bb      	str	r3, [r7, #8]
 8003c92:	462b      	mov	r3, r5
 8003c94:	eb49 0303 	adc.w	r3, r9, r3
 8003c98:	60fb      	str	r3, [r7, #12]
 8003c9a:	f04f 0200 	mov.w	r2, #0
 8003c9e:	f04f 0300 	mov.w	r3, #0
 8003ca2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ca6:	4629      	mov	r1, r5
 8003ca8:	024b      	lsls	r3, r1, #9
 8003caa:	4621      	mov	r1, r4
 8003cac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003cb0:	4621      	mov	r1, r4
 8003cb2:	024a      	lsls	r2, r1, #9
 8003cb4:	4610      	mov	r0, r2
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cba:	2200      	movs	r2, #0
 8003cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003cc4:	f7fc fa92 	bl	80001ec <__aeabi_uldivmod>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	460b      	mov	r3, r1
 8003ccc:	4613      	mov	r3, r2
 8003cce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cd0:	e058      	b.n	8003d84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cd2:	4b38      	ldr	r3, [pc, #224]	@ (8003db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	099b      	lsrs	r3, r3, #6
 8003cd8:	2200      	movs	r2, #0
 8003cda:	4618      	mov	r0, r3
 8003cdc:	4611      	mov	r1, r2
 8003cde:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ce2:	623b      	str	r3, [r7, #32]
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ce8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003cec:	4642      	mov	r2, r8
 8003cee:	464b      	mov	r3, r9
 8003cf0:	f04f 0000 	mov.w	r0, #0
 8003cf4:	f04f 0100 	mov.w	r1, #0
 8003cf8:	0159      	lsls	r1, r3, #5
 8003cfa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cfe:	0150      	lsls	r0, r2, #5
 8003d00:	4602      	mov	r2, r0
 8003d02:	460b      	mov	r3, r1
 8003d04:	4641      	mov	r1, r8
 8003d06:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d0a:	4649      	mov	r1, r9
 8003d0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d10:	f04f 0200 	mov.w	r2, #0
 8003d14:	f04f 0300 	mov.w	r3, #0
 8003d18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d24:	ebb2 040a 	subs.w	r4, r2, sl
 8003d28:	eb63 050b 	sbc.w	r5, r3, fp
 8003d2c:	f04f 0200 	mov.w	r2, #0
 8003d30:	f04f 0300 	mov.w	r3, #0
 8003d34:	00eb      	lsls	r3, r5, #3
 8003d36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d3a:	00e2      	lsls	r2, r4, #3
 8003d3c:	4614      	mov	r4, r2
 8003d3e:	461d      	mov	r5, r3
 8003d40:	4643      	mov	r3, r8
 8003d42:	18e3      	adds	r3, r4, r3
 8003d44:	603b      	str	r3, [r7, #0]
 8003d46:	464b      	mov	r3, r9
 8003d48:	eb45 0303 	adc.w	r3, r5, r3
 8003d4c:	607b      	str	r3, [r7, #4]
 8003d4e:	f04f 0200 	mov.w	r2, #0
 8003d52:	f04f 0300 	mov.w	r3, #0
 8003d56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d5a:	4629      	mov	r1, r5
 8003d5c:	028b      	lsls	r3, r1, #10
 8003d5e:	4621      	mov	r1, r4
 8003d60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d64:	4621      	mov	r1, r4
 8003d66:	028a      	lsls	r2, r1, #10
 8003d68:	4610      	mov	r0, r2
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d6e:	2200      	movs	r2, #0
 8003d70:	61bb      	str	r3, [r7, #24]
 8003d72:	61fa      	str	r2, [r7, #28]
 8003d74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d78:	f7fc fa38 	bl	80001ec <__aeabi_uldivmod>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	460b      	mov	r3, r1
 8003d80:	4613      	mov	r3, r2
 8003d82:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d84:	4b0b      	ldr	r3, [pc, #44]	@ (8003db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	0c1b      	lsrs	r3, r3, #16
 8003d8a:	f003 0303 	and.w	r3, r3, #3
 8003d8e:	3301      	adds	r3, #1
 8003d90:	005b      	lsls	r3, r3, #1
 8003d92:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003d94:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d9c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d9e:	e002      	b.n	8003da6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003da0:	4b05      	ldr	r3, [pc, #20]	@ (8003db8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003da2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003da4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003da6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3750      	adds	r7, #80	@ 0x50
 8003dac:	46bd      	mov	sp, r7
 8003dae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003db2:	bf00      	nop
 8003db4:	40023800 	.word	0x40023800
 8003db8:	00f42400 	.word	0x00f42400
 8003dbc:	007a1200 	.word	0x007a1200

08003dc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dc4:	4b03      	ldr	r3, [pc, #12]	@ (8003dd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	20000000 	.word	0x20000000

08003dd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ddc:	f7ff fff0 	bl	8003dc0 <HAL_RCC_GetHCLKFreq>
 8003de0:	4602      	mov	r2, r0
 8003de2:	4b05      	ldr	r3, [pc, #20]	@ (8003df8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	0a9b      	lsrs	r3, r3, #10
 8003de8:	f003 0307 	and.w	r3, r3, #7
 8003dec:	4903      	ldr	r1, [pc, #12]	@ (8003dfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dee:	5ccb      	ldrb	r3, [r1, r3]
 8003df0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	40023800 	.word	0x40023800
 8003dfc:	08008484 	.word	0x08008484

08003e00 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d105      	bne.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d038      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e28:	4b68      	ldr	r3, [pc, #416]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e2e:	f7fd f821 	bl	8000e74 <HAL_GetTick>
 8003e32:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e34:	e008      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e36:	f7fd f81d 	bl	8000e74 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d901      	bls.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e0bd      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e48:	4b61      	ldr	r3, [pc, #388]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1f0      	bne.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	019b      	lsls	r3, r3, #6
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	071b      	lsls	r3, r3, #28
 8003e66:	495a      	ldr	r1, [pc, #360]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e6e:	4b57      	ldr	r3, [pc, #348]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e70:	2201      	movs	r2, #1
 8003e72:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e74:	f7fc fffe 	bl	8000e74 <HAL_GetTick>
 8003e78:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e7a:	e008      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e7c:	f7fc fffa 	bl	8000e74 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e09a      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e8e:	4b50      	ldr	r3, [pc, #320]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d0f0      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f000 8083 	beq.w	8003fae <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	60fb      	str	r3, [r7, #12]
 8003eac:	4b48      	ldr	r3, [pc, #288]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb0:	4a47      	ldr	r2, [pc, #284]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003eb6:	6413      	str	r3, [r2, #64]	@ 0x40
 8003eb8:	4b45      	ldr	r3, [pc, #276]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ebc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ec0:	60fb      	str	r3, [r7, #12]
 8003ec2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003ec4:	4b43      	ldr	r3, [pc, #268]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a42      	ldr	r2, [pc, #264]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003eca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ece:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003ed0:	f7fc ffd0 	bl	8000e74 <HAL_GetTick>
 8003ed4:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003ed6:	e008      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003ed8:	f7fc ffcc 	bl	8000e74 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e06c      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003eea:	4b3a      	ldr	r3, [pc, #232]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d0f0      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ef6:	4b36      	ldr	r3, [pc, #216]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ef8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003efa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003efe:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d02f      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d028      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f14:	4b2e      	ldr	r3, [pc, #184]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f1c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f1e:	4b2e      	ldr	r3, [pc, #184]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003f20:	2201      	movs	r2, #1
 8003f22:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f24:	4b2c      	ldr	r3, [pc, #176]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003f2a:	4a29      	ldr	r2, [pc, #164]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f30:	4b27      	ldr	r3, [pc, #156]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f34:	f003 0301 	and.w	r3, r3, #1
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d114      	bne.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003f3c:	f7fc ff9a 	bl	8000e74 <HAL_GetTick>
 8003f40:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f42:	e00a      	b.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f44:	f7fc ff96 	bl	8000e74 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d901      	bls.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e034      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f5a:	4b1d      	ldr	r3, [pc, #116]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d0ee      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f72:	d10d      	bne.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003f74:	4b16      	ldr	r3, [pc, #88]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003f84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f88:	4911      	ldr	r1, [pc, #68]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	608b      	str	r3, [r1, #8]
 8003f8e:	e005      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003f90:	4b0f      	ldr	r3, [pc, #60]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	4a0e      	ldr	r2, [pc, #56]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f96:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003f9a:	6093      	str	r3, [r2, #8]
 8003f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f9e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fa8:	4909      	ldr	r1, [pc, #36]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0308 	and.w	r3, r3, #8
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	7d1a      	ldrb	r2, [r3, #20]
 8003fbe:	4b07      	ldr	r3, [pc, #28]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003fc0:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3718      	adds	r7, #24
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	42470068 	.word	0x42470068
 8003fd0:	40023800 	.word	0x40023800
 8003fd4:	40007000 	.word	0x40007000
 8003fd8:	42470e40 	.word	0x42470e40
 8003fdc:	424711e0 	.word	0x424711e0

08003fe0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b087      	sub	sp, #28
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003fec:	2300      	movs	r3, #0
 8003fee:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d140      	bne.n	8004080 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003ffe:	4b24      	ldr	r3, [pc, #144]	@ (8004090 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004006:	60fb      	str	r3, [r7, #12]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d005      	beq.n	800401a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d131      	bne.n	8004078 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004014:	4b1f      	ldr	r3, [pc, #124]	@ (8004094 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004016:	617b      	str	r3, [r7, #20]
          break;
 8004018:	e031      	b.n	800407e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800401a:	4b1d      	ldr	r3, [pc, #116]	@ (8004090 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004022:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004026:	d109      	bne.n	800403c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004028:	4b19      	ldr	r3, [pc, #100]	@ (8004090 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800402a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800402e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004032:	4a19      	ldr	r2, [pc, #100]	@ (8004098 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004034:	fbb2 f3f3 	udiv	r3, r2, r3
 8004038:	613b      	str	r3, [r7, #16]
 800403a:	e008      	b.n	800404e <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800403c:	4b14      	ldr	r3, [pc, #80]	@ (8004090 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800403e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004042:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004046:	4a15      	ldr	r2, [pc, #84]	@ (800409c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004048:	fbb2 f3f3 	udiv	r3, r2, r3
 800404c:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800404e:	4b10      	ldr	r3, [pc, #64]	@ (8004090 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004050:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004054:	099b      	lsrs	r3, r3, #6
 8004056:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	fb02 f303 	mul.w	r3, r2, r3
 8004060:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004062:	4b0b      	ldr	r3, [pc, #44]	@ (8004090 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004064:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004068:	0f1b      	lsrs	r3, r3, #28
 800406a:	f003 0307 	and.w	r3, r3, #7
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	fbb2 f3f3 	udiv	r3, r2, r3
 8004074:	617b      	str	r3, [r7, #20]
          break;
 8004076:	e002      	b.n	800407e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004078:	2300      	movs	r3, #0
 800407a:	617b      	str	r3, [r7, #20]
          break;
 800407c:	bf00      	nop
        }
      }
      break;
 800407e:	bf00      	nop
    }
  }
  return frequency;
 8004080:	697b      	ldr	r3, [r7, #20]
}
 8004082:	4618      	mov	r0, r3
 8004084:	371c      	adds	r7, #28
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	40023800 	.word	0x40023800
 8004094:	00bb8000 	.word	0x00bb8000
 8004098:	007a1200 	.word	0x007a1200
 800409c:	00f42400 	.word	0x00f42400

080040a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e07b      	b.n	80041aa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d108      	bne.n	80040cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040c2:	d009      	beq.n	80040d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	61da      	str	r2, [r3, #28]
 80040ca:	e005      	b.n	80040d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d106      	bne.n	80040f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f7fc fd9a 	bl	8000c2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2202      	movs	r2, #2
 80040fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800410e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004120:	431a      	orrs	r2, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800412a:	431a      	orrs	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	431a      	orrs	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	431a      	orrs	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004148:	431a      	orrs	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	69db      	ldr	r3, [r3, #28]
 800414e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004152:	431a      	orrs	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a1b      	ldr	r3, [r3, #32]
 8004158:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800415c:	ea42 0103 	orr.w	r1, r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004164:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	430a      	orrs	r2, r1
 800416e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	0c1b      	lsrs	r3, r3, #16
 8004176:	f003 0104 	and.w	r1, r3, #4
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417e:	f003 0210 	and.w	r2, r3, #16
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	430a      	orrs	r2, r1
 8004188:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	69da      	ldr	r2, [r3, #28]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004198:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3708      	adds	r7, #8
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041b2:	b084      	sub	sp, #16
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	f107 001c 	add.w	r0, r7, #28
 80041c0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80041c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d122      	bne.n	8004210 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ce:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80041de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80041f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d105      	bne.n	8004204 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f001 fbed 	bl	80059e4 <USB_CoreReset>
 800420a:	4603      	mov	r3, r0
 800420c:	73fb      	strb	r3, [r7, #15]
 800420e:	e01a      	b.n	8004246 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f001 fbe1 	bl	80059e4 <USB_CoreReset>
 8004222:	4603      	mov	r3, r0
 8004224:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004226:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004228:	2b00      	cmp	r3, #0
 800422a:	d106      	bne.n	800423a <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004230:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	639a      	str	r2, [r3, #56]	@ 0x38
 8004238:	e005      	b.n	8004246 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800423e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004248:	2b01      	cmp	r3, #1
 800424a:	d10b      	bne.n	8004264 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f043 0206 	orr.w	r2, r3, #6
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f043 0220 	orr.w	r2, r3, #32
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004264:	7bfb      	ldrb	r3, [r7, #15]
}
 8004266:	4618      	mov	r0, r3
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004270:	b004      	add	sp, #16
 8004272:	4770      	bx	lr

08004274 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004274:	b480      	push	{r7}
 8004276:	b087      	sub	sp, #28
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	4613      	mov	r3, r2
 8004280:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004282:	79fb      	ldrb	r3, [r7, #7]
 8004284:	2b02      	cmp	r3, #2
 8004286:	d165      	bne.n	8004354 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	4a41      	ldr	r2, [pc, #260]	@ (8004390 <USB_SetTurnaroundTime+0x11c>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d906      	bls.n	800429e <USB_SetTurnaroundTime+0x2a>
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	4a40      	ldr	r2, [pc, #256]	@ (8004394 <USB_SetTurnaroundTime+0x120>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d202      	bcs.n	800429e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004298:	230f      	movs	r3, #15
 800429a:	617b      	str	r3, [r7, #20]
 800429c:	e062      	b.n	8004364 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	4a3c      	ldr	r2, [pc, #240]	@ (8004394 <USB_SetTurnaroundTime+0x120>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d306      	bcc.n	80042b4 <USB_SetTurnaroundTime+0x40>
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	4a3b      	ldr	r2, [pc, #236]	@ (8004398 <USB_SetTurnaroundTime+0x124>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d202      	bcs.n	80042b4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80042ae:	230e      	movs	r3, #14
 80042b0:	617b      	str	r3, [r7, #20]
 80042b2:	e057      	b.n	8004364 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	4a38      	ldr	r2, [pc, #224]	@ (8004398 <USB_SetTurnaroundTime+0x124>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d306      	bcc.n	80042ca <USB_SetTurnaroundTime+0x56>
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	4a37      	ldr	r2, [pc, #220]	@ (800439c <USB_SetTurnaroundTime+0x128>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d202      	bcs.n	80042ca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80042c4:	230d      	movs	r3, #13
 80042c6:	617b      	str	r3, [r7, #20]
 80042c8:	e04c      	b.n	8004364 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	4a33      	ldr	r2, [pc, #204]	@ (800439c <USB_SetTurnaroundTime+0x128>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d306      	bcc.n	80042e0 <USB_SetTurnaroundTime+0x6c>
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	4a32      	ldr	r2, [pc, #200]	@ (80043a0 <USB_SetTurnaroundTime+0x12c>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d802      	bhi.n	80042e0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80042da:	230c      	movs	r3, #12
 80042dc:	617b      	str	r3, [r7, #20]
 80042de:	e041      	b.n	8004364 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	4a2f      	ldr	r2, [pc, #188]	@ (80043a0 <USB_SetTurnaroundTime+0x12c>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d906      	bls.n	80042f6 <USB_SetTurnaroundTime+0x82>
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	4a2e      	ldr	r2, [pc, #184]	@ (80043a4 <USB_SetTurnaroundTime+0x130>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d802      	bhi.n	80042f6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80042f0:	230b      	movs	r3, #11
 80042f2:	617b      	str	r3, [r7, #20]
 80042f4:	e036      	b.n	8004364 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	4a2a      	ldr	r2, [pc, #168]	@ (80043a4 <USB_SetTurnaroundTime+0x130>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d906      	bls.n	800430c <USB_SetTurnaroundTime+0x98>
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	4a29      	ldr	r2, [pc, #164]	@ (80043a8 <USB_SetTurnaroundTime+0x134>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d802      	bhi.n	800430c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004306:	230a      	movs	r3, #10
 8004308:	617b      	str	r3, [r7, #20]
 800430a:	e02b      	b.n	8004364 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	4a26      	ldr	r2, [pc, #152]	@ (80043a8 <USB_SetTurnaroundTime+0x134>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d906      	bls.n	8004322 <USB_SetTurnaroundTime+0xae>
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	4a25      	ldr	r2, [pc, #148]	@ (80043ac <USB_SetTurnaroundTime+0x138>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d202      	bcs.n	8004322 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800431c:	2309      	movs	r3, #9
 800431e:	617b      	str	r3, [r7, #20]
 8004320:	e020      	b.n	8004364 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	4a21      	ldr	r2, [pc, #132]	@ (80043ac <USB_SetTurnaroundTime+0x138>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d306      	bcc.n	8004338 <USB_SetTurnaroundTime+0xc4>
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	4a20      	ldr	r2, [pc, #128]	@ (80043b0 <USB_SetTurnaroundTime+0x13c>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d802      	bhi.n	8004338 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004332:	2308      	movs	r3, #8
 8004334:	617b      	str	r3, [r7, #20]
 8004336:	e015      	b.n	8004364 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	4a1d      	ldr	r2, [pc, #116]	@ (80043b0 <USB_SetTurnaroundTime+0x13c>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d906      	bls.n	800434e <USB_SetTurnaroundTime+0xda>
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	4a1c      	ldr	r2, [pc, #112]	@ (80043b4 <USB_SetTurnaroundTime+0x140>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d202      	bcs.n	800434e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004348:	2307      	movs	r3, #7
 800434a:	617b      	str	r3, [r7, #20]
 800434c:	e00a      	b.n	8004364 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800434e:	2306      	movs	r3, #6
 8004350:	617b      	str	r3, [r7, #20]
 8004352:	e007      	b.n	8004364 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004354:	79fb      	ldrb	r3, [r7, #7]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d102      	bne.n	8004360 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800435a:	2309      	movs	r3, #9
 800435c:	617b      	str	r3, [r7, #20]
 800435e:	e001      	b.n	8004364 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004360:	2309      	movs	r3, #9
 8004362:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	68da      	ldr	r2, [r3, #12]
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	029b      	lsls	r3, r3, #10
 8004378:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800437c:	431a      	orrs	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	371c      	adds	r7, #28
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr
 8004390:	00d8acbf 	.word	0x00d8acbf
 8004394:	00e4e1c0 	.word	0x00e4e1c0
 8004398:	00f42400 	.word	0x00f42400
 800439c:	01067380 	.word	0x01067380
 80043a0:	011a499f 	.word	0x011a499f
 80043a4:	01312cff 	.word	0x01312cff
 80043a8:	014ca43f 	.word	0x014ca43f
 80043ac:	016e3600 	.word	0x016e3600
 80043b0:	01a6ab1f 	.word	0x01a6ab1f
 80043b4:	01e84800 	.word	0x01e84800

080043b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f043 0201 	orr.w	r2, r3, #1
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr

080043da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80043da:	b480      	push	{r7}
 80043dc:	b083      	sub	sp, #12
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f023 0201 	bic.w	r2, r3, #1
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	460b      	mov	r3, r1
 8004406:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004408:	2300      	movs	r3, #0
 800440a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004418:	78fb      	ldrb	r3, [r7, #3]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d115      	bne.n	800444a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800442a:	2001      	movs	r0, #1
 800442c:	f7fc fd2e 	bl	8000e8c <HAL_Delay>
      ms++;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	3301      	adds	r3, #1
 8004434:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f001 fa45 	bl	80058c6 <USB_GetMode>
 800443c:	4603      	mov	r3, r0
 800443e:	2b01      	cmp	r3, #1
 8004440:	d01e      	beq.n	8004480 <USB_SetCurrentMode+0x84>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2b31      	cmp	r3, #49	@ 0x31
 8004446:	d9f0      	bls.n	800442a <USB_SetCurrentMode+0x2e>
 8004448:	e01a      	b.n	8004480 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800444a:	78fb      	ldrb	r3, [r7, #3]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d115      	bne.n	800447c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800445c:	2001      	movs	r0, #1
 800445e:	f7fc fd15 	bl	8000e8c <HAL_Delay>
      ms++;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	3301      	adds	r3, #1
 8004466:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f001 fa2c 	bl	80058c6 <USB_GetMode>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d005      	beq.n	8004480 <USB_SetCurrentMode+0x84>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2b31      	cmp	r3, #49	@ 0x31
 8004478:	d9f0      	bls.n	800445c <USB_SetCurrentMode+0x60>
 800447a:	e001      	b.n	8004480 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e005      	b.n	800448c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2b32      	cmp	r3, #50	@ 0x32
 8004484:	d101      	bne.n	800448a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e000      	b.n	800448c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004494:	b084      	sub	sp, #16
 8004496:	b580      	push	{r7, lr}
 8004498:	b086      	sub	sp, #24
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
 800449e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80044a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80044a6:	2300      	movs	r3, #0
 80044a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80044ae:	2300      	movs	r3, #0
 80044b0:	613b      	str	r3, [r7, #16]
 80044b2:	e009      	b.n	80044c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	3340      	adds	r3, #64	@ 0x40
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	4413      	add	r3, r2
 80044be:	2200      	movs	r2, #0
 80044c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	3301      	adds	r3, #1
 80044c6:	613b      	str	r3, [r7, #16]
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	2b0e      	cmp	r3, #14
 80044cc:	d9f2      	bls.n	80044b4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80044ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d11c      	bne.n	800450e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044e2:	f043 0302 	orr.w	r3, r3, #2
 80044e6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ec:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044f8:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004504:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	639a      	str	r2, [r3, #56]	@ 0x38
 800450c:	e00b      	b.n	8004526 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004512:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800451e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800452c:	461a      	mov	r2, r3
 800452e:	2300      	movs	r3, #0
 8004530:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004538:	4619      	mov	r1, r3
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004540:	461a      	mov	r2, r3
 8004542:	680b      	ldr	r3, [r1, #0]
 8004544:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004548:	2b01      	cmp	r3, #1
 800454a:	d10c      	bne.n	8004566 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800454c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800454e:	2b00      	cmp	r3, #0
 8004550:	d104      	bne.n	800455c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004552:	2100      	movs	r1, #0
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 f965 	bl	8004824 <USB_SetDevSpeed>
 800455a:	e008      	b.n	800456e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800455c:	2101      	movs	r1, #1
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 f960 	bl	8004824 <USB_SetDevSpeed>
 8004564:	e003      	b.n	800456e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004566:	2103      	movs	r1, #3
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 f95b 	bl	8004824 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800456e:	2110      	movs	r1, #16
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 f8f3 	bl	800475c <USB_FlushTxFifo>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d001      	beq.n	8004580 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 f91f 	bl	80047c4 <USB_FlushRxFifo>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d001      	beq.n	8004590 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004596:	461a      	mov	r2, r3
 8004598:	2300      	movs	r3, #0
 800459a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045a2:	461a      	mov	r2, r3
 80045a4:	2300      	movs	r3, #0
 80045a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045ae:	461a      	mov	r2, r3
 80045b0:	2300      	movs	r3, #0
 80045b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045b4:	2300      	movs	r3, #0
 80045b6:	613b      	str	r3, [r7, #16]
 80045b8:	e043      	b.n	8004642 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	015a      	lsls	r2, r3, #5
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	4413      	add	r3, r2
 80045c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80045cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80045d0:	d118      	bne.n	8004604 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10a      	bne.n	80045ee <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	015a      	lsls	r2, r3, #5
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	4413      	add	r3, r2
 80045e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045e4:	461a      	mov	r2, r3
 80045e6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80045ea:	6013      	str	r3, [r2, #0]
 80045ec:	e013      	b.n	8004616 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	015a      	lsls	r2, r3, #5
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	4413      	add	r3, r2
 80045f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045fa:	461a      	mov	r2, r3
 80045fc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004600:	6013      	str	r3, [r2, #0]
 8004602:	e008      	b.n	8004616 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	015a      	lsls	r2, r3, #5
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	4413      	add	r3, r2
 800460c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004610:	461a      	mov	r2, r3
 8004612:	2300      	movs	r3, #0
 8004614:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	015a      	lsls	r2, r3, #5
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	4413      	add	r3, r2
 800461e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004622:	461a      	mov	r2, r3
 8004624:	2300      	movs	r3, #0
 8004626:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	015a      	lsls	r2, r3, #5
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	4413      	add	r3, r2
 8004630:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004634:	461a      	mov	r2, r3
 8004636:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800463a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	3301      	adds	r3, #1
 8004640:	613b      	str	r3, [r7, #16]
 8004642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	429a      	cmp	r2, r3
 8004648:	d3b7      	bcc.n	80045ba <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800464a:	2300      	movs	r3, #0
 800464c:	613b      	str	r3, [r7, #16]
 800464e:	e043      	b.n	80046d8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	015a      	lsls	r2, r3, #5
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	4413      	add	r3, r2
 8004658:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004662:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004666:	d118      	bne.n	800469a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10a      	bne.n	8004684 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	015a      	lsls	r2, r3, #5
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	4413      	add	r3, r2
 8004676:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800467a:	461a      	mov	r2, r3
 800467c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004680:	6013      	str	r3, [r2, #0]
 8004682:	e013      	b.n	80046ac <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	015a      	lsls	r2, r3, #5
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	4413      	add	r3, r2
 800468c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004690:	461a      	mov	r2, r3
 8004692:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004696:	6013      	str	r3, [r2, #0]
 8004698:	e008      	b.n	80046ac <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	015a      	lsls	r2, r3, #5
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	4413      	add	r3, r2
 80046a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046a6:	461a      	mov	r2, r3
 80046a8:	2300      	movs	r3, #0
 80046aa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	015a      	lsls	r2, r3, #5
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	4413      	add	r3, r2
 80046b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046b8:	461a      	mov	r2, r3
 80046ba:	2300      	movs	r3, #0
 80046bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	015a      	lsls	r2, r3, #5
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	4413      	add	r3, r2
 80046c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046ca:	461a      	mov	r2, r3
 80046cc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80046d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	3301      	adds	r3, #1
 80046d6:	613b      	str	r3, [r7, #16]
 80046d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d3b7      	bcc.n	8004650 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80046ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046f2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004700:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004704:	2b00      	cmp	r3, #0
 8004706:	d105      	bne.n	8004714 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	f043 0210 	orr.w	r2, r3, #16
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	699a      	ldr	r2, [r3, #24]
 8004718:	4b0f      	ldr	r3, [pc, #60]	@ (8004758 <USB_DevInit+0x2c4>)
 800471a:	4313      	orrs	r3, r2
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004720:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004722:	2b00      	cmp	r3, #0
 8004724:	d005      	beq.n	8004732 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	f043 0208 	orr.w	r2, r3, #8
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004732:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004734:	2b01      	cmp	r3, #1
 8004736:	d107      	bne.n	8004748 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004740:	f043 0304 	orr.w	r3, r3, #4
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004748:	7dfb      	ldrb	r3, [r7, #23]
}
 800474a:	4618      	mov	r0, r3
 800474c:	3718      	adds	r7, #24
 800474e:	46bd      	mov	sp, r7
 8004750:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004754:	b004      	add	sp, #16
 8004756:	4770      	bx	lr
 8004758:	803c3800 	.word	0x803c3800

0800475c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800475c:	b480      	push	{r7}
 800475e:	b085      	sub	sp, #20
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004766:	2300      	movs	r3, #0
 8004768:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	3301      	adds	r3, #1
 800476e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4a13      	ldr	r2, [pc, #76]	@ (80047c0 <USB_FlushTxFifo+0x64>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d901      	bls.n	800477c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e01b      	b.n	80047b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	2b00      	cmp	r3, #0
 8004782:	daf2      	bge.n	800476a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004784:	2300      	movs	r3, #0
 8004786:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	019b      	lsls	r3, r3, #6
 800478c:	f043 0220 	orr.w	r2, r3, #32
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	3301      	adds	r3, #1
 8004798:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	4a08      	ldr	r2, [pc, #32]	@ (80047c0 <USB_FlushTxFifo+0x64>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d901      	bls.n	80047a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e006      	b.n	80047b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	f003 0320 	and.w	r3, r3, #32
 80047ae:	2b20      	cmp	r3, #32
 80047b0:	d0f0      	beq.n	8004794 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3714      	adds	r7, #20
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr
 80047c0:	00030d40 	.word	0x00030d40

080047c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047cc:	2300      	movs	r3, #0
 80047ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	3301      	adds	r3, #1
 80047d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	4a11      	ldr	r2, [pc, #68]	@ (8004820 <USB_FlushRxFifo+0x5c>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d901      	bls.n	80047e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e018      	b.n	8004814 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	daf2      	bge.n	80047d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80047ea:	2300      	movs	r3, #0
 80047ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2210      	movs	r2, #16
 80047f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	3301      	adds	r3, #1
 80047f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	4a08      	ldr	r2, [pc, #32]	@ (8004820 <USB_FlushRxFifo+0x5c>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d901      	bls.n	8004806 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e006      	b.n	8004814 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	f003 0310 	and.w	r3, r3, #16
 800480e:	2b10      	cmp	r3, #16
 8004810:	d0f0      	beq.n	80047f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3714      	adds	r7, #20
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr
 8004820:	00030d40 	.word	0x00030d40

08004824 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004824:	b480      	push	{r7}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	460b      	mov	r3, r1
 800482e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	78fb      	ldrb	r3, [r7, #3]
 800483e:	68f9      	ldr	r1, [r7, #12]
 8004840:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004844:	4313      	orrs	r3, r2
 8004846:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3714      	adds	r7, #20
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr

08004856 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004856:	b480      	push	{r7}
 8004858:	b087      	sub	sp, #28
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f003 0306 	and.w	r3, r3, #6
 800486e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d102      	bne.n	800487c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004876:	2300      	movs	r3, #0
 8004878:	75fb      	strb	r3, [r7, #23]
 800487a:	e00a      	b.n	8004892 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2b02      	cmp	r3, #2
 8004880:	d002      	beq.n	8004888 <USB_GetDevSpeed+0x32>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2b06      	cmp	r3, #6
 8004886:	d102      	bne.n	800488e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004888:	2302      	movs	r3, #2
 800488a:	75fb      	strb	r3, [r7, #23]
 800488c:	e001      	b.n	8004892 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800488e:	230f      	movs	r3, #15
 8004890:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004892:	7dfb      	ldrb	r3, [r7, #23]
}
 8004894:	4618      	mov	r0, r3
 8004896:	371c      	adds	r7, #28
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	785b      	ldrb	r3, [r3, #1]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d13a      	bne.n	8004932 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048c2:	69da      	ldr	r2, [r3, #28]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	f003 030f 	and.w	r3, r3, #15
 80048cc:	2101      	movs	r1, #1
 80048ce:	fa01 f303 	lsl.w	r3, r1, r3
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	68f9      	ldr	r1, [r7, #12]
 80048d6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80048da:	4313      	orrs	r3, r2
 80048dc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	015a      	lsls	r2, r3, #5
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	4413      	add	r3, r2
 80048e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d155      	bne.n	80049a0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	015a      	lsls	r2, r3, #5
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	4413      	add	r3, r2
 80048fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	791b      	ldrb	r3, [r3, #4]
 800490e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004910:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	059b      	lsls	r3, r3, #22
 8004916:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004918:	4313      	orrs	r3, r2
 800491a:	68ba      	ldr	r2, [r7, #8]
 800491c:	0151      	lsls	r1, r2, #5
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	440a      	add	r2, r1
 8004922:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004926:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800492a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800492e:	6013      	str	r3, [r2, #0]
 8004930:	e036      	b.n	80049a0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004938:	69da      	ldr	r2, [r3, #28]
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	f003 030f 	and.w	r3, r3, #15
 8004942:	2101      	movs	r1, #1
 8004944:	fa01 f303 	lsl.w	r3, r1, r3
 8004948:	041b      	lsls	r3, r3, #16
 800494a:	68f9      	ldr	r1, [r7, #12]
 800494c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004950:	4313      	orrs	r3, r2
 8004952:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	015a      	lsls	r2, r3, #5
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	4413      	add	r3, r2
 800495c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d11a      	bne.n	80049a0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	015a      	lsls	r2, r3, #5
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	4413      	add	r3, r2
 8004972:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	791b      	ldrb	r3, [r3, #4]
 8004984:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004986:	430b      	orrs	r3, r1
 8004988:	4313      	orrs	r3, r2
 800498a:	68ba      	ldr	r2, [r7, #8]
 800498c:	0151      	lsls	r1, r2, #5
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	440a      	add	r2, r1
 8004992:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004996:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800499a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800499e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
	...

080049b0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	785b      	ldrb	r3, [r3, #1]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d161      	bne.n	8004a90 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	015a      	lsls	r2, r3, #5
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	4413      	add	r3, r2
 80049d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80049de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80049e2:	d11f      	bne.n	8004a24 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	015a      	lsls	r2, r3, #5
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	4413      	add	r3, r2
 80049ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	0151      	lsls	r1, r2, #5
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	440a      	add	r2, r1
 80049fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049fe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004a02:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	015a      	lsls	r2, r3, #5
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68ba      	ldr	r2, [r7, #8]
 8004a14:	0151      	lsls	r1, r2, #5
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	440a      	add	r2, r1
 8004a1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a1e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004a22:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	f003 030f 	and.w	r3, r3, #15
 8004a34:	2101      	movs	r1, #1
 8004a36:	fa01 f303 	lsl.w	r3, r1, r3
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	43db      	mvns	r3, r3
 8004a3e:	68f9      	ldr	r1, [r7, #12]
 8004a40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a44:	4013      	ands	r3, r2
 8004a46:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a4e:	69da      	ldr	r2, [r3, #28]
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	f003 030f 	and.w	r3, r3, #15
 8004a58:	2101      	movs	r1, #1
 8004a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	43db      	mvns	r3, r3
 8004a62:	68f9      	ldr	r1, [r7, #12]
 8004a64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a68:	4013      	ands	r3, r2
 8004a6a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	015a      	lsls	r2, r3, #5
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4413      	add	r3, r2
 8004a74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	0159      	lsls	r1, r3, #5
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	440b      	add	r3, r1
 8004a82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a86:	4619      	mov	r1, r3
 8004a88:	4b35      	ldr	r3, [pc, #212]	@ (8004b60 <USB_DeactivateEndpoint+0x1b0>)
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	600b      	str	r3, [r1, #0]
 8004a8e:	e060      	b.n	8004b52 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	015a      	lsls	r2, r3, #5
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	4413      	add	r3, r2
 8004a98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004aa2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004aa6:	d11f      	bne.n	8004ae8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	015a      	lsls	r2, r3, #5
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	4413      	add	r3, r2
 8004ab0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68ba      	ldr	r2, [r7, #8]
 8004ab8:	0151      	lsls	r1, r2, #5
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	440a      	add	r2, r1
 8004abe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ac2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004ac6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	015a      	lsls	r2, r3, #5
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	4413      	add	r3, r2
 8004ad0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68ba      	ldr	r2, [r7, #8]
 8004ad8:	0151      	lsls	r1, r2, #5
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	440a      	add	r2, r1
 8004ade:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ae2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004ae6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004aee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	f003 030f 	and.w	r3, r3, #15
 8004af8:	2101      	movs	r1, #1
 8004afa:	fa01 f303 	lsl.w	r3, r1, r3
 8004afe:	041b      	lsls	r3, r3, #16
 8004b00:	43db      	mvns	r3, r3
 8004b02:	68f9      	ldr	r1, [r7, #12]
 8004b04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b08:	4013      	ands	r3, r2
 8004b0a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b12:	69da      	ldr	r2, [r3, #28]
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	f003 030f 	and.w	r3, r3, #15
 8004b1c:	2101      	movs	r1, #1
 8004b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b22:	041b      	lsls	r3, r3, #16
 8004b24:	43db      	mvns	r3, r3
 8004b26:	68f9      	ldr	r1, [r7, #12]
 8004b28:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	015a      	lsls	r2, r3, #5
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	4413      	add	r3, r2
 8004b38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	0159      	lsls	r1, r3, #5
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	440b      	add	r3, r1
 8004b46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	4b05      	ldr	r3, [pc, #20]	@ (8004b64 <USB_DeactivateEndpoint+0x1b4>)
 8004b4e:	4013      	ands	r3, r2
 8004b50:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3714      	adds	r7, #20
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr
 8004b60:	ec337800 	.word	0xec337800
 8004b64:	eff37800 	.word	0xeff37800

08004b68 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b08a      	sub	sp, #40	@ 0x28
 8004b6c:	af02      	add	r7, sp, #8
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	4613      	mov	r3, r2
 8004b74:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	785b      	ldrb	r3, [r3, #1]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	f040 815c 	bne.w	8004e42 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d132      	bne.n	8004bf8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	015a      	lsls	r2, r3, #5
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	4413      	add	r3, r2
 8004b9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	69ba      	ldr	r2, [r7, #24]
 8004ba2:	0151      	lsls	r1, r2, #5
 8004ba4:	69fa      	ldr	r2, [r7, #28]
 8004ba6:	440a      	add	r2, r1
 8004ba8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004bac:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004bb0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004bb4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	015a      	lsls	r2, r3, #5
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	0151      	lsls	r1, r2, #5
 8004bc8:	69fa      	ldr	r2, [r7, #28]
 8004bca:	440a      	add	r2, r1
 8004bcc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004bd0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004bd4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	015a      	lsls	r2, r3, #5
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	4413      	add	r3, r2
 8004bde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	69ba      	ldr	r2, [r7, #24]
 8004be6:	0151      	lsls	r1, r2, #5
 8004be8:	69fa      	ldr	r2, [r7, #28]
 8004bea:	440a      	add	r2, r1
 8004bec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004bf0:	0cdb      	lsrs	r3, r3, #19
 8004bf2:	04db      	lsls	r3, r3, #19
 8004bf4:	6113      	str	r3, [r2, #16]
 8004bf6:	e074      	b.n	8004ce2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	015a      	lsls	r2, r3, #5
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	4413      	add	r3, r2
 8004c00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	69ba      	ldr	r2, [r7, #24]
 8004c08:	0151      	lsls	r1, r2, #5
 8004c0a:	69fa      	ldr	r2, [r7, #28]
 8004c0c:	440a      	add	r2, r1
 8004c0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c12:	0cdb      	lsrs	r3, r3, #19
 8004c14:	04db      	lsls	r3, r3, #19
 8004c16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	015a      	lsls	r2, r3, #5
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	4413      	add	r3, r2
 8004c20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	69ba      	ldr	r2, [r7, #24]
 8004c28:	0151      	lsls	r1, r2, #5
 8004c2a:	69fa      	ldr	r2, [r7, #28]
 8004c2c:	440a      	add	r2, r1
 8004c2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c32:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004c36:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004c3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	015a      	lsls	r2, r3, #5
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	4413      	add	r3, r2
 8004c44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c48:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	6999      	ldr	r1, [r3, #24]
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	440b      	add	r3, r1
 8004c54:	1e59      	subs	r1, r3, #1
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c5e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004c60:	4b9d      	ldr	r3, [pc, #628]	@ (8004ed8 <USB_EPStartXfer+0x370>)
 8004c62:	400b      	ands	r3, r1
 8004c64:	69b9      	ldr	r1, [r7, #24]
 8004c66:	0148      	lsls	r0, r1, #5
 8004c68:	69f9      	ldr	r1, [r7, #28]
 8004c6a:	4401      	add	r1, r0
 8004c6c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004c70:	4313      	orrs	r3, r2
 8004c72:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	015a      	lsls	r2, r3, #5
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c80:	691a      	ldr	r2, [r3, #16]
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c8a:	69b9      	ldr	r1, [r7, #24]
 8004c8c:	0148      	lsls	r0, r1, #5
 8004c8e:	69f9      	ldr	r1, [r7, #28]
 8004c90:	4401      	add	r1, r0
 8004c92:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004c96:	4313      	orrs	r3, r2
 8004c98:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	791b      	ldrb	r3, [r3, #4]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d11f      	bne.n	8004ce2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	015a      	lsls	r2, r3, #5
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	4413      	add	r3, r2
 8004caa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	69ba      	ldr	r2, [r7, #24]
 8004cb2:	0151      	lsls	r1, r2, #5
 8004cb4:	69fa      	ldr	r2, [r7, #28]
 8004cb6:	440a      	add	r2, r1
 8004cb8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004cbc:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004cc0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	015a      	lsls	r2, r3, #5
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	4413      	add	r3, r2
 8004cca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	69ba      	ldr	r2, [r7, #24]
 8004cd2:	0151      	lsls	r1, r2, #5
 8004cd4:	69fa      	ldr	r2, [r7, #28]
 8004cd6:	440a      	add	r2, r1
 8004cd8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004cdc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004ce0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004ce2:	79fb      	ldrb	r3, [r7, #7]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d14b      	bne.n	8004d80 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	695b      	ldr	r3, [r3, #20]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d009      	beq.n	8004d04 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	015a      	lsls	r2, r3, #5
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	791b      	ldrb	r3, [r3, #4]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d128      	bne.n	8004d5e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d110      	bne.n	8004d3e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	015a      	lsls	r2, r3, #5
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	4413      	add	r3, r2
 8004d24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	69ba      	ldr	r2, [r7, #24]
 8004d2c:	0151      	lsls	r1, r2, #5
 8004d2e:	69fa      	ldr	r2, [r7, #28]
 8004d30:	440a      	add	r2, r1
 8004d32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d36:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004d3a:	6013      	str	r3, [r2, #0]
 8004d3c:	e00f      	b.n	8004d5e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	015a      	lsls	r2, r3, #5
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	4413      	add	r3, r2
 8004d46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	69ba      	ldr	r2, [r7, #24]
 8004d4e:	0151      	lsls	r1, r2, #5
 8004d50:	69fa      	ldr	r2, [r7, #28]
 8004d52:	440a      	add	r2, r1
 8004d54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d5c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	015a      	lsls	r2, r3, #5
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	4413      	add	r3, r2
 8004d66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	69ba      	ldr	r2, [r7, #24]
 8004d6e:	0151      	lsls	r1, r2, #5
 8004d70:	69fa      	ldr	r2, [r7, #28]
 8004d72:	440a      	add	r2, r1
 8004d74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d78:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004d7c:	6013      	str	r3, [r2, #0]
 8004d7e:	e133      	b.n	8004fe8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	015a      	lsls	r2, r3, #5
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	4413      	add	r3, r2
 8004d88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	69ba      	ldr	r2, [r7, #24]
 8004d90:	0151      	lsls	r1, r2, #5
 8004d92:	69fa      	ldr	r2, [r7, #28]
 8004d94:	440a      	add	r2, r1
 8004d96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d9a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004d9e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	791b      	ldrb	r3, [r3, #4]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d015      	beq.n	8004dd4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f000 811b 	beq.w	8004fe8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004db8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	f003 030f 	and.w	r3, r3, #15
 8004dc2:	2101      	movs	r1, #1
 8004dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8004dc8:	69f9      	ldr	r1, [r7, #28]
 8004dca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	634b      	str	r3, [r1, #52]	@ 0x34
 8004dd2:	e109      	b.n	8004fe8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d110      	bne.n	8004e06 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	015a      	lsls	r2, r3, #5
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	4413      	add	r3, r2
 8004dec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	69ba      	ldr	r2, [r7, #24]
 8004df4:	0151      	lsls	r1, r2, #5
 8004df6:	69fa      	ldr	r2, [r7, #28]
 8004df8:	440a      	add	r2, r1
 8004dfa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004dfe:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004e02:	6013      	str	r3, [r2, #0]
 8004e04:	e00f      	b.n	8004e26 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	015a      	lsls	r2, r3, #5
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	69ba      	ldr	r2, [r7, #24]
 8004e16:	0151      	lsls	r1, r2, #5
 8004e18:	69fa      	ldr	r2, [r7, #28]
 8004e1a:	440a      	add	r2, r1
 8004e1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e24:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	6919      	ldr	r1, [r3, #16]
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	781a      	ldrb	r2, [r3, #0]
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	b298      	uxth	r0, r3
 8004e34:	79fb      	ldrb	r3, [r7, #7]
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	4603      	mov	r3, r0
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f000 fade 	bl	80053fc <USB_WritePacket>
 8004e40:	e0d2      	b.n	8004fe8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	015a      	lsls	r2, r3, #5
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	4413      	add	r3, r2
 8004e4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	0151      	lsls	r1, r2, #5
 8004e54:	69fa      	ldr	r2, [r7, #28]
 8004e56:	440a      	add	r2, r1
 8004e58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e5c:	0cdb      	lsrs	r3, r3, #19
 8004e5e:	04db      	lsls	r3, r3, #19
 8004e60:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	015a      	lsls	r2, r3, #5
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	4413      	add	r3, r2
 8004e6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	69ba      	ldr	r2, [r7, #24]
 8004e72:	0151      	lsls	r1, r2, #5
 8004e74:	69fa      	ldr	r2, [r7, #28]
 8004e76:	440a      	add	r2, r1
 8004e78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e7c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004e80:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004e84:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d126      	bne.n	8004edc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	015a      	lsls	r2, r3, #5
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	4413      	add	r3, r2
 8004e96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e9a:	691a      	ldr	r2, [r3, #16]
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ea4:	69b9      	ldr	r1, [r7, #24]
 8004ea6:	0148      	lsls	r0, r1, #5
 8004ea8:	69f9      	ldr	r1, [r7, #28]
 8004eaa:	4401      	add	r1, r0
 8004eac:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	015a      	lsls	r2, r3, #5
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	4413      	add	r3, r2
 8004ebc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	69ba      	ldr	r2, [r7, #24]
 8004ec4:	0151      	lsls	r1, r2, #5
 8004ec6:	69fa      	ldr	r2, [r7, #28]
 8004ec8:	440a      	add	r2, r1
 8004eca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ece:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004ed2:	6113      	str	r3, [r2, #16]
 8004ed4:	e03a      	b.n	8004f4c <USB_EPStartXfer+0x3e4>
 8004ed6:	bf00      	nop
 8004ed8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	699a      	ldr	r2, [r3, #24]
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	1e5a      	subs	r2, r3, #1
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	8afa      	ldrh	r2, [r7, #22]
 8004ef8:	fb03 f202 	mul.w	r2, r3, r2
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	015a      	lsls	r2, r3, #5
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	4413      	add	r3, r2
 8004f08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f0c:	691a      	ldr	r2, [r3, #16]
 8004f0e:	8afb      	ldrh	r3, [r7, #22]
 8004f10:	04d9      	lsls	r1, r3, #19
 8004f12:	4b38      	ldr	r3, [pc, #224]	@ (8004ff4 <USB_EPStartXfer+0x48c>)
 8004f14:	400b      	ands	r3, r1
 8004f16:	69b9      	ldr	r1, [r7, #24]
 8004f18:	0148      	lsls	r0, r1, #5
 8004f1a:	69f9      	ldr	r1, [r7, #28]
 8004f1c:	4401      	add	r1, r0
 8004f1e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004f22:	4313      	orrs	r3, r2
 8004f24:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	015a      	lsls	r2, r3, #5
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f32:	691a      	ldr	r2, [r3, #16]
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	69db      	ldr	r3, [r3, #28]
 8004f38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f3c:	69b9      	ldr	r1, [r7, #24]
 8004f3e:	0148      	lsls	r0, r1, #5
 8004f40:	69f9      	ldr	r1, [r7, #28]
 8004f42:	4401      	add	r1, r0
 8004f44:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004f4c:	79fb      	ldrb	r3, [r7, #7]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d10d      	bne.n	8004f6e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d009      	beq.n	8004f6e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	6919      	ldr	r1, [r3, #16]
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	015a      	lsls	r2, r3, #5
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	4413      	add	r3, r2
 8004f66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f6a:	460a      	mov	r2, r1
 8004f6c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	791b      	ldrb	r3, [r3, #4]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d128      	bne.n	8004fc8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d110      	bne.n	8004fa8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	015a      	lsls	r2, r3, #5
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	69ba      	ldr	r2, [r7, #24]
 8004f96:	0151      	lsls	r1, r2, #5
 8004f98:	69fa      	ldr	r2, [r7, #28]
 8004f9a:	440a      	add	r2, r1
 8004f9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004fa0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004fa4:	6013      	str	r3, [r2, #0]
 8004fa6:	e00f      	b.n	8004fc8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	015a      	lsls	r2, r3, #5
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	4413      	add	r3, r2
 8004fb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	69ba      	ldr	r2, [r7, #24]
 8004fb8:	0151      	lsls	r1, r2, #5
 8004fba:	69fa      	ldr	r2, [r7, #28]
 8004fbc:	440a      	add	r2, r1
 8004fbe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004fc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fc6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	015a      	lsls	r2, r3, #5
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	4413      	add	r3, r2
 8004fd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	69ba      	ldr	r2, [r7, #24]
 8004fd8:	0151      	lsls	r1, r2, #5
 8004fda:	69fa      	ldr	r2, [r7, #28]
 8004fdc:	440a      	add	r2, r1
 8004fde:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004fe2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004fe6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3720      	adds	r7, #32
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	1ff80000 	.word	0x1ff80000

08004ff8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b087      	sub	sp, #28
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	4613      	mov	r3, r2
 8005004:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	785b      	ldrb	r3, [r3, #1]
 8005014:	2b01      	cmp	r3, #1
 8005016:	f040 80ce 	bne.w	80051b6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d132      	bne.n	8005088 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	015a      	lsls	r2, r3, #5
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	4413      	add	r3, r2
 800502a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	693a      	ldr	r2, [r7, #16]
 8005032:	0151      	lsls	r1, r2, #5
 8005034:	697a      	ldr	r2, [r7, #20]
 8005036:	440a      	add	r2, r1
 8005038:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800503c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005040:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005044:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	015a      	lsls	r2, r3, #5
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	4413      	add	r3, r2
 800504e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	0151      	lsls	r1, r2, #5
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	440a      	add	r2, r1
 800505c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005060:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005064:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	015a      	lsls	r2, r3, #5
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	4413      	add	r3, r2
 800506e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	0151      	lsls	r1, r2, #5
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	440a      	add	r2, r1
 800507c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005080:	0cdb      	lsrs	r3, r3, #19
 8005082:	04db      	lsls	r3, r3, #19
 8005084:	6113      	str	r3, [r2, #16]
 8005086:	e04e      	b.n	8005126 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	015a      	lsls	r2, r3, #5
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	4413      	add	r3, r2
 8005090:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	693a      	ldr	r2, [r7, #16]
 8005098:	0151      	lsls	r1, r2, #5
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	440a      	add	r2, r1
 800509e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050a2:	0cdb      	lsrs	r3, r3, #19
 80050a4:	04db      	lsls	r3, r3, #19
 80050a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	015a      	lsls	r2, r3, #5
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	4413      	add	r3, r2
 80050b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	0151      	lsls	r1, r2, #5
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	440a      	add	r2, r1
 80050be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050c2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80050c6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80050ca:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	699a      	ldr	r2, [r3, #24]
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d903      	bls.n	80050e0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	68da      	ldr	r2, [r3, #12]
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	015a      	lsls	r2, r3, #5
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	0151      	lsls	r1, r2, #5
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	440a      	add	r2, r1
 80050f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050fa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80050fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	015a      	lsls	r2, r3, #5
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	4413      	add	r3, r2
 8005108:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800510c:	691a      	ldr	r2, [r3, #16]
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005116:	6939      	ldr	r1, [r7, #16]
 8005118:	0148      	lsls	r0, r1, #5
 800511a:	6979      	ldr	r1, [r7, #20]
 800511c:	4401      	add	r1, r0
 800511e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005122:	4313      	orrs	r3, r2
 8005124:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005126:	79fb      	ldrb	r3, [r7, #7]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d11e      	bne.n	800516a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	695b      	ldr	r3, [r3, #20]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d009      	beq.n	8005148 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	015a      	lsls	r2, r3, #5
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	4413      	add	r3, r2
 800513c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005140:	461a      	mov	r2, r3
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	015a      	lsls	r2, r3, #5
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	4413      	add	r3, r2
 8005150:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	693a      	ldr	r2, [r7, #16]
 8005158:	0151      	lsls	r1, r2, #5
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	440a      	add	r2, r1
 800515e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005162:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005166:	6013      	str	r3, [r2, #0]
 8005168:	e097      	b.n	800529a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	015a      	lsls	r2, r3, #5
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	4413      	add	r3, r2
 8005172:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	693a      	ldr	r2, [r7, #16]
 800517a:	0151      	lsls	r1, r2, #5
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	440a      	add	r2, r1
 8005180:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005184:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005188:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	2b00      	cmp	r3, #0
 8005190:	f000 8083 	beq.w	800529a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800519a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	f003 030f 	and.w	r3, r3, #15
 80051a4:	2101      	movs	r1, #1
 80051a6:	fa01 f303 	lsl.w	r3, r1, r3
 80051aa:	6979      	ldr	r1, [r7, #20]
 80051ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80051b0:	4313      	orrs	r3, r2
 80051b2:	634b      	str	r3, [r1, #52]	@ 0x34
 80051b4:	e071      	b.n	800529a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	015a      	lsls	r2, r3, #5
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	4413      	add	r3, r2
 80051be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	0151      	lsls	r1, r2, #5
 80051c8:	697a      	ldr	r2, [r7, #20]
 80051ca:	440a      	add	r2, r1
 80051cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051d0:	0cdb      	lsrs	r3, r3, #19
 80051d2:	04db      	lsls	r3, r3, #19
 80051d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	015a      	lsls	r2, r3, #5
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	4413      	add	r3, r2
 80051de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	0151      	lsls	r1, r2, #5
 80051e8:	697a      	ldr	r2, [r7, #20]
 80051ea:	440a      	add	r2, r1
 80051ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051f0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80051f4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80051f8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d003      	beq.n	800520a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	68da      	ldr	r2, [r3, #12]
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	68da      	ldr	r2, [r3, #12]
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	015a      	lsls	r2, r3, #5
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	4413      	add	r3, r2
 800521a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	0151      	lsls	r1, r2, #5
 8005224:	697a      	ldr	r2, [r7, #20]
 8005226:	440a      	add	r2, r1
 8005228:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800522c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005230:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	015a      	lsls	r2, r3, #5
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	4413      	add	r3, r2
 800523a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800523e:	691a      	ldr	r2, [r3, #16]
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	69db      	ldr	r3, [r3, #28]
 8005244:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005248:	6939      	ldr	r1, [r7, #16]
 800524a:	0148      	lsls	r0, r1, #5
 800524c:	6979      	ldr	r1, [r7, #20]
 800524e:	4401      	add	r1, r0
 8005250:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005254:	4313      	orrs	r3, r2
 8005256:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005258:	79fb      	ldrb	r3, [r7, #7]
 800525a:	2b01      	cmp	r3, #1
 800525c:	d10d      	bne.n	800527a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d009      	beq.n	800527a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	6919      	ldr	r1, [r3, #16]
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	015a      	lsls	r2, r3, #5
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	4413      	add	r3, r2
 8005272:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005276:	460a      	mov	r2, r1
 8005278:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	015a      	lsls	r2, r3, #5
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	4413      	add	r3, r2
 8005282:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	0151      	lsls	r1, r2, #5
 800528c:	697a      	ldr	r2, [r7, #20]
 800528e:	440a      	add	r2, r1
 8005290:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005294:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005298:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	371c      	adds	r7, #28
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b087      	sub	sp, #28
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80052b2:	2300      	movs	r3, #0
 80052b4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80052b6:	2300      	movs	r3, #0
 80052b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	785b      	ldrb	r3, [r3, #1]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d14a      	bne.n	800535c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	015a      	lsls	r2, r3, #5
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	4413      	add	r3, r2
 80052d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80052da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80052de:	f040 8086 	bne.w	80053ee <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	015a      	lsls	r2, r3, #5
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	4413      	add	r3, r2
 80052ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	683a      	ldr	r2, [r7, #0]
 80052f4:	7812      	ldrb	r2, [r2, #0]
 80052f6:	0151      	lsls	r1, r2, #5
 80052f8:	693a      	ldr	r2, [r7, #16]
 80052fa:	440a      	add	r2, r1
 80052fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005300:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005304:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	015a      	lsls	r2, r3, #5
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	4413      	add	r3, r2
 8005310:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	683a      	ldr	r2, [r7, #0]
 8005318:	7812      	ldrb	r2, [r2, #0]
 800531a:	0151      	lsls	r1, r2, #5
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	440a      	add	r2, r1
 8005320:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005324:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005328:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	3301      	adds	r3, #1
 800532e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005336:	4293      	cmp	r3, r2
 8005338:	d902      	bls.n	8005340 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	75fb      	strb	r3, [r7, #23]
          break;
 800533e:	e056      	b.n	80053ee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	015a      	lsls	r2, r3, #5
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	4413      	add	r3, r2
 800534a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005354:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005358:	d0e7      	beq.n	800532a <USB_EPStopXfer+0x82>
 800535a:	e048      	b.n	80053ee <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	015a      	lsls	r2, r3, #5
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	4413      	add	r3, r2
 8005366:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005370:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005374:	d13b      	bne.n	80053ee <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	015a      	lsls	r2, r3, #5
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	4413      	add	r3, r2
 8005380:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	683a      	ldr	r2, [r7, #0]
 8005388:	7812      	ldrb	r2, [r2, #0]
 800538a:	0151      	lsls	r1, r2, #5
 800538c:	693a      	ldr	r2, [r7, #16]
 800538e:	440a      	add	r2, r1
 8005390:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005394:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005398:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	015a      	lsls	r2, r3, #5
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	4413      	add	r3, r2
 80053a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	7812      	ldrb	r2, [r2, #0]
 80053ae:	0151      	lsls	r1, r2, #5
 80053b0:	693a      	ldr	r2, [r7, #16]
 80053b2:	440a      	add	r2, r1
 80053b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80053bc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	3301      	adds	r3, #1
 80053c2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d902      	bls.n	80053d4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	75fb      	strb	r3, [r7, #23]
          break;
 80053d2:	e00c      	b.n	80053ee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	015a      	lsls	r2, r3, #5
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	4413      	add	r3, r2
 80053de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80053e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80053ec:	d0e7      	beq.n	80053be <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80053ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	371c      	adds	r7, #28
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b089      	sub	sp, #36	@ 0x24
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	4611      	mov	r1, r2
 8005408:	461a      	mov	r2, r3
 800540a:	460b      	mov	r3, r1
 800540c:	71fb      	strb	r3, [r7, #7]
 800540e:	4613      	mov	r3, r2
 8005410:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800541a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800541e:	2b00      	cmp	r3, #0
 8005420:	d123      	bne.n	800546a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005422:	88bb      	ldrh	r3, [r7, #4]
 8005424:	3303      	adds	r3, #3
 8005426:	089b      	lsrs	r3, r3, #2
 8005428:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800542a:	2300      	movs	r3, #0
 800542c:	61bb      	str	r3, [r7, #24]
 800542e:	e018      	b.n	8005462 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005430:	79fb      	ldrb	r3, [r7, #7]
 8005432:	031a      	lsls	r2, r3, #12
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	4413      	add	r3, r2
 8005438:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800543c:	461a      	mov	r2, r3
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	3301      	adds	r3, #1
 8005448:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	3301      	adds	r3, #1
 800544e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	3301      	adds	r3, #1
 8005454:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	3301      	adds	r3, #1
 800545a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	3301      	adds	r3, #1
 8005460:	61bb      	str	r3, [r7, #24]
 8005462:	69ba      	ldr	r2, [r7, #24]
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	429a      	cmp	r2, r3
 8005468:	d3e2      	bcc.n	8005430 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3724      	adds	r7, #36	@ 0x24
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005478:	b480      	push	{r7}
 800547a:	b08b      	sub	sp, #44	@ 0x2c
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	4613      	mov	r3, r2
 8005484:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800548e:	88fb      	ldrh	r3, [r7, #6]
 8005490:	089b      	lsrs	r3, r3, #2
 8005492:	b29b      	uxth	r3, r3
 8005494:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005496:	88fb      	ldrh	r3, [r7, #6]
 8005498:	f003 0303 	and.w	r3, r3, #3
 800549c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800549e:	2300      	movs	r3, #0
 80054a0:	623b      	str	r3, [r7, #32]
 80054a2:	e014      	b.n	80054ce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ae:	601a      	str	r2, [r3, #0]
    pDest++;
 80054b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b2:	3301      	adds	r3, #1
 80054b4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80054b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b8:	3301      	adds	r3, #1
 80054ba:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80054bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054be:	3301      	adds	r3, #1
 80054c0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80054c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c4:	3301      	adds	r3, #1
 80054c6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80054c8:	6a3b      	ldr	r3, [r7, #32]
 80054ca:	3301      	adds	r3, #1
 80054cc:	623b      	str	r3, [r7, #32]
 80054ce:	6a3a      	ldr	r2, [r7, #32]
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d3e6      	bcc.n	80054a4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80054d6:	8bfb      	ldrh	r3, [r7, #30]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d01e      	beq.n	800551a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80054dc:	2300      	movs	r3, #0
 80054de:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054e6:	461a      	mov	r2, r3
 80054e8:	f107 0310 	add.w	r3, r7, #16
 80054ec:	6812      	ldr	r2, [r2, #0]
 80054ee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	6a3b      	ldr	r3, [r7, #32]
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	00db      	lsls	r3, r3, #3
 80054f8:	fa22 f303 	lsr.w	r3, r2, r3
 80054fc:	b2da      	uxtb	r2, r3
 80054fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005500:	701a      	strb	r2, [r3, #0]
      i++;
 8005502:	6a3b      	ldr	r3, [r7, #32]
 8005504:	3301      	adds	r3, #1
 8005506:	623b      	str	r3, [r7, #32]
      pDest++;
 8005508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800550a:	3301      	adds	r3, #1
 800550c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800550e:	8bfb      	ldrh	r3, [r7, #30]
 8005510:	3b01      	subs	r3, #1
 8005512:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005514:	8bfb      	ldrh	r3, [r7, #30]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d1ea      	bne.n	80054f0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800551a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800551c:	4618      	mov	r0, r3
 800551e:	372c      	adds	r7, #44	@ 0x2c
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	785b      	ldrb	r3, [r3, #1]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d12c      	bne.n	800559e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	015a      	lsls	r2, r3, #5
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	4413      	add	r3, r2
 800554c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	db12      	blt.n	800557c <USB_EPSetStall+0x54>
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00f      	beq.n	800557c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	015a      	lsls	r2, r3, #5
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	4413      	add	r3, r2
 8005564:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68ba      	ldr	r2, [r7, #8]
 800556c:	0151      	lsls	r1, r2, #5
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	440a      	add	r2, r1
 8005572:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005576:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800557a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	015a      	lsls	r2, r3, #5
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	4413      	add	r3, r2
 8005584:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68ba      	ldr	r2, [r7, #8]
 800558c:	0151      	lsls	r1, r2, #5
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	440a      	add	r2, r1
 8005592:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005596:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800559a:	6013      	str	r3, [r2, #0]
 800559c:	e02b      	b.n	80055f6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	015a      	lsls	r2, r3, #5
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	4413      	add	r3, r2
 80055a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	db12      	blt.n	80055d6 <USB_EPSetStall+0xae>
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00f      	beq.n	80055d6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	015a      	lsls	r2, r3, #5
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	4413      	add	r3, r2
 80055be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68ba      	ldr	r2, [r7, #8]
 80055c6:	0151      	lsls	r1, r2, #5
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	440a      	add	r2, r1
 80055cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055d0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80055d4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	015a      	lsls	r2, r3, #5
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	4413      	add	r3, r2
 80055de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68ba      	ldr	r2, [r7, #8]
 80055e6:	0151      	lsls	r1, r2, #5
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	440a      	add	r2, r1
 80055ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80055f4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3714      	adds	r7, #20
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	785b      	ldrb	r3, [r3, #1]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d128      	bne.n	8005672 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	015a      	lsls	r2, r3, #5
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	4413      	add	r3, r2
 8005628:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	0151      	lsls	r1, r2, #5
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	440a      	add	r2, r1
 8005636:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800563a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800563e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	791b      	ldrb	r3, [r3, #4]
 8005644:	2b03      	cmp	r3, #3
 8005646:	d003      	beq.n	8005650 <USB_EPClearStall+0x4c>
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	791b      	ldrb	r3, [r3, #4]
 800564c:	2b02      	cmp	r3, #2
 800564e:	d138      	bne.n	80056c2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	015a      	lsls	r2, r3, #5
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	4413      	add	r3, r2
 8005658:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68ba      	ldr	r2, [r7, #8]
 8005660:	0151      	lsls	r1, r2, #5
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	440a      	add	r2, r1
 8005666:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800566a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800566e:	6013      	str	r3, [r2, #0]
 8005670:	e027      	b.n	80056c2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	015a      	lsls	r2, r3, #5
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	4413      	add	r3, r2
 800567a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68ba      	ldr	r2, [r7, #8]
 8005682:	0151      	lsls	r1, r2, #5
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	440a      	add	r2, r1
 8005688:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800568c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005690:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	791b      	ldrb	r3, [r3, #4]
 8005696:	2b03      	cmp	r3, #3
 8005698:	d003      	beq.n	80056a2 <USB_EPClearStall+0x9e>
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	791b      	ldrb	r3, [r3, #4]
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d10f      	bne.n	80056c2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	015a      	lsls	r2, r3, #5
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	4413      	add	r3, r2
 80056aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	0151      	lsls	r1, r2, #5
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	440a      	add	r2, r1
 80056b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056c0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3714      	adds	r7, #20
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	460b      	mov	r3, r1
 80056da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80056ee:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80056f2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	78fb      	ldrb	r3, [r7, #3]
 80056fe:	011b      	lsls	r3, r3, #4
 8005700:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005704:	68f9      	ldr	r1, [r7, #12]
 8005706:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800570a:	4313      	orrs	r3, r2
 800570c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	3714      	adds	r7, #20
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005736:	f023 0303 	bic.w	r3, r3, #3
 800573a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800574a:	f023 0302 	bic.w	r3, r3, #2
 800574e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3714      	adds	r7, #20
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr

0800575e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800575e:	b480      	push	{r7}
 8005760:	b085      	sub	sp, #20
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005778:	f023 0303 	bic.w	r3, r3, #3
 800577c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800578c:	f043 0302 	orr.w	r3, r3, #2
 8005790:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3714      	adds	r7, #20
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	695b      	ldr	r3, [r3, #20]
 80057ac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	699b      	ldr	r3, [r3, #24]
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	4013      	ands	r3, r2
 80057b6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80057b8:	68fb      	ldr	r3, [r7, #12]
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3714      	adds	r7, #20
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr

080057c6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80057c6:	b480      	push	{r7}
 80057c8:	b085      	sub	sp, #20
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057e2:	69db      	ldr	r3, [r3, #28]
 80057e4:	68ba      	ldr	r2, [r7, #8]
 80057e6:	4013      	ands	r3, r2
 80057e8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	0c1b      	lsrs	r3, r3, #16
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3714      	adds	r7, #20
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80057fa:	b480      	push	{r7}
 80057fc:	b085      	sub	sp, #20
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005816:	69db      	ldr	r3, [r3, #28]
 8005818:	68ba      	ldr	r2, [r7, #8]
 800581a:	4013      	ands	r3, r2
 800581c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	b29b      	uxth	r3, r3
}
 8005822:	4618      	mov	r0, r3
 8005824:	3714      	adds	r7, #20
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr

0800582e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800582e:	b480      	push	{r7}
 8005830:	b085      	sub	sp, #20
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
 8005836:	460b      	mov	r3, r1
 8005838:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800583e:	78fb      	ldrb	r3, [r7, #3]
 8005840:	015a      	lsls	r2, r3, #5
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	4413      	add	r3, r2
 8005846:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	68ba      	ldr	r2, [r7, #8]
 8005858:	4013      	ands	r3, r2
 800585a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800585c:	68bb      	ldr	r3, [r7, #8]
}
 800585e:	4618      	mov	r0, r3
 8005860:	3714      	adds	r7, #20
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr

0800586a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800586a:	b480      	push	{r7}
 800586c:	b087      	sub	sp, #28
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
 8005872:	460b      	mov	r3, r1
 8005874:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800588a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800588c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800588e:	78fb      	ldrb	r3, [r7, #3]
 8005890:	f003 030f 	and.w	r3, r3, #15
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	fa22 f303 	lsr.w	r3, r2, r3
 800589a:	01db      	lsls	r3, r3, #7
 800589c:	b2db      	uxtb	r3, r3
 800589e:	693a      	ldr	r2, [r7, #16]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80058a4:	78fb      	ldrb	r3, [r7, #3]
 80058a6:	015a      	lsls	r2, r3, #5
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	4413      	add	r3, r2
 80058ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	693a      	ldr	r2, [r7, #16]
 80058b4:	4013      	ands	r3, r2
 80058b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80058b8:	68bb      	ldr	r3, [r7, #8]
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	371c      	adds	r7, #28
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr

080058c6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80058c6:	b480      	push	{r7}
 80058c8:	b083      	sub	sp, #12
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	f003 0301 	and.w	r3, r3, #1
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	370c      	adds	r7, #12
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr

080058e2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80058e2:	b480      	push	{r7}
 80058e4:	b085      	sub	sp, #20
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058fc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005900:	f023 0307 	bic.w	r3, r3, #7
 8005904:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005914:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005918:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3714      	adds	r7, #20
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005928:	b480      	push	{r7}
 800592a:	b087      	sub	sp, #28
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	460b      	mov	r3, r1
 8005932:	607a      	str	r2, [r7, #4]
 8005934:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	333c      	adds	r3, #60	@ 0x3c
 800593e:	3304      	adds	r3, #4
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	4a26      	ldr	r2, [pc, #152]	@ (80059e0 <USB_EP0_OutStart+0xb8>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d90a      	bls.n	8005962 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005958:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800595c:	d101      	bne.n	8005962 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800595e:	2300      	movs	r3, #0
 8005960:	e037      	b.n	80059d2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005968:	461a      	mov	r2, r3
 800596a:	2300      	movs	r3, #0
 800596c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800597c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005980:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	697a      	ldr	r2, [r7, #20]
 800598c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005990:	f043 0318 	orr.w	r3, r3, #24
 8005994:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059a4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80059a8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80059aa:	7afb      	ldrb	r3, [r7, #11]
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d10f      	bne.n	80059d0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059b6:	461a      	mov	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	697a      	ldr	r2, [r7, #20]
 80059c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059ca:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80059ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	371c      	adds	r7, #28
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	4f54300a 	.word	0x4f54300a

080059e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b085      	sub	sp, #20
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059ec:	2300      	movs	r3, #0
 80059ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	3301      	adds	r3, #1
 80059f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	4a13      	ldr	r2, [pc, #76]	@ (8005a48 <USB_CoreReset+0x64>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d901      	bls.n	8005a02 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e01b      	b.n	8005a3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	daf2      	bge.n	80059f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	f043 0201 	orr.w	r2, r3, #1
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	4a09      	ldr	r2, [pc, #36]	@ (8005a48 <USB_CoreReset+0x64>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d901      	bls.n	8005a2c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e006      	b.n	8005a3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	f003 0301 	and.w	r3, r3, #1
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d0f0      	beq.n	8005a1a <USB_CoreReset+0x36>

  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3714      	adds	r7, #20
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	00030d40 	.word	0x00030d40

08005a4c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	460b      	mov	r3, r1
 8005a56:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005a58:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005a5c:	f002 fc66 	bl	800832c <USBD_static_malloc>
 8005a60:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d109      	bne.n	8005a7c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	32b0      	adds	r2, #176	@ 0xb0
 8005a72:	2100      	movs	r1, #0
 8005a74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005a78:	2302      	movs	r3, #2
 8005a7a:	e0d4      	b.n	8005c26 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005a7c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005a80:	2100      	movs	r1, #0
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	f002 fc96 	bl	80083b4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	32b0      	adds	r2, #176	@ 0xb0
 8005a92:	68f9      	ldr	r1, [r7, #12]
 8005a94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	32b0      	adds	r2, #176	@ 0xb0
 8005aa2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	7c1b      	ldrb	r3, [r3, #16]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d138      	bne.n	8005b26 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005ab4:	4b5e      	ldr	r3, [pc, #376]	@ (8005c30 <USBD_CDC_Init+0x1e4>)
 8005ab6:	7819      	ldrb	r1, [r3, #0]
 8005ab8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005abc:	2202      	movs	r2, #2
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f002 fb11 	bl	80080e6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005ac4:	4b5a      	ldr	r3, [pc, #360]	@ (8005c30 <USBD_CDC_Init+0x1e4>)
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	f003 020f 	and.w	r2, r3, #15
 8005acc:	6879      	ldr	r1, [r7, #4]
 8005ace:	4613      	mov	r3, r2
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	4413      	add	r3, r2
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	440b      	add	r3, r1
 8005ad8:	3324      	adds	r3, #36	@ 0x24
 8005ada:	2201      	movs	r2, #1
 8005adc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005ade:	4b55      	ldr	r3, [pc, #340]	@ (8005c34 <USBD_CDC_Init+0x1e8>)
 8005ae0:	7819      	ldrb	r1, [r3, #0]
 8005ae2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005ae6:	2202      	movs	r2, #2
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f002 fafc 	bl	80080e6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005aee:	4b51      	ldr	r3, [pc, #324]	@ (8005c34 <USBD_CDC_Init+0x1e8>)
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	f003 020f 	and.w	r2, r3, #15
 8005af6:	6879      	ldr	r1, [r7, #4]
 8005af8:	4613      	mov	r3, r2
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	4413      	add	r3, r2
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	440b      	add	r3, r1
 8005b02:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005b06:	2201      	movs	r2, #1
 8005b08:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005b0a:	4b4b      	ldr	r3, [pc, #300]	@ (8005c38 <USBD_CDC_Init+0x1ec>)
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	f003 020f 	and.w	r2, r3, #15
 8005b12:	6879      	ldr	r1, [r7, #4]
 8005b14:	4613      	mov	r3, r2
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	4413      	add	r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	440b      	add	r3, r1
 8005b1e:	3326      	adds	r3, #38	@ 0x26
 8005b20:	2210      	movs	r2, #16
 8005b22:	801a      	strh	r2, [r3, #0]
 8005b24:	e035      	b.n	8005b92 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005b26:	4b42      	ldr	r3, [pc, #264]	@ (8005c30 <USBD_CDC_Init+0x1e4>)
 8005b28:	7819      	ldrb	r1, [r3, #0]
 8005b2a:	2340      	movs	r3, #64	@ 0x40
 8005b2c:	2202      	movs	r2, #2
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f002 fad9 	bl	80080e6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005b34:	4b3e      	ldr	r3, [pc, #248]	@ (8005c30 <USBD_CDC_Init+0x1e4>)
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	f003 020f 	and.w	r2, r3, #15
 8005b3c:	6879      	ldr	r1, [r7, #4]
 8005b3e:	4613      	mov	r3, r2
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	4413      	add	r3, r2
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	440b      	add	r3, r1
 8005b48:	3324      	adds	r3, #36	@ 0x24
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005b4e:	4b39      	ldr	r3, [pc, #228]	@ (8005c34 <USBD_CDC_Init+0x1e8>)
 8005b50:	7819      	ldrb	r1, [r3, #0]
 8005b52:	2340      	movs	r3, #64	@ 0x40
 8005b54:	2202      	movs	r2, #2
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f002 fac5 	bl	80080e6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005b5c:	4b35      	ldr	r3, [pc, #212]	@ (8005c34 <USBD_CDC_Init+0x1e8>)
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	f003 020f 	and.w	r2, r3, #15
 8005b64:	6879      	ldr	r1, [r7, #4]
 8005b66:	4613      	mov	r3, r2
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	4413      	add	r3, r2
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	440b      	add	r3, r1
 8005b70:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005b74:	2201      	movs	r2, #1
 8005b76:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005b78:	4b2f      	ldr	r3, [pc, #188]	@ (8005c38 <USBD_CDC_Init+0x1ec>)
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	f003 020f 	and.w	r2, r3, #15
 8005b80:	6879      	ldr	r1, [r7, #4]
 8005b82:	4613      	mov	r3, r2
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	4413      	add	r3, r2
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	440b      	add	r3, r1
 8005b8c:	3326      	adds	r3, #38	@ 0x26
 8005b8e:	2210      	movs	r2, #16
 8005b90:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005b92:	4b29      	ldr	r3, [pc, #164]	@ (8005c38 <USBD_CDC_Init+0x1ec>)
 8005b94:	7819      	ldrb	r1, [r3, #0]
 8005b96:	2308      	movs	r3, #8
 8005b98:	2203      	movs	r2, #3
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f002 faa3 	bl	80080e6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005ba0:	4b25      	ldr	r3, [pc, #148]	@ (8005c38 <USBD_CDC_Init+0x1ec>)
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	f003 020f 	and.w	r2, r3, #15
 8005ba8:	6879      	ldr	r1, [r7, #4]
 8005baa:	4613      	mov	r3, r2
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	4413      	add	r3, r2
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	440b      	add	r3, r1
 8005bb4:	3324      	adds	r3, #36	@ 0x24
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	33b0      	adds	r3, #176	@ 0xb0
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	4413      	add	r3, r2
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d101      	bne.n	8005bf4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005bf0:	2302      	movs	r3, #2
 8005bf2:	e018      	b.n	8005c26 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	7c1b      	ldrb	r3, [r3, #16]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d10a      	bne.n	8005c12 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005bfc:	4b0d      	ldr	r3, [pc, #52]	@ (8005c34 <USBD_CDC_Init+0x1e8>)
 8005bfe:	7819      	ldrb	r1, [r3, #0]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005c06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f002 fb5a 	bl	80082c4 <USBD_LL_PrepareReceive>
 8005c10:	e008      	b.n	8005c24 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005c12:	4b08      	ldr	r3, [pc, #32]	@ (8005c34 <USBD_CDC_Init+0x1e8>)
 8005c14:	7819      	ldrb	r1, [r3, #0]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005c1c:	2340      	movs	r3, #64	@ 0x40
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f002 fb50 	bl	80082c4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3710      	adds	r7, #16
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	20000093 	.word	0x20000093
 8005c34:	20000094 	.word	0x20000094
 8005c38:	20000095 	.word	0x20000095

08005c3c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	460b      	mov	r3, r1
 8005c46:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005c48:	4b3a      	ldr	r3, [pc, #232]	@ (8005d34 <USBD_CDC_DeInit+0xf8>)
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f002 fa6f 	bl	8008132 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005c54:	4b37      	ldr	r3, [pc, #220]	@ (8005d34 <USBD_CDC_DeInit+0xf8>)
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	f003 020f 	and.w	r2, r3, #15
 8005c5c:	6879      	ldr	r1, [r7, #4]
 8005c5e:	4613      	mov	r3, r2
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	4413      	add	r3, r2
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	440b      	add	r3, r1
 8005c68:	3324      	adds	r3, #36	@ 0x24
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005c6e:	4b32      	ldr	r3, [pc, #200]	@ (8005d38 <USBD_CDC_DeInit+0xfc>)
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	4619      	mov	r1, r3
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f002 fa5c 	bl	8008132 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005c7a:	4b2f      	ldr	r3, [pc, #188]	@ (8005d38 <USBD_CDC_DeInit+0xfc>)
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	f003 020f 	and.w	r2, r3, #15
 8005c82:	6879      	ldr	r1, [r7, #4]
 8005c84:	4613      	mov	r3, r2
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	4413      	add	r3, r2
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	440b      	add	r3, r1
 8005c8e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005c92:	2200      	movs	r2, #0
 8005c94:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005c96:	4b29      	ldr	r3, [pc, #164]	@ (8005d3c <USBD_CDC_DeInit+0x100>)
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f002 fa48 	bl	8008132 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005ca2:	4b26      	ldr	r3, [pc, #152]	@ (8005d3c <USBD_CDC_DeInit+0x100>)
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	f003 020f 	and.w	r2, r3, #15
 8005caa:	6879      	ldr	r1, [r7, #4]
 8005cac:	4613      	mov	r3, r2
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	4413      	add	r3, r2
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	440b      	add	r3, r1
 8005cb6:	3324      	adds	r3, #36	@ 0x24
 8005cb8:	2200      	movs	r2, #0
 8005cba:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005cbc:	4b1f      	ldr	r3, [pc, #124]	@ (8005d3c <USBD_CDC_DeInit+0x100>)
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	f003 020f 	and.w	r2, r3, #15
 8005cc4:	6879      	ldr	r1, [r7, #4]
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	4413      	add	r3, r2
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	440b      	add	r3, r1
 8005cd0:	3326      	adds	r3, #38	@ 0x26
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	32b0      	adds	r2, #176	@ 0xb0
 8005ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d01f      	beq.n	8005d28 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	33b0      	adds	r3, #176	@ 0xb0
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	4413      	add	r3, r2
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	32b0      	adds	r2, #176	@ 0xb0
 8005d06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f002 fb1c 	bl	8008348 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	32b0      	adds	r2, #176	@ 0xb0
 8005d1a:	2100      	movs	r1, #0
 8005d1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3708      	adds	r7, #8
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	20000093 	.word	0x20000093
 8005d38:	20000094 	.word	0x20000094
 8005d3c:	20000095 	.word	0x20000095

08005d40 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b086      	sub	sp, #24
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	32b0      	adds	r2, #176	@ 0xb0
 8005d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d58:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d62:	2300      	movs	r3, #0
 8005d64:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d101      	bne.n	8005d70 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005d6c:	2303      	movs	r3, #3
 8005d6e:	e0bf      	b.n	8005ef0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d050      	beq.n	8005e1e <USBD_CDC_Setup+0xde>
 8005d7c:	2b20      	cmp	r3, #32
 8005d7e:	f040 80af 	bne.w	8005ee0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	88db      	ldrh	r3, [r3, #6]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d03a      	beq.n	8005e00 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	b25b      	sxtb	r3, r3
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	da1b      	bge.n	8005dcc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	33b0      	adds	r3, #176	@ 0xb0
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	4413      	add	r3, r2
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	683a      	ldr	r2, [r7, #0]
 8005da8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005daa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005dac:	683a      	ldr	r2, [r7, #0]
 8005dae:	88d2      	ldrh	r2, [r2, #6]
 8005db0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	88db      	ldrh	r3, [r3, #6]
 8005db6:	2b07      	cmp	r3, #7
 8005db8:	bf28      	it	cs
 8005dba:	2307      	movcs	r3, #7
 8005dbc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	89fa      	ldrh	r2, [r7, #14]
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f001 fd41 	bl	800784c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005dca:	e090      	b.n	8005eee <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	785a      	ldrb	r2, [r3, #1]
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	88db      	ldrh	r3, [r3, #6]
 8005dda:	2b3f      	cmp	r3, #63	@ 0x3f
 8005ddc:	d803      	bhi.n	8005de6 <USBD_CDC_Setup+0xa6>
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	88db      	ldrh	r3, [r3, #6]
 8005de2:	b2da      	uxtb	r2, r3
 8005de4:	e000      	b.n	8005de8 <USBD_CDC_Setup+0xa8>
 8005de6:	2240      	movs	r2, #64	@ 0x40
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005dee:	6939      	ldr	r1, [r7, #16]
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8005df6:	461a      	mov	r2, r3
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f001 fd53 	bl	80078a4 <USBD_CtlPrepareRx>
      break;
 8005dfe:	e076      	b.n	8005eee <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	33b0      	adds	r3, #176	@ 0xb0
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	4413      	add	r3, r2
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	683a      	ldr	r2, [r7, #0]
 8005e14:	7850      	ldrb	r0, [r2, #1]
 8005e16:	2200      	movs	r2, #0
 8005e18:	6839      	ldr	r1, [r7, #0]
 8005e1a:	4798      	blx	r3
      break;
 8005e1c:	e067      	b.n	8005eee <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	785b      	ldrb	r3, [r3, #1]
 8005e22:	2b0b      	cmp	r3, #11
 8005e24:	d851      	bhi.n	8005eca <USBD_CDC_Setup+0x18a>
 8005e26:	a201      	add	r2, pc, #4	@ (adr r2, 8005e2c <USBD_CDC_Setup+0xec>)
 8005e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e2c:	08005e5d 	.word	0x08005e5d
 8005e30:	08005ed9 	.word	0x08005ed9
 8005e34:	08005ecb 	.word	0x08005ecb
 8005e38:	08005ecb 	.word	0x08005ecb
 8005e3c:	08005ecb 	.word	0x08005ecb
 8005e40:	08005ecb 	.word	0x08005ecb
 8005e44:	08005ecb 	.word	0x08005ecb
 8005e48:	08005ecb 	.word	0x08005ecb
 8005e4c:	08005ecb 	.word	0x08005ecb
 8005e50:	08005ecb 	.word	0x08005ecb
 8005e54:	08005e87 	.word	0x08005e87
 8005e58:	08005eb1 	.word	0x08005eb1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	2b03      	cmp	r3, #3
 8005e66:	d107      	bne.n	8005e78 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005e68:	f107 030a 	add.w	r3, r7, #10
 8005e6c:	2202      	movs	r2, #2
 8005e6e:	4619      	mov	r1, r3
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f001 fceb 	bl	800784c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005e76:	e032      	b.n	8005ede <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005e78:	6839      	ldr	r1, [r7, #0]
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f001 fc75 	bl	800776a <USBD_CtlError>
            ret = USBD_FAIL;
 8005e80:	2303      	movs	r3, #3
 8005e82:	75fb      	strb	r3, [r7, #23]
          break;
 8005e84:	e02b      	b.n	8005ede <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	2b03      	cmp	r3, #3
 8005e90:	d107      	bne.n	8005ea2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005e92:	f107 030d 	add.w	r3, r7, #13
 8005e96:	2201      	movs	r2, #1
 8005e98:	4619      	mov	r1, r3
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f001 fcd6 	bl	800784c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005ea0:	e01d      	b.n	8005ede <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005ea2:	6839      	ldr	r1, [r7, #0]
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f001 fc60 	bl	800776a <USBD_CtlError>
            ret = USBD_FAIL;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	75fb      	strb	r3, [r7, #23]
          break;
 8005eae:	e016      	b.n	8005ede <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	2b03      	cmp	r3, #3
 8005eba:	d00f      	beq.n	8005edc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005ebc:	6839      	ldr	r1, [r7, #0]
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f001 fc53 	bl	800776a <USBD_CtlError>
            ret = USBD_FAIL;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005ec8:	e008      	b.n	8005edc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005eca:	6839      	ldr	r1, [r7, #0]
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f001 fc4c 	bl	800776a <USBD_CtlError>
          ret = USBD_FAIL;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	75fb      	strb	r3, [r7, #23]
          break;
 8005ed6:	e002      	b.n	8005ede <USBD_CDC_Setup+0x19e>
          break;
 8005ed8:	bf00      	nop
 8005eda:	e008      	b.n	8005eee <USBD_CDC_Setup+0x1ae>
          break;
 8005edc:	bf00      	nop
      }
      break;
 8005ede:	e006      	b.n	8005eee <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005ee0:	6839      	ldr	r1, [r7, #0]
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f001 fc41 	bl	800776a <USBD_CtlError>
      ret = USBD_FAIL;
 8005ee8:	2303      	movs	r3, #3
 8005eea:	75fb      	strb	r3, [r7, #23]
      break;
 8005eec:	bf00      	nop
  }

  return (uint8_t)ret;
 8005eee:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3718      	adds	r7, #24
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	460b      	mov	r3, r1
 8005f02:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8005f0a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	32b0      	adds	r2, #176	@ 0xb0
 8005f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d101      	bne.n	8005f22 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e065      	b.n	8005fee <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	32b0      	adds	r2, #176	@ 0xb0
 8005f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f30:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005f32:	78fb      	ldrb	r3, [r7, #3]
 8005f34:	f003 020f 	and.w	r2, r3, #15
 8005f38:	6879      	ldr	r1, [r7, #4]
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	4413      	add	r3, r2
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	440b      	add	r3, r1
 8005f44:	3318      	adds	r3, #24
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d02f      	beq.n	8005fac <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005f4c:	78fb      	ldrb	r3, [r7, #3]
 8005f4e:	f003 020f 	and.w	r2, r3, #15
 8005f52:	6879      	ldr	r1, [r7, #4]
 8005f54:	4613      	mov	r3, r2
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4413      	add	r3, r2
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	440b      	add	r3, r1
 8005f5e:	3318      	adds	r3, #24
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	78fb      	ldrb	r3, [r7, #3]
 8005f64:	f003 010f 	and.w	r1, r3, #15
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	460b      	mov	r3, r1
 8005f6c:	00db      	lsls	r3, r3, #3
 8005f6e:	440b      	add	r3, r1
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	4403      	add	r3, r0
 8005f74:	3348      	adds	r3, #72	@ 0x48
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	fbb2 f1f3 	udiv	r1, r2, r3
 8005f7c:	fb01 f303 	mul.w	r3, r1, r3
 8005f80:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d112      	bne.n	8005fac <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005f86:	78fb      	ldrb	r3, [r7, #3]
 8005f88:	f003 020f 	and.w	r2, r3, #15
 8005f8c:	6879      	ldr	r1, [r7, #4]
 8005f8e:	4613      	mov	r3, r2
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	4413      	add	r3, r2
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	440b      	add	r3, r1
 8005f98:	3318      	adds	r3, #24
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005f9e:	78f9      	ldrb	r1, [r7, #3]
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f002 f96c 	bl	8008282 <USBD_LL_Transmit>
 8005faa:	e01f      	b.n	8005fec <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	33b0      	adds	r3, #176	@ 0xb0
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	4413      	add	r3, r2
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d010      	beq.n	8005fec <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	33b0      	adds	r3, #176	@ 0xb0
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	4413      	add	r3, r2
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	68ba      	ldr	r2, [r7, #8]
 8005fde:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005fe2:	68ba      	ldr	r2, [r7, #8]
 8005fe4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005fe8:	78fa      	ldrb	r2, [r7, #3]
 8005fea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3710      	adds	r7, #16
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b084      	sub	sp, #16
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
 8005ffe:	460b      	mov	r3, r1
 8006000:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	32b0      	adds	r2, #176	@ 0xb0
 800600c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006010:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	32b0      	adds	r2, #176	@ 0xb0
 800601c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d101      	bne.n	8006028 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006024:	2303      	movs	r3, #3
 8006026:	e01a      	b.n	800605e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006028:	78fb      	ldrb	r3, [r7, #3]
 800602a:	4619      	mov	r1, r3
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f002 f96a 	bl	8008306 <USBD_LL_GetRxDataSize>
 8006032:	4602      	mov	r2, r0
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	33b0      	adds	r3, #176	@ 0xb0
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	4413      	add	r3, r2
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	68fa      	ldr	r2, [r7, #12]
 800604e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006058:	4611      	mov	r1, r2
 800605a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006066:	b580      	push	{r7, lr}
 8006068:	b084      	sub	sp, #16
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	32b0      	adds	r2, #176	@ 0xb0
 8006078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800607c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d101      	bne.n	8006088 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006084:	2303      	movs	r3, #3
 8006086:	e024      	b.n	80060d2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	33b0      	adds	r3, #176	@ 0xb0
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	4413      	add	r3, r2
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d019      	beq.n	80060d0 <USBD_CDC_EP0_RxReady+0x6a>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80060a2:	2bff      	cmp	r3, #255	@ 0xff
 80060a4:	d014      	beq.n	80060d0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	33b0      	adds	r3, #176	@ 0xb0
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	4413      	add	r3, r2
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	68fa      	ldr	r2, [r7, #12]
 80060ba:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80060be:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80060c6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	22ff      	movs	r2, #255	@ 0xff
 80060cc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3710      	adds	r7, #16
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
	...

080060dc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b086      	sub	sp, #24
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80060e4:	2182      	movs	r1, #130	@ 0x82
 80060e6:	4818      	ldr	r0, [pc, #96]	@ (8006148 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80060e8:	f000 fd09 	bl	8006afe <USBD_GetEpDesc>
 80060ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80060ee:	2101      	movs	r1, #1
 80060f0:	4815      	ldr	r0, [pc, #84]	@ (8006148 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80060f2:	f000 fd04 	bl	8006afe <USBD_GetEpDesc>
 80060f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80060f8:	2181      	movs	r1, #129	@ 0x81
 80060fa:	4813      	ldr	r0, [pc, #76]	@ (8006148 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80060fc:	f000 fcff 	bl	8006afe <USBD_GetEpDesc>
 8006100:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d002      	beq.n	800610e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	2210      	movs	r2, #16
 800610c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d006      	beq.n	8006122 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	2200      	movs	r2, #0
 8006118:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800611c:	711a      	strb	r2, [r3, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d006      	beq.n	8006136 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2200      	movs	r2, #0
 800612c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006130:	711a      	strb	r2, [r3, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2243      	movs	r2, #67	@ 0x43
 800613a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800613c:	4b02      	ldr	r3, [pc, #8]	@ (8006148 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800613e:	4618      	mov	r0, r3
 8006140:	3718      	adds	r7, #24
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	20000050 	.word	0x20000050

0800614c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b086      	sub	sp, #24
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006154:	2182      	movs	r1, #130	@ 0x82
 8006156:	4818      	ldr	r0, [pc, #96]	@ (80061b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006158:	f000 fcd1 	bl	8006afe <USBD_GetEpDesc>
 800615c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800615e:	2101      	movs	r1, #1
 8006160:	4815      	ldr	r0, [pc, #84]	@ (80061b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006162:	f000 fccc 	bl	8006afe <USBD_GetEpDesc>
 8006166:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006168:	2181      	movs	r1, #129	@ 0x81
 800616a:	4813      	ldr	r0, [pc, #76]	@ (80061b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800616c:	f000 fcc7 	bl	8006afe <USBD_GetEpDesc>
 8006170:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d002      	beq.n	800617e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	2210      	movs	r2, #16
 800617c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d006      	beq.n	8006192 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	2200      	movs	r2, #0
 8006188:	711a      	strb	r2, [r3, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	f042 0202 	orr.w	r2, r2, #2
 8006190:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d006      	beq.n	80061a6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	711a      	strb	r2, [r3, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	f042 0202 	orr.w	r2, r2, #2
 80061a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2243      	movs	r2, #67	@ 0x43
 80061aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80061ac:	4b02      	ldr	r3, [pc, #8]	@ (80061b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3718      	adds	r7, #24
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	20000050 	.word	0x20000050

080061bc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b086      	sub	sp, #24
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80061c4:	2182      	movs	r1, #130	@ 0x82
 80061c6:	4818      	ldr	r0, [pc, #96]	@ (8006228 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80061c8:	f000 fc99 	bl	8006afe <USBD_GetEpDesc>
 80061cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80061ce:	2101      	movs	r1, #1
 80061d0:	4815      	ldr	r0, [pc, #84]	@ (8006228 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80061d2:	f000 fc94 	bl	8006afe <USBD_GetEpDesc>
 80061d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80061d8:	2181      	movs	r1, #129	@ 0x81
 80061da:	4813      	ldr	r0, [pc, #76]	@ (8006228 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80061dc:	f000 fc8f 	bl	8006afe <USBD_GetEpDesc>
 80061e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d002      	beq.n	80061ee <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	2210      	movs	r2, #16
 80061ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d006      	beq.n	8006202 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80061fc:	711a      	strb	r2, [r3, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d006      	beq.n	8006216 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2200      	movs	r2, #0
 800620c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006210:	711a      	strb	r2, [r3, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2243      	movs	r2, #67	@ 0x43
 800621a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800621c:	4b02      	ldr	r3, [pc, #8]	@ (8006228 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800621e:	4618      	mov	r0, r3
 8006220:	3718      	adds	r7, #24
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	20000050 	.word	0x20000050

0800622c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	220a      	movs	r2, #10
 8006238:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800623a:	4b03      	ldr	r3, [pc, #12]	@ (8006248 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800623c:	4618      	mov	r0, r3
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr
 8006248:	2000000c 	.word	0x2000000c

0800624c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d101      	bne.n	8006260 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800625c:	2303      	movs	r3, #3
 800625e:	e009      	b.n	8006274 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	33b0      	adds	r3, #176	@ 0xb0
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	4413      	add	r3, r2
 800626e:	683a      	ldr	r2, [r7, #0]
 8006270:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006280:	b480      	push	{r7}
 8006282:	b087      	sub	sp, #28
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	32b0      	adds	r2, #176	@ 0xb0
 8006296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800629a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d101      	bne.n	80062a6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80062a2:	2303      	movs	r3, #3
 80062a4:	e008      	b.n	80062b8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	68ba      	ldr	r2, [r7, #8]
 80062aa:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	371c      	adds	r7, #28
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	32b0      	adds	r2, #176	@ 0xb0
 80062d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062dc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d101      	bne.n	80062e8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80062e4:	2303      	movs	r3, #3
 80062e6:	e004      	b.n	80062f2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	683a      	ldr	r2, [r7, #0]
 80062ec:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3714      	adds	r7, #20
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr
	...

08006300 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	32b0      	adds	r2, #176	@ 0xb0
 8006312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006316:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	32b0      	adds	r2, #176	@ 0xb0
 8006322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d101      	bne.n	800632e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800632a:	2303      	movs	r3, #3
 800632c:	e018      	b.n	8006360 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	7c1b      	ldrb	r3, [r3, #16]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d10a      	bne.n	800634c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006336:	4b0c      	ldr	r3, [pc, #48]	@ (8006368 <USBD_CDC_ReceivePacket+0x68>)
 8006338:	7819      	ldrb	r1, [r3, #0]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006340:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f001 ffbd 	bl	80082c4 <USBD_LL_PrepareReceive>
 800634a:	e008      	b.n	800635e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800634c:	4b06      	ldr	r3, [pc, #24]	@ (8006368 <USBD_CDC_ReceivePacket+0x68>)
 800634e:	7819      	ldrb	r1, [r3, #0]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006356:	2340      	movs	r3, #64	@ 0x40
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f001 ffb3 	bl	80082c4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800635e:	2300      	movs	r3, #0
}
 8006360:	4618      	mov	r0, r3
 8006362:	3710      	adds	r7, #16
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}
 8006368:	20000094 	.word	0x20000094

0800636c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b086      	sub	sp, #24
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	4613      	mov	r3, r2
 8006378:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d101      	bne.n	8006384 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006380:	2303      	movs	r3, #3
 8006382:	e01f      	b.n	80063c4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2200      	movs	r2, #0
 8006388:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2200      	movs	r2, #0
 8006390:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2200      	movs	r2, #0
 8006398:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d003      	beq.n	80063aa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	68ba      	ldr	r2, [r7, #8]
 80063a6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	79fa      	ldrb	r2, [r7, #7]
 80063b6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80063b8:	68f8      	ldr	r0, [r7, #12]
 80063ba:	f001 fe2d 	bl	8008018 <USBD_LL_Init>
 80063be:	4603      	mov	r3, r0
 80063c0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80063c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3718      	adds	r7, #24
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80063d6:	2300      	movs	r3, #0
 80063d8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d101      	bne.n	80063e4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80063e0:	2303      	movs	r3, #3
 80063e2:	e025      	b.n	8006430 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	683a      	ldr	r2, [r7, #0]
 80063e8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	32ae      	adds	r2, #174	@ 0xae
 80063f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00f      	beq.n	8006420 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	32ae      	adds	r2, #174	@ 0xae
 800640a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800640e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006410:	f107 020e 	add.w	r2, r7, #14
 8006414:	4610      	mov	r0, r2
 8006416:	4798      	blx	r3
 8006418:	4602      	mov	r2, r0
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006426:	1c5a      	adds	r2, r3, #1
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3710      	adds	r7, #16
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f001 fe35 	bl	80080b0 <USBD_LL_Start>
 8006446:	4603      	mov	r3, r0
}
 8006448:	4618      	mov	r0, r3
 800644a:	3708      	adds	r7, #8
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006458:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800645a:	4618      	mov	r0, r3
 800645c:	370c      	adds	r7, #12
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr

08006466 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006466:	b580      	push	{r7, lr}
 8006468:	b084      	sub	sp, #16
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
 800646e:	460b      	mov	r3, r1
 8006470:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006472:	2300      	movs	r3, #0
 8006474:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800647c:	2b00      	cmp	r3, #0
 800647e:	d009      	beq.n	8006494 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	78fa      	ldrb	r2, [r7, #3]
 800648a:	4611      	mov	r1, r2
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	4798      	blx	r3
 8006490:	4603      	mov	r3, r0
 8006492:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006494:	7bfb      	ldrb	r3, [r7, #15]
}
 8006496:	4618      	mov	r0, r3
 8006498:	3710      	adds	r7, #16
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}

0800649e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800649e:	b580      	push	{r7, lr}
 80064a0:	b084      	sub	sp, #16
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
 80064a6:	460b      	mov	r3, r1
 80064a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80064aa:	2300      	movs	r3, #0
 80064ac:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	78fa      	ldrb	r2, [r7, #3]
 80064b8:	4611      	mov	r1, r2
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	4798      	blx	r3
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d001      	beq.n	80064c8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80064c4:	2303      	movs	r3, #3
 80064c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80064c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b084      	sub	sp, #16
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
 80064da:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80064e2:	6839      	ldr	r1, [r7, #0]
 80064e4:	4618      	mov	r0, r3
 80064e6:	f001 f906 	bl	80076f6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2201      	movs	r2, #1
 80064ee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80064f8:	461a      	mov	r2, r3
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006506:	f003 031f 	and.w	r3, r3, #31
 800650a:	2b02      	cmp	r3, #2
 800650c:	d01a      	beq.n	8006544 <USBD_LL_SetupStage+0x72>
 800650e:	2b02      	cmp	r3, #2
 8006510:	d822      	bhi.n	8006558 <USBD_LL_SetupStage+0x86>
 8006512:	2b00      	cmp	r3, #0
 8006514:	d002      	beq.n	800651c <USBD_LL_SetupStage+0x4a>
 8006516:	2b01      	cmp	r3, #1
 8006518:	d00a      	beq.n	8006530 <USBD_LL_SetupStage+0x5e>
 800651a:	e01d      	b.n	8006558 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006522:	4619      	mov	r1, r3
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 fb5d 	bl	8006be4 <USBD_StdDevReq>
 800652a:	4603      	mov	r3, r0
 800652c:	73fb      	strb	r3, [r7, #15]
      break;
 800652e:	e020      	b.n	8006572 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006536:	4619      	mov	r1, r3
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 fbc5 	bl	8006cc8 <USBD_StdItfReq>
 800653e:	4603      	mov	r3, r0
 8006540:	73fb      	strb	r3, [r7, #15]
      break;
 8006542:	e016      	b.n	8006572 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800654a:	4619      	mov	r1, r3
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 fc27 	bl	8006da0 <USBD_StdEPReq>
 8006552:	4603      	mov	r3, r0
 8006554:	73fb      	strb	r3, [r7, #15]
      break;
 8006556:	e00c      	b.n	8006572 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800655e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006562:	b2db      	uxtb	r3, r3
 8006564:	4619      	mov	r1, r3
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f001 fe02 	bl	8008170 <USBD_LL_StallEP>
 800656c:	4603      	mov	r3, r0
 800656e:	73fb      	strb	r3, [r7, #15]
      break;
 8006570:	bf00      	nop
  }

  return ret;
 8006572:	7bfb      	ldrb	r3, [r7, #15]
}
 8006574:	4618      	mov	r0, r3
 8006576:	3710      	adds	r7, #16
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b086      	sub	sp, #24
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	460b      	mov	r3, r1
 8006586:	607a      	str	r2, [r7, #4]
 8006588:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800658a:	2300      	movs	r3, #0
 800658c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800658e:	7afb      	ldrb	r3, [r7, #11]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d16e      	bne.n	8006672 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800659a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80065a2:	2b03      	cmp	r3, #3
 80065a4:	f040 8098 	bne.w	80066d8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	689a      	ldr	r2, [r3, #8]
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d913      	bls.n	80065dc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	689a      	ldr	r2, [r3, #8]
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	1ad2      	subs	r2, r2, r3
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	68da      	ldr	r2, [r3, #12]
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	4293      	cmp	r3, r2
 80065cc:	bf28      	it	cs
 80065ce:	4613      	movcs	r3, r2
 80065d0:	461a      	mov	r2, r3
 80065d2:	6879      	ldr	r1, [r7, #4]
 80065d4:	68f8      	ldr	r0, [r7, #12]
 80065d6:	f001 f982 	bl	80078de <USBD_CtlContinueRx>
 80065da:	e07d      	b.n	80066d8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80065e2:	f003 031f 	and.w	r3, r3, #31
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	d014      	beq.n	8006614 <USBD_LL_DataOutStage+0x98>
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d81d      	bhi.n	800662a <USBD_LL_DataOutStage+0xae>
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d002      	beq.n	80065f8 <USBD_LL_DataOutStage+0x7c>
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d003      	beq.n	80065fe <USBD_LL_DataOutStage+0x82>
 80065f6:	e018      	b.n	800662a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80065f8:	2300      	movs	r3, #0
 80065fa:	75bb      	strb	r3, [r7, #22]
            break;
 80065fc:	e018      	b.n	8006630 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006604:	b2db      	uxtb	r3, r3
 8006606:	4619      	mov	r1, r3
 8006608:	68f8      	ldr	r0, [r7, #12]
 800660a:	f000 fa5e 	bl	8006aca <USBD_CoreFindIF>
 800660e:	4603      	mov	r3, r0
 8006610:	75bb      	strb	r3, [r7, #22]
            break;
 8006612:	e00d      	b.n	8006630 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800661a:	b2db      	uxtb	r3, r3
 800661c:	4619      	mov	r1, r3
 800661e:	68f8      	ldr	r0, [r7, #12]
 8006620:	f000 fa60 	bl	8006ae4 <USBD_CoreFindEP>
 8006624:	4603      	mov	r3, r0
 8006626:	75bb      	strb	r3, [r7, #22]
            break;
 8006628:	e002      	b.n	8006630 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800662a:	2300      	movs	r3, #0
 800662c:	75bb      	strb	r3, [r7, #22]
            break;
 800662e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006630:	7dbb      	ldrb	r3, [r7, #22]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d119      	bne.n	800666a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800663c:	b2db      	uxtb	r3, r3
 800663e:	2b03      	cmp	r3, #3
 8006640:	d113      	bne.n	800666a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006642:	7dba      	ldrb	r2, [r7, #22]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	32ae      	adds	r2, #174	@ 0xae
 8006648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d00b      	beq.n	800666a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006652:	7dba      	ldrb	r2, [r7, #22]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800665a:	7dba      	ldrb	r2, [r7, #22]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	32ae      	adds	r2, #174	@ 0xae
 8006660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800666a:	68f8      	ldr	r0, [r7, #12]
 800666c:	f001 f948 	bl	8007900 <USBD_CtlSendStatus>
 8006670:	e032      	b.n	80066d8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006672:	7afb      	ldrb	r3, [r7, #11]
 8006674:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006678:	b2db      	uxtb	r3, r3
 800667a:	4619      	mov	r1, r3
 800667c:	68f8      	ldr	r0, [r7, #12]
 800667e:	f000 fa31 	bl	8006ae4 <USBD_CoreFindEP>
 8006682:	4603      	mov	r3, r0
 8006684:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006686:	7dbb      	ldrb	r3, [r7, #22]
 8006688:	2bff      	cmp	r3, #255	@ 0xff
 800668a:	d025      	beq.n	80066d8 <USBD_LL_DataOutStage+0x15c>
 800668c:	7dbb      	ldrb	r3, [r7, #22]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d122      	bne.n	80066d8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006698:	b2db      	uxtb	r3, r3
 800669a:	2b03      	cmp	r3, #3
 800669c:	d117      	bne.n	80066ce <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800669e:	7dba      	ldrb	r2, [r7, #22]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	32ae      	adds	r2, #174	@ 0xae
 80066a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066a8:	699b      	ldr	r3, [r3, #24]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00f      	beq.n	80066ce <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80066ae:	7dba      	ldrb	r2, [r7, #22]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80066b6:	7dba      	ldrb	r2, [r7, #22]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	32ae      	adds	r2, #174	@ 0xae
 80066bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066c0:	699b      	ldr	r3, [r3, #24]
 80066c2:	7afa      	ldrb	r2, [r7, #11]
 80066c4:	4611      	mov	r1, r2
 80066c6:	68f8      	ldr	r0, [r7, #12]
 80066c8:	4798      	blx	r3
 80066ca:	4603      	mov	r3, r0
 80066cc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80066ce:	7dfb      	ldrb	r3, [r7, #23]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d001      	beq.n	80066d8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80066d4:	7dfb      	ldrb	r3, [r7, #23]
 80066d6:	e000      	b.n	80066da <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3718      	adds	r7, #24
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}

080066e2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80066e2:	b580      	push	{r7, lr}
 80066e4:	b086      	sub	sp, #24
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	60f8      	str	r0, [r7, #12]
 80066ea:	460b      	mov	r3, r1
 80066ec:	607a      	str	r2, [r7, #4]
 80066ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80066f0:	7afb      	ldrb	r3, [r7, #11]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d16f      	bne.n	80067d6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	3314      	adds	r3, #20
 80066fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006702:	2b02      	cmp	r3, #2
 8006704:	d15a      	bne.n	80067bc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	689a      	ldr	r2, [r3, #8]
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	429a      	cmp	r2, r3
 8006710:	d914      	bls.n	800673c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	689a      	ldr	r2, [r3, #8]
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	1ad2      	subs	r2, r2, r3
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	461a      	mov	r2, r3
 8006726:	6879      	ldr	r1, [r7, #4]
 8006728:	68f8      	ldr	r0, [r7, #12]
 800672a:	f001 f8aa 	bl	8007882 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800672e:	2300      	movs	r3, #0
 8006730:	2200      	movs	r2, #0
 8006732:	2100      	movs	r1, #0
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f001 fdc5 	bl	80082c4 <USBD_LL_PrepareReceive>
 800673a:	e03f      	b.n	80067bc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	68da      	ldr	r2, [r3, #12]
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	429a      	cmp	r2, r3
 8006746:	d11c      	bne.n	8006782 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	685a      	ldr	r2, [r3, #4]
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006750:	429a      	cmp	r2, r3
 8006752:	d316      	bcc.n	8006782 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	685a      	ldr	r2, [r3, #4]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800675e:	429a      	cmp	r2, r3
 8006760:	d20f      	bcs.n	8006782 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006762:	2200      	movs	r2, #0
 8006764:	2100      	movs	r1, #0
 8006766:	68f8      	ldr	r0, [r7, #12]
 8006768:	f001 f88b 	bl	8007882 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006774:	2300      	movs	r3, #0
 8006776:	2200      	movs	r2, #0
 8006778:	2100      	movs	r1, #0
 800677a:	68f8      	ldr	r0, [r7, #12]
 800677c:	f001 fda2 	bl	80082c4 <USBD_LL_PrepareReceive>
 8006780:	e01c      	b.n	80067bc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006788:	b2db      	uxtb	r3, r3
 800678a:	2b03      	cmp	r3, #3
 800678c:	d10f      	bne.n	80067ae <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d009      	beq.n	80067ae <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	68f8      	ldr	r0, [r7, #12]
 80067ac:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80067ae:	2180      	movs	r1, #128	@ 0x80
 80067b0:	68f8      	ldr	r0, [r7, #12]
 80067b2:	f001 fcdd 	bl	8008170 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	f001 f8b5 	bl	8007926 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d03a      	beq.n	800683c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	f7ff fe42 	bl	8006450 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80067d4:	e032      	b.n	800683c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80067d6:	7afb      	ldrb	r3, [r7, #11]
 80067d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	4619      	mov	r1, r3
 80067e0:	68f8      	ldr	r0, [r7, #12]
 80067e2:	f000 f97f 	bl	8006ae4 <USBD_CoreFindEP>
 80067e6:	4603      	mov	r3, r0
 80067e8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80067ea:	7dfb      	ldrb	r3, [r7, #23]
 80067ec:	2bff      	cmp	r3, #255	@ 0xff
 80067ee:	d025      	beq.n	800683c <USBD_LL_DataInStage+0x15a>
 80067f0:	7dfb      	ldrb	r3, [r7, #23]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d122      	bne.n	800683c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	2b03      	cmp	r3, #3
 8006800:	d11c      	bne.n	800683c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006802:	7dfa      	ldrb	r2, [r7, #23]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	32ae      	adds	r2, #174	@ 0xae
 8006808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800680c:	695b      	ldr	r3, [r3, #20]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d014      	beq.n	800683c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006812:	7dfa      	ldrb	r2, [r7, #23]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800681a:	7dfa      	ldrb	r2, [r7, #23]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	32ae      	adds	r2, #174	@ 0xae
 8006820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006824:	695b      	ldr	r3, [r3, #20]
 8006826:	7afa      	ldrb	r2, [r7, #11]
 8006828:	4611      	mov	r1, r2
 800682a:	68f8      	ldr	r0, [r7, #12]
 800682c:	4798      	blx	r3
 800682e:	4603      	mov	r3, r0
 8006830:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006832:	7dbb      	ldrb	r3, [r7, #22]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d001      	beq.n	800683c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006838:	7dbb      	ldrb	r3, [r7, #22]
 800683a:	e000      	b.n	800683e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3718      	adds	r7, #24
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}

08006846 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006846:	b580      	push	{r7, lr}
 8006848:	b084      	sub	sp, #16
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800684e:	2300      	movs	r3, #0
 8006850:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2201      	movs	r2, #1
 8006856:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800687e:	2b00      	cmp	r3, #0
 8006880:	d014      	beq.n	80068ac <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00e      	beq.n	80068ac <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	6852      	ldr	r2, [r2, #4]
 800689a:	b2d2      	uxtb	r2, r2
 800689c:	4611      	mov	r1, r2
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	4798      	blx	r3
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d001      	beq.n	80068ac <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80068a8:	2303      	movs	r3, #3
 80068aa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80068ac:	2340      	movs	r3, #64	@ 0x40
 80068ae:	2200      	movs	r2, #0
 80068b0:	2100      	movs	r1, #0
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f001 fc17 	bl	80080e6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2240      	movs	r2, #64	@ 0x40
 80068c4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80068c8:	2340      	movs	r3, #64	@ 0x40
 80068ca:	2200      	movs	r2, #0
 80068cc:	2180      	movs	r1, #128	@ 0x80
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f001 fc09 	bl	80080e6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2240      	movs	r2, #64	@ 0x40
 80068de:	621a      	str	r2, [r3, #32]

  return ret;
 80068e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80068ea:	b480      	push	{r7}
 80068ec:	b083      	sub	sp, #12
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
 80068f2:	460b      	mov	r3, r1
 80068f4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	78fa      	ldrb	r2, [r7, #3]
 80068fa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	370c      	adds	r7, #12
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr

0800690a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800690a:	b480      	push	{r7}
 800690c:	b083      	sub	sp, #12
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006918:	b2da      	uxtb	r2, r3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2204      	movs	r2, #4
 8006924:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	370c      	adds	r7, #12
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr

08006936 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006936:	b480      	push	{r7}
 8006938:	b083      	sub	sp, #12
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006944:	b2db      	uxtb	r3, r3
 8006946:	2b04      	cmp	r3, #4
 8006948:	d106      	bne.n	8006958 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006950:	b2da      	uxtb	r2, r3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	370c      	adds	r7, #12
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr

08006966 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b082      	sub	sp, #8
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006974:	b2db      	uxtb	r3, r3
 8006976:	2b03      	cmp	r3, #3
 8006978:	d110      	bne.n	800699c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00b      	beq.n	800699c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800698a:	69db      	ldr	r3, [r3, #28]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d005      	beq.n	800699c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006996:	69db      	ldr	r3, [r3, #28]
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3708      	adds	r7, #8
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}

080069a6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80069a6:	b580      	push	{r7, lr}
 80069a8:	b082      	sub	sp, #8
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
 80069ae:	460b      	mov	r3, r1
 80069b0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	32ae      	adds	r2, #174	@ 0xae
 80069bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d101      	bne.n	80069c8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80069c4:	2303      	movs	r3, #3
 80069c6:	e01c      	b.n	8006a02 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	2b03      	cmp	r3, #3
 80069d2:	d115      	bne.n	8006a00 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	32ae      	adds	r2, #174	@ 0xae
 80069de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069e2:	6a1b      	ldr	r3, [r3, #32]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d00b      	beq.n	8006a00 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	32ae      	adds	r2, #174	@ 0xae
 80069f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069f6:	6a1b      	ldr	r3, [r3, #32]
 80069f8:	78fa      	ldrb	r2, [r7, #3]
 80069fa:	4611      	mov	r1, r2
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006a00:	2300      	movs	r3, #0
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3708      	adds	r7, #8
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}

08006a0a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b082      	sub	sp, #8
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
 8006a12:	460b      	mov	r3, r1
 8006a14:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	32ae      	adds	r2, #174	@ 0xae
 8006a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d101      	bne.n	8006a2c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	e01c      	b.n	8006a66 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	2b03      	cmp	r3, #3
 8006a36:	d115      	bne.n	8006a64 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	32ae      	adds	r2, #174	@ 0xae
 8006a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d00b      	beq.n	8006a64 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	32ae      	adds	r2, #174	@ 0xae
 8006a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a5c:	78fa      	ldrb	r2, [r7, #3]
 8006a5e:	4611      	mov	r1, r2
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006a64:	2300      	movs	r3, #0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3708      	adds	r7, #8
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}

08006a6e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006a6e:	b480      	push	{r7}
 8006a70:	b083      	sub	sp, #12
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00e      	beq.n	8006ac0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	6852      	ldr	r2, [r2, #4]
 8006aae:	b2d2      	uxtb	r2, r2
 8006ab0:	4611      	mov	r1, r2
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	4798      	blx	r3
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d001      	beq.n	8006ac0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006abc:	2303      	movs	r3, #3
 8006abe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3710      	adds	r7, #16
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006aca:	b480      	push	{r7}
 8006acc:	b083      	sub	sp, #12
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
 8006ad2:	460b      	mov	r3, r1
 8006ad4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006ad6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	370c      	adds	r7, #12
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	460b      	mov	r3, r1
 8006aee:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006af0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	370c      	adds	r7, #12
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr

08006afe <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006afe:	b580      	push	{r7, lr}
 8006b00:	b086      	sub	sp, #24
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
 8006b06:	460b      	mov	r3, r1
 8006b08:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006b12:	2300      	movs	r3, #0
 8006b14:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	885b      	ldrh	r3, [r3, #2]
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	7812      	ldrb	r2, [r2, #0]
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d91f      	bls.n	8006b64 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006b2a:	e013      	b.n	8006b54 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006b2c:	f107 030a 	add.w	r3, r7, #10
 8006b30:	4619      	mov	r1, r3
 8006b32:	6978      	ldr	r0, [r7, #20]
 8006b34:	f000 f81b 	bl	8006b6e <USBD_GetNextDesc>
 8006b38:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	785b      	ldrb	r3, [r3, #1]
 8006b3e:	2b05      	cmp	r3, #5
 8006b40:	d108      	bne.n	8006b54 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	789b      	ldrb	r3, [r3, #2]
 8006b4a:	78fa      	ldrb	r2, [r7, #3]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d008      	beq.n	8006b62 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006b50:	2300      	movs	r3, #0
 8006b52:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	885b      	ldrh	r3, [r3, #2]
 8006b58:	b29a      	uxth	r2, r3
 8006b5a:	897b      	ldrh	r3, [r7, #10]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d8e5      	bhi.n	8006b2c <USBD_GetEpDesc+0x2e>
 8006b60:	e000      	b.n	8006b64 <USBD_GetEpDesc+0x66>
          break;
 8006b62:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006b64:	693b      	ldr	r3, [r7, #16]
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3718      	adds	r7, #24
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}

08006b6e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006b6e:	b480      	push	{r7}
 8006b70:	b085      	sub	sp, #20
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
 8006b76:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	881b      	ldrh	r3, [r3, #0]
 8006b80:	68fa      	ldr	r2, [r7, #12]
 8006b82:	7812      	ldrb	r2, [r2, #0]
 8006b84:	4413      	add	r3, r2
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	461a      	mov	r2, r3
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4413      	add	r3, r2
 8006b96:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006b98:	68fb      	ldr	r3, [r7, #12]
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3714      	adds	r7, #20
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr

08006ba6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006ba6:	b480      	push	{r7}
 8006ba8:	b087      	sub	sp, #28
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	3301      	adds	r3, #1
 8006bbc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006bc4:	8a3b      	ldrh	r3, [r7, #16]
 8006bc6:	021b      	lsls	r3, r3, #8
 8006bc8:	b21a      	sxth	r2, r3
 8006bca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	b21b      	sxth	r3, r3
 8006bd2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006bd4:	89fb      	ldrh	r3, [r7, #14]
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	371c      	adds	r7, #28
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
	...

08006be4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006bfa:	2b40      	cmp	r3, #64	@ 0x40
 8006bfc:	d005      	beq.n	8006c0a <USBD_StdDevReq+0x26>
 8006bfe:	2b40      	cmp	r3, #64	@ 0x40
 8006c00:	d857      	bhi.n	8006cb2 <USBD_StdDevReq+0xce>
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d00f      	beq.n	8006c26 <USBD_StdDevReq+0x42>
 8006c06:	2b20      	cmp	r3, #32
 8006c08:	d153      	bne.n	8006cb2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	32ae      	adds	r2, #174	@ 0xae
 8006c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	6839      	ldr	r1, [r7, #0]
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	4798      	blx	r3
 8006c20:	4603      	mov	r3, r0
 8006c22:	73fb      	strb	r3, [r7, #15]
      break;
 8006c24:	e04a      	b.n	8006cbc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	785b      	ldrb	r3, [r3, #1]
 8006c2a:	2b09      	cmp	r3, #9
 8006c2c:	d83b      	bhi.n	8006ca6 <USBD_StdDevReq+0xc2>
 8006c2e:	a201      	add	r2, pc, #4	@ (adr r2, 8006c34 <USBD_StdDevReq+0x50>)
 8006c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c34:	08006c89 	.word	0x08006c89
 8006c38:	08006c9d 	.word	0x08006c9d
 8006c3c:	08006ca7 	.word	0x08006ca7
 8006c40:	08006c93 	.word	0x08006c93
 8006c44:	08006ca7 	.word	0x08006ca7
 8006c48:	08006c67 	.word	0x08006c67
 8006c4c:	08006c5d 	.word	0x08006c5d
 8006c50:	08006ca7 	.word	0x08006ca7
 8006c54:	08006c7f 	.word	0x08006c7f
 8006c58:	08006c71 	.word	0x08006c71
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006c5c:	6839      	ldr	r1, [r7, #0]
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 fa3c 	bl	80070dc <USBD_GetDescriptor>
          break;
 8006c64:	e024      	b.n	8006cb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006c66:	6839      	ldr	r1, [r7, #0]
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 fba1 	bl	80073b0 <USBD_SetAddress>
          break;
 8006c6e:	e01f      	b.n	8006cb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006c70:	6839      	ldr	r1, [r7, #0]
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 fbe0 	bl	8007438 <USBD_SetConfig>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	73fb      	strb	r3, [r7, #15]
          break;
 8006c7c:	e018      	b.n	8006cb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006c7e:	6839      	ldr	r1, [r7, #0]
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 fc83 	bl	800758c <USBD_GetConfig>
          break;
 8006c86:	e013      	b.n	8006cb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006c88:	6839      	ldr	r1, [r7, #0]
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 fcb4 	bl	80075f8 <USBD_GetStatus>
          break;
 8006c90:	e00e      	b.n	8006cb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006c92:	6839      	ldr	r1, [r7, #0]
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 fce3 	bl	8007660 <USBD_SetFeature>
          break;
 8006c9a:	e009      	b.n	8006cb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006c9c:	6839      	ldr	r1, [r7, #0]
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 fd07 	bl	80076b2 <USBD_ClrFeature>
          break;
 8006ca4:	e004      	b.n	8006cb0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006ca6:	6839      	ldr	r1, [r7, #0]
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 fd5e 	bl	800776a <USBD_CtlError>
          break;
 8006cae:	bf00      	nop
      }
      break;
 8006cb0:	e004      	b.n	8006cbc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006cb2:	6839      	ldr	r1, [r7, #0]
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 fd58 	bl	800776a <USBD_CtlError>
      break;
 8006cba:	bf00      	nop
  }

  return ret;
 8006cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3710      	adds	r7, #16
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop

08006cc8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006cde:	2b40      	cmp	r3, #64	@ 0x40
 8006ce0:	d005      	beq.n	8006cee <USBD_StdItfReq+0x26>
 8006ce2:	2b40      	cmp	r3, #64	@ 0x40
 8006ce4:	d852      	bhi.n	8006d8c <USBD_StdItfReq+0xc4>
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d001      	beq.n	8006cee <USBD_StdItfReq+0x26>
 8006cea:	2b20      	cmp	r3, #32
 8006cec:	d14e      	bne.n	8006d8c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	3b01      	subs	r3, #1
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	d840      	bhi.n	8006d7e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	889b      	ldrh	r3, [r3, #4]
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d836      	bhi.n	8006d74 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	889b      	ldrh	r3, [r3, #4]
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f7ff fedb 	bl	8006aca <USBD_CoreFindIF>
 8006d14:	4603      	mov	r3, r0
 8006d16:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d18:	7bbb      	ldrb	r3, [r7, #14]
 8006d1a:	2bff      	cmp	r3, #255	@ 0xff
 8006d1c:	d01d      	beq.n	8006d5a <USBD_StdItfReq+0x92>
 8006d1e:	7bbb      	ldrb	r3, [r7, #14]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d11a      	bne.n	8006d5a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006d24:	7bba      	ldrb	r2, [r7, #14]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	32ae      	adds	r2, #174	@ 0xae
 8006d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d00f      	beq.n	8006d54 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006d34:	7bba      	ldrb	r2, [r7, #14]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006d3c:	7bba      	ldrb	r2, [r7, #14]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	32ae      	adds	r2, #174	@ 0xae
 8006d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	6839      	ldr	r1, [r7, #0]
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	4798      	blx	r3
 8006d4e:	4603      	mov	r3, r0
 8006d50:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006d52:	e004      	b.n	8006d5e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006d54:	2303      	movs	r3, #3
 8006d56:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006d58:	e001      	b.n	8006d5e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006d5a:	2303      	movs	r3, #3
 8006d5c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	88db      	ldrh	r3, [r3, #6]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d110      	bne.n	8006d88 <USBD_StdItfReq+0xc0>
 8006d66:	7bfb      	ldrb	r3, [r7, #15]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d10d      	bne.n	8006d88 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 fdc7 	bl	8007900 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006d72:	e009      	b.n	8006d88 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006d74:	6839      	ldr	r1, [r7, #0]
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 fcf7 	bl	800776a <USBD_CtlError>
          break;
 8006d7c:	e004      	b.n	8006d88 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006d7e:	6839      	ldr	r1, [r7, #0]
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 fcf2 	bl	800776a <USBD_CtlError>
          break;
 8006d86:	e000      	b.n	8006d8a <USBD_StdItfReq+0xc2>
          break;
 8006d88:	bf00      	nop
      }
      break;
 8006d8a:	e004      	b.n	8006d96 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006d8c:	6839      	ldr	r1, [r7, #0]
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 fceb 	bl	800776a <USBD_CtlError>
      break;
 8006d94:	bf00      	nop
  }

  return ret;
 8006d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3710      	adds	r7, #16
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006daa:	2300      	movs	r3, #0
 8006dac:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	889b      	ldrh	r3, [r3, #4]
 8006db2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006dbc:	2b40      	cmp	r3, #64	@ 0x40
 8006dbe:	d007      	beq.n	8006dd0 <USBD_StdEPReq+0x30>
 8006dc0:	2b40      	cmp	r3, #64	@ 0x40
 8006dc2:	f200 817f 	bhi.w	80070c4 <USBD_StdEPReq+0x324>
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d02a      	beq.n	8006e20 <USBD_StdEPReq+0x80>
 8006dca:	2b20      	cmp	r3, #32
 8006dcc:	f040 817a 	bne.w	80070c4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006dd0:	7bbb      	ldrb	r3, [r7, #14]
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f7ff fe85 	bl	8006ae4 <USBD_CoreFindEP>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006dde:	7b7b      	ldrb	r3, [r7, #13]
 8006de0:	2bff      	cmp	r3, #255	@ 0xff
 8006de2:	f000 8174 	beq.w	80070ce <USBD_StdEPReq+0x32e>
 8006de6:	7b7b      	ldrb	r3, [r7, #13]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f040 8170 	bne.w	80070ce <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006dee:	7b7a      	ldrb	r2, [r7, #13]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006df6:	7b7a      	ldrb	r2, [r7, #13]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	32ae      	adds	r2, #174	@ 0xae
 8006dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	f000 8163 	beq.w	80070ce <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006e08:	7b7a      	ldrb	r2, [r7, #13]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	32ae      	adds	r2, #174	@ 0xae
 8006e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	6839      	ldr	r1, [r7, #0]
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	4798      	blx	r3
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006e1e:	e156      	b.n	80070ce <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	785b      	ldrb	r3, [r3, #1]
 8006e24:	2b03      	cmp	r3, #3
 8006e26:	d008      	beq.n	8006e3a <USBD_StdEPReq+0x9a>
 8006e28:	2b03      	cmp	r3, #3
 8006e2a:	f300 8145 	bgt.w	80070b8 <USBD_StdEPReq+0x318>
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	f000 809b 	beq.w	8006f6a <USBD_StdEPReq+0x1ca>
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d03c      	beq.n	8006eb2 <USBD_StdEPReq+0x112>
 8006e38:	e13e      	b.n	80070b8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	d002      	beq.n	8006e4c <USBD_StdEPReq+0xac>
 8006e46:	2b03      	cmp	r3, #3
 8006e48:	d016      	beq.n	8006e78 <USBD_StdEPReq+0xd8>
 8006e4a:	e02c      	b.n	8006ea6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e4c:	7bbb      	ldrb	r3, [r7, #14]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d00d      	beq.n	8006e6e <USBD_StdEPReq+0xce>
 8006e52:	7bbb      	ldrb	r3, [r7, #14]
 8006e54:	2b80      	cmp	r3, #128	@ 0x80
 8006e56:	d00a      	beq.n	8006e6e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e58:	7bbb      	ldrb	r3, [r7, #14]
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f001 f987 	bl	8008170 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e62:	2180      	movs	r1, #128	@ 0x80
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f001 f983 	bl	8008170 <USBD_LL_StallEP>
 8006e6a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006e6c:	e020      	b.n	8006eb0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006e6e:	6839      	ldr	r1, [r7, #0]
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 fc7a 	bl	800776a <USBD_CtlError>
              break;
 8006e76:	e01b      	b.n	8006eb0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	885b      	ldrh	r3, [r3, #2]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d10e      	bne.n	8006e9e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006e80:	7bbb      	ldrb	r3, [r7, #14]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d00b      	beq.n	8006e9e <USBD_StdEPReq+0xfe>
 8006e86:	7bbb      	ldrb	r3, [r7, #14]
 8006e88:	2b80      	cmp	r3, #128	@ 0x80
 8006e8a:	d008      	beq.n	8006e9e <USBD_StdEPReq+0xfe>
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	88db      	ldrh	r3, [r3, #6]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d104      	bne.n	8006e9e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e94:	7bbb      	ldrb	r3, [r7, #14]
 8006e96:	4619      	mov	r1, r3
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f001 f969 	bl	8008170 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 fd2e 	bl	8007900 <USBD_CtlSendStatus>

              break;
 8006ea4:	e004      	b.n	8006eb0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006ea6:	6839      	ldr	r1, [r7, #0]
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 fc5e 	bl	800776a <USBD_CtlError>
              break;
 8006eae:	bf00      	nop
          }
          break;
 8006eb0:	e107      	b.n	80070c2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	2b02      	cmp	r3, #2
 8006ebc:	d002      	beq.n	8006ec4 <USBD_StdEPReq+0x124>
 8006ebe:	2b03      	cmp	r3, #3
 8006ec0:	d016      	beq.n	8006ef0 <USBD_StdEPReq+0x150>
 8006ec2:	e04b      	b.n	8006f5c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ec4:	7bbb      	ldrb	r3, [r7, #14]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d00d      	beq.n	8006ee6 <USBD_StdEPReq+0x146>
 8006eca:	7bbb      	ldrb	r3, [r7, #14]
 8006ecc:	2b80      	cmp	r3, #128	@ 0x80
 8006ece:	d00a      	beq.n	8006ee6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ed0:	7bbb      	ldrb	r3, [r7, #14]
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f001 f94b 	bl	8008170 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006eda:	2180      	movs	r1, #128	@ 0x80
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f001 f947 	bl	8008170 <USBD_LL_StallEP>
 8006ee2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ee4:	e040      	b.n	8006f68 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006ee6:	6839      	ldr	r1, [r7, #0]
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 fc3e 	bl	800776a <USBD_CtlError>
              break;
 8006eee:	e03b      	b.n	8006f68 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	885b      	ldrh	r3, [r3, #2]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d136      	bne.n	8006f66 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006ef8:	7bbb      	ldrb	r3, [r7, #14]
 8006efa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d004      	beq.n	8006f0c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006f02:	7bbb      	ldrb	r3, [r7, #14]
 8006f04:	4619      	mov	r1, r3
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f001 f951 	bl	80081ae <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 fcf7 	bl	8007900 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006f12:	7bbb      	ldrb	r3, [r7, #14]
 8006f14:	4619      	mov	r1, r3
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f7ff fde4 	bl	8006ae4 <USBD_CoreFindEP>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006f20:	7b7b      	ldrb	r3, [r7, #13]
 8006f22:	2bff      	cmp	r3, #255	@ 0xff
 8006f24:	d01f      	beq.n	8006f66 <USBD_StdEPReq+0x1c6>
 8006f26:	7b7b      	ldrb	r3, [r7, #13]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d11c      	bne.n	8006f66 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006f2c:	7b7a      	ldrb	r2, [r7, #13]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006f34:	7b7a      	ldrb	r2, [r7, #13]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	32ae      	adds	r2, #174	@ 0xae
 8006f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d010      	beq.n	8006f66 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006f44:	7b7a      	ldrb	r2, [r7, #13]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	32ae      	adds	r2, #174	@ 0xae
 8006f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	6839      	ldr	r1, [r7, #0]
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	4798      	blx	r3
 8006f56:	4603      	mov	r3, r0
 8006f58:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006f5a:	e004      	b.n	8006f66 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006f5c:	6839      	ldr	r1, [r7, #0]
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 fc03 	bl	800776a <USBD_CtlError>
              break;
 8006f64:	e000      	b.n	8006f68 <USBD_StdEPReq+0x1c8>
              break;
 8006f66:	bf00      	nop
          }
          break;
 8006f68:	e0ab      	b.n	80070c2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	d002      	beq.n	8006f7c <USBD_StdEPReq+0x1dc>
 8006f76:	2b03      	cmp	r3, #3
 8006f78:	d032      	beq.n	8006fe0 <USBD_StdEPReq+0x240>
 8006f7a:	e097      	b.n	80070ac <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f7c:	7bbb      	ldrb	r3, [r7, #14]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d007      	beq.n	8006f92 <USBD_StdEPReq+0x1f2>
 8006f82:	7bbb      	ldrb	r3, [r7, #14]
 8006f84:	2b80      	cmp	r3, #128	@ 0x80
 8006f86:	d004      	beq.n	8006f92 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006f88:	6839      	ldr	r1, [r7, #0]
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 fbed 	bl	800776a <USBD_CtlError>
                break;
 8006f90:	e091      	b.n	80070b6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	da0b      	bge.n	8006fb2 <USBD_StdEPReq+0x212>
 8006f9a:	7bbb      	ldrb	r3, [r7, #14]
 8006f9c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006fa0:	4613      	mov	r3, r2
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	4413      	add	r3, r2
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	3310      	adds	r3, #16
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	4413      	add	r3, r2
 8006fae:	3304      	adds	r3, #4
 8006fb0:	e00b      	b.n	8006fca <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006fb2:	7bbb      	ldrb	r3, [r7, #14]
 8006fb4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fb8:	4613      	mov	r3, r2
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	4413      	add	r3, r2
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	4413      	add	r3, r2
 8006fc8:	3304      	adds	r3, #4
 8006fca:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	2202      	movs	r2, #2
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 fc37 	bl	800784c <USBD_CtlSendData>
              break;
 8006fde:	e06a      	b.n	80070b6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006fe0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	da11      	bge.n	800700c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006fe8:	7bbb      	ldrb	r3, [r7, #14]
 8006fea:	f003 020f 	and.w	r2, r3, #15
 8006fee:	6879      	ldr	r1, [r7, #4]
 8006ff0:	4613      	mov	r3, r2
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	4413      	add	r3, r2
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	440b      	add	r3, r1
 8006ffa:	3324      	adds	r3, #36	@ 0x24
 8006ffc:	881b      	ldrh	r3, [r3, #0]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d117      	bne.n	8007032 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007002:	6839      	ldr	r1, [r7, #0]
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 fbb0 	bl	800776a <USBD_CtlError>
                  break;
 800700a:	e054      	b.n	80070b6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800700c:	7bbb      	ldrb	r3, [r7, #14]
 800700e:	f003 020f 	and.w	r2, r3, #15
 8007012:	6879      	ldr	r1, [r7, #4]
 8007014:	4613      	mov	r3, r2
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	4413      	add	r3, r2
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	440b      	add	r3, r1
 800701e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007022:	881b      	ldrh	r3, [r3, #0]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d104      	bne.n	8007032 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007028:	6839      	ldr	r1, [r7, #0]
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 fb9d 	bl	800776a <USBD_CtlError>
                  break;
 8007030:	e041      	b.n	80070b6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007032:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007036:	2b00      	cmp	r3, #0
 8007038:	da0b      	bge.n	8007052 <USBD_StdEPReq+0x2b2>
 800703a:	7bbb      	ldrb	r3, [r7, #14]
 800703c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007040:	4613      	mov	r3, r2
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	4413      	add	r3, r2
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	3310      	adds	r3, #16
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	4413      	add	r3, r2
 800704e:	3304      	adds	r3, #4
 8007050:	e00b      	b.n	800706a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007052:	7bbb      	ldrb	r3, [r7, #14]
 8007054:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007058:	4613      	mov	r3, r2
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	4413      	add	r3, r2
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	4413      	add	r3, r2
 8007068:	3304      	adds	r3, #4
 800706a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800706c:	7bbb      	ldrb	r3, [r7, #14]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d002      	beq.n	8007078 <USBD_StdEPReq+0x2d8>
 8007072:	7bbb      	ldrb	r3, [r7, #14]
 8007074:	2b80      	cmp	r3, #128	@ 0x80
 8007076:	d103      	bne.n	8007080 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	2200      	movs	r2, #0
 800707c:	601a      	str	r2, [r3, #0]
 800707e:	e00e      	b.n	800709e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007080:	7bbb      	ldrb	r3, [r7, #14]
 8007082:	4619      	mov	r1, r3
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f001 f8b1 	bl	80081ec <USBD_LL_IsStallEP>
 800708a:	4603      	mov	r3, r0
 800708c:	2b00      	cmp	r3, #0
 800708e:	d003      	beq.n	8007098 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	2201      	movs	r2, #1
 8007094:	601a      	str	r2, [r3, #0]
 8007096:	e002      	b.n	800709e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	2200      	movs	r2, #0
 800709c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	2202      	movs	r2, #2
 80070a2:	4619      	mov	r1, r3
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 fbd1 	bl	800784c <USBD_CtlSendData>
              break;
 80070aa:	e004      	b.n	80070b6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80070ac:	6839      	ldr	r1, [r7, #0]
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 fb5b 	bl	800776a <USBD_CtlError>
              break;
 80070b4:	bf00      	nop
          }
          break;
 80070b6:	e004      	b.n	80070c2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80070b8:	6839      	ldr	r1, [r7, #0]
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 fb55 	bl	800776a <USBD_CtlError>
          break;
 80070c0:	bf00      	nop
      }
      break;
 80070c2:	e005      	b.n	80070d0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80070c4:	6839      	ldr	r1, [r7, #0]
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 fb4f 	bl	800776a <USBD_CtlError>
      break;
 80070cc:	e000      	b.n	80070d0 <USBD_StdEPReq+0x330>
      break;
 80070ce:	bf00      	nop
  }

  return ret;
 80070d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
	...

080070dc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80070e6:	2300      	movs	r3, #0
 80070e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80070ea:	2300      	movs	r3, #0
 80070ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80070ee:	2300      	movs	r3, #0
 80070f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	885b      	ldrh	r3, [r3, #2]
 80070f6:	0a1b      	lsrs	r3, r3, #8
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	3b01      	subs	r3, #1
 80070fc:	2b06      	cmp	r3, #6
 80070fe:	f200 8128 	bhi.w	8007352 <USBD_GetDescriptor+0x276>
 8007102:	a201      	add	r2, pc, #4	@ (adr r2, 8007108 <USBD_GetDescriptor+0x2c>)
 8007104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007108:	08007125 	.word	0x08007125
 800710c:	0800713d 	.word	0x0800713d
 8007110:	0800717d 	.word	0x0800717d
 8007114:	08007353 	.word	0x08007353
 8007118:	08007353 	.word	0x08007353
 800711c:	080072f3 	.word	0x080072f3
 8007120:	0800731f 	.word	0x0800731f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	7c12      	ldrb	r2, [r2, #16]
 8007130:	f107 0108 	add.w	r1, r7, #8
 8007134:	4610      	mov	r0, r2
 8007136:	4798      	blx	r3
 8007138:	60f8      	str	r0, [r7, #12]
      break;
 800713a:	e112      	b.n	8007362 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	7c1b      	ldrb	r3, [r3, #16]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d10d      	bne.n	8007160 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800714a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800714c:	f107 0208 	add.w	r2, r7, #8
 8007150:	4610      	mov	r0, r2
 8007152:	4798      	blx	r3
 8007154:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	3301      	adds	r3, #1
 800715a:	2202      	movs	r2, #2
 800715c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800715e:	e100      	b.n	8007362 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007168:	f107 0208 	add.w	r2, r7, #8
 800716c:	4610      	mov	r0, r2
 800716e:	4798      	blx	r3
 8007170:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	3301      	adds	r3, #1
 8007176:	2202      	movs	r2, #2
 8007178:	701a      	strb	r2, [r3, #0]
      break;
 800717a:	e0f2      	b.n	8007362 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	885b      	ldrh	r3, [r3, #2]
 8007180:	b2db      	uxtb	r3, r3
 8007182:	2b05      	cmp	r3, #5
 8007184:	f200 80ac 	bhi.w	80072e0 <USBD_GetDescriptor+0x204>
 8007188:	a201      	add	r2, pc, #4	@ (adr r2, 8007190 <USBD_GetDescriptor+0xb4>)
 800718a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800718e:	bf00      	nop
 8007190:	080071a9 	.word	0x080071a9
 8007194:	080071dd 	.word	0x080071dd
 8007198:	08007211 	.word	0x08007211
 800719c:	08007245 	.word	0x08007245
 80071a0:	08007279 	.word	0x08007279
 80071a4:	080072ad 	.word	0x080072ad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d00b      	beq.n	80071cc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	7c12      	ldrb	r2, [r2, #16]
 80071c0:	f107 0108 	add.w	r1, r7, #8
 80071c4:	4610      	mov	r0, r2
 80071c6:	4798      	blx	r3
 80071c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071ca:	e091      	b.n	80072f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071cc:	6839      	ldr	r1, [r7, #0]
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 facb 	bl	800776a <USBD_CtlError>
            err++;
 80071d4:	7afb      	ldrb	r3, [r7, #11]
 80071d6:	3301      	adds	r3, #1
 80071d8:	72fb      	strb	r3, [r7, #11]
          break;
 80071da:	e089      	b.n	80072f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d00b      	beq.n	8007200 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	7c12      	ldrb	r2, [r2, #16]
 80071f4:	f107 0108 	add.w	r1, r7, #8
 80071f8:	4610      	mov	r0, r2
 80071fa:	4798      	blx	r3
 80071fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071fe:	e077      	b.n	80072f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007200:	6839      	ldr	r1, [r7, #0]
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 fab1 	bl	800776a <USBD_CtlError>
            err++;
 8007208:	7afb      	ldrb	r3, [r7, #11]
 800720a:	3301      	adds	r3, #1
 800720c:	72fb      	strb	r3, [r7, #11]
          break;
 800720e:	e06f      	b.n	80072f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d00b      	beq.n	8007234 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	7c12      	ldrb	r2, [r2, #16]
 8007228:	f107 0108 	add.w	r1, r7, #8
 800722c:	4610      	mov	r0, r2
 800722e:	4798      	blx	r3
 8007230:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007232:	e05d      	b.n	80072f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007234:	6839      	ldr	r1, [r7, #0]
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 fa97 	bl	800776a <USBD_CtlError>
            err++;
 800723c:	7afb      	ldrb	r3, [r7, #11]
 800723e:	3301      	adds	r3, #1
 8007240:	72fb      	strb	r3, [r7, #11]
          break;
 8007242:	e055      	b.n	80072f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d00b      	beq.n	8007268 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	7c12      	ldrb	r2, [r2, #16]
 800725c:	f107 0108 	add.w	r1, r7, #8
 8007260:	4610      	mov	r0, r2
 8007262:	4798      	blx	r3
 8007264:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007266:	e043      	b.n	80072f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007268:	6839      	ldr	r1, [r7, #0]
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 fa7d 	bl	800776a <USBD_CtlError>
            err++;
 8007270:	7afb      	ldrb	r3, [r7, #11]
 8007272:	3301      	adds	r3, #1
 8007274:	72fb      	strb	r3, [r7, #11]
          break;
 8007276:	e03b      	b.n	80072f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800727e:	695b      	ldr	r3, [r3, #20]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d00b      	beq.n	800729c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800728a:	695b      	ldr	r3, [r3, #20]
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	7c12      	ldrb	r2, [r2, #16]
 8007290:	f107 0108 	add.w	r1, r7, #8
 8007294:	4610      	mov	r0, r2
 8007296:	4798      	blx	r3
 8007298:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800729a:	e029      	b.n	80072f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800729c:	6839      	ldr	r1, [r7, #0]
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 fa63 	bl	800776a <USBD_CtlError>
            err++;
 80072a4:	7afb      	ldrb	r3, [r7, #11]
 80072a6:	3301      	adds	r3, #1
 80072a8:	72fb      	strb	r3, [r7, #11]
          break;
 80072aa:	e021      	b.n	80072f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072b2:	699b      	ldr	r3, [r3, #24]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d00b      	beq.n	80072d0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072be:	699b      	ldr	r3, [r3, #24]
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	7c12      	ldrb	r2, [r2, #16]
 80072c4:	f107 0108 	add.w	r1, r7, #8
 80072c8:	4610      	mov	r0, r2
 80072ca:	4798      	blx	r3
 80072cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072ce:	e00f      	b.n	80072f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072d0:	6839      	ldr	r1, [r7, #0]
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 fa49 	bl	800776a <USBD_CtlError>
            err++;
 80072d8:	7afb      	ldrb	r3, [r7, #11]
 80072da:	3301      	adds	r3, #1
 80072dc:	72fb      	strb	r3, [r7, #11]
          break;
 80072de:	e007      	b.n	80072f0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80072e0:	6839      	ldr	r1, [r7, #0]
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 fa41 	bl	800776a <USBD_CtlError>
          err++;
 80072e8:	7afb      	ldrb	r3, [r7, #11]
 80072ea:	3301      	adds	r3, #1
 80072ec:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80072ee:	bf00      	nop
      }
      break;
 80072f0:	e037      	b.n	8007362 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	7c1b      	ldrb	r3, [r3, #16]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d109      	bne.n	800730e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007302:	f107 0208 	add.w	r2, r7, #8
 8007306:	4610      	mov	r0, r2
 8007308:	4798      	blx	r3
 800730a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800730c:	e029      	b.n	8007362 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800730e:	6839      	ldr	r1, [r7, #0]
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 fa2a 	bl	800776a <USBD_CtlError>
        err++;
 8007316:	7afb      	ldrb	r3, [r7, #11]
 8007318:	3301      	adds	r3, #1
 800731a:	72fb      	strb	r3, [r7, #11]
      break;
 800731c:	e021      	b.n	8007362 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	7c1b      	ldrb	r3, [r3, #16]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d10d      	bne.n	8007342 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800732c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800732e:	f107 0208 	add.w	r2, r7, #8
 8007332:	4610      	mov	r0, r2
 8007334:	4798      	blx	r3
 8007336:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	3301      	adds	r3, #1
 800733c:	2207      	movs	r2, #7
 800733e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007340:	e00f      	b.n	8007362 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007342:	6839      	ldr	r1, [r7, #0]
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 fa10 	bl	800776a <USBD_CtlError>
        err++;
 800734a:	7afb      	ldrb	r3, [r7, #11]
 800734c:	3301      	adds	r3, #1
 800734e:	72fb      	strb	r3, [r7, #11]
      break;
 8007350:	e007      	b.n	8007362 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007352:	6839      	ldr	r1, [r7, #0]
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 fa08 	bl	800776a <USBD_CtlError>
      err++;
 800735a:	7afb      	ldrb	r3, [r7, #11]
 800735c:	3301      	adds	r3, #1
 800735e:	72fb      	strb	r3, [r7, #11]
      break;
 8007360:	bf00      	nop
  }

  if (err != 0U)
 8007362:	7afb      	ldrb	r3, [r7, #11]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d11e      	bne.n	80073a6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	88db      	ldrh	r3, [r3, #6]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d016      	beq.n	800739e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007370:	893b      	ldrh	r3, [r7, #8]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d00e      	beq.n	8007394 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	88da      	ldrh	r2, [r3, #6]
 800737a:	893b      	ldrh	r3, [r7, #8]
 800737c:	4293      	cmp	r3, r2
 800737e:	bf28      	it	cs
 8007380:	4613      	movcs	r3, r2
 8007382:	b29b      	uxth	r3, r3
 8007384:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007386:	893b      	ldrh	r3, [r7, #8]
 8007388:	461a      	mov	r2, r3
 800738a:	68f9      	ldr	r1, [r7, #12]
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 fa5d 	bl	800784c <USBD_CtlSendData>
 8007392:	e009      	b.n	80073a8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007394:	6839      	ldr	r1, [r7, #0]
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 f9e7 	bl	800776a <USBD_CtlError>
 800739c:	e004      	b.n	80073a8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 faae 	bl	8007900 <USBD_CtlSendStatus>
 80073a4:	e000      	b.n	80073a8 <USBD_GetDescriptor+0x2cc>
    return;
 80073a6:	bf00      	nop
  }
}
 80073a8:	3710      	adds	r7, #16
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop

080073b0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	889b      	ldrh	r3, [r3, #4]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d131      	bne.n	8007426 <USBD_SetAddress+0x76>
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	88db      	ldrh	r3, [r3, #6]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d12d      	bne.n	8007426 <USBD_SetAddress+0x76>
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	885b      	ldrh	r3, [r3, #2]
 80073ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80073d0:	d829      	bhi.n	8007426 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	885b      	ldrh	r3, [r3, #2]
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	2b03      	cmp	r3, #3
 80073e8:	d104      	bne.n	80073f4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80073ea:	6839      	ldr	r1, [r7, #0]
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 f9bc 	bl	800776a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073f2:	e01d      	b.n	8007430 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	7bfa      	ldrb	r2, [r7, #15]
 80073f8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80073fc:	7bfb      	ldrb	r3, [r7, #15]
 80073fe:	4619      	mov	r1, r3
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 ff1f 	bl	8008244 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 fa7a 	bl	8007900 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800740c:	7bfb      	ldrb	r3, [r7, #15]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d004      	beq.n	800741c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2202      	movs	r2, #2
 8007416:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800741a:	e009      	b.n	8007430 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2201      	movs	r2, #1
 8007420:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007424:	e004      	b.n	8007430 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007426:	6839      	ldr	r1, [r7, #0]
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 f99e 	bl	800776a <USBD_CtlError>
  }
}
 800742e:	bf00      	nop
 8007430:	bf00      	nop
 8007432:	3710      	adds	r7, #16
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007442:	2300      	movs	r3, #0
 8007444:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	885b      	ldrh	r3, [r3, #2]
 800744a:	b2da      	uxtb	r2, r3
 800744c:	4b4e      	ldr	r3, [pc, #312]	@ (8007588 <USBD_SetConfig+0x150>)
 800744e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007450:	4b4d      	ldr	r3, [pc, #308]	@ (8007588 <USBD_SetConfig+0x150>)
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	2b01      	cmp	r3, #1
 8007456:	d905      	bls.n	8007464 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007458:	6839      	ldr	r1, [r7, #0]
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 f985 	bl	800776a <USBD_CtlError>
    return USBD_FAIL;
 8007460:	2303      	movs	r3, #3
 8007462:	e08c      	b.n	800757e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800746a:	b2db      	uxtb	r3, r3
 800746c:	2b02      	cmp	r3, #2
 800746e:	d002      	beq.n	8007476 <USBD_SetConfig+0x3e>
 8007470:	2b03      	cmp	r3, #3
 8007472:	d029      	beq.n	80074c8 <USBD_SetConfig+0x90>
 8007474:	e075      	b.n	8007562 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007476:	4b44      	ldr	r3, [pc, #272]	@ (8007588 <USBD_SetConfig+0x150>)
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d020      	beq.n	80074c0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800747e:	4b42      	ldr	r3, [pc, #264]	@ (8007588 <USBD_SetConfig+0x150>)
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	461a      	mov	r2, r3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007488:	4b3f      	ldr	r3, [pc, #252]	@ (8007588 <USBD_SetConfig+0x150>)
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	4619      	mov	r1, r3
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f7fe ffe9 	bl	8006466 <USBD_SetClassConfig>
 8007494:	4603      	mov	r3, r0
 8007496:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007498:	7bfb      	ldrb	r3, [r7, #15]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d008      	beq.n	80074b0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800749e:	6839      	ldr	r1, [r7, #0]
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 f962 	bl	800776a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2202      	movs	r2, #2
 80074aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80074ae:	e065      	b.n	800757c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 fa25 	bl	8007900 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2203      	movs	r2, #3
 80074ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80074be:	e05d      	b.n	800757c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 fa1d 	bl	8007900 <USBD_CtlSendStatus>
      break;
 80074c6:	e059      	b.n	800757c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80074c8:	4b2f      	ldr	r3, [pc, #188]	@ (8007588 <USBD_SetConfig+0x150>)
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d112      	bne.n	80074f6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2202      	movs	r2, #2
 80074d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80074d8:	4b2b      	ldr	r3, [pc, #172]	@ (8007588 <USBD_SetConfig+0x150>)
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	461a      	mov	r2, r3
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80074e2:	4b29      	ldr	r3, [pc, #164]	@ (8007588 <USBD_SetConfig+0x150>)
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	4619      	mov	r1, r3
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f7fe ffd8 	bl	800649e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 fa06 	bl	8007900 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80074f4:	e042      	b.n	800757c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80074f6:	4b24      	ldr	r3, [pc, #144]	@ (8007588 <USBD_SetConfig+0x150>)
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	461a      	mov	r2, r3
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	429a      	cmp	r2, r3
 8007502:	d02a      	beq.n	800755a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	b2db      	uxtb	r3, r3
 800750a:	4619      	mov	r1, r3
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f7fe ffc6 	bl	800649e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007512:	4b1d      	ldr	r3, [pc, #116]	@ (8007588 <USBD_SetConfig+0x150>)
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	461a      	mov	r2, r3
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800751c:	4b1a      	ldr	r3, [pc, #104]	@ (8007588 <USBD_SetConfig+0x150>)
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	4619      	mov	r1, r3
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f7fe ff9f 	bl	8006466 <USBD_SetClassConfig>
 8007528:	4603      	mov	r3, r0
 800752a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800752c:	7bfb      	ldrb	r3, [r7, #15]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00f      	beq.n	8007552 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007532:	6839      	ldr	r1, [r7, #0]
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 f918 	bl	800776a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	b2db      	uxtb	r3, r3
 8007540:	4619      	mov	r1, r3
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f7fe ffab 	bl	800649e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2202      	movs	r2, #2
 800754c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007550:	e014      	b.n	800757c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 f9d4 	bl	8007900 <USBD_CtlSendStatus>
      break;
 8007558:	e010      	b.n	800757c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 f9d0 	bl	8007900 <USBD_CtlSendStatus>
      break;
 8007560:	e00c      	b.n	800757c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007562:	6839      	ldr	r1, [r7, #0]
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 f900 	bl	800776a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800756a:	4b07      	ldr	r3, [pc, #28]	@ (8007588 <USBD_SetConfig+0x150>)
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	4619      	mov	r1, r3
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f7fe ff94 	bl	800649e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007576:	2303      	movs	r3, #3
 8007578:	73fb      	strb	r3, [r7, #15]
      break;
 800757a:	bf00      	nop
  }

  return ret;
 800757c:	7bfb      	ldrb	r3, [r7, #15]
}
 800757e:	4618      	mov	r0, r3
 8007580:	3710      	adds	r7, #16
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	20000258 	.word	0x20000258

0800758c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	88db      	ldrh	r3, [r3, #6]
 800759a:	2b01      	cmp	r3, #1
 800759c:	d004      	beq.n	80075a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800759e:	6839      	ldr	r1, [r7, #0]
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f000 f8e2 	bl	800776a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80075a6:	e023      	b.n	80075f0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	2b02      	cmp	r3, #2
 80075b2:	dc02      	bgt.n	80075ba <USBD_GetConfig+0x2e>
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	dc03      	bgt.n	80075c0 <USBD_GetConfig+0x34>
 80075b8:	e015      	b.n	80075e6 <USBD_GetConfig+0x5a>
 80075ba:	2b03      	cmp	r3, #3
 80075bc:	d00b      	beq.n	80075d6 <USBD_GetConfig+0x4a>
 80075be:	e012      	b.n	80075e6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	3308      	adds	r3, #8
 80075ca:	2201      	movs	r2, #1
 80075cc:	4619      	mov	r1, r3
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 f93c 	bl	800784c <USBD_CtlSendData>
        break;
 80075d4:	e00c      	b.n	80075f0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	3304      	adds	r3, #4
 80075da:	2201      	movs	r2, #1
 80075dc:	4619      	mov	r1, r3
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 f934 	bl	800784c <USBD_CtlSendData>
        break;
 80075e4:	e004      	b.n	80075f0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80075e6:	6839      	ldr	r1, [r7, #0]
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 f8be 	bl	800776a <USBD_CtlError>
        break;
 80075ee:	bf00      	nop
}
 80075f0:	bf00      	nop
 80075f2:	3708      	adds	r7, #8
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007608:	b2db      	uxtb	r3, r3
 800760a:	3b01      	subs	r3, #1
 800760c:	2b02      	cmp	r3, #2
 800760e:	d81e      	bhi.n	800764e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	88db      	ldrh	r3, [r3, #6]
 8007614:	2b02      	cmp	r3, #2
 8007616:	d004      	beq.n	8007622 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007618:	6839      	ldr	r1, [r7, #0]
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 f8a5 	bl	800776a <USBD_CtlError>
        break;
 8007620:	e01a      	b.n	8007658 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2201      	movs	r2, #1
 8007626:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800762e:	2b00      	cmp	r3, #0
 8007630:	d005      	beq.n	800763e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	f043 0202 	orr.w	r2, r3, #2
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	330c      	adds	r3, #12
 8007642:	2202      	movs	r2, #2
 8007644:	4619      	mov	r1, r3
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 f900 	bl	800784c <USBD_CtlSendData>
      break;
 800764c:	e004      	b.n	8007658 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800764e:	6839      	ldr	r1, [r7, #0]
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 f88a 	bl	800776a <USBD_CtlError>
      break;
 8007656:	bf00      	nop
  }
}
 8007658:	bf00      	nop
 800765a:	3708      	adds	r7, #8
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	885b      	ldrh	r3, [r3, #2]
 800766e:	2b01      	cmp	r3, #1
 8007670:	d107      	bne.n	8007682 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2201      	movs	r2, #1
 8007676:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 f940 	bl	8007900 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007680:	e013      	b.n	80076aa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	885b      	ldrh	r3, [r3, #2]
 8007686:	2b02      	cmp	r3, #2
 8007688:	d10b      	bne.n	80076a2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	889b      	ldrh	r3, [r3, #4]
 800768e:	0a1b      	lsrs	r3, r3, #8
 8007690:	b29b      	uxth	r3, r3
 8007692:	b2da      	uxtb	r2, r3
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 f930 	bl	8007900 <USBD_CtlSendStatus>
}
 80076a0:	e003      	b.n	80076aa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80076a2:	6839      	ldr	r1, [r7, #0]
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 f860 	bl	800776a <USBD_CtlError>
}
 80076aa:	bf00      	nop
 80076ac:	3708      	adds	r7, #8
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}

080076b2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076b2:	b580      	push	{r7, lr}
 80076b4:	b082      	sub	sp, #8
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
 80076ba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	3b01      	subs	r3, #1
 80076c6:	2b02      	cmp	r3, #2
 80076c8:	d80b      	bhi.n	80076e2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	885b      	ldrh	r3, [r3, #2]
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d10c      	bne.n	80076ec <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 f910 	bl	8007900 <USBD_CtlSendStatus>
      }
      break;
 80076e0:	e004      	b.n	80076ec <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80076e2:	6839      	ldr	r1, [r7, #0]
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 f840 	bl	800776a <USBD_CtlError>
      break;
 80076ea:	e000      	b.n	80076ee <USBD_ClrFeature+0x3c>
      break;
 80076ec:	bf00      	nop
  }
}
 80076ee:	bf00      	nop
 80076f0:	3708      	adds	r7, #8
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b084      	sub	sp, #16
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
 80076fe:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	781a      	ldrb	r2, [r3, #0]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	3301      	adds	r3, #1
 8007710:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	781a      	ldrb	r2, [r3, #0]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	3301      	adds	r3, #1
 800771e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007720:	68f8      	ldr	r0, [r7, #12]
 8007722:	f7ff fa40 	bl	8006ba6 <SWAPBYTE>
 8007726:	4603      	mov	r3, r0
 8007728:	461a      	mov	r2, r3
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	3301      	adds	r3, #1
 8007732:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	3301      	adds	r3, #1
 8007738:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800773a:	68f8      	ldr	r0, [r7, #12]
 800773c:	f7ff fa33 	bl	8006ba6 <SWAPBYTE>
 8007740:	4603      	mov	r3, r0
 8007742:	461a      	mov	r2, r3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	3301      	adds	r3, #1
 800774c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	3301      	adds	r3, #1
 8007752:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007754:	68f8      	ldr	r0, [r7, #12]
 8007756:	f7ff fa26 	bl	8006ba6 <SWAPBYTE>
 800775a:	4603      	mov	r3, r0
 800775c:	461a      	mov	r2, r3
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	80da      	strh	r2, [r3, #6]
}
 8007762:	bf00      	nop
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800776a:	b580      	push	{r7, lr}
 800776c:	b082      	sub	sp, #8
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
 8007772:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007774:	2180      	movs	r1, #128	@ 0x80
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 fcfa 	bl	8008170 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800777c:	2100      	movs	r1, #0
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 fcf6 	bl	8008170 <USBD_LL_StallEP>
}
 8007784:	bf00      	nop
 8007786:	3708      	adds	r7, #8
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b086      	sub	sp, #24
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007798:	2300      	movs	r3, #0
 800779a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d036      	beq.n	8007810 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80077a6:	6938      	ldr	r0, [r7, #16]
 80077a8:	f000 f836 	bl	8007818 <USBD_GetLen>
 80077ac:	4603      	mov	r3, r0
 80077ae:	3301      	adds	r3, #1
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	005b      	lsls	r3, r3, #1
 80077b4:	b29a      	uxth	r2, r3
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80077ba:	7dfb      	ldrb	r3, [r7, #23]
 80077bc:	68ba      	ldr	r2, [r7, #8]
 80077be:	4413      	add	r3, r2
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	7812      	ldrb	r2, [r2, #0]
 80077c4:	701a      	strb	r2, [r3, #0]
  idx++;
 80077c6:	7dfb      	ldrb	r3, [r7, #23]
 80077c8:	3301      	adds	r3, #1
 80077ca:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80077cc:	7dfb      	ldrb	r3, [r7, #23]
 80077ce:	68ba      	ldr	r2, [r7, #8]
 80077d0:	4413      	add	r3, r2
 80077d2:	2203      	movs	r2, #3
 80077d4:	701a      	strb	r2, [r3, #0]
  idx++;
 80077d6:	7dfb      	ldrb	r3, [r7, #23]
 80077d8:	3301      	adds	r3, #1
 80077da:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80077dc:	e013      	b.n	8007806 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80077de:	7dfb      	ldrb	r3, [r7, #23]
 80077e0:	68ba      	ldr	r2, [r7, #8]
 80077e2:	4413      	add	r3, r2
 80077e4:	693a      	ldr	r2, [r7, #16]
 80077e6:	7812      	ldrb	r2, [r2, #0]
 80077e8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	3301      	adds	r3, #1
 80077ee:	613b      	str	r3, [r7, #16]
    idx++;
 80077f0:	7dfb      	ldrb	r3, [r7, #23]
 80077f2:	3301      	adds	r3, #1
 80077f4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80077f6:	7dfb      	ldrb	r3, [r7, #23]
 80077f8:	68ba      	ldr	r2, [r7, #8]
 80077fa:	4413      	add	r3, r2
 80077fc:	2200      	movs	r2, #0
 80077fe:	701a      	strb	r2, [r3, #0]
    idx++;
 8007800:	7dfb      	ldrb	r3, [r7, #23]
 8007802:	3301      	adds	r3, #1
 8007804:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d1e7      	bne.n	80077de <USBD_GetString+0x52>
 800780e:	e000      	b.n	8007812 <USBD_GetString+0x86>
    return;
 8007810:	bf00      	nop
  }
}
 8007812:	3718      	adds	r7, #24
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007818:	b480      	push	{r7}
 800781a:	b085      	sub	sp, #20
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007820:	2300      	movs	r3, #0
 8007822:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007828:	e005      	b.n	8007836 <USBD_GetLen+0x1e>
  {
    len++;
 800782a:	7bfb      	ldrb	r3, [r7, #15]
 800782c:	3301      	adds	r3, #1
 800782e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	3301      	adds	r3, #1
 8007834:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d1f5      	bne.n	800782a <USBD_GetLen+0x12>
  }

  return len;
 800783e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007840:	4618      	mov	r0, r3
 8007842:	3714      	adds	r7, #20
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr

0800784c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	60b9      	str	r1, [r7, #8]
 8007856:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2202      	movs	r2, #2
 800785c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	68ba      	ldr	r2, [r7, #8]
 8007870:	2100      	movs	r1, #0
 8007872:	68f8      	ldr	r0, [r7, #12]
 8007874:	f000 fd05 	bl	8008282 <USBD_LL_Transmit>

  return USBD_OK;
 8007878:	2300      	movs	r3, #0
}
 800787a:	4618      	mov	r0, r3
 800787c:	3710      	adds	r7, #16
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}

08007882 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007882:	b580      	push	{r7, lr}
 8007884:	b084      	sub	sp, #16
 8007886:	af00      	add	r7, sp, #0
 8007888:	60f8      	str	r0, [r7, #12]
 800788a:	60b9      	str	r1, [r7, #8]
 800788c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	68ba      	ldr	r2, [r7, #8]
 8007892:	2100      	movs	r1, #0
 8007894:	68f8      	ldr	r0, [r7, #12]
 8007896:	f000 fcf4 	bl	8008282 <USBD_LL_Transmit>

  return USBD_OK;
 800789a:	2300      	movs	r3, #0
}
 800789c:	4618      	mov	r0, r3
 800789e:	3710      	adds	r7, #16
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	60f8      	str	r0, [r7, #12]
 80078ac:	60b9      	str	r1, [r7, #8]
 80078ae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2203      	movs	r2, #3
 80078b4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	68ba      	ldr	r2, [r7, #8]
 80078cc:	2100      	movs	r1, #0
 80078ce:	68f8      	ldr	r0, [r7, #12]
 80078d0:	f000 fcf8 	bl	80082c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80078d4:	2300      	movs	r3, #0
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3710      	adds	r7, #16
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}

080078de <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80078de:	b580      	push	{r7, lr}
 80078e0:	b084      	sub	sp, #16
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	60f8      	str	r0, [r7, #12]
 80078e6:	60b9      	str	r1, [r7, #8]
 80078e8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	68ba      	ldr	r2, [r7, #8]
 80078ee:	2100      	movs	r1, #0
 80078f0:	68f8      	ldr	r0, [r7, #12]
 80078f2:	f000 fce7 	bl	80082c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80078f6:	2300      	movs	r3, #0
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3710      	adds	r7, #16
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b082      	sub	sp, #8
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2204      	movs	r2, #4
 800790c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007910:	2300      	movs	r3, #0
 8007912:	2200      	movs	r2, #0
 8007914:	2100      	movs	r1, #0
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 fcb3 	bl	8008282 <USBD_LL_Transmit>

  return USBD_OK;
 800791c:	2300      	movs	r3, #0
}
 800791e:	4618      	mov	r0, r3
 8007920:	3708      	adds	r7, #8
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}

08007926 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007926:	b580      	push	{r7, lr}
 8007928:	b082      	sub	sp, #8
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2205      	movs	r2, #5
 8007932:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007936:	2300      	movs	r3, #0
 8007938:	2200      	movs	r2, #0
 800793a:	2100      	movs	r1, #0
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 fcc1 	bl	80082c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007942:	2300      	movs	r3, #0
}
 8007944:	4618      	mov	r0, r3
 8007946:	3708      	adds	r7, #8
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007950:	2200      	movs	r2, #0
 8007952:	4912      	ldr	r1, [pc, #72]	@ (800799c <MX_USB_DEVICE_Init+0x50>)
 8007954:	4812      	ldr	r0, [pc, #72]	@ (80079a0 <MX_USB_DEVICE_Init+0x54>)
 8007956:	f7fe fd09 	bl	800636c <USBD_Init>
 800795a:	4603      	mov	r3, r0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d001      	beq.n	8007964 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007960:	f7f9 f820 	bl	80009a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007964:	490f      	ldr	r1, [pc, #60]	@ (80079a4 <MX_USB_DEVICE_Init+0x58>)
 8007966:	480e      	ldr	r0, [pc, #56]	@ (80079a0 <MX_USB_DEVICE_Init+0x54>)
 8007968:	f7fe fd30 	bl	80063cc <USBD_RegisterClass>
 800796c:	4603      	mov	r3, r0
 800796e:	2b00      	cmp	r3, #0
 8007970:	d001      	beq.n	8007976 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007972:	f7f9 f817 	bl	80009a4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007976:	490c      	ldr	r1, [pc, #48]	@ (80079a8 <MX_USB_DEVICE_Init+0x5c>)
 8007978:	4809      	ldr	r0, [pc, #36]	@ (80079a0 <MX_USB_DEVICE_Init+0x54>)
 800797a:	f7fe fc67 	bl	800624c <USBD_CDC_RegisterInterface>
 800797e:	4603      	mov	r3, r0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d001      	beq.n	8007988 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007984:	f7f9 f80e 	bl	80009a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007988:	4805      	ldr	r0, [pc, #20]	@ (80079a0 <MX_USB_DEVICE_Init+0x54>)
 800798a:	f7fe fd55 	bl	8006438 <USBD_Start>
 800798e:	4603      	mov	r3, r0
 8007990:	2b00      	cmp	r3, #0
 8007992:	d001      	beq.n	8007998 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007994:	f7f9 f806 	bl	80009a4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007998:	bf00      	nop
 800799a:	bd80      	pop	{r7, pc}
 800799c:	200000ac 	.word	0x200000ac
 80079a0:	2000025c 	.word	0x2000025c
 80079a4:	20000018 	.word	0x20000018
 80079a8:	20000098 	.word	0x20000098

080079ac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80079b0:	2200      	movs	r2, #0
 80079b2:	4905      	ldr	r1, [pc, #20]	@ (80079c8 <CDC_Init_FS+0x1c>)
 80079b4:	4805      	ldr	r0, [pc, #20]	@ (80079cc <CDC_Init_FS+0x20>)
 80079b6:	f7fe fc63 	bl	8006280 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80079ba:	4905      	ldr	r1, [pc, #20]	@ (80079d0 <CDC_Init_FS+0x24>)
 80079bc:	4803      	ldr	r0, [pc, #12]	@ (80079cc <CDC_Init_FS+0x20>)
 80079be:	f7fe fc81 	bl	80062c4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80079c2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	bd80      	pop	{r7, pc}
 80079c8:	20000dbc 	.word	0x20000dbc
 80079cc:	2000025c 	.word	0x2000025c
 80079d0:	200005bc 	.word	0x200005bc

080079d4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80079d4:	b480      	push	{r7}
 80079d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80079d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80079da:	4618      	mov	r0, r3
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b083      	sub	sp, #12
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	4603      	mov	r3, r0
 80079ec:	6039      	str	r1, [r7, #0]
 80079ee:	71fb      	strb	r3, [r7, #7]
 80079f0:	4613      	mov	r3, r2
 80079f2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80079f4:	79fb      	ldrb	r3, [r7, #7]
 80079f6:	2b23      	cmp	r3, #35	@ 0x23
 80079f8:	d84a      	bhi.n	8007a90 <CDC_Control_FS+0xac>
 80079fa:	a201      	add	r2, pc, #4	@ (adr r2, 8007a00 <CDC_Control_FS+0x1c>)
 80079fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a00:	08007a91 	.word	0x08007a91
 8007a04:	08007a91 	.word	0x08007a91
 8007a08:	08007a91 	.word	0x08007a91
 8007a0c:	08007a91 	.word	0x08007a91
 8007a10:	08007a91 	.word	0x08007a91
 8007a14:	08007a91 	.word	0x08007a91
 8007a18:	08007a91 	.word	0x08007a91
 8007a1c:	08007a91 	.word	0x08007a91
 8007a20:	08007a91 	.word	0x08007a91
 8007a24:	08007a91 	.word	0x08007a91
 8007a28:	08007a91 	.word	0x08007a91
 8007a2c:	08007a91 	.word	0x08007a91
 8007a30:	08007a91 	.word	0x08007a91
 8007a34:	08007a91 	.word	0x08007a91
 8007a38:	08007a91 	.word	0x08007a91
 8007a3c:	08007a91 	.word	0x08007a91
 8007a40:	08007a91 	.word	0x08007a91
 8007a44:	08007a91 	.word	0x08007a91
 8007a48:	08007a91 	.word	0x08007a91
 8007a4c:	08007a91 	.word	0x08007a91
 8007a50:	08007a91 	.word	0x08007a91
 8007a54:	08007a91 	.word	0x08007a91
 8007a58:	08007a91 	.word	0x08007a91
 8007a5c:	08007a91 	.word	0x08007a91
 8007a60:	08007a91 	.word	0x08007a91
 8007a64:	08007a91 	.word	0x08007a91
 8007a68:	08007a91 	.word	0x08007a91
 8007a6c:	08007a91 	.word	0x08007a91
 8007a70:	08007a91 	.word	0x08007a91
 8007a74:	08007a91 	.word	0x08007a91
 8007a78:	08007a91 	.word	0x08007a91
 8007a7c:	08007a91 	.word	0x08007a91
 8007a80:	08007a91 	.word	0x08007a91
 8007a84:	08007a91 	.word	0x08007a91
 8007a88:	08007a91 	.word	0x08007a91
 8007a8c:	08007a91 	.word	0x08007a91
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007a90:	bf00      	nop
  }

  return (USBD_OK);
 8007a92:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	370c      	adds	r7, #12
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr

08007aa0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007aaa:	6879      	ldr	r1, [r7, #4]
 8007aac:	4821      	ldr	r0, [pc, #132]	@ (8007b34 <CDC_Receive_FS+0x94>)
 8007aae:	f7fe fc09 	bl	80062c4 <USBD_CDC_SetRxBuffer>
  //START CODE FOR LED ON/OFF LOGIC
  for (uint32_t i = 0; i < *Len; ++i) {
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	60fb      	str	r3, [r7, #12]
 8007ab6:	e02f      	b.n	8007b18 <CDC_Receive_FS+0x78>
      // Konec ukaza (npr. nova vrstica ali povratni znak)
      if (Buf[i] == '\n' || Buf[i] == '\r') {
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	4413      	add	r3, r2
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	2b0a      	cmp	r3, #10
 8007ac2:	d005      	beq.n	8007ad0 <CDC_Receive_FS+0x30>
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	4413      	add	r3, r2
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	2b0d      	cmp	r3, #13
 8007ace:	d10e      	bne.n	8007aee <CDC_Receive_FS+0x4e>
        buffer[bufferIndex++] = '\0'; // Zaključimo niz ukaza z ničelnim znakom
 8007ad0:	4b19      	ldr	r3, [pc, #100]	@ (8007b38 <CDC_Receive_FS+0x98>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	1c5a      	adds	r2, r3, #1
 8007ad6:	4918      	ldr	r1, [pc, #96]	@ (8007b38 <CDC_Receive_FS+0x98>)
 8007ad8:	600a      	str	r2, [r1, #0]
 8007ada:	4a18      	ldr	r2, [pc, #96]	@ (8007b3c <CDC_Receive_FS+0x9c>)
 8007adc:	2100      	movs	r1, #0
 8007ade:	54d1      	strb	r1, [r2, r3]
        ProcessCommand(buffer);       // Obdelamo prejeti ukaz
 8007ae0:	4816      	ldr	r0, [pc, #88]	@ (8007b3c <CDC_Receive_FS+0x9c>)
 8007ae2:	f7f8 fcfb 	bl	80004dc <ProcessCommand>
        bufferIndex = 0;              // Ponastavimo indeks za naslednji ukaz
 8007ae6:	4b14      	ldr	r3, [pc, #80]	@ (8007b38 <CDC_Receive_FS+0x98>)
 8007ae8:	2200      	movs	r2, #0
 8007aea:	601a      	str	r2, [r3, #0]
        continue;
 8007aec:	e011      	b.n	8007b12 <CDC_Receive_FS+0x72>
      }

      // Preprečimo prelivanje medpomnilnika
      if (bufferIndex >= BUFFER_SIZE - 1) {
 8007aee:	4b12      	ldr	r3, [pc, #72]	@ (8007b38 <CDC_Receive_FS+0x98>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2b7e      	cmp	r3, #126	@ 0x7e
 8007af4:	d902      	bls.n	8007afc <CDC_Receive_FS+0x5c>
        bufferIndex = 0;  // Ponastavimo, če se preseže velikost medpomnilnika
 8007af6:	4b10      	ldr	r3, [pc, #64]	@ (8007b38 <CDC_Receive_FS+0x98>)
 8007af8:	2200      	movs	r2, #0
 8007afa:	601a      	str	r2, [r3, #0]
      }

      buffer[bufferIndex++] = Buf[i]; // Dodamo znak v medpomnilnik
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	441a      	add	r2, r3
 8007b02:	4b0d      	ldr	r3, [pc, #52]	@ (8007b38 <CDC_Receive_FS+0x98>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	1c59      	adds	r1, r3, #1
 8007b08:	480b      	ldr	r0, [pc, #44]	@ (8007b38 <CDC_Receive_FS+0x98>)
 8007b0a:	6001      	str	r1, [r0, #0]
 8007b0c:	7811      	ldrb	r1, [r2, #0]
 8007b0e:	4a0b      	ldr	r2, [pc, #44]	@ (8007b3c <CDC_Receive_FS+0x9c>)
 8007b10:	54d1      	strb	r1, [r2, r3]
  for (uint32_t i = 0; i < *Len; ++i) {
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	3301      	adds	r3, #1
 8007b16:	60fb      	str	r3, [r7, #12]
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	68fa      	ldr	r2, [r7, #12]
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d3ca      	bcc.n	8007ab8 <CDC_Receive_FS+0x18>
    }
  //END CODE FOR LED
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007b22:	4804      	ldr	r0, [pc, #16]	@ (8007b34 <CDC_Receive_FS+0x94>)
 8007b24:	f7fe fbec 	bl	8006300 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007b28:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3710      	adds	r7, #16
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
 8007b32:	bf00      	nop
 8007b34:	2000025c 	.word	0x2000025c
 8007b38:	200005b8 	.word	0x200005b8
 8007b3c:	20000538 	.word	0x20000538

08007b40 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b087      	sub	sp, #28
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	60b9      	str	r1, [r7, #8]
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007b52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	371c      	adds	r7, #28
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr
	...

08007b64 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	6039      	str	r1, [r7, #0]
 8007b6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	2212      	movs	r2, #18
 8007b74:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007b76:	4b03      	ldr	r3, [pc, #12]	@ (8007b84 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	370c      	adds	r7, #12
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr
 8007b84:	200000c8 	.word	0x200000c8

08007b88 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b083      	sub	sp, #12
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	4603      	mov	r3, r0
 8007b90:	6039      	str	r1, [r7, #0]
 8007b92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	2204      	movs	r2, #4
 8007b98:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007b9a:	4b03      	ldr	r3, [pc, #12]	@ (8007ba8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	370c      	adds	r7, #12
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr
 8007ba8:	200000dc 	.word	0x200000dc

08007bac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b082      	sub	sp, #8
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	6039      	str	r1, [r7, #0]
 8007bb6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007bb8:	79fb      	ldrb	r3, [r7, #7]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d105      	bne.n	8007bca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007bbe:	683a      	ldr	r2, [r7, #0]
 8007bc0:	4907      	ldr	r1, [pc, #28]	@ (8007be0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007bc2:	4808      	ldr	r0, [pc, #32]	@ (8007be4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007bc4:	f7ff fde2 	bl	800778c <USBD_GetString>
 8007bc8:	e004      	b.n	8007bd4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007bca:	683a      	ldr	r2, [r7, #0]
 8007bcc:	4904      	ldr	r1, [pc, #16]	@ (8007be0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007bce:	4805      	ldr	r0, [pc, #20]	@ (8007be4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007bd0:	f7ff fddc 	bl	800778c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007bd4:	4b02      	ldr	r3, [pc, #8]	@ (8007be0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3708      	adds	r7, #8
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	bf00      	nop
 8007be0:	200015bc 	.word	0x200015bc
 8007be4:	0800842c 	.word	0x0800842c

08007be8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b082      	sub	sp, #8
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	4603      	mov	r3, r0
 8007bf0:	6039      	str	r1, [r7, #0]
 8007bf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007bf4:	683a      	ldr	r2, [r7, #0]
 8007bf6:	4904      	ldr	r1, [pc, #16]	@ (8007c08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007bf8:	4804      	ldr	r0, [pc, #16]	@ (8007c0c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007bfa:	f7ff fdc7 	bl	800778c <USBD_GetString>
  return USBD_StrDesc;
 8007bfe:	4b02      	ldr	r3, [pc, #8]	@ (8007c08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3708      	adds	r7, #8
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	200015bc 	.word	0x200015bc
 8007c0c:	08008444 	.word	0x08008444

08007c10 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b082      	sub	sp, #8
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	4603      	mov	r3, r0
 8007c18:	6039      	str	r1, [r7, #0]
 8007c1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	221a      	movs	r2, #26
 8007c20:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007c22:	f000 f843 	bl	8007cac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007c26:	4b02      	ldr	r3, [pc, #8]	@ (8007c30 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3708      	adds	r7, #8
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}
 8007c30:	200000e0 	.word	0x200000e0

08007c34 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	6039      	str	r1, [r7, #0]
 8007c3e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007c40:	79fb      	ldrb	r3, [r7, #7]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d105      	bne.n	8007c52 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c46:	683a      	ldr	r2, [r7, #0]
 8007c48:	4907      	ldr	r1, [pc, #28]	@ (8007c68 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007c4a:	4808      	ldr	r0, [pc, #32]	@ (8007c6c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c4c:	f7ff fd9e 	bl	800778c <USBD_GetString>
 8007c50:	e004      	b.n	8007c5c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c52:	683a      	ldr	r2, [r7, #0]
 8007c54:	4904      	ldr	r1, [pc, #16]	@ (8007c68 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007c56:	4805      	ldr	r0, [pc, #20]	@ (8007c6c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c58:	f7ff fd98 	bl	800778c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c5c:	4b02      	ldr	r3, [pc, #8]	@ (8007c68 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3708      	adds	r7, #8
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	bf00      	nop
 8007c68:	200015bc 	.word	0x200015bc
 8007c6c:	08008458 	.word	0x08008458

08007c70 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	4603      	mov	r3, r0
 8007c78:	6039      	str	r1, [r7, #0]
 8007c7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007c7c:	79fb      	ldrb	r3, [r7, #7]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d105      	bne.n	8007c8e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c82:	683a      	ldr	r2, [r7, #0]
 8007c84:	4907      	ldr	r1, [pc, #28]	@ (8007ca4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c86:	4808      	ldr	r0, [pc, #32]	@ (8007ca8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c88:	f7ff fd80 	bl	800778c <USBD_GetString>
 8007c8c:	e004      	b.n	8007c98 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c8e:	683a      	ldr	r2, [r7, #0]
 8007c90:	4904      	ldr	r1, [pc, #16]	@ (8007ca4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c92:	4805      	ldr	r0, [pc, #20]	@ (8007ca8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c94:	f7ff fd7a 	bl	800778c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c98:	4b02      	ldr	r3, [pc, #8]	@ (8007ca4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3708      	adds	r7, #8
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	200015bc 	.word	0x200015bc
 8007ca8:	08008464 	.word	0x08008464

08007cac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8007cf0 <Get_SerialNum+0x44>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007cb8:	4b0e      	ldr	r3, [pc, #56]	@ (8007cf4 <Get_SerialNum+0x48>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8007cf8 <Get_SerialNum+0x4c>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007cc4:	68fa      	ldr	r2, [r7, #12]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4413      	add	r3, r2
 8007cca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d009      	beq.n	8007ce6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007cd2:	2208      	movs	r2, #8
 8007cd4:	4909      	ldr	r1, [pc, #36]	@ (8007cfc <Get_SerialNum+0x50>)
 8007cd6:	68f8      	ldr	r0, [r7, #12]
 8007cd8:	f000 f814 	bl	8007d04 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007cdc:	2204      	movs	r2, #4
 8007cde:	4908      	ldr	r1, [pc, #32]	@ (8007d00 <Get_SerialNum+0x54>)
 8007ce0:	68b8      	ldr	r0, [r7, #8]
 8007ce2:	f000 f80f 	bl	8007d04 <IntToUnicode>
  }
}
 8007ce6:	bf00      	nop
 8007ce8:	3710      	adds	r7, #16
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	1fff7a10 	.word	0x1fff7a10
 8007cf4:	1fff7a14 	.word	0x1fff7a14
 8007cf8:	1fff7a18 	.word	0x1fff7a18
 8007cfc:	200000e2 	.word	0x200000e2
 8007d00:	200000f2 	.word	0x200000f2

08007d04 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b087      	sub	sp, #28
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	60f8      	str	r0, [r7, #12]
 8007d0c:	60b9      	str	r1, [r7, #8]
 8007d0e:	4613      	mov	r3, r2
 8007d10:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007d12:	2300      	movs	r3, #0
 8007d14:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007d16:	2300      	movs	r3, #0
 8007d18:	75fb      	strb	r3, [r7, #23]
 8007d1a:	e027      	b.n	8007d6c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	0f1b      	lsrs	r3, r3, #28
 8007d20:	2b09      	cmp	r3, #9
 8007d22:	d80b      	bhi.n	8007d3c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	0f1b      	lsrs	r3, r3, #28
 8007d28:	b2da      	uxtb	r2, r3
 8007d2a:	7dfb      	ldrb	r3, [r7, #23]
 8007d2c:	005b      	lsls	r3, r3, #1
 8007d2e:	4619      	mov	r1, r3
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	440b      	add	r3, r1
 8007d34:	3230      	adds	r2, #48	@ 0x30
 8007d36:	b2d2      	uxtb	r2, r2
 8007d38:	701a      	strb	r2, [r3, #0]
 8007d3a:	e00a      	b.n	8007d52 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	0f1b      	lsrs	r3, r3, #28
 8007d40:	b2da      	uxtb	r2, r3
 8007d42:	7dfb      	ldrb	r3, [r7, #23]
 8007d44:	005b      	lsls	r3, r3, #1
 8007d46:	4619      	mov	r1, r3
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	440b      	add	r3, r1
 8007d4c:	3237      	adds	r2, #55	@ 0x37
 8007d4e:	b2d2      	uxtb	r2, r2
 8007d50:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	011b      	lsls	r3, r3, #4
 8007d56:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007d58:	7dfb      	ldrb	r3, [r7, #23]
 8007d5a:	005b      	lsls	r3, r3, #1
 8007d5c:	3301      	adds	r3, #1
 8007d5e:	68ba      	ldr	r2, [r7, #8]
 8007d60:	4413      	add	r3, r2
 8007d62:	2200      	movs	r2, #0
 8007d64:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007d66:	7dfb      	ldrb	r3, [r7, #23]
 8007d68:	3301      	adds	r3, #1
 8007d6a:	75fb      	strb	r3, [r7, #23]
 8007d6c:	7dfa      	ldrb	r2, [r7, #23]
 8007d6e:	79fb      	ldrb	r3, [r7, #7]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d3d3      	bcc.n	8007d1c <IntToUnicode+0x18>
  }
}
 8007d74:	bf00      	nop
 8007d76:	bf00      	nop
 8007d78:	371c      	adds	r7, #28
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr
	...

08007d84 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b08a      	sub	sp, #40	@ 0x28
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d8c:	f107 0314 	add.w	r3, r7, #20
 8007d90:	2200      	movs	r2, #0
 8007d92:	601a      	str	r2, [r3, #0]
 8007d94:	605a      	str	r2, [r3, #4]
 8007d96:	609a      	str	r2, [r3, #8]
 8007d98:	60da      	str	r2, [r3, #12]
 8007d9a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007da4:	d147      	bne.n	8007e36 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007da6:	2300      	movs	r3, #0
 8007da8:	613b      	str	r3, [r7, #16]
 8007daa:	4b25      	ldr	r3, [pc, #148]	@ (8007e40 <HAL_PCD_MspInit+0xbc>)
 8007dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dae:	4a24      	ldr	r2, [pc, #144]	@ (8007e40 <HAL_PCD_MspInit+0xbc>)
 8007db0:	f043 0301 	orr.w	r3, r3, #1
 8007db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8007db6:	4b22      	ldr	r3, [pc, #136]	@ (8007e40 <HAL_PCD_MspInit+0xbc>)
 8007db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dba:	f003 0301 	and.w	r3, r3, #1
 8007dbe:	613b      	str	r3, [r7, #16]
 8007dc0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007dc2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007dd0:	f107 0314 	add.w	r3, r7, #20
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	481b      	ldr	r0, [pc, #108]	@ (8007e44 <HAL_PCD_MspInit+0xc0>)
 8007dd8:	f7f9 f98e 	bl	80010f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007ddc:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8007de0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007de2:	2302      	movs	r3, #2
 8007de4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007de6:	2300      	movs	r3, #0
 8007de8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007dea:	2303      	movs	r3, #3
 8007dec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007dee:	230a      	movs	r3, #10
 8007df0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007df2:	f107 0314 	add.w	r3, r7, #20
 8007df6:	4619      	mov	r1, r3
 8007df8:	4812      	ldr	r0, [pc, #72]	@ (8007e44 <HAL_PCD_MspInit+0xc0>)
 8007dfa:	f7f9 f97d 	bl	80010f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007dfe:	4b10      	ldr	r3, [pc, #64]	@ (8007e40 <HAL_PCD_MspInit+0xbc>)
 8007e00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e02:	4a0f      	ldr	r2, [pc, #60]	@ (8007e40 <HAL_PCD_MspInit+0xbc>)
 8007e04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e08:	6353      	str	r3, [r2, #52]	@ 0x34
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	60fb      	str	r3, [r7, #12]
 8007e0e:	4b0c      	ldr	r3, [pc, #48]	@ (8007e40 <HAL_PCD_MspInit+0xbc>)
 8007e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e12:	4a0b      	ldr	r2, [pc, #44]	@ (8007e40 <HAL_PCD_MspInit+0xbc>)
 8007e14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007e18:	6453      	str	r3, [r2, #68]	@ 0x44
 8007e1a:	4b09      	ldr	r3, [pc, #36]	@ (8007e40 <HAL_PCD_MspInit+0xbc>)
 8007e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007e22:	60fb      	str	r3, [r7, #12]
 8007e24:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007e26:	2200      	movs	r2, #0
 8007e28:	2100      	movs	r1, #0
 8007e2a:	2043      	movs	r0, #67	@ 0x43
 8007e2c:	f7f9 f92d 	bl	800108a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007e30:	2043      	movs	r0, #67	@ 0x43
 8007e32:	f7f9 f946 	bl	80010c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007e36:	bf00      	nop
 8007e38:	3728      	adds	r7, #40	@ 0x28
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	bf00      	nop
 8007e40:	40023800 	.word	0x40023800
 8007e44:	40020000 	.word	0x40020000

08007e48 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	4610      	mov	r0, r2
 8007e60:	f7fe fb37 	bl	80064d2 <USBD_LL_SetupStage>
}
 8007e64:	bf00      	nop
 8007e66:	3708      	adds	r7, #8
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b082      	sub	sp, #8
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	460b      	mov	r3, r1
 8007e76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 8007e7e:	78fa      	ldrb	r2, [r7, #3]
 8007e80:	6879      	ldr	r1, [r7, #4]
 8007e82:	4613      	mov	r3, r2
 8007e84:	00db      	lsls	r3, r3, #3
 8007e86:	4413      	add	r3, r2
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	440b      	add	r3, r1
 8007e8c:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	78fb      	ldrb	r3, [r7, #3]
 8007e94:	4619      	mov	r1, r3
 8007e96:	f7fe fb71 	bl	800657c <USBD_LL_DataOutStage>
}
 8007e9a:	bf00      	nop
 8007e9c:	3708      	adds	r7, #8
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	b082      	sub	sp, #8
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
 8007eaa:	460b      	mov	r3, r1
 8007eac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 8007eb4:	78fa      	ldrb	r2, [r7, #3]
 8007eb6:	6879      	ldr	r1, [r7, #4]
 8007eb8:	4613      	mov	r3, r2
 8007eba:	00db      	lsls	r3, r3, #3
 8007ebc:	4413      	add	r3, r2
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	440b      	add	r3, r1
 8007ec2:	334c      	adds	r3, #76	@ 0x4c
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	78fb      	ldrb	r3, [r7, #3]
 8007ec8:	4619      	mov	r1, r3
 8007eca:	f7fe fc0a 	bl	80066e2 <USBD_LL_DataInStage>
}
 8007ece:	bf00      	nop
 8007ed0:	3708      	adds	r7, #8
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}

08007ed6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ed6:	b580      	push	{r7, lr}
 8007ed8:	b082      	sub	sp, #8
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f7fe fd3e 	bl	8006966 <USBD_LL_SOF>
}
 8007eea:	bf00      	nop
 8007eec:	3708      	adds	r7, #8
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}

08007ef2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ef2:	b580      	push	{r7, lr}
 8007ef4:	b084      	sub	sp, #16
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007efa:	2301      	movs	r3, #1
 8007efc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	68db      	ldr	r3, [r3, #12]
 8007f02:	2b02      	cmp	r3, #2
 8007f04:	d001      	beq.n	8007f0a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007f06:	f7f8 fd4d 	bl	80009a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8007f10:	7bfa      	ldrb	r2, [r7, #15]
 8007f12:	4611      	mov	r1, r2
 8007f14:	4618      	mov	r0, r3
 8007f16:	f7fe fce8 	bl	80068ea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8007f20:	4618      	mov	r0, r3
 8007f22:	f7fe fc90 	bl	8006846 <USBD_LL_Reset>
}
 8007f26:	bf00      	nop
 8007f28:	3710      	adds	r7, #16
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
	...

08007f30 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f7fe fce3 	bl	800690a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	6812      	ldr	r2, [r2, #0]
 8007f52:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007f56:	f043 0301 	orr.w	r3, r3, #1
 8007f5a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6a1b      	ldr	r3, [r3, #32]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d005      	beq.n	8007f70 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007f64:	4b04      	ldr	r3, [pc, #16]	@ (8007f78 <HAL_PCD_SuspendCallback+0x48>)
 8007f66:	691b      	ldr	r3, [r3, #16]
 8007f68:	4a03      	ldr	r2, [pc, #12]	@ (8007f78 <HAL_PCD_SuspendCallback+0x48>)
 8007f6a:	f043 0306 	orr.w	r3, r3, #6
 8007f6e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007f70:	bf00      	nop
 8007f72:	3708      	adds	r7, #8
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}
 8007f78:	e000ed00 	.word	0xe000ed00

08007f7c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b082      	sub	sp, #8
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f7fe fcd3 	bl	8006936 <USBD_LL_Resume>
}
 8007f90:	bf00      	nop
 8007f92:	3708      	adds	r7, #8
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8007faa:	78fa      	ldrb	r2, [r7, #3]
 8007fac:	4611      	mov	r1, r2
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f7fe fd2b 	bl	8006a0a <USBD_LL_IsoOUTIncomplete>
}
 8007fb4:	bf00      	nop
 8007fb6:	3708      	adds	r7, #8
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b082      	sub	sp, #8
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8007fce:	78fa      	ldrb	r2, [r7, #3]
 8007fd0:	4611      	mov	r1, r2
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f7fe fce7 	bl	80069a6 <USBD_LL_IsoINIncomplete>
}
 8007fd8:	bf00      	nop
 8007fda:	3708      	adds	r7, #8
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b082      	sub	sp, #8
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f7fe fd3d 	bl	8006a6e <USBD_LL_DevConnected>
}
 8007ff4:	bf00      	nop
 8007ff6:	3708      	adds	r7, #8
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b082      	sub	sp, #8
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800800a:	4618      	mov	r0, r3
 800800c:	f7fe fd3a 	bl	8006a84 <USBD_LL_DevDisconnected>
}
 8008010:	bf00      	nop
 8008012:	3708      	adds	r7, #8
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d13c      	bne.n	80080a2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008028:	4a20      	ldr	r2, [pc, #128]	@ (80080ac <USBD_LL_Init+0x94>)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	4a1e      	ldr	r2, [pc, #120]	@ (80080ac <USBD_LL_Init+0x94>)
 8008034:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008038:	4b1c      	ldr	r3, [pc, #112]	@ (80080ac <USBD_LL_Init+0x94>)
 800803a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800803e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008040:	4b1a      	ldr	r3, [pc, #104]	@ (80080ac <USBD_LL_Init+0x94>)
 8008042:	2204      	movs	r2, #4
 8008044:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008046:	4b19      	ldr	r3, [pc, #100]	@ (80080ac <USBD_LL_Init+0x94>)
 8008048:	2202      	movs	r2, #2
 800804a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800804c:	4b17      	ldr	r3, [pc, #92]	@ (80080ac <USBD_LL_Init+0x94>)
 800804e:	2200      	movs	r2, #0
 8008050:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008052:	4b16      	ldr	r3, [pc, #88]	@ (80080ac <USBD_LL_Init+0x94>)
 8008054:	2202      	movs	r2, #2
 8008056:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008058:	4b14      	ldr	r3, [pc, #80]	@ (80080ac <USBD_LL_Init+0x94>)
 800805a:	2200      	movs	r2, #0
 800805c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800805e:	4b13      	ldr	r3, [pc, #76]	@ (80080ac <USBD_LL_Init+0x94>)
 8008060:	2200      	movs	r2, #0
 8008062:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008064:	4b11      	ldr	r3, [pc, #68]	@ (80080ac <USBD_LL_Init+0x94>)
 8008066:	2200      	movs	r2, #0
 8008068:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800806a:	4b10      	ldr	r3, [pc, #64]	@ (80080ac <USBD_LL_Init+0x94>)
 800806c:	2201      	movs	r2, #1
 800806e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008070:	4b0e      	ldr	r3, [pc, #56]	@ (80080ac <USBD_LL_Init+0x94>)
 8008072:	2200      	movs	r2, #0
 8008074:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008076:	480d      	ldr	r0, [pc, #52]	@ (80080ac <USBD_LL_Init+0x94>)
 8008078:	f7f9 ffc0 	bl	8001ffc <HAL_PCD_Init>
 800807c:	4603      	mov	r3, r0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d001      	beq.n	8008086 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008082:	f7f8 fc8f 	bl	80009a4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008086:	2180      	movs	r1, #128	@ 0x80
 8008088:	4808      	ldr	r0, [pc, #32]	@ (80080ac <USBD_LL_Init+0x94>)
 800808a:	f7fb fa18 	bl	80034be <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800808e:	2240      	movs	r2, #64	@ 0x40
 8008090:	2100      	movs	r1, #0
 8008092:	4806      	ldr	r0, [pc, #24]	@ (80080ac <USBD_LL_Init+0x94>)
 8008094:	f7fb f9cc 	bl	8003430 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008098:	2280      	movs	r2, #128	@ 0x80
 800809a:	2101      	movs	r1, #1
 800809c:	4803      	ldr	r0, [pc, #12]	@ (80080ac <USBD_LL_Init+0x94>)
 800809e:	f7fb f9c7 	bl	8003430 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80080a2:	2300      	movs	r3, #0
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3708      	adds	r7, #8
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}
 80080ac:	200017bc 	.word	0x200017bc

080080b0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b084      	sub	sp, #16
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080b8:	2300      	movs	r3, #0
 80080ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080bc:	2300      	movs	r3, #0
 80080be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7fa f8b5 	bl	8002236 <HAL_PCD_Start>
 80080cc:	4603      	mov	r3, r0
 80080ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080d0:	7bfb      	ldrb	r3, [r7, #15]
 80080d2:	4618      	mov	r0, r3
 80080d4:	f000 f942 	bl	800835c <USBD_Get_USB_Status>
 80080d8:	4603      	mov	r3, r0
 80080da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3710      	adds	r7, #16
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}

080080e6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80080e6:	b580      	push	{r7, lr}
 80080e8:	b084      	sub	sp, #16
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
 80080ee:	4608      	mov	r0, r1
 80080f0:	4611      	mov	r1, r2
 80080f2:	461a      	mov	r2, r3
 80080f4:	4603      	mov	r3, r0
 80080f6:	70fb      	strb	r3, [r7, #3]
 80080f8:	460b      	mov	r3, r1
 80080fa:	70bb      	strb	r3, [r7, #2]
 80080fc:	4613      	mov	r3, r2
 80080fe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008100:	2300      	movs	r3, #0
 8008102:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008104:	2300      	movs	r3, #0
 8008106:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800810e:	78bb      	ldrb	r3, [r7, #2]
 8008110:	883a      	ldrh	r2, [r7, #0]
 8008112:	78f9      	ldrb	r1, [r7, #3]
 8008114:	f7fa fd86 	bl	8002c24 <HAL_PCD_EP_Open>
 8008118:	4603      	mov	r3, r0
 800811a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800811c:	7bfb      	ldrb	r3, [r7, #15]
 800811e:	4618      	mov	r0, r3
 8008120:	f000 f91c 	bl	800835c <USBD_Get_USB_Status>
 8008124:	4603      	mov	r3, r0
 8008126:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008128:	7bbb      	ldrb	r3, [r7, #14]
}
 800812a:	4618      	mov	r0, r3
 800812c:	3710      	adds	r7, #16
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}

08008132 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008132:	b580      	push	{r7, lr}
 8008134:	b084      	sub	sp, #16
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
 800813a:	460b      	mov	r3, r1
 800813c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800813e:	2300      	movs	r3, #0
 8008140:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008142:	2300      	movs	r3, #0
 8008144:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800814c:	78fa      	ldrb	r2, [r7, #3]
 800814e:	4611      	mov	r1, r2
 8008150:	4618      	mov	r0, r3
 8008152:	f7fa fdcf 	bl	8002cf4 <HAL_PCD_EP_Close>
 8008156:	4603      	mov	r3, r0
 8008158:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800815a:	7bfb      	ldrb	r3, [r7, #15]
 800815c:	4618      	mov	r0, r3
 800815e:	f000 f8fd 	bl	800835c <USBD_Get_USB_Status>
 8008162:	4603      	mov	r3, r0
 8008164:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008166:	7bbb      	ldrb	r3, [r7, #14]
}
 8008168:	4618      	mov	r0, r3
 800816a:	3710      	adds	r7, #16
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	460b      	mov	r3, r1
 800817a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800817c:	2300      	movs	r3, #0
 800817e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008180:	2300      	movs	r3, #0
 8008182:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800818a:	78fa      	ldrb	r2, [r7, #3]
 800818c:	4611      	mov	r1, r2
 800818e:	4618      	mov	r0, r3
 8008190:	f7fa fea7 	bl	8002ee2 <HAL_PCD_EP_SetStall>
 8008194:	4603      	mov	r3, r0
 8008196:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008198:	7bfb      	ldrb	r3, [r7, #15]
 800819a:	4618      	mov	r0, r3
 800819c:	f000 f8de 	bl	800835c <USBD_Get_USB_Status>
 80081a0:	4603      	mov	r3, r0
 80081a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3710      	adds	r7, #16
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b084      	sub	sp, #16
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
 80081b6:	460b      	mov	r3, r1
 80081b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081ba:	2300      	movs	r3, #0
 80081bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081be:	2300      	movs	r3, #0
 80081c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80081c8:	78fa      	ldrb	r2, [r7, #3]
 80081ca:	4611      	mov	r1, r2
 80081cc:	4618      	mov	r0, r3
 80081ce:	f7fa feec 	bl	8002faa <HAL_PCD_EP_ClrStall>
 80081d2:	4603      	mov	r3, r0
 80081d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081d6:	7bfb      	ldrb	r3, [r7, #15]
 80081d8:	4618      	mov	r0, r3
 80081da:	f000 f8bf 	bl	800835c <USBD_Get_USB_Status>
 80081de:	4603      	mov	r3, r0
 80081e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3710      	adds	r7, #16
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b085      	sub	sp, #20
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	460b      	mov	r3, r1
 80081f6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80081fe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008200:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008204:	2b00      	cmp	r3, #0
 8008206:	da0b      	bge.n	8008220 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008208:	78fb      	ldrb	r3, [r7, #3]
 800820a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800820e:	68f9      	ldr	r1, [r7, #12]
 8008210:	4613      	mov	r3, r2
 8008212:	00db      	lsls	r3, r3, #3
 8008214:	4413      	add	r3, r2
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	440b      	add	r3, r1
 800821a:	333e      	adds	r3, #62	@ 0x3e
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	e00b      	b.n	8008238 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008220:	78fb      	ldrb	r3, [r7, #3]
 8008222:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008226:	68f9      	ldr	r1, [r7, #12]
 8008228:	4613      	mov	r3, r2
 800822a:	00db      	lsls	r3, r3, #3
 800822c:	4413      	add	r3, r2
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	440b      	add	r3, r1
 8008232:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 8008236:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008238:	4618      	mov	r0, r3
 800823a:	3714      	adds	r7, #20
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	460b      	mov	r3, r1
 800824e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008250:	2300      	movs	r3, #0
 8008252:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008254:	2300      	movs	r3, #0
 8008256:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800825e:	78fa      	ldrb	r2, [r7, #3]
 8008260:	4611      	mov	r1, r2
 8008262:	4618      	mov	r0, r3
 8008264:	f7fa fcb9 	bl	8002bda <HAL_PCD_SetAddress>
 8008268:	4603      	mov	r3, r0
 800826a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800826c:	7bfb      	ldrb	r3, [r7, #15]
 800826e:	4618      	mov	r0, r3
 8008270:	f000 f874 	bl	800835c <USBD_Get_USB_Status>
 8008274:	4603      	mov	r3, r0
 8008276:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008278:	7bbb      	ldrb	r3, [r7, #14]
}
 800827a:	4618      	mov	r0, r3
 800827c:	3710      	adds	r7, #16
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}

08008282 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008282:	b580      	push	{r7, lr}
 8008284:	b086      	sub	sp, #24
 8008286:	af00      	add	r7, sp, #0
 8008288:	60f8      	str	r0, [r7, #12]
 800828a:	607a      	str	r2, [r7, #4]
 800828c:	603b      	str	r3, [r7, #0]
 800828e:	460b      	mov	r3, r1
 8008290:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008292:	2300      	movs	r3, #0
 8008294:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008296:	2300      	movs	r3, #0
 8008298:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80082a0:	7af9      	ldrb	r1, [r7, #11]
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	f7fa fdd2 	bl	8002e4e <HAL_PCD_EP_Transmit>
 80082aa:	4603      	mov	r3, r0
 80082ac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082ae:	7dfb      	ldrb	r3, [r7, #23]
 80082b0:	4618      	mov	r0, r3
 80082b2:	f000 f853 	bl	800835c <USBD_Get_USB_Status>
 80082b6:	4603      	mov	r3, r0
 80082b8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80082ba:	7dbb      	ldrb	r3, [r7, #22]
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3718      	adds	r7, #24
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b086      	sub	sp, #24
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	60f8      	str	r0, [r7, #12]
 80082cc:	607a      	str	r2, [r7, #4]
 80082ce:	603b      	str	r3, [r7, #0]
 80082d0:	460b      	mov	r3, r1
 80082d2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082d4:	2300      	movs	r3, #0
 80082d6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082d8:	2300      	movs	r3, #0
 80082da:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80082e2:	7af9      	ldrb	r1, [r7, #11]
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	f7fa fd4e 	bl	8002d88 <HAL_PCD_EP_Receive>
 80082ec:	4603      	mov	r3, r0
 80082ee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082f0:	7dfb      	ldrb	r3, [r7, #23]
 80082f2:	4618      	mov	r0, r3
 80082f4:	f000 f832 	bl	800835c <USBD_Get_USB_Status>
 80082f8:	4603      	mov	r3, r0
 80082fa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80082fc:	7dbb      	ldrb	r3, [r7, #22]
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3718      	adds	r7, #24
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}

08008306 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008306:	b580      	push	{r7, lr}
 8008308:	b082      	sub	sp, #8
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
 800830e:	460b      	mov	r3, r1
 8008310:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008318:	78fa      	ldrb	r2, [r7, #3]
 800831a:	4611      	mov	r1, r2
 800831c:	4618      	mov	r0, r3
 800831e:	f7fa fd7e 	bl	8002e1e <HAL_PCD_EP_GetRxCount>
 8008322:	4603      	mov	r3, r0
}
 8008324:	4618      	mov	r0, r3
 8008326:	3708      	adds	r7, #8
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008334:	4b03      	ldr	r3, [pc, #12]	@ (8008344 <USBD_static_malloc+0x18>)
}
 8008336:	4618      	mov	r0, r3
 8008338:	370c      	adds	r7, #12
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr
 8008342:	bf00      	nop
 8008344:	20001cc8 	.word	0x20001cc8

08008348 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008348:	b480      	push	{r7}
 800834a:	b083      	sub	sp, #12
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]

}
 8008350:	bf00      	nop
 8008352:	370c      	adds	r7, #12
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800835c:	b480      	push	{r7}
 800835e:	b085      	sub	sp, #20
 8008360:	af00      	add	r7, sp, #0
 8008362:	4603      	mov	r3, r0
 8008364:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008366:	2300      	movs	r3, #0
 8008368:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800836a:	79fb      	ldrb	r3, [r7, #7]
 800836c:	2b03      	cmp	r3, #3
 800836e:	d817      	bhi.n	80083a0 <USBD_Get_USB_Status+0x44>
 8008370:	a201      	add	r2, pc, #4	@ (adr r2, 8008378 <USBD_Get_USB_Status+0x1c>)
 8008372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008376:	bf00      	nop
 8008378:	08008389 	.word	0x08008389
 800837c:	0800838f 	.word	0x0800838f
 8008380:	08008395 	.word	0x08008395
 8008384:	0800839b 	.word	0x0800839b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008388:	2300      	movs	r3, #0
 800838a:	73fb      	strb	r3, [r7, #15]
    break;
 800838c:	e00b      	b.n	80083a6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800838e:	2303      	movs	r3, #3
 8008390:	73fb      	strb	r3, [r7, #15]
    break;
 8008392:	e008      	b.n	80083a6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008394:	2301      	movs	r3, #1
 8008396:	73fb      	strb	r3, [r7, #15]
    break;
 8008398:	e005      	b.n	80083a6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800839a:	2303      	movs	r3, #3
 800839c:	73fb      	strb	r3, [r7, #15]
    break;
 800839e:	e002      	b.n	80083a6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80083a0:	2303      	movs	r3, #3
 80083a2:	73fb      	strb	r3, [r7, #15]
    break;
 80083a4:	bf00      	nop
  }
  return usb_status;
 80083a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3714      	adds	r7, #20
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr

080083b4 <memset>:
 80083b4:	4402      	add	r2, r0
 80083b6:	4603      	mov	r3, r0
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d100      	bne.n	80083be <memset+0xa>
 80083bc:	4770      	bx	lr
 80083be:	f803 1b01 	strb.w	r1, [r3], #1
 80083c2:	e7f9      	b.n	80083b8 <memset+0x4>

080083c4 <__libc_init_array>:
 80083c4:	b570      	push	{r4, r5, r6, lr}
 80083c6:	4d0d      	ldr	r5, [pc, #52]	@ (80083fc <__libc_init_array+0x38>)
 80083c8:	4c0d      	ldr	r4, [pc, #52]	@ (8008400 <__libc_init_array+0x3c>)
 80083ca:	1b64      	subs	r4, r4, r5
 80083cc:	10a4      	asrs	r4, r4, #2
 80083ce:	2600      	movs	r6, #0
 80083d0:	42a6      	cmp	r6, r4
 80083d2:	d109      	bne.n	80083e8 <__libc_init_array+0x24>
 80083d4:	4d0b      	ldr	r5, [pc, #44]	@ (8008404 <__libc_init_array+0x40>)
 80083d6:	4c0c      	ldr	r4, [pc, #48]	@ (8008408 <__libc_init_array+0x44>)
 80083d8:	f000 f818 	bl	800840c <_init>
 80083dc:	1b64      	subs	r4, r4, r5
 80083de:	10a4      	asrs	r4, r4, #2
 80083e0:	2600      	movs	r6, #0
 80083e2:	42a6      	cmp	r6, r4
 80083e4:	d105      	bne.n	80083f2 <__libc_init_array+0x2e>
 80083e6:	bd70      	pop	{r4, r5, r6, pc}
 80083e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80083ec:	4798      	blx	r3
 80083ee:	3601      	adds	r6, #1
 80083f0:	e7ee      	b.n	80083d0 <__libc_init_array+0xc>
 80083f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80083f6:	4798      	blx	r3
 80083f8:	3601      	adds	r6, #1
 80083fa:	e7f2      	b.n	80083e2 <__libc_init_array+0x1e>
 80083fc:	08008494 	.word	0x08008494
 8008400:	08008494 	.word	0x08008494
 8008404:	08008494 	.word	0x08008494
 8008408:	08008498 	.word	0x08008498

0800840c <_init>:
 800840c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800840e:	bf00      	nop
 8008410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008412:	bc08      	pop	{r3}
 8008414:	469e      	mov	lr, r3
 8008416:	4770      	bx	lr

08008418 <_fini>:
 8008418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800841a:	bf00      	nop
 800841c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800841e:	bc08      	pop	{r3}
 8008420:	469e      	mov	lr, r3
 8008422:	4770      	bx	lr
