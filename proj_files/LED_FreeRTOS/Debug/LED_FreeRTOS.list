
LED_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b698  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  0800b838  0800b838  0001b838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b934  0800b934  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  0800b934  0800b934  0001b934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b93c  0800b93c  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b93c  0800b93c  0001b93c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b940  0800b940  0001b940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  0800b944  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006858  20000164  0800baa8  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200069bc  0800baa8  000269bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026684  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000536d  00000000  00000000  00046818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f68  00000000  00000000  0004bb88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d58  00000000  00000000  0004daf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000774d  00000000  00000000  0004f848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025d2f  00000000  00000000  00056f95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0c13  00000000  00000000  0007ccc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011d8d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008854  00000000  00000000  0011d928  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000164 	.word	0x20000164
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b820 	.word	0x0800b820

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000168 	.word	0x20000168
 80001dc:	0800b820 	.word	0x0800b820

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <__aeabi_uldivmod>:
 80001f4:	b953      	cbnz	r3, 800020c <__aeabi_uldivmod+0x18>
 80001f6:	b94a      	cbnz	r2, 800020c <__aeabi_uldivmod+0x18>
 80001f8:	2900      	cmp	r1, #0
 80001fa:	bf08      	it	eq
 80001fc:	2800      	cmpeq	r0, #0
 80001fe:	bf1c      	itt	ne
 8000200:	f04f 31ff 	movne.w	r1, #4294967295
 8000204:	f04f 30ff 	movne.w	r0, #4294967295
 8000208:	f000 b974 	b.w	80004f4 <__aeabi_idiv0>
 800020c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000210:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000214:	f000 f806 	bl	8000224 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4770      	bx	lr

08000224 <__udivmoddi4>:
 8000224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000228:	9d08      	ldr	r5, [sp, #32]
 800022a:	4604      	mov	r4, r0
 800022c:	468e      	mov	lr, r1
 800022e:	2b00      	cmp	r3, #0
 8000230:	d14d      	bne.n	80002ce <__udivmoddi4+0xaa>
 8000232:	428a      	cmp	r2, r1
 8000234:	4694      	mov	ip, r2
 8000236:	d969      	bls.n	800030c <__udivmoddi4+0xe8>
 8000238:	fab2 f282 	clz	r2, r2
 800023c:	b152      	cbz	r2, 8000254 <__udivmoddi4+0x30>
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	f1c2 0120 	rsb	r1, r2, #32
 8000246:	fa20 f101 	lsr.w	r1, r0, r1
 800024a:	fa0c fc02 	lsl.w	ip, ip, r2
 800024e:	ea41 0e03 	orr.w	lr, r1, r3
 8000252:	4094      	lsls	r4, r2
 8000254:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000258:	0c21      	lsrs	r1, r4, #16
 800025a:	fbbe f6f8 	udiv	r6, lr, r8
 800025e:	fa1f f78c 	uxth.w	r7, ip
 8000262:	fb08 e316 	mls	r3, r8, r6, lr
 8000266:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800026a:	fb06 f107 	mul.w	r1, r6, r7
 800026e:	4299      	cmp	r1, r3
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x64>
 8000272:	eb1c 0303 	adds.w	r3, ip, r3
 8000276:	f106 30ff 	add.w	r0, r6, #4294967295
 800027a:	f080 811f 	bcs.w	80004bc <__udivmoddi4+0x298>
 800027e:	4299      	cmp	r1, r3
 8000280:	f240 811c 	bls.w	80004bc <__udivmoddi4+0x298>
 8000284:	3e02      	subs	r6, #2
 8000286:	4463      	add	r3, ip
 8000288:	1a5b      	subs	r3, r3, r1
 800028a:	b2a4      	uxth	r4, r4
 800028c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000290:	fb08 3310 	mls	r3, r8, r0, r3
 8000294:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000298:	fb00 f707 	mul.w	r7, r0, r7
 800029c:	42a7      	cmp	r7, r4
 800029e:	d90a      	bls.n	80002b6 <__udivmoddi4+0x92>
 80002a0:	eb1c 0404 	adds.w	r4, ip, r4
 80002a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a8:	f080 810a 	bcs.w	80004c0 <__udivmoddi4+0x29c>
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	f240 8107 	bls.w	80004c0 <__udivmoddi4+0x29c>
 80002b2:	4464      	add	r4, ip
 80002b4:	3802      	subs	r0, #2
 80002b6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ba:	1be4      	subs	r4, r4, r7
 80002bc:	2600      	movs	r6, #0
 80002be:	b11d      	cbz	r5, 80002c8 <__udivmoddi4+0xa4>
 80002c0:	40d4      	lsrs	r4, r2
 80002c2:	2300      	movs	r3, #0
 80002c4:	e9c5 4300 	strd	r4, r3, [r5]
 80002c8:	4631      	mov	r1, r6
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d909      	bls.n	80002e6 <__udivmoddi4+0xc2>
 80002d2:	2d00      	cmp	r5, #0
 80002d4:	f000 80ef 	beq.w	80004b6 <__udivmoddi4+0x292>
 80002d8:	2600      	movs	r6, #0
 80002da:	e9c5 0100 	strd	r0, r1, [r5]
 80002de:	4630      	mov	r0, r6
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	fab3 f683 	clz	r6, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d14a      	bne.n	8000384 <__udivmoddi4+0x160>
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xd4>
 80002f2:	4282      	cmp	r2, r0
 80002f4:	f200 80f9 	bhi.w	80004ea <__udivmoddi4+0x2c6>
 80002f8:	1a84      	subs	r4, r0, r2
 80002fa:	eb61 0303 	sbc.w	r3, r1, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	469e      	mov	lr, r3
 8000302:	2d00      	cmp	r5, #0
 8000304:	d0e0      	beq.n	80002c8 <__udivmoddi4+0xa4>
 8000306:	e9c5 4e00 	strd	r4, lr, [r5]
 800030a:	e7dd      	b.n	80002c8 <__udivmoddi4+0xa4>
 800030c:	b902      	cbnz	r2, 8000310 <__udivmoddi4+0xec>
 800030e:	deff      	udf	#255	; 0xff
 8000310:	fab2 f282 	clz	r2, r2
 8000314:	2a00      	cmp	r2, #0
 8000316:	f040 8092 	bne.w	800043e <__udivmoddi4+0x21a>
 800031a:	eba1 010c 	sub.w	r1, r1, ip
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2601      	movs	r6, #1
 8000328:	0c20      	lsrs	r0, r4, #16
 800032a:	fbb1 f3f7 	udiv	r3, r1, r7
 800032e:	fb07 1113 	mls	r1, r7, r3, r1
 8000332:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000336:	fb0e f003 	mul.w	r0, lr, r3
 800033a:	4288      	cmp	r0, r1
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x12c>
 800033e:	eb1c 0101 	adds.w	r1, ip, r1
 8000342:	f103 38ff 	add.w	r8, r3, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x12a>
 8000348:	4288      	cmp	r0, r1
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2c0>
 800034e:	4643      	mov	r3, r8
 8000350:	1a09      	subs	r1, r1, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb1 f0f7 	udiv	r0, r1, r7
 8000358:	fb07 1110 	mls	r1, r7, r0, r1
 800035c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x156>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x154>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2ca>
 8000378:	4608      	mov	r0, r1
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000382:	e79c      	b.n	80002be <__udivmoddi4+0x9a>
 8000384:	f1c6 0720 	rsb	r7, r6, #32
 8000388:	40b3      	lsls	r3, r6
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa20 f407 	lsr.w	r4, r0, r7
 8000396:	fa01 f306 	lsl.w	r3, r1, r6
 800039a:	431c      	orrs	r4, r3
 800039c:	40f9      	lsrs	r1, r7
 800039e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a2:	fa00 f306 	lsl.w	r3, r0, r6
 80003a6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003aa:	0c20      	lsrs	r0, r4, #16
 80003ac:	fa1f fe8c 	uxth.w	lr, ip
 80003b0:	fb09 1118 	mls	r1, r9, r8, r1
 80003b4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b8:	fb08 f00e 	mul.w	r0, r8, lr
 80003bc:	4288      	cmp	r0, r1
 80003be:	fa02 f206 	lsl.w	r2, r2, r6
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b8>
 80003c4:	eb1c 0101 	adds.w	r1, ip, r1
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2bc>
 80003d0:	4288      	cmp	r0, r1
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2bc>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4461      	add	r1, ip
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e4:	fb09 1110 	mls	r1, r9, r0, r1
 80003e8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003ec:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f0:	458e      	cmp	lr, r1
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1e2>
 80003f4:	eb1c 0101 	adds.w	r1, ip, r1
 80003f8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2b4>
 80003fe:	458e      	cmp	lr, r1
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2b4>
 8000402:	3802      	subs	r0, #2
 8000404:	4461      	add	r1, ip
 8000406:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800040a:	fba0 9402 	umull	r9, r4, r0, r2
 800040e:	eba1 010e 	sub.w	r1, r1, lr
 8000412:	42a1      	cmp	r1, r4
 8000414:	46c8      	mov	r8, r9
 8000416:	46a6      	mov	lr, r4
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x2a4>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x2a0>
 800041c:	b15d      	cbz	r5, 8000436 <__udivmoddi4+0x212>
 800041e:	ebb3 0208 	subs.w	r2, r3, r8
 8000422:	eb61 010e 	sbc.w	r1, r1, lr
 8000426:	fa01 f707 	lsl.w	r7, r1, r7
 800042a:	fa22 f306 	lsr.w	r3, r2, r6
 800042e:	40f1      	lsrs	r1, r6
 8000430:	431f      	orrs	r7, r3
 8000432:	e9c5 7100 	strd	r7, r1, [r5]
 8000436:	2600      	movs	r6, #0
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	f1c2 0320 	rsb	r3, r2, #32
 8000442:	40d8      	lsrs	r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa21 f303 	lsr.w	r3, r1, r3
 800044c:	4091      	lsls	r1, r2
 800044e:	4301      	orrs	r1, r0
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb3 f0f7 	udiv	r0, r3, r7
 800045c:	fb07 3610 	mls	r6, r7, r0, r3
 8000460:	0c0b      	lsrs	r3, r1, #16
 8000462:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000466:	fb00 f60e 	mul.w	r6, r0, lr
 800046a:	429e      	cmp	r6, r3
 800046c:	fa04 f402 	lsl.w	r4, r4, r2
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x260>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b8>
 800047c:	429e      	cmp	r6, r3
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b8>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	b289      	uxth	r1, r1
 8000488:	fbb3 f6f7 	udiv	r6, r3, r7
 800048c:	fb07 3316 	mls	r3, r7, r6, r3
 8000490:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000494:	fb06 f30e 	mul.w	r3, r6, lr
 8000498:	428b      	cmp	r3, r1
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x28a>
 800049c:	eb1c 0101 	adds.w	r1, ip, r1
 80004a0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2b0>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2b0>
 80004aa:	3e02      	subs	r6, #2
 80004ac:	4461      	add	r1, ip
 80004ae:	1ac9      	subs	r1, r1, r3
 80004b0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0x104>
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e705      	b.n	80002c8 <__udivmoddi4+0xa4>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e3      	b.n	8000288 <__udivmoddi4+0x64>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6f8      	b.n	80002b6 <__udivmoddi4+0x92>
 80004c4:	454b      	cmp	r3, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f8>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f8>
 80004d4:	4646      	mov	r6, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x28a>
 80004d8:	4620      	mov	r0, r4
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1e2>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x260>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b8>
 80004e4:	3b02      	subs	r3, #2
 80004e6:	4461      	add	r1, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x12c>
 80004ea:	4630      	mov	r0, r6
 80004ec:	e709      	b.n	8000302 <__udivmoddi4+0xde>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x156>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <Opravilo_LED>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Opravilo_LED(void *argument)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	{
	    char *msg;
	    while (1)
	    {
	        if (xQueueReceive(cdcRxQueue, &msg, portMAX_DELAY) == pdPASS)
 8000500:	4b14      	ldr	r3, [pc, #80]	; (8000554 <Opravilo_LED+0x5c>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	f107 010c 	add.w	r1, r7, #12
 8000508:	f04f 32ff 	mov.w	r2, #4294967295
 800050c:	4618      	mov	r0, r3
 800050e:	f008 fa4d 	bl	80089ac <xQueueReceive>
 8000512:	4603      	mov	r3, r0
 8000514:	2b01      	cmp	r3, #1
 8000516:	d1f3      	bne.n	8000500 <Opravilo_LED+0x8>
	        {
	            if (strcmp(msg, "ON") == 0)
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	490f      	ldr	r1, [pc, #60]	; (8000558 <Opravilo_LED+0x60>)
 800051c:	4618      	mov	r0, r3
 800051e:	f7ff fe5f 	bl	80001e0 <strcmp>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d106      	bne.n	8000536 <Opravilo_LED+0x3e>
	            {
	                HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET); // Turn on LED
 8000528:	2201      	movs	r2, #1
 800052a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800052e:	480b      	ldr	r0, [pc, #44]	; (800055c <Opravilo_LED+0x64>)
 8000530:	f000 ffe6 	bl	8001500 <HAL_GPIO_WritePin>
 8000534:	e7e4      	b.n	8000500 <Opravilo_LED+0x8>
	            }
	            else if (strcmp(msg, "OFF") == 0)
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	4909      	ldr	r1, [pc, #36]	; (8000560 <Opravilo_LED+0x68>)
 800053a:	4618      	mov	r0, r3
 800053c:	f7ff fe50 	bl	80001e0 <strcmp>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d1dc      	bne.n	8000500 <Opravilo_LED+0x8>
	            {
	                HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET); // Turn off LED
 8000546:	2200      	movs	r2, #0
 8000548:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800054c:	4803      	ldr	r0, [pc, #12]	; (800055c <Opravilo_LED+0x64>)
 800054e:	f000 ffd7 	bl	8001500 <HAL_GPIO_WritePin>
	        if (xQueueReceive(cdcRxQueue, &msg, portMAX_DELAY) == pdPASS)
 8000552:	e7d5      	b.n	8000500 <Opravilo_LED+0x8>
 8000554:	200002c4 	.word	0x200002c4
 8000558:	0800b844 	.word	0x0800b844
 800055c:	40020c00 	.word	0x40020c00
 8000560:	0800b848 	.word	0x0800b848

08000564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af02      	add	r7, sp, #8
  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
 800056a:	f000 fcfd 	bl	8000f68 <HAL_Init>
  SystemClock_Config();
 800056e:	f000 f837 	bl	80005e0 <SystemClock_Config>
  PeriphCommonClock_Config();
 8000572:	f000 f89d 	bl	80006b0 <PeriphCommonClock_Config>

  MX_GPIO_Init();
 8000576:	f000 f97d 	bl	8000874 <MX_GPIO_Init>
  MX_I2C1_Init();
 800057a:	f000 f8b9 	bl	80006f0 <MX_I2C1_Init>
  MX_I2S2_Init();
 800057e:	f000 f8e5 	bl	800074c <MX_I2S2_Init>
  MX_I2S3_Init();
 8000582:	f000 f911 	bl	80007a8 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000586:	f000 f93f 	bl	8000808 <MX_SPI1_Init>

  cdcRxQueue = xQueueCreate(10, sizeof(char *));
 800058a:	2200      	movs	r2, #0
 800058c:	2104      	movs	r1, #4
 800058e:	200a      	movs	r0, #10
 8000590:	f008 f814 	bl	80085bc <xQueueGenericCreate>
 8000594:	4603      	mov	r3, r0
 8000596:	4a0c      	ldr	r2, [pc, #48]	; (80005c8 <main+0x64>)
 8000598:	6013      	str	r3, [r2, #0]

  xTaskCreate(Opravilo_LED, "Opravilo LED", 128, NULL, 2, &Opravilo_LEDHandle);
 800059a:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <main+0x68>)
 800059c:	9301      	str	r3, [sp, #4]
 800059e:	2302      	movs	r3, #2
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	2300      	movs	r3, #0
 80005a4:	2280      	movs	r2, #128	; 0x80
 80005a6:	490a      	ldr	r1, [pc, #40]	; (80005d0 <main+0x6c>)
 80005a8:	480a      	ldr	r0, [pc, #40]	; (80005d4 <main+0x70>)
 80005aa:	f008 fcaa 	bl	8008f02 <xTaskCreate>

  osKernelInitialize();
 80005ae:	f007 fd45 	bl	800803c <osKernelInitialize>

  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, NULL);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2100      	movs	r1, #0
 80005b6:	4808      	ldr	r0, [pc, #32]	; (80005d8 <main+0x74>)
 80005b8:	f007 fd8a 	bl	80080d0 <osThreadNew>
 80005bc:	4603      	mov	r3, r0
 80005be:	4a07      	ldr	r2, [pc, #28]	; (80005dc <main+0x78>)
 80005c0:	6013      	str	r3, [r2, #0]

  osKernelStart();
 80005c2:	f007 fd5f 	bl	8008084 <osKernelStart>

  while (1)
 80005c6:	e7fe      	b.n	80005c6 <main+0x62>
 80005c8:	200002c4 	.word	0x200002c4
 80005cc:	200002c0 	.word	0x200002c0
 80005d0:	0800b84c 	.word	0x0800b84c
 80005d4:	080004f9 	.word	0x080004f9
 80005d8:	08000a55 	.word	0x08000a55
 80005dc:	200002bc 	.word	0x200002bc

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b094      	sub	sp, #80	; 0x50
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 0320 	add.w	r3, r7, #32
 80005ea:	2230      	movs	r2, #48	; 0x30
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f00b f84c 	bl	800b68c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000604:	2300      	movs	r3, #0
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	4b27      	ldr	r3, [pc, #156]	; (80006a8 <SystemClock_Config+0xc8>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	4a26      	ldr	r2, [pc, #152]	; (80006a8 <SystemClock_Config+0xc8>)
 800060e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000612:	6413      	str	r3, [r2, #64]	; 0x40
 8000614:	4b24      	ldr	r3, [pc, #144]	; (80006a8 <SystemClock_Config+0xc8>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000620:	2300      	movs	r3, #0
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	4b21      	ldr	r3, [pc, #132]	; (80006ac <SystemClock_Config+0xcc>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a20      	ldr	r2, [pc, #128]	; (80006ac <SystemClock_Config+0xcc>)
 800062a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800062e:	6013      	str	r3, [r2, #0]
 8000630:	4b1e      	ldr	r3, [pc, #120]	; (80006ac <SystemClock_Config+0xcc>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800063c:	2301      	movs	r3, #1
 800063e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000640:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000644:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000646:	2302      	movs	r3, #2
 8000648:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800064a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800064e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000650:	2304      	movs	r3, #4
 8000652:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000654:	23c0      	movs	r3, #192	; 0xc0
 8000656:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000658:	2304      	movs	r3, #4
 800065a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800065c:	2308      	movs	r3, #8
 800065e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000660:	f107 0320 	add.w	r3, r7, #32
 8000664:	4618      	mov	r0, r3
 8000666:	f002 ffc7 	bl	80035f8 <HAL_RCC_OscConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000670:	f000 fa09 	bl	8000a86 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000674:	230f      	movs	r3, #15
 8000676:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000678:	2302      	movs	r3, #2
 800067a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000680:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000684:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800068a:	f107 030c 	add.w	r3, r7, #12
 800068e:	2103      	movs	r1, #3
 8000690:	4618      	mov	r0, r3
 8000692:	f003 fa29 	bl	8003ae8 <HAL_RCC_ClockConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800069c:	f000 f9f3 	bl	8000a86 <Error_Handler>
  }
}
 80006a0:	bf00      	nop
 80006a2:	3750      	adds	r7, #80	; 0x50
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40007000 	.word	0x40007000

080006b0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b086      	sub	sp, #24
 80006b4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006b6:	463b      	mov	r3, r7
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]
 80006c4:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80006c6:	2301      	movs	r3, #1
 80006c8:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80006ca:	23c8      	movs	r3, #200	; 0xc8
 80006cc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80006ce:	2305      	movs	r3, #5
 80006d0:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006d6:	463b      	mov	r3, r7
 80006d8:	4618      	mov	r0, r3
 80006da:	f003 fc43 	bl	8003f64 <HAL_RCCEx_PeriphCLKConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80006e4:	f000 f9cf 	bl	8000a86 <Error_Handler>
  }
}
 80006e8:	bf00      	nop
 80006ea:	3718      	adds	r7, #24
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006f4:	4b12      	ldr	r3, [pc, #72]	; (8000740 <MX_I2C1_Init+0x50>)
 80006f6:	4a13      	ldr	r2, [pc, #76]	; (8000744 <MX_I2C1_Init+0x54>)
 80006f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006fa:	4b11      	ldr	r3, [pc, #68]	; (8000740 <MX_I2C1_Init+0x50>)
 80006fc:	4a12      	ldr	r2, [pc, #72]	; (8000748 <MX_I2C1_Init+0x58>)
 80006fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000700:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <MX_I2C1_Init+0x50>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <MX_I2C1_Init+0x50>)
 8000708:	2200      	movs	r2, #0
 800070a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <MX_I2C1_Init+0x50>)
 800070e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000712:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000714:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <MX_I2C1_Init+0x50>)
 8000716:	2200      	movs	r2, #0
 8000718:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800071a:	4b09      	ldr	r3, [pc, #36]	; (8000740 <MX_I2C1_Init+0x50>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000720:	4b07      	ldr	r3, [pc, #28]	; (8000740 <MX_I2C1_Init+0x50>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000726:	4b06      	ldr	r3, [pc, #24]	; (8000740 <MX_I2C1_Init+0x50>)
 8000728:	2200      	movs	r2, #0
 800072a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800072c:	4804      	ldr	r0, [pc, #16]	; (8000740 <MX_I2C1_Init+0x50>)
 800072e:	f000 ff01 	bl	8001534 <HAL_I2C_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000738:	f000 f9a5 	bl	8000a86 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20000180 	.word	0x20000180
 8000744:	40005400 	.word	0x40005400
 8000748:	000186a0 	.word	0x000186a0

0800074c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <MX_I2S2_Init+0x50>)
 8000752:	4a13      	ldr	r2, [pc, #76]	; (80007a0 <MX_I2S2_Init+0x54>)
 8000754:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_I2S2_Init+0x50>)
 8000758:	f44f 7200 	mov.w	r2, #512	; 0x200
 800075c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800075e:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_I2S2_Init+0x50>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000764:	4b0d      	ldr	r3, [pc, #52]	; (800079c <MX_I2S2_Init+0x50>)
 8000766:	2200      	movs	r2, #0
 8000768:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800076a:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_I2S2_Init+0x50>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000770:	4b0a      	ldr	r3, [pc, #40]	; (800079c <MX_I2S2_Init+0x50>)
 8000772:	4a0c      	ldr	r2, [pc, #48]	; (80007a4 <MX_I2S2_Init+0x58>)
 8000774:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_I2S2_Init+0x50>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800077c:	4b07      	ldr	r3, [pc, #28]	; (800079c <MX_I2S2_Init+0x50>)
 800077e:	2200      	movs	r2, #0
 8000780:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000782:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_I2S2_Init+0x50>)
 8000784:	2201      	movs	r2, #1
 8000786:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000788:	4804      	ldr	r0, [pc, #16]	; (800079c <MX_I2S2_Init+0x50>)
 800078a:	f001 f817 	bl	80017bc <HAL_I2S_Init>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000794:	f000 f977 	bl	8000a86 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	200001d4 	.word	0x200001d4
 80007a0:	40003800 	.word	0x40003800
 80007a4:	00017700 	.word	0x00017700

080007a8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007ac:	4b13      	ldr	r3, [pc, #76]	; (80007fc <MX_I2S3_Init+0x54>)
 80007ae:	4a14      	ldr	r2, [pc, #80]	; (8000800 <MX_I2S3_Init+0x58>)
 80007b0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007b2:	4b12      	ldr	r3, [pc, #72]	; (80007fc <MX_I2S3_Init+0x54>)
 80007b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007b8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <MX_I2S3_Init+0x54>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007c0:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_I2S3_Init+0x54>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007c6:	4b0d      	ldr	r3, [pc, #52]	; (80007fc <MX_I2S3_Init+0x54>)
 80007c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007cc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <MX_I2S3_Init+0x54>)
 80007d0:	4a0c      	ldr	r2, [pc, #48]	; (8000804 <MX_I2S3_Init+0x5c>)
 80007d2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_I2S3_Init+0x54>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_I2S3_Init+0x54>)
 80007dc:	2200      	movs	r2, #0
 80007de:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_I2S3_Init+0x54>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_I2S3_Init+0x54>)
 80007e8:	f000 ffe8 	bl	80017bc <HAL_I2S_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007f2:	f000 f948 	bl	8000a86 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	2000021c 	.word	0x2000021c
 8000800:	40003c00 	.word	0x40003c00
 8000804:	00017700 	.word	0x00017700

08000808 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800080c:	4b17      	ldr	r3, [pc, #92]	; (800086c <MX_SPI1_Init+0x64>)
 800080e:	4a18      	ldr	r2, [pc, #96]	; (8000870 <MX_SPI1_Init+0x68>)
 8000810:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000812:	4b16      	ldr	r3, [pc, #88]	; (800086c <MX_SPI1_Init+0x64>)
 8000814:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000818:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800081a:	4b14      	ldr	r3, [pc, #80]	; (800086c <MX_SPI1_Init+0x64>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000820:	4b12      	ldr	r3, [pc, #72]	; (800086c <MX_SPI1_Init+0x64>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000826:	4b11      	ldr	r3, [pc, #68]	; (800086c <MX_SPI1_Init+0x64>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800082c:	4b0f      	ldr	r3, [pc, #60]	; (800086c <MX_SPI1_Init+0x64>)
 800082e:	2200      	movs	r2, #0
 8000830:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <MX_SPI1_Init+0x64>)
 8000834:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000838:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800083a:	4b0c      	ldr	r3, [pc, #48]	; (800086c <MX_SPI1_Init+0x64>)
 800083c:	2200      	movs	r2, #0
 800083e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000840:	4b0a      	ldr	r3, [pc, #40]	; (800086c <MX_SPI1_Init+0x64>)
 8000842:	2200      	movs	r2, #0
 8000844:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <MX_SPI1_Init+0x64>)
 8000848:	2200      	movs	r2, #0
 800084a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800084c:	4b07      	ldr	r3, [pc, #28]	; (800086c <MX_SPI1_Init+0x64>)
 800084e:	2200      	movs	r2, #0
 8000850:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <MX_SPI1_Init+0x64>)
 8000854:	220a      	movs	r2, #10
 8000856:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000858:	4804      	ldr	r0, [pc, #16]	; (800086c <MX_SPI1_Init+0x64>)
 800085a:	f003 fcd3 	bl	8004204 <HAL_SPI_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000864:	f000 f90f 	bl	8000a86 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000264 	.word	0x20000264
 8000870:	40013000 	.word	0x40013000

08000874 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08c      	sub	sp, #48	; 0x30
 8000878:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
 8000888:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	61bb      	str	r3, [r7, #24]
 800088e:	4b6c      	ldr	r3, [pc, #432]	; (8000a40 <MX_GPIO_Init+0x1cc>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a6b      	ldr	r2, [pc, #428]	; (8000a40 <MX_GPIO_Init+0x1cc>)
 8000894:	f043 0310 	orr.w	r3, r3, #16
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b69      	ldr	r3, [pc, #420]	; (8000a40 <MX_GPIO_Init+0x1cc>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0310 	and.w	r3, r3, #16
 80008a2:	61bb      	str	r3, [r7, #24]
 80008a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	617b      	str	r3, [r7, #20]
 80008aa:	4b65      	ldr	r3, [pc, #404]	; (8000a40 <MX_GPIO_Init+0x1cc>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a64      	ldr	r2, [pc, #400]	; (8000a40 <MX_GPIO_Init+0x1cc>)
 80008b0:	f043 0304 	orr.w	r3, r3, #4
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b62      	ldr	r3, [pc, #392]	; (8000a40 <MX_GPIO_Init+0x1cc>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0304 	and.w	r3, r3, #4
 80008be:	617b      	str	r3, [r7, #20]
 80008c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	613b      	str	r3, [r7, #16]
 80008c6:	4b5e      	ldr	r3, [pc, #376]	; (8000a40 <MX_GPIO_Init+0x1cc>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a5d      	ldr	r2, [pc, #372]	; (8000a40 <MX_GPIO_Init+0x1cc>)
 80008cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b5b      	ldr	r3, [pc, #364]	; (8000a40 <MX_GPIO_Init+0x1cc>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008da:	613b      	str	r3, [r7, #16]
 80008dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	4b57      	ldr	r3, [pc, #348]	; (8000a40 <MX_GPIO_Init+0x1cc>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a56      	ldr	r2, [pc, #344]	; (8000a40 <MX_GPIO_Init+0x1cc>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b54      	ldr	r3, [pc, #336]	; (8000a40 <MX_GPIO_Init+0x1cc>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	60bb      	str	r3, [r7, #8]
 80008fe:	4b50      	ldr	r3, [pc, #320]	; (8000a40 <MX_GPIO_Init+0x1cc>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a4f      	ldr	r2, [pc, #316]	; (8000a40 <MX_GPIO_Init+0x1cc>)
 8000904:	f043 0302 	orr.w	r3, r3, #2
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b4d      	ldr	r3, [pc, #308]	; (8000a40 <MX_GPIO_Init+0x1cc>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0302 	and.w	r3, r3, #2
 8000912:	60bb      	str	r3, [r7, #8]
 8000914:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	4b49      	ldr	r3, [pc, #292]	; (8000a40 <MX_GPIO_Init+0x1cc>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a48      	ldr	r2, [pc, #288]	; (8000a40 <MX_GPIO_Init+0x1cc>)
 8000920:	f043 0308 	orr.w	r3, r3, #8
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b46      	ldr	r3, [pc, #280]	; (8000a40 <MX_GPIO_Init+0x1cc>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0308 	and.w	r3, r3, #8
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000932:	2200      	movs	r2, #0
 8000934:	2108      	movs	r1, #8
 8000936:	4843      	ldr	r0, [pc, #268]	; (8000a44 <MX_GPIO_Init+0x1d0>)
 8000938:	f000 fde2 	bl	8001500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800093c:	2201      	movs	r2, #1
 800093e:	2101      	movs	r1, #1
 8000940:	4841      	ldr	r0, [pc, #260]	; (8000a48 <MX_GPIO_Init+0x1d4>)
 8000942:	f000 fddd 	bl	8001500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000946:	2200      	movs	r2, #0
 8000948:	f24f 0110 	movw	r1, #61456	; 0xf010
 800094c:	483f      	ldr	r0, [pc, #252]	; (8000a4c <MX_GPIO_Init+0x1d8>)
 800094e:	f000 fdd7 	bl	8001500 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000952:	2304      	movs	r3, #4
 8000954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000956:	2300      	movs	r3, #0
 8000958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	4837      	ldr	r0, [pc, #220]	; (8000a44 <MX_GPIO_Init+0x1d0>)
 8000966:	f000 fc47 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800096a:	2308      	movs	r3, #8
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096e:	2301      	movs	r3, #1
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	4830      	ldr	r0, [pc, #192]	; (8000a44 <MX_GPIO_Init+0x1d0>)
 8000982:	f000 fc39 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000986:	2332      	movs	r3, #50	; 0x32
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800098a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800098e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000994:	f107 031c 	add.w	r3, r7, #28
 8000998:	4619      	mov	r1, r3
 800099a:	482a      	ldr	r0, [pc, #168]	; (8000a44 <MX_GPIO_Init+0x1d0>)
 800099c:	f000 fc2c 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009a0:	2301      	movs	r3, #1
 80009a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a4:	2301      	movs	r3, #1
 80009a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	4824      	ldr	r0, [pc, #144]	; (8000a48 <MX_GPIO_Init+0x1d4>)
 80009b8:	f000 fc1e 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009bc:	2301      	movs	r3, #1
 80009be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009c0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	481f      	ldr	r0, [pc, #124]	; (8000a50 <MX_GPIO_Init+0x1dc>)
 80009d2:	f000 fc11 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009d6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009da:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009dc:	2301      	movs	r3, #1
 80009de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009e8:	f107 031c 	add.w	r3, r7, #28
 80009ec:	4619      	mov	r1, r3
 80009ee:	4817      	ldr	r0, [pc, #92]	; (8000a4c <MX_GPIO_Init+0x1d8>)
 80009f0:	f000 fc02 	bl	80011f8 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009fa:	4814      	ldr	r0, [pc, #80]	; (8000a4c <MX_GPIO_Init+0x1d8>)
 80009fc:	f000 fd80 	bl	8001500 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000a00:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a06:	2301      	movs	r3, #1
 8000a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a12:	f107 031c 	add.w	r3, r7, #28
 8000a16:	4619      	mov	r1, r3
 8000a18:	480c      	ldr	r0, [pc, #48]	; (8000a4c <MX_GPIO_Init+0x1d8>)
 8000a1a:	f000 fbed 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a1e:	2320      	movs	r3, #32
 8000a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a22:	2300      	movs	r3, #0
 8000a24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4806      	ldr	r0, [pc, #24]	; (8000a4c <MX_GPIO_Init+0x1d8>)
 8000a32:	f000 fbe1 	bl	80011f8 <HAL_GPIO_Init>

}
 8000a36:	bf00      	nop
 8000a38:	3730      	adds	r7, #48	; 0x30
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40021000 	.word	0x40021000
 8000a48:	40020800 	.word	0x40020800
 8000a4c:	40020c00 	.word	0x40020c00
 8000a50:	40020000 	.word	0x40020000

08000a54 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000a5c:	f00a f8a6 	bl	800abac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a60:	2001      	movs	r0, #1
 8000a62:	f007 fbc7 	bl	80081f4 <osDelay>
 8000a66:	e7fb      	b.n	8000a60 <StartDefaultTask+0xc>

08000a68 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a78:	d101      	bne.n	8000a7e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a7a:	f000 fa97 	bl	8000fac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a8a:	b672      	cpsid	i
}
 8000a8c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a8e:	e7fe      	b.n	8000a8e <Error_Handler+0x8>

08000a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <HAL_MspInit+0x54>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9e:	4a11      	ldr	r2, [pc, #68]	; (8000ae4 <HAL_MspInit+0x54>)
 8000aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <HAL_MspInit+0x54>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	603b      	str	r3, [r7, #0]
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <HAL_MspInit+0x54>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	4a0a      	ldr	r2, [pc, #40]	; (8000ae4 <HAL_MspInit+0x54>)
 8000abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac2:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <HAL_MspInit+0x54>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	210f      	movs	r1, #15
 8000ad2:	f06f 0001 	mvn.w	r0, #1
 8000ad6:	f000 fb65 	bl	80011a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40023800 	.word	0x40023800

08000ae8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08a      	sub	sp, #40	; 0x28
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a19      	ldr	r2, [pc, #100]	; (8000b6c <HAL_I2C_MspInit+0x84>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d12c      	bne.n	8000b64 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	4b18      	ldr	r3, [pc, #96]	; (8000b70 <HAL_I2C_MspInit+0x88>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a17      	ldr	r2, [pc, #92]	; (8000b70 <HAL_I2C_MspInit+0x88>)
 8000b14:	f043 0302 	orr.w	r3, r3, #2
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <HAL_I2C_MspInit+0x88>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0302 	and.w	r3, r3, #2
 8000b22:	613b      	str	r3, [r7, #16]
 8000b24:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b26:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b2c:	2312      	movs	r3, #18
 8000b2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b30:	2301      	movs	r3, #1
 8000b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2300      	movs	r3, #0
 8000b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b38:	2304      	movs	r3, #4
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	4619      	mov	r1, r3
 8000b42:	480c      	ldr	r0, [pc, #48]	; (8000b74 <HAL_I2C_MspInit+0x8c>)
 8000b44:	f000 fb58 	bl	80011f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <HAL_I2C_MspInit+0x88>)
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b50:	4a07      	ldr	r2, [pc, #28]	; (8000b70 <HAL_I2C_MspInit+0x88>)
 8000b52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b56:	6413      	str	r3, [r2, #64]	; 0x40
 8000b58:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <HAL_I2C_MspInit+0x88>)
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b64:	bf00      	nop
 8000b66:	3728      	adds	r7, #40	; 0x28
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40005400 	.word	0x40005400
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40020400 	.word	0x40020400

08000b78 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08e      	sub	sp, #56	; 0x38
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a59      	ldr	r2, [pc, #356]	; (8000cfc <HAL_I2S_MspInit+0x184>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d15b      	bne.n	8000c52 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	623b      	str	r3, [r7, #32]
 8000b9e:	4b58      	ldr	r3, [pc, #352]	; (8000d00 <HAL_I2S_MspInit+0x188>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	4a57      	ldr	r2, [pc, #348]	; (8000d00 <HAL_I2S_MspInit+0x188>)
 8000ba4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8000baa:	4b55      	ldr	r3, [pc, #340]	; (8000d00 <HAL_I2S_MspInit+0x188>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bb2:	623b      	str	r3, [r7, #32]
 8000bb4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61fb      	str	r3, [r7, #28]
 8000bba:	4b51      	ldr	r3, [pc, #324]	; (8000d00 <HAL_I2S_MspInit+0x188>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a50      	ldr	r2, [pc, #320]	; (8000d00 <HAL_I2S_MspInit+0x188>)
 8000bc0:	f043 0304 	orr.w	r3, r3, #4
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4b4e      	ldr	r3, [pc, #312]	; (8000d00 <HAL_I2S_MspInit+0x188>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0304 	and.w	r3, r3, #4
 8000bce:	61fb      	str	r3, [r7, #28]
 8000bd0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61bb      	str	r3, [r7, #24]
 8000bd6:	4b4a      	ldr	r3, [pc, #296]	; (8000d00 <HAL_I2S_MspInit+0x188>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a49      	ldr	r2, [pc, #292]	; (8000d00 <HAL_I2S_MspInit+0x188>)
 8000bdc:	f043 0302 	orr.w	r3, r3, #2
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b47      	ldr	r3, [pc, #284]	; (8000d00 <HAL_I2S_MspInit+0x188>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0302 	and.w	r3, r3, #2
 8000bea:	61bb      	str	r3, [r7, #24]
 8000bec:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bee:	2304      	movs	r3, #4
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000bfe:	2306      	movs	r3, #6
 8000c00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c06:	4619      	mov	r1, r3
 8000c08:	483e      	ldr	r0, [pc, #248]	; (8000d04 <HAL_I2S_MspInit+0x18c>)
 8000c0a:	f000 faf5 	bl	80011f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000c0e:	2308      	movs	r3, #8
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c1e:	2305      	movs	r3, #5
 8000c20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c26:	4619      	mov	r1, r3
 8000c28:	4836      	ldr	r0, [pc, #216]	; (8000d04 <HAL_I2S_MspInit+0x18c>)
 8000c2a:	f000 fae5 	bl	80011f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000c2e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c34:	2302      	movs	r3, #2
 8000c36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c40:	2305      	movs	r3, #5
 8000c42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c48:	4619      	mov	r1, r3
 8000c4a:	482f      	ldr	r0, [pc, #188]	; (8000d08 <HAL_I2S_MspInit+0x190>)
 8000c4c:	f000 fad4 	bl	80011f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c50:	e04f      	b.n	8000cf2 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a2d      	ldr	r2, [pc, #180]	; (8000d0c <HAL_I2S_MspInit+0x194>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d14a      	bne.n	8000cf2 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]
 8000c60:	4b27      	ldr	r3, [pc, #156]	; (8000d00 <HAL_I2S_MspInit+0x188>)
 8000c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c64:	4a26      	ldr	r2, [pc, #152]	; (8000d00 <HAL_I2S_MspInit+0x188>)
 8000c66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6c:	4b24      	ldr	r3, [pc, #144]	; (8000d00 <HAL_I2S_MspInit+0x188>)
 8000c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c74:	617b      	str	r3, [r7, #20]
 8000c76:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c78:	2300      	movs	r3, #0
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	4b20      	ldr	r3, [pc, #128]	; (8000d00 <HAL_I2S_MspInit+0x188>)
 8000c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c80:	4a1f      	ldr	r2, [pc, #124]	; (8000d00 <HAL_I2S_MspInit+0x188>)
 8000c82:	f043 0301 	orr.w	r3, r3, #1
 8000c86:	6313      	str	r3, [r2, #48]	; 0x30
 8000c88:	4b1d      	ldr	r3, [pc, #116]	; (8000d00 <HAL_I2S_MspInit+0x188>)
 8000c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8c:	f003 0301 	and.w	r3, r3, #1
 8000c90:	613b      	str	r3, [r7, #16]
 8000c92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c94:	2300      	movs	r3, #0
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <HAL_I2S_MspInit+0x188>)
 8000c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9c:	4a18      	ldr	r2, [pc, #96]	; (8000d00 <HAL_I2S_MspInit+0x188>)
 8000c9e:	f043 0304 	orr.w	r3, r3, #4
 8000ca2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca4:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <HAL_I2S_MspInit+0x188>)
 8000ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca8:	f003 0304 	and.w	r3, r3, #4
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000cb0:	2310      	movs	r3, #16
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cc0:	2306      	movs	r3, #6
 8000cc2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000cc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4811      	ldr	r0, [pc, #68]	; (8000d10 <HAL_I2S_MspInit+0x198>)
 8000ccc:	f000 fa94 	bl	80011f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000cd0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ce2:	2306      	movs	r3, #6
 8000ce4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cea:	4619      	mov	r1, r3
 8000cec:	4805      	ldr	r0, [pc, #20]	; (8000d04 <HAL_I2S_MspInit+0x18c>)
 8000cee:	f000 fa83 	bl	80011f8 <HAL_GPIO_Init>
}
 8000cf2:	bf00      	nop
 8000cf4:	3738      	adds	r7, #56	; 0x38
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40003800 	.word	0x40003800
 8000d00:	40023800 	.word	0x40023800
 8000d04:	40020800 	.word	0x40020800
 8000d08:	40020400 	.word	0x40020400
 8000d0c:	40003c00 	.word	0x40003c00
 8000d10:	40020000 	.word	0x40020000

08000d14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08a      	sub	sp, #40	; 0x28
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a19      	ldr	r2, [pc, #100]	; (8000d98 <HAL_SPI_MspInit+0x84>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d12b      	bne.n	8000d8e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	4b18      	ldr	r3, [pc, #96]	; (8000d9c <HAL_SPI_MspInit+0x88>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3e:	4a17      	ldr	r2, [pc, #92]	; (8000d9c <HAL_SPI_MspInit+0x88>)
 8000d40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d44:	6453      	str	r3, [r2, #68]	; 0x44
 8000d46:	4b15      	ldr	r3, [pc, #84]	; (8000d9c <HAL_SPI_MspInit+0x88>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <HAL_SPI_MspInit+0x88>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4a10      	ldr	r2, [pc, #64]	; (8000d9c <HAL_SPI_MspInit+0x88>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6313      	str	r3, [r2, #48]	; 0x30
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <HAL_SPI_MspInit+0x88>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d6e:	23e0      	movs	r3, #224	; 0xe0
 8000d70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d72:	2302      	movs	r3, #2
 8000d74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d7e:	2305      	movs	r3, #5
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d82:	f107 0314 	add.w	r3, r7, #20
 8000d86:	4619      	mov	r1, r3
 8000d88:	4805      	ldr	r0, [pc, #20]	; (8000da0 <HAL_SPI_MspInit+0x8c>)
 8000d8a:	f000 fa35 	bl	80011f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d8e:	bf00      	nop
 8000d90:	3728      	adds	r7, #40	; 0x28
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40013000 	.word	0x40013000
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	40020000 	.word	0x40020000

08000da4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08e      	sub	sp, #56	; 0x38
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000dac:	2300      	movs	r3, #0
 8000dae:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000db0:	2300      	movs	r3, #0
 8000db2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000db4:	2300      	movs	r3, #0
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	4b34      	ldr	r3, [pc, #208]	; (8000e8c <HAL_InitTick+0xe8>)
 8000dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbc:	4a33      	ldr	r2, [pc, #204]	; (8000e8c <HAL_InitTick+0xe8>)
 8000dbe:	f043 0301 	orr.w	r3, r3, #1
 8000dc2:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc4:	4b31      	ldr	r3, [pc, #196]	; (8000e8c <HAL_InitTick+0xe8>)
 8000dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc8:	f003 0301 	and.w	r3, r3, #1
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dd0:	f107 0210 	add.w	r2, r7, #16
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	4611      	mov	r1, r2
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f003 f890 	bl	8003f00 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000de0:	6a3b      	ldr	r3, [r7, #32]
 8000de2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d103      	bne.n	8000df2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000dea:	f003 f875 	bl	8003ed8 <HAL_RCC_GetPCLK1Freq>
 8000dee:	6378      	str	r0, [r7, #52]	; 0x34
 8000df0:	e004      	b.n	8000dfc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000df2:	f003 f871 	bl	8003ed8 <HAL_RCC_GetPCLK1Freq>
 8000df6:	4603      	mov	r3, r0
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dfe:	4a24      	ldr	r2, [pc, #144]	; (8000e90 <HAL_InitTick+0xec>)
 8000e00:	fba2 2303 	umull	r2, r3, r2, r3
 8000e04:	0c9b      	lsrs	r3, r3, #18
 8000e06:	3b01      	subs	r3, #1
 8000e08:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000e0a:	4b22      	ldr	r3, [pc, #136]	; (8000e94 <HAL_InitTick+0xf0>)
 8000e0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e10:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000e12:	4b20      	ldr	r3, [pc, #128]	; (8000e94 <HAL_InitTick+0xf0>)
 8000e14:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e18:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000e1a:	4a1e      	ldr	r2, [pc, #120]	; (8000e94 <HAL_InitTick+0xf0>)
 8000e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e1e:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000e20:	4b1c      	ldr	r3, [pc, #112]	; (8000e94 <HAL_InitTick+0xf0>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e26:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <HAL_InitTick+0xf0>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e2c:	4b19      	ldr	r3, [pc, #100]	; (8000e94 <HAL_InitTick+0xf0>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000e32:	4818      	ldr	r0, [pc, #96]	; (8000e94 <HAL_InitTick+0xf0>)
 8000e34:	f003 fa6f 	bl	8004316 <HAL_TIM_Base_Init>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000e3e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d11b      	bne.n	8000e7e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000e46:	4813      	ldr	r0, [pc, #76]	; (8000e94 <HAL_InitTick+0xf0>)
 8000e48:	f003 fabe 	bl	80043c8 <HAL_TIM_Base_Start_IT>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000e52:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d111      	bne.n	8000e7e <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e5a:	201c      	movs	r0, #28
 8000e5c:	f000 f9be 	bl	80011dc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2b0f      	cmp	r3, #15
 8000e64:	d808      	bhi.n	8000e78 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000e66:	2200      	movs	r2, #0
 8000e68:	6879      	ldr	r1, [r7, #4]
 8000e6a:	201c      	movs	r0, #28
 8000e6c:	f000 f99a 	bl	80011a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e70:	4a09      	ldr	r2, [pc, #36]	; (8000e98 <HAL_InitTick+0xf4>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6013      	str	r3, [r2, #0]
 8000e76:	e002      	b.n	8000e7e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3738      	adds	r7, #56	; 0x38
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	431bde83 	.word	0x431bde83
 8000e94:	200002c8 	.word	0x200002c8
 8000e98:	20000004 	.word	0x20000004

08000e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <NMI_Handler+0x4>

08000ea2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea6:	e7fe      	b.n	8000ea6 <HardFault_Handler+0x4>

08000ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <MemManage_Handler+0x4>

08000eae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb2:	e7fe      	b.n	8000eb2 <BusFault_Handler+0x4>

08000eb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <UsageFault_Handler+0x4>

08000eba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ecc:	4802      	ldr	r0, [pc, #8]	; (8000ed8 <TIM2_IRQHandler+0x10>)
 8000ece:	f003 fadd 	bl	800448c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	200002c8 	.word	0x200002c8

08000edc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ee0:	4802      	ldr	r0, [pc, #8]	; (8000eec <OTG_FS_IRQHandler+0x10>)
 8000ee2:	f001 fa5b 	bl	800239c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20006288 	.word	0x20006288

08000ef0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <SystemInit+0x20>)
 8000ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000efa:	4a05      	ldr	r2, [pc, #20]	; (8000f10 <SystemInit+0x20>)
 8000efc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f18:	480d      	ldr	r0, [pc, #52]	; (8000f50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f1a:	490e      	ldr	r1, [pc, #56]	; (8000f54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f1c:	4a0e      	ldr	r2, [pc, #56]	; (8000f58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f20:	e002      	b.n	8000f28 <LoopCopyDataInit>

08000f22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f26:	3304      	adds	r3, #4

08000f28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f2c:	d3f9      	bcc.n	8000f22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f2e:	4a0b      	ldr	r2, [pc, #44]	; (8000f5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f30:	4c0b      	ldr	r4, [pc, #44]	; (8000f60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f34:	e001      	b.n	8000f3a <LoopFillZerobss>

08000f36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f38:	3204      	adds	r2, #4

08000f3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f3c:	d3fb      	bcc.n	8000f36 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f3e:	f7ff ffd7 	bl	8000ef0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f42:	f00a fb6f 	bl	800b624 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f46:	f7ff fb0d 	bl	8000564 <main>
  bx  lr    
 8000f4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f54:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8000f58:	0800b944 	.word	0x0800b944
  ldr r2, =_sbss
 8000f5c:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8000f60:	200069bc 	.word	0x200069bc

08000f64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f64:	e7fe      	b.n	8000f64 <ADC_IRQHandler>
	...

08000f68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f6c:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <HAL_Init+0x40>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a0d      	ldr	r2, [pc, #52]	; (8000fa8 <HAL_Init+0x40>)
 8000f72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f78:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <HAL_Init+0x40>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a0a      	ldr	r2, [pc, #40]	; (8000fa8 <HAL_Init+0x40>)
 8000f7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f84:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <HAL_Init+0x40>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a07      	ldr	r2, [pc, #28]	; (8000fa8 <HAL_Init+0x40>)
 8000f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f90:	2003      	movs	r0, #3
 8000f92:	f000 f8fc 	bl	800118e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f96:	200f      	movs	r0, #15
 8000f98:	f7ff ff04 	bl	8000da4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f9c:	f7ff fd78 	bl	8000a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40023c00 	.word	0x40023c00

08000fac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <HAL_IncTick+0x20>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <HAL_IncTick+0x24>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4413      	add	r3, r2
 8000fbc:	4a04      	ldr	r2, [pc, #16]	; (8000fd0 <HAL_IncTick+0x24>)
 8000fbe:	6013      	str	r3, [r2, #0]
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	20000008 	.word	0x20000008
 8000fd0:	20000310 	.word	0x20000310

08000fd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd8:	4b03      	ldr	r3, [pc, #12]	; (8000fe8 <HAL_GetTick+0x14>)
 8000fda:	681b      	ldr	r3, [r3, #0]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	20000310 	.word	0x20000310

08000fec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ff4:	f7ff ffee 	bl	8000fd4 <HAL_GetTick>
 8000ff8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001004:	d005      	beq.n	8001012 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001006:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <HAL_Delay+0x44>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	461a      	mov	r2, r3
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	4413      	add	r3, r2
 8001010:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001012:	bf00      	nop
 8001014:	f7ff ffde 	bl	8000fd4 <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	68fa      	ldr	r2, [r7, #12]
 8001020:	429a      	cmp	r2, r3
 8001022:	d8f7      	bhi.n	8001014 <HAL_Delay+0x28>
  {
  }
}
 8001024:	bf00      	nop
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000008 	.word	0x20000008

08001034 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001044:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <__NVIC_SetPriorityGrouping+0x44>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800104a:	68ba      	ldr	r2, [r7, #8]
 800104c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001050:	4013      	ands	r3, r2
 8001052:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800105c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001064:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001066:	4a04      	ldr	r2, [pc, #16]	; (8001078 <__NVIC_SetPriorityGrouping+0x44>)
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	60d3      	str	r3, [r2, #12]
}
 800106c:	bf00      	nop
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001080:	4b04      	ldr	r3, [pc, #16]	; (8001094 <__NVIC_GetPriorityGrouping+0x18>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	0a1b      	lsrs	r3, r3, #8
 8001086:	f003 0307 	and.w	r3, r3, #7
}
 800108a:	4618      	mov	r0, r3
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	db0b      	blt.n	80010c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	f003 021f 	and.w	r2, r3, #31
 80010b0:	4907      	ldr	r1, [pc, #28]	; (80010d0 <__NVIC_EnableIRQ+0x38>)
 80010b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b6:	095b      	lsrs	r3, r3, #5
 80010b8:	2001      	movs	r0, #1
 80010ba:	fa00 f202 	lsl.w	r2, r0, r2
 80010be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	e000e100 	.word	0xe000e100

080010d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	6039      	str	r1, [r7, #0]
 80010de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	db0a      	blt.n	80010fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	490c      	ldr	r1, [pc, #48]	; (8001120 <__NVIC_SetPriority+0x4c>)
 80010ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f2:	0112      	lsls	r2, r2, #4
 80010f4:	b2d2      	uxtb	r2, r2
 80010f6:	440b      	add	r3, r1
 80010f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010fc:	e00a      	b.n	8001114 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	b2da      	uxtb	r2, r3
 8001102:	4908      	ldr	r1, [pc, #32]	; (8001124 <__NVIC_SetPriority+0x50>)
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	f003 030f 	and.w	r3, r3, #15
 800110a:	3b04      	subs	r3, #4
 800110c:	0112      	lsls	r2, r2, #4
 800110e:	b2d2      	uxtb	r2, r2
 8001110:	440b      	add	r3, r1
 8001112:	761a      	strb	r2, [r3, #24]
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000e100 	.word	0xe000e100
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001128:	b480      	push	{r7}
 800112a:	b089      	sub	sp, #36	; 0x24
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	f1c3 0307 	rsb	r3, r3, #7
 8001142:	2b04      	cmp	r3, #4
 8001144:	bf28      	it	cs
 8001146:	2304      	movcs	r3, #4
 8001148:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	3304      	adds	r3, #4
 800114e:	2b06      	cmp	r3, #6
 8001150:	d902      	bls.n	8001158 <NVIC_EncodePriority+0x30>
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	3b03      	subs	r3, #3
 8001156:	e000      	b.n	800115a <NVIC_EncodePriority+0x32>
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800115c:	f04f 32ff 	mov.w	r2, #4294967295
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	43da      	mvns	r2, r3
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	401a      	ands	r2, r3
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001170:	f04f 31ff 	mov.w	r1, #4294967295
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	fa01 f303 	lsl.w	r3, r1, r3
 800117a:	43d9      	mvns	r1, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001180:	4313      	orrs	r3, r2
         );
}
 8001182:	4618      	mov	r0, r3
 8001184:	3724      	adds	r7, #36	; 0x24
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b082      	sub	sp, #8
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f7ff ff4c 	bl	8001034 <__NVIC_SetPriorityGrouping>
}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
 80011b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011b6:	f7ff ff61 	bl	800107c <__NVIC_GetPriorityGrouping>
 80011ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	68b9      	ldr	r1, [r7, #8]
 80011c0:	6978      	ldr	r0, [r7, #20]
 80011c2:	f7ff ffb1 	bl	8001128 <NVIC_EncodePriority>
 80011c6:	4602      	mov	r2, r0
 80011c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011cc:	4611      	mov	r1, r2
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff ff80 	bl	80010d4 <__NVIC_SetPriority>
}
 80011d4:	bf00      	nop
 80011d6:	3718      	adds	r7, #24
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff ff54 	bl	8001098 <__NVIC_EnableIRQ>
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b089      	sub	sp, #36	; 0x24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800120a:	2300      	movs	r3, #0
 800120c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]
 8001212:	e159      	b.n	80014c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001214:	2201      	movs	r2, #1
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	697a      	ldr	r2, [r7, #20]
 8001224:	4013      	ands	r3, r2
 8001226:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	429a      	cmp	r2, r3
 800122e:	f040 8148 	bne.w	80014c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f003 0303 	and.w	r3, r3, #3
 800123a:	2b01      	cmp	r3, #1
 800123c:	d005      	beq.n	800124a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001246:	2b02      	cmp	r3, #2
 8001248:	d130      	bne.n	80012ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	2203      	movs	r2, #3
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43db      	mvns	r3, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4013      	ands	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	68da      	ldr	r2, [r3, #12]
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4313      	orrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001280:	2201      	movs	r2, #1
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4013      	ands	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	091b      	lsrs	r3, r3, #4
 8001296:	f003 0201 	and.w	r2, r3, #1
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f003 0303 	and.w	r3, r3, #3
 80012b4:	2b03      	cmp	r3, #3
 80012b6:	d017      	beq.n	80012e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	2203      	movs	r2, #3
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4013      	ands	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	689a      	ldr	r2, [r3, #8]
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 0303 	and.w	r3, r3, #3
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d123      	bne.n	800133c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	08da      	lsrs	r2, r3, #3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3208      	adds	r2, #8
 80012fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001300:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	f003 0307 	and.w	r3, r3, #7
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	220f      	movs	r2, #15
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	691a      	ldr	r2, [r3, #16]
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	08da      	lsrs	r2, r3, #3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	3208      	adds	r2, #8
 8001336:	69b9      	ldr	r1, [r7, #24]
 8001338:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	2203      	movs	r2, #3
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f003 0203 	and.w	r2, r3, #3
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 80a2 	beq.w	80014c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	4b57      	ldr	r3, [pc, #348]	; (80014e0 <HAL_GPIO_Init+0x2e8>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001386:	4a56      	ldr	r2, [pc, #344]	; (80014e0 <HAL_GPIO_Init+0x2e8>)
 8001388:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800138c:	6453      	str	r3, [r2, #68]	; 0x44
 800138e:	4b54      	ldr	r3, [pc, #336]	; (80014e0 <HAL_GPIO_Init+0x2e8>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800139a:	4a52      	ldr	r2, [pc, #328]	; (80014e4 <HAL_GPIO_Init+0x2ec>)
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	089b      	lsrs	r3, r3, #2
 80013a0:	3302      	adds	r3, #2
 80013a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	f003 0303 	and.w	r3, r3, #3
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	220f      	movs	r2, #15
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43db      	mvns	r3, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4013      	ands	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a49      	ldr	r2, [pc, #292]	; (80014e8 <HAL_GPIO_Init+0x2f0>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d019      	beq.n	80013fa <HAL_GPIO_Init+0x202>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a48      	ldr	r2, [pc, #288]	; (80014ec <HAL_GPIO_Init+0x2f4>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d013      	beq.n	80013f6 <HAL_GPIO_Init+0x1fe>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a47      	ldr	r2, [pc, #284]	; (80014f0 <HAL_GPIO_Init+0x2f8>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d00d      	beq.n	80013f2 <HAL_GPIO_Init+0x1fa>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a46      	ldr	r2, [pc, #280]	; (80014f4 <HAL_GPIO_Init+0x2fc>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d007      	beq.n	80013ee <HAL_GPIO_Init+0x1f6>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a45      	ldr	r2, [pc, #276]	; (80014f8 <HAL_GPIO_Init+0x300>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d101      	bne.n	80013ea <HAL_GPIO_Init+0x1f2>
 80013e6:	2304      	movs	r3, #4
 80013e8:	e008      	b.n	80013fc <HAL_GPIO_Init+0x204>
 80013ea:	2307      	movs	r3, #7
 80013ec:	e006      	b.n	80013fc <HAL_GPIO_Init+0x204>
 80013ee:	2303      	movs	r3, #3
 80013f0:	e004      	b.n	80013fc <HAL_GPIO_Init+0x204>
 80013f2:	2302      	movs	r3, #2
 80013f4:	e002      	b.n	80013fc <HAL_GPIO_Init+0x204>
 80013f6:	2301      	movs	r3, #1
 80013f8:	e000      	b.n	80013fc <HAL_GPIO_Init+0x204>
 80013fa:	2300      	movs	r3, #0
 80013fc:	69fa      	ldr	r2, [r7, #28]
 80013fe:	f002 0203 	and.w	r2, r2, #3
 8001402:	0092      	lsls	r2, r2, #2
 8001404:	4093      	lsls	r3, r2
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4313      	orrs	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800140c:	4935      	ldr	r1, [pc, #212]	; (80014e4 <HAL_GPIO_Init+0x2ec>)
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	089b      	lsrs	r3, r3, #2
 8001412:	3302      	adds	r3, #2
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800141a:	4b38      	ldr	r3, [pc, #224]	; (80014fc <HAL_GPIO_Init+0x304>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	43db      	mvns	r3, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4013      	ands	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800143e:	4a2f      	ldr	r2, [pc, #188]	; (80014fc <HAL_GPIO_Init+0x304>)
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001444:	4b2d      	ldr	r3, [pc, #180]	; (80014fc <HAL_GPIO_Init+0x304>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	43db      	mvns	r3, r3
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4013      	ands	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d003      	beq.n	8001468 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	4313      	orrs	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001468:	4a24      	ldr	r2, [pc, #144]	; (80014fc <HAL_GPIO_Init+0x304>)
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800146e:	4b23      	ldr	r3, [pc, #140]	; (80014fc <HAL_GPIO_Init+0x304>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	43db      	mvns	r3, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4013      	ands	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d003      	beq.n	8001492 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	4313      	orrs	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001492:	4a1a      	ldr	r2, [pc, #104]	; (80014fc <HAL_GPIO_Init+0x304>)
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001498:	4b18      	ldr	r3, [pc, #96]	; (80014fc <HAL_GPIO_Init+0x304>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	43db      	mvns	r3, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d003      	beq.n	80014bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014bc:	4a0f      	ldr	r2, [pc, #60]	; (80014fc <HAL_GPIO_Init+0x304>)
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	3301      	adds	r3, #1
 80014c6:	61fb      	str	r3, [r7, #28]
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	2b0f      	cmp	r3, #15
 80014cc:	f67f aea2 	bls.w	8001214 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014d0:	bf00      	nop
 80014d2:	bf00      	nop
 80014d4:	3724      	adds	r7, #36	; 0x24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40013800 	.word	0x40013800
 80014e8:	40020000 	.word	0x40020000
 80014ec:	40020400 	.word	0x40020400
 80014f0:	40020800 	.word	0x40020800
 80014f4:	40020c00 	.word	0x40020c00
 80014f8:	40021000 	.word	0x40021000
 80014fc:	40013c00 	.word	0x40013c00

08001500 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	460b      	mov	r3, r1
 800150a:	807b      	strh	r3, [r7, #2]
 800150c:	4613      	mov	r3, r2
 800150e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001510:	787b      	ldrb	r3, [r7, #1]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d003      	beq.n	800151e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001516:	887a      	ldrh	r2, [r7, #2]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800151c:	e003      	b.n	8001526 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800151e:	887b      	ldrh	r3, [r7, #2]
 8001520:	041a      	lsls	r2, r3, #16
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	619a      	str	r2, [r3, #24]
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
	...

08001534 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d101      	bne.n	8001546 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e12b      	b.n	800179e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2b00      	cmp	r3, #0
 8001550:	d106      	bne.n	8001560 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7ff fac4 	bl	8000ae8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2224      	movs	r2, #36	; 0x24
 8001564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f022 0201 	bic.w	r2, r2, #1
 8001576:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001586:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001596:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001598:	f002 fc9e 	bl	8003ed8 <HAL_RCC_GetPCLK1Freq>
 800159c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	4a81      	ldr	r2, [pc, #516]	; (80017a8 <HAL_I2C_Init+0x274>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d807      	bhi.n	80015b8 <HAL_I2C_Init+0x84>
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	4a80      	ldr	r2, [pc, #512]	; (80017ac <HAL_I2C_Init+0x278>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	bf94      	ite	ls
 80015b0:	2301      	movls	r3, #1
 80015b2:	2300      	movhi	r3, #0
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	e006      	b.n	80015c6 <HAL_I2C_Init+0x92>
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	4a7d      	ldr	r2, [pc, #500]	; (80017b0 <HAL_I2C_Init+0x27c>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	bf94      	ite	ls
 80015c0:	2301      	movls	r3, #1
 80015c2:	2300      	movhi	r3, #0
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e0e7      	b.n	800179e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	4a78      	ldr	r2, [pc, #480]	; (80017b4 <HAL_I2C_Init+0x280>)
 80015d2:	fba2 2303 	umull	r2, r3, r2, r3
 80015d6:	0c9b      	lsrs	r3, r3, #18
 80015d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	68ba      	ldr	r2, [r7, #8]
 80015ea:	430a      	orrs	r2, r1
 80015ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	6a1b      	ldr	r3, [r3, #32]
 80015f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	4a6a      	ldr	r2, [pc, #424]	; (80017a8 <HAL_I2C_Init+0x274>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d802      	bhi.n	8001608 <HAL_I2C_Init+0xd4>
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	3301      	adds	r3, #1
 8001606:	e009      	b.n	800161c <HAL_I2C_Init+0xe8>
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800160e:	fb02 f303 	mul.w	r3, r2, r3
 8001612:	4a69      	ldr	r2, [pc, #420]	; (80017b8 <HAL_I2C_Init+0x284>)
 8001614:	fba2 2303 	umull	r2, r3, r2, r3
 8001618:	099b      	lsrs	r3, r3, #6
 800161a:	3301      	adds	r3, #1
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	6812      	ldr	r2, [r2, #0]
 8001620:	430b      	orrs	r3, r1
 8001622:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800162e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	495c      	ldr	r1, [pc, #368]	; (80017a8 <HAL_I2C_Init+0x274>)
 8001638:	428b      	cmp	r3, r1
 800163a:	d819      	bhi.n	8001670 <HAL_I2C_Init+0x13c>
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	1e59      	subs	r1, r3, #1
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	fbb1 f3f3 	udiv	r3, r1, r3
 800164a:	1c59      	adds	r1, r3, #1
 800164c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001650:	400b      	ands	r3, r1
 8001652:	2b00      	cmp	r3, #0
 8001654:	d00a      	beq.n	800166c <HAL_I2C_Init+0x138>
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	1e59      	subs	r1, r3, #1
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	fbb1 f3f3 	udiv	r3, r1, r3
 8001664:	3301      	adds	r3, #1
 8001666:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800166a:	e051      	b.n	8001710 <HAL_I2C_Init+0x1dc>
 800166c:	2304      	movs	r3, #4
 800166e:	e04f      	b.n	8001710 <HAL_I2C_Init+0x1dc>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d111      	bne.n	800169c <HAL_I2C_Init+0x168>
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	1e58      	subs	r0, r3, #1
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6859      	ldr	r1, [r3, #4]
 8001680:	460b      	mov	r3, r1
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	440b      	add	r3, r1
 8001686:	fbb0 f3f3 	udiv	r3, r0, r3
 800168a:	3301      	adds	r3, #1
 800168c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001690:	2b00      	cmp	r3, #0
 8001692:	bf0c      	ite	eq
 8001694:	2301      	moveq	r3, #1
 8001696:	2300      	movne	r3, #0
 8001698:	b2db      	uxtb	r3, r3
 800169a:	e012      	b.n	80016c2 <HAL_I2C_Init+0x18e>
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	1e58      	subs	r0, r3, #1
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6859      	ldr	r1, [r3, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	440b      	add	r3, r1
 80016aa:	0099      	lsls	r1, r3, #2
 80016ac:	440b      	add	r3, r1
 80016ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80016b2:	3301      	adds	r3, #1
 80016b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	bf0c      	ite	eq
 80016bc:	2301      	moveq	r3, #1
 80016be:	2300      	movne	r3, #0
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <HAL_I2C_Init+0x196>
 80016c6:	2301      	movs	r3, #1
 80016c8:	e022      	b.n	8001710 <HAL_I2C_Init+0x1dc>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d10e      	bne.n	80016f0 <HAL_I2C_Init+0x1bc>
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	1e58      	subs	r0, r3, #1
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6859      	ldr	r1, [r3, #4]
 80016da:	460b      	mov	r3, r1
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	440b      	add	r3, r1
 80016e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80016e4:	3301      	adds	r3, #1
 80016e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016ee:	e00f      	b.n	8001710 <HAL_I2C_Init+0x1dc>
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	1e58      	subs	r0, r3, #1
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6859      	ldr	r1, [r3, #4]
 80016f8:	460b      	mov	r3, r1
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	440b      	add	r3, r1
 80016fe:	0099      	lsls	r1, r3, #2
 8001700:	440b      	add	r3, r1
 8001702:	fbb0 f3f3 	udiv	r3, r0, r3
 8001706:	3301      	adds	r3, #1
 8001708:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800170c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001710:	6879      	ldr	r1, [r7, #4]
 8001712:	6809      	ldr	r1, [r1, #0]
 8001714:	4313      	orrs	r3, r2
 8001716:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	69da      	ldr	r2, [r3, #28]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a1b      	ldr	r3, [r3, #32]
 800172a:	431a      	orrs	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	430a      	orrs	r2, r1
 8001732:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800173e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	6911      	ldr	r1, [r2, #16]
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	68d2      	ldr	r2, [r2, #12]
 800174a:	4311      	orrs	r1, r2
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	6812      	ldr	r2, [r2, #0]
 8001750:	430b      	orrs	r3, r1
 8001752:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	695a      	ldr	r2, [r3, #20]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	431a      	orrs	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	430a      	orrs	r2, r1
 800176e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f042 0201 	orr.w	r2, r2, #1
 800177e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2220      	movs	r2, #32
 800178a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	000186a0 	.word	0x000186a0
 80017ac:	001e847f 	.word	0x001e847f
 80017b0:	003d08ff 	.word	0x003d08ff
 80017b4:	431bde83 	.word	0x431bde83
 80017b8:	10624dd3 	.word	0x10624dd3

080017bc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b088      	sub	sp, #32
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e128      	b.n	8001a20 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d109      	bne.n	80017ee <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a90      	ldr	r2, [pc, #576]	; (8001a28 <HAL_I2S_Init+0x26c>)
 80017e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7ff f9c5 	bl	8000b78 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2202      	movs	r2, #2
 80017f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	69db      	ldr	r3, [r3, #28]
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	6812      	ldr	r2, [r2, #0]
 8001800:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001804:	f023 030f 	bic.w	r3, r3, #15
 8001808:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2202      	movs	r2, #2
 8001810:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	2b02      	cmp	r3, #2
 8001818:	d060      	beq.n	80018dc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d102      	bne.n	8001828 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001822:	2310      	movs	r3, #16
 8001824:	617b      	str	r3, [r7, #20]
 8001826:	e001      	b.n	800182c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001828:	2320      	movs	r3, #32
 800182a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	2b20      	cmp	r3, #32
 8001832:	d802      	bhi.n	800183a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800183a:	2001      	movs	r0, #1
 800183c:	f002 fc82 	bl	8004144 <HAL_RCCEx_GetPeriphCLKFreq>
 8001840:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800184a:	d125      	bne.n	8001898 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d010      	beq.n	8001876 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	68fa      	ldr	r2, [r7, #12]
 800185a:	fbb2 f2f3 	udiv	r2, r2, r3
 800185e:	4613      	mov	r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	4413      	add	r3, r2
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	461a      	mov	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	695b      	ldr	r3, [r3, #20]
 800186c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001870:	3305      	adds	r3, #5
 8001872:	613b      	str	r3, [r7, #16]
 8001874:	e01f      	b.n	80018b6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001880:	4613      	mov	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4413      	add	r3, r2
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	461a      	mov	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001892:	3305      	adds	r3, #5
 8001894:	613b      	str	r3, [r7, #16]
 8001896:	e00e      	b.n	80018b6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001898:	68fa      	ldr	r2, [r7, #12]
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	fbb2 f2f3 	udiv	r2, r2, r3
 80018a0:	4613      	mov	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4413      	add	r3, r2
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	461a      	mov	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	695b      	ldr	r3, [r3, #20]
 80018ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b2:	3305      	adds	r3, #5
 80018b4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	4a5c      	ldr	r2, [pc, #368]	; (8001a2c <HAL_I2S_Init+0x270>)
 80018ba:	fba2 2303 	umull	r2, r3, r2, r3
 80018be:	08db      	lsrs	r3, r3, #3
 80018c0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	085b      	lsrs	r3, r3, #1
 80018d2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	021b      	lsls	r3, r3, #8
 80018d8:	61bb      	str	r3, [r7, #24]
 80018da:	e003      	b.n	80018e4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80018dc:	2302      	movs	r3, #2
 80018de:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80018e0:	2300      	movs	r3, #0
 80018e2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d902      	bls.n	80018f0 <HAL_I2S_Init+0x134>
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	2bff      	cmp	r3, #255	; 0xff
 80018ee:	d907      	bls.n	8001900 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f4:	f043 0210 	orr.w	r2, r3, #16
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e08f      	b.n	8001a20 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	691a      	ldr	r2, [r3, #16]
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	ea42 0103 	orr.w	r1, r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	69fa      	ldr	r2, [r7, #28]
 8001910:	430a      	orrs	r2, r1
 8001912:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800191e:	f023 030f 	bic.w	r3, r3, #15
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	6851      	ldr	r1, [r2, #4]
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	6892      	ldr	r2, [r2, #8]
 800192a:	4311      	orrs	r1, r2
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	68d2      	ldr	r2, [r2, #12]
 8001930:	4311      	orrs	r1, r2
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	6992      	ldr	r2, [r2, #24]
 8001936:	430a      	orrs	r2, r1
 8001938:	431a      	orrs	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001942:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a1b      	ldr	r3, [r3, #32]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d161      	bne.n	8001a10 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4a38      	ldr	r2, [pc, #224]	; (8001a30 <HAL_I2S_Init+0x274>)
 8001950:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a37      	ldr	r2, [pc, #220]	; (8001a34 <HAL_I2S_Init+0x278>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d101      	bne.n	8001960 <HAL_I2S_Init+0x1a4>
 800195c:	4b36      	ldr	r3, [pc, #216]	; (8001a38 <HAL_I2S_Init+0x27c>)
 800195e:	e001      	b.n	8001964 <HAL_I2S_Init+0x1a8>
 8001960:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	6812      	ldr	r2, [r2, #0]
 800196a:	4932      	ldr	r1, [pc, #200]	; (8001a34 <HAL_I2S_Init+0x278>)
 800196c:	428a      	cmp	r2, r1
 800196e:	d101      	bne.n	8001974 <HAL_I2S_Init+0x1b8>
 8001970:	4a31      	ldr	r2, [pc, #196]	; (8001a38 <HAL_I2S_Init+0x27c>)
 8001972:	e001      	b.n	8001978 <HAL_I2S_Init+0x1bc>
 8001974:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001978:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800197c:	f023 030f 	bic.w	r3, r3, #15
 8001980:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a2b      	ldr	r2, [pc, #172]	; (8001a34 <HAL_I2S_Init+0x278>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d101      	bne.n	8001990 <HAL_I2S_Init+0x1d4>
 800198c:	4b2a      	ldr	r3, [pc, #168]	; (8001a38 <HAL_I2S_Init+0x27c>)
 800198e:	e001      	b.n	8001994 <HAL_I2S_Init+0x1d8>
 8001990:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001994:	2202      	movs	r2, #2
 8001996:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a25      	ldr	r2, [pc, #148]	; (8001a34 <HAL_I2S_Init+0x278>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d101      	bne.n	80019a6 <HAL_I2S_Init+0x1ea>
 80019a2:	4b25      	ldr	r3, [pc, #148]	; (8001a38 <HAL_I2S_Init+0x27c>)
 80019a4:	e001      	b.n	80019aa <HAL_I2S_Init+0x1ee>
 80019a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80019aa:	69db      	ldr	r3, [r3, #28]
 80019ac:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019b6:	d003      	beq.n	80019c0 <HAL_I2S_Init+0x204>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d103      	bne.n	80019c8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80019c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	e001      	b.n	80019cc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80019c8:	2300      	movs	r3, #0
 80019ca:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80019d6:	4313      	orrs	r3, r2
 80019d8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80019e0:	4313      	orrs	r3, r2
 80019e2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80019ea:	4313      	orrs	r3, r2
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	897b      	ldrh	r3, [r7, #10]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019f8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a0d      	ldr	r2, [pc, #52]	; (8001a34 <HAL_I2S_Init+0x278>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d101      	bne.n	8001a08 <HAL_I2S_Init+0x24c>
 8001a04:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <HAL_I2S_Init+0x27c>)
 8001a06:	e001      	b.n	8001a0c <HAL_I2S_Init+0x250>
 8001a08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a0c:	897a      	ldrh	r2, [r7, #10]
 8001a0e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3720      	adds	r7, #32
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	08001b33 	.word	0x08001b33
 8001a2c:	cccccccd 	.word	0xcccccccd
 8001a30:	08001c49 	.word	0x08001c49
 8001a34:	40003800 	.word	0x40003800
 8001a38:	40003400 	.word	0x40003400

08001a3c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a84:	881a      	ldrh	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a90:	1c9a      	adds	r2, r3, #2
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d10e      	bne.n	8001acc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001abc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff ffb8 	bl	8001a3c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001acc:	bf00      	nop
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	68da      	ldr	r2, [r3, #12]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae6:	b292      	uxth	r2, r2
 8001ae8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aee:	1c9a      	adds	r2, r3, #2
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	3b01      	subs	r3, #1
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d10e      	bne.n	8001b2a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	685a      	ldr	r2, [r3, #4]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001b1a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff ff93 	bl	8001a50 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b086      	sub	sp, #24
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	d13a      	bne.n	8001bc4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d109      	bne.n	8001b6c <I2S_IRQHandler+0x3a>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b62:	2b40      	cmp	r3, #64	; 0x40
 8001b64:	d102      	bne.n	8001b6c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7ff ffb4 	bl	8001ad4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b72:	2b40      	cmp	r3, #64	; 0x40
 8001b74:	d126      	bne.n	8001bc4 <I2S_IRQHandler+0x92>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 0320 	and.w	r3, r3, #32
 8001b80:	2b20      	cmp	r3, #32
 8001b82:	d11f      	bne.n	8001bc4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	685a      	ldr	r2, [r3, #4]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001b92:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001b94:	2300      	movs	r3, #0
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	613b      	str	r3, [r7, #16]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	613b      	str	r3, [r7, #16]
 8001ba8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb6:	f043 0202 	orr.w	r2, r3, #2
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7ff ff50 	bl	8001a64 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	2b03      	cmp	r3, #3
 8001bce:	d136      	bne.n	8001c3e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d109      	bne.n	8001bee <I2S_IRQHandler+0xbc>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be4:	2b80      	cmp	r3, #128	; 0x80
 8001be6:	d102      	bne.n	8001bee <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f7ff ff45 	bl	8001a78 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	f003 0308 	and.w	r3, r3, #8
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d122      	bne.n	8001c3e <I2S_IRQHandler+0x10c>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f003 0320 	and.w	r3, r3, #32
 8001c02:	2b20      	cmp	r3, #32
 8001c04:	d11b      	bne.n	8001c3e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001c14:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001c16:	2300      	movs	r3, #0
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c30:	f043 0204 	orr.w	r2, r3, #4
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f7ff ff13 	bl	8001a64 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001c3e:	bf00      	nop
 8001c40:	3718      	adds	r7, #24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
	...

08001c48 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b088      	sub	sp, #32
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a92      	ldr	r2, [pc, #584]	; (8001ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d101      	bne.n	8001c66 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001c62:	4b92      	ldr	r3, [pc, #584]	; (8001eac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001c64:	e001      	b.n	8001c6a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001c66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a8b      	ldr	r2, [pc, #556]	; (8001ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d101      	bne.n	8001c84 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001c80:	4b8a      	ldr	r3, [pc, #552]	; (8001eac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001c82:	e001      	b.n	8001c88 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001c84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c94:	d004      	beq.n	8001ca0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f040 8099 	bne.w	8001dd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d107      	bne.n	8001cba <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d002      	beq.n	8001cba <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f000 f925 	bl	8001f04 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d107      	bne.n	8001cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d002      	beq.n	8001cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f9c8 	bl	8002064 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cda:	2b40      	cmp	r3, #64	; 0x40
 8001cdc:	d13a      	bne.n	8001d54 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	f003 0320 	and.w	r3, r3, #32
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d035      	beq.n	8001d54 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a6e      	ldr	r2, [pc, #440]	; (8001ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d101      	bne.n	8001cf6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001cf2:	4b6e      	ldr	r3, [pc, #440]	; (8001eac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001cf4:	e001      	b.n	8001cfa <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001cf6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4969      	ldr	r1, [pc, #420]	; (8001ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d02:	428b      	cmp	r3, r1
 8001d04:	d101      	bne.n	8001d0a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001d06:	4b69      	ldr	r3, [pc, #420]	; (8001eac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d08:	e001      	b.n	8001d0e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001d0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d0e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001d12:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d22:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001d24:	2300      	movs	r3, #0
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d46:	f043 0202 	orr.w	r2, r3, #2
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7ff fe88 	bl	8001a64 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	f003 0308 	and.w	r3, r3, #8
 8001d5a:	2b08      	cmp	r3, #8
 8001d5c:	f040 80c3 	bne.w	8001ee6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	f003 0320 	and.w	r3, r3, #32
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f000 80bd 	beq.w	8001ee6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	685a      	ldr	r2, [r3, #4]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d7a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a49      	ldr	r2, [pc, #292]	; (8001ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d101      	bne.n	8001d8a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001d86:	4b49      	ldr	r3, [pc, #292]	; (8001eac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d88:	e001      	b.n	8001d8e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001d8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4944      	ldr	r1, [pc, #272]	; (8001ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d96:	428b      	cmp	r3, r1
 8001d98:	d101      	bne.n	8001d9e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001d9a:	4b44      	ldr	r3, [pc, #272]	; (8001eac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d9c:	e001      	b.n	8001da2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001d9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001da2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001da6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001da8:	2300      	movs	r3, #0
 8001daa:	60bb      	str	r3, [r7, #8]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	60bb      	str	r3, [r7, #8]
 8001db4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2201      	movs	r2, #1
 8001dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	f043 0204 	orr.w	r2, r3, #4
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f7ff fe4a 	bl	8001a64 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001dd0:	e089      	b.n	8001ee6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d107      	bne.n	8001dec <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d002      	beq.n	8001dec <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f8be 	bl	8001f68 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d107      	bne.n	8001e06 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d002      	beq.n	8001e06 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f000 f8fd 	bl	8002000 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e0c:	2b40      	cmp	r3, #64	; 0x40
 8001e0e:	d12f      	bne.n	8001e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	f003 0320 	and.w	r3, r3, #32
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d02a      	beq.n	8001e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e28:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a1e      	ldr	r2, [pc, #120]	; (8001ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d101      	bne.n	8001e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001e34:	4b1d      	ldr	r3, [pc, #116]	; (8001eac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e36:	e001      	b.n	8001e3c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001e38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e3c:	685a      	ldr	r2, [r3, #4]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4919      	ldr	r1, [pc, #100]	; (8001ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e44:	428b      	cmp	r3, r1
 8001e46:	d101      	bne.n	8001e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001e48:	4b18      	ldr	r3, [pc, #96]	; (8001eac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e4a:	e001      	b.n	8001e50 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001e4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e50:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e54:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e62:	f043 0202 	orr.w	r2, r3, #2
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff fdfa 	bl	8001a64 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	f003 0308 	and.w	r3, r3, #8
 8001e76:	2b08      	cmp	r3, #8
 8001e78:	d136      	bne.n	8001ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	f003 0320 	and.w	r3, r3, #32
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d031      	beq.n	8001ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a07      	ldr	r2, [pc, #28]	; (8001ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d101      	bne.n	8001e92 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001e8e:	4b07      	ldr	r3, [pc, #28]	; (8001eac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e90:	e001      	b.n	8001e96 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001e92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e96:	685a      	ldr	r2, [r3, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4902      	ldr	r1, [pc, #8]	; (8001ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e9e:	428b      	cmp	r3, r1
 8001ea0:	d106      	bne.n	8001eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8001ea2:	4b02      	ldr	r3, [pc, #8]	; (8001eac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001ea4:	e006      	b.n	8001eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8001ea6:	bf00      	nop
 8001ea8:	40003800 	.word	0x40003800
 8001eac:	40003400 	.word	0x40003400
 8001eb0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001eb4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001eb8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ec8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed6:	f043 0204 	orr.w	r2, r3, #4
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7ff fdc0 	bl	8001a64 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001ee4:	e000      	b.n	8001ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001ee6:	bf00      	nop
}
 8001ee8:	bf00      	nop
 8001eea:	3720      	adds	r7, #32
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f10:	1c99      	adds	r1, r3, #2
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	6251      	str	r1, [r2, #36]	; 0x24
 8001f16:	881a      	ldrh	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	3b01      	subs	r3, #1
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d113      	bne.n	8001f5e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	685a      	ldr	r2, [r3, #4]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f44:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d106      	bne.n	8001f5e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f7ff ffc9 	bl	8001ef0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001f5e:	bf00      	nop
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f74:	1c99      	adds	r1, r3, #2
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	6251      	str	r1, [r2, #36]	; 0x24
 8001f7a:	8819      	ldrh	r1, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a1d      	ldr	r2, [pc, #116]	; (8001ff8 <I2SEx_TxISR_I2SExt+0x90>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d101      	bne.n	8001f8a <I2SEx_TxISR_I2SExt+0x22>
 8001f86:	4b1d      	ldr	r3, [pc, #116]	; (8001ffc <I2SEx_TxISR_I2SExt+0x94>)
 8001f88:	e001      	b.n	8001f8e <I2SEx_TxISR_I2SExt+0x26>
 8001f8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f8e:	460a      	mov	r2, r1
 8001f90:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d121      	bne.n	8001fee <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a12      	ldr	r2, [pc, #72]	; (8001ff8 <I2SEx_TxISR_I2SExt+0x90>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d101      	bne.n	8001fb8 <I2SEx_TxISR_I2SExt+0x50>
 8001fb4:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <I2SEx_TxISR_I2SExt+0x94>)
 8001fb6:	e001      	b.n	8001fbc <I2SEx_TxISR_I2SExt+0x54>
 8001fb8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fbc:	685a      	ldr	r2, [r3, #4]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	490d      	ldr	r1, [pc, #52]	; (8001ff8 <I2SEx_TxISR_I2SExt+0x90>)
 8001fc4:	428b      	cmp	r3, r1
 8001fc6:	d101      	bne.n	8001fcc <I2SEx_TxISR_I2SExt+0x64>
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <I2SEx_TxISR_I2SExt+0x94>)
 8001fca:	e001      	b.n	8001fd0 <I2SEx_TxISR_I2SExt+0x68>
 8001fcc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fd0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001fd4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d106      	bne.n	8001fee <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f7ff ff81 	bl	8001ef0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40003800 	.word	0x40003800
 8001ffc:	40003400 	.word	0x40003400

08002000 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68d8      	ldr	r0, [r3, #12]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002012:	1c99      	adds	r1, r3, #2
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002018:	b282      	uxth	r2, r0
 800201a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002020:	b29b      	uxth	r3, r3
 8002022:	3b01      	subs	r3, #1
 8002024:	b29a      	uxth	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800202e:	b29b      	uxth	r3, r3
 8002030:	2b00      	cmp	r3, #0
 8002032:	d113      	bne.n	800205c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	685a      	ldr	r2, [r3, #4]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002042:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002048:	b29b      	uxth	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d106      	bne.n	800205c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2201      	movs	r2, #1
 8002052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7ff ff4a 	bl	8001ef0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800205c:	bf00      	nop
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a20      	ldr	r2, [pc, #128]	; (80020f4 <I2SEx_RxISR_I2SExt+0x90>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d101      	bne.n	800207a <I2SEx_RxISR_I2SExt+0x16>
 8002076:	4b20      	ldr	r3, [pc, #128]	; (80020f8 <I2SEx_RxISR_I2SExt+0x94>)
 8002078:	e001      	b.n	800207e <I2SEx_RxISR_I2SExt+0x1a>
 800207a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800207e:	68d8      	ldr	r0, [r3, #12]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002084:	1c99      	adds	r1, r3, #2
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	62d1      	str	r1, [r2, #44]	; 0x2c
 800208a:	b282      	uxth	r2, r0
 800208c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002092:	b29b      	uxth	r3, r3
 8002094:	3b01      	subs	r3, #1
 8002096:	b29a      	uxth	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d121      	bne.n	80020ea <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a12      	ldr	r2, [pc, #72]	; (80020f4 <I2SEx_RxISR_I2SExt+0x90>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d101      	bne.n	80020b4 <I2SEx_RxISR_I2SExt+0x50>
 80020b0:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <I2SEx_RxISR_I2SExt+0x94>)
 80020b2:	e001      	b.n	80020b8 <I2SEx_RxISR_I2SExt+0x54>
 80020b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	490d      	ldr	r1, [pc, #52]	; (80020f4 <I2SEx_RxISR_I2SExt+0x90>)
 80020c0:	428b      	cmp	r3, r1
 80020c2:	d101      	bne.n	80020c8 <I2SEx_RxISR_I2SExt+0x64>
 80020c4:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <I2SEx_RxISR_I2SExt+0x94>)
 80020c6:	e001      	b.n	80020cc <I2SEx_RxISR_I2SExt+0x68>
 80020c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020cc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80020d0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d106      	bne.n	80020ea <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f7ff ff03 	bl	8001ef0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40003800 	.word	0x40003800
 80020f8:	40003400 	.word	0x40003400

080020fc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020fe:	b08f      	sub	sp, #60	; 0x3c
 8002100:	af0a      	add	r7, sp, #40	; 0x28
 8002102:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e10f      	b.n	800232e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b00      	cmp	r3, #0
 800211e:	d106      	bne.n	800212e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f008 ff63 	bl	800aff4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2203      	movs	r2, #3
 8002132:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800213a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213e:	2b00      	cmp	r3, #0
 8002140:	d102      	bne.n	8002148 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4618      	mov	r0, r3
 800214e:	f002 fc76 	bl	8004a3e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	603b      	str	r3, [r7, #0]
 8002158:	687e      	ldr	r6, [r7, #4]
 800215a:	466d      	mov	r5, sp
 800215c:	f106 0410 	add.w	r4, r6, #16
 8002160:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002162:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002164:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002166:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002168:	e894 0003 	ldmia.w	r4, {r0, r1}
 800216c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002170:	1d33      	adds	r3, r6, #4
 8002172:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002174:	6838      	ldr	r0, [r7, #0]
 8002176:	f002 fb4d 	bl	8004814 <USB_CoreInit>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d005      	beq.n	800218c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2202      	movs	r2, #2
 8002184:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e0d0      	b.n	800232e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2100      	movs	r1, #0
 8002192:	4618      	mov	r0, r3
 8002194:	f002 fc64 	bl	8004a60 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002198:	2300      	movs	r3, #0
 800219a:	73fb      	strb	r3, [r7, #15]
 800219c:	e04a      	b.n	8002234 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800219e:	7bfa      	ldrb	r2, [r7, #15]
 80021a0:	6879      	ldr	r1, [r7, #4]
 80021a2:	4613      	mov	r3, r2
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	4413      	add	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	440b      	add	r3, r1
 80021ac:	333d      	adds	r3, #61	; 0x3d
 80021ae:	2201      	movs	r2, #1
 80021b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80021b2:	7bfa      	ldrb	r2, [r7, #15]
 80021b4:	6879      	ldr	r1, [r7, #4]
 80021b6:	4613      	mov	r3, r2
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	4413      	add	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	440b      	add	r3, r1
 80021c0:	333c      	adds	r3, #60	; 0x3c
 80021c2:	7bfa      	ldrb	r2, [r7, #15]
 80021c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021c6:	7bfa      	ldrb	r2, [r7, #15]
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
 80021ca:	b298      	uxth	r0, r3
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	4613      	mov	r3, r2
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	4413      	add	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	440b      	add	r3, r1
 80021d8:	3344      	adds	r3, #68	; 0x44
 80021da:	4602      	mov	r2, r0
 80021dc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021de:	7bfa      	ldrb	r2, [r7, #15]
 80021e0:	6879      	ldr	r1, [r7, #4]
 80021e2:	4613      	mov	r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	4413      	add	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	440b      	add	r3, r1
 80021ec:	3340      	adds	r3, #64	; 0x40
 80021ee:	2200      	movs	r2, #0
 80021f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021f2:	7bfa      	ldrb	r2, [r7, #15]
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	4613      	mov	r3, r2
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	4413      	add	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	440b      	add	r3, r1
 8002200:	3348      	adds	r3, #72	; 0x48
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002206:	7bfa      	ldrb	r2, [r7, #15]
 8002208:	6879      	ldr	r1, [r7, #4]
 800220a:	4613      	mov	r3, r2
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	4413      	add	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	440b      	add	r3, r1
 8002214:	334c      	adds	r3, #76	; 0x4c
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800221a:	7bfa      	ldrb	r2, [r7, #15]
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	4613      	mov	r3, r2
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	4413      	add	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	440b      	add	r3, r1
 8002228:	3354      	adds	r3, #84	; 0x54
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800222e:	7bfb      	ldrb	r3, [r7, #15]
 8002230:	3301      	adds	r3, #1
 8002232:	73fb      	strb	r3, [r7, #15]
 8002234:	7bfa      	ldrb	r2, [r7, #15]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	429a      	cmp	r2, r3
 800223c:	d3af      	bcc.n	800219e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800223e:	2300      	movs	r3, #0
 8002240:	73fb      	strb	r3, [r7, #15]
 8002242:	e044      	b.n	80022ce <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002244:	7bfa      	ldrb	r2, [r7, #15]
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	4613      	mov	r3, r2
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	4413      	add	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	440b      	add	r3, r1
 8002252:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002256:	2200      	movs	r2, #0
 8002258:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800225a:	7bfa      	ldrb	r2, [r7, #15]
 800225c:	6879      	ldr	r1, [r7, #4]
 800225e:	4613      	mov	r3, r2
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	4413      	add	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	440b      	add	r3, r1
 8002268:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800226c:	7bfa      	ldrb	r2, [r7, #15]
 800226e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002270:	7bfa      	ldrb	r2, [r7, #15]
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	4613      	mov	r3, r2
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	4413      	add	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	440b      	add	r3, r1
 800227e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002282:	2200      	movs	r2, #0
 8002284:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002286:	7bfa      	ldrb	r2, [r7, #15]
 8002288:	6879      	ldr	r1, [r7, #4]
 800228a:	4613      	mov	r3, r2
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	4413      	add	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	440b      	add	r3, r1
 8002294:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800229c:	7bfa      	ldrb	r2, [r7, #15]
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	4613      	mov	r3, r2
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	4413      	add	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	440b      	add	r3, r1
 80022aa:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80022b2:	7bfa      	ldrb	r2, [r7, #15]
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	4613      	mov	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	4413      	add	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	440b      	add	r3, r1
 80022c0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022c8:	7bfb      	ldrb	r3, [r7, #15]
 80022ca:	3301      	adds	r3, #1
 80022cc:	73fb      	strb	r3, [r7, #15]
 80022ce:	7bfa      	ldrb	r2, [r7, #15]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d3b5      	bcc.n	8002244 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	603b      	str	r3, [r7, #0]
 80022de:	687e      	ldr	r6, [r7, #4]
 80022e0:	466d      	mov	r5, sp
 80022e2:	f106 0410 	add.w	r4, r6, #16
 80022e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80022f6:	1d33      	adds	r3, r6, #4
 80022f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022fa:	6838      	ldr	r0, [r7, #0]
 80022fc:	f002 fbfc 	bl	8004af8 <USB_DevInit>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d005      	beq.n	8002312 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2202      	movs	r2, #2
 800230a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e00d      	b.n	800232e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2201      	movs	r2, #1
 800231e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f003 fd4b 	bl	8005dc2 <USB_DevDisconnect>

  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3714      	adds	r7, #20
 8002332:	46bd      	mov	sp, r7
 8002334:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002336 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b084      	sub	sp, #16
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800234a:	2b01      	cmp	r3, #1
 800234c:	d101      	bne.n	8002352 <HAL_PCD_Start+0x1c>
 800234e:	2302      	movs	r3, #2
 8002350:	e020      	b.n	8002394 <HAL_PCD_Start+0x5e>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235e:	2b01      	cmp	r3, #1
 8002360:	d109      	bne.n	8002376 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002366:	2b01      	cmp	r3, #1
 8002368:	d005      	beq.n	8002376 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800236e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f002 fb4e 	bl	8004a1c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f003 fcfb 	bl	8005d80 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3710      	adds	r7, #16
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800239c:	b590      	push	{r4, r7, lr}
 800239e:	b08d      	sub	sp, #52	; 0x34
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023aa:	6a3b      	ldr	r3, [r7, #32]
 80023ac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f003 fdb9 	bl	8005f2a <USB_GetMode>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f040 848a 	bne.w	8002cd4 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f003 fd1d 	bl	8005e04 <USB_ReadInterrupts>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 8480 	beq.w	8002cd2 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	0a1b      	lsrs	r3, r3, #8
 80023dc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f003 fd0a 	bl	8005e04 <USB_ReadInterrupts>
 80023f0:	4603      	mov	r3, r0
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d107      	bne.n	800240a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	695a      	ldr	r2, [r3, #20]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f002 0202 	and.w	r2, r2, #2
 8002408:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f003 fcf8 	bl	8005e04 <USB_ReadInterrupts>
 8002414:	4603      	mov	r3, r0
 8002416:	f003 0310 	and.w	r3, r3, #16
 800241a:	2b10      	cmp	r3, #16
 800241c:	d161      	bne.n	80024e2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	699a      	ldr	r2, [r3, #24]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f022 0210 	bic.w	r2, r2, #16
 800242c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800242e:	6a3b      	ldr	r3, [r7, #32]
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	f003 020f 	and.w	r2, r3, #15
 800243a:	4613      	mov	r3, r2
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	4413      	add	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	4413      	add	r3, r2
 800244a:	3304      	adds	r3, #4
 800244c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	0c5b      	lsrs	r3, r3, #17
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	2b02      	cmp	r3, #2
 8002458:	d124      	bne.n	80024a4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002460:	4013      	ands	r3, r2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d035      	beq.n	80024d2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	091b      	lsrs	r3, r3, #4
 800246e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002470:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002474:	b29b      	uxth	r3, r3
 8002476:	461a      	mov	r2, r3
 8002478:	6a38      	ldr	r0, [r7, #32]
 800247a:	f003 fb2f 	bl	8005adc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	691a      	ldr	r2, [r3, #16]
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	091b      	lsrs	r3, r3, #4
 8002486:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800248a:	441a      	add	r2, r3
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	6a1a      	ldr	r2, [r3, #32]
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	091b      	lsrs	r3, r3, #4
 8002498:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800249c:	441a      	add	r2, r3
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	621a      	str	r2, [r3, #32]
 80024a2:	e016      	b.n	80024d2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	0c5b      	lsrs	r3, r3, #17
 80024a8:	f003 030f 	and.w	r3, r3, #15
 80024ac:	2b06      	cmp	r3, #6
 80024ae:	d110      	bne.n	80024d2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80024b6:	2208      	movs	r2, #8
 80024b8:	4619      	mov	r1, r3
 80024ba:	6a38      	ldr	r0, [r7, #32]
 80024bc:	f003 fb0e 	bl	8005adc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	6a1a      	ldr	r2, [r3, #32]
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	091b      	lsrs	r3, r3, #4
 80024c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024cc:	441a      	add	r2, r3
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	699a      	ldr	r2, [r3, #24]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f042 0210 	orr.w	r2, r2, #16
 80024e0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f003 fc8c 	bl	8005e04 <USB_ReadInterrupts>
 80024ec:	4603      	mov	r3, r0
 80024ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024f2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80024f6:	f040 80a7 	bne.w	8002648 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f003 fc91 	bl	8005e2a <USB_ReadDevAllOutEpInterrupt>
 8002508:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800250a:	e099      	b.n	8002640 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800250c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b00      	cmp	r3, #0
 8002514:	f000 808e 	beq.w	8002634 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	4611      	mov	r1, r2
 8002522:	4618      	mov	r0, r3
 8002524:	f003 fcb5 	bl	8005e92 <USB_ReadDevOutEPInterrupt>
 8002528:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	2b00      	cmp	r3, #0
 8002532:	d00c      	beq.n	800254e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002536:	015a      	lsls	r2, r3, #5
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	4413      	add	r3, r2
 800253c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002540:	461a      	mov	r2, r3
 8002542:	2301      	movs	r3, #1
 8002544:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002546:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 fec3 	bl	80032d4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	f003 0308 	and.w	r3, r3, #8
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00c      	beq.n	8002572 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	015a      	lsls	r2, r3, #5
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	4413      	add	r3, r2
 8002560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002564:	461a      	mov	r2, r3
 8002566:	2308      	movs	r3, #8
 8002568:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800256a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f000 ff99 	bl	80034a4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	f003 0310 	and.w	r3, r3, #16
 8002578:	2b00      	cmp	r3, #0
 800257a:	d008      	beq.n	800258e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	015a      	lsls	r2, r3, #5
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	4413      	add	r3, r2
 8002584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002588:	461a      	mov	r2, r3
 800258a:	2310      	movs	r3, #16
 800258c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d030      	beq.n	80025fa <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002598:	6a3b      	ldr	r3, [r7, #32]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a0:	2b80      	cmp	r3, #128	; 0x80
 80025a2:	d109      	bne.n	80025b8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	69fa      	ldr	r2, [r7, #28]
 80025ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025b6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80025b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ba:	4613      	mov	r3, r2
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	4413      	add	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	4413      	add	r3, r2
 80025ca:	3304      	adds	r3, #4
 80025cc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	78db      	ldrb	r3, [r3, #3]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d108      	bne.n	80025e8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	2200      	movs	r2, #0
 80025da:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	4619      	mov	r1, r3
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f008 fe10 	bl	800b208 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	015a      	lsls	r2, r3, #5
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	4413      	add	r3, r2
 80025f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025f4:	461a      	mov	r2, r3
 80025f6:	2302      	movs	r3, #2
 80025f8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	f003 0320 	and.w	r3, r3, #32
 8002600:	2b00      	cmp	r3, #0
 8002602:	d008      	beq.n	8002616 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002606:	015a      	lsls	r2, r3, #5
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	4413      	add	r3, r2
 800260c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002610:	461a      	mov	r2, r3
 8002612:	2320      	movs	r3, #32
 8002614:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d009      	beq.n	8002634 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002622:	015a      	lsls	r2, r3, #5
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	4413      	add	r3, r2
 8002628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800262c:	461a      	mov	r2, r3
 800262e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002632:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002636:	3301      	adds	r3, #1
 8002638:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800263a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800263c:	085b      	lsrs	r3, r3, #1
 800263e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002642:	2b00      	cmp	r3, #0
 8002644:	f47f af62 	bne.w	800250c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f003 fbd9 	bl	8005e04 <USB_ReadInterrupts>
 8002652:	4603      	mov	r3, r0
 8002654:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002658:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800265c:	f040 80db 	bne.w	8002816 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4618      	mov	r0, r3
 8002666:	f003 fbfa 	bl	8005e5e <USB_ReadDevAllInEpInterrupt>
 800266a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800266c:	2300      	movs	r3, #0
 800266e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002670:	e0cd      	b.n	800280e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	2b00      	cmp	r3, #0
 800267a:	f000 80c2 	beq.w	8002802 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002684:	b2d2      	uxtb	r2, r2
 8002686:	4611      	mov	r1, r2
 8002688:	4618      	mov	r0, r3
 800268a:	f003 fc20 	bl	8005ece <USB_ReadDevInEPInterrupt>
 800268e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b00      	cmp	r3, #0
 8002698:	d057      	beq.n	800274a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	f003 030f 	and.w	r3, r3, #15
 80026a0:	2201      	movs	r2, #1
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	43db      	mvns	r3, r3
 80026b4:	69f9      	ldr	r1, [r7, #28]
 80026b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80026ba:	4013      	ands	r3, r2
 80026bc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80026be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c0:	015a      	lsls	r2, r3, #5
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	4413      	add	r3, r2
 80026c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026ca:	461a      	mov	r2, r3
 80026cc:	2301      	movs	r3, #1
 80026ce:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d132      	bne.n	800273e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026dc:	4613      	mov	r3, r2
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	4413      	add	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	440b      	add	r3, r1
 80026e6:	334c      	adds	r3, #76	; 0x4c
 80026e8:	6819      	ldr	r1, [r3, #0]
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ee:	4613      	mov	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	4413      	add	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4403      	add	r3, r0
 80026f8:	3348      	adds	r3, #72	; 0x48
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4419      	add	r1, r3
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002702:	4613      	mov	r3, r2
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	4413      	add	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4403      	add	r3, r0
 800270c:	334c      	adds	r3, #76	; 0x4c
 800270e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002712:	2b00      	cmp	r3, #0
 8002714:	d113      	bne.n	800273e <HAL_PCD_IRQHandler+0x3a2>
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800271a:	4613      	mov	r3, r2
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	4413      	add	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	440b      	add	r3, r1
 8002724:	3354      	adds	r3, #84	; 0x54
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d108      	bne.n	800273e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6818      	ldr	r0, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002736:	461a      	mov	r2, r3
 8002738:	2101      	movs	r1, #1
 800273a:	f003 fc27 	bl	8005f8c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	b2db      	uxtb	r3, r3
 8002742:	4619      	mov	r1, r3
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f008 fce4 	bl	800b112 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	f003 0308 	and.w	r3, r3, #8
 8002750:	2b00      	cmp	r3, #0
 8002752:	d008      	beq.n	8002766 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002756:	015a      	lsls	r2, r3, #5
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	4413      	add	r3, r2
 800275c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002760:	461a      	mov	r2, r3
 8002762:	2308      	movs	r3, #8
 8002764:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	f003 0310 	and.w	r3, r3, #16
 800276c:	2b00      	cmp	r3, #0
 800276e:	d008      	beq.n	8002782 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002772:	015a      	lsls	r2, r3, #5
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	4413      	add	r3, r2
 8002778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800277c:	461a      	mov	r2, r3
 800277e:	2310      	movs	r3, #16
 8002780:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002788:	2b00      	cmp	r3, #0
 800278a:	d008      	beq.n	800279e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	015a      	lsls	r2, r3, #5
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	4413      	add	r3, r2
 8002794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002798:	461a      	mov	r2, r3
 800279a:	2340      	movs	r3, #64	; 0x40
 800279c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d023      	beq.n	80027f0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80027a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027aa:	6a38      	ldr	r0, [r7, #32]
 80027ac:	f002 fb08 	bl	8004dc0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80027b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027b2:	4613      	mov	r3, r2
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	4413      	add	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	3338      	adds	r3, #56	; 0x38
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	4413      	add	r3, r2
 80027c0:	3304      	adds	r3, #4
 80027c2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	78db      	ldrb	r3, [r3, #3]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d108      	bne.n	80027de <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	2200      	movs	r2, #0
 80027d0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	4619      	mov	r1, r3
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f008 fd27 	bl	800b22c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	015a      	lsls	r2, r3, #5
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	4413      	add	r3, r2
 80027e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027ea:	461a      	mov	r2, r3
 80027ec:	2302      	movs	r3, #2
 80027ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80027fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 fcdb 	bl	80031b8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	3301      	adds	r3, #1
 8002806:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800280a:	085b      	lsrs	r3, r3, #1
 800280c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800280e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002810:	2b00      	cmp	r3, #0
 8002812:	f47f af2e 	bne.w	8002672 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f003 faf2 	bl	8005e04 <USB_ReadInterrupts>
 8002820:	4603      	mov	r3, r0
 8002822:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002826:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800282a:	d122      	bne.n	8002872 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	69fa      	ldr	r2, [r7, #28]
 8002836:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800283a:	f023 0301 	bic.w	r3, r3, #1
 800283e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002846:	2b01      	cmp	r3, #1
 8002848:	d108      	bne.n	800285c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002852:	2100      	movs	r1, #0
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f000 fec3 	bl	80035e0 <HAL_PCDEx_LPM_Callback>
 800285a:	e002      	b.n	8002862 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f008 fcc5 	bl	800b1ec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	695a      	ldr	r2, [r3, #20]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002870:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f003 fac4 	bl	8005e04 <USB_ReadInterrupts>
 800287c:	4603      	mov	r3, r0
 800287e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002882:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002886:	d112      	bne.n	80028ae <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	2b01      	cmp	r3, #1
 8002896:	d102      	bne.n	800289e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f008 fc81 	bl	800b1a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	695a      	ldr	r2, [r3, #20]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80028ac:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f003 faa6 	bl	8005e04 <USB_ReadInterrupts>
 80028b8:	4603      	mov	r3, r0
 80028ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028c2:	f040 80b7 	bne.w	8002a34 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	69fa      	ldr	r2, [r7, #28]
 80028d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028d4:	f023 0301 	bic.w	r3, r3, #1
 80028d8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2110      	movs	r1, #16
 80028e0:	4618      	mov	r0, r3
 80028e2:	f002 fa6d 	bl	8004dc0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028e6:	2300      	movs	r3, #0
 80028e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028ea:	e046      	b.n	800297a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80028ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ee:	015a      	lsls	r2, r3, #5
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	4413      	add	r3, r2
 80028f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028f8:	461a      	mov	r2, r3
 80028fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80028fe:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002902:	015a      	lsls	r2, r3, #5
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	4413      	add	r3, r2
 8002908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002910:	0151      	lsls	r1, r2, #5
 8002912:	69fa      	ldr	r2, [r7, #28]
 8002914:	440a      	add	r2, r1
 8002916:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800291a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800291e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002922:	015a      	lsls	r2, r3, #5
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	4413      	add	r3, r2
 8002928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800292c:	461a      	mov	r2, r3
 800292e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002932:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002936:	015a      	lsls	r2, r3, #5
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	4413      	add	r3, r2
 800293c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002944:	0151      	lsls	r1, r2, #5
 8002946:	69fa      	ldr	r2, [r7, #28]
 8002948:	440a      	add	r2, r1
 800294a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800294e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002952:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002956:	015a      	lsls	r2, r3, #5
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	4413      	add	r3, r2
 800295c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002964:	0151      	lsls	r1, r2, #5
 8002966:	69fa      	ldr	r2, [r7, #28]
 8002968:	440a      	add	r2, r1
 800296a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800296e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002972:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002976:	3301      	adds	r3, #1
 8002978:	62fb      	str	r3, [r7, #44]	; 0x2c
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002980:	429a      	cmp	r2, r3
 8002982:	d3b3      	bcc.n	80028ec <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800298a:	69db      	ldr	r3, [r3, #28]
 800298c:	69fa      	ldr	r2, [r7, #28]
 800298e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002992:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002996:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299c:	2b00      	cmp	r3, #0
 800299e:	d016      	beq.n	80029ce <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029aa:	69fa      	ldr	r2, [r7, #28]
 80029ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029b0:	f043 030b 	orr.w	r3, r3, #11
 80029b4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c0:	69fa      	ldr	r2, [r7, #28]
 80029c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029c6:	f043 030b 	orr.w	r3, r3, #11
 80029ca:	6453      	str	r3, [r2, #68]	; 0x44
 80029cc:	e015      	b.n	80029fa <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	69fa      	ldr	r2, [r7, #28]
 80029d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80029e0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80029e4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	69fa      	ldr	r2, [r7, #28]
 80029f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029f4:	f043 030b 	orr.w	r3, r3, #11
 80029f8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	69fa      	ldr	r2, [r7, #28]
 8002a04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a08:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002a0c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6818      	ldr	r0, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002a1e:	461a      	mov	r2, r3
 8002a20:	f003 fab4 	bl	8005f8c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	695a      	ldr	r2, [r3, #20]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002a32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f003 f9e3 	bl	8005e04 <USB_ReadInterrupts>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a48:	d124      	bne.n	8002a94 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f003 fa79 	bl	8005f46 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f002 fa2e 	bl	8004eba <USB_GetDevSpeed>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	461a      	mov	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681c      	ldr	r4, [r3, #0]
 8002a6a:	f001 fa29 	bl	8003ec0 <HAL_RCC_GetHCLKFreq>
 8002a6e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	461a      	mov	r2, r3
 8002a78:	4620      	mov	r0, r4
 8002a7a:	f001 ff2d 	bl	80048d8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f008 fb6f 	bl	800b162 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	695a      	ldr	r2, [r3, #20]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002a92:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f003 f9b3 	bl	8005e04 <USB_ReadInterrupts>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	f003 0308 	and.w	r3, r3, #8
 8002aa4:	2b08      	cmp	r3, #8
 8002aa6:	d10a      	bne.n	8002abe <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f008 fb4c 	bl	800b146 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	695a      	ldr	r2, [r3, #20]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f002 0208 	and.w	r2, r2, #8
 8002abc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f003 f99e 	bl	8005e04 <USB_ReadInterrupts>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ace:	2b80      	cmp	r3, #128	; 0x80
 8002ad0:	d122      	bne.n	8002b18 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002ad2:	6a3b      	ldr	r3, [r7, #32]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ada:	6a3b      	ldr	r3, [r7, #32]
 8002adc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ade:	2301      	movs	r3, #1
 8002ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae2:	e014      	b.n	8002b0e <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ae8:	4613      	mov	r3, r2
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	4413      	add	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d105      	bne.n	8002b08 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	4619      	mov	r1, r3
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 fb27 	bl	8003156 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d3e5      	bcc.n	8002ae4 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f003 f971 	bl	8005e04 <USB_ReadInterrupts>
 8002b22:	4603      	mov	r3, r0
 8002b24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b2c:	d13b      	bne.n	8002ba6 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b2e:	2301      	movs	r3, #1
 8002b30:	627b      	str	r3, [r7, #36]	; 0x24
 8002b32:	e02b      	b.n	8002b8c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b36:	015a      	lsls	r2, r3, #5
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b44:	6879      	ldr	r1, [r7, #4]
 8002b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b48:	4613      	mov	r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	4413      	add	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	440b      	add	r3, r1
 8002b52:	3340      	adds	r3, #64	; 0x40
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d115      	bne.n	8002b86 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002b5a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	da12      	bge.n	8002b86 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b64:	4613      	mov	r3, r2
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	4413      	add	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	440b      	add	r3, r1
 8002b6e:	333f      	adds	r3, #63	; 0x3f
 8002b70:	2201      	movs	r2, #1
 8002b72:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	4619      	mov	r1, r3
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 fae8 	bl	8003156 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	3301      	adds	r3, #1
 8002b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d3ce      	bcc.n	8002b34 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	695a      	ldr	r2, [r3, #20]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002ba4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f003 f92a 	bl	8005e04 <USB_ReadInterrupts>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bba:	d155      	bne.n	8002c68 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8002bc0:	e045      	b.n	8002c4e <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	015a      	lsls	r2, r3, #5
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	4413      	add	r3, r2
 8002bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002bd2:	6879      	ldr	r1, [r7, #4]
 8002bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	4413      	add	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	440b      	add	r3, r1
 8002be0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d12e      	bne.n	8002c48 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002bea:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	da2b      	bge.n	8002c48 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002bfc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d121      	bne.n	8002c48 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002c04:	6879      	ldr	r1, [r7, #4]
 8002c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c08:	4613      	mov	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	4413      	add	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	440b      	add	r3, r1
 8002c12:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002c16:	2201      	movs	r2, #1
 8002c18:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002c1a:	6a3b      	ldr	r3, [r7, #32]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002c22:	6a3b      	ldr	r3, [r7, #32]
 8002c24:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002c26:	6a3b      	ldr	r3, [r7, #32]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d10a      	bne.n	8002c48 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	69fa      	ldr	r2, [r7, #28]
 8002c3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c44:	6053      	str	r3, [r2, #4]
            break;
 8002c46:	e007      	b.n	8002c58 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d3b4      	bcc.n	8002bc2 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	695a      	ldr	r2, [r3, #20]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002c66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f003 f8c9 	bl	8005e04 <USB_ReadInterrupts>
 8002c72:	4603      	mov	r3, r0
 8002c74:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c7c:	d10a      	bne.n	8002c94 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f008 fae6 	bl	800b250 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	695a      	ldr	r2, [r3, #20]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002c92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f003 f8b3 	bl	8005e04 <USB_ReadInterrupts>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d115      	bne.n	8002cd4 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	f003 0304 	and.w	r3, r3, #4
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d002      	beq.n	8002cc0 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f008 fad6 	bl	800b26c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6859      	ldr	r1, [r3, #4]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	605a      	str	r2, [r3, #4]
 8002cd0:	e000      	b.n	8002cd4 <HAL_PCD_IRQHandler+0x938>
      return;
 8002cd2:	bf00      	nop
    }
  }
}
 8002cd4:	3734      	adds	r7, #52	; 0x34
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd90      	pop	{r4, r7, pc}

08002cda <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b082      	sub	sp, #8
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d101      	bne.n	8002cf4 <HAL_PCD_SetAddress+0x1a>
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	e013      	b.n	8002d1c <HAL_PCD_SetAddress+0x42>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	78fa      	ldrb	r2, [r7, #3]
 8002d00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	78fa      	ldrb	r2, [r7, #3]
 8002d0a:	4611      	mov	r1, r2
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f003 f811 	bl	8005d34 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3708      	adds	r7, #8
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	4608      	mov	r0, r1
 8002d2e:	4611      	mov	r1, r2
 8002d30:	461a      	mov	r2, r3
 8002d32:	4603      	mov	r3, r0
 8002d34:	70fb      	strb	r3, [r7, #3]
 8002d36:	460b      	mov	r3, r1
 8002d38:	803b      	strh	r3, [r7, #0]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	da0f      	bge.n	8002d6a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d4a:	78fb      	ldrb	r3, [r7, #3]
 8002d4c:	f003 020f 	and.w	r2, r3, #15
 8002d50:	4613      	mov	r3, r2
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	4413      	add	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	3338      	adds	r3, #56	; 0x38
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	3304      	adds	r3, #4
 8002d60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2201      	movs	r2, #1
 8002d66:	705a      	strb	r2, [r3, #1]
 8002d68:	e00f      	b.n	8002d8a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d6a:	78fb      	ldrb	r3, [r7, #3]
 8002d6c:	f003 020f 	and.w	r2, r3, #15
 8002d70:	4613      	mov	r3, r2
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	4413      	add	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	4413      	add	r3, r2
 8002d80:	3304      	adds	r3, #4
 8002d82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002d8a:	78fb      	ldrb	r3, [r7, #3]
 8002d8c:	f003 030f 	and.w	r3, r3, #15
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002d96:	883a      	ldrh	r2, [r7, #0]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	78ba      	ldrb	r2, [r7, #2]
 8002da0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	785b      	ldrb	r3, [r3, #1]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d004      	beq.n	8002db4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002db4:	78bb      	ldrb	r3, [r7, #2]
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d102      	bne.n	8002dc0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d101      	bne.n	8002dce <HAL_PCD_EP_Open+0xaa>
 8002dca:	2302      	movs	r3, #2
 8002dcc:	e00e      	b.n	8002dec <HAL_PCD_EP_Open+0xc8>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68f9      	ldr	r1, [r7, #12]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f002 f891 	bl	8004f04 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002dea:	7afb      	ldrb	r3, [r7, #11]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	da0f      	bge.n	8002e28 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e08:	78fb      	ldrb	r3, [r7, #3]
 8002e0a:	f003 020f 	and.w	r2, r3, #15
 8002e0e:	4613      	mov	r3, r2
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	4413      	add	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	3338      	adds	r3, #56	; 0x38
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	3304      	adds	r3, #4
 8002e1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2201      	movs	r2, #1
 8002e24:	705a      	strb	r2, [r3, #1]
 8002e26:	e00f      	b.n	8002e48 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e28:	78fb      	ldrb	r3, [r7, #3]
 8002e2a:	f003 020f 	and.w	r2, r3, #15
 8002e2e:	4613      	mov	r3, r2
 8002e30:	00db      	lsls	r3, r3, #3
 8002e32:	4413      	add	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	3304      	adds	r3, #4
 8002e40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002e48:	78fb      	ldrb	r3, [r7, #3]
 8002e4a:	f003 030f 	and.w	r3, r3, #15
 8002e4e:	b2da      	uxtb	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d101      	bne.n	8002e62 <HAL_PCD_EP_Close+0x6e>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	e00e      	b.n	8002e80 <HAL_PCD_EP_Close+0x8c>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68f9      	ldr	r1, [r7, #12]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f002 f8cf 	bl	8005014 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	607a      	str	r2, [r7, #4]
 8002e92:	603b      	str	r3, [r7, #0]
 8002e94:	460b      	mov	r3, r1
 8002e96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e98:	7afb      	ldrb	r3, [r7, #11]
 8002e9a:	f003 020f 	and.w	r2, r3, #15
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	4413      	add	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	4413      	add	r3, r2
 8002eae:	3304      	adds	r3, #4
 8002eb0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	683a      	ldr	r2, [r7, #0]
 8002ebc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002eca:	7afb      	ldrb	r3, [r7, #11]
 8002ecc:	f003 030f 	and.w	r3, r3, #15
 8002ed0:	b2da      	uxtb	r2, r3
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d102      	bne.n	8002ee4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ee4:	7afb      	ldrb	r3, [r7, #11]
 8002ee6:	f003 030f 	and.w	r3, r3, #15
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d109      	bne.n	8002f02 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6818      	ldr	r0, [r3, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	461a      	mov	r2, r3
 8002efa:	6979      	ldr	r1, [r7, #20]
 8002efc:	f002 fbae 	bl	800565c <USB_EP0StartXfer>
 8002f00:	e008      	b.n	8002f14 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6818      	ldr	r0, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	6979      	ldr	r1, [r7, #20]
 8002f10:	f002 f95c 	bl	80051cc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3718      	adds	r7, #24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
 8002f26:	460b      	mov	r3, r1
 8002f28:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002f2a:	78fb      	ldrb	r3, [r7, #3]
 8002f2c:	f003 020f 	and.w	r2, r3, #15
 8002f30:	6879      	ldr	r1, [r7, #4]
 8002f32:	4613      	mov	r3, r2
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	4413      	add	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	440b      	add	r3, r1
 8002f3c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002f40:	681b      	ldr	r3, [r3, #0]
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr

08002f4e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b086      	sub	sp, #24
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	60f8      	str	r0, [r7, #12]
 8002f56:	607a      	str	r2, [r7, #4]
 8002f58:	603b      	str	r3, [r7, #0]
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f5e:	7afb      	ldrb	r3, [r7, #11]
 8002f60:	f003 020f 	and.w	r2, r3, #15
 8002f64:	4613      	mov	r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	4413      	add	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	3338      	adds	r3, #56	; 0x38
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	4413      	add	r3, r2
 8002f72:	3304      	adds	r3, #4
 8002f74:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	2200      	movs	r2, #0
 8002f86:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f8e:	7afb      	ldrb	r3, [r7, #11]
 8002f90:	f003 030f 	and.w	r3, r3, #15
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d102      	bne.n	8002fa8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002fa8:	7afb      	ldrb	r3, [r7, #11]
 8002faa:	f003 030f 	and.w	r3, r3, #15
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d109      	bne.n	8002fc6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6818      	ldr	r0, [r3, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	6979      	ldr	r1, [r7, #20]
 8002fc0:	f002 fb4c 	bl	800565c <USB_EP0StartXfer>
 8002fc4:	e008      	b.n	8002fd8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6818      	ldr	r0, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	6979      	ldr	r1, [r7, #20]
 8002fd4:	f002 f8fa 	bl	80051cc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3718      	adds	r7, #24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b084      	sub	sp, #16
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
 8002fea:	460b      	mov	r3, r1
 8002fec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002fee:	78fb      	ldrb	r3, [r7, #3]
 8002ff0:	f003 020f 	and.w	r2, r3, #15
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d901      	bls.n	8003000 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e050      	b.n	80030a2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003000:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003004:	2b00      	cmp	r3, #0
 8003006:	da0f      	bge.n	8003028 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003008:	78fb      	ldrb	r3, [r7, #3]
 800300a:	f003 020f 	and.w	r2, r3, #15
 800300e:	4613      	mov	r3, r2
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	4413      	add	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	3338      	adds	r3, #56	; 0x38
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	4413      	add	r3, r2
 800301c:	3304      	adds	r3, #4
 800301e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2201      	movs	r2, #1
 8003024:	705a      	strb	r2, [r3, #1]
 8003026:	e00d      	b.n	8003044 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003028:	78fa      	ldrb	r2, [r7, #3]
 800302a:	4613      	mov	r3, r2
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	4413      	add	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	4413      	add	r3, r2
 800303a:	3304      	adds	r3, #4
 800303c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2201      	movs	r2, #1
 8003048:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800304a:	78fb      	ldrb	r3, [r7, #3]
 800304c:	f003 030f 	and.w	r3, r3, #15
 8003050:	b2da      	uxtb	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800305c:	2b01      	cmp	r3, #1
 800305e:	d101      	bne.n	8003064 <HAL_PCD_EP_SetStall+0x82>
 8003060:	2302      	movs	r3, #2
 8003062:	e01e      	b.n	80030a2 <HAL_PCD_EP_SetStall+0xc0>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68f9      	ldr	r1, [r7, #12]
 8003072:	4618      	mov	r0, r3
 8003074:	f002 fd8a 	bl	8005b8c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003078:	78fb      	ldrb	r3, [r7, #3]
 800307a:	f003 030f 	and.w	r3, r3, #15
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10a      	bne.n	8003098 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6818      	ldr	r0, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	b2d9      	uxtb	r1, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003092:	461a      	mov	r2, r3
 8003094:	f002 ff7a 	bl	8005f8c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b084      	sub	sp, #16
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
 80030b2:	460b      	mov	r3, r1
 80030b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80030b6:	78fb      	ldrb	r3, [r7, #3]
 80030b8:	f003 020f 	and.w	r2, r3, #15
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d901      	bls.n	80030c8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e042      	b.n	800314e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	da0f      	bge.n	80030f0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030d0:	78fb      	ldrb	r3, [r7, #3]
 80030d2:	f003 020f 	and.w	r2, r3, #15
 80030d6:	4613      	mov	r3, r2
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	4413      	add	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	3338      	adds	r3, #56	; 0x38
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	4413      	add	r3, r2
 80030e4:	3304      	adds	r3, #4
 80030e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2201      	movs	r2, #1
 80030ec:	705a      	strb	r2, [r3, #1]
 80030ee:	e00f      	b.n	8003110 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030f0:	78fb      	ldrb	r3, [r7, #3]
 80030f2:	f003 020f 	and.w	r2, r3, #15
 80030f6:	4613      	mov	r3, r2
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	4413      	add	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	4413      	add	r3, r2
 8003106:	3304      	adds	r3, #4
 8003108:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003116:	78fb      	ldrb	r3, [r7, #3]
 8003118:	f003 030f 	and.w	r3, r3, #15
 800311c:	b2da      	uxtb	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003128:	2b01      	cmp	r3, #1
 800312a:	d101      	bne.n	8003130 <HAL_PCD_EP_ClrStall+0x86>
 800312c:	2302      	movs	r3, #2
 800312e:	e00e      	b.n	800314e <HAL_PCD_EP_ClrStall+0xa4>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68f9      	ldr	r1, [r7, #12]
 800313e:	4618      	mov	r0, r3
 8003140:	f002 fd92 	bl	8005c68 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b084      	sub	sp, #16
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
 800315e:	460b      	mov	r3, r1
 8003160:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003162:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003166:	2b00      	cmp	r3, #0
 8003168:	da0c      	bge.n	8003184 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800316a:	78fb      	ldrb	r3, [r7, #3]
 800316c:	f003 020f 	and.w	r2, r3, #15
 8003170:	4613      	mov	r3, r2
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	4413      	add	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	3338      	adds	r3, #56	; 0x38
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	4413      	add	r3, r2
 800317e:	3304      	adds	r3, #4
 8003180:	60fb      	str	r3, [r7, #12]
 8003182:	e00c      	b.n	800319e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003184:	78fb      	ldrb	r3, [r7, #3]
 8003186:	f003 020f 	and.w	r2, r3, #15
 800318a:	4613      	mov	r3, r2
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	4413      	add	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	4413      	add	r3, r2
 800319a:	3304      	adds	r3, #4
 800319c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68f9      	ldr	r1, [r7, #12]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f002 fbb1 	bl	800590c <USB_EPStopXfer>
 80031aa:	4603      	mov	r3, r0
 80031ac:	72fb      	strb	r3, [r7, #11]

  return ret;
 80031ae:	7afb      	ldrb	r3, [r7, #11]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b08a      	sub	sp, #40	; 0x28
 80031bc:	af02      	add	r7, sp, #8
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80031cc:	683a      	ldr	r2, [r7, #0]
 80031ce:	4613      	mov	r3, r2
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	4413      	add	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	3338      	adds	r3, #56	; 0x38
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	4413      	add	r3, r2
 80031dc:	3304      	adds	r3, #4
 80031de:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6a1a      	ldr	r2, [r3, #32]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d901      	bls.n	80031f0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e06c      	b.n	80032ca <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	699a      	ldr	r2, [r3, #24]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	69fa      	ldr	r2, [r7, #28]
 8003202:	429a      	cmp	r2, r3
 8003204:	d902      	bls.n	800320c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	3303      	adds	r3, #3
 8003210:	089b      	lsrs	r3, r3, #2
 8003212:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003214:	e02b      	b.n	800326e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	699a      	ldr	r2, [r3, #24]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	69fa      	ldr	r2, [r7, #28]
 8003228:	429a      	cmp	r2, r3
 800322a:	d902      	bls.n	8003232 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	3303      	adds	r3, #3
 8003236:	089b      	lsrs	r3, r3, #2
 8003238:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6919      	ldr	r1, [r3, #16]
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	b2da      	uxtb	r2, r3
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800324a:	b2db      	uxtb	r3, r3
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	4603      	mov	r3, r0
 8003250:	6978      	ldr	r0, [r7, #20]
 8003252:	f002 fc05 	bl	8005a60 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	691a      	ldr	r2, [r3, #16]
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	441a      	add	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6a1a      	ldr	r2, [r3, #32]
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	441a      	add	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	015a      	lsls	r2, r3, #5
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	4413      	add	r3, r2
 8003276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	b29b      	uxth	r3, r3
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	429a      	cmp	r2, r3
 8003282:	d809      	bhi.n	8003298 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6a1a      	ldr	r2, [r3, #32]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800328c:	429a      	cmp	r2, r3
 800328e:	d203      	bcs.n	8003298 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1be      	bne.n	8003216 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	699a      	ldr	r2, [r3, #24]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d811      	bhi.n	80032c8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	f003 030f 	and.w	r3, r3, #15
 80032aa:	2201      	movs	r2, #1
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	43db      	mvns	r3, r3
 80032be:	6939      	ldr	r1, [r7, #16]
 80032c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032c4:	4013      	ands	r3, r2
 80032c6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3720      	adds	r7, #32
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
	...

080032d4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b088      	sub	sp, #32
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	333c      	adds	r3, #60	; 0x3c
 80032ec:	3304      	adds	r3, #4
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	015a      	lsls	r2, r3, #5
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	4413      	add	r3, r2
 80032fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d17b      	bne.n	8003402 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	f003 0308 	and.w	r3, r3, #8
 8003310:	2b00      	cmp	r3, #0
 8003312:	d015      	beq.n	8003340 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	4a61      	ldr	r2, [pc, #388]	; (800349c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003318:	4293      	cmp	r3, r2
 800331a:	f240 80b9 	bls.w	8003490 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 80b3 	beq.w	8003490 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	015a      	lsls	r2, r3, #5
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	4413      	add	r3, r2
 8003332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003336:	461a      	mov	r2, r3
 8003338:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800333c:	6093      	str	r3, [r2, #8]
 800333e:	e0a7      	b.n	8003490 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	f003 0320 	and.w	r3, r3, #32
 8003346:	2b00      	cmp	r3, #0
 8003348:	d009      	beq.n	800335e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	015a      	lsls	r2, r3, #5
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	4413      	add	r3, r2
 8003352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003356:	461a      	mov	r2, r3
 8003358:	2320      	movs	r3, #32
 800335a:	6093      	str	r3, [r2, #8]
 800335c:	e098      	b.n	8003490 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003364:	2b00      	cmp	r3, #0
 8003366:	f040 8093 	bne.w	8003490 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	4a4b      	ldr	r2, [pc, #300]	; (800349c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d90f      	bls.n	8003392 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00a      	beq.n	8003392 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	015a      	lsls	r2, r3, #5
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	4413      	add	r3, r2
 8003384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003388:	461a      	mov	r2, r3
 800338a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800338e:	6093      	str	r3, [r2, #8]
 8003390:	e07e      	b.n	8003490 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	4613      	mov	r3, r2
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	4413      	add	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	4413      	add	r3, r2
 80033a4:	3304      	adds	r3, #4
 80033a6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	69da      	ldr	r2, [r3, #28]
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	0159      	lsls	r1, r3, #5
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	440b      	add	r3, r1
 80033b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033be:	1ad2      	subs	r2, r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d114      	bne.n	80033f4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d109      	bne.n	80033e6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6818      	ldr	r0, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80033dc:	461a      	mov	r2, r3
 80033de:	2101      	movs	r1, #1
 80033e0:	f002 fdd4 	bl	8005f8c <USB_EP0_OutStart>
 80033e4:	e006      	b.n	80033f4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	691a      	ldr	r2, [r3, #16]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	441a      	add	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	4619      	mov	r1, r3
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f007 fe6e 	bl	800b0dc <HAL_PCD_DataOutStageCallback>
 8003400:	e046      	b.n	8003490 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	4a26      	ldr	r2, [pc, #152]	; (80034a0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d124      	bne.n	8003454 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00a      	beq.n	800342a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	015a      	lsls	r2, r3, #5
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	4413      	add	r3, r2
 800341c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003420:	461a      	mov	r2, r3
 8003422:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003426:	6093      	str	r3, [r2, #8]
 8003428:	e032      	b.n	8003490 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	f003 0320 	and.w	r3, r3, #32
 8003430:	2b00      	cmp	r3, #0
 8003432:	d008      	beq.n	8003446 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	015a      	lsls	r2, r3, #5
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	4413      	add	r3, r2
 800343c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003440:	461a      	mov	r2, r3
 8003442:	2320      	movs	r3, #32
 8003444:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	b2db      	uxtb	r3, r3
 800344a:	4619      	mov	r1, r3
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f007 fe45 	bl	800b0dc <HAL_PCD_DataOutStageCallback>
 8003452:	e01d      	b.n	8003490 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d114      	bne.n	8003484 <PCD_EP_OutXfrComplete_int+0x1b0>
 800345a:	6879      	ldr	r1, [r7, #4]
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	4613      	mov	r3, r2
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	4413      	add	r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	440b      	add	r3, r1
 8003468:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d108      	bne.n	8003484 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6818      	ldr	r0, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800347c:	461a      	mov	r2, r3
 800347e:	2100      	movs	r1, #0
 8003480:	f002 fd84 	bl	8005f8c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	b2db      	uxtb	r3, r3
 8003488:	4619      	mov	r1, r3
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f007 fe26 	bl	800b0dc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3720      	adds	r7, #32
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	4f54300a 	.word	0x4f54300a
 80034a0:	4f54310a 	.word	0x4f54310a

080034a4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	333c      	adds	r3, #60	; 0x3c
 80034bc:	3304      	adds	r3, #4
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	015a      	lsls	r2, r3, #5
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	4413      	add	r3, r2
 80034ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	4a15      	ldr	r2, [pc, #84]	; (800352c <PCD_EP_OutSetupPacket_int+0x88>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d90e      	bls.n	80034f8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d009      	beq.n	80034f8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	015a      	lsls	r2, r3, #5
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	4413      	add	r3, r2
 80034ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034f0:	461a      	mov	r2, r3
 80034f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034f6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f007 fddd 	bl	800b0b8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	4a0a      	ldr	r2, [pc, #40]	; (800352c <PCD_EP_OutSetupPacket_int+0x88>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d90c      	bls.n	8003520 <PCD_EP_OutSetupPacket_int+0x7c>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d108      	bne.n	8003520 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6818      	ldr	r0, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003518:	461a      	mov	r2, r3
 800351a:	2101      	movs	r1, #1
 800351c:	f002 fd36 	bl	8005f8c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3718      	adds	r7, #24
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	4f54300a 	.word	0x4f54300a

08003530 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	460b      	mov	r3, r1
 800353a:	70fb      	strb	r3, [r7, #3]
 800353c:	4613      	mov	r3, r2
 800353e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003546:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003548:	78fb      	ldrb	r3, [r7, #3]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d107      	bne.n	800355e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800354e:	883b      	ldrh	r3, [r7, #0]
 8003550:	0419      	lsls	r1, r3, #16
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	430a      	orrs	r2, r1
 800355a:	629a      	str	r2, [r3, #40]	; 0x28
 800355c:	e028      	b.n	80035b0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003564:	0c1b      	lsrs	r3, r3, #16
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	4413      	add	r3, r2
 800356a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800356c:	2300      	movs	r3, #0
 800356e:	73fb      	strb	r3, [r7, #15]
 8003570:	e00d      	b.n	800358e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	7bfb      	ldrb	r3, [r7, #15]
 8003578:	3340      	adds	r3, #64	; 0x40
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4413      	add	r3, r2
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	0c1b      	lsrs	r3, r3, #16
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	4413      	add	r3, r2
 8003586:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003588:	7bfb      	ldrb	r3, [r7, #15]
 800358a:	3301      	adds	r3, #1
 800358c:	73fb      	strb	r3, [r7, #15]
 800358e:	7bfa      	ldrb	r2, [r7, #15]
 8003590:	78fb      	ldrb	r3, [r7, #3]
 8003592:	3b01      	subs	r3, #1
 8003594:	429a      	cmp	r2, r3
 8003596:	d3ec      	bcc.n	8003572 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003598:	883b      	ldrh	r3, [r7, #0]
 800359a:	0418      	lsls	r0, r3, #16
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6819      	ldr	r1, [r3, #0]
 80035a0:	78fb      	ldrb	r3, [r7, #3]
 80035a2:	3b01      	subs	r3, #1
 80035a4:	68ba      	ldr	r2, [r7, #8]
 80035a6:	4302      	orrs	r2, r0
 80035a8:	3340      	adds	r3, #64	; 0x40
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	440b      	add	r3, r1
 80035ae:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3714      	adds	r7, #20
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr

080035be <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80035be:	b480      	push	{r7}
 80035c0:	b083      	sub	sp, #12
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
 80035c6:	460b      	mov	r3, r1
 80035c8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	887a      	ldrh	r2, [r7, #2]
 80035d0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	460b      	mov	r3, r1
 80035ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e267      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	d075      	beq.n	8003702 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003616:	4b88      	ldr	r3, [pc, #544]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 030c 	and.w	r3, r3, #12
 800361e:	2b04      	cmp	r3, #4
 8003620:	d00c      	beq.n	800363c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003622:	4b85      	ldr	r3, [pc, #532]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800362a:	2b08      	cmp	r3, #8
 800362c:	d112      	bne.n	8003654 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800362e:	4b82      	ldr	r3, [pc, #520]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003636:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800363a:	d10b      	bne.n	8003654 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800363c:	4b7e      	ldr	r3, [pc, #504]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d05b      	beq.n	8003700 <HAL_RCC_OscConfig+0x108>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d157      	bne.n	8003700 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e242      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800365c:	d106      	bne.n	800366c <HAL_RCC_OscConfig+0x74>
 800365e:	4b76      	ldr	r3, [pc, #472]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a75      	ldr	r2, [pc, #468]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003668:	6013      	str	r3, [r2, #0]
 800366a:	e01d      	b.n	80036a8 <HAL_RCC_OscConfig+0xb0>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003674:	d10c      	bne.n	8003690 <HAL_RCC_OscConfig+0x98>
 8003676:	4b70      	ldr	r3, [pc, #448]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a6f      	ldr	r2, [pc, #444]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 800367c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003680:	6013      	str	r3, [r2, #0]
 8003682:	4b6d      	ldr	r3, [pc, #436]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a6c      	ldr	r2, [pc, #432]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800368c:	6013      	str	r3, [r2, #0]
 800368e:	e00b      	b.n	80036a8 <HAL_RCC_OscConfig+0xb0>
 8003690:	4b69      	ldr	r3, [pc, #420]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a68      	ldr	r2, [pc, #416]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800369a:	6013      	str	r3, [r2, #0]
 800369c:	4b66      	ldr	r3, [pc, #408]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a65      	ldr	r2, [pc, #404]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 80036a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d013      	beq.n	80036d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b0:	f7fd fc90 	bl	8000fd4 <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036b8:	f7fd fc8c 	bl	8000fd4 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b64      	cmp	r3, #100	; 0x64
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e207      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ca:	4b5b      	ldr	r3, [pc, #364]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d0f0      	beq.n	80036b8 <HAL_RCC_OscConfig+0xc0>
 80036d6:	e014      	b.n	8003702 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d8:	f7fd fc7c 	bl	8000fd4 <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036de:	e008      	b.n	80036f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036e0:	f7fd fc78 	bl	8000fd4 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b64      	cmp	r3, #100	; 0x64
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e1f3      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036f2:	4b51      	ldr	r3, [pc, #324]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1f0      	bne.n	80036e0 <HAL_RCC_OscConfig+0xe8>
 80036fe:	e000      	b.n	8003702 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003700:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d063      	beq.n	80037d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800370e:	4b4a      	ldr	r3, [pc, #296]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f003 030c 	and.w	r3, r3, #12
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00b      	beq.n	8003732 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800371a:	4b47      	ldr	r3, [pc, #284]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003722:	2b08      	cmp	r3, #8
 8003724:	d11c      	bne.n	8003760 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003726:	4b44      	ldr	r3, [pc, #272]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d116      	bne.n	8003760 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003732:	4b41      	ldr	r3, [pc, #260]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d005      	beq.n	800374a <HAL_RCC_OscConfig+0x152>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d001      	beq.n	800374a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e1c7      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800374a:	4b3b      	ldr	r3, [pc, #236]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	4937      	ldr	r1, [pc, #220]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 800375a:	4313      	orrs	r3, r2
 800375c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800375e:	e03a      	b.n	80037d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d020      	beq.n	80037aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003768:	4b34      	ldr	r3, [pc, #208]	; (800383c <HAL_RCC_OscConfig+0x244>)
 800376a:	2201      	movs	r2, #1
 800376c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800376e:	f7fd fc31 	bl	8000fd4 <HAL_GetTick>
 8003772:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003774:	e008      	b.n	8003788 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003776:	f7fd fc2d 	bl	8000fd4 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e1a8      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003788:	4b2b      	ldr	r3, [pc, #172]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0f0      	beq.n	8003776 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003794:	4b28      	ldr	r3, [pc, #160]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	4925      	ldr	r1, [pc, #148]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	600b      	str	r3, [r1, #0]
 80037a8:	e015      	b.n	80037d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037aa:	4b24      	ldr	r3, [pc, #144]	; (800383c <HAL_RCC_OscConfig+0x244>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b0:	f7fd fc10 	bl	8000fd4 <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037b6:	e008      	b.n	80037ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037b8:	f7fd fc0c 	bl	8000fd4 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e187      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ca:	4b1b      	ldr	r3, [pc, #108]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1f0      	bne.n	80037b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d036      	beq.n	8003850 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d016      	beq.n	8003818 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037ea:	4b15      	ldr	r3, [pc, #84]	; (8003840 <HAL_RCC_OscConfig+0x248>)
 80037ec:	2201      	movs	r2, #1
 80037ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f0:	f7fd fbf0 	bl	8000fd4 <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037f8:	f7fd fbec 	bl	8000fd4 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e167      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800380a:	4b0b      	ldr	r3, [pc, #44]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 800380c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d0f0      	beq.n	80037f8 <HAL_RCC_OscConfig+0x200>
 8003816:	e01b      	b.n	8003850 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003818:	4b09      	ldr	r3, [pc, #36]	; (8003840 <HAL_RCC_OscConfig+0x248>)
 800381a:	2200      	movs	r2, #0
 800381c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800381e:	f7fd fbd9 	bl	8000fd4 <HAL_GetTick>
 8003822:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003824:	e00e      	b.n	8003844 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003826:	f7fd fbd5 	bl	8000fd4 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d907      	bls.n	8003844 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e150      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
 8003838:	40023800 	.word	0x40023800
 800383c:	42470000 	.word	0x42470000
 8003840:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003844:	4b88      	ldr	r3, [pc, #544]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1ea      	bne.n	8003826 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 8097 	beq.w	800398c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800385e:	2300      	movs	r3, #0
 8003860:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003862:	4b81      	ldr	r3, [pc, #516]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10f      	bne.n	800388e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800386e:	2300      	movs	r3, #0
 8003870:	60bb      	str	r3, [r7, #8]
 8003872:	4b7d      	ldr	r3, [pc, #500]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003876:	4a7c      	ldr	r2, [pc, #496]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800387c:	6413      	str	r3, [r2, #64]	; 0x40
 800387e:	4b7a      	ldr	r3, [pc, #488]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003886:	60bb      	str	r3, [r7, #8]
 8003888:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800388a:	2301      	movs	r3, #1
 800388c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800388e:	4b77      	ldr	r3, [pc, #476]	; (8003a6c <HAL_RCC_OscConfig+0x474>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003896:	2b00      	cmp	r3, #0
 8003898:	d118      	bne.n	80038cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800389a:	4b74      	ldr	r3, [pc, #464]	; (8003a6c <HAL_RCC_OscConfig+0x474>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a73      	ldr	r2, [pc, #460]	; (8003a6c <HAL_RCC_OscConfig+0x474>)
 80038a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038a6:	f7fd fb95 	bl	8000fd4 <HAL_GetTick>
 80038aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ac:	e008      	b.n	80038c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038ae:	f7fd fb91 	bl	8000fd4 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d901      	bls.n	80038c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e10c      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038c0:	4b6a      	ldr	r3, [pc, #424]	; (8003a6c <HAL_RCC_OscConfig+0x474>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d0f0      	beq.n	80038ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d106      	bne.n	80038e2 <HAL_RCC_OscConfig+0x2ea>
 80038d4:	4b64      	ldr	r3, [pc, #400]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 80038d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d8:	4a63      	ldr	r2, [pc, #396]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 80038da:	f043 0301 	orr.w	r3, r3, #1
 80038de:	6713      	str	r3, [r2, #112]	; 0x70
 80038e0:	e01c      	b.n	800391c <HAL_RCC_OscConfig+0x324>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	2b05      	cmp	r3, #5
 80038e8:	d10c      	bne.n	8003904 <HAL_RCC_OscConfig+0x30c>
 80038ea:	4b5f      	ldr	r3, [pc, #380]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 80038ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ee:	4a5e      	ldr	r2, [pc, #376]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 80038f0:	f043 0304 	orr.w	r3, r3, #4
 80038f4:	6713      	str	r3, [r2, #112]	; 0x70
 80038f6:	4b5c      	ldr	r3, [pc, #368]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 80038f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fa:	4a5b      	ldr	r2, [pc, #364]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 80038fc:	f043 0301 	orr.w	r3, r3, #1
 8003900:	6713      	str	r3, [r2, #112]	; 0x70
 8003902:	e00b      	b.n	800391c <HAL_RCC_OscConfig+0x324>
 8003904:	4b58      	ldr	r3, [pc, #352]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003908:	4a57      	ldr	r2, [pc, #348]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 800390a:	f023 0301 	bic.w	r3, r3, #1
 800390e:	6713      	str	r3, [r2, #112]	; 0x70
 8003910:	4b55      	ldr	r3, [pc, #340]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003914:	4a54      	ldr	r2, [pc, #336]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003916:	f023 0304 	bic.w	r3, r3, #4
 800391a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d015      	beq.n	8003950 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003924:	f7fd fb56 	bl	8000fd4 <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800392a:	e00a      	b.n	8003942 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800392c:	f7fd fb52 	bl	8000fd4 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	f241 3288 	movw	r2, #5000	; 0x1388
 800393a:	4293      	cmp	r3, r2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e0cb      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003942:	4b49      	ldr	r3, [pc, #292]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d0ee      	beq.n	800392c <HAL_RCC_OscConfig+0x334>
 800394e:	e014      	b.n	800397a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003950:	f7fd fb40 	bl	8000fd4 <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003956:	e00a      	b.n	800396e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003958:	f7fd fb3c 	bl	8000fd4 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	f241 3288 	movw	r2, #5000	; 0x1388
 8003966:	4293      	cmp	r3, r2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e0b5      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800396e:	4b3e      	ldr	r3, [pc, #248]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1ee      	bne.n	8003958 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800397a:	7dfb      	ldrb	r3, [r7, #23]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d105      	bne.n	800398c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003980:	4b39      	ldr	r3, [pc, #228]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003984:	4a38      	ldr	r2, [pc, #224]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003986:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800398a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	2b00      	cmp	r3, #0
 8003992:	f000 80a1 	beq.w	8003ad8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003996:	4b34      	ldr	r3, [pc, #208]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f003 030c 	and.w	r3, r3, #12
 800399e:	2b08      	cmp	r3, #8
 80039a0:	d05c      	beq.n	8003a5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d141      	bne.n	8003a2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039aa:	4b31      	ldr	r3, [pc, #196]	; (8003a70 <HAL_RCC_OscConfig+0x478>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b0:	f7fd fb10 	bl	8000fd4 <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039b8:	f7fd fb0c 	bl	8000fd4 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e087      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ca:	4b27      	ldr	r3, [pc, #156]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1f0      	bne.n	80039b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	69da      	ldr	r2, [r3, #28]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	431a      	orrs	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e4:	019b      	lsls	r3, r3, #6
 80039e6:	431a      	orrs	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ec:	085b      	lsrs	r3, r3, #1
 80039ee:	3b01      	subs	r3, #1
 80039f0:	041b      	lsls	r3, r3, #16
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f8:	061b      	lsls	r3, r3, #24
 80039fa:	491b      	ldr	r1, [pc, #108]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a00:	4b1b      	ldr	r3, [pc, #108]	; (8003a70 <HAL_RCC_OscConfig+0x478>)
 8003a02:	2201      	movs	r2, #1
 8003a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a06:	f7fd fae5 	bl	8000fd4 <HAL_GetTick>
 8003a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a0c:	e008      	b.n	8003a20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a0e:	f7fd fae1 	bl	8000fd4 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d901      	bls.n	8003a20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e05c      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a20:	4b11      	ldr	r3, [pc, #68]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d0f0      	beq.n	8003a0e <HAL_RCC_OscConfig+0x416>
 8003a2c:	e054      	b.n	8003ad8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a2e:	4b10      	ldr	r3, [pc, #64]	; (8003a70 <HAL_RCC_OscConfig+0x478>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a34:	f7fd face 	bl	8000fd4 <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a3c:	f7fd faca 	bl	8000fd4 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e045      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a4e:	4b06      	ldr	r3, [pc, #24]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1f0      	bne.n	8003a3c <HAL_RCC_OscConfig+0x444>
 8003a5a:	e03d      	b.n	8003ad8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d107      	bne.n	8003a74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e038      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
 8003a68:	40023800 	.word	0x40023800
 8003a6c:	40007000 	.word	0x40007000
 8003a70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a74:	4b1b      	ldr	r3, [pc, #108]	; (8003ae4 <HAL_RCC_OscConfig+0x4ec>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d028      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d121      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d11a      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003aaa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d111      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aba:	085b      	lsrs	r3, r3, #1
 8003abc:	3b01      	subs	r3, #1
 8003abe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d107      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ace:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d001      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e000      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3718      	adds	r7, #24
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	40023800 	.word	0x40023800

08003ae8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d101      	bne.n	8003afc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e0cc      	b.n	8003c96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003afc:	4b68      	ldr	r3, [pc, #416]	; (8003ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0307 	and.w	r3, r3, #7
 8003b04:	683a      	ldr	r2, [r7, #0]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d90c      	bls.n	8003b24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b0a:	4b65      	ldr	r3, [pc, #404]	; (8003ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	b2d2      	uxtb	r2, r2
 8003b10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b12:	4b63      	ldr	r3, [pc, #396]	; (8003ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0307 	and.w	r3, r3, #7
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d001      	beq.n	8003b24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e0b8      	b.n	8003c96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d020      	beq.n	8003b72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0304 	and.w	r3, r3, #4
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d005      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b3c:	4b59      	ldr	r3, [pc, #356]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	4a58      	ldr	r2, [pc, #352]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0308 	and.w	r3, r3, #8
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d005      	beq.n	8003b60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b54:	4b53      	ldr	r3, [pc, #332]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	4a52      	ldr	r2, [pc, #328]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b60:	4b50      	ldr	r3, [pc, #320]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	494d      	ldr	r1, [pc, #308]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d044      	beq.n	8003c08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d107      	bne.n	8003b96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b86:	4b47      	ldr	r3, [pc, #284]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d119      	bne.n	8003bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e07f      	b.n	8003c96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d003      	beq.n	8003ba6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ba2:	2b03      	cmp	r3, #3
 8003ba4:	d107      	bne.n	8003bb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ba6:	4b3f      	ldr	r3, [pc, #252]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d109      	bne.n	8003bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e06f      	b.n	8003c96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bb6:	4b3b      	ldr	r3, [pc, #236]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d101      	bne.n	8003bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e067      	b.n	8003c96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bc6:	4b37      	ldr	r3, [pc, #220]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f023 0203 	bic.w	r2, r3, #3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	4934      	ldr	r1, [pc, #208]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bd8:	f7fd f9fc 	bl	8000fd4 <HAL_GetTick>
 8003bdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bde:	e00a      	b.n	8003bf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003be0:	f7fd f9f8 	bl	8000fd4 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e04f      	b.n	8003c96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bf6:	4b2b      	ldr	r3, [pc, #172]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f003 020c 	and.w	r2, r3, #12
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d1eb      	bne.n	8003be0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c08:	4b25      	ldr	r3, [pc, #148]	; (8003ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d20c      	bcs.n	8003c30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c16:	4b22      	ldr	r3, [pc, #136]	; (8003ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c18:	683a      	ldr	r2, [r7, #0]
 8003c1a:	b2d2      	uxtb	r2, r2
 8003c1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c1e:	4b20      	ldr	r3, [pc, #128]	; (8003ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0307 	and.w	r3, r3, #7
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d001      	beq.n	8003c30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e032      	b.n	8003c96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0304 	and.w	r3, r3, #4
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d008      	beq.n	8003c4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c3c:	4b19      	ldr	r3, [pc, #100]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	4916      	ldr	r1, [pc, #88]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0308 	and.w	r3, r3, #8
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d009      	beq.n	8003c6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c5a:	4b12      	ldr	r3, [pc, #72]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	00db      	lsls	r3, r3, #3
 8003c68:	490e      	ldr	r1, [pc, #56]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c6e:	f000 f821 	bl	8003cb4 <HAL_RCC_GetSysClockFreq>
 8003c72:	4602      	mov	r2, r0
 8003c74:	4b0b      	ldr	r3, [pc, #44]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	091b      	lsrs	r3, r3, #4
 8003c7a:	f003 030f 	and.w	r3, r3, #15
 8003c7e:	490a      	ldr	r1, [pc, #40]	; (8003ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c80:	5ccb      	ldrb	r3, [r1, r3]
 8003c82:	fa22 f303 	lsr.w	r3, r2, r3
 8003c86:	4a09      	ldr	r2, [pc, #36]	; (8003cac <HAL_RCC_ClockConfig+0x1c4>)
 8003c88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c8a:	4b09      	ldr	r3, [pc, #36]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fd f888 	bl	8000da4 <HAL_InitTick>

  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	40023c00 	.word	0x40023c00
 8003ca4:	40023800 	.word	0x40023800
 8003ca8:	0800b8bc 	.word	0x0800b8bc
 8003cac:	20000000 	.word	0x20000000
 8003cb0:	20000004 	.word	0x20000004

08003cb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cb8:	b094      	sub	sp, #80	; 0x50
 8003cba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	647b      	str	r3, [r7, #68]	; 0x44
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ccc:	4b79      	ldr	r3, [pc, #484]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f003 030c 	and.w	r3, r3, #12
 8003cd4:	2b08      	cmp	r3, #8
 8003cd6:	d00d      	beq.n	8003cf4 <HAL_RCC_GetSysClockFreq+0x40>
 8003cd8:	2b08      	cmp	r3, #8
 8003cda:	f200 80e1 	bhi.w	8003ea0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d002      	beq.n	8003ce8 <HAL_RCC_GetSysClockFreq+0x34>
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	d003      	beq.n	8003cee <HAL_RCC_GetSysClockFreq+0x3a>
 8003ce6:	e0db      	b.n	8003ea0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ce8:	4b73      	ldr	r3, [pc, #460]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003cea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003cec:	e0db      	b.n	8003ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cee:	4b73      	ldr	r3, [pc, #460]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x208>)
 8003cf0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cf2:	e0d8      	b.n	8003ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cf4:	4b6f      	ldr	r3, [pc, #444]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cfc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cfe:	4b6d      	ldr	r3, [pc, #436]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d063      	beq.n	8003dd2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d0a:	4b6a      	ldr	r3, [pc, #424]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	099b      	lsrs	r3, r3, #6
 8003d10:	2200      	movs	r2, #0
 8003d12:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d1c:	633b      	str	r3, [r7, #48]	; 0x30
 8003d1e:	2300      	movs	r3, #0
 8003d20:	637b      	str	r3, [r7, #52]	; 0x34
 8003d22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003d26:	4622      	mov	r2, r4
 8003d28:	462b      	mov	r3, r5
 8003d2a:	f04f 0000 	mov.w	r0, #0
 8003d2e:	f04f 0100 	mov.w	r1, #0
 8003d32:	0159      	lsls	r1, r3, #5
 8003d34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d38:	0150      	lsls	r0, r2, #5
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	4621      	mov	r1, r4
 8003d40:	1a51      	subs	r1, r2, r1
 8003d42:	6139      	str	r1, [r7, #16]
 8003d44:	4629      	mov	r1, r5
 8003d46:	eb63 0301 	sbc.w	r3, r3, r1
 8003d4a:	617b      	str	r3, [r7, #20]
 8003d4c:	f04f 0200 	mov.w	r2, #0
 8003d50:	f04f 0300 	mov.w	r3, #0
 8003d54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d58:	4659      	mov	r1, fp
 8003d5a:	018b      	lsls	r3, r1, #6
 8003d5c:	4651      	mov	r1, sl
 8003d5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d62:	4651      	mov	r1, sl
 8003d64:	018a      	lsls	r2, r1, #6
 8003d66:	4651      	mov	r1, sl
 8003d68:	ebb2 0801 	subs.w	r8, r2, r1
 8003d6c:	4659      	mov	r1, fp
 8003d6e:	eb63 0901 	sbc.w	r9, r3, r1
 8003d72:	f04f 0200 	mov.w	r2, #0
 8003d76:	f04f 0300 	mov.w	r3, #0
 8003d7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d86:	4690      	mov	r8, r2
 8003d88:	4699      	mov	r9, r3
 8003d8a:	4623      	mov	r3, r4
 8003d8c:	eb18 0303 	adds.w	r3, r8, r3
 8003d90:	60bb      	str	r3, [r7, #8]
 8003d92:	462b      	mov	r3, r5
 8003d94:	eb49 0303 	adc.w	r3, r9, r3
 8003d98:	60fb      	str	r3, [r7, #12]
 8003d9a:	f04f 0200 	mov.w	r2, #0
 8003d9e:	f04f 0300 	mov.w	r3, #0
 8003da2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003da6:	4629      	mov	r1, r5
 8003da8:	024b      	lsls	r3, r1, #9
 8003daa:	4621      	mov	r1, r4
 8003dac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003db0:	4621      	mov	r1, r4
 8003db2:	024a      	lsls	r2, r1, #9
 8003db4:	4610      	mov	r0, r2
 8003db6:	4619      	mov	r1, r3
 8003db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dba:	2200      	movs	r2, #0
 8003dbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003dc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003dc4:	f7fc fa16 	bl	80001f4 <__aeabi_uldivmod>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	460b      	mov	r3, r1
 8003dcc:	4613      	mov	r3, r2
 8003dce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dd0:	e058      	b.n	8003e84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dd2:	4b38      	ldr	r3, [pc, #224]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	099b      	lsrs	r3, r3, #6
 8003dd8:	2200      	movs	r2, #0
 8003dda:	4618      	mov	r0, r3
 8003ddc:	4611      	mov	r1, r2
 8003dde:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003de2:	623b      	str	r3, [r7, #32]
 8003de4:	2300      	movs	r3, #0
 8003de6:	627b      	str	r3, [r7, #36]	; 0x24
 8003de8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003dec:	4642      	mov	r2, r8
 8003dee:	464b      	mov	r3, r9
 8003df0:	f04f 0000 	mov.w	r0, #0
 8003df4:	f04f 0100 	mov.w	r1, #0
 8003df8:	0159      	lsls	r1, r3, #5
 8003dfa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dfe:	0150      	lsls	r0, r2, #5
 8003e00:	4602      	mov	r2, r0
 8003e02:	460b      	mov	r3, r1
 8003e04:	4641      	mov	r1, r8
 8003e06:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e0a:	4649      	mov	r1, r9
 8003e0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e10:	f04f 0200 	mov.w	r2, #0
 8003e14:	f04f 0300 	mov.w	r3, #0
 8003e18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e24:	ebb2 040a 	subs.w	r4, r2, sl
 8003e28:	eb63 050b 	sbc.w	r5, r3, fp
 8003e2c:	f04f 0200 	mov.w	r2, #0
 8003e30:	f04f 0300 	mov.w	r3, #0
 8003e34:	00eb      	lsls	r3, r5, #3
 8003e36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e3a:	00e2      	lsls	r2, r4, #3
 8003e3c:	4614      	mov	r4, r2
 8003e3e:	461d      	mov	r5, r3
 8003e40:	4643      	mov	r3, r8
 8003e42:	18e3      	adds	r3, r4, r3
 8003e44:	603b      	str	r3, [r7, #0]
 8003e46:	464b      	mov	r3, r9
 8003e48:	eb45 0303 	adc.w	r3, r5, r3
 8003e4c:	607b      	str	r3, [r7, #4]
 8003e4e:	f04f 0200 	mov.w	r2, #0
 8003e52:	f04f 0300 	mov.w	r3, #0
 8003e56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e5a:	4629      	mov	r1, r5
 8003e5c:	028b      	lsls	r3, r1, #10
 8003e5e:	4621      	mov	r1, r4
 8003e60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e64:	4621      	mov	r1, r4
 8003e66:	028a      	lsls	r2, r1, #10
 8003e68:	4610      	mov	r0, r2
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e6e:	2200      	movs	r2, #0
 8003e70:	61bb      	str	r3, [r7, #24]
 8003e72:	61fa      	str	r2, [r7, #28]
 8003e74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e78:	f7fc f9bc 	bl	80001f4 <__aeabi_uldivmod>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	460b      	mov	r3, r1
 8003e80:	4613      	mov	r3, r2
 8003e82:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e84:	4b0b      	ldr	r3, [pc, #44]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	0c1b      	lsrs	r3, r3, #16
 8003e8a:	f003 0303 	and.w	r3, r3, #3
 8003e8e:	3301      	adds	r3, #1
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003e94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e9e:	e002      	b.n	8003ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ea0:	4b05      	ldr	r3, [pc, #20]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ea2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ea4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ea6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3750      	adds	r7, #80	; 0x50
 8003eac:	46bd      	mov	sp, r7
 8003eae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003eb2:	bf00      	nop
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	00f42400 	.word	0x00f42400
 8003ebc:	007a1200 	.word	0x007a1200

08003ec0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ec4:	4b03      	ldr	r3, [pc, #12]	; (8003ed4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	20000000 	.word	0x20000000

08003ed8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003edc:	f7ff fff0 	bl	8003ec0 <HAL_RCC_GetHCLKFreq>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	4b05      	ldr	r3, [pc, #20]	; (8003ef8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	0a9b      	lsrs	r3, r3, #10
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	4903      	ldr	r1, [pc, #12]	; (8003efc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eee:	5ccb      	ldrb	r3, [r1, r3]
 8003ef0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	40023800 	.word	0x40023800
 8003efc:	0800b8cc 	.word	0x0800b8cc

08003f00 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	220f      	movs	r2, #15
 8003f0e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003f10:	4b12      	ldr	r3, [pc, #72]	; (8003f5c <HAL_RCC_GetClockConfig+0x5c>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f003 0203 	and.w	r2, r3, #3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003f1c:	4b0f      	ldr	r3, [pc, #60]	; (8003f5c <HAL_RCC_GetClockConfig+0x5c>)
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003f28:	4b0c      	ldr	r3, [pc, #48]	; (8003f5c <HAL_RCC_GetClockConfig+0x5c>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003f34:	4b09      	ldr	r3, [pc, #36]	; (8003f5c <HAL_RCC_GetClockConfig+0x5c>)
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	08db      	lsrs	r3, r3, #3
 8003f3a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003f42:	4b07      	ldr	r3, [pc, #28]	; (8003f60 <HAL_RCC_GetClockConfig+0x60>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0207 	and.w	r2, r3, #7
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	601a      	str	r2, [r3, #0]
}
 8003f4e:	bf00      	nop
 8003f50:	370c      	adds	r7, #12
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	40023800 	.word	0x40023800
 8003f60:	40023c00 	.word	0x40023c00

08003f64 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003f70:	2300      	movs	r3, #0
 8003f72:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d105      	bne.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d038      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003f8c:	4b68      	ldr	r3, [pc, #416]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f92:	f7fd f81f 	bl	8000fd4 <HAL_GetTick>
 8003f96:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f98:	e008      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003f9a:	f7fd f81b 	bl	8000fd4 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d901      	bls.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e0bd      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fac:	4b61      	ldr	r3, [pc, #388]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1f0      	bne.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	019b      	lsls	r3, r3, #6
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	071b      	lsls	r3, r3, #28
 8003fca:	495a      	ldr	r1, [pc, #360]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003fd2:	4b57      	ldr	r3, [pc, #348]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003fd8:	f7fc fffc 	bl	8000fd4 <HAL_GetTick>
 8003fdc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fde:	e008      	b.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003fe0:	f7fc fff8 	bl	8000fd4 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e09a      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ff2:	4b50      	ldr	r3, [pc, #320]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d0f0      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b00      	cmp	r3, #0
 8004008:	f000 8083 	beq.w	8004112 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800400c:	2300      	movs	r3, #0
 800400e:	60fb      	str	r3, [r7, #12]
 8004010:	4b48      	ldr	r3, [pc, #288]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004014:	4a47      	ldr	r2, [pc, #284]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800401a:	6413      	str	r3, [r2, #64]	; 0x40
 800401c:	4b45      	ldr	r3, [pc, #276]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800401e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004024:	60fb      	str	r3, [r7, #12]
 8004026:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004028:	4b43      	ldr	r3, [pc, #268]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a42      	ldr	r2, [pc, #264]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800402e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004032:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004034:	f7fc ffce 	bl	8000fd4 <HAL_GetTick>
 8004038:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800403a:	e008      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800403c:	f7fc ffca 	bl	8000fd4 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d901      	bls.n	800404e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e06c      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800404e:	4b3a      	ldr	r3, [pc, #232]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004056:	2b00      	cmp	r3, #0
 8004058:	d0f0      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800405a:	4b36      	ldr	r3, [pc, #216]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800405c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004062:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d02f      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x166>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	429a      	cmp	r2, r3
 8004076:	d028      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004078:	4b2e      	ldr	r3, [pc, #184]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800407a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800407c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004080:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004082:	4b2e      	ldr	r3, [pc, #184]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004084:	2201      	movs	r2, #1
 8004086:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004088:	4b2c      	ldr	r3, [pc, #176]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800408a:	2200      	movs	r2, #0
 800408c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800408e:	4a29      	ldr	r2, [pc, #164]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004094:	4b27      	ldr	r3, [pc, #156]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	2b01      	cmp	r3, #1
 800409e:	d114      	bne.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80040a0:	f7fc ff98 	bl	8000fd4 <HAL_GetTick>
 80040a4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040a6:	e00a      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040a8:	f7fc ff94 	bl	8000fd4 <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d901      	bls.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e034      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040be:	4b1d      	ldr	r3, [pc, #116]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d0ee      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040d6:	d10d      	bne.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80040d8:	4b16      	ldr	r3, [pc, #88]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80040e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ec:	4911      	ldr	r1, [pc, #68]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	608b      	str	r3, [r1, #8]
 80040f2:	e005      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80040f4:	4b0f      	ldr	r3, [pc, #60]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	4a0e      	ldr	r2, [pc, #56]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040fa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80040fe:	6093      	str	r3, [r2, #8]
 8004100:	4b0c      	ldr	r3, [pc, #48]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004102:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800410c:	4909      	ldr	r1, [pc, #36]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800410e:	4313      	orrs	r3, r2
 8004110:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0308 	and.w	r3, r3, #8
 800411a:	2b00      	cmp	r3, #0
 800411c:	d003      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	7d1a      	ldrb	r2, [r3, #20]
 8004122:	4b07      	ldr	r3, [pc, #28]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004124:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3718      	adds	r7, #24
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	42470068 	.word	0x42470068
 8004134:	40023800 	.word	0x40023800
 8004138:	40007000 	.word	0x40007000
 800413c:	42470e40 	.word	0x42470e40
 8004140:	424711e0 	.word	0x424711e0

08004144 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004144:	b480      	push	{r7}
 8004146:	b087      	sub	sp, #28
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800414c:	2300      	movs	r3, #0
 800414e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004150:	2300      	movs	r3, #0
 8004152:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004154:	2300      	movs	r3, #0
 8004156:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004158:	2300      	movs	r3, #0
 800415a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d140      	bne.n	80041e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004162:	4b24      	ldr	r3, [pc, #144]	; (80041f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800416a:	60fb      	str	r3, [r7, #12]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d005      	beq.n	800417e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d131      	bne.n	80041dc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004178:	4b1f      	ldr	r3, [pc, #124]	; (80041f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800417a:	617b      	str	r3, [r7, #20]
          break;
 800417c:	e031      	b.n	80041e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800417e:	4b1d      	ldr	r3, [pc, #116]	; (80041f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004186:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800418a:	d109      	bne.n	80041a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800418c:	4b19      	ldr	r3, [pc, #100]	; (80041f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800418e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004192:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004196:	4a19      	ldr	r2, [pc, #100]	; (80041fc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004198:	fbb2 f3f3 	udiv	r3, r2, r3
 800419c:	613b      	str	r3, [r7, #16]
 800419e:	e008      	b.n	80041b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80041a0:	4b14      	ldr	r3, [pc, #80]	; (80041f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80041a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041aa:	4a15      	ldr	r2, [pc, #84]	; (8004200 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80041ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b0:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80041b2:	4b10      	ldr	r3, [pc, #64]	; (80041f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80041b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041b8:	099b      	lsrs	r3, r3, #6
 80041ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	fb02 f303 	mul.w	r3, r2, r3
 80041c4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80041c6:	4b0b      	ldr	r3, [pc, #44]	; (80041f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80041c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041cc:	0f1b      	lsrs	r3, r3, #28
 80041ce:	f003 0307 	and.w	r3, r3, #7
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d8:	617b      	str	r3, [r7, #20]
          break;
 80041da:	e002      	b.n	80041e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80041dc:	2300      	movs	r3, #0
 80041de:	617b      	str	r3, [r7, #20]
          break;
 80041e0:	bf00      	nop
        }
      }
      break;
 80041e2:	bf00      	nop
    }
  }
  return frequency;
 80041e4:	697b      	ldr	r3, [r7, #20]
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	371c      	adds	r7, #28
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	40023800 	.word	0x40023800
 80041f8:	00bb8000 	.word	0x00bb8000
 80041fc:	007a1200 	.word	0x007a1200
 8004200:	00f42400 	.word	0x00f42400

08004204 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e07b      	b.n	800430e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	2b00      	cmp	r3, #0
 800421c:	d108      	bne.n	8004230 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004226:	d009      	beq.n	800423c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	61da      	str	r2, [r3, #28]
 800422e:	e005      	b.n	800423c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d106      	bne.n	800425c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7fc fd5c 	bl	8000d14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2202      	movs	r2, #2
 8004260:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004272:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004284:	431a      	orrs	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800428e:	431a      	orrs	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	431a      	orrs	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	431a      	orrs	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042ac:	431a      	orrs	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	69db      	ldr	r3, [r3, #28]
 80042b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042b6:	431a      	orrs	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a1b      	ldr	r3, [r3, #32]
 80042bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c0:	ea42 0103 	orr.w	r1, r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	430a      	orrs	r2, r1
 80042d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	0c1b      	lsrs	r3, r3, #16
 80042da:	f003 0104 	and.w	r1, r3, #4
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e2:	f003 0210 	and.w	r2, r3, #16
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	69da      	ldr	r2, [r3, #28]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3708      	adds	r7, #8
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b082      	sub	sp, #8
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d101      	bne.n	8004328 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e041      	b.n	80043ac <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b00      	cmp	r3, #0
 8004332:	d106      	bne.n	8004342 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f000 f839 	bl	80043b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2202      	movs	r2, #2
 8004346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	3304      	adds	r3, #4
 8004352:	4619      	mov	r1, r3
 8004354:	4610      	mov	r0, r2
 8004356:	f000 f9c9 	bl	80046ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2201      	movs	r2, #1
 8004366:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3708      	adds	r7, #8
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d001      	beq.n	80043e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e044      	b.n	800446a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2202      	movs	r2, #2
 80043e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68da      	ldr	r2, [r3, #12]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f042 0201 	orr.w	r2, r2, #1
 80043f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a1e      	ldr	r2, [pc, #120]	; (8004478 <HAL_TIM_Base_Start_IT+0xb0>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d018      	beq.n	8004434 <HAL_TIM_Base_Start_IT+0x6c>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800440a:	d013      	beq.n	8004434 <HAL_TIM_Base_Start_IT+0x6c>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a1a      	ldr	r2, [pc, #104]	; (800447c <HAL_TIM_Base_Start_IT+0xb4>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d00e      	beq.n	8004434 <HAL_TIM_Base_Start_IT+0x6c>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a19      	ldr	r2, [pc, #100]	; (8004480 <HAL_TIM_Base_Start_IT+0xb8>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d009      	beq.n	8004434 <HAL_TIM_Base_Start_IT+0x6c>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a17      	ldr	r2, [pc, #92]	; (8004484 <HAL_TIM_Base_Start_IT+0xbc>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d004      	beq.n	8004434 <HAL_TIM_Base_Start_IT+0x6c>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a16      	ldr	r2, [pc, #88]	; (8004488 <HAL_TIM_Base_Start_IT+0xc0>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d111      	bne.n	8004458 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f003 0307 	and.w	r3, r3, #7
 800443e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2b06      	cmp	r3, #6
 8004444:	d010      	beq.n	8004468 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f042 0201 	orr.w	r2, r2, #1
 8004454:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004456:	e007      	b.n	8004468 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f042 0201 	orr.w	r2, r2, #1
 8004466:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3714      	adds	r7, #20
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	40010000 	.word	0x40010000
 800447c:	40000400 	.word	0x40000400
 8004480:	40000800 	.word	0x40000800
 8004484:	40000c00 	.word	0x40000c00
 8004488:	40014000 	.word	0x40014000

0800448c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d122      	bne.n	80044e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	f003 0302 	and.w	r3, r3, #2
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d11b      	bne.n	80044e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f06f 0202 	mvn.w	r2, #2
 80044b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2201      	movs	r2, #1
 80044be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	f003 0303 	and.w	r3, r3, #3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d003      	beq.n	80044d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 f8ee 	bl	80046b0 <HAL_TIM_IC_CaptureCallback>
 80044d4:	e005      	b.n	80044e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 f8e0 	bl	800469c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 f8f1 	bl	80046c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	f003 0304 	and.w	r3, r3, #4
 80044f2:	2b04      	cmp	r3, #4
 80044f4:	d122      	bne.n	800453c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	f003 0304 	and.w	r3, r3, #4
 8004500:	2b04      	cmp	r3, #4
 8004502:	d11b      	bne.n	800453c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f06f 0204 	mvn.w	r2, #4
 800450c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2202      	movs	r2, #2
 8004512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800451e:	2b00      	cmp	r3, #0
 8004520:	d003      	beq.n	800452a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f8c4 	bl	80046b0 <HAL_TIM_IC_CaptureCallback>
 8004528:	e005      	b.n	8004536 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f8b6 	bl	800469c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 f8c7 	bl	80046c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	f003 0308 	and.w	r3, r3, #8
 8004546:	2b08      	cmp	r3, #8
 8004548:	d122      	bne.n	8004590 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	f003 0308 	and.w	r3, r3, #8
 8004554:	2b08      	cmp	r3, #8
 8004556:	d11b      	bne.n	8004590 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f06f 0208 	mvn.w	r2, #8
 8004560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2204      	movs	r2, #4
 8004566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	69db      	ldr	r3, [r3, #28]
 800456e:	f003 0303 	and.w	r3, r3, #3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f89a 	bl	80046b0 <HAL_TIM_IC_CaptureCallback>
 800457c:	e005      	b.n	800458a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f88c 	bl	800469c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 f89d 	bl	80046c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	f003 0310 	and.w	r3, r3, #16
 800459a:	2b10      	cmp	r3, #16
 800459c:	d122      	bne.n	80045e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f003 0310 	and.w	r3, r3, #16
 80045a8:	2b10      	cmp	r3, #16
 80045aa:	d11b      	bne.n	80045e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f06f 0210 	mvn.w	r2, #16
 80045b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2208      	movs	r2, #8
 80045ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d003      	beq.n	80045d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f870 	bl	80046b0 <HAL_TIM_IC_CaptureCallback>
 80045d0:	e005      	b.n	80045de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f862 	bl	800469c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 f873 	bl	80046c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d10e      	bne.n	8004610 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d107      	bne.n	8004610 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f06f 0201 	mvn.w	r2, #1
 8004608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f7fc fa2c 	bl	8000a68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800461a:	2b80      	cmp	r3, #128	; 0x80
 800461c:	d10e      	bne.n	800463c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004628:	2b80      	cmp	r3, #128	; 0x80
 800462a:	d107      	bne.n	800463c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 f8e2 	bl	8004800 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004646:	2b40      	cmp	r3, #64	; 0x40
 8004648:	d10e      	bne.n	8004668 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004654:	2b40      	cmp	r3, #64	; 0x40
 8004656:	d107      	bne.n	8004668 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f838 	bl	80046d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	f003 0320 	and.w	r3, r3, #32
 8004672:	2b20      	cmp	r3, #32
 8004674:	d10e      	bne.n	8004694 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	f003 0320 	and.w	r3, r3, #32
 8004680:	2b20      	cmp	r3, #32
 8004682:	d107      	bne.n	8004694 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f06f 0220 	mvn.w	r2, #32
 800468c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f8ac 	bl	80047ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004694:	bf00      	nop
 8004696:	3708      	adds	r7, #8
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046a4:	bf00      	nop
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046b8:	bf00      	nop
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a34      	ldr	r2, [pc, #208]	; (80047d0 <TIM_Base_SetConfig+0xe4>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d00f      	beq.n	8004724 <TIM_Base_SetConfig+0x38>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800470a:	d00b      	beq.n	8004724 <TIM_Base_SetConfig+0x38>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a31      	ldr	r2, [pc, #196]	; (80047d4 <TIM_Base_SetConfig+0xe8>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d007      	beq.n	8004724 <TIM_Base_SetConfig+0x38>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a30      	ldr	r2, [pc, #192]	; (80047d8 <TIM_Base_SetConfig+0xec>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d003      	beq.n	8004724 <TIM_Base_SetConfig+0x38>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a2f      	ldr	r2, [pc, #188]	; (80047dc <TIM_Base_SetConfig+0xf0>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d108      	bne.n	8004736 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800472a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	4313      	orrs	r3, r2
 8004734:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a25      	ldr	r2, [pc, #148]	; (80047d0 <TIM_Base_SetConfig+0xe4>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d01b      	beq.n	8004776 <TIM_Base_SetConfig+0x8a>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004744:	d017      	beq.n	8004776 <TIM_Base_SetConfig+0x8a>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a22      	ldr	r2, [pc, #136]	; (80047d4 <TIM_Base_SetConfig+0xe8>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d013      	beq.n	8004776 <TIM_Base_SetConfig+0x8a>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a21      	ldr	r2, [pc, #132]	; (80047d8 <TIM_Base_SetConfig+0xec>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d00f      	beq.n	8004776 <TIM_Base_SetConfig+0x8a>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a20      	ldr	r2, [pc, #128]	; (80047dc <TIM_Base_SetConfig+0xf0>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d00b      	beq.n	8004776 <TIM_Base_SetConfig+0x8a>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a1f      	ldr	r2, [pc, #124]	; (80047e0 <TIM_Base_SetConfig+0xf4>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d007      	beq.n	8004776 <TIM_Base_SetConfig+0x8a>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a1e      	ldr	r2, [pc, #120]	; (80047e4 <TIM_Base_SetConfig+0xf8>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d003      	beq.n	8004776 <TIM_Base_SetConfig+0x8a>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a1d      	ldr	r2, [pc, #116]	; (80047e8 <TIM_Base_SetConfig+0xfc>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d108      	bne.n	8004788 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800477c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	4313      	orrs	r3, r2
 8004786:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	4313      	orrs	r3, r2
 8004794:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	689a      	ldr	r2, [r3, #8]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a08      	ldr	r2, [pc, #32]	; (80047d0 <TIM_Base_SetConfig+0xe4>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d103      	bne.n	80047bc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	691a      	ldr	r2, [r3, #16]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	615a      	str	r2, [r3, #20]
}
 80047c2:	bf00      	nop
 80047c4:	3714      	adds	r7, #20
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	40010000 	.word	0x40010000
 80047d4:	40000400 	.word	0x40000400
 80047d8:	40000800 	.word	0x40000800
 80047dc:	40000c00 	.word	0x40000c00
 80047e0:	40014000 	.word	0x40014000
 80047e4:	40014400 	.word	0x40014400
 80047e8:	40014800 	.word	0x40014800

080047ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004814:	b084      	sub	sp, #16
 8004816:	b580      	push	{r7, lr}
 8004818:	b084      	sub	sp, #16
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
 800481e:	f107 001c 	add.w	r0, r7, #28
 8004822:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004828:	2b01      	cmp	r3, #1
 800482a:	d122      	bne.n	8004872 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004830:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004840:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004854:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004856:	2b01      	cmp	r3, #1
 8004858:	d105      	bne.n	8004866 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f001 fbee 	bl	8006048 <USB_CoreReset>
 800486c:	4603      	mov	r3, r0
 800486e:	73fb      	strb	r3, [r7, #15]
 8004870:	e01a      	b.n	80048a8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f001 fbe2 	bl	8006048 <USB_CoreReset>
 8004884:	4603      	mov	r3, r0
 8004886:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004888:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800488a:	2b00      	cmp	r3, #0
 800488c:	d106      	bne.n	800489c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004892:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	639a      	str	r2, [r3, #56]	; 0x38
 800489a:	e005      	b.n	80048a8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80048a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d10b      	bne.n	80048c6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f043 0206 	orr.w	r2, r3, #6
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f043 0220 	orr.w	r2, r3, #32
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80048c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3710      	adds	r7, #16
 80048cc:	46bd      	mov	sp, r7
 80048ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048d2:	b004      	add	sp, #16
 80048d4:	4770      	bx	lr
	...

080048d8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80048d8:	b480      	push	{r7}
 80048da:	b087      	sub	sp, #28
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	4613      	mov	r3, r2
 80048e4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80048e6:	79fb      	ldrb	r3, [r7, #7]
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d165      	bne.n	80049b8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	4a41      	ldr	r2, [pc, #260]	; (80049f4 <USB_SetTurnaroundTime+0x11c>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d906      	bls.n	8004902 <USB_SetTurnaroundTime+0x2a>
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	4a40      	ldr	r2, [pc, #256]	; (80049f8 <USB_SetTurnaroundTime+0x120>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d202      	bcs.n	8004902 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80048fc:	230f      	movs	r3, #15
 80048fe:	617b      	str	r3, [r7, #20]
 8004900:	e062      	b.n	80049c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	4a3c      	ldr	r2, [pc, #240]	; (80049f8 <USB_SetTurnaroundTime+0x120>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d306      	bcc.n	8004918 <USB_SetTurnaroundTime+0x40>
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	4a3b      	ldr	r2, [pc, #236]	; (80049fc <USB_SetTurnaroundTime+0x124>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d202      	bcs.n	8004918 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004912:	230e      	movs	r3, #14
 8004914:	617b      	str	r3, [r7, #20]
 8004916:	e057      	b.n	80049c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	4a38      	ldr	r2, [pc, #224]	; (80049fc <USB_SetTurnaroundTime+0x124>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d306      	bcc.n	800492e <USB_SetTurnaroundTime+0x56>
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	4a37      	ldr	r2, [pc, #220]	; (8004a00 <USB_SetTurnaroundTime+0x128>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d202      	bcs.n	800492e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004928:	230d      	movs	r3, #13
 800492a:	617b      	str	r3, [r7, #20]
 800492c:	e04c      	b.n	80049c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	4a33      	ldr	r2, [pc, #204]	; (8004a00 <USB_SetTurnaroundTime+0x128>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d306      	bcc.n	8004944 <USB_SetTurnaroundTime+0x6c>
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	4a32      	ldr	r2, [pc, #200]	; (8004a04 <USB_SetTurnaroundTime+0x12c>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d802      	bhi.n	8004944 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800493e:	230c      	movs	r3, #12
 8004940:	617b      	str	r3, [r7, #20]
 8004942:	e041      	b.n	80049c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	4a2f      	ldr	r2, [pc, #188]	; (8004a04 <USB_SetTurnaroundTime+0x12c>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d906      	bls.n	800495a <USB_SetTurnaroundTime+0x82>
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	4a2e      	ldr	r2, [pc, #184]	; (8004a08 <USB_SetTurnaroundTime+0x130>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d802      	bhi.n	800495a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004954:	230b      	movs	r3, #11
 8004956:	617b      	str	r3, [r7, #20]
 8004958:	e036      	b.n	80049c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	4a2a      	ldr	r2, [pc, #168]	; (8004a08 <USB_SetTurnaroundTime+0x130>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d906      	bls.n	8004970 <USB_SetTurnaroundTime+0x98>
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	4a29      	ldr	r2, [pc, #164]	; (8004a0c <USB_SetTurnaroundTime+0x134>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d802      	bhi.n	8004970 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800496a:	230a      	movs	r3, #10
 800496c:	617b      	str	r3, [r7, #20]
 800496e:	e02b      	b.n	80049c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	4a26      	ldr	r2, [pc, #152]	; (8004a0c <USB_SetTurnaroundTime+0x134>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d906      	bls.n	8004986 <USB_SetTurnaroundTime+0xae>
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	4a25      	ldr	r2, [pc, #148]	; (8004a10 <USB_SetTurnaroundTime+0x138>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d202      	bcs.n	8004986 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004980:	2309      	movs	r3, #9
 8004982:	617b      	str	r3, [r7, #20]
 8004984:	e020      	b.n	80049c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	4a21      	ldr	r2, [pc, #132]	; (8004a10 <USB_SetTurnaroundTime+0x138>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d306      	bcc.n	800499c <USB_SetTurnaroundTime+0xc4>
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	4a20      	ldr	r2, [pc, #128]	; (8004a14 <USB_SetTurnaroundTime+0x13c>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d802      	bhi.n	800499c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004996:	2308      	movs	r3, #8
 8004998:	617b      	str	r3, [r7, #20]
 800499a:	e015      	b.n	80049c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	4a1d      	ldr	r2, [pc, #116]	; (8004a14 <USB_SetTurnaroundTime+0x13c>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d906      	bls.n	80049b2 <USB_SetTurnaroundTime+0xda>
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	4a1c      	ldr	r2, [pc, #112]	; (8004a18 <USB_SetTurnaroundTime+0x140>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d202      	bcs.n	80049b2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80049ac:	2307      	movs	r3, #7
 80049ae:	617b      	str	r3, [r7, #20]
 80049b0:	e00a      	b.n	80049c8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80049b2:	2306      	movs	r3, #6
 80049b4:	617b      	str	r3, [r7, #20]
 80049b6:	e007      	b.n	80049c8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80049b8:	79fb      	ldrb	r3, [r7, #7]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d102      	bne.n	80049c4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80049be:	2309      	movs	r3, #9
 80049c0:	617b      	str	r3, [r7, #20]
 80049c2:	e001      	b.n	80049c8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80049c4:	2309      	movs	r3, #9
 80049c6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	68da      	ldr	r2, [r3, #12]
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	029b      	lsls	r3, r3, #10
 80049dc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80049e0:	431a      	orrs	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	371c      	adds	r7, #28
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr
 80049f4:	00d8acbf 	.word	0x00d8acbf
 80049f8:	00e4e1c0 	.word	0x00e4e1c0
 80049fc:	00f42400 	.word	0x00f42400
 8004a00:	01067380 	.word	0x01067380
 8004a04:	011a499f 	.word	0x011a499f
 8004a08:	01312cff 	.word	0x01312cff
 8004a0c:	014ca43f 	.word	0x014ca43f
 8004a10:	016e3600 	.word	0x016e3600
 8004a14:	01a6ab1f 	.word	0x01a6ab1f
 8004a18:	01e84800 	.word	0x01e84800

08004a1c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f043 0201 	orr.w	r2, r3, #1
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr

08004a3e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b083      	sub	sp, #12
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f023 0201 	bic.w	r2, r3, #1
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	460b      	mov	r3, r1
 8004a6a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004a7c:	78fb      	ldrb	r3, [r7, #3]
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d115      	bne.n	8004aae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004a8e:	2001      	movs	r0, #1
 8004a90:	f7fc faac 	bl	8000fec <HAL_Delay>
      ms++;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	3301      	adds	r3, #1
 8004a98:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f001 fa45 	bl	8005f2a <USB_GetMode>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d01e      	beq.n	8004ae4 <USB_SetCurrentMode+0x84>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2b31      	cmp	r3, #49	; 0x31
 8004aaa:	d9f0      	bls.n	8004a8e <USB_SetCurrentMode+0x2e>
 8004aac:	e01a      	b.n	8004ae4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004aae:	78fb      	ldrb	r3, [r7, #3]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d115      	bne.n	8004ae0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004ac0:	2001      	movs	r0, #1
 8004ac2:	f7fc fa93 	bl	8000fec <HAL_Delay>
      ms++;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f001 fa2c 	bl	8005f2a <USB_GetMode>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d005      	beq.n	8004ae4 <USB_SetCurrentMode+0x84>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2b31      	cmp	r3, #49	; 0x31
 8004adc:	d9f0      	bls.n	8004ac0 <USB_SetCurrentMode+0x60>
 8004ade:	e001      	b.n	8004ae4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e005      	b.n	8004af0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2b32      	cmp	r3, #50	; 0x32
 8004ae8:	d101      	bne.n	8004aee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e000      	b.n	8004af0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3710      	adds	r7, #16
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004af8:	b084      	sub	sp, #16
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b086      	sub	sp, #24
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
 8004b02:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004b06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004b12:	2300      	movs	r3, #0
 8004b14:	613b      	str	r3, [r7, #16]
 8004b16:	e009      	b.n	8004b2c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	3340      	adds	r3, #64	; 0x40
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4413      	add	r3, r2
 8004b22:	2200      	movs	r2, #0
 8004b24:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	3301      	adds	r3, #1
 8004b2a:	613b      	str	r3, [r7, #16]
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	2b0e      	cmp	r3, #14
 8004b30:	d9f2      	bls.n	8004b18 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004b32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d11c      	bne.n	8004b72 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b46:	f043 0302 	orr.w	r3, r3, #2
 8004b4a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b50:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b68:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	639a      	str	r2, [r3, #56]	; 0x38
 8004b70:	e00b      	b.n	8004b8a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b76:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b82:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b90:	461a      	mov	r2, r3
 8004b92:	2300      	movs	r3, #0
 8004b94:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	680b      	ldr	r3, [r1, #0]
 8004ba8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d10c      	bne.n	8004bca <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d104      	bne.n	8004bc0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 f965 	bl	8004e88 <USB_SetDevSpeed>
 8004bbe:	e008      	b.n	8004bd2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004bc0:	2101      	movs	r1, #1
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 f960 	bl	8004e88 <USB_SetDevSpeed>
 8004bc8:	e003      	b.n	8004bd2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004bca:	2103      	movs	r1, #3
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f000 f95b 	bl	8004e88 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004bd2:	2110      	movs	r1, #16
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 f8f3 	bl	8004dc0 <USB_FlushTxFifo>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d001      	beq.n	8004be4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 f91f 	bl	8004e28 <USB_FlushRxFifo>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c06:	461a      	mov	r2, r3
 8004c08:	2300      	movs	r3, #0
 8004c0a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c12:	461a      	mov	r2, r3
 8004c14:	2300      	movs	r3, #0
 8004c16:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c18:	2300      	movs	r3, #0
 8004c1a:	613b      	str	r3, [r7, #16]
 8004c1c:	e043      	b.n	8004ca6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	015a      	lsls	r2, r3, #5
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	4413      	add	r3, r2
 8004c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c34:	d118      	bne.n	8004c68 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d10a      	bne.n	8004c52 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	015a      	lsls	r2, r3, #5
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	4413      	add	r3, r2
 8004c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c48:	461a      	mov	r2, r3
 8004c4a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c4e:	6013      	str	r3, [r2, #0]
 8004c50:	e013      	b.n	8004c7a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	015a      	lsls	r2, r3, #5
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	4413      	add	r3, r2
 8004c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c5e:	461a      	mov	r2, r3
 8004c60:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c64:	6013      	str	r3, [r2, #0]
 8004c66:	e008      	b.n	8004c7a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	015a      	lsls	r2, r3, #5
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	4413      	add	r3, r2
 8004c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c74:	461a      	mov	r2, r3
 8004c76:	2300      	movs	r3, #0
 8004c78:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	015a      	lsls	r2, r3, #5
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	4413      	add	r3, r2
 8004c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c86:	461a      	mov	r2, r3
 8004c88:	2300      	movs	r3, #0
 8004c8a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	015a      	lsls	r2, r3, #5
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	4413      	add	r3, r2
 8004c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c98:	461a      	mov	r2, r3
 8004c9a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c9e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	613b      	str	r3, [r7, #16]
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca8:	693a      	ldr	r2, [r7, #16]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d3b7      	bcc.n	8004c1e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cae:	2300      	movs	r3, #0
 8004cb0:	613b      	str	r3, [r7, #16]
 8004cb2:	e043      	b.n	8004d3c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	015a      	lsls	r2, r3, #5
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	4413      	add	r3, r2
 8004cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cca:	d118      	bne.n	8004cfe <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d10a      	bne.n	8004ce8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	015a      	lsls	r2, r3, #5
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	4413      	add	r3, r2
 8004cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cde:	461a      	mov	r2, r3
 8004ce0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ce4:	6013      	str	r3, [r2, #0]
 8004ce6:	e013      	b.n	8004d10 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	015a      	lsls	r2, r3, #5
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	4413      	add	r3, r2
 8004cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004cfa:	6013      	str	r3, [r2, #0]
 8004cfc:	e008      	b.n	8004d10 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	015a      	lsls	r2, r3, #5
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	4413      	add	r3, r2
 8004d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	015a      	lsls	r2, r3, #5
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	4413      	add	r3, r2
 8004d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	2300      	movs	r3, #0
 8004d20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	015a      	lsls	r2, r3, #5
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	4413      	add	r3, r2
 8004d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d2e:	461a      	mov	r2, r3
 8004d30:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d34:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	3301      	adds	r3, #1
 8004d3a:	613b      	str	r3, [r7, #16]
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d3b7      	bcc.n	8004cb4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d56:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004d64:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d105      	bne.n	8004d78 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	f043 0210 	orr.w	r2, r3, #16
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	699a      	ldr	r2, [r3, #24]
 8004d7c:	4b0f      	ldr	r3, [pc, #60]	; (8004dbc <USB_DevInit+0x2c4>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d005      	beq.n	8004d96 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	f043 0208 	orr.w	r2, r3, #8
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d107      	bne.n	8004dac <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004da4:	f043 0304 	orr.w	r3, r3, #4
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004dac:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3718      	adds	r7, #24
 8004db2:	46bd      	mov	sp, r7
 8004db4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004db8:	b004      	add	sp, #16
 8004dba:	4770      	bx	lr
 8004dbc:	803c3800 	.word	0x803c3800

08004dc0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	4a13      	ldr	r2, [pc, #76]	; (8004e24 <USB_FlushTxFifo+0x64>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d901      	bls.n	8004de0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e01b      	b.n	8004e18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	daf2      	bge.n	8004dce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004de8:	2300      	movs	r3, #0
 8004dea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	019b      	lsls	r3, r3, #6
 8004df0:	f043 0220 	orr.w	r2, r3, #32
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	4a08      	ldr	r2, [pc, #32]	; (8004e24 <USB_FlushTxFifo+0x64>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d901      	bls.n	8004e0a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e006      	b.n	8004e18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	f003 0320 	and.w	r3, r3, #32
 8004e12:	2b20      	cmp	r3, #32
 8004e14:	d0f0      	beq.n	8004df8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3714      	adds	r7, #20
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr
 8004e24:	00030d40 	.word	0x00030d40

08004e28 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e30:	2300      	movs	r3, #0
 8004e32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	3301      	adds	r3, #1
 8004e38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	4a11      	ldr	r2, [pc, #68]	; (8004e84 <USB_FlushRxFifo+0x5c>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d901      	bls.n	8004e46 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e018      	b.n	8004e78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	daf2      	bge.n	8004e34 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2210      	movs	r2, #16
 8004e56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	4a08      	ldr	r2, [pc, #32]	; (8004e84 <USB_FlushRxFifo+0x5c>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d901      	bls.n	8004e6a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e006      	b.n	8004e78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	f003 0310 	and.w	r3, r3, #16
 8004e72:	2b10      	cmp	r3, #16
 8004e74:	d0f0      	beq.n	8004e58 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3714      	adds	r7, #20
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr
 8004e84:	00030d40 	.word	0x00030d40

08004e88 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	460b      	mov	r3, r1
 8004e92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	78fb      	ldrb	r3, [r7, #3]
 8004ea2:	68f9      	ldr	r1, [r7, #12]
 8004ea4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3714      	adds	r7, #20
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b087      	sub	sp, #28
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f003 0306 	and.w	r3, r3, #6
 8004ed2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d102      	bne.n	8004ee0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004eda:	2300      	movs	r3, #0
 8004edc:	75fb      	strb	r3, [r7, #23]
 8004ede:	e00a      	b.n	8004ef6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d002      	beq.n	8004eec <USB_GetDevSpeed+0x32>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2b06      	cmp	r3, #6
 8004eea:	d102      	bne.n	8004ef2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004eec:	2302      	movs	r3, #2
 8004eee:	75fb      	strb	r3, [r7, #23]
 8004ef0:	e001      	b.n	8004ef6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004ef2:	230f      	movs	r3, #15
 8004ef4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	371c      	adds	r7, #28
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	785b      	ldrb	r3, [r3, #1]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d13a      	bne.n	8004f96 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f26:	69da      	ldr	r2, [r3, #28]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	f003 030f 	and.w	r3, r3, #15
 8004f30:	2101      	movs	r1, #1
 8004f32:	fa01 f303 	lsl.w	r3, r1, r3
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	68f9      	ldr	r1, [r7, #12]
 8004f3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	015a      	lsls	r2, r3, #5
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	4413      	add	r3, r2
 8004f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d155      	bne.n	8005004 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	015a      	lsls	r2, r3, #5
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	4413      	add	r3, r2
 8004f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	791b      	ldrb	r3, [r3, #4]
 8004f72:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004f74:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	059b      	lsls	r3, r3, #22
 8004f7a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	68ba      	ldr	r2, [r7, #8]
 8004f80:	0151      	lsls	r1, r2, #5
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	440a      	add	r2, r1
 8004f86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f92:	6013      	str	r3, [r2, #0]
 8004f94:	e036      	b.n	8005004 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f9c:	69da      	ldr	r2, [r3, #28]
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	f003 030f 	and.w	r3, r3, #15
 8004fa6:	2101      	movs	r1, #1
 8004fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8004fac:	041b      	lsls	r3, r3, #16
 8004fae:	68f9      	ldr	r1, [r7, #12]
 8004fb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	015a      	lsls	r2, r3, #5
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d11a      	bne.n	8005004 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	015a      	lsls	r2, r3, #5
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	4413      	add	r3, r2
 8004fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	791b      	ldrb	r3, [r3, #4]
 8004fe8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004fea:	430b      	orrs	r3, r1
 8004fec:	4313      	orrs	r3, r2
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	0151      	lsls	r1, r2, #5
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	440a      	add	r2, r1
 8004ff6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ffa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005002:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3714      	adds	r7, #20
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
	...

08005014 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	785b      	ldrb	r3, [r3, #1]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d161      	bne.n	80050f4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	015a      	lsls	r2, r3, #5
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	4413      	add	r3, r2
 8005038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005042:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005046:	d11f      	bne.n	8005088 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	015a      	lsls	r2, r3, #5
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	4413      	add	r3, r2
 8005050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68ba      	ldr	r2, [r7, #8]
 8005058:	0151      	lsls	r1, r2, #5
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	440a      	add	r2, r1
 800505e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005062:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005066:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	015a      	lsls	r2, r3, #5
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	4413      	add	r3, r2
 8005070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68ba      	ldr	r2, [r7, #8]
 8005078:	0151      	lsls	r1, r2, #5
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	440a      	add	r2, r1
 800507e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005082:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005086:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800508e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	f003 030f 	and.w	r3, r3, #15
 8005098:	2101      	movs	r1, #1
 800509a:	fa01 f303 	lsl.w	r3, r1, r3
 800509e:	b29b      	uxth	r3, r3
 80050a0:	43db      	mvns	r3, r3
 80050a2:	68f9      	ldr	r1, [r7, #12]
 80050a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050a8:	4013      	ands	r3, r2
 80050aa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b2:	69da      	ldr	r2, [r3, #28]
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	f003 030f 	and.w	r3, r3, #15
 80050bc:	2101      	movs	r1, #1
 80050be:	fa01 f303 	lsl.w	r3, r1, r3
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	43db      	mvns	r3, r3
 80050c6:	68f9      	ldr	r1, [r7, #12]
 80050c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050cc:	4013      	ands	r3, r2
 80050ce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	015a      	lsls	r2, r3, #5
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	0159      	lsls	r1, r3, #5
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	440b      	add	r3, r1
 80050e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ea:	4619      	mov	r1, r3
 80050ec:	4b35      	ldr	r3, [pc, #212]	; (80051c4 <USB_DeactivateEndpoint+0x1b0>)
 80050ee:	4013      	ands	r3, r2
 80050f0:	600b      	str	r3, [r1, #0]
 80050f2:	e060      	b.n	80051b6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	015a      	lsls	r2, r3, #5
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	4413      	add	r3, r2
 80050fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005106:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800510a:	d11f      	bne.n	800514c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	015a      	lsls	r2, r3, #5
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	4413      	add	r3, r2
 8005114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68ba      	ldr	r2, [r7, #8]
 800511c:	0151      	lsls	r1, r2, #5
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	440a      	add	r2, r1
 8005122:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005126:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800512a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	015a      	lsls	r2, r3, #5
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	4413      	add	r3, r2
 8005134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68ba      	ldr	r2, [r7, #8]
 800513c:	0151      	lsls	r1, r2, #5
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	440a      	add	r2, r1
 8005142:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005146:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800514a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005152:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	f003 030f 	and.w	r3, r3, #15
 800515c:	2101      	movs	r1, #1
 800515e:	fa01 f303 	lsl.w	r3, r1, r3
 8005162:	041b      	lsls	r3, r3, #16
 8005164:	43db      	mvns	r3, r3
 8005166:	68f9      	ldr	r1, [r7, #12]
 8005168:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800516c:	4013      	ands	r3, r2
 800516e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005176:	69da      	ldr	r2, [r3, #28]
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	f003 030f 	and.w	r3, r3, #15
 8005180:	2101      	movs	r1, #1
 8005182:	fa01 f303 	lsl.w	r3, r1, r3
 8005186:	041b      	lsls	r3, r3, #16
 8005188:	43db      	mvns	r3, r3
 800518a:	68f9      	ldr	r1, [r7, #12]
 800518c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005190:	4013      	ands	r3, r2
 8005192:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	015a      	lsls	r2, r3, #5
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	4413      	add	r3, r2
 800519c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	0159      	lsls	r1, r3, #5
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	440b      	add	r3, r1
 80051aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ae:	4619      	mov	r1, r3
 80051b0:	4b05      	ldr	r3, [pc, #20]	; (80051c8 <USB_DeactivateEndpoint+0x1b4>)
 80051b2:	4013      	ands	r3, r2
 80051b4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3714      	adds	r7, #20
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr
 80051c4:	ec337800 	.word	0xec337800
 80051c8:	eff37800 	.word	0xeff37800

080051cc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b08a      	sub	sp, #40	; 0x28
 80051d0:	af02      	add	r7, sp, #8
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	4613      	mov	r3, r2
 80051d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	785b      	ldrb	r3, [r3, #1]
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	f040 815c 	bne.w	80054a6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d132      	bne.n	800525c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	015a      	lsls	r2, r3, #5
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	4413      	add	r3, r2
 80051fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	69ba      	ldr	r2, [r7, #24]
 8005206:	0151      	lsls	r1, r2, #5
 8005208:	69fa      	ldr	r2, [r7, #28]
 800520a:	440a      	add	r2, r1
 800520c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005210:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005214:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005218:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	015a      	lsls	r2, r3, #5
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	4413      	add	r3, r2
 8005222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	69ba      	ldr	r2, [r7, #24]
 800522a:	0151      	lsls	r1, r2, #5
 800522c:	69fa      	ldr	r2, [r7, #28]
 800522e:	440a      	add	r2, r1
 8005230:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005234:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005238:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	015a      	lsls	r2, r3, #5
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	4413      	add	r3, r2
 8005242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	69ba      	ldr	r2, [r7, #24]
 800524a:	0151      	lsls	r1, r2, #5
 800524c:	69fa      	ldr	r2, [r7, #28]
 800524e:	440a      	add	r2, r1
 8005250:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005254:	0cdb      	lsrs	r3, r3, #19
 8005256:	04db      	lsls	r3, r3, #19
 8005258:	6113      	str	r3, [r2, #16]
 800525a:	e074      	b.n	8005346 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	015a      	lsls	r2, r3, #5
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	4413      	add	r3, r2
 8005264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	69ba      	ldr	r2, [r7, #24]
 800526c:	0151      	lsls	r1, r2, #5
 800526e:	69fa      	ldr	r2, [r7, #28]
 8005270:	440a      	add	r2, r1
 8005272:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005276:	0cdb      	lsrs	r3, r3, #19
 8005278:	04db      	lsls	r3, r3, #19
 800527a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	015a      	lsls	r2, r3, #5
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	4413      	add	r3, r2
 8005284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	69ba      	ldr	r2, [r7, #24]
 800528c:	0151      	lsls	r1, r2, #5
 800528e:	69fa      	ldr	r2, [r7, #28]
 8005290:	440a      	add	r2, r1
 8005292:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005296:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800529a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800529e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	015a      	lsls	r2, r3, #5
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	4413      	add	r3, r2
 80052a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ac:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	6999      	ldr	r1, [r3, #24]
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	440b      	add	r3, r1
 80052b8:	1e59      	subs	r1, r3, #1
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	fbb1 f3f3 	udiv	r3, r1, r3
 80052c2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80052c4:	4b9d      	ldr	r3, [pc, #628]	; (800553c <USB_EPStartXfer+0x370>)
 80052c6:	400b      	ands	r3, r1
 80052c8:	69b9      	ldr	r1, [r7, #24]
 80052ca:	0148      	lsls	r0, r1, #5
 80052cc:	69f9      	ldr	r1, [r7, #28]
 80052ce:	4401      	add	r1, r0
 80052d0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80052d4:	4313      	orrs	r3, r2
 80052d6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	015a      	lsls	r2, r3, #5
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	4413      	add	r3, r2
 80052e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e4:	691a      	ldr	r2, [r3, #16]
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052ee:	69b9      	ldr	r1, [r7, #24]
 80052f0:	0148      	lsls	r0, r1, #5
 80052f2:	69f9      	ldr	r1, [r7, #28]
 80052f4:	4401      	add	r1, r0
 80052f6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80052fa:	4313      	orrs	r3, r2
 80052fc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	791b      	ldrb	r3, [r3, #4]
 8005302:	2b01      	cmp	r3, #1
 8005304:	d11f      	bne.n	8005346 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	015a      	lsls	r2, r3, #5
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	4413      	add	r3, r2
 800530e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	69ba      	ldr	r2, [r7, #24]
 8005316:	0151      	lsls	r1, r2, #5
 8005318:	69fa      	ldr	r2, [r7, #28]
 800531a:	440a      	add	r2, r1
 800531c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005320:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005324:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	015a      	lsls	r2, r3, #5
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	4413      	add	r3, r2
 800532e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005332:	691b      	ldr	r3, [r3, #16]
 8005334:	69ba      	ldr	r2, [r7, #24]
 8005336:	0151      	lsls	r1, r2, #5
 8005338:	69fa      	ldr	r2, [r7, #28]
 800533a:	440a      	add	r2, r1
 800533c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005340:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005344:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005346:	79fb      	ldrb	r3, [r7, #7]
 8005348:	2b01      	cmp	r3, #1
 800534a:	d14b      	bne.n	80053e4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	695b      	ldr	r3, [r3, #20]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d009      	beq.n	8005368 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	015a      	lsls	r2, r3, #5
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	4413      	add	r3, r2
 800535c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005360:	461a      	mov	r2, r3
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	791b      	ldrb	r3, [r3, #4]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d128      	bne.n	80053c2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800537c:	2b00      	cmp	r3, #0
 800537e:	d110      	bne.n	80053a2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	015a      	lsls	r2, r3, #5
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	4413      	add	r3, r2
 8005388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	69ba      	ldr	r2, [r7, #24]
 8005390:	0151      	lsls	r1, r2, #5
 8005392:	69fa      	ldr	r2, [r7, #28]
 8005394:	440a      	add	r2, r1
 8005396:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800539a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800539e:	6013      	str	r3, [r2, #0]
 80053a0:	e00f      	b.n	80053c2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	015a      	lsls	r2, r3, #5
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	4413      	add	r3, r2
 80053aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	69ba      	ldr	r2, [r7, #24]
 80053b2:	0151      	lsls	r1, r2, #5
 80053b4:	69fa      	ldr	r2, [r7, #28]
 80053b6:	440a      	add	r2, r1
 80053b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053c0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	015a      	lsls	r2, r3, #5
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	4413      	add	r3, r2
 80053ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	69ba      	ldr	r2, [r7, #24]
 80053d2:	0151      	lsls	r1, r2, #5
 80053d4:	69fa      	ldr	r2, [r7, #28]
 80053d6:	440a      	add	r2, r1
 80053d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053e0:	6013      	str	r3, [r2, #0]
 80053e2:	e133      	b.n	800564c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	015a      	lsls	r2, r3, #5
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	4413      	add	r3, r2
 80053ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	69ba      	ldr	r2, [r7, #24]
 80053f4:	0151      	lsls	r1, r2, #5
 80053f6:	69fa      	ldr	r2, [r7, #28]
 80053f8:	440a      	add	r2, r1
 80053fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005402:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	791b      	ldrb	r3, [r3, #4]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d015      	beq.n	8005438 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	2b00      	cmp	r3, #0
 8005412:	f000 811b 	beq.w	800564c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800541c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	f003 030f 	and.w	r3, r3, #15
 8005426:	2101      	movs	r1, #1
 8005428:	fa01 f303 	lsl.w	r3, r1, r3
 800542c:	69f9      	ldr	r1, [r7, #28]
 800542e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005432:	4313      	orrs	r3, r2
 8005434:	634b      	str	r3, [r1, #52]	; 0x34
 8005436:	e109      	b.n	800564c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005444:	2b00      	cmp	r3, #0
 8005446:	d110      	bne.n	800546a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	015a      	lsls	r2, r3, #5
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	4413      	add	r3, r2
 8005450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	69ba      	ldr	r2, [r7, #24]
 8005458:	0151      	lsls	r1, r2, #5
 800545a:	69fa      	ldr	r2, [r7, #28]
 800545c:	440a      	add	r2, r1
 800545e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005462:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005466:	6013      	str	r3, [r2, #0]
 8005468:	e00f      	b.n	800548a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	015a      	lsls	r2, r3, #5
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	4413      	add	r3, r2
 8005472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	69ba      	ldr	r2, [r7, #24]
 800547a:	0151      	lsls	r1, r2, #5
 800547c:	69fa      	ldr	r2, [r7, #28]
 800547e:	440a      	add	r2, r1
 8005480:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005488:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	6919      	ldr	r1, [r3, #16]
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	781a      	ldrb	r2, [r3, #0]
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	b298      	uxth	r0, r3
 8005498:	79fb      	ldrb	r3, [r7, #7]
 800549a:	9300      	str	r3, [sp, #0]
 800549c:	4603      	mov	r3, r0
 800549e:	68f8      	ldr	r0, [r7, #12]
 80054a0:	f000 fade 	bl	8005a60 <USB_WritePacket>
 80054a4:	e0d2      	b.n	800564c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	015a      	lsls	r2, r3, #5
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	4413      	add	r3, r2
 80054ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	69ba      	ldr	r2, [r7, #24]
 80054b6:	0151      	lsls	r1, r2, #5
 80054b8:	69fa      	ldr	r2, [r7, #28]
 80054ba:	440a      	add	r2, r1
 80054bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054c0:	0cdb      	lsrs	r3, r3, #19
 80054c2:	04db      	lsls	r3, r3, #19
 80054c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	015a      	lsls	r2, r3, #5
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	4413      	add	r3, r2
 80054ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	69ba      	ldr	r2, [r7, #24]
 80054d6:	0151      	lsls	r1, r2, #5
 80054d8:	69fa      	ldr	r2, [r7, #28]
 80054da:	440a      	add	r2, r1
 80054dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80054e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80054e8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d126      	bne.n	8005540 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	015a      	lsls	r2, r3, #5
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	4413      	add	r3, r2
 80054fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054fe:	691a      	ldr	r2, [r3, #16]
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005508:	69b9      	ldr	r1, [r7, #24]
 800550a:	0148      	lsls	r0, r1, #5
 800550c:	69f9      	ldr	r1, [r7, #28]
 800550e:	4401      	add	r1, r0
 8005510:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005514:	4313      	orrs	r3, r2
 8005516:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	015a      	lsls	r2, r3, #5
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	4413      	add	r3, r2
 8005520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	69ba      	ldr	r2, [r7, #24]
 8005528:	0151      	lsls	r1, r2, #5
 800552a:	69fa      	ldr	r2, [r7, #28]
 800552c:	440a      	add	r2, r1
 800552e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005532:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005536:	6113      	str	r3, [r2, #16]
 8005538:	e03a      	b.n	80055b0 <USB_EPStartXfer+0x3e4>
 800553a:	bf00      	nop
 800553c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	699a      	ldr	r2, [r3, #24]
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	4413      	add	r3, r2
 800554a:	1e5a      	subs	r2, r3, #1
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	fbb2 f3f3 	udiv	r3, r2, r3
 8005554:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	8afa      	ldrh	r2, [r7, #22]
 800555c:	fb03 f202 	mul.w	r2, r3, r2
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	015a      	lsls	r2, r3, #5
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	4413      	add	r3, r2
 800556c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005570:	691a      	ldr	r2, [r3, #16]
 8005572:	8afb      	ldrh	r3, [r7, #22]
 8005574:	04d9      	lsls	r1, r3, #19
 8005576:	4b38      	ldr	r3, [pc, #224]	; (8005658 <USB_EPStartXfer+0x48c>)
 8005578:	400b      	ands	r3, r1
 800557a:	69b9      	ldr	r1, [r7, #24]
 800557c:	0148      	lsls	r0, r1, #5
 800557e:	69f9      	ldr	r1, [r7, #28]
 8005580:	4401      	add	r1, r0
 8005582:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005586:	4313      	orrs	r3, r2
 8005588:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	015a      	lsls	r2, r3, #5
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	4413      	add	r3, r2
 8005592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005596:	691a      	ldr	r2, [r3, #16]
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	69db      	ldr	r3, [r3, #28]
 800559c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055a0:	69b9      	ldr	r1, [r7, #24]
 80055a2:	0148      	lsls	r0, r1, #5
 80055a4:	69f9      	ldr	r1, [r7, #28]
 80055a6:	4401      	add	r1, r0
 80055a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80055ac:	4313      	orrs	r3, r2
 80055ae:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80055b0:	79fb      	ldrb	r3, [r7, #7]
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d10d      	bne.n	80055d2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d009      	beq.n	80055d2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	6919      	ldr	r1, [r3, #16]
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	015a      	lsls	r2, r3, #5
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	4413      	add	r3, r2
 80055ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ce:	460a      	mov	r2, r1
 80055d0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	791b      	ldrb	r3, [r3, #4]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d128      	bne.n	800562c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d110      	bne.n	800560c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	015a      	lsls	r2, r3, #5
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	4413      	add	r3, r2
 80055f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	69ba      	ldr	r2, [r7, #24]
 80055fa:	0151      	lsls	r1, r2, #5
 80055fc:	69fa      	ldr	r2, [r7, #28]
 80055fe:	440a      	add	r2, r1
 8005600:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005604:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005608:	6013      	str	r3, [r2, #0]
 800560a:	e00f      	b.n	800562c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	015a      	lsls	r2, r3, #5
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	4413      	add	r3, r2
 8005614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	69ba      	ldr	r2, [r7, #24]
 800561c:	0151      	lsls	r1, r2, #5
 800561e:	69fa      	ldr	r2, [r7, #28]
 8005620:	440a      	add	r2, r1
 8005622:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800562a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	015a      	lsls	r2, r3, #5
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	4413      	add	r3, r2
 8005634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	69ba      	ldr	r2, [r7, #24]
 800563c:	0151      	lsls	r1, r2, #5
 800563e:	69fa      	ldr	r2, [r7, #28]
 8005640:	440a      	add	r2, r1
 8005642:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005646:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800564a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3720      	adds	r7, #32
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	1ff80000 	.word	0x1ff80000

0800565c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800565c:	b480      	push	{r7}
 800565e:	b087      	sub	sp, #28
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	4613      	mov	r3, r2
 8005668:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	785b      	ldrb	r3, [r3, #1]
 8005678:	2b01      	cmp	r3, #1
 800567a:	f040 80ce 	bne.w	800581a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d132      	bne.n	80056ec <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	015a      	lsls	r2, r3, #5
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	4413      	add	r3, r2
 800568e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	0151      	lsls	r1, r2, #5
 8005698:	697a      	ldr	r2, [r7, #20]
 800569a:	440a      	add	r2, r1
 800569c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	015a      	lsls	r2, r3, #5
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	4413      	add	r3, r2
 80056b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	0151      	lsls	r1, r2, #5
 80056bc:	697a      	ldr	r2, [r7, #20]
 80056be:	440a      	add	r2, r1
 80056c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	015a      	lsls	r2, r3, #5
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	4413      	add	r3, r2
 80056d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	693a      	ldr	r2, [r7, #16]
 80056da:	0151      	lsls	r1, r2, #5
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	440a      	add	r2, r1
 80056e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056e4:	0cdb      	lsrs	r3, r3, #19
 80056e6:	04db      	lsls	r3, r3, #19
 80056e8:	6113      	str	r3, [r2, #16]
 80056ea:	e04e      	b.n	800578a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	015a      	lsls	r2, r3, #5
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	4413      	add	r3, r2
 80056f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	0151      	lsls	r1, r2, #5
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	440a      	add	r2, r1
 8005702:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005706:	0cdb      	lsrs	r3, r3, #19
 8005708:	04db      	lsls	r3, r3, #19
 800570a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	015a      	lsls	r2, r3, #5
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	4413      	add	r3, r2
 8005714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	0151      	lsls	r1, r2, #5
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	440a      	add	r2, r1
 8005722:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005726:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800572a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800572e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	699a      	ldr	r2, [r3, #24]
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	429a      	cmp	r2, r3
 800573a:	d903      	bls.n	8005744 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	68da      	ldr	r2, [r3, #12]
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	015a      	lsls	r2, r3, #5
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	4413      	add	r3, r2
 800574c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	0151      	lsls	r1, r2, #5
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	440a      	add	r2, r1
 800575a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800575e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005762:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	015a      	lsls	r2, r3, #5
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	4413      	add	r3, r2
 800576c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005770:	691a      	ldr	r2, [r3, #16]
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800577a:	6939      	ldr	r1, [r7, #16]
 800577c:	0148      	lsls	r0, r1, #5
 800577e:	6979      	ldr	r1, [r7, #20]
 8005780:	4401      	add	r1, r0
 8005782:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005786:	4313      	orrs	r3, r2
 8005788:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800578a:	79fb      	ldrb	r3, [r7, #7]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d11e      	bne.n	80057ce <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	695b      	ldr	r3, [r3, #20]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d009      	beq.n	80057ac <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	015a      	lsls	r2, r3, #5
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	4413      	add	r3, r2
 80057a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a4:	461a      	mov	r2, r3
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	695b      	ldr	r3, [r3, #20]
 80057aa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	015a      	lsls	r2, r3, #5
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	4413      	add	r3, r2
 80057b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	0151      	lsls	r1, r2, #5
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	440a      	add	r2, r1
 80057c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057ca:	6013      	str	r3, [r2, #0]
 80057cc:	e097      	b.n	80058fe <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	015a      	lsls	r2, r3, #5
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	4413      	add	r3, r2
 80057d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	0151      	lsls	r1, r2, #5
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	440a      	add	r2, r1
 80057e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057ec:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	f000 8083 	beq.w	80058fe <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	f003 030f 	and.w	r3, r3, #15
 8005808:	2101      	movs	r1, #1
 800580a:	fa01 f303 	lsl.w	r3, r1, r3
 800580e:	6979      	ldr	r1, [r7, #20]
 8005810:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005814:	4313      	orrs	r3, r2
 8005816:	634b      	str	r3, [r1, #52]	; 0x34
 8005818:	e071      	b.n	80058fe <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	015a      	lsls	r2, r3, #5
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	4413      	add	r3, r2
 8005822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	0151      	lsls	r1, r2, #5
 800582c:	697a      	ldr	r2, [r7, #20]
 800582e:	440a      	add	r2, r1
 8005830:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005834:	0cdb      	lsrs	r3, r3, #19
 8005836:	04db      	lsls	r3, r3, #19
 8005838:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	015a      	lsls	r2, r3, #5
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	4413      	add	r3, r2
 8005842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	693a      	ldr	r2, [r7, #16]
 800584a:	0151      	lsls	r1, r2, #5
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	440a      	add	r2, r1
 8005850:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005854:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005858:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800585c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d003      	beq.n	800586e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	68da      	ldr	r2, [r3, #12]
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	68da      	ldr	r2, [r3, #12]
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	015a      	lsls	r2, r3, #5
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	4413      	add	r3, r2
 800587e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	693a      	ldr	r2, [r7, #16]
 8005886:	0151      	lsls	r1, r2, #5
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	440a      	add	r2, r1
 800588c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005890:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005894:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	015a      	lsls	r2, r3, #5
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	4413      	add	r3, r2
 800589e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058a2:	691a      	ldr	r2, [r3, #16]
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	69db      	ldr	r3, [r3, #28]
 80058a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058ac:	6939      	ldr	r1, [r7, #16]
 80058ae:	0148      	lsls	r0, r1, #5
 80058b0:	6979      	ldr	r1, [r7, #20]
 80058b2:	4401      	add	r1, r0
 80058b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80058b8:	4313      	orrs	r3, r2
 80058ba:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80058bc:	79fb      	ldrb	r3, [r7, #7]
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d10d      	bne.n	80058de <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d009      	beq.n	80058de <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	6919      	ldr	r1, [r3, #16]
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	015a      	lsls	r2, r3, #5
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	4413      	add	r3, r2
 80058d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058da:	460a      	mov	r2, r1
 80058dc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	015a      	lsls	r2, r3, #5
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	4413      	add	r3, r2
 80058e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	0151      	lsls	r1, r2, #5
 80058f0:	697a      	ldr	r2, [r7, #20]
 80058f2:	440a      	add	r2, r1
 80058f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058fc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	371c      	adds	r7, #28
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800590c:	b480      	push	{r7}
 800590e:	b087      	sub	sp, #28
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005916:	2300      	movs	r3, #0
 8005918:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800591a:	2300      	movs	r3, #0
 800591c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	785b      	ldrb	r3, [r3, #1]
 8005926:	2b01      	cmp	r3, #1
 8005928:	d14a      	bne.n	80059c0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	015a      	lsls	r2, r3, #5
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	4413      	add	r3, r2
 8005934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800593e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005942:	f040 8086 	bne.w	8005a52 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	015a      	lsls	r2, r3, #5
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	4413      	add	r3, r2
 8005950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	683a      	ldr	r2, [r7, #0]
 8005958:	7812      	ldrb	r2, [r2, #0]
 800595a:	0151      	lsls	r1, r2, #5
 800595c:	693a      	ldr	r2, [r7, #16]
 800595e:	440a      	add	r2, r1
 8005960:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005964:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005968:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	015a      	lsls	r2, r3, #5
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	4413      	add	r3, r2
 8005974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	683a      	ldr	r2, [r7, #0]
 800597c:	7812      	ldrb	r2, [r2, #0]
 800597e:	0151      	lsls	r1, r2, #5
 8005980:	693a      	ldr	r2, [r7, #16]
 8005982:	440a      	add	r2, r1
 8005984:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005988:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800598c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	3301      	adds	r3, #1
 8005992:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f242 7210 	movw	r2, #10000	; 0x2710
 800599a:	4293      	cmp	r3, r2
 800599c:	d902      	bls.n	80059a4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	75fb      	strb	r3, [r7, #23]
          break;
 80059a2:	e056      	b.n	8005a52 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	015a      	lsls	r2, r3, #5
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	4413      	add	r3, r2
 80059ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059bc:	d0e7      	beq.n	800598e <USB_EPStopXfer+0x82>
 80059be:	e048      	b.n	8005a52 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	015a      	lsls	r2, r3, #5
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	4413      	add	r3, r2
 80059ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059d8:	d13b      	bne.n	8005a52 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	015a      	lsls	r2, r3, #5
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	4413      	add	r3, r2
 80059e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	683a      	ldr	r2, [r7, #0]
 80059ec:	7812      	ldrb	r2, [r2, #0]
 80059ee:	0151      	lsls	r1, r2, #5
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	440a      	add	r2, r1
 80059f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80059fc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	015a      	lsls	r2, r3, #5
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	4413      	add	r3, r2
 8005a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	683a      	ldr	r2, [r7, #0]
 8005a10:	7812      	ldrb	r2, [r2, #0]
 8005a12:	0151      	lsls	r1, r2, #5
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	440a      	add	r2, r1
 8005a18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a20:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	3301      	adds	r3, #1
 8005a26:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f242 7210 	movw	r2, #10000	; 0x2710
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d902      	bls.n	8005a38 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	75fb      	strb	r3, [r7, #23]
          break;
 8005a36:	e00c      	b.n	8005a52 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	015a      	lsls	r2, r3, #5
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	4413      	add	r3, r2
 8005a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a50:	d0e7      	beq.n	8005a22 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005a52:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	371c      	adds	r7, #28
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b089      	sub	sp, #36	; 0x24
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	4611      	mov	r1, r2
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	460b      	mov	r3, r1
 8005a70:	71fb      	strb	r3, [r7, #7]
 8005a72:	4613      	mov	r3, r2
 8005a74:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005a7e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d123      	bne.n	8005ace <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005a86:	88bb      	ldrh	r3, [r7, #4]
 8005a88:	3303      	adds	r3, #3
 8005a8a:	089b      	lsrs	r3, r3, #2
 8005a8c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005a8e:	2300      	movs	r3, #0
 8005a90:	61bb      	str	r3, [r7, #24]
 8005a92:	e018      	b.n	8005ac6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005a94:	79fb      	ldrb	r3, [r7, #7]
 8005a96:	031a      	lsls	r2, r3, #12
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	3301      	adds	r3, #1
 8005aac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	3301      	adds	r3, #1
 8005abe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	61bb      	str	r3, [r7, #24]
 8005ac6:	69ba      	ldr	r2, [r7, #24]
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d3e2      	bcc.n	8005a94 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3724      	adds	r7, #36	; 0x24
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b08b      	sub	sp, #44	; 0x2c
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005af2:	88fb      	ldrh	r3, [r7, #6]
 8005af4:	089b      	lsrs	r3, r3, #2
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005afa:	88fb      	ldrh	r3, [r7, #6]
 8005afc:	f003 0303 	and.w	r3, r3, #3
 8005b00:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005b02:	2300      	movs	r3, #0
 8005b04:	623b      	str	r3, [r7, #32]
 8005b06:	e014      	b.n	8005b32 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b12:	601a      	str	r2, [r3, #0]
    pDest++;
 8005b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b16:	3301      	adds	r3, #1
 8005b18:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b22:	3301      	adds	r3, #1
 8005b24:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b28:	3301      	adds	r3, #1
 8005b2a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005b2c:	6a3b      	ldr	r3, [r7, #32]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	623b      	str	r3, [r7, #32]
 8005b32:	6a3a      	ldr	r2, [r7, #32]
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d3e6      	bcc.n	8005b08 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005b3a:	8bfb      	ldrh	r3, [r7, #30]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d01e      	beq.n	8005b7e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005b40:	2300      	movs	r3, #0
 8005b42:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	f107 0310 	add.w	r3, r7, #16
 8005b50:	6812      	ldr	r2, [r2, #0]
 8005b52:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	6a3b      	ldr	r3, [r7, #32]
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	00db      	lsls	r3, r3, #3
 8005b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b60:	b2da      	uxtb	r2, r3
 8005b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b64:	701a      	strb	r2, [r3, #0]
      i++;
 8005b66:	6a3b      	ldr	r3, [r7, #32]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	623b      	str	r3, [r7, #32]
      pDest++;
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6e:	3301      	adds	r3, #1
 8005b70:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005b72:	8bfb      	ldrh	r3, [r7, #30]
 8005b74:	3b01      	subs	r3, #1
 8005b76:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005b78:	8bfb      	ldrh	r3, [r7, #30]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d1ea      	bne.n	8005b54 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	372c      	adds	r7, #44	; 0x2c
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	785b      	ldrb	r3, [r3, #1]
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d12c      	bne.n	8005c02 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	015a      	lsls	r2, r3, #5
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	4413      	add	r3, r2
 8005bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	db12      	blt.n	8005be0 <USB_EPSetStall+0x54>
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00f      	beq.n	8005be0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	015a      	lsls	r2, r3, #5
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68ba      	ldr	r2, [r7, #8]
 8005bd0:	0151      	lsls	r1, r2, #5
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	440a      	add	r2, r1
 8005bd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bda:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005bde:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	015a      	lsls	r2, r3, #5
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	4413      	add	r3, r2
 8005be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68ba      	ldr	r2, [r7, #8]
 8005bf0:	0151      	lsls	r1, r2, #5
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	440a      	add	r2, r1
 8005bf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bfa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005bfe:	6013      	str	r3, [r2, #0]
 8005c00:	e02b      	b.n	8005c5a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	015a      	lsls	r2, r3, #5
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	4413      	add	r3, r2
 8005c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	db12      	blt.n	8005c3a <USB_EPSetStall+0xae>
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00f      	beq.n	8005c3a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	015a      	lsls	r2, r3, #5
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	4413      	add	r3, r2
 8005c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68ba      	ldr	r2, [r7, #8]
 8005c2a:	0151      	lsls	r1, r2, #5
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	440a      	add	r2, r1
 8005c30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c34:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c38:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	015a      	lsls	r2, r3, #5
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	4413      	add	r3, r2
 8005c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	0151      	lsls	r1, r2, #5
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	440a      	add	r2, r1
 8005c50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c58:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c5a:	2300      	movs	r3, #0
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3714      	adds	r7, #20
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	785b      	ldrb	r3, [r3, #1]
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d128      	bne.n	8005cd6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	015a      	lsls	r2, r3, #5
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68ba      	ldr	r2, [r7, #8]
 8005c94:	0151      	lsls	r1, r2, #5
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	440a      	add	r2, r1
 8005c9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ca2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	791b      	ldrb	r3, [r3, #4]
 8005ca8:	2b03      	cmp	r3, #3
 8005caa:	d003      	beq.n	8005cb4 <USB_EPClearStall+0x4c>
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	791b      	ldrb	r3, [r3, #4]
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d138      	bne.n	8005d26 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	015a      	lsls	r2, r3, #5
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	4413      	add	r3, r2
 8005cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	0151      	lsls	r1, r2, #5
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	440a      	add	r2, r1
 8005cca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cd2:	6013      	str	r3, [r2, #0]
 8005cd4:	e027      	b.n	8005d26 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	015a      	lsls	r2, r3, #5
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	4413      	add	r3, r2
 8005cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68ba      	ldr	r2, [r7, #8]
 8005ce6:	0151      	lsls	r1, r2, #5
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	440a      	add	r2, r1
 8005cec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cf0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005cf4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	791b      	ldrb	r3, [r3, #4]
 8005cfa:	2b03      	cmp	r3, #3
 8005cfc:	d003      	beq.n	8005d06 <USB_EPClearStall+0x9e>
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	791b      	ldrb	r3, [r3, #4]
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d10f      	bne.n	8005d26 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	015a      	lsls	r2, r3, #5
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68ba      	ldr	r2, [r7, #8]
 8005d16:	0151      	lsls	r1, r2, #5
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	440a      	add	r2, r1
 8005d1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d24:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3714      	adds	r7, #20
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d52:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005d56:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	78fb      	ldrb	r3, [r7, #3]
 8005d62:	011b      	lsls	r3, r3, #4
 8005d64:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005d68:	68f9      	ldr	r1, [r7, #12]
 8005d6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3714      	adds	r7, #20
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005d9a:	f023 0303 	bic.w	r3, r3, #3
 8005d9e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005dae:	f023 0302 	bic.w	r3, r3, #2
 8005db2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3714      	adds	r7, #20
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005dc2:	b480      	push	{r7}
 8005dc4:	b085      	sub	sp, #20
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005ddc:	f023 0303 	bic.w	r3, r3, #3
 8005de0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005df0:	f043 0302 	orr.w	r3, r3, #2
 8005df4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3714      	adds	r7, #20
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	695b      	ldr	r3, [r3, #20]
 8005e10:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	4013      	ands	r3, r2
 8005e1a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3714      	adds	r7, #20
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr

08005e2a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b085      	sub	sp, #20
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e3c:	699b      	ldr	r3, [r3, #24]
 8005e3e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e46:	69db      	ldr	r3, [r3, #28]
 8005e48:	68ba      	ldr	r2, [r7, #8]
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	0c1b      	lsrs	r3, r3, #16
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3714      	adds	r7, #20
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr

08005e5e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e5e:	b480      	push	{r7}
 8005e60:	b085      	sub	sp, #20
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e70:	699b      	ldr	r3, [r3, #24]
 8005e72:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e7a:	69db      	ldr	r3, [r3, #28]
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	4013      	ands	r3, r2
 8005e80:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	b29b      	uxth	r3, r3
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3714      	adds	r7, #20
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr

08005e92 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005e92:	b480      	push	{r7}
 8005e94:	b085      	sub	sp, #20
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005ea2:	78fb      	ldrb	r3, [r7, #3]
 8005ea4:	015a      	lsls	r2, r3, #5
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	68ba      	ldr	r2, [r7, #8]
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005ec0:	68bb      	ldr	r3, [r7, #8]
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3714      	adds	r7, #20
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr

08005ece <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005ece:	b480      	push	{r7}
 8005ed0:	b087      	sub	sp, #28
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ef0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005ef2:	78fb      	ldrb	r3, [r7, #3]
 8005ef4:	f003 030f 	and.w	r3, r3, #15
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	fa22 f303 	lsr.w	r3, r2, r3
 8005efe:	01db      	lsls	r3, r3, #7
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005f08:	78fb      	ldrb	r3, [r7, #3]
 8005f0a:	015a      	lsls	r2, r3, #5
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	4413      	add	r3, r2
 8005f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	693a      	ldr	r2, [r7, #16]
 8005f18:	4013      	ands	r3, r2
 8005f1a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005f1c:	68bb      	ldr	r3, [r7, #8]
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	371c      	adds	r7, #28
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr

08005f2a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005f2a:	b480      	push	{r7}
 8005f2c:	b083      	sub	sp, #12
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	f003 0301 	and.w	r3, r3, #1
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	370c      	adds	r7, #12
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr

08005f46 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005f46:	b480      	push	{r7}
 8005f48:	b085      	sub	sp, #20
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f60:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005f64:	f023 0307 	bic.w	r3, r3, #7
 8005f68:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f7e:	2300      	movs	r3, #0
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3714      	adds	r7, #20
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b087      	sub	sp, #28
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	460b      	mov	r3, r1
 8005f96:	607a      	str	r2, [r7, #4]
 8005f98:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	333c      	adds	r3, #60	; 0x3c
 8005fa2:	3304      	adds	r3, #4
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	4a26      	ldr	r2, [pc, #152]	; (8006044 <USB_EP0_OutStart+0xb8>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d90a      	bls.n	8005fc6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fc0:	d101      	bne.n	8005fc6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	e037      	b.n	8006036 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fcc:	461a      	mov	r2, r3
 8005fce:	2300      	movs	r3, #0
 8005fd0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	697a      	ldr	r2, [r7, #20]
 8005fdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fe0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fe4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	697a      	ldr	r2, [r7, #20]
 8005ff0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ff4:	f043 0318 	orr.w	r3, r3, #24
 8005ff8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006008:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800600c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800600e:	7afb      	ldrb	r3, [r7, #11]
 8006010:	2b01      	cmp	r3, #1
 8006012:	d10f      	bne.n	8006034 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800601a:	461a      	mov	r2, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	697a      	ldr	r2, [r7, #20]
 800602a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800602e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006032:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	371c      	adds	r7, #28
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr
 8006042:	bf00      	nop
 8006044:	4f54300a 	.word	0x4f54300a

08006048 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006048:	b480      	push	{r7}
 800604a:	b085      	sub	sp, #20
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006050:	2300      	movs	r3, #0
 8006052:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	3301      	adds	r3, #1
 8006058:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	4a13      	ldr	r2, [pc, #76]	; (80060ac <USB_CoreReset+0x64>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d901      	bls.n	8006066 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e01b      	b.n	800609e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	2b00      	cmp	r3, #0
 800606c:	daf2      	bge.n	8006054 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800606e:	2300      	movs	r3, #0
 8006070:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	f043 0201 	orr.w	r2, r3, #1
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	3301      	adds	r3, #1
 8006082:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	4a09      	ldr	r2, [pc, #36]	; (80060ac <USB_CoreReset+0x64>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d901      	bls.n	8006090 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800608c:	2303      	movs	r3, #3
 800608e:	e006      	b.n	800609e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	f003 0301 	and.w	r3, r3, #1
 8006098:	2b01      	cmp	r3, #1
 800609a:	d0f0      	beq.n	800607e <USB_CoreReset+0x36>

  return HAL_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3714      	adds	r7, #20
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	00030d40 	.word	0x00030d40

080060b0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	460b      	mov	r3, r1
 80060ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80060bc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80060c0:	f005 fa6c 	bl	800b59c <USBD_static_malloc>
 80060c4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d109      	bne.n	80060e0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	32b0      	adds	r2, #176	; 0xb0
 80060d6:	2100      	movs	r1, #0
 80060d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80060dc:	2302      	movs	r3, #2
 80060de:	e0d4      	b.n	800628a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80060e0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80060e4:	2100      	movs	r1, #0
 80060e6:	68f8      	ldr	r0, [r7, #12]
 80060e8:	f005 fad0 	bl	800b68c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	32b0      	adds	r2, #176	; 0xb0
 80060f6:	68f9      	ldr	r1, [r7, #12]
 80060f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	32b0      	adds	r2, #176	; 0xb0
 8006106:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	7c1b      	ldrb	r3, [r3, #16]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d138      	bne.n	800618a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006118:	4b5e      	ldr	r3, [pc, #376]	; (8006294 <USBD_CDC_Init+0x1e4>)
 800611a:	7819      	ldrb	r1, [r3, #0]
 800611c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006120:	2202      	movs	r2, #2
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f005 f917 	bl	800b356 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006128:	4b5a      	ldr	r3, [pc, #360]	; (8006294 <USBD_CDC_Init+0x1e4>)
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	f003 020f 	and.w	r2, r3, #15
 8006130:	6879      	ldr	r1, [r7, #4]
 8006132:	4613      	mov	r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4413      	add	r3, r2
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	440b      	add	r3, r1
 800613c:	3324      	adds	r3, #36	; 0x24
 800613e:	2201      	movs	r2, #1
 8006140:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006142:	4b55      	ldr	r3, [pc, #340]	; (8006298 <USBD_CDC_Init+0x1e8>)
 8006144:	7819      	ldrb	r1, [r3, #0]
 8006146:	f44f 7300 	mov.w	r3, #512	; 0x200
 800614a:	2202      	movs	r2, #2
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f005 f902 	bl	800b356 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006152:	4b51      	ldr	r3, [pc, #324]	; (8006298 <USBD_CDC_Init+0x1e8>)
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	f003 020f 	and.w	r2, r3, #15
 800615a:	6879      	ldr	r1, [r7, #4]
 800615c:	4613      	mov	r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4413      	add	r3, r2
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	440b      	add	r3, r1
 8006166:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800616a:	2201      	movs	r2, #1
 800616c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800616e:	4b4b      	ldr	r3, [pc, #300]	; (800629c <USBD_CDC_Init+0x1ec>)
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	f003 020f 	and.w	r2, r3, #15
 8006176:	6879      	ldr	r1, [r7, #4]
 8006178:	4613      	mov	r3, r2
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	4413      	add	r3, r2
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	440b      	add	r3, r1
 8006182:	3326      	adds	r3, #38	; 0x26
 8006184:	2210      	movs	r2, #16
 8006186:	801a      	strh	r2, [r3, #0]
 8006188:	e035      	b.n	80061f6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800618a:	4b42      	ldr	r3, [pc, #264]	; (8006294 <USBD_CDC_Init+0x1e4>)
 800618c:	7819      	ldrb	r1, [r3, #0]
 800618e:	2340      	movs	r3, #64	; 0x40
 8006190:	2202      	movs	r2, #2
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f005 f8df 	bl	800b356 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006198:	4b3e      	ldr	r3, [pc, #248]	; (8006294 <USBD_CDC_Init+0x1e4>)
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	f003 020f 	and.w	r2, r3, #15
 80061a0:	6879      	ldr	r1, [r7, #4]
 80061a2:	4613      	mov	r3, r2
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	4413      	add	r3, r2
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	440b      	add	r3, r1
 80061ac:	3324      	adds	r3, #36	; 0x24
 80061ae:	2201      	movs	r2, #1
 80061b0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80061b2:	4b39      	ldr	r3, [pc, #228]	; (8006298 <USBD_CDC_Init+0x1e8>)
 80061b4:	7819      	ldrb	r1, [r3, #0]
 80061b6:	2340      	movs	r3, #64	; 0x40
 80061b8:	2202      	movs	r2, #2
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f005 f8cb 	bl	800b356 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80061c0:	4b35      	ldr	r3, [pc, #212]	; (8006298 <USBD_CDC_Init+0x1e8>)
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	f003 020f 	and.w	r2, r3, #15
 80061c8:	6879      	ldr	r1, [r7, #4]
 80061ca:	4613      	mov	r3, r2
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	4413      	add	r3, r2
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	440b      	add	r3, r1
 80061d4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80061d8:	2201      	movs	r2, #1
 80061da:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80061dc:	4b2f      	ldr	r3, [pc, #188]	; (800629c <USBD_CDC_Init+0x1ec>)
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	f003 020f 	and.w	r2, r3, #15
 80061e4:	6879      	ldr	r1, [r7, #4]
 80061e6:	4613      	mov	r3, r2
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	4413      	add	r3, r2
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	440b      	add	r3, r1
 80061f0:	3326      	adds	r3, #38	; 0x26
 80061f2:	2210      	movs	r2, #16
 80061f4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80061f6:	4b29      	ldr	r3, [pc, #164]	; (800629c <USBD_CDC_Init+0x1ec>)
 80061f8:	7819      	ldrb	r1, [r3, #0]
 80061fa:	2308      	movs	r3, #8
 80061fc:	2203      	movs	r2, #3
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f005 f8a9 	bl	800b356 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006204:	4b25      	ldr	r3, [pc, #148]	; (800629c <USBD_CDC_Init+0x1ec>)
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	f003 020f 	and.w	r2, r3, #15
 800620c:	6879      	ldr	r1, [r7, #4]
 800620e:	4613      	mov	r3, r2
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	4413      	add	r3, r2
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	440b      	add	r3, r1
 8006218:	3324      	adds	r3, #36	; 0x24
 800621a:	2201      	movs	r2, #1
 800621c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2200      	movs	r2, #0
 8006222:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	33b0      	adds	r3, #176	; 0xb0
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	4413      	add	r3, r2
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2200      	movs	r2, #0
 800623e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006250:	2b00      	cmp	r3, #0
 8006252:	d101      	bne.n	8006258 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006254:	2302      	movs	r3, #2
 8006256:	e018      	b.n	800628a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	7c1b      	ldrb	r3, [r3, #16]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d10a      	bne.n	8006276 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006260:	4b0d      	ldr	r3, [pc, #52]	; (8006298 <USBD_CDC_Init+0x1e8>)
 8006262:	7819      	ldrb	r1, [r3, #0]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800626a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f005 f960 	bl	800b534 <USBD_LL_PrepareReceive>
 8006274:	e008      	b.n	8006288 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006276:	4b08      	ldr	r3, [pc, #32]	; (8006298 <USBD_CDC_Init+0x1e8>)
 8006278:	7819      	ldrb	r1, [r3, #0]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006280:	2340      	movs	r3, #64	; 0x40
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f005 f956 	bl	800b534 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	3710      	adds	r7, #16
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	20000093 	.word	0x20000093
 8006298:	20000094 	.word	0x20000094
 800629c:	20000095 	.word	0x20000095

080062a0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	460b      	mov	r3, r1
 80062aa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80062ac:	4b3a      	ldr	r3, [pc, #232]	; (8006398 <USBD_CDC_DeInit+0xf8>)
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	4619      	mov	r1, r3
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f005 f875 	bl	800b3a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80062b8:	4b37      	ldr	r3, [pc, #220]	; (8006398 <USBD_CDC_DeInit+0xf8>)
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	f003 020f 	and.w	r2, r3, #15
 80062c0:	6879      	ldr	r1, [r7, #4]
 80062c2:	4613      	mov	r3, r2
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	4413      	add	r3, r2
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	440b      	add	r3, r1
 80062cc:	3324      	adds	r3, #36	; 0x24
 80062ce:	2200      	movs	r2, #0
 80062d0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80062d2:	4b32      	ldr	r3, [pc, #200]	; (800639c <USBD_CDC_DeInit+0xfc>)
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	4619      	mov	r1, r3
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f005 f862 	bl	800b3a2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80062de:	4b2f      	ldr	r3, [pc, #188]	; (800639c <USBD_CDC_DeInit+0xfc>)
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	f003 020f 	and.w	r2, r3, #15
 80062e6:	6879      	ldr	r1, [r7, #4]
 80062e8:	4613      	mov	r3, r2
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	4413      	add	r3, r2
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	440b      	add	r3, r1
 80062f2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80062f6:	2200      	movs	r2, #0
 80062f8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80062fa:	4b29      	ldr	r3, [pc, #164]	; (80063a0 <USBD_CDC_DeInit+0x100>)
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	4619      	mov	r1, r3
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f005 f84e 	bl	800b3a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006306:	4b26      	ldr	r3, [pc, #152]	; (80063a0 <USBD_CDC_DeInit+0x100>)
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	f003 020f 	and.w	r2, r3, #15
 800630e:	6879      	ldr	r1, [r7, #4]
 8006310:	4613      	mov	r3, r2
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	4413      	add	r3, r2
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	440b      	add	r3, r1
 800631a:	3324      	adds	r3, #36	; 0x24
 800631c:	2200      	movs	r2, #0
 800631e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006320:	4b1f      	ldr	r3, [pc, #124]	; (80063a0 <USBD_CDC_DeInit+0x100>)
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	f003 020f 	and.w	r2, r3, #15
 8006328:	6879      	ldr	r1, [r7, #4]
 800632a:	4613      	mov	r3, r2
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	4413      	add	r3, r2
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	440b      	add	r3, r1
 8006334:	3326      	adds	r3, #38	; 0x26
 8006336:	2200      	movs	r2, #0
 8006338:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	32b0      	adds	r2, #176	; 0xb0
 8006344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d01f      	beq.n	800638c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	33b0      	adds	r3, #176	; 0xb0
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	4413      	add	r3, r2
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	32b0      	adds	r2, #176	; 0xb0
 800636a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800636e:	4618      	mov	r0, r3
 8006370:	f005 f922 	bl	800b5b8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	32b0      	adds	r2, #176	; 0xb0
 800637e:	2100      	movs	r1, #0
 8006380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3708      	adds	r7, #8
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	20000093 	.word	0x20000093
 800639c:	20000094 	.word	0x20000094
 80063a0:	20000095 	.word	0x20000095

080063a4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b086      	sub	sp, #24
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	32b0      	adds	r2, #176	; 0xb0
 80063b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063bc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80063be:	2300      	movs	r3, #0
 80063c0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80063c2:	2300      	movs	r3, #0
 80063c4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80063c6:	2300      	movs	r3, #0
 80063c8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d101      	bne.n	80063d4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e0bf      	b.n	8006554 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d050      	beq.n	8006482 <USBD_CDC_Setup+0xde>
 80063e0:	2b20      	cmp	r3, #32
 80063e2:	f040 80af 	bne.w	8006544 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	88db      	ldrh	r3, [r3, #6]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d03a      	beq.n	8006464 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	b25b      	sxtb	r3, r3
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	da1b      	bge.n	8006430 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	33b0      	adds	r3, #176	; 0xb0
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	4413      	add	r3, r2
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	683a      	ldr	r2, [r7, #0]
 800640c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800640e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006410:	683a      	ldr	r2, [r7, #0]
 8006412:	88d2      	ldrh	r2, [r2, #6]
 8006414:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	88db      	ldrh	r3, [r3, #6]
 800641a:	2b07      	cmp	r3, #7
 800641c:	bf28      	it	cs
 800641e:	2307      	movcs	r3, #7
 8006420:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	89fa      	ldrh	r2, [r7, #14]
 8006426:	4619      	mov	r1, r3
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f001 fd43 	bl	8007eb4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800642e:	e090      	b.n	8006552 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	785a      	ldrb	r2, [r3, #1]
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	88db      	ldrh	r3, [r3, #6]
 800643e:	2b3f      	cmp	r3, #63	; 0x3f
 8006440:	d803      	bhi.n	800644a <USBD_CDC_Setup+0xa6>
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	88db      	ldrh	r3, [r3, #6]
 8006446:	b2da      	uxtb	r2, r3
 8006448:	e000      	b.n	800644c <USBD_CDC_Setup+0xa8>
 800644a:	2240      	movs	r2, #64	; 0x40
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006452:	6939      	ldr	r1, [r7, #16]
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800645a:	461a      	mov	r2, r3
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f001 fd55 	bl	8007f0c <USBD_CtlPrepareRx>
      break;
 8006462:	e076      	b.n	8006552 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	33b0      	adds	r3, #176	; 0xb0
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	4413      	add	r3, r2
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	683a      	ldr	r2, [r7, #0]
 8006478:	7850      	ldrb	r0, [r2, #1]
 800647a:	2200      	movs	r2, #0
 800647c:	6839      	ldr	r1, [r7, #0]
 800647e:	4798      	blx	r3
      break;
 8006480:	e067      	b.n	8006552 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	785b      	ldrb	r3, [r3, #1]
 8006486:	2b0b      	cmp	r3, #11
 8006488:	d851      	bhi.n	800652e <USBD_CDC_Setup+0x18a>
 800648a:	a201      	add	r2, pc, #4	; (adr r2, 8006490 <USBD_CDC_Setup+0xec>)
 800648c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006490:	080064c1 	.word	0x080064c1
 8006494:	0800653d 	.word	0x0800653d
 8006498:	0800652f 	.word	0x0800652f
 800649c:	0800652f 	.word	0x0800652f
 80064a0:	0800652f 	.word	0x0800652f
 80064a4:	0800652f 	.word	0x0800652f
 80064a8:	0800652f 	.word	0x0800652f
 80064ac:	0800652f 	.word	0x0800652f
 80064b0:	0800652f 	.word	0x0800652f
 80064b4:	0800652f 	.word	0x0800652f
 80064b8:	080064eb 	.word	0x080064eb
 80064bc:	08006515 	.word	0x08006515
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	2b03      	cmp	r3, #3
 80064ca:	d107      	bne.n	80064dc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80064cc:	f107 030a 	add.w	r3, r7, #10
 80064d0:	2202      	movs	r2, #2
 80064d2:	4619      	mov	r1, r3
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f001 fced 	bl	8007eb4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80064da:	e032      	b.n	8006542 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80064dc:	6839      	ldr	r1, [r7, #0]
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f001 fc77 	bl	8007dd2 <USBD_CtlError>
            ret = USBD_FAIL;
 80064e4:	2303      	movs	r3, #3
 80064e6:	75fb      	strb	r3, [r7, #23]
          break;
 80064e8:	e02b      	b.n	8006542 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	2b03      	cmp	r3, #3
 80064f4:	d107      	bne.n	8006506 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80064f6:	f107 030d 	add.w	r3, r7, #13
 80064fa:	2201      	movs	r2, #1
 80064fc:	4619      	mov	r1, r3
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f001 fcd8 	bl	8007eb4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006504:	e01d      	b.n	8006542 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006506:	6839      	ldr	r1, [r7, #0]
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f001 fc62 	bl	8007dd2 <USBD_CtlError>
            ret = USBD_FAIL;
 800650e:	2303      	movs	r3, #3
 8006510:	75fb      	strb	r3, [r7, #23]
          break;
 8006512:	e016      	b.n	8006542 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800651a:	b2db      	uxtb	r3, r3
 800651c:	2b03      	cmp	r3, #3
 800651e:	d00f      	beq.n	8006540 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006520:	6839      	ldr	r1, [r7, #0]
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f001 fc55 	bl	8007dd2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006528:	2303      	movs	r3, #3
 800652a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800652c:	e008      	b.n	8006540 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800652e:	6839      	ldr	r1, [r7, #0]
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f001 fc4e 	bl	8007dd2 <USBD_CtlError>
          ret = USBD_FAIL;
 8006536:	2303      	movs	r3, #3
 8006538:	75fb      	strb	r3, [r7, #23]
          break;
 800653a:	e002      	b.n	8006542 <USBD_CDC_Setup+0x19e>
          break;
 800653c:	bf00      	nop
 800653e:	e008      	b.n	8006552 <USBD_CDC_Setup+0x1ae>
          break;
 8006540:	bf00      	nop
      }
      break;
 8006542:	e006      	b.n	8006552 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006544:	6839      	ldr	r1, [r7, #0]
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f001 fc43 	bl	8007dd2 <USBD_CtlError>
      ret = USBD_FAIL;
 800654c:	2303      	movs	r3, #3
 800654e:	75fb      	strb	r3, [r7, #23]
      break;
 8006550:	bf00      	nop
  }

  return (uint8_t)ret;
 8006552:	7dfb      	ldrb	r3, [r7, #23]
}
 8006554:	4618      	mov	r0, r3
 8006556:	3718      	adds	r7, #24
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	460b      	mov	r3, r1
 8006566:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800656e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	32b0      	adds	r2, #176	; 0xb0
 800657a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d101      	bne.n	8006586 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006582:	2303      	movs	r3, #3
 8006584:	e065      	b.n	8006652 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	32b0      	adds	r2, #176	; 0xb0
 8006590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006594:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006596:	78fb      	ldrb	r3, [r7, #3]
 8006598:	f003 020f 	and.w	r2, r3, #15
 800659c:	6879      	ldr	r1, [r7, #4]
 800659e:	4613      	mov	r3, r2
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	4413      	add	r3, r2
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	440b      	add	r3, r1
 80065a8:	3318      	adds	r3, #24
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d02f      	beq.n	8006610 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80065b0:	78fb      	ldrb	r3, [r7, #3]
 80065b2:	f003 020f 	and.w	r2, r3, #15
 80065b6:	6879      	ldr	r1, [r7, #4]
 80065b8:	4613      	mov	r3, r2
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	4413      	add	r3, r2
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	440b      	add	r3, r1
 80065c2:	3318      	adds	r3, #24
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	78fb      	ldrb	r3, [r7, #3]
 80065c8:	f003 010f 	and.w	r1, r3, #15
 80065cc:	68f8      	ldr	r0, [r7, #12]
 80065ce:	460b      	mov	r3, r1
 80065d0:	00db      	lsls	r3, r3, #3
 80065d2:	440b      	add	r3, r1
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	4403      	add	r3, r0
 80065d8:	3348      	adds	r3, #72	; 0x48
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	fbb2 f1f3 	udiv	r1, r2, r3
 80065e0:	fb01 f303 	mul.w	r3, r1, r3
 80065e4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d112      	bne.n	8006610 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80065ea:	78fb      	ldrb	r3, [r7, #3]
 80065ec:	f003 020f 	and.w	r2, r3, #15
 80065f0:	6879      	ldr	r1, [r7, #4]
 80065f2:	4613      	mov	r3, r2
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	4413      	add	r3, r2
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	440b      	add	r3, r1
 80065fc:	3318      	adds	r3, #24
 80065fe:	2200      	movs	r2, #0
 8006600:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006602:	78f9      	ldrb	r1, [r7, #3]
 8006604:	2300      	movs	r3, #0
 8006606:	2200      	movs	r2, #0
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f004 ff72 	bl	800b4f2 <USBD_LL_Transmit>
 800660e:	e01f      	b.n	8006650 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	2200      	movs	r2, #0
 8006614:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	33b0      	adds	r3, #176	; 0xb0
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	4413      	add	r3, r2
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d010      	beq.n	8006650 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	33b0      	adds	r3, #176	; 0xb0
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	4413      	add	r3, r2
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	68ba      	ldr	r2, [r7, #8]
 8006642:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006646:	68ba      	ldr	r2, [r7, #8]
 8006648:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800664c:	78fa      	ldrb	r2, [r7, #3]
 800664e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3710      	adds	r7, #16
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}

0800665a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800665a:	b580      	push	{r7, lr}
 800665c:	b084      	sub	sp, #16
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
 8006662:	460b      	mov	r3, r1
 8006664:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	32b0      	adds	r2, #176	; 0xb0
 8006670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006674:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	32b0      	adds	r2, #176	; 0xb0
 8006680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d101      	bne.n	800668c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006688:	2303      	movs	r3, #3
 800668a:	e01a      	b.n	80066c2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800668c:	78fb      	ldrb	r3, [r7, #3]
 800668e:	4619      	mov	r1, r3
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f004 ff70 	bl	800b576 <USBD_LL_GetRxDataSize>
 8006696:	4602      	mov	r2, r0
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	33b0      	adds	r3, #176	; 0xb0
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	4413      	add	r3, r2
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80066bc:	4611      	mov	r1, r2
 80066be:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3710      	adds	r7, #16
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b084      	sub	sp, #16
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	32b0      	adds	r2, #176	; 0xb0
 80066dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066e0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d101      	bne.n	80066ec <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80066e8:	2303      	movs	r3, #3
 80066ea:	e025      	b.n	8006738 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	33b0      	adds	r3, #176	; 0xb0
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	4413      	add	r3, r2
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d01a      	beq.n	8006736 <USBD_CDC_EP0_RxReady+0x6c>
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006706:	2bff      	cmp	r3, #255	; 0xff
 8006708:	d015      	beq.n	8006736 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	33b0      	adds	r3, #176	; 0xb0
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	4413      	add	r3, r2
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006722:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800672a:	b292      	uxth	r2, r2
 800672c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	22ff      	movs	r2, #255	; 0xff
 8006732:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006736:	2300      	movs	r3, #0
}
 8006738:	4618      	mov	r0, r3
 800673a:	3710      	adds	r7, #16
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b086      	sub	sp, #24
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006748:	2182      	movs	r1, #130	; 0x82
 800674a:	4818      	ldr	r0, [pc, #96]	; (80067ac <USBD_CDC_GetFSCfgDesc+0x6c>)
 800674c:	f000 fd09 	bl	8007162 <USBD_GetEpDesc>
 8006750:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006752:	2101      	movs	r1, #1
 8006754:	4815      	ldr	r0, [pc, #84]	; (80067ac <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006756:	f000 fd04 	bl	8007162 <USBD_GetEpDesc>
 800675a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800675c:	2181      	movs	r1, #129	; 0x81
 800675e:	4813      	ldr	r0, [pc, #76]	; (80067ac <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006760:	f000 fcff 	bl	8007162 <USBD_GetEpDesc>
 8006764:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d002      	beq.n	8006772 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	2210      	movs	r2, #16
 8006770:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d006      	beq.n	8006786 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	2200      	movs	r2, #0
 800677c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006780:	711a      	strb	r2, [r3, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d006      	beq.n	800679a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2200      	movs	r2, #0
 8006790:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006794:	711a      	strb	r2, [r3, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2243      	movs	r2, #67	; 0x43
 800679e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80067a0:	4b02      	ldr	r3, [pc, #8]	; (80067ac <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3718      	adds	r7, #24
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	20000050 	.word	0x20000050

080067b0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b086      	sub	sp, #24
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80067b8:	2182      	movs	r1, #130	; 0x82
 80067ba:	4818      	ldr	r0, [pc, #96]	; (800681c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80067bc:	f000 fcd1 	bl	8007162 <USBD_GetEpDesc>
 80067c0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80067c2:	2101      	movs	r1, #1
 80067c4:	4815      	ldr	r0, [pc, #84]	; (800681c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80067c6:	f000 fccc 	bl	8007162 <USBD_GetEpDesc>
 80067ca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80067cc:	2181      	movs	r1, #129	; 0x81
 80067ce:	4813      	ldr	r0, [pc, #76]	; (800681c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80067d0:	f000 fcc7 	bl	8007162 <USBD_GetEpDesc>
 80067d4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d002      	beq.n	80067e2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	2210      	movs	r2, #16
 80067e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d006      	beq.n	80067f6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	2200      	movs	r2, #0
 80067ec:	711a      	strb	r2, [r3, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f042 0202 	orr.w	r2, r2, #2
 80067f4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d006      	beq.n	800680a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	711a      	strb	r2, [r3, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	f042 0202 	orr.w	r2, r2, #2
 8006808:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2243      	movs	r2, #67	; 0x43
 800680e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006810:	4b02      	ldr	r3, [pc, #8]	; (800681c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006812:	4618      	mov	r0, r3
 8006814:	3718      	adds	r7, #24
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	20000050 	.word	0x20000050

08006820 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b086      	sub	sp, #24
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006828:	2182      	movs	r1, #130	; 0x82
 800682a:	4818      	ldr	r0, [pc, #96]	; (800688c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800682c:	f000 fc99 	bl	8007162 <USBD_GetEpDesc>
 8006830:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006832:	2101      	movs	r1, #1
 8006834:	4815      	ldr	r0, [pc, #84]	; (800688c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006836:	f000 fc94 	bl	8007162 <USBD_GetEpDesc>
 800683a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800683c:	2181      	movs	r1, #129	; 0x81
 800683e:	4813      	ldr	r0, [pc, #76]	; (800688c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006840:	f000 fc8f 	bl	8007162 <USBD_GetEpDesc>
 8006844:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d002      	beq.n	8006852 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	2210      	movs	r2, #16
 8006850:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d006      	beq.n	8006866 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	2200      	movs	r2, #0
 800685c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006860:	711a      	strb	r2, [r3, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d006      	beq.n	800687a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2200      	movs	r2, #0
 8006870:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006874:	711a      	strb	r2, [r3, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2243      	movs	r2, #67	; 0x43
 800687e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006880:	4b02      	ldr	r3, [pc, #8]	; (800688c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006882:	4618      	mov	r0, r3
 8006884:	3718      	adds	r7, #24
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	20000050 	.word	0x20000050

08006890 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	220a      	movs	r2, #10
 800689c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800689e:	4b03      	ldr	r3, [pc, #12]	; (80068ac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr
 80068ac:	2000000c 	.word	0x2000000c

080068b0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d101      	bne.n	80068c4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80068c0:	2303      	movs	r3, #3
 80068c2:	e009      	b.n	80068d8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	33b0      	adds	r3, #176	; 0xb0
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	4413      	add	r3, r2
 80068d2:	683a      	ldr	r2, [r7, #0]
 80068d4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b087      	sub	sp, #28
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	60b9      	str	r1, [r7, #8]
 80068ee:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	32b0      	adds	r2, #176	; 0xb0
 80068fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068fe:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d101      	bne.n	800690a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006906:	2303      	movs	r3, #3
 8006908:	e008      	b.n	800691c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	68ba      	ldr	r2, [r7, #8]
 800690e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	371c      	adds	r7, #28
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	32b0      	adds	r2, #176	; 0xb0
 800693c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006940:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d101      	bne.n	800694c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006948:	2303      	movs	r3, #3
 800694a:	e004      	b.n	8006956 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	683a      	ldr	r2, [r7, #0]
 8006950:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3714      	adds	r7, #20
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
	...

08006964 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	32b0      	adds	r2, #176	; 0xb0
 8006976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800697a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	32b0      	adds	r2, #176	; 0xb0
 8006986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d101      	bne.n	8006992 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800698e:	2303      	movs	r3, #3
 8006990:	e018      	b.n	80069c4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	7c1b      	ldrb	r3, [r3, #16]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d10a      	bne.n	80069b0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800699a:	4b0c      	ldr	r3, [pc, #48]	; (80069cc <USBD_CDC_ReceivePacket+0x68>)
 800699c:	7819      	ldrb	r1, [r3, #0]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80069a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f004 fdc3 	bl	800b534 <USBD_LL_PrepareReceive>
 80069ae:	e008      	b.n	80069c2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80069b0:	4b06      	ldr	r3, [pc, #24]	; (80069cc <USBD_CDC_ReceivePacket+0x68>)
 80069b2:	7819      	ldrb	r1, [r3, #0]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80069ba:	2340      	movs	r3, #64	; 0x40
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f004 fdb9 	bl	800b534 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80069c2:	2300      	movs	r3, #0
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3710      	adds	r7, #16
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}
 80069cc:	20000094 	.word	0x20000094

080069d0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b086      	sub	sp, #24
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	4613      	mov	r3, r2
 80069dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d101      	bne.n	80069e8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80069e4:	2303      	movs	r3, #3
 80069e6:	e01f      	b.n	8006a28 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d003      	beq.n	8006a0e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	68ba      	ldr	r2, [r7, #8]
 8006a0a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2201      	movs	r2, #1
 8006a12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	79fa      	ldrb	r2, [r7, #7]
 8006a1a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006a1c:	68f8      	ldr	r0, [r7, #12]
 8006a1e:	f004 fc33 	bl	800b288 <USBD_LL_Init>
 8006a22:	4603      	mov	r3, r0
 8006a24:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3718      	adds	r7, #24
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d101      	bne.n	8006a48 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006a44:	2303      	movs	r3, #3
 8006a46:	e025      	b.n	8006a94 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	683a      	ldr	r2, [r7, #0]
 8006a4c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	32ae      	adds	r2, #174	; 0xae
 8006a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d00f      	beq.n	8006a84 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	32ae      	adds	r2, #174	; 0xae
 8006a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a74:	f107 020e 	add.w	r2, r7, #14
 8006a78:	4610      	mov	r0, r2
 8006a7a:	4798      	blx	r3
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006a8a:	1c5a      	adds	r2, r3, #1
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3710      	adds	r7, #16
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f004 fc3b 	bl	800b320 <USBD_LL_Start>
 8006aaa:	4603      	mov	r3, r0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3708      	adds	r7, #8
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006abc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	370c      	adds	r7, #12
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr

08006aca <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b084      	sub	sp, #16
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
 8006ad2:	460b      	mov	r3, r1
 8006ad4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d009      	beq.n	8006af8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	78fa      	ldrb	r2, [r7, #3]
 8006aee:	4611      	mov	r1, r2
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	4798      	blx	r3
 8006af4:	4603      	mov	r3, r0
 8006af6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b084      	sub	sp, #16
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	78fa      	ldrb	r2, [r7, #3]
 8006b1c:	4611      	mov	r1, r2
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	4798      	blx	r3
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d001      	beq.n	8006b2c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006b28:	2303      	movs	r3, #3
 8006b2a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}

08006b36 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006b36:	b580      	push	{r7, lr}
 8006b38:	b084      	sub	sp, #16
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
 8006b3e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b46:	6839      	ldr	r1, [r7, #0]
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f001 f908 	bl	8007d5e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2201      	movs	r2, #1
 8006b52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006b6a:	f003 031f 	and.w	r3, r3, #31
 8006b6e:	2b02      	cmp	r3, #2
 8006b70:	d01a      	beq.n	8006ba8 <USBD_LL_SetupStage+0x72>
 8006b72:	2b02      	cmp	r3, #2
 8006b74:	d822      	bhi.n	8006bbc <USBD_LL_SetupStage+0x86>
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d002      	beq.n	8006b80 <USBD_LL_SetupStage+0x4a>
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d00a      	beq.n	8006b94 <USBD_LL_SetupStage+0x5e>
 8006b7e:	e01d      	b.n	8006bbc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b86:	4619      	mov	r1, r3
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 fb5f 	bl	800724c <USBD_StdDevReq>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	73fb      	strb	r3, [r7, #15]
      break;
 8006b92:	e020      	b.n	8006bd6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 fbc7 	bl	8007330 <USBD_StdItfReq>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	73fb      	strb	r3, [r7, #15]
      break;
 8006ba6:	e016      	b.n	8006bd6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006bae:	4619      	mov	r1, r3
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 fc29 	bl	8007408 <USBD_StdEPReq>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	73fb      	strb	r3, [r7, #15]
      break;
 8006bba:	e00c      	b.n	8006bd6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006bc2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	4619      	mov	r1, r3
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f004 fc08 	bl	800b3e0 <USBD_LL_StallEP>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8006bd4:	bf00      	nop
  }

  return ret;
 8006bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3710      	adds	r7, #16
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b086      	sub	sp, #24
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	460b      	mov	r3, r1
 8006bea:	607a      	str	r2, [r7, #4]
 8006bec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006bf2:	7afb      	ldrb	r3, [r7, #11]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d16e      	bne.n	8006cd6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006bfe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c06:	2b03      	cmp	r3, #3
 8006c08:	f040 8098 	bne.w	8006d3c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	689a      	ldr	r2, [r3, #8]
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d913      	bls.n	8006c40 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	689a      	ldr	r2, [r3, #8]
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	1ad2      	subs	r2, r2, r3
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	68da      	ldr	r2, [r3, #12]
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	bf28      	it	cs
 8006c32:	4613      	movcs	r3, r2
 8006c34:	461a      	mov	r2, r3
 8006c36:	6879      	ldr	r1, [r7, #4]
 8006c38:	68f8      	ldr	r0, [r7, #12]
 8006c3a:	f001 f984 	bl	8007f46 <USBD_CtlContinueRx>
 8006c3e:	e07d      	b.n	8006d3c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006c46:	f003 031f 	and.w	r3, r3, #31
 8006c4a:	2b02      	cmp	r3, #2
 8006c4c:	d014      	beq.n	8006c78 <USBD_LL_DataOutStage+0x98>
 8006c4e:	2b02      	cmp	r3, #2
 8006c50:	d81d      	bhi.n	8006c8e <USBD_LL_DataOutStage+0xae>
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d002      	beq.n	8006c5c <USBD_LL_DataOutStage+0x7c>
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d003      	beq.n	8006c62 <USBD_LL_DataOutStage+0x82>
 8006c5a:	e018      	b.n	8006c8e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	75bb      	strb	r3, [r7, #22]
            break;
 8006c60:	e018      	b.n	8006c94 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	68f8      	ldr	r0, [r7, #12]
 8006c6e:	f000 fa5e 	bl	800712e <USBD_CoreFindIF>
 8006c72:	4603      	mov	r3, r0
 8006c74:	75bb      	strb	r3, [r7, #22]
            break;
 8006c76:	e00d      	b.n	8006c94 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	4619      	mov	r1, r3
 8006c82:	68f8      	ldr	r0, [r7, #12]
 8006c84:	f000 fa60 	bl	8007148 <USBD_CoreFindEP>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	75bb      	strb	r3, [r7, #22]
            break;
 8006c8c:	e002      	b.n	8006c94 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	75bb      	strb	r3, [r7, #22]
            break;
 8006c92:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006c94:	7dbb      	ldrb	r3, [r7, #22]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d119      	bne.n	8006cce <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	2b03      	cmp	r3, #3
 8006ca4:	d113      	bne.n	8006cce <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006ca6:	7dba      	ldrb	r2, [r7, #22]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	32ae      	adds	r2, #174	; 0xae
 8006cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d00b      	beq.n	8006cce <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006cb6:	7dba      	ldrb	r2, [r7, #22]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006cbe:	7dba      	ldrb	r2, [r7, #22]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	32ae      	adds	r2, #174	; 0xae
 8006cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	68f8      	ldr	r0, [r7, #12]
 8006ccc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	f001 f94a 	bl	8007f68 <USBD_CtlSendStatus>
 8006cd4:	e032      	b.n	8006d3c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006cd6:	7afb      	ldrb	r3, [r7, #11]
 8006cd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	4619      	mov	r1, r3
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f000 fa31 	bl	8007148 <USBD_CoreFindEP>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006cea:	7dbb      	ldrb	r3, [r7, #22]
 8006cec:	2bff      	cmp	r3, #255	; 0xff
 8006cee:	d025      	beq.n	8006d3c <USBD_LL_DataOutStage+0x15c>
 8006cf0:	7dbb      	ldrb	r3, [r7, #22]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d122      	bne.n	8006d3c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	2b03      	cmp	r3, #3
 8006d00:	d117      	bne.n	8006d32 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006d02:	7dba      	ldrb	r2, [r7, #22]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	32ae      	adds	r2, #174	; 0xae
 8006d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d0c:	699b      	ldr	r3, [r3, #24]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d00f      	beq.n	8006d32 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006d12:	7dba      	ldrb	r2, [r7, #22]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006d1a:	7dba      	ldrb	r2, [r7, #22]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	32ae      	adds	r2, #174	; 0xae
 8006d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d24:	699b      	ldr	r3, [r3, #24]
 8006d26:	7afa      	ldrb	r2, [r7, #11]
 8006d28:	4611      	mov	r1, r2
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	4798      	blx	r3
 8006d2e:	4603      	mov	r3, r0
 8006d30:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006d32:	7dfb      	ldrb	r3, [r7, #23]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d001      	beq.n	8006d3c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006d38:	7dfb      	ldrb	r3, [r7, #23]
 8006d3a:	e000      	b.n	8006d3e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3718      	adds	r7, #24
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}

08006d46 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b086      	sub	sp, #24
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	60f8      	str	r0, [r7, #12]
 8006d4e:	460b      	mov	r3, r1
 8006d50:	607a      	str	r2, [r7, #4]
 8006d52:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006d54:	7afb      	ldrb	r3, [r7, #11]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d16f      	bne.n	8006e3a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	3314      	adds	r3, #20
 8006d5e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d66:	2b02      	cmp	r3, #2
 8006d68:	d15a      	bne.n	8006e20 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	689a      	ldr	r2, [r3, #8]
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d914      	bls.n	8006da0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	689a      	ldr	r2, [r3, #8]
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	1ad2      	subs	r2, r2, r3
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	461a      	mov	r2, r3
 8006d8a:	6879      	ldr	r1, [r7, #4]
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	f001 f8ac 	bl	8007eea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d92:	2300      	movs	r3, #0
 8006d94:	2200      	movs	r2, #0
 8006d96:	2100      	movs	r1, #0
 8006d98:	68f8      	ldr	r0, [r7, #12]
 8006d9a:	f004 fbcb 	bl	800b534 <USBD_LL_PrepareReceive>
 8006d9e:	e03f      	b.n	8006e20 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	68da      	ldr	r2, [r3, #12]
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d11c      	bne.n	8006de6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	685a      	ldr	r2, [r3, #4]
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d316      	bcc.n	8006de6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	685a      	ldr	r2, [r3, #4]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d20f      	bcs.n	8006de6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	2100      	movs	r1, #0
 8006dca:	68f8      	ldr	r0, [r7, #12]
 8006dcc:	f001 f88d 	bl	8007eea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006dd8:	2300      	movs	r3, #0
 8006dda:	2200      	movs	r2, #0
 8006ddc:	2100      	movs	r1, #0
 8006dde:	68f8      	ldr	r0, [r7, #12]
 8006de0:	f004 fba8 	bl	800b534 <USBD_LL_PrepareReceive>
 8006de4:	e01c      	b.n	8006e20 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	2b03      	cmp	r3, #3
 8006df0:	d10f      	bne.n	8006e12 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d009      	beq.n	8006e12 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2200      	movs	r2, #0
 8006e02:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	68f8      	ldr	r0, [r7, #12]
 8006e10:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e12:	2180      	movs	r1, #128	; 0x80
 8006e14:	68f8      	ldr	r0, [r7, #12]
 8006e16:	f004 fae3 	bl	800b3e0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006e1a:	68f8      	ldr	r0, [r7, #12]
 8006e1c:	f001 f8b7 	bl	8007f8e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d03a      	beq.n	8006ea0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006e2a:	68f8      	ldr	r0, [r7, #12]
 8006e2c:	f7ff fe42 	bl	8006ab4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006e38:	e032      	b.n	8006ea0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006e3a:	7afb      	ldrb	r3, [r7, #11]
 8006e3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	4619      	mov	r1, r3
 8006e44:	68f8      	ldr	r0, [r7, #12]
 8006e46:	f000 f97f 	bl	8007148 <USBD_CoreFindEP>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006e4e:	7dfb      	ldrb	r3, [r7, #23]
 8006e50:	2bff      	cmp	r3, #255	; 0xff
 8006e52:	d025      	beq.n	8006ea0 <USBD_LL_DataInStage+0x15a>
 8006e54:	7dfb      	ldrb	r3, [r7, #23]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d122      	bne.n	8006ea0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	2b03      	cmp	r3, #3
 8006e64:	d11c      	bne.n	8006ea0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006e66:	7dfa      	ldrb	r2, [r7, #23]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	32ae      	adds	r2, #174	; 0xae
 8006e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e70:	695b      	ldr	r3, [r3, #20]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d014      	beq.n	8006ea0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006e76:	7dfa      	ldrb	r2, [r7, #23]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006e7e:	7dfa      	ldrb	r2, [r7, #23]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	32ae      	adds	r2, #174	; 0xae
 8006e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e88:	695b      	ldr	r3, [r3, #20]
 8006e8a:	7afa      	ldrb	r2, [r7, #11]
 8006e8c:	4611      	mov	r1, r2
 8006e8e:	68f8      	ldr	r0, [r7, #12]
 8006e90:	4798      	blx	r3
 8006e92:	4603      	mov	r3, r0
 8006e94:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006e96:	7dbb      	ldrb	r3, [r7, #22]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d001      	beq.n	8006ea0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006e9c:	7dbb      	ldrb	r3, [r7, #22]
 8006e9e:	e000      	b.n	8006ea2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3718      	adds	r7, #24
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b084      	sub	sp, #16
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d014      	beq.n	8006f10 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d00e      	beq.n	8006f10 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	6852      	ldr	r2, [r2, #4]
 8006efe:	b2d2      	uxtb	r2, r2
 8006f00:	4611      	mov	r1, r2
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	4798      	blx	r3
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d001      	beq.n	8006f10 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006f0c:	2303      	movs	r3, #3
 8006f0e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f10:	2340      	movs	r3, #64	; 0x40
 8006f12:	2200      	movs	r2, #0
 8006f14:	2100      	movs	r1, #0
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f004 fa1d 	bl	800b356 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2240      	movs	r2, #64	; 0x40
 8006f28:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f2c:	2340      	movs	r3, #64	; 0x40
 8006f2e:	2200      	movs	r2, #0
 8006f30:	2180      	movs	r1, #128	; 0x80
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f004 fa0f 	bl	800b356 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2240      	movs	r2, #64	; 0x40
 8006f42:	621a      	str	r2, [r3, #32]

  return ret;
 8006f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3710      	adds	r7, #16
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}

08006f4e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006f4e:	b480      	push	{r7}
 8006f50:	b083      	sub	sp, #12
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
 8006f56:	460b      	mov	r3, r1
 8006f58:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	78fa      	ldrb	r2, [r7, #3]
 8006f5e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006f60:	2300      	movs	r3, #0
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	370c      	adds	r7, #12
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr

08006f6e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006f6e:	b480      	push	{r7}
 8006f70:	b083      	sub	sp, #12
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f7c:	b2da      	uxtb	r2, r3
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2204      	movs	r2, #4
 8006f88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	370c      	adds	r7, #12
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr

08006f9a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006f9a:	b480      	push	{r7}
 8006f9c:	b083      	sub	sp, #12
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	2b04      	cmp	r3, #4
 8006fac:	d106      	bne.n	8006fbc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006fb4:	b2da      	uxtb	r2, r3
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	370c      	adds	r7, #12
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr

08006fca <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b082      	sub	sp, #8
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	2b03      	cmp	r3, #3
 8006fdc:	d110      	bne.n	8007000 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d00b      	beq.n	8007000 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fee:	69db      	ldr	r3, [r3, #28]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d005      	beq.n	8007000 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ffa:	69db      	ldr	r3, [r3, #28]
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007000:	2300      	movs	r3, #0
}
 8007002:	4618      	mov	r0, r3
 8007004:	3708      	adds	r7, #8
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}

0800700a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800700a:	b580      	push	{r7, lr}
 800700c:	b082      	sub	sp, #8
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
 8007012:	460b      	mov	r3, r1
 8007014:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	32ae      	adds	r2, #174	; 0xae
 8007020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d101      	bne.n	800702c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007028:	2303      	movs	r3, #3
 800702a:	e01c      	b.n	8007066 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007032:	b2db      	uxtb	r3, r3
 8007034:	2b03      	cmp	r3, #3
 8007036:	d115      	bne.n	8007064 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	32ae      	adds	r2, #174	; 0xae
 8007042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007046:	6a1b      	ldr	r3, [r3, #32]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d00b      	beq.n	8007064 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	32ae      	adds	r2, #174	; 0xae
 8007056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800705a:	6a1b      	ldr	r3, [r3, #32]
 800705c:	78fa      	ldrb	r2, [r7, #3]
 800705e:	4611      	mov	r1, r2
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007064:	2300      	movs	r3, #0
}
 8007066:	4618      	mov	r0, r3
 8007068:	3708      	adds	r7, #8
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}

0800706e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800706e:	b580      	push	{r7, lr}
 8007070:	b082      	sub	sp, #8
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
 8007076:	460b      	mov	r3, r1
 8007078:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	32ae      	adds	r2, #174	; 0xae
 8007084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d101      	bne.n	8007090 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800708c:	2303      	movs	r3, #3
 800708e:	e01c      	b.n	80070ca <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007096:	b2db      	uxtb	r3, r3
 8007098:	2b03      	cmp	r3, #3
 800709a:	d115      	bne.n	80070c8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	32ae      	adds	r2, #174	; 0xae
 80070a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d00b      	beq.n	80070c8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	32ae      	adds	r2, #174	; 0xae
 80070ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c0:	78fa      	ldrb	r2, [r7, #3]
 80070c2:	4611      	mov	r1, r2
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3708      	adds	r7, #8
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80070d2:	b480      	push	{r7}
 80070d4:	b083      	sub	sp, #12
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80070da:	2300      	movs	r3, #0
}
 80070dc:	4618      	mov	r0, r3
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80070f0:	2300      	movs	r3, #0
 80070f2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007102:	2b00      	cmp	r3, #0
 8007104:	d00e      	beq.n	8007124 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	6852      	ldr	r2, [r2, #4]
 8007112:	b2d2      	uxtb	r2, r2
 8007114:	4611      	mov	r1, r2
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	4798      	blx	r3
 800711a:	4603      	mov	r3, r0
 800711c:	2b00      	cmp	r3, #0
 800711e:	d001      	beq.n	8007124 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007120:	2303      	movs	r3, #3
 8007122:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007124:	7bfb      	ldrb	r3, [r7, #15]
}
 8007126:	4618      	mov	r0, r3
 8007128:	3710      	adds	r7, #16
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800712e:	b480      	push	{r7}
 8007130:	b083      	sub	sp, #12
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
 8007136:	460b      	mov	r3, r1
 8007138:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800713a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800713c:	4618      	mov	r0, r3
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	460b      	mov	r3, r1
 8007152:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007154:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007156:	4618      	mov	r0, r3
 8007158:	370c      	adds	r7, #12
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr

08007162 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007162:	b580      	push	{r7, lr}
 8007164:	b086      	sub	sp, #24
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
 800716a:	460b      	mov	r3, r1
 800716c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007176:	2300      	movs	r3, #0
 8007178:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	885b      	ldrh	r3, [r3, #2]
 800717e:	b29a      	uxth	r2, r3
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	b29b      	uxth	r3, r3
 8007186:	429a      	cmp	r2, r3
 8007188:	d920      	bls.n	80071cc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	b29b      	uxth	r3, r3
 8007190:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007192:	e013      	b.n	80071bc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007194:	f107 030a 	add.w	r3, r7, #10
 8007198:	4619      	mov	r1, r3
 800719a:	6978      	ldr	r0, [r7, #20]
 800719c:	f000 f81b 	bl	80071d6 <USBD_GetNextDesc>
 80071a0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	785b      	ldrb	r3, [r3, #1]
 80071a6:	2b05      	cmp	r3, #5
 80071a8:	d108      	bne.n	80071bc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	789b      	ldrb	r3, [r3, #2]
 80071b2:	78fa      	ldrb	r2, [r7, #3]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d008      	beq.n	80071ca <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80071b8:	2300      	movs	r3, #0
 80071ba:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	885b      	ldrh	r3, [r3, #2]
 80071c0:	b29a      	uxth	r2, r3
 80071c2:	897b      	ldrh	r3, [r7, #10]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d8e5      	bhi.n	8007194 <USBD_GetEpDesc+0x32>
 80071c8:	e000      	b.n	80071cc <USBD_GetEpDesc+0x6a>
          break;
 80071ca:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80071cc:	693b      	ldr	r3, [r7, #16]
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3718      	adds	r7, #24
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}

080071d6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80071d6:	b480      	push	{r7}
 80071d8:	b085      	sub	sp, #20
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
 80071de:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	881a      	ldrh	r2, [r3, #0]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	4413      	add	r3, r2
 80071f0:	b29a      	uxth	r2, r3
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	461a      	mov	r2, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	4413      	add	r3, r2
 8007200:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007202:	68fb      	ldr	r3, [r7, #12]
}
 8007204:	4618      	mov	r0, r3
 8007206:	3714      	adds	r7, #20
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007210:	b480      	push	{r7}
 8007212:	b087      	sub	sp, #28
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	3301      	adds	r3, #1
 8007226:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800722e:	8a3b      	ldrh	r3, [r7, #16]
 8007230:	021b      	lsls	r3, r3, #8
 8007232:	b21a      	sxth	r2, r3
 8007234:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007238:	4313      	orrs	r3, r2
 800723a:	b21b      	sxth	r3, r3
 800723c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800723e:	89fb      	ldrh	r3, [r7, #14]
}
 8007240:	4618      	mov	r0, r3
 8007242:	371c      	adds	r7, #28
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007256:	2300      	movs	r3, #0
 8007258:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007262:	2b40      	cmp	r3, #64	; 0x40
 8007264:	d005      	beq.n	8007272 <USBD_StdDevReq+0x26>
 8007266:	2b40      	cmp	r3, #64	; 0x40
 8007268:	d857      	bhi.n	800731a <USBD_StdDevReq+0xce>
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00f      	beq.n	800728e <USBD_StdDevReq+0x42>
 800726e:	2b20      	cmp	r3, #32
 8007270:	d153      	bne.n	800731a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	32ae      	adds	r2, #174	; 0xae
 800727c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	6839      	ldr	r1, [r7, #0]
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	4798      	blx	r3
 8007288:	4603      	mov	r3, r0
 800728a:	73fb      	strb	r3, [r7, #15]
      break;
 800728c:	e04a      	b.n	8007324 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	785b      	ldrb	r3, [r3, #1]
 8007292:	2b09      	cmp	r3, #9
 8007294:	d83b      	bhi.n	800730e <USBD_StdDevReq+0xc2>
 8007296:	a201      	add	r2, pc, #4	; (adr r2, 800729c <USBD_StdDevReq+0x50>)
 8007298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800729c:	080072f1 	.word	0x080072f1
 80072a0:	08007305 	.word	0x08007305
 80072a4:	0800730f 	.word	0x0800730f
 80072a8:	080072fb 	.word	0x080072fb
 80072ac:	0800730f 	.word	0x0800730f
 80072b0:	080072cf 	.word	0x080072cf
 80072b4:	080072c5 	.word	0x080072c5
 80072b8:	0800730f 	.word	0x0800730f
 80072bc:	080072e7 	.word	0x080072e7
 80072c0:	080072d9 	.word	0x080072d9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80072c4:	6839      	ldr	r1, [r7, #0]
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 fa3c 	bl	8007744 <USBD_GetDescriptor>
          break;
 80072cc:	e024      	b.n	8007318 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80072ce:	6839      	ldr	r1, [r7, #0]
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 fba1 	bl	8007a18 <USBD_SetAddress>
          break;
 80072d6:	e01f      	b.n	8007318 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80072d8:	6839      	ldr	r1, [r7, #0]
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 fbe0 	bl	8007aa0 <USBD_SetConfig>
 80072e0:	4603      	mov	r3, r0
 80072e2:	73fb      	strb	r3, [r7, #15]
          break;
 80072e4:	e018      	b.n	8007318 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80072e6:	6839      	ldr	r1, [r7, #0]
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 fc83 	bl	8007bf4 <USBD_GetConfig>
          break;
 80072ee:	e013      	b.n	8007318 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80072f0:	6839      	ldr	r1, [r7, #0]
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 fcb4 	bl	8007c60 <USBD_GetStatus>
          break;
 80072f8:	e00e      	b.n	8007318 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80072fa:	6839      	ldr	r1, [r7, #0]
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 fce3 	bl	8007cc8 <USBD_SetFeature>
          break;
 8007302:	e009      	b.n	8007318 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007304:	6839      	ldr	r1, [r7, #0]
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 fd07 	bl	8007d1a <USBD_ClrFeature>
          break;
 800730c:	e004      	b.n	8007318 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800730e:	6839      	ldr	r1, [r7, #0]
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 fd5e 	bl	8007dd2 <USBD_CtlError>
          break;
 8007316:	bf00      	nop
      }
      break;
 8007318:	e004      	b.n	8007324 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800731a:	6839      	ldr	r1, [r7, #0]
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f000 fd58 	bl	8007dd2 <USBD_CtlError>
      break;
 8007322:	bf00      	nop
  }

  return ret;
 8007324:	7bfb      	ldrb	r3, [r7, #15]
}
 8007326:	4618      	mov	r0, r3
 8007328:	3710      	adds	r7, #16
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop

08007330 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800733a:	2300      	movs	r3, #0
 800733c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007346:	2b40      	cmp	r3, #64	; 0x40
 8007348:	d005      	beq.n	8007356 <USBD_StdItfReq+0x26>
 800734a:	2b40      	cmp	r3, #64	; 0x40
 800734c:	d852      	bhi.n	80073f4 <USBD_StdItfReq+0xc4>
 800734e:	2b00      	cmp	r3, #0
 8007350:	d001      	beq.n	8007356 <USBD_StdItfReq+0x26>
 8007352:	2b20      	cmp	r3, #32
 8007354:	d14e      	bne.n	80073f4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800735c:	b2db      	uxtb	r3, r3
 800735e:	3b01      	subs	r3, #1
 8007360:	2b02      	cmp	r3, #2
 8007362:	d840      	bhi.n	80073e6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	889b      	ldrh	r3, [r3, #4]
 8007368:	b2db      	uxtb	r3, r3
 800736a:	2b01      	cmp	r3, #1
 800736c:	d836      	bhi.n	80073dc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	889b      	ldrh	r3, [r3, #4]
 8007372:	b2db      	uxtb	r3, r3
 8007374:	4619      	mov	r1, r3
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f7ff fed9 	bl	800712e <USBD_CoreFindIF>
 800737c:	4603      	mov	r3, r0
 800737e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007380:	7bbb      	ldrb	r3, [r7, #14]
 8007382:	2bff      	cmp	r3, #255	; 0xff
 8007384:	d01d      	beq.n	80073c2 <USBD_StdItfReq+0x92>
 8007386:	7bbb      	ldrb	r3, [r7, #14]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d11a      	bne.n	80073c2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800738c:	7bba      	ldrb	r2, [r7, #14]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	32ae      	adds	r2, #174	; 0xae
 8007392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00f      	beq.n	80073bc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800739c:	7bba      	ldrb	r2, [r7, #14]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80073a4:	7bba      	ldrb	r2, [r7, #14]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	32ae      	adds	r2, #174	; 0xae
 80073aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	6839      	ldr	r1, [r7, #0]
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	4798      	blx	r3
 80073b6:	4603      	mov	r3, r0
 80073b8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80073ba:	e004      	b.n	80073c6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80073bc:	2303      	movs	r3, #3
 80073be:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80073c0:	e001      	b.n	80073c6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80073c2:	2303      	movs	r3, #3
 80073c4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	88db      	ldrh	r3, [r3, #6]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d110      	bne.n	80073f0 <USBD_StdItfReq+0xc0>
 80073ce:	7bfb      	ldrb	r3, [r7, #15]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d10d      	bne.n	80073f0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 fdc7 	bl	8007f68 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80073da:	e009      	b.n	80073f0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80073dc:	6839      	ldr	r1, [r7, #0]
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 fcf7 	bl	8007dd2 <USBD_CtlError>
          break;
 80073e4:	e004      	b.n	80073f0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80073e6:	6839      	ldr	r1, [r7, #0]
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 fcf2 	bl	8007dd2 <USBD_CtlError>
          break;
 80073ee:	e000      	b.n	80073f2 <USBD_StdItfReq+0xc2>
          break;
 80073f0:	bf00      	nop
      }
      break;
 80073f2:	e004      	b.n	80073fe <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80073f4:	6839      	ldr	r1, [r7, #0]
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 fceb 	bl	8007dd2 <USBD_CtlError>
      break;
 80073fc:	bf00      	nop
  }

  return ret;
 80073fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007400:	4618      	mov	r0, r3
 8007402:	3710      	adds	r7, #16
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007412:	2300      	movs	r3, #0
 8007414:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	889b      	ldrh	r3, [r3, #4]
 800741a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007424:	2b40      	cmp	r3, #64	; 0x40
 8007426:	d007      	beq.n	8007438 <USBD_StdEPReq+0x30>
 8007428:	2b40      	cmp	r3, #64	; 0x40
 800742a:	f200 817f 	bhi.w	800772c <USBD_StdEPReq+0x324>
 800742e:	2b00      	cmp	r3, #0
 8007430:	d02a      	beq.n	8007488 <USBD_StdEPReq+0x80>
 8007432:	2b20      	cmp	r3, #32
 8007434:	f040 817a 	bne.w	800772c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007438:	7bbb      	ldrb	r3, [r7, #14]
 800743a:	4619      	mov	r1, r3
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f7ff fe83 	bl	8007148 <USBD_CoreFindEP>
 8007442:	4603      	mov	r3, r0
 8007444:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007446:	7b7b      	ldrb	r3, [r7, #13]
 8007448:	2bff      	cmp	r3, #255	; 0xff
 800744a:	f000 8174 	beq.w	8007736 <USBD_StdEPReq+0x32e>
 800744e:	7b7b      	ldrb	r3, [r7, #13]
 8007450:	2b00      	cmp	r3, #0
 8007452:	f040 8170 	bne.w	8007736 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007456:	7b7a      	ldrb	r2, [r7, #13]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800745e:	7b7a      	ldrb	r2, [r7, #13]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	32ae      	adds	r2, #174	; 0xae
 8007464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	2b00      	cmp	r3, #0
 800746c:	f000 8163 	beq.w	8007736 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007470:	7b7a      	ldrb	r2, [r7, #13]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	32ae      	adds	r2, #174	; 0xae
 8007476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	6839      	ldr	r1, [r7, #0]
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	4798      	blx	r3
 8007482:	4603      	mov	r3, r0
 8007484:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007486:	e156      	b.n	8007736 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	785b      	ldrb	r3, [r3, #1]
 800748c:	2b03      	cmp	r3, #3
 800748e:	d008      	beq.n	80074a2 <USBD_StdEPReq+0x9a>
 8007490:	2b03      	cmp	r3, #3
 8007492:	f300 8145 	bgt.w	8007720 <USBD_StdEPReq+0x318>
 8007496:	2b00      	cmp	r3, #0
 8007498:	f000 809b 	beq.w	80075d2 <USBD_StdEPReq+0x1ca>
 800749c:	2b01      	cmp	r3, #1
 800749e:	d03c      	beq.n	800751a <USBD_StdEPReq+0x112>
 80074a0:	e13e      	b.n	8007720 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	d002      	beq.n	80074b4 <USBD_StdEPReq+0xac>
 80074ae:	2b03      	cmp	r3, #3
 80074b0:	d016      	beq.n	80074e0 <USBD_StdEPReq+0xd8>
 80074b2:	e02c      	b.n	800750e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074b4:	7bbb      	ldrb	r3, [r7, #14]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d00d      	beq.n	80074d6 <USBD_StdEPReq+0xce>
 80074ba:	7bbb      	ldrb	r3, [r7, #14]
 80074bc:	2b80      	cmp	r3, #128	; 0x80
 80074be:	d00a      	beq.n	80074d6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80074c0:	7bbb      	ldrb	r3, [r7, #14]
 80074c2:	4619      	mov	r1, r3
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f003 ff8b 	bl	800b3e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80074ca:	2180      	movs	r1, #128	; 0x80
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f003 ff87 	bl	800b3e0 <USBD_LL_StallEP>
 80074d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80074d4:	e020      	b.n	8007518 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80074d6:	6839      	ldr	r1, [r7, #0]
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 fc7a 	bl	8007dd2 <USBD_CtlError>
              break;
 80074de:	e01b      	b.n	8007518 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	885b      	ldrh	r3, [r3, #2]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d10e      	bne.n	8007506 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80074e8:	7bbb      	ldrb	r3, [r7, #14]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d00b      	beq.n	8007506 <USBD_StdEPReq+0xfe>
 80074ee:	7bbb      	ldrb	r3, [r7, #14]
 80074f0:	2b80      	cmp	r3, #128	; 0x80
 80074f2:	d008      	beq.n	8007506 <USBD_StdEPReq+0xfe>
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	88db      	ldrh	r3, [r3, #6]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d104      	bne.n	8007506 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80074fc:	7bbb      	ldrb	r3, [r7, #14]
 80074fe:	4619      	mov	r1, r3
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f003 ff6d 	bl	800b3e0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 fd2e 	bl	8007f68 <USBD_CtlSendStatus>

              break;
 800750c:	e004      	b.n	8007518 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800750e:	6839      	ldr	r1, [r7, #0]
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 fc5e 	bl	8007dd2 <USBD_CtlError>
              break;
 8007516:	bf00      	nop
          }
          break;
 8007518:	e107      	b.n	800772a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007520:	b2db      	uxtb	r3, r3
 8007522:	2b02      	cmp	r3, #2
 8007524:	d002      	beq.n	800752c <USBD_StdEPReq+0x124>
 8007526:	2b03      	cmp	r3, #3
 8007528:	d016      	beq.n	8007558 <USBD_StdEPReq+0x150>
 800752a:	e04b      	b.n	80075c4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800752c:	7bbb      	ldrb	r3, [r7, #14]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00d      	beq.n	800754e <USBD_StdEPReq+0x146>
 8007532:	7bbb      	ldrb	r3, [r7, #14]
 8007534:	2b80      	cmp	r3, #128	; 0x80
 8007536:	d00a      	beq.n	800754e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007538:	7bbb      	ldrb	r3, [r7, #14]
 800753a:	4619      	mov	r1, r3
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f003 ff4f 	bl	800b3e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007542:	2180      	movs	r1, #128	; 0x80
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f003 ff4b 	bl	800b3e0 <USBD_LL_StallEP>
 800754a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800754c:	e040      	b.n	80075d0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800754e:	6839      	ldr	r1, [r7, #0]
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 fc3e 	bl	8007dd2 <USBD_CtlError>
              break;
 8007556:	e03b      	b.n	80075d0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	885b      	ldrh	r3, [r3, #2]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d136      	bne.n	80075ce <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007560:	7bbb      	ldrb	r3, [r7, #14]
 8007562:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007566:	2b00      	cmp	r3, #0
 8007568:	d004      	beq.n	8007574 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800756a:	7bbb      	ldrb	r3, [r7, #14]
 800756c:	4619      	mov	r1, r3
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f003 ff55 	bl	800b41e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 fcf7 	bl	8007f68 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800757a:	7bbb      	ldrb	r3, [r7, #14]
 800757c:	4619      	mov	r1, r3
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f7ff fde2 	bl	8007148 <USBD_CoreFindEP>
 8007584:	4603      	mov	r3, r0
 8007586:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007588:	7b7b      	ldrb	r3, [r7, #13]
 800758a:	2bff      	cmp	r3, #255	; 0xff
 800758c:	d01f      	beq.n	80075ce <USBD_StdEPReq+0x1c6>
 800758e:	7b7b      	ldrb	r3, [r7, #13]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d11c      	bne.n	80075ce <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007594:	7b7a      	ldrb	r2, [r7, #13]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800759c:	7b7a      	ldrb	r2, [r7, #13]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	32ae      	adds	r2, #174	; 0xae
 80075a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d010      	beq.n	80075ce <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80075ac:	7b7a      	ldrb	r2, [r7, #13]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	32ae      	adds	r2, #174	; 0xae
 80075b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	6839      	ldr	r1, [r7, #0]
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	4798      	blx	r3
 80075be:	4603      	mov	r3, r0
 80075c0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80075c2:	e004      	b.n	80075ce <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80075c4:	6839      	ldr	r1, [r7, #0]
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 fc03 	bl	8007dd2 <USBD_CtlError>
              break;
 80075cc:	e000      	b.n	80075d0 <USBD_StdEPReq+0x1c8>
              break;
 80075ce:	bf00      	nop
          }
          break;
 80075d0:	e0ab      	b.n	800772a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	2b02      	cmp	r3, #2
 80075dc:	d002      	beq.n	80075e4 <USBD_StdEPReq+0x1dc>
 80075de:	2b03      	cmp	r3, #3
 80075e0:	d032      	beq.n	8007648 <USBD_StdEPReq+0x240>
 80075e2:	e097      	b.n	8007714 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075e4:	7bbb      	ldrb	r3, [r7, #14]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d007      	beq.n	80075fa <USBD_StdEPReq+0x1f2>
 80075ea:	7bbb      	ldrb	r3, [r7, #14]
 80075ec:	2b80      	cmp	r3, #128	; 0x80
 80075ee:	d004      	beq.n	80075fa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80075f0:	6839      	ldr	r1, [r7, #0]
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 fbed 	bl	8007dd2 <USBD_CtlError>
                break;
 80075f8:	e091      	b.n	800771e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	da0b      	bge.n	800761a <USBD_StdEPReq+0x212>
 8007602:	7bbb      	ldrb	r3, [r7, #14]
 8007604:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007608:	4613      	mov	r3, r2
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	4413      	add	r3, r2
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	3310      	adds	r3, #16
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	4413      	add	r3, r2
 8007616:	3304      	adds	r3, #4
 8007618:	e00b      	b.n	8007632 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800761a:	7bbb      	ldrb	r3, [r7, #14]
 800761c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007620:	4613      	mov	r3, r2
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	4413      	add	r3, r2
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	4413      	add	r3, r2
 8007630:	3304      	adds	r3, #4
 8007632:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	2200      	movs	r2, #0
 8007638:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	2202      	movs	r2, #2
 800763e:	4619      	mov	r1, r3
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f000 fc37 	bl	8007eb4 <USBD_CtlSendData>
              break;
 8007646:	e06a      	b.n	800771e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007648:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800764c:	2b00      	cmp	r3, #0
 800764e:	da11      	bge.n	8007674 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007650:	7bbb      	ldrb	r3, [r7, #14]
 8007652:	f003 020f 	and.w	r2, r3, #15
 8007656:	6879      	ldr	r1, [r7, #4]
 8007658:	4613      	mov	r3, r2
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	4413      	add	r3, r2
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	440b      	add	r3, r1
 8007662:	3324      	adds	r3, #36	; 0x24
 8007664:	881b      	ldrh	r3, [r3, #0]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d117      	bne.n	800769a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800766a:	6839      	ldr	r1, [r7, #0]
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 fbb0 	bl	8007dd2 <USBD_CtlError>
                  break;
 8007672:	e054      	b.n	800771e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007674:	7bbb      	ldrb	r3, [r7, #14]
 8007676:	f003 020f 	and.w	r2, r3, #15
 800767a:	6879      	ldr	r1, [r7, #4]
 800767c:	4613      	mov	r3, r2
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	4413      	add	r3, r2
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	440b      	add	r3, r1
 8007686:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800768a:	881b      	ldrh	r3, [r3, #0]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d104      	bne.n	800769a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007690:	6839      	ldr	r1, [r7, #0]
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 fb9d 	bl	8007dd2 <USBD_CtlError>
                  break;
 8007698:	e041      	b.n	800771e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800769a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	da0b      	bge.n	80076ba <USBD_StdEPReq+0x2b2>
 80076a2:	7bbb      	ldrb	r3, [r7, #14]
 80076a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076a8:	4613      	mov	r3, r2
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	4413      	add	r3, r2
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	3310      	adds	r3, #16
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	4413      	add	r3, r2
 80076b6:	3304      	adds	r3, #4
 80076b8:	e00b      	b.n	80076d2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80076ba:	7bbb      	ldrb	r3, [r7, #14]
 80076bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076c0:	4613      	mov	r3, r2
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	4413      	add	r3, r2
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	4413      	add	r3, r2
 80076d0:	3304      	adds	r3, #4
 80076d2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80076d4:	7bbb      	ldrb	r3, [r7, #14]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d002      	beq.n	80076e0 <USBD_StdEPReq+0x2d8>
 80076da:	7bbb      	ldrb	r3, [r7, #14]
 80076dc:	2b80      	cmp	r3, #128	; 0x80
 80076de:	d103      	bne.n	80076e8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	2200      	movs	r2, #0
 80076e4:	601a      	str	r2, [r3, #0]
 80076e6:	e00e      	b.n	8007706 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80076e8:	7bbb      	ldrb	r3, [r7, #14]
 80076ea:	4619      	mov	r1, r3
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f003 feb5 	bl	800b45c <USBD_LL_IsStallEP>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d003      	beq.n	8007700 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	2201      	movs	r2, #1
 80076fc:	601a      	str	r2, [r3, #0]
 80076fe:	e002      	b.n	8007706 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	2200      	movs	r2, #0
 8007704:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	2202      	movs	r2, #2
 800770a:	4619      	mov	r1, r3
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 fbd1 	bl	8007eb4 <USBD_CtlSendData>
              break;
 8007712:	e004      	b.n	800771e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007714:	6839      	ldr	r1, [r7, #0]
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 fb5b 	bl	8007dd2 <USBD_CtlError>
              break;
 800771c:	bf00      	nop
          }
          break;
 800771e:	e004      	b.n	800772a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007720:	6839      	ldr	r1, [r7, #0]
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 fb55 	bl	8007dd2 <USBD_CtlError>
          break;
 8007728:	bf00      	nop
      }
      break;
 800772a:	e005      	b.n	8007738 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800772c:	6839      	ldr	r1, [r7, #0]
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 fb4f 	bl	8007dd2 <USBD_CtlError>
      break;
 8007734:	e000      	b.n	8007738 <USBD_StdEPReq+0x330>
      break;
 8007736:	bf00      	nop
  }

  return ret;
 8007738:	7bfb      	ldrb	r3, [r7, #15]
}
 800773a:	4618      	mov	r0, r3
 800773c:	3710      	adds	r7, #16
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
	...

08007744 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800774e:	2300      	movs	r3, #0
 8007750:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007752:	2300      	movs	r3, #0
 8007754:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007756:	2300      	movs	r3, #0
 8007758:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	885b      	ldrh	r3, [r3, #2]
 800775e:	0a1b      	lsrs	r3, r3, #8
 8007760:	b29b      	uxth	r3, r3
 8007762:	3b01      	subs	r3, #1
 8007764:	2b06      	cmp	r3, #6
 8007766:	f200 8128 	bhi.w	80079ba <USBD_GetDescriptor+0x276>
 800776a:	a201      	add	r2, pc, #4	; (adr r2, 8007770 <USBD_GetDescriptor+0x2c>)
 800776c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007770:	0800778d 	.word	0x0800778d
 8007774:	080077a5 	.word	0x080077a5
 8007778:	080077e5 	.word	0x080077e5
 800777c:	080079bb 	.word	0x080079bb
 8007780:	080079bb 	.word	0x080079bb
 8007784:	0800795b 	.word	0x0800795b
 8007788:	08007987 	.word	0x08007987
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	7c12      	ldrb	r2, [r2, #16]
 8007798:	f107 0108 	add.w	r1, r7, #8
 800779c:	4610      	mov	r0, r2
 800779e:	4798      	blx	r3
 80077a0:	60f8      	str	r0, [r7, #12]
      break;
 80077a2:	e112      	b.n	80079ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	7c1b      	ldrb	r3, [r3, #16]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d10d      	bne.n	80077c8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b4:	f107 0208 	add.w	r2, r7, #8
 80077b8:	4610      	mov	r0, r2
 80077ba:	4798      	blx	r3
 80077bc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	3301      	adds	r3, #1
 80077c2:	2202      	movs	r2, #2
 80077c4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80077c6:	e100      	b.n	80079ca <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d0:	f107 0208 	add.w	r2, r7, #8
 80077d4:	4610      	mov	r0, r2
 80077d6:	4798      	blx	r3
 80077d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	3301      	adds	r3, #1
 80077de:	2202      	movs	r2, #2
 80077e0:	701a      	strb	r2, [r3, #0]
      break;
 80077e2:	e0f2      	b.n	80079ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	885b      	ldrh	r3, [r3, #2]
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	2b05      	cmp	r3, #5
 80077ec:	f200 80ac 	bhi.w	8007948 <USBD_GetDescriptor+0x204>
 80077f0:	a201      	add	r2, pc, #4	; (adr r2, 80077f8 <USBD_GetDescriptor+0xb4>)
 80077f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f6:	bf00      	nop
 80077f8:	08007811 	.word	0x08007811
 80077fc:	08007845 	.word	0x08007845
 8007800:	08007879 	.word	0x08007879
 8007804:	080078ad 	.word	0x080078ad
 8007808:	080078e1 	.word	0x080078e1
 800780c:	08007915 	.word	0x08007915
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d00b      	beq.n	8007834 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	7c12      	ldrb	r2, [r2, #16]
 8007828:	f107 0108 	add.w	r1, r7, #8
 800782c:	4610      	mov	r0, r2
 800782e:	4798      	blx	r3
 8007830:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007832:	e091      	b.n	8007958 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007834:	6839      	ldr	r1, [r7, #0]
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 facb 	bl	8007dd2 <USBD_CtlError>
            err++;
 800783c:	7afb      	ldrb	r3, [r7, #11]
 800783e:	3301      	adds	r3, #1
 8007840:	72fb      	strb	r3, [r7, #11]
          break;
 8007842:	e089      	b.n	8007958 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d00b      	beq.n	8007868 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	7c12      	ldrb	r2, [r2, #16]
 800785c:	f107 0108 	add.w	r1, r7, #8
 8007860:	4610      	mov	r0, r2
 8007862:	4798      	blx	r3
 8007864:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007866:	e077      	b.n	8007958 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007868:	6839      	ldr	r1, [r7, #0]
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 fab1 	bl	8007dd2 <USBD_CtlError>
            err++;
 8007870:	7afb      	ldrb	r3, [r7, #11]
 8007872:	3301      	adds	r3, #1
 8007874:	72fb      	strb	r3, [r7, #11]
          break;
 8007876:	e06f      	b.n	8007958 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d00b      	beq.n	800789c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	7c12      	ldrb	r2, [r2, #16]
 8007890:	f107 0108 	add.w	r1, r7, #8
 8007894:	4610      	mov	r0, r2
 8007896:	4798      	blx	r3
 8007898:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800789a:	e05d      	b.n	8007958 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800789c:	6839      	ldr	r1, [r7, #0]
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 fa97 	bl	8007dd2 <USBD_CtlError>
            err++;
 80078a4:	7afb      	ldrb	r3, [r7, #11]
 80078a6:	3301      	adds	r3, #1
 80078a8:	72fb      	strb	r3, [r7, #11]
          break;
 80078aa:	e055      	b.n	8007958 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078b2:	691b      	ldr	r3, [r3, #16]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d00b      	beq.n	80078d0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078be:	691b      	ldr	r3, [r3, #16]
 80078c0:	687a      	ldr	r2, [r7, #4]
 80078c2:	7c12      	ldrb	r2, [r2, #16]
 80078c4:	f107 0108 	add.w	r1, r7, #8
 80078c8:	4610      	mov	r0, r2
 80078ca:	4798      	blx	r3
 80078cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078ce:	e043      	b.n	8007958 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078d0:	6839      	ldr	r1, [r7, #0]
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 fa7d 	bl	8007dd2 <USBD_CtlError>
            err++;
 80078d8:	7afb      	ldrb	r3, [r7, #11]
 80078da:	3301      	adds	r3, #1
 80078dc:	72fb      	strb	r3, [r7, #11]
          break;
 80078de:	e03b      	b.n	8007958 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078e6:	695b      	ldr	r3, [r3, #20]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d00b      	beq.n	8007904 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078f2:	695b      	ldr	r3, [r3, #20]
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	7c12      	ldrb	r2, [r2, #16]
 80078f8:	f107 0108 	add.w	r1, r7, #8
 80078fc:	4610      	mov	r0, r2
 80078fe:	4798      	blx	r3
 8007900:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007902:	e029      	b.n	8007958 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007904:	6839      	ldr	r1, [r7, #0]
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 fa63 	bl	8007dd2 <USBD_CtlError>
            err++;
 800790c:	7afb      	ldrb	r3, [r7, #11]
 800790e:	3301      	adds	r3, #1
 8007910:	72fb      	strb	r3, [r7, #11]
          break;
 8007912:	e021      	b.n	8007958 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800791a:	699b      	ldr	r3, [r3, #24]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d00b      	beq.n	8007938 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007926:	699b      	ldr	r3, [r3, #24]
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	7c12      	ldrb	r2, [r2, #16]
 800792c:	f107 0108 	add.w	r1, r7, #8
 8007930:	4610      	mov	r0, r2
 8007932:	4798      	blx	r3
 8007934:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007936:	e00f      	b.n	8007958 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007938:	6839      	ldr	r1, [r7, #0]
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 fa49 	bl	8007dd2 <USBD_CtlError>
            err++;
 8007940:	7afb      	ldrb	r3, [r7, #11]
 8007942:	3301      	adds	r3, #1
 8007944:	72fb      	strb	r3, [r7, #11]
          break;
 8007946:	e007      	b.n	8007958 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007948:	6839      	ldr	r1, [r7, #0]
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 fa41 	bl	8007dd2 <USBD_CtlError>
          err++;
 8007950:	7afb      	ldrb	r3, [r7, #11]
 8007952:	3301      	adds	r3, #1
 8007954:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007956:	bf00      	nop
      }
      break;
 8007958:	e037      	b.n	80079ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	7c1b      	ldrb	r3, [r3, #16]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d109      	bne.n	8007976 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800796a:	f107 0208 	add.w	r2, r7, #8
 800796e:	4610      	mov	r0, r2
 8007970:	4798      	blx	r3
 8007972:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007974:	e029      	b.n	80079ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007976:	6839      	ldr	r1, [r7, #0]
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 fa2a 	bl	8007dd2 <USBD_CtlError>
        err++;
 800797e:	7afb      	ldrb	r3, [r7, #11]
 8007980:	3301      	adds	r3, #1
 8007982:	72fb      	strb	r3, [r7, #11]
      break;
 8007984:	e021      	b.n	80079ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	7c1b      	ldrb	r3, [r3, #16]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d10d      	bne.n	80079aa <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007996:	f107 0208 	add.w	r2, r7, #8
 800799a:	4610      	mov	r0, r2
 800799c:	4798      	blx	r3
 800799e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	3301      	adds	r3, #1
 80079a4:	2207      	movs	r2, #7
 80079a6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80079a8:	e00f      	b.n	80079ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80079aa:	6839      	ldr	r1, [r7, #0]
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 fa10 	bl	8007dd2 <USBD_CtlError>
        err++;
 80079b2:	7afb      	ldrb	r3, [r7, #11]
 80079b4:	3301      	adds	r3, #1
 80079b6:	72fb      	strb	r3, [r7, #11]
      break;
 80079b8:	e007      	b.n	80079ca <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80079ba:	6839      	ldr	r1, [r7, #0]
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 fa08 	bl	8007dd2 <USBD_CtlError>
      err++;
 80079c2:	7afb      	ldrb	r3, [r7, #11]
 80079c4:	3301      	adds	r3, #1
 80079c6:	72fb      	strb	r3, [r7, #11]
      break;
 80079c8:	bf00      	nop
  }

  if (err != 0U)
 80079ca:	7afb      	ldrb	r3, [r7, #11]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d11e      	bne.n	8007a0e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	88db      	ldrh	r3, [r3, #6]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d016      	beq.n	8007a06 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80079d8:	893b      	ldrh	r3, [r7, #8]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d00e      	beq.n	80079fc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	88da      	ldrh	r2, [r3, #6]
 80079e2:	893b      	ldrh	r3, [r7, #8]
 80079e4:	4293      	cmp	r3, r2
 80079e6:	bf28      	it	cs
 80079e8:	4613      	movcs	r3, r2
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80079ee:	893b      	ldrh	r3, [r7, #8]
 80079f0:	461a      	mov	r2, r3
 80079f2:	68f9      	ldr	r1, [r7, #12]
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 fa5d 	bl	8007eb4 <USBD_CtlSendData>
 80079fa:	e009      	b.n	8007a10 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80079fc:	6839      	ldr	r1, [r7, #0]
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 f9e7 	bl	8007dd2 <USBD_CtlError>
 8007a04:	e004      	b.n	8007a10 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 faae 	bl	8007f68 <USBD_CtlSendStatus>
 8007a0c:	e000      	b.n	8007a10 <USBD_GetDescriptor+0x2cc>
    return;
 8007a0e:	bf00      	nop
  }
}
 8007a10:	3710      	adds	r7, #16
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop

08007a18 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b084      	sub	sp, #16
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	889b      	ldrh	r3, [r3, #4]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d131      	bne.n	8007a8e <USBD_SetAddress+0x76>
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	88db      	ldrh	r3, [r3, #6]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d12d      	bne.n	8007a8e <USBD_SetAddress+0x76>
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	885b      	ldrh	r3, [r3, #2]
 8007a36:	2b7f      	cmp	r3, #127	; 0x7f
 8007a38:	d829      	bhi.n	8007a8e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	885b      	ldrh	r3, [r3, #2]
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a44:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	2b03      	cmp	r3, #3
 8007a50:	d104      	bne.n	8007a5c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007a52:	6839      	ldr	r1, [r7, #0]
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 f9bc 	bl	8007dd2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a5a:	e01d      	b.n	8007a98 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	7bfa      	ldrb	r2, [r7, #15]
 8007a60:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007a64:	7bfb      	ldrb	r3, [r7, #15]
 8007a66:	4619      	mov	r1, r3
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f003 fd23 	bl	800b4b4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 fa7a 	bl	8007f68 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007a74:	7bfb      	ldrb	r3, [r7, #15]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d004      	beq.n	8007a84 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2202      	movs	r2, #2
 8007a7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a82:	e009      	b.n	8007a98 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a8c:	e004      	b.n	8007a98 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007a8e:	6839      	ldr	r1, [r7, #0]
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 f99e 	bl	8007dd2 <USBD_CtlError>
  }
}
 8007a96:	bf00      	nop
 8007a98:	bf00      	nop
 8007a9a:	3710      	adds	r7, #16
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	885b      	ldrh	r3, [r3, #2]
 8007ab2:	b2da      	uxtb	r2, r3
 8007ab4:	4b4e      	ldr	r3, [pc, #312]	; (8007bf0 <USBD_SetConfig+0x150>)
 8007ab6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007ab8:	4b4d      	ldr	r3, [pc, #308]	; (8007bf0 <USBD_SetConfig+0x150>)
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d905      	bls.n	8007acc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007ac0:	6839      	ldr	r1, [r7, #0]
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 f985 	bl	8007dd2 <USBD_CtlError>
    return USBD_FAIL;
 8007ac8:	2303      	movs	r3, #3
 8007aca:	e08c      	b.n	8007be6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	2b02      	cmp	r3, #2
 8007ad6:	d002      	beq.n	8007ade <USBD_SetConfig+0x3e>
 8007ad8:	2b03      	cmp	r3, #3
 8007ada:	d029      	beq.n	8007b30 <USBD_SetConfig+0x90>
 8007adc:	e075      	b.n	8007bca <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007ade:	4b44      	ldr	r3, [pc, #272]	; (8007bf0 <USBD_SetConfig+0x150>)
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d020      	beq.n	8007b28 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007ae6:	4b42      	ldr	r3, [pc, #264]	; (8007bf0 <USBD_SetConfig+0x150>)
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	461a      	mov	r2, r3
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007af0:	4b3f      	ldr	r3, [pc, #252]	; (8007bf0 <USBD_SetConfig+0x150>)
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	4619      	mov	r1, r3
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f7fe ffe7 	bl	8006aca <USBD_SetClassConfig>
 8007afc:	4603      	mov	r3, r0
 8007afe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007b00:	7bfb      	ldrb	r3, [r7, #15]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d008      	beq.n	8007b18 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007b06:	6839      	ldr	r1, [r7, #0]
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f000 f962 	bl	8007dd2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2202      	movs	r2, #2
 8007b12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007b16:	e065      	b.n	8007be4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 fa25 	bl	8007f68 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2203      	movs	r2, #3
 8007b22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007b26:	e05d      	b.n	8007be4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 fa1d 	bl	8007f68 <USBD_CtlSendStatus>
      break;
 8007b2e:	e059      	b.n	8007be4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007b30:	4b2f      	ldr	r3, [pc, #188]	; (8007bf0 <USBD_SetConfig+0x150>)
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d112      	bne.n	8007b5e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2202      	movs	r2, #2
 8007b3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007b40:	4b2b      	ldr	r3, [pc, #172]	; (8007bf0 <USBD_SetConfig+0x150>)
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	461a      	mov	r2, r3
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007b4a:	4b29      	ldr	r3, [pc, #164]	; (8007bf0 <USBD_SetConfig+0x150>)
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	4619      	mov	r1, r3
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f7fe ffd6 	bl	8006b02 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 fa06 	bl	8007f68 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007b5c:	e042      	b.n	8007be4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007b5e:	4b24      	ldr	r3, [pc, #144]	; (8007bf0 <USBD_SetConfig+0x150>)
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	461a      	mov	r2, r3
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d02a      	beq.n	8007bc2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	4619      	mov	r1, r3
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f7fe ffc4 	bl	8006b02 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007b7a:	4b1d      	ldr	r3, [pc, #116]	; (8007bf0 <USBD_SetConfig+0x150>)
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	461a      	mov	r2, r3
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007b84:	4b1a      	ldr	r3, [pc, #104]	; (8007bf0 <USBD_SetConfig+0x150>)
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	4619      	mov	r1, r3
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f7fe ff9d 	bl	8006aca <USBD_SetClassConfig>
 8007b90:	4603      	mov	r3, r0
 8007b92:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007b94:	7bfb      	ldrb	r3, [r7, #15]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d00f      	beq.n	8007bba <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007b9a:	6839      	ldr	r1, [r7, #0]
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 f918 	bl	8007dd2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	4619      	mov	r1, r3
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f7fe ffa9 	bl	8006b02 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2202      	movs	r2, #2
 8007bb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007bb8:	e014      	b.n	8007be4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 f9d4 	bl	8007f68 <USBD_CtlSendStatus>
      break;
 8007bc0:	e010      	b.n	8007be4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 f9d0 	bl	8007f68 <USBD_CtlSendStatus>
      break;
 8007bc8:	e00c      	b.n	8007be4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007bca:	6839      	ldr	r1, [r7, #0]
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 f900 	bl	8007dd2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007bd2:	4b07      	ldr	r3, [pc, #28]	; (8007bf0 <USBD_SetConfig+0x150>)
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f7fe ff92 	bl	8006b02 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007bde:	2303      	movs	r3, #3
 8007be0:	73fb      	strb	r3, [r7, #15]
      break;
 8007be2:	bf00      	nop
  }

  return ret;
 8007be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3710      	adds	r7, #16
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	20000314 	.word	0x20000314

08007bf4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	88db      	ldrh	r3, [r3, #6]
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	d004      	beq.n	8007c10 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007c06:	6839      	ldr	r1, [r7, #0]
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 f8e2 	bl	8007dd2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007c0e:	e023      	b.n	8007c58 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	2b02      	cmp	r3, #2
 8007c1a:	dc02      	bgt.n	8007c22 <USBD_GetConfig+0x2e>
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	dc03      	bgt.n	8007c28 <USBD_GetConfig+0x34>
 8007c20:	e015      	b.n	8007c4e <USBD_GetConfig+0x5a>
 8007c22:	2b03      	cmp	r3, #3
 8007c24:	d00b      	beq.n	8007c3e <USBD_GetConfig+0x4a>
 8007c26:	e012      	b.n	8007c4e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	3308      	adds	r3, #8
 8007c32:	2201      	movs	r2, #1
 8007c34:	4619      	mov	r1, r3
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 f93c 	bl	8007eb4 <USBD_CtlSendData>
        break;
 8007c3c:	e00c      	b.n	8007c58 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	3304      	adds	r3, #4
 8007c42:	2201      	movs	r2, #1
 8007c44:	4619      	mov	r1, r3
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 f934 	bl	8007eb4 <USBD_CtlSendData>
        break;
 8007c4c:	e004      	b.n	8007c58 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007c4e:	6839      	ldr	r1, [r7, #0]
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 f8be 	bl	8007dd2 <USBD_CtlError>
        break;
 8007c56:	bf00      	nop
}
 8007c58:	bf00      	nop
 8007c5a:	3708      	adds	r7, #8
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b082      	sub	sp, #8
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	3b01      	subs	r3, #1
 8007c74:	2b02      	cmp	r3, #2
 8007c76:	d81e      	bhi.n	8007cb6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	88db      	ldrh	r3, [r3, #6]
 8007c7c:	2b02      	cmp	r3, #2
 8007c7e:	d004      	beq.n	8007c8a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007c80:	6839      	ldr	r1, [r7, #0]
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 f8a5 	bl	8007dd2 <USBD_CtlError>
        break;
 8007c88:	e01a      	b.n	8007cc0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d005      	beq.n	8007ca6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	f043 0202 	orr.w	r2, r3, #2
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	330c      	adds	r3, #12
 8007caa:	2202      	movs	r2, #2
 8007cac:	4619      	mov	r1, r3
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 f900 	bl	8007eb4 <USBD_CtlSendData>
      break;
 8007cb4:	e004      	b.n	8007cc0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007cb6:	6839      	ldr	r1, [r7, #0]
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 f88a 	bl	8007dd2 <USBD_CtlError>
      break;
 8007cbe:	bf00      	nop
  }
}
 8007cc0:	bf00      	nop
 8007cc2:	3708      	adds	r7, #8
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	885b      	ldrh	r3, [r3, #2]
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d107      	bne.n	8007cea <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2201      	movs	r2, #1
 8007cde:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 f940 	bl	8007f68 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007ce8:	e013      	b.n	8007d12 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	885b      	ldrh	r3, [r3, #2]
 8007cee:	2b02      	cmp	r3, #2
 8007cf0:	d10b      	bne.n	8007d0a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	889b      	ldrh	r3, [r3, #4]
 8007cf6:	0a1b      	lsrs	r3, r3, #8
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	b2da      	uxtb	r2, r3
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 f930 	bl	8007f68 <USBD_CtlSendStatus>
}
 8007d08:	e003      	b.n	8007d12 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007d0a:	6839      	ldr	r1, [r7, #0]
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 f860 	bl	8007dd2 <USBD_CtlError>
}
 8007d12:	bf00      	nop
 8007d14:	3708      	adds	r7, #8
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}

08007d1a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d1a:	b580      	push	{r7, lr}
 8007d1c:	b082      	sub	sp, #8
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
 8007d22:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	3b01      	subs	r3, #1
 8007d2e:	2b02      	cmp	r3, #2
 8007d30:	d80b      	bhi.n	8007d4a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	885b      	ldrh	r3, [r3, #2]
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d10c      	bne.n	8007d54 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 f910 	bl	8007f68 <USBD_CtlSendStatus>
      }
      break;
 8007d48:	e004      	b.n	8007d54 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007d4a:	6839      	ldr	r1, [r7, #0]
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 f840 	bl	8007dd2 <USBD_CtlError>
      break;
 8007d52:	e000      	b.n	8007d56 <USBD_ClrFeature+0x3c>
      break;
 8007d54:	bf00      	nop
  }
}
 8007d56:	bf00      	nop
 8007d58:	3708      	adds	r7, #8
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}

08007d5e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007d5e:	b580      	push	{r7, lr}
 8007d60:	b084      	sub	sp, #16
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
 8007d66:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	781a      	ldrb	r2, [r3, #0]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	3301      	adds	r3, #1
 8007d78:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	781a      	ldrb	r2, [r3, #0]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	3301      	adds	r3, #1
 8007d86:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007d88:	68f8      	ldr	r0, [r7, #12]
 8007d8a:	f7ff fa41 	bl	8007210 <SWAPBYTE>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	461a      	mov	r2, r3
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	3301      	adds	r3, #1
 8007d9a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	3301      	adds	r3, #1
 8007da0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007da2:	68f8      	ldr	r0, [r7, #12]
 8007da4:	f7ff fa34 	bl	8007210 <SWAPBYTE>
 8007da8:	4603      	mov	r3, r0
 8007daa:	461a      	mov	r2, r3
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	3301      	adds	r3, #1
 8007db4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	3301      	adds	r3, #1
 8007dba:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007dbc:	68f8      	ldr	r0, [r7, #12]
 8007dbe:	f7ff fa27 	bl	8007210 <SWAPBYTE>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	80da      	strh	r2, [r3, #6]
}
 8007dca:	bf00      	nop
 8007dcc:	3710      	adds	r7, #16
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b082      	sub	sp, #8
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
 8007dda:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ddc:	2180      	movs	r1, #128	; 0x80
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f003 fafe 	bl	800b3e0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007de4:	2100      	movs	r1, #0
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f003 fafa 	bl	800b3e0 <USBD_LL_StallEP>
}
 8007dec:	bf00      	nop
 8007dee:	3708      	adds	r7, #8
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b086      	sub	sp, #24
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007e00:	2300      	movs	r3, #0
 8007e02:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d036      	beq.n	8007e78 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007e0e:	6938      	ldr	r0, [r7, #16]
 8007e10:	f000 f836 	bl	8007e80 <USBD_GetLen>
 8007e14:	4603      	mov	r3, r0
 8007e16:	3301      	adds	r3, #1
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	005b      	lsls	r3, r3, #1
 8007e1c:	b29a      	uxth	r2, r3
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007e22:	7dfb      	ldrb	r3, [r7, #23]
 8007e24:	68ba      	ldr	r2, [r7, #8]
 8007e26:	4413      	add	r3, r2
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	7812      	ldrb	r2, [r2, #0]
 8007e2c:	701a      	strb	r2, [r3, #0]
  idx++;
 8007e2e:	7dfb      	ldrb	r3, [r7, #23]
 8007e30:	3301      	adds	r3, #1
 8007e32:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007e34:	7dfb      	ldrb	r3, [r7, #23]
 8007e36:	68ba      	ldr	r2, [r7, #8]
 8007e38:	4413      	add	r3, r2
 8007e3a:	2203      	movs	r2, #3
 8007e3c:	701a      	strb	r2, [r3, #0]
  idx++;
 8007e3e:	7dfb      	ldrb	r3, [r7, #23]
 8007e40:	3301      	adds	r3, #1
 8007e42:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007e44:	e013      	b.n	8007e6e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007e46:	7dfb      	ldrb	r3, [r7, #23]
 8007e48:	68ba      	ldr	r2, [r7, #8]
 8007e4a:	4413      	add	r3, r2
 8007e4c:	693a      	ldr	r2, [r7, #16]
 8007e4e:	7812      	ldrb	r2, [r2, #0]
 8007e50:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	3301      	adds	r3, #1
 8007e56:	613b      	str	r3, [r7, #16]
    idx++;
 8007e58:	7dfb      	ldrb	r3, [r7, #23]
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007e5e:	7dfb      	ldrb	r3, [r7, #23]
 8007e60:	68ba      	ldr	r2, [r7, #8]
 8007e62:	4413      	add	r3, r2
 8007e64:	2200      	movs	r2, #0
 8007e66:	701a      	strb	r2, [r3, #0]
    idx++;
 8007e68:	7dfb      	ldrb	r3, [r7, #23]
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d1e7      	bne.n	8007e46 <USBD_GetString+0x52>
 8007e76:	e000      	b.n	8007e7a <USBD_GetString+0x86>
    return;
 8007e78:	bf00      	nop
  }
}
 8007e7a:	3718      	adds	r7, #24
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b085      	sub	sp, #20
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007e90:	e005      	b.n	8007e9e <USBD_GetLen+0x1e>
  {
    len++;
 8007e92:	7bfb      	ldrb	r3, [r7, #15]
 8007e94:	3301      	adds	r3, #1
 8007e96:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d1f5      	bne.n	8007e92 <USBD_GetLen+0x12>
  }

  return len;
 8007ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3714      	adds	r7, #20
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	60f8      	str	r0, [r7, #12]
 8007ebc:	60b9      	str	r1, [r7, #8]
 8007ebe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2202      	movs	r2, #2
 8007ec4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	687a      	ldr	r2, [r7, #4]
 8007ecc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	68ba      	ldr	r2, [r7, #8]
 8007ed8:	2100      	movs	r1, #0
 8007eda:	68f8      	ldr	r0, [r7, #12]
 8007edc:	f003 fb09 	bl	800b4f2 <USBD_LL_Transmit>

  return USBD_OK;
 8007ee0:	2300      	movs	r3, #0
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3710      	adds	r7, #16
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b084      	sub	sp, #16
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	60f8      	str	r0, [r7, #12]
 8007ef2:	60b9      	str	r1, [r7, #8]
 8007ef4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	68ba      	ldr	r2, [r7, #8]
 8007efa:	2100      	movs	r1, #0
 8007efc:	68f8      	ldr	r0, [r7, #12]
 8007efe:	f003 faf8 	bl	800b4f2 <USBD_LL_Transmit>

  return USBD_OK;
 8007f02:	2300      	movs	r3, #0
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3710      	adds	r7, #16
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2203      	movs	r2, #3
 8007f1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	68ba      	ldr	r2, [r7, #8]
 8007f34:	2100      	movs	r1, #0
 8007f36:	68f8      	ldr	r0, [r7, #12]
 8007f38:	f003 fafc 	bl	800b534 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f3c:	2300      	movs	r3, #0
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3710      	adds	r7, #16
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}

08007f46 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007f46:	b580      	push	{r7, lr}
 8007f48:	b084      	sub	sp, #16
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	60f8      	str	r0, [r7, #12]
 8007f4e:	60b9      	str	r1, [r7, #8]
 8007f50:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	68ba      	ldr	r2, [r7, #8]
 8007f56:	2100      	movs	r1, #0
 8007f58:	68f8      	ldr	r0, [r7, #12]
 8007f5a:	f003 faeb 	bl	800b534 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f5e:	2300      	movs	r3, #0
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3710      	adds	r7, #16
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b082      	sub	sp, #8
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2204      	movs	r2, #4
 8007f74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007f78:	2300      	movs	r3, #0
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	2100      	movs	r1, #0
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f003 fab7 	bl	800b4f2 <USBD_LL_Transmit>

  return USBD_OK;
 8007f84:	2300      	movs	r3, #0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3708      	adds	r7, #8
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}

08007f8e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007f8e:	b580      	push	{r7, lr}
 8007f90:	b082      	sub	sp, #8
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2205      	movs	r2, #5
 8007f9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	2100      	movs	r1, #0
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f003 fac5 	bl	800b534 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3708      	adds	r7, #8
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <__NVIC_SetPriority>:
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	4603      	mov	r3, r0
 8007fbc:	6039      	str	r1, [r7, #0]
 8007fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	db0a      	blt.n	8007fde <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	b2da      	uxtb	r2, r3
 8007fcc:	490c      	ldr	r1, [pc, #48]	; (8008000 <__NVIC_SetPriority+0x4c>)
 8007fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fd2:	0112      	lsls	r2, r2, #4
 8007fd4:	b2d2      	uxtb	r2, r2
 8007fd6:	440b      	add	r3, r1
 8007fd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007fdc:	e00a      	b.n	8007ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	b2da      	uxtb	r2, r3
 8007fe2:	4908      	ldr	r1, [pc, #32]	; (8008004 <__NVIC_SetPriority+0x50>)
 8007fe4:	79fb      	ldrb	r3, [r7, #7]
 8007fe6:	f003 030f 	and.w	r3, r3, #15
 8007fea:	3b04      	subs	r3, #4
 8007fec:	0112      	lsls	r2, r2, #4
 8007fee:	b2d2      	uxtb	r2, r2
 8007ff0:	440b      	add	r3, r1
 8007ff2:	761a      	strb	r2, [r3, #24]
}
 8007ff4:	bf00      	nop
 8007ff6:	370c      	adds	r7, #12
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr
 8008000:	e000e100 	.word	0xe000e100
 8008004:	e000ed00 	.word	0xe000ed00

08008008 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008008:	b580      	push	{r7, lr}
 800800a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800800c:	4b05      	ldr	r3, [pc, #20]	; (8008024 <SysTick_Handler+0x1c>)
 800800e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008010:	f001 fd62 	bl	8009ad8 <xTaskGetSchedulerState>
 8008014:	4603      	mov	r3, r0
 8008016:	2b01      	cmp	r3, #1
 8008018:	d001      	beq.n	800801e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800801a:	f002 fb4d 	bl	800a6b8 <xPortSysTickHandler>
  }
}
 800801e:	bf00      	nop
 8008020:	bd80      	pop	{r7, pc}
 8008022:	bf00      	nop
 8008024:	e000e010 	.word	0xe000e010

08008028 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008028:	b580      	push	{r7, lr}
 800802a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800802c:	2100      	movs	r1, #0
 800802e:	f06f 0004 	mvn.w	r0, #4
 8008032:	f7ff ffbf 	bl	8007fb4 <__NVIC_SetPriority>
#endif
}
 8008036:	bf00      	nop
 8008038:	bd80      	pop	{r7, pc}
	...

0800803c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008042:	f3ef 8305 	mrs	r3, IPSR
 8008046:	603b      	str	r3, [r7, #0]
  return(result);
 8008048:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800804a:	2b00      	cmp	r3, #0
 800804c:	d003      	beq.n	8008056 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800804e:	f06f 0305 	mvn.w	r3, #5
 8008052:	607b      	str	r3, [r7, #4]
 8008054:	e00c      	b.n	8008070 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008056:	4b0a      	ldr	r3, [pc, #40]	; (8008080 <osKernelInitialize+0x44>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d105      	bne.n	800806a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800805e:	4b08      	ldr	r3, [pc, #32]	; (8008080 <osKernelInitialize+0x44>)
 8008060:	2201      	movs	r2, #1
 8008062:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008064:	2300      	movs	r3, #0
 8008066:	607b      	str	r3, [r7, #4]
 8008068:	e002      	b.n	8008070 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800806a:	f04f 33ff 	mov.w	r3, #4294967295
 800806e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008070:	687b      	ldr	r3, [r7, #4]
}
 8008072:	4618      	mov	r0, r3
 8008074:	370c      	adds	r7, #12
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr
 800807e:	bf00      	nop
 8008080:	20000318 	.word	0x20000318

08008084 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800808a:	f3ef 8305 	mrs	r3, IPSR
 800808e:	603b      	str	r3, [r7, #0]
  return(result);
 8008090:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008092:	2b00      	cmp	r3, #0
 8008094:	d003      	beq.n	800809e <osKernelStart+0x1a>
    stat = osErrorISR;
 8008096:	f06f 0305 	mvn.w	r3, #5
 800809a:	607b      	str	r3, [r7, #4]
 800809c:	e010      	b.n	80080c0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800809e:	4b0b      	ldr	r3, [pc, #44]	; (80080cc <osKernelStart+0x48>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d109      	bne.n	80080ba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80080a6:	f7ff ffbf 	bl	8008028 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80080aa:	4b08      	ldr	r3, [pc, #32]	; (80080cc <osKernelStart+0x48>)
 80080ac:	2202      	movs	r2, #2
 80080ae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80080b0:	f001 f8b6 	bl	8009220 <vTaskStartScheduler>
      stat = osOK;
 80080b4:	2300      	movs	r3, #0
 80080b6:	607b      	str	r3, [r7, #4]
 80080b8:	e002      	b.n	80080c0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80080ba:	f04f 33ff 	mov.w	r3, #4294967295
 80080be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80080c0:	687b      	ldr	r3, [r7, #4]
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3708      	adds	r7, #8
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
 80080ca:	bf00      	nop
 80080cc:	20000318 	.word	0x20000318

080080d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b08e      	sub	sp, #56	; 0x38
 80080d4:	af04      	add	r7, sp, #16
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	60b9      	str	r1, [r7, #8]
 80080da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80080dc:	2300      	movs	r3, #0
 80080de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080e0:	f3ef 8305 	mrs	r3, IPSR
 80080e4:	617b      	str	r3, [r7, #20]
  return(result);
 80080e6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d17e      	bne.n	80081ea <osThreadNew+0x11a>
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d07b      	beq.n	80081ea <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80080f2:	2380      	movs	r3, #128	; 0x80
 80080f4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80080f6:	2318      	movs	r3, #24
 80080f8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80080fa:	2300      	movs	r3, #0
 80080fc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80080fe:	f04f 33ff 	mov.w	r3, #4294967295
 8008102:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d045      	beq.n	8008196 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d002      	beq.n	8008118 <osThreadNew+0x48>
        name = attr->name;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	699b      	ldr	r3, [r3, #24]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d002      	beq.n	8008126 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	699b      	ldr	r3, [r3, #24]
 8008124:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008126:	69fb      	ldr	r3, [r7, #28]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d008      	beq.n	800813e <osThreadNew+0x6e>
 800812c:	69fb      	ldr	r3, [r7, #28]
 800812e:	2b38      	cmp	r3, #56	; 0x38
 8008130:	d805      	bhi.n	800813e <osThreadNew+0x6e>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	f003 0301 	and.w	r3, r3, #1
 800813a:	2b00      	cmp	r3, #0
 800813c:	d001      	beq.n	8008142 <osThreadNew+0x72>
        return (NULL);
 800813e:	2300      	movs	r3, #0
 8008140:	e054      	b.n	80081ec <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	695b      	ldr	r3, [r3, #20]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d003      	beq.n	8008152 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	695b      	ldr	r3, [r3, #20]
 800814e:	089b      	lsrs	r3, r3, #2
 8008150:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d00e      	beq.n	8008178 <osThreadNew+0xa8>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	68db      	ldr	r3, [r3, #12]
 800815e:	2bbb      	cmp	r3, #187	; 0xbb
 8008160:	d90a      	bls.n	8008178 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008166:	2b00      	cmp	r3, #0
 8008168:	d006      	beq.n	8008178 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	695b      	ldr	r3, [r3, #20]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d002      	beq.n	8008178 <osThreadNew+0xa8>
        mem = 1;
 8008172:	2301      	movs	r3, #1
 8008174:	61bb      	str	r3, [r7, #24]
 8008176:	e010      	b.n	800819a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d10c      	bne.n	800819a <osThreadNew+0xca>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d108      	bne.n	800819a <osThreadNew+0xca>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	691b      	ldr	r3, [r3, #16]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d104      	bne.n	800819a <osThreadNew+0xca>
          mem = 0;
 8008190:	2300      	movs	r3, #0
 8008192:	61bb      	str	r3, [r7, #24]
 8008194:	e001      	b.n	800819a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008196:	2300      	movs	r3, #0
 8008198:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	2b01      	cmp	r3, #1
 800819e:	d110      	bne.n	80081c2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80081a4:	687a      	ldr	r2, [r7, #4]
 80081a6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80081a8:	9202      	str	r2, [sp, #8]
 80081aa:	9301      	str	r3, [sp, #4]
 80081ac:	69fb      	ldr	r3, [r7, #28]
 80081ae:	9300      	str	r3, [sp, #0]
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	6a3a      	ldr	r2, [r7, #32]
 80081b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80081b6:	68f8      	ldr	r0, [r7, #12]
 80081b8:	f000 fe46 	bl	8008e48 <xTaskCreateStatic>
 80081bc:	4603      	mov	r3, r0
 80081be:	613b      	str	r3, [r7, #16]
 80081c0:	e013      	b.n	80081ea <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80081c2:	69bb      	ldr	r3, [r7, #24]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d110      	bne.n	80081ea <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80081c8:	6a3b      	ldr	r3, [r7, #32]
 80081ca:	b29a      	uxth	r2, r3
 80081cc:	f107 0310 	add.w	r3, r7, #16
 80081d0:	9301      	str	r3, [sp, #4]
 80081d2:	69fb      	ldr	r3, [r7, #28]
 80081d4:	9300      	str	r3, [sp, #0]
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80081da:	68f8      	ldr	r0, [r7, #12]
 80081dc:	f000 fe91 	bl	8008f02 <xTaskCreate>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d001      	beq.n	80081ea <osThreadNew+0x11a>
            hTask = NULL;
 80081e6:	2300      	movs	r3, #0
 80081e8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80081ea:	693b      	ldr	r3, [r7, #16]
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3728      	adds	r7, #40	; 0x28
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081fc:	f3ef 8305 	mrs	r3, IPSR
 8008200:	60bb      	str	r3, [r7, #8]
  return(result);
 8008202:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008204:	2b00      	cmp	r3, #0
 8008206:	d003      	beq.n	8008210 <osDelay+0x1c>
    stat = osErrorISR;
 8008208:	f06f 0305 	mvn.w	r3, #5
 800820c:	60fb      	str	r3, [r7, #12]
 800820e:	e007      	b.n	8008220 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008210:	2300      	movs	r3, #0
 8008212:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d002      	beq.n	8008220 <osDelay+0x2c>
      vTaskDelay(ticks);
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f000 ffcc 	bl	80091b8 <vTaskDelay>
    }
  }

  return (stat);
 8008220:	68fb      	ldr	r3, [r7, #12]
}
 8008222:	4618      	mov	r0, r3
 8008224:	3710      	adds	r7, #16
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
	...

0800822c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800822c:	b480      	push	{r7}
 800822e:	b085      	sub	sp, #20
 8008230:	af00      	add	r7, sp, #0
 8008232:	60f8      	str	r0, [r7, #12]
 8008234:	60b9      	str	r1, [r7, #8]
 8008236:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	4a07      	ldr	r2, [pc, #28]	; (8008258 <vApplicationGetIdleTaskMemory+0x2c>)
 800823c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	4a06      	ldr	r2, [pc, #24]	; (800825c <vApplicationGetIdleTaskMemory+0x30>)
 8008242:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2280      	movs	r2, #128	; 0x80
 8008248:	601a      	str	r2, [r3, #0]
}
 800824a:	bf00      	nop
 800824c:	3714      	adds	r7, #20
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr
 8008256:	bf00      	nop
 8008258:	2000031c 	.word	0x2000031c
 800825c:	200003d8 	.word	0x200003d8

08008260 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008260:	b480      	push	{r7}
 8008262:	b085      	sub	sp, #20
 8008264:	af00      	add	r7, sp, #0
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	60b9      	str	r1, [r7, #8]
 800826a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	4a07      	ldr	r2, [pc, #28]	; (800828c <vApplicationGetTimerTaskMemory+0x2c>)
 8008270:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	4a06      	ldr	r2, [pc, #24]	; (8008290 <vApplicationGetTimerTaskMemory+0x30>)
 8008276:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800827e:	601a      	str	r2, [r3, #0]
}
 8008280:	bf00      	nop
 8008282:	3714      	adds	r7, #20
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr
 800828c:	200005d8 	.word	0x200005d8
 8008290:	20000694 	.word	0x20000694

08008294 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f103 0208 	add.w	r2, r3, #8
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f04f 32ff 	mov.w	r2, #4294967295
 80082ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f103 0208 	add.w	r2, r3, #8
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f103 0208 	add.w	r2, r3, #8
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2200      	movs	r2, #0
 80082c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80082c8:	bf00      	nop
 80082ca:	370c      	adds	r7, #12
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2200      	movs	r2, #0
 80082e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80082e2:	bf00      	nop
 80082e4:	370c      	adds	r7, #12
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr

080082ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80082ee:	b480      	push	{r7}
 80082f0:	b085      	sub	sp, #20
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
 80082f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	68fa      	ldr	r2, [r7, #12]
 8008302:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	689a      	ldr	r2, [r3, #8]
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	683a      	ldr	r2, [r7, #0]
 8008312:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	683a      	ldr	r2, [r7, #0]
 8008318:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	1c5a      	adds	r2, r3, #1
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	601a      	str	r2, [r3, #0]
}
 800832a:	bf00      	nop
 800832c:	3714      	adds	r7, #20
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr

08008336 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008336:	b480      	push	{r7}
 8008338:	b085      	sub	sp, #20
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
 800833e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800834c:	d103      	bne.n	8008356 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	691b      	ldr	r3, [r3, #16]
 8008352:	60fb      	str	r3, [r7, #12]
 8008354:	e00c      	b.n	8008370 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	3308      	adds	r3, #8
 800835a:	60fb      	str	r3, [r7, #12]
 800835c:	e002      	b.n	8008364 <vListInsert+0x2e>
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	60fb      	str	r3, [r7, #12]
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	68ba      	ldr	r2, [r7, #8]
 800836c:	429a      	cmp	r2, r3
 800836e:	d2f6      	bcs.n	800835e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	685a      	ldr	r2, [r3, #4]
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	683a      	ldr	r2, [r7, #0]
 800837e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	68fa      	ldr	r2, [r7, #12]
 8008384:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	683a      	ldr	r2, [r7, #0]
 800838a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	1c5a      	adds	r2, r3, #1
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	601a      	str	r2, [r3, #0]
}
 800839c:	bf00      	nop
 800839e:	3714      	adds	r7, #20
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80083a8:	b480      	push	{r7}
 80083aa:	b085      	sub	sp, #20
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	691b      	ldr	r3, [r3, #16]
 80083b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	6892      	ldr	r2, [r2, #8]
 80083be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	6852      	ldr	r2, [r2, #4]
 80083c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d103      	bne.n	80083dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	689a      	ldr	r2, [r3, #8]
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2200      	movs	r2, #0
 80083e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	1e5a      	subs	r2, r3, #1
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3714      	adds	r7, #20
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b084      	sub	sp, #16
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d10a      	bne.n	8008426 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008414:	f383 8811 	msr	BASEPRI, r3
 8008418:	f3bf 8f6f 	isb	sy
 800841c:	f3bf 8f4f 	dsb	sy
 8008420:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008422:	bf00      	nop
 8008424:	e7fe      	b.n	8008424 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008426:	f002 f8b5 	bl	800a594 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008432:	68f9      	ldr	r1, [r7, #12]
 8008434:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008436:	fb01 f303 	mul.w	r3, r1, r3
 800843a:	441a      	add	r2, r3
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2200      	movs	r2, #0
 8008444:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681a      	ldr	r2, [r3, #0]
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008456:	3b01      	subs	r3, #1
 8008458:	68f9      	ldr	r1, [r7, #12]
 800845a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800845c:	fb01 f303 	mul.w	r3, r1, r3
 8008460:	441a      	add	r2, r3
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	22ff      	movs	r2, #255	; 0xff
 800846a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	22ff      	movs	r2, #255	; 0xff
 8008472:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d114      	bne.n	80084a6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	691b      	ldr	r3, [r3, #16]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d01a      	beq.n	80084ba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	3310      	adds	r3, #16
 8008488:	4618      	mov	r0, r3
 800848a:	f001 f963 	bl	8009754 <xTaskRemoveFromEventList>
 800848e:	4603      	mov	r3, r0
 8008490:	2b00      	cmp	r3, #0
 8008492:	d012      	beq.n	80084ba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008494:	4b0c      	ldr	r3, [pc, #48]	; (80084c8 <xQueueGenericReset+0xcc>)
 8008496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800849a:	601a      	str	r2, [r3, #0]
 800849c:	f3bf 8f4f 	dsb	sy
 80084a0:	f3bf 8f6f 	isb	sy
 80084a4:	e009      	b.n	80084ba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	3310      	adds	r3, #16
 80084aa:	4618      	mov	r0, r3
 80084ac:	f7ff fef2 	bl	8008294 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	3324      	adds	r3, #36	; 0x24
 80084b4:	4618      	mov	r0, r3
 80084b6:	f7ff feed 	bl	8008294 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80084ba:	f002 f89b 	bl	800a5f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80084be:	2301      	movs	r3, #1
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3710      	adds	r7, #16
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}
 80084c8:	e000ed04 	.word	0xe000ed04

080084cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b08e      	sub	sp, #56	; 0x38
 80084d0:	af02      	add	r7, sp, #8
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	60b9      	str	r1, [r7, #8]
 80084d6:	607a      	str	r2, [r7, #4]
 80084d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d10a      	bne.n	80084f6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80084e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e4:	f383 8811 	msr	BASEPRI, r3
 80084e8:	f3bf 8f6f 	isb	sy
 80084ec:	f3bf 8f4f 	dsb	sy
 80084f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80084f2:	bf00      	nop
 80084f4:	e7fe      	b.n	80084f4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d10a      	bne.n	8008512 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80084fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008500:	f383 8811 	msr	BASEPRI, r3
 8008504:	f3bf 8f6f 	isb	sy
 8008508:	f3bf 8f4f 	dsb	sy
 800850c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800850e:	bf00      	nop
 8008510:	e7fe      	b.n	8008510 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d002      	beq.n	800851e <xQueueGenericCreateStatic+0x52>
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d001      	beq.n	8008522 <xQueueGenericCreateStatic+0x56>
 800851e:	2301      	movs	r3, #1
 8008520:	e000      	b.n	8008524 <xQueueGenericCreateStatic+0x58>
 8008522:	2300      	movs	r3, #0
 8008524:	2b00      	cmp	r3, #0
 8008526:	d10a      	bne.n	800853e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800852c:	f383 8811 	msr	BASEPRI, r3
 8008530:	f3bf 8f6f 	isb	sy
 8008534:	f3bf 8f4f 	dsb	sy
 8008538:	623b      	str	r3, [r7, #32]
}
 800853a:	bf00      	nop
 800853c:	e7fe      	b.n	800853c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d102      	bne.n	800854a <xQueueGenericCreateStatic+0x7e>
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d101      	bne.n	800854e <xQueueGenericCreateStatic+0x82>
 800854a:	2301      	movs	r3, #1
 800854c:	e000      	b.n	8008550 <xQueueGenericCreateStatic+0x84>
 800854e:	2300      	movs	r3, #0
 8008550:	2b00      	cmp	r3, #0
 8008552:	d10a      	bne.n	800856a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008558:	f383 8811 	msr	BASEPRI, r3
 800855c:	f3bf 8f6f 	isb	sy
 8008560:	f3bf 8f4f 	dsb	sy
 8008564:	61fb      	str	r3, [r7, #28]
}
 8008566:	bf00      	nop
 8008568:	e7fe      	b.n	8008568 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800856a:	2350      	movs	r3, #80	; 0x50
 800856c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	2b50      	cmp	r3, #80	; 0x50
 8008572:	d00a      	beq.n	800858a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008578:	f383 8811 	msr	BASEPRI, r3
 800857c:	f3bf 8f6f 	isb	sy
 8008580:	f3bf 8f4f 	dsb	sy
 8008584:	61bb      	str	r3, [r7, #24]
}
 8008586:	bf00      	nop
 8008588:	e7fe      	b.n	8008588 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800858a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008592:	2b00      	cmp	r3, #0
 8008594:	d00d      	beq.n	80085b2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008598:	2201      	movs	r2, #1
 800859a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800859e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80085a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a4:	9300      	str	r3, [sp, #0]
 80085a6:	4613      	mov	r3, r2
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	68b9      	ldr	r1, [r7, #8]
 80085ac:	68f8      	ldr	r0, [r7, #12]
 80085ae:	f000 f83f 	bl	8008630 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80085b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3730      	adds	r7, #48	; 0x30
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b08a      	sub	sp, #40	; 0x28
 80085c0:	af02      	add	r7, sp, #8
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	4613      	mov	r3, r2
 80085c8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d10a      	bne.n	80085e6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80085d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d4:	f383 8811 	msr	BASEPRI, r3
 80085d8:	f3bf 8f6f 	isb	sy
 80085dc:	f3bf 8f4f 	dsb	sy
 80085e0:	613b      	str	r3, [r7, #16]
}
 80085e2:	bf00      	nop
 80085e4:	e7fe      	b.n	80085e4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	68ba      	ldr	r2, [r7, #8]
 80085ea:	fb02 f303 	mul.w	r3, r2, r3
 80085ee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80085f0:	69fb      	ldr	r3, [r7, #28]
 80085f2:	3350      	adds	r3, #80	; 0x50
 80085f4:	4618      	mov	r0, r3
 80085f6:	f002 f8ef 	bl	800a7d8 <pvPortMalloc>
 80085fa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80085fc:	69bb      	ldr	r3, [r7, #24]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d011      	beq.n	8008626 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008602:	69bb      	ldr	r3, [r7, #24]
 8008604:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	3350      	adds	r3, #80	; 0x50
 800860a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800860c:	69bb      	ldr	r3, [r7, #24]
 800860e:	2200      	movs	r2, #0
 8008610:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008614:	79fa      	ldrb	r2, [r7, #7]
 8008616:	69bb      	ldr	r3, [r7, #24]
 8008618:	9300      	str	r3, [sp, #0]
 800861a:	4613      	mov	r3, r2
 800861c:	697a      	ldr	r2, [r7, #20]
 800861e:	68b9      	ldr	r1, [r7, #8]
 8008620:	68f8      	ldr	r0, [r7, #12]
 8008622:	f000 f805 	bl	8008630 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008626:	69bb      	ldr	r3, [r7, #24]
	}
 8008628:	4618      	mov	r0, r3
 800862a:	3720      	adds	r7, #32
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	60b9      	str	r1, [r7, #8]
 800863a:	607a      	str	r2, [r7, #4]
 800863c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d103      	bne.n	800864c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008644:	69bb      	ldr	r3, [r7, #24]
 8008646:	69ba      	ldr	r2, [r7, #24]
 8008648:	601a      	str	r2, [r3, #0]
 800864a:	e002      	b.n	8008652 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800864c:	69bb      	ldr	r3, [r7, #24]
 800864e:	687a      	ldr	r2, [r7, #4]
 8008650:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008652:	69bb      	ldr	r3, [r7, #24]
 8008654:	68fa      	ldr	r2, [r7, #12]
 8008656:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008658:	69bb      	ldr	r3, [r7, #24]
 800865a:	68ba      	ldr	r2, [r7, #8]
 800865c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800865e:	2101      	movs	r1, #1
 8008660:	69b8      	ldr	r0, [r7, #24]
 8008662:	f7ff fecb 	bl	80083fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	78fa      	ldrb	r2, [r7, #3]
 800866a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800866e:	bf00      	nop
 8008670:	3710      	adds	r7, #16
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
	...

08008678 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b08e      	sub	sp, #56	; 0x38
 800867c:	af00      	add	r7, sp, #0
 800867e:	60f8      	str	r0, [r7, #12]
 8008680:	60b9      	str	r1, [r7, #8]
 8008682:	607a      	str	r2, [r7, #4]
 8008684:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008686:	2300      	movs	r3, #0
 8008688:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800868e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008690:	2b00      	cmp	r3, #0
 8008692:	d10a      	bne.n	80086aa <xQueueGenericSend+0x32>
	__asm volatile
 8008694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008698:	f383 8811 	msr	BASEPRI, r3
 800869c:	f3bf 8f6f 	isb	sy
 80086a0:	f3bf 8f4f 	dsb	sy
 80086a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80086a6:	bf00      	nop
 80086a8:	e7fe      	b.n	80086a8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d103      	bne.n	80086b8 <xQueueGenericSend+0x40>
 80086b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d101      	bne.n	80086bc <xQueueGenericSend+0x44>
 80086b8:	2301      	movs	r3, #1
 80086ba:	e000      	b.n	80086be <xQueueGenericSend+0x46>
 80086bc:	2300      	movs	r3, #0
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d10a      	bne.n	80086d8 <xQueueGenericSend+0x60>
	__asm volatile
 80086c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c6:	f383 8811 	msr	BASEPRI, r3
 80086ca:	f3bf 8f6f 	isb	sy
 80086ce:	f3bf 8f4f 	dsb	sy
 80086d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80086d4:	bf00      	nop
 80086d6:	e7fe      	b.n	80086d6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	2b02      	cmp	r3, #2
 80086dc:	d103      	bne.n	80086e6 <xQueueGenericSend+0x6e>
 80086de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d101      	bne.n	80086ea <xQueueGenericSend+0x72>
 80086e6:	2301      	movs	r3, #1
 80086e8:	e000      	b.n	80086ec <xQueueGenericSend+0x74>
 80086ea:	2300      	movs	r3, #0
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d10a      	bne.n	8008706 <xQueueGenericSend+0x8e>
	__asm volatile
 80086f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f4:	f383 8811 	msr	BASEPRI, r3
 80086f8:	f3bf 8f6f 	isb	sy
 80086fc:	f3bf 8f4f 	dsb	sy
 8008700:	623b      	str	r3, [r7, #32]
}
 8008702:	bf00      	nop
 8008704:	e7fe      	b.n	8008704 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008706:	f001 f9e7 	bl	8009ad8 <xTaskGetSchedulerState>
 800870a:	4603      	mov	r3, r0
 800870c:	2b00      	cmp	r3, #0
 800870e:	d102      	bne.n	8008716 <xQueueGenericSend+0x9e>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d101      	bne.n	800871a <xQueueGenericSend+0xa2>
 8008716:	2301      	movs	r3, #1
 8008718:	e000      	b.n	800871c <xQueueGenericSend+0xa4>
 800871a:	2300      	movs	r3, #0
 800871c:	2b00      	cmp	r3, #0
 800871e:	d10a      	bne.n	8008736 <xQueueGenericSend+0xbe>
	__asm volatile
 8008720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008724:	f383 8811 	msr	BASEPRI, r3
 8008728:	f3bf 8f6f 	isb	sy
 800872c:	f3bf 8f4f 	dsb	sy
 8008730:	61fb      	str	r3, [r7, #28]
}
 8008732:	bf00      	nop
 8008734:	e7fe      	b.n	8008734 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008736:	f001 ff2d 	bl	800a594 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800873a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800873c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800873e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008742:	429a      	cmp	r2, r3
 8008744:	d302      	bcc.n	800874c <xQueueGenericSend+0xd4>
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	2b02      	cmp	r3, #2
 800874a:	d129      	bne.n	80087a0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800874c:	683a      	ldr	r2, [r7, #0]
 800874e:	68b9      	ldr	r1, [r7, #8]
 8008750:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008752:	f000 fa0b 	bl	8008b6c <prvCopyDataToQueue>
 8008756:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800875a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800875c:	2b00      	cmp	r3, #0
 800875e:	d010      	beq.n	8008782 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008762:	3324      	adds	r3, #36	; 0x24
 8008764:	4618      	mov	r0, r3
 8008766:	f000 fff5 	bl	8009754 <xTaskRemoveFromEventList>
 800876a:	4603      	mov	r3, r0
 800876c:	2b00      	cmp	r3, #0
 800876e:	d013      	beq.n	8008798 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008770:	4b3f      	ldr	r3, [pc, #252]	; (8008870 <xQueueGenericSend+0x1f8>)
 8008772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008776:	601a      	str	r2, [r3, #0]
 8008778:	f3bf 8f4f 	dsb	sy
 800877c:	f3bf 8f6f 	isb	sy
 8008780:	e00a      	b.n	8008798 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008784:	2b00      	cmp	r3, #0
 8008786:	d007      	beq.n	8008798 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008788:	4b39      	ldr	r3, [pc, #228]	; (8008870 <xQueueGenericSend+0x1f8>)
 800878a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800878e:	601a      	str	r2, [r3, #0]
 8008790:	f3bf 8f4f 	dsb	sy
 8008794:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008798:	f001 ff2c 	bl	800a5f4 <vPortExitCritical>
				return pdPASS;
 800879c:	2301      	movs	r3, #1
 800879e:	e063      	b.n	8008868 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d103      	bne.n	80087ae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80087a6:	f001 ff25 	bl	800a5f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80087aa:	2300      	movs	r3, #0
 80087ac:	e05c      	b.n	8008868 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80087ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d106      	bne.n	80087c2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80087b4:	f107 0314 	add.w	r3, r7, #20
 80087b8:	4618      	mov	r0, r3
 80087ba:	f001 f82f 	bl	800981c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80087be:	2301      	movs	r3, #1
 80087c0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80087c2:	f001 ff17 	bl	800a5f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80087c6:	f000 fd9b 	bl	8009300 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80087ca:	f001 fee3 	bl	800a594 <vPortEnterCritical>
 80087ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80087d4:	b25b      	sxtb	r3, r3
 80087d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087da:	d103      	bne.n	80087e4 <xQueueGenericSend+0x16c>
 80087dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087de:	2200      	movs	r2, #0
 80087e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087ea:	b25b      	sxtb	r3, r3
 80087ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087f0:	d103      	bne.n	80087fa <xQueueGenericSend+0x182>
 80087f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f4:	2200      	movs	r2, #0
 80087f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087fa:	f001 fefb 	bl	800a5f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80087fe:	1d3a      	adds	r2, r7, #4
 8008800:	f107 0314 	add.w	r3, r7, #20
 8008804:	4611      	mov	r1, r2
 8008806:	4618      	mov	r0, r3
 8008808:	f001 f81e 	bl	8009848 <xTaskCheckForTimeOut>
 800880c:	4603      	mov	r3, r0
 800880e:	2b00      	cmp	r3, #0
 8008810:	d124      	bne.n	800885c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008812:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008814:	f000 faa2 	bl	8008d5c <prvIsQueueFull>
 8008818:	4603      	mov	r3, r0
 800881a:	2b00      	cmp	r3, #0
 800881c:	d018      	beq.n	8008850 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800881e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008820:	3310      	adds	r3, #16
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	4611      	mov	r1, r2
 8008826:	4618      	mov	r0, r3
 8008828:	f000 ff44 	bl	80096b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800882c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800882e:	f000 fa2d 	bl	8008c8c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008832:	f000 fd73 	bl	800931c <xTaskResumeAll>
 8008836:	4603      	mov	r3, r0
 8008838:	2b00      	cmp	r3, #0
 800883a:	f47f af7c 	bne.w	8008736 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800883e:	4b0c      	ldr	r3, [pc, #48]	; (8008870 <xQueueGenericSend+0x1f8>)
 8008840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008844:	601a      	str	r2, [r3, #0]
 8008846:	f3bf 8f4f 	dsb	sy
 800884a:	f3bf 8f6f 	isb	sy
 800884e:	e772      	b.n	8008736 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008850:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008852:	f000 fa1b 	bl	8008c8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008856:	f000 fd61 	bl	800931c <xTaskResumeAll>
 800885a:	e76c      	b.n	8008736 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800885c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800885e:	f000 fa15 	bl	8008c8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008862:	f000 fd5b 	bl	800931c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008866:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008868:	4618      	mov	r0, r3
 800886a:	3738      	adds	r7, #56	; 0x38
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}
 8008870:	e000ed04 	.word	0xe000ed04

08008874 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b090      	sub	sp, #64	; 0x40
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	607a      	str	r2, [r7, #4]
 8008880:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008888:	2b00      	cmp	r3, #0
 800888a:	d10a      	bne.n	80088a2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800888c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008890:	f383 8811 	msr	BASEPRI, r3
 8008894:	f3bf 8f6f 	isb	sy
 8008898:	f3bf 8f4f 	dsb	sy
 800889c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800889e:	bf00      	nop
 80088a0:	e7fe      	b.n	80088a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d103      	bne.n	80088b0 <xQueueGenericSendFromISR+0x3c>
 80088a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d101      	bne.n	80088b4 <xQueueGenericSendFromISR+0x40>
 80088b0:	2301      	movs	r3, #1
 80088b2:	e000      	b.n	80088b6 <xQueueGenericSendFromISR+0x42>
 80088b4:	2300      	movs	r3, #0
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d10a      	bne.n	80088d0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80088ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088be:	f383 8811 	msr	BASEPRI, r3
 80088c2:	f3bf 8f6f 	isb	sy
 80088c6:	f3bf 8f4f 	dsb	sy
 80088ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80088cc:	bf00      	nop
 80088ce:	e7fe      	b.n	80088ce <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	2b02      	cmp	r3, #2
 80088d4:	d103      	bne.n	80088de <xQueueGenericSendFromISR+0x6a>
 80088d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d101      	bne.n	80088e2 <xQueueGenericSendFromISR+0x6e>
 80088de:	2301      	movs	r3, #1
 80088e0:	e000      	b.n	80088e4 <xQueueGenericSendFromISR+0x70>
 80088e2:	2300      	movs	r3, #0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d10a      	bne.n	80088fe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80088e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ec:	f383 8811 	msr	BASEPRI, r3
 80088f0:	f3bf 8f6f 	isb	sy
 80088f4:	f3bf 8f4f 	dsb	sy
 80088f8:	623b      	str	r3, [r7, #32]
}
 80088fa:	bf00      	nop
 80088fc:	e7fe      	b.n	80088fc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80088fe:	f001 ff2b 	bl	800a758 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008902:	f3ef 8211 	mrs	r2, BASEPRI
 8008906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800890a:	f383 8811 	msr	BASEPRI, r3
 800890e:	f3bf 8f6f 	isb	sy
 8008912:	f3bf 8f4f 	dsb	sy
 8008916:	61fa      	str	r2, [r7, #28]
 8008918:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800891a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800891c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800891e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008920:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008926:	429a      	cmp	r2, r3
 8008928:	d302      	bcc.n	8008930 <xQueueGenericSendFromISR+0xbc>
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	2b02      	cmp	r3, #2
 800892e:	d12f      	bne.n	8008990 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008932:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800893a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800893c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800893e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008940:	683a      	ldr	r2, [r7, #0]
 8008942:	68b9      	ldr	r1, [r7, #8]
 8008944:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008946:	f000 f911 	bl	8008b6c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800894a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800894e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008952:	d112      	bne.n	800897a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008958:	2b00      	cmp	r3, #0
 800895a:	d016      	beq.n	800898a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800895c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800895e:	3324      	adds	r3, #36	; 0x24
 8008960:	4618      	mov	r0, r3
 8008962:	f000 fef7 	bl	8009754 <xTaskRemoveFromEventList>
 8008966:	4603      	mov	r3, r0
 8008968:	2b00      	cmp	r3, #0
 800896a:	d00e      	beq.n	800898a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d00b      	beq.n	800898a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2201      	movs	r2, #1
 8008976:	601a      	str	r2, [r3, #0]
 8008978:	e007      	b.n	800898a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800897a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800897e:	3301      	adds	r3, #1
 8008980:	b2db      	uxtb	r3, r3
 8008982:	b25a      	sxtb	r2, r3
 8008984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008986:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800898a:	2301      	movs	r3, #1
 800898c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800898e:	e001      	b.n	8008994 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008990:	2300      	movs	r3, #0
 8008992:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008996:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800899e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80089a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3740      	adds	r7, #64	; 0x40
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}
	...

080089ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b08c      	sub	sp, #48	; 0x30
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	60f8      	str	r0, [r7, #12]
 80089b4:	60b9      	str	r1, [r7, #8]
 80089b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80089b8:	2300      	movs	r3, #0
 80089ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80089c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d10a      	bne.n	80089dc <xQueueReceive+0x30>
	__asm volatile
 80089c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ca:	f383 8811 	msr	BASEPRI, r3
 80089ce:	f3bf 8f6f 	isb	sy
 80089d2:	f3bf 8f4f 	dsb	sy
 80089d6:	623b      	str	r3, [r7, #32]
}
 80089d8:	bf00      	nop
 80089da:	e7fe      	b.n	80089da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d103      	bne.n	80089ea <xQueueReceive+0x3e>
 80089e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d101      	bne.n	80089ee <xQueueReceive+0x42>
 80089ea:	2301      	movs	r3, #1
 80089ec:	e000      	b.n	80089f0 <xQueueReceive+0x44>
 80089ee:	2300      	movs	r3, #0
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d10a      	bne.n	8008a0a <xQueueReceive+0x5e>
	__asm volatile
 80089f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f8:	f383 8811 	msr	BASEPRI, r3
 80089fc:	f3bf 8f6f 	isb	sy
 8008a00:	f3bf 8f4f 	dsb	sy
 8008a04:	61fb      	str	r3, [r7, #28]
}
 8008a06:	bf00      	nop
 8008a08:	e7fe      	b.n	8008a08 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a0a:	f001 f865 	bl	8009ad8 <xTaskGetSchedulerState>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d102      	bne.n	8008a1a <xQueueReceive+0x6e>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d101      	bne.n	8008a1e <xQueueReceive+0x72>
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	e000      	b.n	8008a20 <xQueueReceive+0x74>
 8008a1e:	2300      	movs	r3, #0
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d10a      	bne.n	8008a3a <xQueueReceive+0x8e>
	__asm volatile
 8008a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a28:	f383 8811 	msr	BASEPRI, r3
 8008a2c:	f3bf 8f6f 	isb	sy
 8008a30:	f3bf 8f4f 	dsb	sy
 8008a34:	61bb      	str	r3, [r7, #24]
}
 8008a36:	bf00      	nop
 8008a38:	e7fe      	b.n	8008a38 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008a3a:	f001 fdab 	bl	800a594 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a42:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d01f      	beq.n	8008a8a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008a4a:	68b9      	ldr	r1, [r7, #8]
 8008a4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a4e:	f000 f8f7 	bl	8008c40 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a54:	1e5a      	subs	r2, r3, #1
 8008a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a58:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a5c:	691b      	ldr	r3, [r3, #16]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d00f      	beq.n	8008a82 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a64:	3310      	adds	r3, #16
 8008a66:	4618      	mov	r0, r3
 8008a68:	f000 fe74 	bl	8009754 <xTaskRemoveFromEventList>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d007      	beq.n	8008a82 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008a72:	4b3d      	ldr	r3, [pc, #244]	; (8008b68 <xQueueReceive+0x1bc>)
 8008a74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a78:	601a      	str	r2, [r3, #0]
 8008a7a:	f3bf 8f4f 	dsb	sy
 8008a7e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008a82:	f001 fdb7 	bl	800a5f4 <vPortExitCritical>
				return pdPASS;
 8008a86:	2301      	movs	r3, #1
 8008a88:	e069      	b.n	8008b5e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d103      	bne.n	8008a98 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008a90:	f001 fdb0 	bl	800a5f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008a94:	2300      	movs	r3, #0
 8008a96:	e062      	b.n	8008b5e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d106      	bne.n	8008aac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a9e:	f107 0310 	add.w	r3, r7, #16
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f000 feba 	bl	800981c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008aac:	f001 fda2 	bl	800a5f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008ab0:	f000 fc26 	bl	8009300 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ab4:	f001 fd6e 	bl	800a594 <vPortEnterCritical>
 8008ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008abe:	b25b      	sxtb	r3, r3
 8008ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ac4:	d103      	bne.n	8008ace <xQueueReceive+0x122>
 8008ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac8:	2200      	movs	r2, #0
 8008aca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ad4:	b25b      	sxtb	r3, r3
 8008ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ada:	d103      	bne.n	8008ae4 <xQueueReceive+0x138>
 8008adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ade:	2200      	movs	r2, #0
 8008ae0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ae4:	f001 fd86 	bl	800a5f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ae8:	1d3a      	adds	r2, r7, #4
 8008aea:	f107 0310 	add.w	r3, r7, #16
 8008aee:	4611      	mov	r1, r2
 8008af0:	4618      	mov	r0, r3
 8008af2:	f000 fea9 	bl	8009848 <xTaskCheckForTimeOut>
 8008af6:	4603      	mov	r3, r0
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d123      	bne.n	8008b44 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008afc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008afe:	f000 f917 	bl	8008d30 <prvIsQueueEmpty>
 8008b02:	4603      	mov	r3, r0
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d017      	beq.n	8008b38 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b0a:	3324      	adds	r3, #36	; 0x24
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	4611      	mov	r1, r2
 8008b10:	4618      	mov	r0, r3
 8008b12:	f000 fdcf 	bl	80096b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008b16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b18:	f000 f8b8 	bl	8008c8c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008b1c:	f000 fbfe 	bl	800931c <xTaskResumeAll>
 8008b20:	4603      	mov	r3, r0
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d189      	bne.n	8008a3a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008b26:	4b10      	ldr	r3, [pc, #64]	; (8008b68 <xQueueReceive+0x1bc>)
 8008b28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b2c:	601a      	str	r2, [r3, #0]
 8008b2e:	f3bf 8f4f 	dsb	sy
 8008b32:	f3bf 8f6f 	isb	sy
 8008b36:	e780      	b.n	8008a3a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008b38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b3a:	f000 f8a7 	bl	8008c8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b3e:	f000 fbed 	bl	800931c <xTaskResumeAll>
 8008b42:	e77a      	b.n	8008a3a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008b44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b46:	f000 f8a1 	bl	8008c8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b4a:	f000 fbe7 	bl	800931c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b50:	f000 f8ee 	bl	8008d30 <prvIsQueueEmpty>
 8008b54:	4603      	mov	r3, r0
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	f43f af6f 	beq.w	8008a3a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008b5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3730      	adds	r7, #48	; 0x30
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop
 8008b68:	e000ed04 	.word	0xe000ed04

08008b6c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b086      	sub	sp, #24
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	60f8      	str	r0, [r7, #12]
 8008b74:	60b9      	str	r1, [r7, #8]
 8008b76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b80:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d10d      	bne.n	8008ba6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d14d      	bne.n	8008c2e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	689b      	ldr	r3, [r3, #8]
 8008b96:	4618      	mov	r0, r3
 8008b98:	f000 ffbc 	bl	8009b14 <xTaskPriorityDisinherit>
 8008b9c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	609a      	str	r2, [r3, #8]
 8008ba4:	e043      	b.n	8008c2e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d119      	bne.n	8008be0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	6858      	ldr	r0, [r3, #4]
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	68b9      	ldr	r1, [r7, #8]
 8008bb8:	f002 fd5a 	bl	800b670 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	685a      	ldr	r2, [r3, #4]
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bc4:	441a      	add	r2, r3
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	685a      	ldr	r2, [r3, #4]
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	689b      	ldr	r3, [r3, #8]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d32b      	bcc.n	8008c2e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	605a      	str	r2, [r3, #4]
 8008bde:	e026      	b.n	8008c2e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	68d8      	ldr	r0, [r3, #12]
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008be8:	461a      	mov	r2, r3
 8008bea:	68b9      	ldr	r1, [r7, #8]
 8008bec:	f002 fd40 	bl	800b670 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	68da      	ldr	r2, [r3, #12]
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bf8:	425b      	negs	r3, r3
 8008bfa:	441a      	add	r2, r3
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	68da      	ldr	r2, [r3, #12]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d207      	bcs.n	8008c1c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	689a      	ldr	r2, [r3, #8]
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c14:	425b      	negs	r3, r3
 8008c16:	441a      	add	r2, r3
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2b02      	cmp	r3, #2
 8008c20:	d105      	bne.n	8008c2e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d002      	beq.n	8008c2e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	3b01      	subs	r3, #1
 8008c2c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	1c5a      	adds	r2, r3, #1
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008c36:	697b      	ldr	r3, [r7, #20]
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3718      	adds	r7, #24
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b082      	sub	sp, #8
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d018      	beq.n	8008c84 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	68da      	ldr	r2, [r3, #12]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c5a:	441a      	add	r2, r3
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	68da      	ldr	r2, [r3, #12]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	689b      	ldr	r3, [r3, #8]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d303      	bcc.n	8008c74 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	68d9      	ldr	r1, [r3, #12]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	6838      	ldr	r0, [r7, #0]
 8008c80:	f002 fcf6 	bl	800b670 <memcpy>
	}
}
 8008c84:	bf00      	nop
 8008c86:	3708      	adds	r7, #8
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b084      	sub	sp, #16
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008c94:	f001 fc7e 	bl	800a594 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c9e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008ca0:	e011      	b.n	8008cc6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d012      	beq.n	8008cd0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	3324      	adds	r3, #36	; 0x24
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f000 fd50 	bl	8009754 <xTaskRemoveFromEventList>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d001      	beq.n	8008cbe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008cba:	f000 fe27 	bl	800990c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008cbe:	7bfb      	ldrb	r3, [r7, #15]
 8008cc0:	3b01      	subs	r3, #1
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	dce9      	bgt.n	8008ca2 <prvUnlockQueue+0x16>
 8008cce:	e000      	b.n	8008cd2 <prvUnlockQueue+0x46>
					break;
 8008cd0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	22ff      	movs	r2, #255	; 0xff
 8008cd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008cda:	f001 fc8b 	bl	800a5f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008cde:	f001 fc59 	bl	800a594 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ce8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008cea:	e011      	b.n	8008d10 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	691b      	ldr	r3, [r3, #16]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d012      	beq.n	8008d1a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	3310      	adds	r3, #16
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f000 fd2b 	bl	8009754 <xTaskRemoveFromEventList>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d001      	beq.n	8008d08 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008d04:	f000 fe02 	bl	800990c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008d08:	7bbb      	ldrb	r3, [r7, #14]
 8008d0a:	3b01      	subs	r3, #1
 8008d0c:	b2db      	uxtb	r3, r3
 8008d0e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	dce9      	bgt.n	8008cec <prvUnlockQueue+0x60>
 8008d18:	e000      	b.n	8008d1c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008d1a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	22ff      	movs	r2, #255	; 0xff
 8008d20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008d24:	f001 fc66 	bl	800a5f4 <vPortExitCritical>
}
 8008d28:	bf00      	nop
 8008d2a:	3710      	adds	r7, #16
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b084      	sub	sp, #16
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008d38:	f001 fc2c 	bl	800a594 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d102      	bne.n	8008d4a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008d44:	2301      	movs	r3, #1
 8008d46:	60fb      	str	r3, [r7, #12]
 8008d48:	e001      	b.n	8008d4e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008d4e:	f001 fc51 	bl	800a5f4 <vPortExitCritical>

	return xReturn;
 8008d52:	68fb      	ldr	r3, [r7, #12]
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3710      	adds	r7, #16
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b084      	sub	sp, #16
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008d64:	f001 fc16 	bl	800a594 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d102      	bne.n	8008d7a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008d74:	2301      	movs	r3, #1
 8008d76:	60fb      	str	r3, [r7, #12]
 8008d78:	e001      	b.n	8008d7e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008d7e:	f001 fc39 	bl	800a5f4 <vPortExitCritical>

	return xReturn;
 8008d82:	68fb      	ldr	r3, [r7, #12]
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3710      	adds	r7, #16
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b085      	sub	sp, #20
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d96:	2300      	movs	r3, #0
 8008d98:	60fb      	str	r3, [r7, #12]
 8008d9a:	e014      	b.n	8008dc6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008d9c:	4a0f      	ldr	r2, [pc, #60]	; (8008ddc <vQueueAddToRegistry+0x50>)
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d10b      	bne.n	8008dc0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008da8:	490c      	ldr	r1, [pc, #48]	; (8008ddc <vQueueAddToRegistry+0x50>)
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	683a      	ldr	r2, [r7, #0]
 8008dae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008db2:	4a0a      	ldr	r2, [pc, #40]	; (8008ddc <vQueueAddToRegistry+0x50>)
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	00db      	lsls	r3, r3, #3
 8008db8:	4413      	add	r3, r2
 8008dba:	687a      	ldr	r2, [r7, #4]
 8008dbc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008dbe:	e006      	b.n	8008dce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	60fb      	str	r3, [r7, #12]
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2b07      	cmp	r3, #7
 8008dca:	d9e7      	bls.n	8008d9c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008dcc:	bf00      	nop
 8008dce:	bf00      	nop
 8008dd0:	3714      	adds	r7, #20
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr
 8008dda:	bf00      	nop
 8008ddc:	20000a94 	.word	0x20000a94

08008de0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b086      	sub	sp, #24
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	60f8      	str	r0, [r7, #12]
 8008de8:	60b9      	str	r1, [r7, #8]
 8008dea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008df0:	f001 fbd0 	bl	800a594 <vPortEnterCritical>
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008dfa:	b25b      	sxtb	r3, r3
 8008dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e00:	d103      	bne.n	8008e0a <vQueueWaitForMessageRestricted+0x2a>
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	2200      	movs	r2, #0
 8008e06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e10:	b25b      	sxtb	r3, r3
 8008e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e16:	d103      	bne.n	8008e20 <vQueueWaitForMessageRestricted+0x40>
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e20:	f001 fbe8 	bl	800a5f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d106      	bne.n	8008e3a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	3324      	adds	r3, #36	; 0x24
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	68b9      	ldr	r1, [r7, #8]
 8008e34:	4618      	mov	r0, r3
 8008e36:	f000 fc61 	bl	80096fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008e3a:	6978      	ldr	r0, [r7, #20]
 8008e3c:	f7ff ff26 	bl	8008c8c <prvUnlockQueue>
	}
 8008e40:	bf00      	nop
 8008e42:	3718      	adds	r7, #24
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b08e      	sub	sp, #56	; 0x38
 8008e4c:	af04      	add	r7, sp, #16
 8008e4e:	60f8      	str	r0, [r7, #12]
 8008e50:	60b9      	str	r1, [r7, #8]
 8008e52:	607a      	str	r2, [r7, #4]
 8008e54:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d10a      	bne.n	8008e72 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e60:	f383 8811 	msr	BASEPRI, r3
 8008e64:	f3bf 8f6f 	isb	sy
 8008e68:	f3bf 8f4f 	dsb	sy
 8008e6c:	623b      	str	r3, [r7, #32]
}
 8008e6e:	bf00      	nop
 8008e70:	e7fe      	b.n	8008e70 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d10a      	bne.n	8008e8e <xTaskCreateStatic+0x46>
	__asm volatile
 8008e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e7c:	f383 8811 	msr	BASEPRI, r3
 8008e80:	f3bf 8f6f 	isb	sy
 8008e84:	f3bf 8f4f 	dsb	sy
 8008e88:	61fb      	str	r3, [r7, #28]
}
 8008e8a:	bf00      	nop
 8008e8c:	e7fe      	b.n	8008e8c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008e8e:	23bc      	movs	r3, #188	; 0xbc
 8008e90:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	2bbc      	cmp	r3, #188	; 0xbc
 8008e96:	d00a      	beq.n	8008eae <xTaskCreateStatic+0x66>
	__asm volatile
 8008e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e9c:	f383 8811 	msr	BASEPRI, r3
 8008ea0:	f3bf 8f6f 	isb	sy
 8008ea4:	f3bf 8f4f 	dsb	sy
 8008ea8:	61bb      	str	r3, [r7, #24]
}
 8008eaa:	bf00      	nop
 8008eac:	e7fe      	b.n	8008eac <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008eae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d01e      	beq.n	8008ef4 <xTaskCreateStatic+0xac>
 8008eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d01b      	beq.n	8008ef4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ebe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ec4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec8:	2202      	movs	r2, #2
 8008eca:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008ece:	2300      	movs	r3, #0
 8008ed0:	9303      	str	r3, [sp, #12]
 8008ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed4:	9302      	str	r3, [sp, #8]
 8008ed6:	f107 0314 	add.w	r3, r7, #20
 8008eda:	9301      	str	r3, [sp, #4]
 8008edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ede:	9300      	str	r3, [sp, #0]
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	687a      	ldr	r2, [r7, #4]
 8008ee4:	68b9      	ldr	r1, [r7, #8]
 8008ee6:	68f8      	ldr	r0, [r7, #12]
 8008ee8:	f000 f850 	bl	8008f8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008eec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008eee:	f000 f8f3 	bl	80090d8 <prvAddNewTaskToReadyList>
 8008ef2:	e001      	b.n	8008ef8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008ef8:	697b      	ldr	r3, [r7, #20]
	}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3728      	adds	r7, #40	; 0x28
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}

08008f02 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008f02:	b580      	push	{r7, lr}
 8008f04:	b08c      	sub	sp, #48	; 0x30
 8008f06:	af04      	add	r7, sp, #16
 8008f08:	60f8      	str	r0, [r7, #12]
 8008f0a:	60b9      	str	r1, [r7, #8]
 8008f0c:	603b      	str	r3, [r7, #0]
 8008f0e:	4613      	mov	r3, r2
 8008f10:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008f12:	88fb      	ldrh	r3, [r7, #6]
 8008f14:	009b      	lsls	r3, r3, #2
 8008f16:	4618      	mov	r0, r3
 8008f18:	f001 fc5e 	bl	800a7d8 <pvPortMalloc>
 8008f1c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d00e      	beq.n	8008f42 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008f24:	20bc      	movs	r0, #188	; 0xbc
 8008f26:	f001 fc57 	bl	800a7d8 <pvPortMalloc>
 8008f2a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008f2c:	69fb      	ldr	r3, [r7, #28]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d003      	beq.n	8008f3a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008f32:	69fb      	ldr	r3, [r7, #28]
 8008f34:	697a      	ldr	r2, [r7, #20]
 8008f36:	631a      	str	r2, [r3, #48]	; 0x30
 8008f38:	e005      	b.n	8008f46 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008f3a:	6978      	ldr	r0, [r7, #20]
 8008f3c:	f001 fd18 	bl	800a970 <vPortFree>
 8008f40:	e001      	b.n	8008f46 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008f42:	2300      	movs	r3, #0
 8008f44:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008f46:	69fb      	ldr	r3, [r7, #28]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d017      	beq.n	8008f7c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008f4c:	69fb      	ldr	r3, [r7, #28]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008f54:	88fa      	ldrh	r2, [r7, #6]
 8008f56:	2300      	movs	r3, #0
 8008f58:	9303      	str	r3, [sp, #12]
 8008f5a:	69fb      	ldr	r3, [r7, #28]
 8008f5c:	9302      	str	r3, [sp, #8]
 8008f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f60:	9301      	str	r3, [sp, #4]
 8008f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f64:	9300      	str	r3, [sp, #0]
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	68b9      	ldr	r1, [r7, #8]
 8008f6a:	68f8      	ldr	r0, [r7, #12]
 8008f6c:	f000 f80e 	bl	8008f8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008f70:	69f8      	ldr	r0, [r7, #28]
 8008f72:	f000 f8b1 	bl	80090d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008f76:	2301      	movs	r3, #1
 8008f78:	61bb      	str	r3, [r7, #24]
 8008f7a:	e002      	b.n	8008f82 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8008f80:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008f82:	69bb      	ldr	r3, [r7, #24]
	}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3720      	adds	r7, #32
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b088      	sub	sp, #32
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	60f8      	str	r0, [r7, #12]
 8008f94:	60b9      	str	r1, [r7, #8]
 8008f96:	607a      	str	r2, [r7, #4]
 8008f98:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f9c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	009b      	lsls	r3, r3, #2
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	21a5      	movs	r1, #165	; 0xa5
 8008fa6:	f002 fb71 	bl	800b68c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008fb4:	3b01      	subs	r3, #1
 8008fb6:	009b      	lsls	r3, r3, #2
 8008fb8:	4413      	add	r3, r2
 8008fba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008fbc:	69bb      	ldr	r3, [r7, #24]
 8008fbe:	f023 0307 	bic.w	r3, r3, #7
 8008fc2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008fc4:	69bb      	ldr	r3, [r7, #24]
 8008fc6:	f003 0307 	and.w	r3, r3, #7
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d00a      	beq.n	8008fe4 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd2:	f383 8811 	msr	BASEPRI, r3
 8008fd6:	f3bf 8f6f 	isb	sy
 8008fda:	f3bf 8f4f 	dsb	sy
 8008fde:	617b      	str	r3, [r7, #20]
}
 8008fe0:	bf00      	nop
 8008fe2:	e7fe      	b.n	8008fe2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d01f      	beq.n	800902a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008fea:	2300      	movs	r3, #0
 8008fec:	61fb      	str	r3, [r7, #28]
 8008fee:	e012      	b.n	8009016 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008ff0:	68ba      	ldr	r2, [r7, #8]
 8008ff2:	69fb      	ldr	r3, [r7, #28]
 8008ff4:	4413      	add	r3, r2
 8008ff6:	7819      	ldrb	r1, [r3, #0]
 8008ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ffa:	69fb      	ldr	r3, [r7, #28]
 8008ffc:	4413      	add	r3, r2
 8008ffe:	3334      	adds	r3, #52	; 0x34
 8009000:	460a      	mov	r2, r1
 8009002:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009004:	68ba      	ldr	r2, [r7, #8]
 8009006:	69fb      	ldr	r3, [r7, #28]
 8009008:	4413      	add	r3, r2
 800900a:	781b      	ldrb	r3, [r3, #0]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d006      	beq.n	800901e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009010:	69fb      	ldr	r3, [r7, #28]
 8009012:	3301      	adds	r3, #1
 8009014:	61fb      	str	r3, [r7, #28]
 8009016:	69fb      	ldr	r3, [r7, #28]
 8009018:	2b0f      	cmp	r3, #15
 800901a:	d9e9      	bls.n	8008ff0 <prvInitialiseNewTask+0x64>
 800901c:	e000      	b.n	8009020 <prvInitialiseNewTask+0x94>
			{
				break;
 800901e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009022:	2200      	movs	r2, #0
 8009024:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009028:	e003      	b.n	8009032 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800902a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800902c:	2200      	movs	r2, #0
 800902e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009034:	2b37      	cmp	r3, #55	; 0x37
 8009036:	d901      	bls.n	800903c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009038:	2337      	movs	r3, #55	; 0x37
 800903a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800903c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800903e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009040:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009044:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009046:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904a:	2200      	movs	r2, #0
 800904c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800904e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009050:	3304      	adds	r3, #4
 8009052:	4618      	mov	r0, r3
 8009054:	f7ff f93e 	bl	80082d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800905a:	3318      	adds	r3, #24
 800905c:	4618      	mov	r0, r3
 800905e:	f7ff f939 	bl	80082d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009066:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800906a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800906e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009070:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009074:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009076:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800907a:	2200      	movs	r2, #0
 800907c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009082:	2200      	movs	r2, #0
 8009084:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800908a:	3354      	adds	r3, #84	; 0x54
 800908c:	2260      	movs	r2, #96	; 0x60
 800908e:	2100      	movs	r1, #0
 8009090:	4618      	mov	r0, r3
 8009092:	f002 fafb 	bl	800b68c <memset>
 8009096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009098:	4a0c      	ldr	r2, [pc, #48]	; (80090cc <prvInitialiseNewTask+0x140>)
 800909a:	659a      	str	r2, [r3, #88]	; 0x58
 800909c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800909e:	4a0c      	ldr	r2, [pc, #48]	; (80090d0 <prvInitialiseNewTask+0x144>)
 80090a0:	65da      	str	r2, [r3, #92]	; 0x5c
 80090a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a4:	4a0b      	ldr	r2, [pc, #44]	; (80090d4 <prvInitialiseNewTask+0x148>)
 80090a6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80090a8:	683a      	ldr	r2, [r7, #0]
 80090aa:	68f9      	ldr	r1, [r7, #12]
 80090ac:	69b8      	ldr	r0, [r7, #24]
 80090ae:	f001 f941 	bl	800a334 <pxPortInitialiseStack>
 80090b2:	4602      	mov	r2, r0
 80090b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80090b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d002      	beq.n	80090c4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80090be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090c2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80090c4:	bf00      	nop
 80090c6:	3720      	adds	r7, #32
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}
 80090cc:	0800b8f4 	.word	0x0800b8f4
 80090d0:	0800b914 	.word	0x0800b914
 80090d4:	0800b8d4 	.word	0x0800b8d4

080090d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b082      	sub	sp, #8
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80090e0:	f001 fa58 	bl	800a594 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80090e4:	4b2d      	ldr	r3, [pc, #180]	; (800919c <prvAddNewTaskToReadyList+0xc4>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	3301      	adds	r3, #1
 80090ea:	4a2c      	ldr	r2, [pc, #176]	; (800919c <prvAddNewTaskToReadyList+0xc4>)
 80090ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80090ee:	4b2c      	ldr	r3, [pc, #176]	; (80091a0 <prvAddNewTaskToReadyList+0xc8>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d109      	bne.n	800910a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80090f6:	4a2a      	ldr	r2, [pc, #168]	; (80091a0 <prvAddNewTaskToReadyList+0xc8>)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80090fc:	4b27      	ldr	r3, [pc, #156]	; (800919c <prvAddNewTaskToReadyList+0xc4>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	2b01      	cmp	r3, #1
 8009102:	d110      	bne.n	8009126 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009104:	f000 fc26 	bl	8009954 <prvInitialiseTaskLists>
 8009108:	e00d      	b.n	8009126 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800910a:	4b26      	ldr	r3, [pc, #152]	; (80091a4 <prvAddNewTaskToReadyList+0xcc>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d109      	bne.n	8009126 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009112:	4b23      	ldr	r3, [pc, #140]	; (80091a0 <prvAddNewTaskToReadyList+0xc8>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800911c:	429a      	cmp	r2, r3
 800911e:	d802      	bhi.n	8009126 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009120:	4a1f      	ldr	r2, [pc, #124]	; (80091a0 <prvAddNewTaskToReadyList+0xc8>)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009126:	4b20      	ldr	r3, [pc, #128]	; (80091a8 <prvAddNewTaskToReadyList+0xd0>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	3301      	adds	r3, #1
 800912c:	4a1e      	ldr	r2, [pc, #120]	; (80091a8 <prvAddNewTaskToReadyList+0xd0>)
 800912e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009130:	4b1d      	ldr	r3, [pc, #116]	; (80091a8 <prvAddNewTaskToReadyList+0xd0>)
 8009132:	681a      	ldr	r2, [r3, #0]
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800913c:	4b1b      	ldr	r3, [pc, #108]	; (80091ac <prvAddNewTaskToReadyList+0xd4>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	429a      	cmp	r2, r3
 8009142:	d903      	bls.n	800914c <prvAddNewTaskToReadyList+0x74>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009148:	4a18      	ldr	r2, [pc, #96]	; (80091ac <prvAddNewTaskToReadyList+0xd4>)
 800914a:	6013      	str	r3, [r2, #0]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009150:	4613      	mov	r3, r2
 8009152:	009b      	lsls	r3, r3, #2
 8009154:	4413      	add	r3, r2
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	4a15      	ldr	r2, [pc, #84]	; (80091b0 <prvAddNewTaskToReadyList+0xd8>)
 800915a:	441a      	add	r2, r3
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	3304      	adds	r3, #4
 8009160:	4619      	mov	r1, r3
 8009162:	4610      	mov	r0, r2
 8009164:	f7ff f8c3 	bl	80082ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009168:	f001 fa44 	bl	800a5f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800916c:	4b0d      	ldr	r3, [pc, #52]	; (80091a4 <prvAddNewTaskToReadyList+0xcc>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d00e      	beq.n	8009192 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009174:	4b0a      	ldr	r3, [pc, #40]	; (80091a0 <prvAddNewTaskToReadyList+0xc8>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800917e:	429a      	cmp	r2, r3
 8009180:	d207      	bcs.n	8009192 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009182:	4b0c      	ldr	r3, [pc, #48]	; (80091b4 <prvAddNewTaskToReadyList+0xdc>)
 8009184:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009188:	601a      	str	r2, [r3, #0]
 800918a:	f3bf 8f4f 	dsb	sy
 800918e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009192:	bf00      	nop
 8009194:	3708      	adds	r7, #8
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
 800919a:	bf00      	nop
 800919c:	20000fa8 	.word	0x20000fa8
 80091a0:	20000ad4 	.word	0x20000ad4
 80091a4:	20000fb4 	.word	0x20000fb4
 80091a8:	20000fc4 	.word	0x20000fc4
 80091ac:	20000fb0 	.word	0x20000fb0
 80091b0:	20000ad8 	.word	0x20000ad8
 80091b4:	e000ed04 	.word	0xe000ed04

080091b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80091c0:	2300      	movs	r3, #0
 80091c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d017      	beq.n	80091fa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80091ca:	4b13      	ldr	r3, [pc, #76]	; (8009218 <vTaskDelay+0x60>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d00a      	beq.n	80091e8 <vTaskDelay+0x30>
	__asm volatile
 80091d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d6:	f383 8811 	msr	BASEPRI, r3
 80091da:	f3bf 8f6f 	isb	sy
 80091de:	f3bf 8f4f 	dsb	sy
 80091e2:	60bb      	str	r3, [r7, #8]
}
 80091e4:	bf00      	nop
 80091e6:	e7fe      	b.n	80091e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80091e8:	f000 f88a 	bl	8009300 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80091ec:	2100      	movs	r1, #0
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 fcfe 	bl	8009bf0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80091f4:	f000 f892 	bl	800931c <xTaskResumeAll>
 80091f8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d107      	bne.n	8009210 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009200:	4b06      	ldr	r3, [pc, #24]	; (800921c <vTaskDelay+0x64>)
 8009202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009206:	601a      	str	r2, [r3, #0]
 8009208:	f3bf 8f4f 	dsb	sy
 800920c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009210:	bf00      	nop
 8009212:	3710      	adds	r7, #16
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}
 8009218:	20000fd0 	.word	0x20000fd0
 800921c:	e000ed04 	.word	0xe000ed04

08009220 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b08a      	sub	sp, #40	; 0x28
 8009224:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009226:	2300      	movs	r3, #0
 8009228:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800922a:	2300      	movs	r3, #0
 800922c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800922e:	463a      	mov	r2, r7
 8009230:	1d39      	adds	r1, r7, #4
 8009232:	f107 0308 	add.w	r3, r7, #8
 8009236:	4618      	mov	r0, r3
 8009238:	f7fe fff8 	bl	800822c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800923c:	6839      	ldr	r1, [r7, #0]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	68ba      	ldr	r2, [r7, #8]
 8009242:	9202      	str	r2, [sp, #8]
 8009244:	9301      	str	r3, [sp, #4]
 8009246:	2300      	movs	r3, #0
 8009248:	9300      	str	r3, [sp, #0]
 800924a:	2300      	movs	r3, #0
 800924c:	460a      	mov	r2, r1
 800924e:	4924      	ldr	r1, [pc, #144]	; (80092e0 <vTaskStartScheduler+0xc0>)
 8009250:	4824      	ldr	r0, [pc, #144]	; (80092e4 <vTaskStartScheduler+0xc4>)
 8009252:	f7ff fdf9 	bl	8008e48 <xTaskCreateStatic>
 8009256:	4603      	mov	r3, r0
 8009258:	4a23      	ldr	r2, [pc, #140]	; (80092e8 <vTaskStartScheduler+0xc8>)
 800925a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800925c:	4b22      	ldr	r3, [pc, #136]	; (80092e8 <vTaskStartScheduler+0xc8>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d002      	beq.n	800926a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009264:	2301      	movs	r3, #1
 8009266:	617b      	str	r3, [r7, #20]
 8009268:	e001      	b.n	800926e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800926a:	2300      	movs	r3, #0
 800926c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	2b01      	cmp	r3, #1
 8009272:	d102      	bne.n	800927a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009274:	f000 fd10 	bl	8009c98 <xTimerCreateTimerTask>
 8009278:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	2b01      	cmp	r3, #1
 800927e:	d11b      	bne.n	80092b8 <vTaskStartScheduler+0x98>
	__asm volatile
 8009280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009284:	f383 8811 	msr	BASEPRI, r3
 8009288:	f3bf 8f6f 	isb	sy
 800928c:	f3bf 8f4f 	dsb	sy
 8009290:	613b      	str	r3, [r7, #16]
}
 8009292:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009294:	4b15      	ldr	r3, [pc, #84]	; (80092ec <vTaskStartScheduler+0xcc>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	3354      	adds	r3, #84	; 0x54
 800929a:	4a15      	ldr	r2, [pc, #84]	; (80092f0 <vTaskStartScheduler+0xd0>)
 800929c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800929e:	4b15      	ldr	r3, [pc, #84]	; (80092f4 <vTaskStartScheduler+0xd4>)
 80092a0:	f04f 32ff 	mov.w	r2, #4294967295
 80092a4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80092a6:	4b14      	ldr	r3, [pc, #80]	; (80092f8 <vTaskStartScheduler+0xd8>)
 80092a8:	2201      	movs	r2, #1
 80092aa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80092ac:	4b13      	ldr	r3, [pc, #76]	; (80092fc <vTaskStartScheduler+0xdc>)
 80092ae:	2200      	movs	r2, #0
 80092b0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80092b2:	f001 f8cd 	bl	800a450 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80092b6:	e00e      	b.n	80092d6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092be:	d10a      	bne.n	80092d6 <vTaskStartScheduler+0xb6>
	__asm volatile
 80092c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c4:	f383 8811 	msr	BASEPRI, r3
 80092c8:	f3bf 8f6f 	isb	sy
 80092cc:	f3bf 8f4f 	dsb	sy
 80092d0:	60fb      	str	r3, [r7, #12]
}
 80092d2:	bf00      	nop
 80092d4:	e7fe      	b.n	80092d4 <vTaskStartScheduler+0xb4>
}
 80092d6:	bf00      	nop
 80092d8:	3718      	adds	r7, #24
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	bf00      	nop
 80092e0:	0800b85c 	.word	0x0800b85c
 80092e4:	08009925 	.word	0x08009925
 80092e8:	20000fcc 	.word	0x20000fcc
 80092ec:	20000ad4 	.word	0x20000ad4
 80092f0:	20000100 	.word	0x20000100
 80092f4:	20000fc8 	.word	0x20000fc8
 80092f8:	20000fb4 	.word	0x20000fb4
 80092fc:	20000fac 	.word	0x20000fac

08009300 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009300:	b480      	push	{r7}
 8009302:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009304:	4b04      	ldr	r3, [pc, #16]	; (8009318 <vTaskSuspendAll+0x18>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	3301      	adds	r3, #1
 800930a:	4a03      	ldr	r2, [pc, #12]	; (8009318 <vTaskSuspendAll+0x18>)
 800930c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800930e:	bf00      	nop
 8009310:	46bd      	mov	sp, r7
 8009312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009316:	4770      	bx	lr
 8009318:	20000fd0 	.word	0x20000fd0

0800931c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b084      	sub	sp, #16
 8009320:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009322:	2300      	movs	r3, #0
 8009324:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009326:	2300      	movs	r3, #0
 8009328:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800932a:	4b42      	ldr	r3, [pc, #264]	; (8009434 <xTaskResumeAll+0x118>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d10a      	bne.n	8009348 <xTaskResumeAll+0x2c>
	__asm volatile
 8009332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009336:	f383 8811 	msr	BASEPRI, r3
 800933a:	f3bf 8f6f 	isb	sy
 800933e:	f3bf 8f4f 	dsb	sy
 8009342:	603b      	str	r3, [r7, #0]
}
 8009344:	bf00      	nop
 8009346:	e7fe      	b.n	8009346 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009348:	f001 f924 	bl	800a594 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800934c:	4b39      	ldr	r3, [pc, #228]	; (8009434 <xTaskResumeAll+0x118>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	3b01      	subs	r3, #1
 8009352:	4a38      	ldr	r2, [pc, #224]	; (8009434 <xTaskResumeAll+0x118>)
 8009354:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009356:	4b37      	ldr	r3, [pc, #220]	; (8009434 <xTaskResumeAll+0x118>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d162      	bne.n	8009424 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800935e:	4b36      	ldr	r3, [pc, #216]	; (8009438 <xTaskResumeAll+0x11c>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d05e      	beq.n	8009424 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009366:	e02f      	b.n	80093c8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009368:	4b34      	ldr	r3, [pc, #208]	; (800943c <xTaskResumeAll+0x120>)
 800936a:	68db      	ldr	r3, [r3, #12]
 800936c:	68db      	ldr	r3, [r3, #12]
 800936e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	3318      	adds	r3, #24
 8009374:	4618      	mov	r0, r3
 8009376:	f7ff f817 	bl	80083a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	3304      	adds	r3, #4
 800937e:	4618      	mov	r0, r3
 8009380:	f7ff f812 	bl	80083a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009388:	4b2d      	ldr	r3, [pc, #180]	; (8009440 <xTaskResumeAll+0x124>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	429a      	cmp	r2, r3
 800938e:	d903      	bls.n	8009398 <xTaskResumeAll+0x7c>
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009394:	4a2a      	ldr	r2, [pc, #168]	; (8009440 <xTaskResumeAll+0x124>)
 8009396:	6013      	str	r3, [r2, #0]
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800939c:	4613      	mov	r3, r2
 800939e:	009b      	lsls	r3, r3, #2
 80093a0:	4413      	add	r3, r2
 80093a2:	009b      	lsls	r3, r3, #2
 80093a4:	4a27      	ldr	r2, [pc, #156]	; (8009444 <xTaskResumeAll+0x128>)
 80093a6:	441a      	add	r2, r3
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	3304      	adds	r3, #4
 80093ac:	4619      	mov	r1, r3
 80093ae:	4610      	mov	r0, r2
 80093b0:	f7fe ff9d 	bl	80082ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093b8:	4b23      	ldr	r3, [pc, #140]	; (8009448 <xTaskResumeAll+0x12c>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093be:	429a      	cmp	r2, r3
 80093c0:	d302      	bcc.n	80093c8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80093c2:	4b22      	ldr	r3, [pc, #136]	; (800944c <xTaskResumeAll+0x130>)
 80093c4:	2201      	movs	r2, #1
 80093c6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80093c8:	4b1c      	ldr	r3, [pc, #112]	; (800943c <xTaskResumeAll+0x120>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d1cb      	bne.n	8009368 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d001      	beq.n	80093da <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80093d6:	f000 fb5f 	bl	8009a98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80093da:	4b1d      	ldr	r3, [pc, #116]	; (8009450 <xTaskResumeAll+0x134>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d010      	beq.n	8009408 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80093e6:	f000 f847 	bl	8009478 <xTaskIncrementTick>
 80093ea:	4603      	mov	r3, r0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d002      	beq.n	80093f6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80093f0:	4b16      	ldr	r3, [pc, #88]	; (800944c <xTaskResumeAll+0x130>)
 80093f2:	2201      	movs	r2, #1
 80093f4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	3b01      	subs	r3, #1
 80093fa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d1f1      	bne.n	80093e6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009402:	4b13      	ldr	r3, [pc, #76]	; (8009450 <xTaskResumeAll+0x134>)
 8009404:	2200      	movs	r2, #0
 8009406:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009408:	4b10      	ldr	r3, [pc, #64]	; (800944c <xTaskResumeAll+0x130>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d009      	beq.n	8009424 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009410:	2301      	movs	r3, #1
 8009412:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009414:	4b0f      	ldr	r3, [pc, #60]	; (8009454 <xTaskResumeAll+0x138>)
 8009416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800941a:	601a      	str	r2, [r3, #0]
 800941c:	f3bf 8f4f 	dsb	sy
 8009420:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009424:	f001 f8e6 	bl	800a5f4 <vPortExitCritical>

	return xAlreadyYielded;
 8009428:	68bb      	ldr	r3, [r7, #8]
}
 800942a:	4618      	mov	r0, r3
 800942c:	3710      	adds	r7, #16
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}
 8009432:	bf00      	nop
 8009434:	20000fd0 	.word	0x20000fd0
 8009438:	20000fa8 	.word	0x20000fa8
 800943c:	20000f68 	.word	0x20000f68
 8009440:	20000fb0 	.word	0x20000fb0
 8009444:	20000ad8 	.word	0x20000ad8
 8009448:	20000ad4 	.word	0x20000ad4
 800944c:	20000fbc 	.word	0x20000fbc
 8009450:	20000fb8 	.word	0x20000fb8
 8009454:	e000ed04 	.word	0xe000ed04

08009458 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009458:	b480      	push	{r7}
 800945a:	b083      	sub	sp, #12
 800945c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800945e:	4b05      	ldr	r3, [pc, #20]	; (8009474 <xTaskGetTickCount+0x1c>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009464:	687b      	ldr	r3, [r7, #4]
}
 8009466:	4618      	mov	r0, r3
 8009468:	370c      	adds	r7, #12
 800946a:	46bd      	mov	sp, r7
 800946c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009470:	4770      	bx	lr
 8009472:	bf00      	nop
 8009474:	20000fac 	.word	0x20000fac

08009478 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b086      	sub	sp, #24
 800947c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800947e:	2300      	movs	r3, #0
 8009480:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009482:	4b4f      	ldr	r3, [pc, #316]	; (80095c0 <xTaskIncrementTick+0x148>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	2b00      	cmp	r3, #0
 8009488:	f040 808f 	bne.w	80095aa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800948c:	4b4d      	ldr	r3, [pc, #308]	; (80095c4 <xTaskIncrementTick+0x14c>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	3301      	adds	r3, #1
 8009492:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009494:	4a4b      	ldr	r2, [pc, #300]	; (80095c4 <xTaskIncrementTick+0x14c>)
 8009496:	693b      	ldr	r3, [r7, #16]
 8009498:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d120      	bne.n	80094e2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80094a0:	4b49      	ldr	r3, [pc, #292]	; (80095c8 <xTaskIncrementTick+0x150>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d00a      	beq.n	80094c0 <xTaskIncrementTick+0x48>
	__asm volatile
 80094aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ae:	f383 8811 	msr	BASEPRI, r3
 80094b2:	f3bf 8f6f 	isb	sy
 80094b6:	f3bf 8f4f 	dsb	sy
 80094ba:	603b      	str	r3, [r7, #0]
}
 80094bc:	bf00      	nop
 80094be:	e7fe      	b.n	80094be <xTaskIncrementTick+0x46>
 80094c0:	4b41      	ldr	r3, [pc, #260]	; (80095c8 <xTaskIncrementTick+0x150>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	60fb      	str	r3, [r7, #12]
 80094c6:	4b41      	ldr	r3, [pc, #260]	; (80095cc <xTaskIncrementTick+0x154>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4a3f      	ldr	r2, [pc, #252]	; (80095c8 <xTaskIncrementTick+0x150>)
 80094cc:	6013      	str	r3, [r2, #0]
 80094ce:	4a3f      	ldr	r2, [pc, #252]	; (80095cc <xTaskIncrementTick+0x154>)
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	6013      	str	r3, [r2, #0]
 80094d4:	4b3e      	ldr	r3, [pc, #248]	; (80095d0 <xTaskIncrementTick+0x158>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	3301      	adds	r3, #1
 80094da:	4a3d      	ldr	r2, [pc, #244]	; (80095d0 <xTaskIncrementTick+0x158>)
 80094dc:	6013      	str	r3, [r2, #0]
 80094de:	f000 fadb 	bl	8009a98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80094e2:	4b3c      	ldr	r3, [pc, #240]	; (80095d4 <xTaskIncrementTick+0x15c>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	693a      	ldr	r2, [r7, #16]
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d349      	bcc.n	8009580 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094ec:	4b36      	ldr	r3, [pc, #216]	; (80095c8 <xTaskIncrementTick+0x150>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d104      	bne.n	8009500 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094f6:	4b37      	ldr	r3, [pc, #220]	; (80095d4 <xTaskIncrementTick+0x15c>)
 80094f8:	f04f 32ff 	mov.w	r2, #4294967295
 80094fc:	601a      	str	r2, [r3, #0]
					break;
 80094fe:	e03f      	b.n	8009580 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009500:	4b31      	ldr	r3, [pc, #196]	; (80095c8 <xTaskIncrementTick+0x150>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	68db      	ldr	r3, [r3, #12]
 8009506:	68db      	ldr	r3, [r3, #12]
 8009508:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	685b      	ldr	r3, [r3, #4]
 800950e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009510:	693a      	ldr	r2, [r7, #16]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	429a      	cmp	r2, r3
 8009516:	d203      	bcs.n	8009520 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009518:	4a2e      	ldr	r2, [pc, #184]	; (80095d4 <xTaskIncrementTick+0x15c>)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800951e:	e02f      	b.n	8009580 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	3304      	adds	r3, #4
 8009524:	4618      	mov	r0, r3
 8009526:	f7fe ff3f 	bl	80083a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800952e:	2b00      	cmp	r3, #0
 8009530:	d004      	beq.n	800953c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	3318      	adds	r3, #24
 8009536:	4618      	mov	r0, r3
 8009538:	f7fe ff36 	bl	80083a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009540:	4b25      	ldr	r3, [pc, #148]	; (80095d8 <xTaskIncrementTick+0x160>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	429a      	cmp	r2, r3
 8009546:	d903      	bls.n	8009550 <xTaskIncrementTick+0xd8>
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800954c:	4a22      	ldr	r2, [pc, #136]	; (80095d8 <xTaskIncrementTick+0x160>)
 800954e:	6013      	str	r3, [r2, #0]
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009554:	4613      	mov	r3, r2
 8009556:	009b      	lsls	r3, r3, #2
 8009558:	4413      	add	r3, r2
 800955a:	009b      	lsls	r3, r3, #2
 800955c:	4a1f      	ldr	r2, [pc, #124]	; (80095dc <xTaskIncrementTick+0x164>)
 800955e:	441a      	add	r2, r3
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	3304      	adds	r3, #4
 8009564:	4619      	mov	r1, r3
 8009566:	4610      	mov	r0, r2
 8009568:	f7fe fec1 	bl	80082ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009570:	4b1b      	ldr	r3, [pc, #108]	; (80095e0 <xTaskIncrementTick+0x168>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009576:	429a      	cmp	r2, r3
 8009578:	d3b8      	bcc.n	80094ec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800957a:	2301      	movs	r3, #1
 800957c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800957e:	e7b5      	b.n	80094ec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009580:	4b17      	ldr	r3, [pc, #92]	; (80095e0 <xTaskIncrementTick+0x168>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009586:	4915      	ldr	r1, [pc, #84]	; (80095dc <xTaskIncrementTick+0x164>)
 8009588:	4613      	mov	r3, r2
 800958a:	009b      	lsls	r3, r3, #2
 800958c:	4413      	add	r3, r2
 800958e:	009b      	lsls	r3, r3, #2
 8009590:	440b      	add	r3, r1
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	2b01      	cmp	r3, #1
 8009596:	d901      	bls.n	800959c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009598:	2301      	movs	r3, #1
 800959a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800959c:	4b11      	ldr	r3, [pc, #68]	; (80095e4 <xTaskIncrementTick+0x16c>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d007      	beq.n	80095b4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80095a4:	2301      	movs	r3, #1
 80095a6:	617b      	str	r3, [r7, #20]
 80095a8:	e004      	b.n	80095b4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80095aa:	4b0f      	ldr	r3, [pc, #60]	; (80095e8 <xTaskIncrementTick+0x170>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	3301      	adds	r3, #1
 80095b0:	4a0d      	ldr	r2, [pc, #52]	; (80095e8 <xTaskIncrementTick+0x170>)
 80095b2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80095b4:	697b      	ldr	r3, [r7, #20]
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3718      	adds	r7, #24
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	20000fd0 	.word	0x20000fd0
 80095c4:	20000fac 	.word	0x20000fac
 80095c8:	20000f60 	.word	0x20000f60
 80095cc:	20000f64 	.word	0x20000f64
 80095d0:	20000fc0 	.word	0x20000fc0
 80095d4:	20000fc8 	.word	0x20000fc8
 80095d8:	20000fb0 	.word	0x20000fb0
 80095dc:	20000ad8 	.word	0x20000ad8
 80095e0:	20000ad4 	.word	0x20000ad4
 80095e4:	20000fbc 	.word	0x20000fbc
 80095e8:	20000fb8 	.word	0x20000fb8

080095ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80095ec:	b480      	push	{r7}
 80095ee:	b085      	sub	sp, #20
 80095f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80095f2:	4b2a      	ldr	r3, [pc, #168]	; (800969c <vTaskSwitchContext+0xb0>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d003      	beq.n	8009602 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80095fa:	4b29      	ldr	r3, [pc, #164]	; (80096a0 <vTaskSwitchContext+0xb4>)
 80095fc:	2201      	movs	r2, #1
 80095fe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009600:	e046      	b.n	8009690 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009602:	4b27      	ldr	r3, [pc, #156]	; (80096a0 <vTaskSwitchContext+0xb4>)
 8009604:	2200      	movs	r2, #0
 8009606:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009608:	4b26      	ldr	r3, [pc, #152]	; (80096a4 <vTaskSwitchContext+0xb8>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	60fb      	str	r3, [r7, #12]
 800960e:	e010      	b.n	8009632 <vTaskSwitchContext+0x46>
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d10a      	bne.n	800962c <vTaskSwitchContext+0x40>
	__asm volatile
 8009616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800961a:	f383 8811 	msr	BASEPRI, r3
 800961e:	f3bf 8f6f 	isb	sy
 8009622:	f3bf 8f4f 	dsb	sy
 8009626:	607b      	str	r3, [r7, #4]
}
 8009628:	bf00      	nop
 800962a:	e7fe      	b.n	800962a <vTaskSwitchContext+0x3e>
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	3b01      	subs	r3, #1
 8009630:	60fb      	str	r3, [r7, #12]
 8009632:	491d      	ldr	r1, [pc, #116]	; (80096a8 <vTaskSwitchContext+0xbc>)
 8009634:	68fa      	ldr	r2, [r7, #12]
 8009636:	4613      	mov	r3, r2
 8009638:	009b      	lsls	r3, r3, #2
 800963a:	4413      	add	r3, r2
 800963c:	009b      	lsls	r3, r3, #2
 800963e:	440b      	add	r3, r1
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d0e4      	beq.n	8009610 <vTaskSwitchContext+0x24>
 8009646:	68fa      	ldr	r2, [r7, #12]
 8009648:	4613      	mov	r3, r2
 800964a:	009b      	lsls	r3, r3, #2
 800964c:	4413      	add	r3, r2
 800964e:	009b      	lsls	r3, r3, #2
 8009650:	4a15      	ldr	r2, [pc, #84]	; (80096a8 <vTaskSwitchContext+0xbc>)
 8009652:	4413      	add	r3, r2
 8009654:	60bb      	str	r3, [r7, #8]
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	685b      	ldr	r3, [r3, #4]
 800965a:	685a      	ldr	r2, [r3, #4]
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	605a      	str	r2, [r3, #4]
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	685a      	ldr	r2, [r3, #4]
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	3308      	adds	r3, #8
 8009668:	429a      	cmp	r2, r3
 800966a:	d104      	bne.n	8009676 <vTaskSwitchContext+0x8a>
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	685a      	ldr	r2, [r3, #4]
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	605a      	str	r2, [r3, #4]
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	68db      	ldr	r3, [r3, #12]
 800967c:	4a0b      	ldr	r2, [pc, #44]	; (80096ac <vTaskSwitchContext+0xc0>)
 800967e:	6013      	str	r3, [r2, #0]
 8009680:	4a08      	ldr	r2, [pc, #32]	; (80096a4 <vTaskSwitchContext+0xb8>)
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009686:	4b09      	ldr	r3, [pc, #36]	; (80096ac <vTaskSwitchContext+0xc0>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	3354      	adds	r3, #84	; 0x54
 800968c:	4a08      	ldr	r2, [pc, #32]	; (80096b0 <vTaskSwitchContext+0xc4>)
 800968e:	6013      	str	r3, [r2, #0]
}
 8009690:	bf00      	nop
 8009692:	3714      	adds	r7, #20
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr
 800969c:	20000fd0 	.word	0x20000fd0
 80096a0:	20000fbc 	.word	0x20000fbc
 80096a4:	20000fb0 	.word	0x20000fb0
 80096a8:	20000ad8 	.word	0x20000ad8
 80096ac:	20000ad4 	.word	0x20000ad4
 80096b0:	20000100 	.word	0x20000100

080096b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b084      	sub	sp, #16
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d10a      	bne.n	80096da <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80096c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c8:	f383 8811 	msr	BASEPRI, r3
 80096cc:	f3bf 8f6f 	isb	sy
 80096d0:	f3bf 8f4f 	dsb	sy
 80096d4:	60fb      	str	r3, [r7, #12]
}
 80096d6:	bf00      	nop
 80096d8:	e7fe      	b.n	80096d8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80096da:	4b07      	ldr	r3, [pc, #28]	; (80096f8 <vTaskPlaceOnEventList+0x44>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	3318      	adds	r3, #24
 80096e0:	4619      	mov	r1, r3
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f7fe fe27 	bl	8008336 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80096e8:	2101      	movs	r1, #1
 80096ea:	6838      	ldr	r0, [r7, #0]
 80096ec:	f000 fa80 	bl	8009bf0 <prvAddCurrentTaskToDelayedList>
}
 80096f0:	bf00      	nop
 80096f2:	3710      	adds	r7, #16
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}
 80096f8:	20000ad4 	.word	0x20000ad4

080096fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b086      	sub	sp, #24
 8009700:	af00      	add	r7, sp, #0
 8009702:	60f8      	str	r0, [r7, #12]
 8009704:	60b9      	str	r1, [r7, #8]
 8009706:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d10a      	bne.n	8009724 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800970e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009712:	f383 8811 	msr	BASEPRI, r3
 8009716:	f3bf 8f6f 	isb	sy
 800971a:	f3bf 8f4f 	dsb	sy
 800971e:	617b      	str	r3, [r7, #20]
}
 8009720:	bf00      	nop
 8009722:	e7fe      	b.n	8009722 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009724:	4b0a      	ldr	r3, [pc, #40]	; (8009750 <vTaskPlaceOnEventListRestricted+0x54>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	3318      	adds	r3, #24
 800972a:	4619      	mov	r1, r3
 800972c:	68f8      	ldr	r0, [r7, #12]
 800972e:	f7fe fdde 	bl	80082ee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d002      	beq.n	800973e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009738:	f04f 33ff 	mov.w	r3, #4294967295
 800973c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800973e:	6879      	ldr	r1, [r7, #4]
 8009740:	68b8      	ldr	r0, [r7, #8]
 8009742:	f000 fa55 	bl	8009bf0 <prvAddCurrentTaskToDelayedList>
	}
 8009746:	bf00      	nop
 8009748:	3718      	adds	r7, #24
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
 800974e:	bf00      	nop
 8009750:	20000ad4 	.word	0x20000ad4

08009754 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b086      	sub	sp, #24
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	68db      	ldr	r3, [r3, #12]
 8009760:	68db      	ldr	r3, [r3, #12]
 8009762:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d10a      	bne.n	8009780 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800976a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800976e:	f383 8811 	msr	BASEPRI, r3
 8009772:	f3bf 8f6f 	isb	sy
 8009776:	f3bf 8f4f 	dsb	sy
 800977a:	60fb      	str	r3, [r7, #12]
}
 800977c:	bf00      	nop
 800977e:	e7fe      	b.n	800977e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	3318      	adds	r3, #24
 8009784:	4618      	mov	r0, r3
 8009786:	f7fe fe0f 	bl	80083a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800978a:	4b1e      	ldr	r3, [pc, #120]	; (8009804 <xTaskRemoveFromEventList+0xb0>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d11d      	bne.n	80097ce <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	3304      	adds	r3, #4
 8009796:	4618      	mov	r0, r3
 8009798:	f7fe fe06 	bl	80083a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097a0:	4b19      	ldr	r3, [pc, #100]	; (8009808 <xTaskRemoveFromEventList+0xb4>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d903      	bls.n	80097b0 <xTaskRemoveFromEventList+0x5c>
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ac:	4a16      	ldr	r2, [pc, #88]	; (8009808 <xTaskRemoveFromEventList+0xb4>)
 80097ae:	6013      	str	r3, [r2, #0]
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097b4:	4613      	mov	r3, r2
 80097b6:	009b      	lsls	r3, r3, #2
 80097b8:	4413      	add	r3, r2
 80097ba:	009b      	lsls	r3, r3, #2
 80097bc:	4a13      	ldr	r2, [pc, #76]	; (800980c <xTaskRemoveFromEventList+0xb8>)
 80097be:	441a      	add	r2, r3
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	3304      	adds	r3, #4
 80097c4:	4619      	mov	r1, r3
 80097c6:	4610      	mov	r0, r2
 80097c8:	f7fe fd91 	bl	80082ee <vListInsertEnd>
 80097cc:	e005      	b.n	80097da <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	3318      	adds	r3, #24
 80097d2:	4619      	mov	r1, r3
 80097d4:	480e      	ldr	r0, [pc, #56]	; (8009810 <xTaskRemoveFromEventList+0xbc>)
 80097d6:	f7fe fd8a 	bl	80082ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097de:	4b0d      	ldr	r3, [pc, #52]	; (8009814 <xTaskRemoveFromEventList+0xc0>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d905      	bls.n	80097f4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80097e8:	2301      	movs	r3, #1
 80097ea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80097ec:	4b0a      	ldr	r3, [pc, #40]	; (8009818 <xTaskRemoveFromEventList+0xc4>)
 80097ee:	2201      	movs	r2, #1
 80097f0:	601a      	str	r2, [r3, #0]
 80097f2:	e001      	b.n	80097f8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80097f4:	2300      	movs	r3, #0
 80097f6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80097f8:	697b      	ldr	r3, [r7, #20]
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3718      	adds	r7, #24
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}
 8009802:	bf00      	nop
 8009804:	20000fd0 	.word	0x20000fd0
 8009808:	20000fb0 	.word	0x20000fb0
 800980c:	20000ad8 	.word	0x20000ad8
 8009810:	20000f68 	.word	0x20000f68
 8009814:	20000ad4 	.word	0x20000ad4
 8009818:	20000fbc 	.word	0x20000fbc

0800981c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800981c:	b480      	push	{r7}
 800981e:	b083      	sub	sp, #12
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009824:	4b06      	ldr	r3, [pc, #24]	; (8009840 <vTaskInternalSetTimeOutState+0x24>)
 8009826:	681a      	ldr	r2, [r3, #0]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800982c:	4b05      	ldr	r3, [pc, #20]	; (8009844 <vTaskInternalSetTimeOutState+0x28>)
 800982e:	681a      	ldr	r2, [r3, #0]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	605a      	str	r2, [r3, #4]
}
 8009834:	bf00      	nop
 8009836:	370c      	adds	r7, #12
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr
 8009840:	20000fc0 	.word	0x20000fc0
 8009844:	20000fac 	.word	0x20000fac

08009848 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b088      	sub	sp, #32
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d10a      	bne.n	800986e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800985c:	f383 8811 	msr	BASEPRI, r3
 8009860:	f3bf 8f6f 	isb	sy
 8009864:	f3bf 8f4f 	dsb	sy
 8009868:	613b      	str	r3, [r7, #16]
}
 800986a:	bf00      	nop
 800986c:	e7fe      	b.n	800986c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d10a      	bne.n	800988a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009878:	f383 8811 	msr	BASEPRI, r3
 800987c:	f3bf 8f6f 	isb	sy
 8009880:	f3bf 8f4f 	dsb	sy
 8009884:	60fb      	str	r3, [r7, #12]
}
 8009886:	bf00      	nop
 8009888:	e7fe      	b.n	8009888 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800988a:	f000 fe83 	bl	800a594 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800988e:	4b1d      	ldr	r3, [pc, #116]	; (8009904 <xTaskCheckForTimeOut+0xbc>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	69ba      	ldr	r2, [r7, #24]
 800989a:	1ad3      	subs	r3, r2, r3
 800989c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098a6:	d102      	bne.n	80098ae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80098a8:	2300      	movs	r3, #0
 80098aa:	61fb      	str	r3, [r7, #28]
 80098ac:	e023      	b.n	80098f6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681a      	ldr	r2, [r3, #0]
 80098b2:	4b15      	ldr	r3, [pc, #84]	; (8009908 <xTaskCheckForTimeOut+0xc0>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	429a      	cmp	r2, r3
 80098b8:	d007      	beq.n	80098ca <xTaskCheckForTimeOut+0x82>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	685b      	ldr	r3, [r3, #4]
 80098be:	69ba      	ldr	r2, [r7, #24]
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d302      	bcc.n	80098ca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80098c4:	2301      	movs	r3, #1
 80098c6:	61fb      	str	r3, [r7, #28]
 80098c8:	e015      	b.n	80098f6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	697a      	ldr	r2, [r7, #20]
 80098d0:	429a      	cmp	r2, r3
 80098d2:	d20b      	bcs.n	80098ec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	681a      	ldr	r2, [r3, #0]
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	1ad2      	subs	r2, r2, r3
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f7ff ff9b 	bl	800981c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80098e6:	2300      	movs	r3, #0
 80098e8:	61fb      	str	r3, [r7, #28]
 80098ea:	e004      	b.n	80098f6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	2200      	movs	r2, #0
 80098f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80098f2:	2301      	movs	r3, #1
 80098f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80098f6:	f000 fe7d 	bl	800a5f4 <vPortExitCritical>

	return xReturn;
 80098fa:	69fb      	ldr	r3, [r7, #28]
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3720      	adds	r7, #32
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}
 8009904:	20000fac 	.word	0x20000fac
 8009908:	20000fc0 	.word	0x20000fc0

0800990c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800990c:	b480      	push	{r7}
 800990e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009910:	4b03      	ldr	r3, [pc, #12]	; (8009920 <vTaskMissedYield+0x14>)
 8009912:	2201      	movs	r2, #1
 8009914:	601a      	str	r2, [r3, #0]
}
 8009916:	bf00      	nop
 8009918:	46bd      	mov	sp, r7
 800991a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991e:	4770      	bx	lr
 8009920:	20000fbc 	.word	0x20000fbc

08009924 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b082      	sub	sp, #8
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800992c:	f000 f852 	bl	80099d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009930:	4b06      	ldr	r3, [pc, #24]	; (800994c <prvIdleTask+0x28>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	2b01      	cmp	r3, #1
 8009936:	d9f9      	bls.n	800992c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009938:	4b05      	ldr	r3, [pc, #20]	; (8009950 <prvIdleTask+0x2c>)
 800993a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800993e:	601a      	str	r2, [r3, #0]
 8009940:	f3bf 8f4f 	dsb	sy
 8009944:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009948:	e7f0      	b.n	800992c <prvIdleTask+0x8>
 800994a:	bf00      	nop
 800994c:	20000ad8 	.word	0x20000ad8
 8009950:	e000ed04 	.word	0xe000ed04

08009954 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b082      	sub	sp, #8
 8009958:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800995a:	2300      	movs	r3, #0
 800995c:	607b      	str	r3, [r7, #4]
 800995e:	e00c      	b.n	800997a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	4613      	mov	r3, r2
 8009964:	009b      	lsls	r3, r3, #2
 8009966:	4413      	add	r3, r2
 8009968:	009b      	lsls	r3, r3, #2
 800996a:	4a12      	ldr	r2, [pc, #72]	; (80099b4 <prvInitialiseTaskLists+0x60>)
 800996c:	4413      	add	r3, r2
 800996e:	4618      	mov	r0, r3
 8009970:	f7fe fc90 	bl	8008294 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	3301      	adds	r3, #1
 8009978:	607b      	str	r3, [r7, #4]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2b37      	cmp	r3, #55	; 0x37
 800997e:	d9ef      	bls.n	8009960 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009980:	480d      	ldr	r0, [pc, #52]	; (80099b8 <prvInitialiseTaskLists+0x64>)
 8009982:	f7fe fc87 	bl	8008294 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009986:	480d      	ldr	r0, [pc, #52]	; (80099bc <prvInitialiseTaskLists+0x68>)
 8009988:	f7fe fc84 	bl	8008294 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800998c:	480c      	ldr	r0, [pc, #48]	; (80099c0 <prvInitialiseTaskLists+0x6c>)
 800998e:	f7fe fc81 	bl	8008294 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009992:	480c      	ldr	r0, [pc, #48]	; (80099c4 <prvInitialiseTaskLists+0x70>)
 8009994:	f7fe fc7e 	bl	8008294 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009998:	480b      	ldr	r0, [pc, #44]	; (80099c8 <prvInitialiseTaskLists+0x74>)
 800999a:	f7fe fc7b 	bl	8008294 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800999e:	4b0b      	ldr	r3, [pc, #44]	; (80099cc <prvInitialiseTaskLists+0x78>)
 80099a0:	4a05      	ldr	r2, [pc, #20]	; (80099b8 <prvInitialiseTaskLists+0x64>)
 80099a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80099a4:	4b0a      	ldr	r3, [pc, #40]	; (80099d0 <prvInitialiseTaskLists+0x7c>)
 80099a6:	4a05      	ldr	r2, [pc, #20]	; (80099bc <prvInitialiseTaskLists+0x68>)
 80099a8:	601a      	str	r2, [r3, #0]
}
 80099aa:	bf00      	nop
 80099ac:	3708      	adds	r7, #8
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
 80099b2:	bf00      	nop
 80099b4:	20000ad8 	.word	0x20000ad8
 80099b8:	20000f38 	.word	0x20000f38
 80099bc:	20000f4c 	.word	0x20000f4c
 80099c0:	20000f68 	.word	0x20000f68
 80099c4:	20000f7c 	.word	0x20000f7c
 80099c8:	20000f94 	.word	0x20000f94
 80099cc:	20000f60 	.word	0x20000f60
 80099d0:	20000f64 	.word	0x20000f64

080099d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b082      	sub	sp, #8
 80099d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80099da:	e019      	b.n	8009a10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80099dc:	f000 fdda 	bl	800a594 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099e0:	4b10      	ldr	r3, [pc, #64]	; (8009a24 <prvCheckTasksWaitingTermination+0x50>)
 80099e2:	68db      	ldr	r3, [r3, #12]
 80099e4:	68db      	ldr	r3, [r3, #12]
 80099e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	3304      	adds	r3, #4
 80099ec:	4618      	mov	r0, r3
 80099ee:	f7fe fcdb 	bl	80083a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80099f2:	4b0d      	ldr	r3, [pc, #52]	; (8009a28 <prvCheckTasksWaitingTermination+0x54>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	3b01      	subs	r3, #1
 80099f8:	4a0b      	ldr	r2, [pc, #44]	; (8009a28 <prvCheckTasksWaitingTermination+0x54>)
 80099fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80099fc:	4b0b      	ldr	r3, [pc, #44]	; (8009a2c <prvCheckTasksWaitingTermination+0x58>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	3b01      	subs	r3, #1
 8009a02:	4a0a      	ldr	r2, [pc, #40]	; (8009a2c <prvCheckTasksWaitingTermination+0x58>)
 8009a04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009a06:	f000 fdf5 	bl	800a5f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f000 f810 	bl	8009a30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a10:	4b06      	ldr	r3, [pc, #24]	; (8009a2c <prvCheckTasksWaitingTermination+0x58>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d1e1      	bne.n	80099dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009a18:	bf00      	nop
 8009a1a:	bf00      	nop
 8009a1c:	3708      	adds	r7, #8
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}
 8009a22:	bf00      	nop
 8009a24:	20000f7c 	.word	0x20000f7c
 8009a28:	20000fa8 	.word	0x20000fa8
 8009a2c:	20000f90 	.word	0x20000f90

08009a30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b084      	sub	sp, #16
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	3354      	adds	r3, #84	; 0x54
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f001 fe3b 	bl	800b6b8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d108      	bne.n	8009a5e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a50:	4618      	mov	r0, r3
 8009a52:	f000 ff8d 	bl	800a970 <vPortFree>
				vPortFree( pxTCB );
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f000 ff8a 	bl	800a970 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009a5c:	e018      	b.n	8009a90 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d103      	bne.n	8009a70 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f000 ff81 	bl	800a970 <vPortFree>
	}
 8009a6e:	e00f      	b.n	8009a90 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009a76:	2b02      	cmp	r3, #2
 8009a78:	d00a      	beq.n	8009a90 <prvDeleteTCB+0x60>
	__asm volatile
 8009a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a7e:	f383 8811 	msr	BASEPRI, r3
 8009a82:	f3bf 8f6f 	isb	sy
 8009a86:	f3bf 8f4f 	dsb	sy
 8009a8a:	60fb      	str	r3, [r7, #12]
}
 8009a8c:	bf00      	nop
 8009a8e:	e7fe      	b.n	8009a8e <prvDeleteTCB+0x5e>
	}
 8009a90:	bf00      	nop
 8009a92:	3710      	adds	r7, #16
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b083      	sub	sp, #12
 8009a9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a9e:	4b0c      	ldr	r3, [pc, #48]	; (8009ad0 <prvResetNextTaskUnblockTime+0x38>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d104      	bne.n	8009ab2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009aa8:	4b0a      	ldr	r3, [pc, #40]	; (8009ad4 <prvResetNextTaskUnblockTime+0x3c>)
 8009aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8009aae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009ab0:	e008      	b.n	8009ac4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ab2:	4b07      	ldr	r3, [pc, #28]	; (8009ad0 <prvResetNextTaskUnblockTime+0x38>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	68db      	ldr	r3, [r3, #12]
 8009ab8:	68db      	ldr	r3, [r3, #12]
 8009aba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	4a04      	ldr	r2, [pc, #16]	; (8009ad4 <prvResetNextTaskUnblockTime+0x3c>)
 8009ac2:	6013      	str	r3, [r2, #0]
}
 8009ac4:	bf00      	nop
 8009ac6:	370c      	adds	r7, #12
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ace:	4770      	bx	lr
 8009ad0:	20000f60 	.word	0x20000f60
 8009ad4:	20000fc8 	.word	0x20000fc8

08009ad8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009ad8:	b480      	push	{r7}
 8009ada:	b083      	sub	sp, #12
 8009adc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009ade:	4b0b      	ldr	r3, [pc, #44]	; (8009b0c <xTaskGetSchedulerState+0x34>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d102      	bne.n	8009aec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	607b      	str	r3, [r7, #4]
 8009aea:	e008      	b.n	8009afe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009aec:	4b08      	ldr	r3, [pc, #32]	; (8009b10 <xTaskGetSchedulerState+0x38>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d102      	bne.n	8009afa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009af4:	2302      	movs	r3, #2
 8009af6:	607b      	str	r3, [r7, #4]
 8009af8:	e001      	b.n	8009afe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009afa:	2300      	movs	r3, #0
 8009afc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009afe:	687b      	ldr	r3, [r7, #4]
	}
 8009b00:	4618      	mov	r0, r3
 8009b02:	370c      	adds	r7, #12
 8009b04:	46bd      	mov	sp, r7
 8009b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0a:	4770      	bx	lr
 8009b0c:	20000fb4 	.word	0x20000fb4
 8009b10:	20000fd0 	.word	0x20000fd0

08009b14 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b086      	sub	sp, #24
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009b20:	2300      	movs	r3, #0
 8009b22:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d056      	beq.n	8009bd8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009b2a:	4b2e      	ldr	r3, [pc, #184]	; (8009be4 <xTaskPriorityDisinherit+0xd0>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	693a      	ldr	r2, [r7, #16]
 8009b30:	429a      	cmp	r2, r3
 8009b32:	d00a      	beq.n	8009b4a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b38:	f383 8811 	msr	BASEPRI, r3
 8009b3c:	f3bf 8f6f 	isb	sy
 8009b40:	f3bf 8f4f 	dsb	sy
 8009b44:	60fb      	str	r3, [r7, #12]
}
 8009b46:	bf00      	nop
 8009b48:	e7fe      	b.n	8009b48 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d10a      	bne.n	8009b68 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b56:	f383 8811 	msr	BASEPRI, r3
 8009b5a:	f3bf 8f6f 	isb	sy
 8009b5e:	f3bf 8f4f 	dsb	sy
 8009b62:	60bb      	str	r3, [r7, #8]
}
 8009b64:	bf00      	nop
 8009b66:	e7fe      	b.n	8009b66 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b6c:	1e5a      	subs	r2, r3, #1
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	d02c      	beq.n	8009bd8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d128      	bne.n	8009bd8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	3304      	adds	r3, #4
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f7fe fc0c 	bl	80083a8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009b94:	693b      	ldr	r3, [r7, #16]
 8009b96:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b9c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ba8:	4b0f      	ldr	r3, [pc, #60]	; (8009be8 <xTaskPriorityDisinherit+0xd4>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d903      	bls.n	8009bb8 <xTaskPriorityDisinherit+0xa4>
 8009bb0:	693b      	ldr	r3, [r7, #16]
 8009bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bb4:	4a0c      	ldr	r2, [pc, #48]	; (8009be8 <xTaskPriorityDisinherit+0xd4>)
 8009bb6:	6013      	str	r3, [r2, #0]
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bbc:	4613      	mov	r3, r2
 8009bbe:	009b      	lsls	r3, r3, #2
 8009bc0:	4413      	add	r3, r2
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	4a09      	ldr	r2, [pc, #36]	; (8009bec <xTaskPriorityDisinherit+0xd8>)
 8009bc6:	441a      	add	r2, r3
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	3304      	adds	r3, #4
 8009bcc:	4619      	mov	r1, r3
 8009bce:	4610      	mov	r0, r2
 8009bd0:	f7fe fb8d 	bl	80082ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009bd8:	697b      	ldr	r3, [r7, #20]
	}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	3718      	adds	r7, #24
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}
 8009be2:	bf00      	nop
 8009be4:	20000ad4 	.word	0x20000ad4
 8009be8:	20000fb0 	.word	0x20000fb0
 8009bec:	20000ad8 	.word	0x20000ad8

08009bf0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b084      	sub	sp, #16
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009bfa:	4b21      	ldr	r3, [pc, #132]	; (8009c80 <prvAddCurrentTaskToDelayedList+0x90>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c00:	4b20      	ldr	r3, [pc, #128]	; (8009c84 <prvAddCurrentTaskToDelayedList+0x94>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	3304      	adds	r3, #4
 8009c06:	4618      	mov	r0, r3
 8009c08:	f7fe fbce 	bl	80083a8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c12:	d10a      	bne.n	8009c2a <prvAddCurrentTaskToDelayedList+0x3a>
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d007      	beq.n	8009c2a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c1a:	4b1a      	ldr	r3, [pc, #104]	; (8009c84 <prvAddCurrentTaskToDelayedList+0x94>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	3304      	adds	r3, #4
 8009c20:	4619      	mov	r1, r3
 8009c22:	4819      	ldr	r0, [pc, #100]	; (8009c88 <prvAddCurrentTaskToDelayedList+0x98>)
 8009c24:	f7fe fb63 	bl	80082ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009c28:	e026      	b.n	8009c78 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009c2a:	68fa      	ldr	r2, [r7, #12]
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	4413      	add	r3, r2
 8009c30:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009c32:	4b14      	ldr	r3, [pc, #80]	; (8009c84 <prvAddCurrentTaskToDelayedList+0x94>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	68ba      	ldr	r2, [r7, #8]
 8009c38:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009c3a:	68ba      	ldr	r2, [r7, #8]
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	429a      	cmp	r2, r3
 8009c40:	d209      	bcs.n	8009c56 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c42:	4b12      	ldr	r3, [pc, #72]	; (8009c8c <prvAddCurrentTaskToDelayedList+0x9c>)
 8009c44:	681a      	ldr	r2, [r3, #0]
 8009c46:	4b0f      	ldr	r3, [pc, #60]	; (8009c84 <prvAddCurrentTaskToDelayedList+0x94>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	3304      	adds	r3, #4
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	4610      	mov	r0, r2
 8009c50:	f7fe fb71 	bl	8008336 <vListInsert>
}
 8009c54:	e010      	b.n	8009c78 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c56:	4b0e      	ldr	r3, [pc, #56]	; (8009c90 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009c58:	681a      	ldr	r2, [r3, #0]
 8009c5a:	4b0a      	ldr	r3, [pc, #40]	; (8009c84 <prvAddCurrentTaskToDelayedList+0x94>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	3304      	adds	r3, #4
 8009c60:	4619      	mov	r1, r3
 8009c62:	4610      	mov	r0, r2
 8009c64:	f7fe fb67 	bl	8008336 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009c68:	4b0a      	ldr	r3, [pc, #40]	; (8009c94 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	68ba      	ldr	r2, [r7, #8]
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	d202      	bcs.n	8009c78 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009c72:	4a08      	ldr	r2, [pc, #32]	; (8009c94 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	6013      	str	r3, [r2, #0]
}
 8009c78:	bf00      	nop
 8009c7a:	3710      	adds	r7, #16
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}
 8009c80:	20000fac 	.word	0x20000fac
 8009c84:	20000ad4 	.word	0x20000ad4
 8009c88:	20000f94 	.word	0x20000f94
 8009c8c:	20000f64 	.word	0x20000f64
 8009c90:	20000f60 	.word	0x20000f60
 8009c94:	20000fc8 	.word	0x20000fc8

08009c98 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b08a      	sub	sp, #40	; 0x28
 8009c9c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009ca2:	f000 fb07 	bl	800a2b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009ca6:	4b1c      	ldr	r3, [pc, #112]	; (8009d18 <xTimerCreateTimerTask+0x80>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d021      	beq.n	8009cf2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009cb6:	1d3a      	adds	r2, r7, #4
 8009cb8:	f107 0108 	add.w	r1, r7, #8
 8009cbc:	f107 030c 	add.w	r3, r7, #12
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f7fe facd 	bl	8008260 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009cc6:	6879      	ldr	r1, [r7, #4]
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	68fa      	ldr	r2, [r7, #12]
 8009ccc:	9202      	str	r2, [sp, #8]
 8009cce:	9301      	str	r3, [sp, #4]
 8009cd0:	2302      	movs	r3, #2
 8009cd2:	9300      	str	r3, [sp, #0]
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	460a      	mov	r2, r1
 8009cd8:	4910      	ldr	r1, [pc, #64]	; (8009d1c <xTimerCreateTimerTask+0x84>)
 8009cda:	4811      	ldr	r0, [pc, #68]	; (8009d20 <xTimerCreateTimerTask+0x88>)
 8009cdc:	f7ff f8b4 	bl	8008e48 <xTaskCreateStatic>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	4a10      	ldr	r2, [pc, #64]	; (8009d24 <xTimerCreateTimerTask+0x8c>)
 8009ce4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009ce6:	4b0f      	ldr	r3, [pc, #60]	; (8009d24 <xTimerCreateTimerTask+0x8c>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d001      	beq.n	8009cf2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009cee:	2301      	movs	r3, #1
 8009cf0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d10a      	bne.n	8009d0e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cfc:	f383 8811 	msr	BASEPRI, r3
 8009d00:	f3bf 8f6f 	isb	sy
 8009d04:	f3bf 8f4f 	dsb	sy
 8009d08:	613b      	str	r3, [r7, #16]
}
 8009d0a:	bf00      	nop
 8009d0c:	e7fe      	b.n	8009d0c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009d0e:	697b      	ldr	r3, [r7, #20]
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3718      	adds	r7, #24
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}
 8009d18:	20001004 	.word	0x20001004
 8009d1c:	0800b864 	.word	0x0800b864
 8009d20:	08009e5d 	.word	0x08009e5d
 8009d24:	20001008 	.word	0x20001008

08009d28 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b08a      	sub	sp, #40	; 0x28
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	60f8      	str	r0, [r7, #12]
 8009d30:	60b9      	str	r1, [r7, #8]
 8009d32:	607a      	str	r2, [r7, #4]
 8009d34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009d36:	2300      	movs	r3, #0
 8009d38:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d10a      	bne.n	8009d56 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d44:	f383 8811 	msr	BASEPRI, r3
 8009d48:	f3bf 8f6f 	isb	sy
 8009d4c:	f3bf 8f4f 	dsb	sy
 8009d50:	623b      	str	r3, [r7, #32]
}
 8009d52:	bf00      	nop
 8009d54:	e7fe      	b.n	8009d54 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009d56:	4b1a      	ldr	r3, [pc, #104]	; (8009dc0 <xTimerGenericCommand+0x98>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d02a      	beq.n	8009db4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	2b05      	cmp	r3, #5
 8009d6e:	dc18      	bgt.n	8009da2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009d70:	f7ff feb2 	bl	8009ad8 <xTaskGetSchedulerState>
 8009d74:	4603      	mov	r3, r0
 8009d76:	2b02      	cmp	r3, #2
 8009d78:	d109      	bne.n	8009d8e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009d7a:	4b11      	ldr	r3, [pc, #68]	; (8009dc0 <xTimerGenericCommand+0x98>)
 8009d7c:	6818      	ldr	r0, [r3, #0]
 8009d7e:	f107 0110 	add.w	r1, r7, #16
 8009d82:	2300      	movs	r3, #0
 8009d84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d86:	f7fe fc77 	bl	8008678 <xQueueGenericSend>
 8009d8a:	6278      	str	r0, [r7, #36]	; 0x24
 8009d8c:	e012      	b.n	8009db4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009d8e:	4b0c      	ldr	r3, [pc, #48]	; (8009dc0 <xTimerGenericCommand+0x98>)
 8009d90:	6818      	ldr	r0, [r3, #0]
 8009d92:	f107 0110 	add.w	r1, r7, #16
 8009d96:	2300      	movs	r3, #0
 8009d98:	2200      	movs	r2, #0
 8009d9a:	f7fe fc6d 	bl	8008678 <xQueueGenericSend>
 8009d9e:	6278      	str	r0, [r7, #36]	; 0x24
 8009da0:	e008      	b.n	8009db4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009da2:	4b07      	ldr	r3, [pc, #28]	; (8009dc0 <xTimerGenericCommand+0x98>)
 8009da4:	6818      	ldr	r0, [r3, #0]
 8009da6:	f107 0110 	add.w	r1, r7, #16
 8009daa:	2300      	movs	r3, #0
 8009dac:	683a      	ldr	r2, [r7, #0]
 8009dae:	f7fe fd61 	bl	8008874 <xQueueGenericSendFromISR>
 8009db2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3728      	adds	r7, #40	; 0x28
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}
 8009dbe:	bf00      	nop
 8009dc0:	20001004 	.word	0x20001004

08009dc4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b088      	sub	sp, #32
 8009dc8:	af02      	add	r7, sp, #8
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009dce:	4b22      	ldr	r3, [pc, #136]	; (8009e58 <prvProcessExpiredTimer+0x94>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	68db      	ldr	r3, [r3, #12]
 8009dd4:	68db      	ldr	r3, [r3, #12]
 8009dd6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	3304      	adds	r3, #4
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f7fe fae3 	bl	80083a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009de8:	f003 0304 	and.w	r3, r3, #4
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d022      	beq.n	8009e36 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	699a      	ldr	r2, [r3, #24]
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	18d1      	adds	r1, r2, r3
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	683a      	ldr	r2, [r7, #0]
 8009dfc:	6978      	ldr	r0, [r7, #20]
 8009dfe:	f000 f8d1 	bl	8009fa4 <prvInsertTimerInActiveList>
 8009e02:	4603      	mov	r3, r0
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d01f      	beq.n	8009e48 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009e08:	2300      	movs	r3, #0
 8009e0a:	9300      	str	r3, [sp, #0]
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	2100      	movs	r1, #0
 8009e12:	6978      	ldr	r0, [r7, #20]
 8009e14:	f7ff ff88 	bl	8009d28 <xTimerGenericCommand>
 8009e18:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d113      	bne.n	8009e48 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e24:	f383 8811 	msr	BASEPRI, r3
 8009e28:	f3bf 8f6f 	isb	sy
 8009e2c:	f3bf 8f4f 	dsb	sy
 8009e30:	60fb      	str	r3, [r7, #12]
}
 8009e32:	bf00      	nop
 8009e34:	e7fe      	b.n	8009e34 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e3c:	f023 0301 	bic.w	r3, r3, #1
 8009e40:	b2da      	uxtb	r2, r3
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	6a1b      	ldr	r3, [r3, #32]
 8009e4c:	6978      	ldr	r0, [r7, #20]
 8009e4e:	4798      	blx	r3
}
 8009e50:	bf00      	nop
 8009e52:	3718      	adds	r7, #24
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}
 8009e58:	20000ffc 	.word	0x20000ffc

08009e5c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b084      	sub	sp, #16
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009e64:	f107 0308 	add.w	r3, r7, #8
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f000 f857 	bl	8009f1c <prvGetNextExpireTime>
 8009e6e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	4619      	mov	r1, r3
 8009e74:	68f8      	ldr	r0, [r7, #12]
 8009e76:	f000 f803 	bl	8009e80 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009e7a:	f000 f8d5 	bl	800a028 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009e7e:	e7f1      	b.n	8009e64 <prvTimerTask+0x8>

08009e80 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b084      	sub	sp, #16
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009e8a:	f7ff fa39 	bl	8009300 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009e8e:	f107 0308 	add.w	r3, r7, #8
 8009e92:	4618      	mov	r0, r3
 8009e94:	f000 f866 	bl	8009f64 <prvSampleTimeNow>
 8009e98:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d130      	bne.n	8009f02 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d10a      	bne.n	8009ebc <prvProcessTimerOrBlockTask+0x3c>
 8009ea6:	687a      	ldr	r2, [r7, #4]
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d806      	bhi.n	8009ebc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009eae:	f7ff fa35 	bl	800931c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009eb2:	68f9      	ldr	r1, [r7, #12]
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f7ff ff85 	bl	8009dc4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009eba:	e024      	b.n	8009f06 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d008      	beq.n	8009ed4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009ec2:	4b13      	ldr	r3, [pc, #76]	; (8009f10 <prvProcessTimerOrBlockTask+0x90>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d101      	bne.n	8009ed0 <prvProcessTimerOrBlockTask+0x50>
 8009ecc:	2301      	movs	r3, #1
 8009ece:	e000      	b.n	8009ed2 <prvProcessTimerOrBlockTask+0x52>
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009ed4:	4b0f      	ldr	r3, [pc, #60]	; (8009f14 <prvProcessTimerOrBlockTask+0x94>)
 8009ed6:	6818      	ldr	r0, [r3, #0]
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	1ad3      	subs	r3, r2, r3
 8009ede:	683a      	ldr	r2, [r7, #0]
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	f7fe ff7d 	bl	8008de0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009ee6:	f7ff fa19 	bl	800931c <xTaskResumeAll>
 8009eea:	4603      	mov	r3, r0
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d10a      	bne.n	8009f06 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009ef0:	4b09      	ldr	r3, [pc, #36]	; (8009f18 <prvProcessTimerOrBlockTask+0x98>)
 8009ef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ef6:	601a      	str	r2, [r3, #0]
 8009ef8:	f3bf 8f4f 	dsb	sy
 8009efc:	f3bf 8f6f 	isb	sy
}
 8009f00:	e001      	b.n	8009f06 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009f02:	f7ff fa0b 	bl	800931c <xTaskResumeAll>
}
 8009f06:	bf00      	nop
 8009f08:	3710      	adds	r7, #16
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}
 8009f0e:	bf00      	nop
 8009f10:	20001000 	.word	0x20001000
 8009f14:	20001004 	.word	0x20001004
 8009f18:	e000ed04 	.word	0xe000ed04

08009f1c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b085      	sub	sp, #20
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009f24:	4b0e      	ldr	r3, [pc, #56]	; (8009f60 <prvGetNextExpireTime+0x44>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d101      	bne.n	8009f32 <prvGetNextExpireTime+0x16>
 8009f2e:	2201      	movs	r2, #1
 8009f30:	e000      	b.n	8009f34 <prvGetNextExpireTime+0x18>
 8009f32:	2200      	movs	r2, #0
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d105      	bne.n	8009f4c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009f40:	4b07      	ldr	r3, [pc, #28]	; (8009f60 <prvGetNextExpireTime+0x44>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	68db      	ldr	r3, [r3, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	60fb      	str	r3, [r7, #12]
 8009f4a:	e001      	b.n	8009f50 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009f50:	68fb      	ldr	r3, [r7, #12]
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3714      	adds	r7, #20
 8009f56:	46bd      	mov	sp, r7
 8009f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5c:	4770      	bx	lr
 8009f5e:	bf00      	nop
 8009f60:	20000ffc 	.word	0x20000ffc

08009f64 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b084      	sub	sp, #16
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009f6c:	f7ff fa74 	bl	8009458 <xTaskGetTickCount>
 8009f70:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009f72:	4b0b      	ldr	r3, [pc, #44]	; (8009fa0 <prvSampleTimeNow+0x3c>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	68fa      	ldr	r2, [r7, #12]
 8009f78:	429a      	cmp	r2, r3
 8009f7a:	d205      	bcs.n	8009f88 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009f7c:	f000 f936 	bl	800a1ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2201      	movs	r2, #1
 8009f84:	601a      	str	r2, [r3, #0]
 8009f86:	e002      	b.n	8009f8e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009f8e:	4a04      	ldr	r2, [pc, #16]	; (8009fa0 <prvSampleTimeNow+0x3c>)
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009f94:	68fb      	ldr	r3, [r7, #12]
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3710      	adds	r7, #16
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}
 8009f9e:	bf00      	nop
 8009fa0:	2000100c 	.word	0x2000100c

08009fa4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b086      	sub	sp, #24
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	60f8      	str	r0, [r7, #12]
 8009fac:	60b9      	str	r1, [r7, #8]
 8009fae:	607a      	str	r2, [r7, #4]
 8009fb0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	68ba      	ldr	r2, [r7, #8]
 8009fba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	68fa      	ldr	r2, [r7, #12]
 8009fc0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009fc2:	68ba      	ldr	r2, [r7, #8]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d812      	bhi.n	8009ff0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fca:	687a      	ldr	r2, [r7, #4]
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	1ad2      	subs	r2, r2, r3
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	699b      	ldr	r3, [r3, #24]
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d302      	bcc.n	8009fde <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009fd8:	2301      	movs	r3, #1
 8009fda:	617b      	str	r3, [r7, #20]
 8009fdc:	e01b      	b.n	800a016 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009fde:	4b10      	ldr	r3, [pc, #64]	; (800a020 <prvInsertTimerInActiveList+0x7c>)
 8009fe0:	681a      	ldr	r2, [r3, #0]
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	3304      	adds	r3, #4
 8009fe6:	4619      	mov	r1, r3
 8009fe8:	4610      	mov	r0, r2
 8009fea:	f7fe f9a4 	bl	8008336 <vListInsert>
 8009fee:	e012      	b.n	800a016 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009ff0:	687a      	ldr	r2, [r7, #4]
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	429a      	cmp	r2, r3
 8009ff6:	d206      	bcs.n	800a006 <prvInsertTimerInActiveList+0x62>
 8009ff8:	68ba      	ldr	r2, [r7, #8]
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	d302      	bcc.n	800a006 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a000:	2301      	movs	r3, #1
 800a002:	617b      	str	r3, [r7, #20]
 800a004:	e007      	b.n	800a016 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a006:	4b07      	ldr	r3, [pc, #28]	; (800a024 <prvInsertTimerInActiveList+0x80>)
 800a008:	681a      	ldr	r2, [r3, #0]
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	3304      	adds	r3, #4
 800a00e:	4619      	mov	r1, r3
 800a010:	4610      	mov	r0, r2
 800a012:	f7fe f990 	bl	8008336 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a016:	697b      	ldr	r3, [r7, #20]
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3718      	adds	r7, #24
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}
 800a020:	20001000 	.word	0x20001000
 800a024:	20000ffc 	.word	0x20000ffc

0800a028 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b08e      	sub	sp, #56	; 0x38
 800a02c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a02e:	e0ca      	b.n	800a1c6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2b00      	cmp	r3, #0
 800a034:	da18      	bge.n	800a068 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a036:	1d3b      	adds	r3, r7, #4
 800a038:	3304      	adds	r3, #4
 800a03a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a03c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d10a      	bne.n	800a058 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a046:	f383 8811 	msr	BASEPRI, r3
 800a04a:	f3bf 8f6f 	isb	sy
 800a04e:	f3bf 8f4f 	dsb	sy
 800a052:	61fb      	str	r3, [r7, #28]
}
 800a054:	bf00      	nop
 800a056:	e7fe      	b.n	800a056 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a05e:	6850      	ldr	r0, [r2, #4]
 800a060:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a062:	6892      	ldr	r2, [r2, #8]
 800a064:	4611      	mov	r1, r2
 800a066:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	f2c0 80aa 	blt.w	800a1c4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a076:	695b      	ldr	r3, [r3, #20]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d004      	beq.n	800a086 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a07c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a07e:	3304      	adds	r3, #4
 800a080:	4618      	mov	r0, r3
 800a082:	f7fe f991 	bl	80083a8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a086:	463b      	mov	r3, r7
 800a088:	4618      	mov	r0, r3
 800a08a:	f7ff ff6b 	bl	8009f64 <prvSampleTimeNow>
 800a08e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2b09      	cmp	r3, #9
 800a094:	f200 8097 	bhi.w	800a1c6 <prvProcessReceivedCommands+0x19e>
 800a098:	a201      	add	r2, pc, #4	; (adr r2, 800a0a0 <prvProcessReceivedCommands+0x78>)
 800a09a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a09e:	bf00      	nop
 800a0a0:	0800a0c9 	.word	0x0800a0c9
 800a0a4:	0800a0c9 	.word	0x0800a0c9
 800a0a8:	0800a0c9 	.word	0x0800a0c9
 800a0ac:	0800a13d 	.word	0x0800a13d
 800a0b0:	0800a151 	.word	0x0800a151
 800a0b4:	0800a19b 	.word	0x0800a19b
 800a0b8:	0800a0c9 	.word	0x0800a0c9
 800a0bc:	0800a0c9 	.word	0x0800a0c9
 800a0c0:	0800a13d 	.word	0x0800a13d
 800a0c4:	0800a151 	.word	0x0800a151
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a0c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0ce:	f043 0301 	orr.w	r3, r3, #1
 800a0d2:	b2da      	uxtb	r2, r3
 800a0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a0da:	68ba      	ldr	r2, [r7, #8]
 800a0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0de:	699b      	ldr	r3, [r3, #24]
 800a0e0:	18d1      	adds	r1, r2, r3
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0e8:	f7ff ff5c 	bl	8009fa4 <prvInsertTimerInActiveList>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d069      	beq.n	800a1c6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f4:	6a1b      	ldr	r3, [r3, #32]
 800a0f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0f8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a100:	f003 0304 	and.w	r3, r3, #4
 800a104:	2b00      	cmp	r3, #0
 800a106:	d05e      	beq.n	800a1c6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a108:	68ba      	ldr	r2, [r7, #8]
 800a10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a10c:	699b      	ldr	r3, [r3, #24]
 800a10e:	441a      	add	r2, r3
 800a110:	2300      	movs	r3, #0
 800a112:	9300      	str	r3, [sp, #0]
 800a114:	2300      	movs	r3, #0
 800a116:	2100      	movs	r1, #0
 800a118:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a11a:	f7ff fe05 	bl	8009d28 <xTimerGenericCommand>
 800a11e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a120:	6a3b      	ldr	r3, [r7, #32]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d14f      	bne.n	800a1c6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a12a:	f383 8811 	msr	BASEPRI, r3
 800a12e:	f3bf 8f6f 	isb	sy
 800a132:	f3bf 8f4f 	dsb	sy
 800a136:	61bb      	str	r3, [r7, #24]
}
 800a138:	bf00      	nop
 800a13a:	e7fe      	b.n	800a13a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a13e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a142:	f023 0301 	bic.w	r3, r3, #1
 800a146:	b2da      	uxtb	r2, r3
 800a148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a14a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a14e:	e03a      	b.n	800a1c6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a152:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a156:	f043 0301 	orr.w	r3, r3, #1
 800a15a:	b2da      	uxtb	r2, r3
 800a15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a15e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a162:	68ba      	ldr	r2, [r7, #8]
 800a164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a166:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a16a:	699b      	ldr	r3, [r3, #24]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d10a      	bne.n	800a186 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a174:	f383 8811 	msr	BASEPRI, r3
 800a178:	f3bf 8f6f 	isb	sy
 800a17c:	f3bf 8f4f 	dsb	sy
 800a180:	617b      	str	r3, [r7, #20]
}
 800a182:	bf00      	nop
 800a184:	e7fe      	b.n	800a184 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a188:	699a      	ldr	r2, [r3, #24]
 800a18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a18c:	18d1      	adds	r1, r2, r3
 800a18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a192:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a194:	f7ff ff06 	bl	8009fa4 <prvInsertTimerInActiveList>
					break;
 800a198:	e015      	b.n	800a1c6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a19c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1a0:	f003 0302 	and.w	r3, r3, #2
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d103      	bne.n	800a1b0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a1a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1aa:	f000 fbe1 	bl	800a970 <vPortFree>
 800a1ae:	e00a      	b.n	800a1c6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1b6:	f023 0301 	bic.w	r3, r3, #1
 800a1ba:	b2da      	uxtb	r2, r3
 800a1bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a1c2:	e000      	b.n	800a1c6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a1c4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a1c6:	4b08      	ldr	r3, [pc, #32]	; (800a1e8 <prvProcessReceivedCommands+0x1c0>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	1d39      	adds	r1, r7, #4
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f7fe fbec 	bl	80089ac <xQueueReceive>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	f47f af2a 	bne.w	800a030 <prvProcessReceivedCommands+0x8>
	}
}
 800a1dc:	bf00      	nop
 800a1de:	bf00      	nop
 800a1e0:	3730      	adds	r7, #48	; 0x30
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}
 800a1e6:	bf00      	nop
 800a1e8:	20001004 	.word	0x20001004

0800a1ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b088      	sub	sp, #32
 800a1f0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a1f2:	e048      	b.n	800a286 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a1f4:	4b2d      	ldr	r3, [pc, #180]	; (800a2ac <prvSwitchTimerLists+0xc0>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	68db      	ldr	r3, [r3, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1fe:	4b2b      	ldr	r3, [pc, #172]	; (800a2ac <prvSwitchTimerLists+0xc0>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	68db      	ldr	r3, [r3, #12]
 800a204:	68db      	ldr	r3, [r3, #12]
 800a206:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	3304      	adds	r3, #4
 800a20c:	4618      	mov	r0, r3
 800a20e:	f7fe f8cb 	bl	80083a8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	6a1b      	ldr	r3, [r3, #32]
 800a216:	68f8      	ldr	r0, [r7, #12]
 800a218:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a220:	f003 0304 	and.w	r3, r3, #4
 800a224:	2b00      	cmp	r3, #0
 800a226:	d02e      	beq.n	800a286 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	699b      	ldr	r3, [r3, #24]
 800a22c:	693a      	ldr	r2, [r7, #16]
 800a22e:	4413      	add	r3, r2
 800a230:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a232:	68ba      	ldr	r2, [r7, #8]
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	429a      	cmp	r2, r3
 800a238:	d90e      	bls.n	800a258 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	68ba      	ldr	r2, [r7, #8]
 800a23e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	68fa      	ldr	r2, [r7, #12]
 800a244:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a246:	4b19      	ldr	r3, [pc, #100]	; (800a2ac <prvSwitchTimerLists+0xc0>)
 800a248:	681a      	ldr	r2, [r3, #0]
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	3304      	adds	r3, #4
 800a24e:	4619      	mov	r1, r3
 800a250:	4610      	mov	r0, r2
 800a252:	f7fe f870 	bl	8008336 <vListInsert>
 800a256:	e016      	b.n	800a286 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a258:	2300      	movs	r3, #0
 800a25a:	9300      	str	r3, [sp, #0]
 800a25c:	2300      	movs	r3, #0
 800a25e:	693a      	ldr	r2, [r7, #16]
 800a260:	2100      	movs	r1, #0
 800a262:	68f8      	ldr	r0, [r7, #12]
 800a264:	f7ff fd60 	bl	8009d28 <xTimerGenericCommand>
 800a268:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d10a      	bne.n	800a286 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a274:	f383 8811 	msr	BASEPRI, r3
 800a278:	f3bf 8f6f 	isb	sy
 800a27c:	f3bf 8f4f 	dsb	sy
 800a280:	603b      	str	r3, [r7, #0]
}
 800a282:	bf00      	nop
 800a284:	e7fe      	b.n	800a284 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a286:	4b09      	ldr	r3, [pc, #36]	; (800a2ac <prvSwitchTimerLists+0xc0>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d1b1      	bne.n	800a1f4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a290:	4b06      	ldr	r3, [pc, #24]	; (800a2ac <prvSwitchTimerLists+0xc0>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a296:	4b06      	ldr	r3, [pc, #24]	; (800a2b0 <prvSwitchTimerLists+0xc4>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	4a04      	ldr	r2, [pc, #16]	; (800a2ac <prvSwitchTimerLists+0xc0>)
 800a29c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a29e:	4a04      	ldr	r2, [pc, #16]	; (800a2b0 <prvSwitchTimerLists+0xc4>)
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	6013      	str	r3, [r2, #0]
}
 800a2a4:	bf00      	nop
 800a2a6:	3718      	adds	r7, #24
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}
 800a2ac:	20000ffc 	.word	0x20000ffc
 800a2b0:	20001000 	.word	0x20001000

0800a2b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b082      	sub	sp, #8
 800a2b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a2ba:	f000 f96b 	bl	800a594 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a2be:	4b15      	ldr	r3, [pc, #84]	; (800a314 <prvCheckForValidListAndQueue+0x60>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d120      	bne.n	800a308 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a2c6:	4814      	ldr	r0, [pc, #80]	; (800a318 <prvCheckForValidListAndQueue+0x64>)
 800a2c8:	f7fd ffe4 	bl	8008294 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a2cc:	4813      	ldr	r0, [pc, #76]	; (800a31c <prvCheckForValidListAndQueue+0x68>)
 800a2ce:	f7fd ffe1 	bl	8008294 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a2d2:	4b13      	ldr	r3, [pc, #76]	; (800a320 <prvCheckForValidListAndQueue+0x6c>)
 800a2d4:	4a10      	ldr	r2, [pc, #64]	; (800a318 <prvCheckForValidListAndQueue+0x64>)
 800a2d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a2d8:	4b12      	ldr	r3, [pc, #72]	; (800a324 <prvCheckForValidListAndQueue+0x70>)
 800a2da:	4a10      	ldr	r2, [pc, #64]	; (800a31c <prvCheckForValidListAndQueue+0x68>)
 800a2dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a2de:	2300      	movs	r3, #0
 800a2e0:	9300      	str	r3, [sp, #0]
 800a2e2:	4b11      	ldr	r3, [pc, #68]	; (800a328 <prvCheckForValidListAndQueue+0x74>)
 800a2e4:	4a11      	ldr	r2, [pc, #68]	; (800a32c <prvCheckForValidListAndQueue+0x78>)
 800a2e6:	2110      	movs	r1, #16
 800a2e8:	200a      	movs	r0, #10
 800a2ea:	f7fe f8ef 	bl	80084cc <xQueueGenericCreateStatic>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	4a08      	ldr	r2, [pc, #32]	; (800a314 <prvCheckForValidListAndQueue+0x60>)
 800a2f2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a2f4:	4b07      	ldr	r3, [pc, #28]	; (800a314 <prvCheckForValidListAndQueue+0x60>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d005      	beq.n	800a308 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a2fc:	4b05      	ldr	r3, [pc, #20]	; (800a314 <prvCheckForValidListAndQueue+0x60>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	490b      	ldr	r1, [pc, #44]	; (800a330 <prvCheckForValidListAndQueue+0x7c>)
 800a302:	4618      	mov	r0, r3
 800a304:	f7fe fd42 	bl	8008d8c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a308:	f000 f974 	bl	800a5f4 <vPortExitCritical>
}
 800a30c:	bf00      	nop
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}
 800a312:	bf00      	nop
 800a314:	20001004 	.word	0x20001004
 800a318:	20000fd4 	.word	0x20000fd4
 800a31c:	20000fe8 	.word	0x20000fe8
 800a320:	20000ffc 	.word	0x20000ffc
 800a324:	20001000 	.word	0x20001000
 800a328:	200010b0 	.word	0x200010b0
 800a32c:	20001010 	.word	0x20001010
 800a330:	0800b86c 	.word	0x0800b86c

0800a334 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a334:	b480      	push	{r7}
 800a336:	b085      	sub	sp, #20
 800a338:	af00      	add	r7, sp, #0
 800a33a:	60f8      	str	r0, [r7, #12]
 800a33c:	60b9      	str	r1, [r7, #8]
 800a33e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	3b04      	subs	r3, #4
 800a344:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a34c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	3b04      	subs	r3, #4
 800a352:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	f023 0201 	bic.w	r2, r3, #1
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	3b04      	subs	r3, #4
 800a362:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a364:	4a0c      	ldr	r2, [pc, #48]	; (800a398 <pxPortInitialiseStack+0x64>)
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	3b14      	subs	r3, #20
 800a36e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a370:	687a      	ldr	r2, [r7, #4]
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	3b04      	subs	r3, #4
 800a37a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	f06f 0202 	mvn.w	r2, #2
 800a382:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	3b20      	subs	r3, #32
 800a388:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a38a:	68fb      	ldr	r3, [r7, #12]
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3714      	adds	r7, #20
 800a390:	46bd      	mov	sp, r7
 800a392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a396:	4770      	bx	lr
 800a398:	0800a39d 	.word	0x0800a39d

0800a39c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a39c:	b480      	push	{r7}
 800a39e:	b085      	sub	sp, #20
 800a3a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a3a6:	4b12      	ldr	r3, [pc, #72]	; (800a3f0 <prvTaskExitError+0x54>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3ae:	d00a      	beq.n	800a3c6 <prvTaskExitError+0x2a>
	__asm volatile
 800a3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b4:	f383 8811 	msr	BASEPRI, r3
 800a3b8:	f3bf 8f6f 	isb	sy
 800a3bc:	f3bf 8f4f 	dsb	sy
 800a3c0:	60fb      	str	r3, [r7, #12]
}
 800a3c2:	bf00      	nop
 800a3c4:	e7fe      	b.n	800a3c4 <prvTaskExitError+0x28>
	__asm volatile
 800a3c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ca:	f383 8811 	msr	BASEPRI, r3
 800a3ce:	f3bf 8f6f 	isb	sy
 800a3d2:	f3bf 8f4f 	dsb	sy
 800a3d6:	60bb      	str	r3, [r7, #8]
}
 800a3d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a3da:	bf00      	nop
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d0fc      	beq.n	800a3dc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a3e2:	bf00      	nop
 800a3e4:	bf00      	nop
 800a3e6:	3714      	adds	r7, #20
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ee:	4770      	bx	lr
 800a3f0:	20000098 	.word	0x20000098
	...

0800a400 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a400:	4b07      	ldr	r3, [pc, #28]	; (800a420 <pxCurrentTCBConst2>)
 800a402:	6819      	ldr	r1, [r3, #0]
 800a404:	6808      	ldr	r0, [r1, #0]
 800a406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a40a:	f380 8809 	msr	PSP, r0
 800a40e:	f3bf 8f6f 	isb	sy
 800a412:	f04f 0000 	mov.w	r0, #0
 800a416:	f380 8811 	msr	BASEPRI, r0
 800a41a:	4770      	bx	lr
 800a41c:	f3af 8000 	nop.w

0800a420 <pxCurrentTCBConst2>:
 800a420:	20000ad4 	.word	0x20000ad4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a424:	bf00      	nop
 800a426:	bf00      	nop

0800a428 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a428:	4808      	ldr	r0, [pc, #32]	; (800a44c <prvPortStartFirstTask+0x24>)
 800a42a:	6800      	ldr	r0, [r0, #0]
 800a42c:	6800      	ldr	r0, [r0, #0]
 800a42e:	f380 8808 	msr	MSP, r0
 800a432:	f04f 0000 	mov.w	r0, #0
 800a436:	f380 8814 	msr	CONTROL, r0
 800a43a:	b662      	cpsie	i
 800a43c:	b661      	cpsie	f
 800a43e:	f3bf 8f4f 	dsb	sy
 800a442:	f3bf 8f6f 	isb	sy
 800a446:	df00      	svc	0
 800a448:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a44a:	bf00      	nop
 800a44c:	e000ed08 	.word	0xe000ed08

0800a450 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b086      	sub	sp, #24
 800a454:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a456:	4b46      	ldr	r3, [pc, #280]	; (800a570 <xPortStartScheduler+0x120>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4a46      	ldr	r2, [pc, #280]	; (800a574 <xPortStartScheduler+0x124>)
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d10a      	bne.n	800a476 <xPortStartScheduler+0x26>
	__asm volatile
 800a460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a464:	f383 8811 	msr	BASEPRI, r3
 800a468:	f3bf 8f6f 	isb	sy
 800a46c:	f3bf 8f4f 	dsb	sy
 800a470:	613b      	str	r3, [r7, #16]
}
 800a472:	bf00      	nop
 800a474:	e7fe      	b.n	800a474 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a476:	4b3e      	ldr	r3, [pc, #248]	; (800a570 <xPortStartScheduler+0x120>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	4a3f      	ldr	r2, [pc, #252]	; (800a578 <xPortStartScheduler+0x128>)
 800a47c:	4293      	cmp	r3, r2
 800a47e:	d10a      	bne.n	800a496 <xPortStartScheduler+0x46>
	__asm volatile
 800a480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a484:	f383 8811 	msr	BASEPRI, r3
 800a488:	f3bf 8f6f 	isb	sy
 800a48c:	f3bf 8f4f 	dsb	sy
 800a490:	60fb      	str	r3, [r7, #12]
}
 800a492:	bf00      	nop
 800a494:	e7fe      	b.n	800a494 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a496:	4b39      	ldr	r3, [pc, #228]	; (800a57c <xPortStartScheduler+0x12c>)
 800a498:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	781b      	ldrb	r3, [r3, #0]
 800a49e:	b2db      	uxtb	r3, r3
 800a4a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	22ff      	movs	r2, #255	; 0xff
 800a4a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	781b      	ldrb	r3, [r3, #0]
 800a4ac:	b2db      	uxtb	r3, r3
 800a4ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a4b0:	78fb      	ldrb	r3, [r7, #3]
 800a4b2:	b2db      	uxtb	r3, r3
 800a4b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a4b8:	b2da      	uxtb	r2, r3
 800a4ba:	4b31      	ldr	r3, [pc, #196]	; (800a580 <xPortStartScheduler+0x130>)
 800a4bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a4be:	4b31      	ldr	r3, [pc, #196]	; (800a584 <xPortStartScheduler+0x134>)
 800a4c0:	2207      	movs	r2, #7
 800a4c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a4c4:	e009      	b.n	800a4da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a4c6:	4b2f      	ldr	r3, [pc, #188]	; (800a584 <xPortStartScheduler+0x134>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	3b01      	subs	r3, #1
 800a4cc:	4a2d      	ldr	r2, [pc, #180]	; (800a584 <xPortStartScheduler+0x134>)
 800a4ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a4d0:	78fb      	ldrb	r3, [r7, #3]
 800a4d2:	b2db      	uxtb	r3, r3
 800a4d4:	005b      	lsls	r3, r3, #1
 800a4d6:	b2db      	uxtb	r3, r3
 800a4d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a4da:	78fb      	ldrb	r3, [r7, #3]
 800a4dc:	b2db      	uxtb	r3, r3
 800a4de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4e2:	2b80      	cmp	r3, #128	; 0x80
 800a4e4:	d0ef      	beq.n	800a4c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a4e6:	4b27      	ldr	r3, [pc, #156]	; (800a584 <xPortStartScheduler+0x134>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f1c3 0307 	rsb	r3, r3, #7
 800a4ee:	2b04      	cmp	r3, #4
 800a4f0:	d00a      	beq.n	800a508 <xPortStartScheduler+0xb8>
	__asm volatile
 800a4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f6:	f383 8811 	msr	BASEPRI, r3
 800a4fa:	f3bf 8f6f 	isb	sy
 800a4fe:	f3bf 8f4f 	dsb	sy
 800a502:	60bb      	str	r3, [r7, #8]
}
 800a504:	bf00      	nop
 800a506:	e7fe      	b.n	800a506 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a508:	4b1e      	ldr	r3, [pc, #120]	; (800a584 <xPortStartScheduler+0x134>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	021b      	lsls	r3, r3, #8
 800a50e:	4a1d      	ldr	r2, [pc, #116]	; (800a584 <xPortStartScheduler+0x134>)
 800a510:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a512:	4b1c      	ldr	r3, [pc, #112]	; (800a584 <xPortStartScheduler+0x134>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a51a:	4a1a      	ldr	r2, [pc, #104]	; (800a584 <xPortStartScheduler+0x134>)
 800a51c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	b2da      	uxtb	r2, r3
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a526:	4b18      	ldr	r3, [pc, #96]	; (800a588 <xPortStartScheduler+0x138>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	4a17      	ldr	r2, [pc, #92]	; (800a588 <xPortStartScheduler+0x138>)
 800a52c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a530:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a532:	4b15      	ldr	r3, [pc, #84]	; (800a588 <xPortStartScheduler+0x138>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	4a14      	ldr	r2, [pc, #80]	; (800a588 <xPortStartScheduler+0x138>)
 800a538:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a53c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a53e:	f000 f8dd 	bl	800a6fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a542:	4b12      	ldr	r3, [pc, #72]	; (800a58c <xPortStartScheduler+0x13c>)
 800a544:	2200      	movs	r2, #0
 800a546:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a548:	f000 f8fc 	bl	800a744 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a54c:	4b10      	ldr	r3, [pc, #64]	; (800a590 <xPortStartScheduler+0x140>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4a0f      	ldr	r2, [pc, #60]	; (800a590 <xPortStartScheduler+0x140>)
 800a552:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a556:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a558:	f7ff ff66 	bl	800a428 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a55c:	f7ff f846 	bl	80095ec <vTaskSwitchContext>
	prvTaskExitError();
 800a560:	f7ff ff1c 	bl	800a39c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a564:	2300      	movs	r3, #0
}
 800a566:	4618      	mov	r0, r3
 800a568:	3718      	adds	r7, #24
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}
 800a56e:	bf00      	nop
 800a570:	e000ed00 	.word	0xe000ed00
 800a574:	410fc271 	.word	0x410fc271
 800a578:	410fc270 	.word	0x410fc270
 800a57c:	e000e400 	.word	0xe000e400
 800a580:	20001100 	.word	0x20001100
 800a584:	20001104 	.word	0x20001104
 800a588:	e000ed20 	.word	0xe000ed20
 800a58c:	20000098 	.word	0x20000098
 800a590:	e000ef34 	.word	0xe000ef34

0800a594 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a594:	b480      	push	{r7}
 800a596:	b083      	sub	sp, #12
 800a598:	af00      	add	r7, sp, #0
	__asm volatile
 800a59a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a59e:	f383 8811 	msr	BASEPRI, r3
 800a5a2:	f3bf 8f6f 	isb	sy
 800a5a6:	f3bf 8f4f 	dsb	sy
 800a5aa:	607b      	str	r3, [r7, #4]
}
 800a5ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a5ae:	4b0f      	ldr	r3, [pc, #60]	; (800a5ec <vPortEnterCritical+0x58>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	3301      	adds	r3, #1
 800a5b4:	4a0d      	ldr	r2, [pc, #52]	; (800a5ec <vPortEnterCritical+0x58>)
 800a5b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a5b8:	4b0c      	ldr	r3, [pc, #48]	; (800a5ec <vPortEnterCritical+0x58>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	2b01      	cmp	r3, #1
 800a5be:	d10f      	bne.n	800a5e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a5c0:	4b0b      	ldr	r3, [pc, #44]	; (800a5f0 <vPortEnterCritical+0x5c>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	b2db      	uxtb	r3, r3
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d00a      	beq.n	800a5e0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ce:	f383 8811 	msr	BASEPRI, r3
 800a5d2:	f3bf 8f6f 	isb	sy
 800a5d6:	f3bf 8f4f 	dsb	sy
 800a5da:	603b      	str	r3, [r7, #0]
}
 800a5dc:	bf00      	nop
 800a5de:	e7fe      	b.n	800a5de <vPortEnterCritical+0x4a>
	}
}
 800a5e0:	bf00      	nop
 800a5e2:	370c      	adds	r7, #12
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr
 800a5ec:	20000098 	.word	0x20000098
 800a5f0:	e000ed04 	.word	0xe000ed04

0800a5f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b083      	sub	sp, #12
 800a5f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a5fa:	4b12      	ldr	r3, [pc, #72]	; (800a644 <vPortExitCritical+0x50>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d10a      	bne.n	800a618 <vPortExitCritical+0x24>
	__asm volatile
 800a602:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a606:	f383 8811 	msr	BASEPRI, r3
 800a60a:	f3bf 8f6f 	isb	sy
 800a60e:	f3bf 8f4f 	dsb	sy
 800a612:	607b      	str	r3, [r7, #4]
}
 800a614:	bf00      	nop
 800a616:	e7fe      	b.n	800a616 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a618:	4b0a      	ldr	r3, [pc, #40]	; (800a644 <vPortExitCritical+0x50>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	3b01      	subs	r3, #1
 800a61e:	4a09      	ldr	r2, [pc, #36]	; (800a644 <vPortExitCritical+0x50>)
 800a620:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a622:	4b08      	ldr	r3, [pc, #32]	; (800a644 <vPortExitCritical+0x50>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d105      	bne.n	800a636 <vPortExitCritical+0x42>
 800a62a:	2300      	movs	r3, #0
 800a62c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	f383 8811 	msr	BASEPRI, r3
}
 800a634:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a636:	bf00      	nop
 800a638:	370c      	adds	r7, #12
 800a63a:	46bd      	mov	sp, r7
 800a63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a640:	4770      	bx	lr
 800a642:	bf00      	nop
 800a644:	20000098 	.word	0x20000098
	...

0800a650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a650:	f3ef 8009 	mrs	r0, PSP
 800a654:	f3bf 8f6f 	isb	sy
 800a658:	4b15      	ldr	r3, [pc, #84]	; (800a6b0 <pxCurrentTCBConst>)
 800a65a:	681a      	ldr	r2, [r3, #0]
 800a65c:	f01e 0f10 	tst.w	lr, #16
 800a660:	bf08      	it	eq
 800a662:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a666:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a66a:	6010      	str	r0, [r2, #0]
 800a66c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a670:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a674:	f380 8811 	msr	BASEPRI, r0
 800a678:	f3bf 8f4f 	dsb	sy
 800a67c:	f3bf 8f6f 	isb	sy
 800a680:	f7fe ffb4 	bl	80095ec <vTaskSwitchContext>
 800a684:	f04f 0000 	mov.w	r0, #0
 800a688:	f380 8811 	msr	BASEPRI, r0
 800a68c:	bc09      	pop	{r0, r3}
 800a68e:	6819      	ldr	r1, [r3, #0]
 800a690:	6808      	ldr	r0, [r1, #0]
 800a692:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a696:	f01e 0f10 	tst.w	lr, #16
 800a69a:	bf08      	it	eq
 800a69c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a6a0:	f380 8809 	msr	PSP, r0
 800a6a4:	f3bf 8f6f 	isb	sy
 800a6a8:	4770      	bx	lr
 800a6aa:	bf00      	nop
 800a6ac:	f3af 8000 	nop.w

0800a6b0 <pxCurrentTCBConst>:
 800a6b0:	20000ad4 	.word	0x20000ad4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a6b4:	bf00      	nop
 800a6b6:	bf00      	nop

0800a6b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	af00      	add	r7, sp, #0
	__asm volatile
 800a6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c2:	f383 8811 	msr	BASEPRI, r3
 800a6c6:	f3bf 8f6f 	isb	sy
 800a6ca:	f3bf 8f4f 	dsb	sy
 800a6ce:	607b      	str	r3, [r7, #4]
}
 800a6d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a6d2:	f7fe fed1 	bl	8009478 <xTaskIncrementTick>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d003      	beq.n	800a6e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a6dc:	4b06      	ldr	r3, [pc, #24]	; (800a6f8 <xPortSysTickHandler+0x40>)
 800a6de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6e2:	601a      	str	r2, [r3, #0]
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	f383 8811 	msr	BASEPRI, r3
}
 800a6ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a6f0:	bf00      	nop
 800a6f2:	3708      	adds	r7, #8
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}
 800a6f8:	e000ed04 	.word	0xe000ed04

0800a6fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a700:	4b0b      	ldr	r3, [pc, #44]	; (800a730 <vPortSetupTimerInterrupt+0x34>)
 800a702:	2200      	movs	r2, #0
 800a704:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a706:	4b0b      	ldr	r3, [pc, #44]	; (800a734 <vPortSetupTimerInterrupt+0x38>)
 800a708:	2200      	movs	r2, #0
 800a70a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a70c:	4b0a      	ldr	r3, [pc, #40]	; (800a738 <vPortSetupTimerInterrupt+0x3c>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a0a      	ldr	r2, [pc, #40]	; (800a73c <vPortSetupTimerInterrupt+0x40>)
 800a712:	fba2 2303 	umull	r2, r3, r2, r3
 800a716:	099b      	lsrs	r3, r3, #6
 800a718:	4a09      	ldr	r2, [pc, #36]	; (800a740 <vPortSetupTimerInterrupt+0x44>)
 800a71a:	3b01      	subs	r3, #1
 800a71c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a71e:	4b04      	ldr	r3, [pc, #16]	; (800a730 <vPortSetupTimerInterrupt+0x34>)
 800a720:	2207      	movs	r2, #7
 800a722:	601a      	str	r2, [r3, #0]
}
 800a724:	bf00      	nop
 800a726:	46bd      	mov	sp, r7
 800a728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72c:	4770      	bx	lr
 800a72e:	bf00      	nop
 800a730:	e000e010 	.word	0xe000e010
 800a734:	e000e018 	.word	0xe000e018
 800a738:	20000000 	.word	0x20000000
 800a73c:	10624dd3 	.word	0x10624dd3
 800a740:	e000e014 	.word	0xe000e014

0800a744 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a744:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a754 <vPortEnableVFP+0x10>
 800a748:	6801      	ldr	r1, [r0, #0]
 800a74a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a74e:	6001      	str	r1, [r0, #0]
 800a750:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a752:	bf00      	nop
 800a754:	e000ed88 	.word	0xe000ed88

0800a758 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a758:	b480      	push	{r7}
 800a75a:	b085      	sub	sp, #20
 800a75c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a75e:	f3ef 8305 	mrs	r3, IPSR
 800a762:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	2b0f      	cmp	r3, #15
 800a768:	d914      	bls.n	800a794 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a76a:	4a17      	ldr	r2, [pc, #92]	; (800a7c8 <vPortValidateInterruptPriority+0x70>)
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	4413      	add	r3, r2
 800a770:	781b      	ldrb	r3, [r3, #0]
 800a772:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a774:	4b15      	ldr	r3, [pc, #84]	; (800a7cc <vPortValidateInterruptPriority+0x74>)
 800a776:	781b      	ldrb	r3, [r3, #0]
 800a778:	7afa      	ldrb	r2, [r7, #11]
 800a77a:	429a      	cmp	r2, r3
 800a77c:	d20a      	bcs.n	800a794 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a782:	f383 8811 	msr	BASEPRI, r3
 800a786:	f3bf 8f6f 	isb	sy
 800a78a:	f3bf 8f4f 	dsb	sy
 800a78e:	607b      	str	r3, [r7, #4]
}
 800a790:	bf00      	nop
 800a792:	e7fe      	b.n	800a792 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a794:	4b0e      	ldr	r3, [pc, #56]	; (800a7d0 <vPortValidateInterruptPriority+0x78>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a79c:	4b0d      	ldr	r3, [pc, #52]	; (800a7d4 <vPortValidateInterruptPriority+0x7c>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d90a      	bls.n	800a7ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a7a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a8:	f383 8811 	msr	BASEPRI, r3
 800a7ac:	f3bf 8f6f 	isb	sy
 800a7b0:	f3bf 8f4f 	dsb	sy
 800a7b4:	603b      	str	r3, [r7, #0]
}
 800a7b6:	bf00      	nop
 800a7b8:	e7fe      	b.n	800a7b8 <vPortValidateInterruptPriority+0x60>
	}
 800a7ba:	bf00      	nop
 800a7bc:	3714      	adds	r7, #20
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c4:	4770      	bx	lr
 800a7c6:	bf00      	nop
 800a7c8:	e000e3f0 	.word	0xe000e3f0
 800a7cc:	20001100 	.word	0x20001100
 800a7d0:	e000ed0c 	.word	0xe000ed0c
 800a7d4:	20001104 	.word	0x20001104

0800a7d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b08a      	sub	sp, #40	; 0x28
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a7e4:	f7fe fd8c 	bl	8009300 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a7e8:	4b5b      	ldr	r3, [pc, #364]	; (800a958 <pvPortMalloc+0x180>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d101      	bne.n	800a7f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a7f0:	f000 f920 	bl	800aa34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a7f4:	4b59      	ldr	r3, [pc, #356]	; (800a95c <pvPortMalloc+0x184>)
 800a7f6:	681a      	ldr	r2, [r3, #0]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	4013      	ands	r3, r2
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	f040 8093 	bne.w	800a928 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d01d      	beq.n	800a844 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a808:	2208      	movs	r2, #8
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	4413      	add	r3, r2
 800a80e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f003 0307 	and.w	r3, r3, #7
 800a816:	2b00      	cmp	r3, #0
 800a818:	d014      	beq.n	800a844 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f023 0307 	bic.w	r3, r3, #7
 800a820:	3308      	adds	r3, #8
 800a822:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f003 0307 	and.w	r3, r3, #7
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d00a      	beq.n	800a844 <pvPortMalloc+0x6c>
	__asm volatile
 800a82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a832:	f383 8811 	msr	BASEPRI, r3
 800a836:	f3bf 8f6f 	isb	sy
 800a83a:	f3bf 8f4f 	dsb	sy
 800a83e:	617b      	str	r3, [r7, #20]
}
 800a840:	bf00      	nop
 800a842:	e7fe      	b.n	800a842 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d06e      	beq.n	800a928 <pvPortMalloc+0x150>
 800a84a:	4b45      	ldr	r3, [pc, #276]	; (800a960 <pvPortMalloc+0x188>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	687a      	ldr	r2, [r7, #4]
 800a850:	429a      	cmp	r2, r3
 800a852:	d869      	bhi.n	800a928 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a854:	4b43      	ldr	r3, [pc, #268]	; (800a964 <pvPortMalloc+0x18c>)
 800a856:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a858:	4b42      	ldr	r3, [pc, #264]	; (800a964 <pvPortMalloc+0x18c>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a85e:	e004      	b.n	800a86a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a862:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a86c:	685b      	ldr	r3, [r3, #4]
 800a86e:	687a      	ldr	r2, [r7, #4]
 800a870:	429a      	cmp	r2, r3
 800a872:	d903      	bls.n	800a87c <pvPortMalloc+0xa4>
 800a874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d1f1      	bne.n	800a860 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a87c:	4b36      	ldr	r3, [pc, #216]	; (800a958 <pvPortMalloc+0x180>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a882:	429a      	cmp	r2, r3
 800a884:	d050      	beq.n	800a928 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a886:	6a3b      	ldr	r3, [r7, #32]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	2208      	movs	r2, #8
 800a88c:	4413      	add	r3, r2
 800a88e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a892:	681a      	ldr	r2, [r3, #0]
 800a894:	6a3b      	ldr	r3, [r7, #32]
 800a896:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a89a:	685a      	ldr	r2, [r3, #4]
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	1ad2      	subs	r2, r2, r3
 800a8a0:	2308      	movs	r3, #8
 800a8a2:	005b      	lsls	r3, r3, #1
 800a8a4:	429a      	cmp	r2, r3
 800a8a6:	d91f      	bls.n	800a8e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a8a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	4413      	add	r3, r2
 800a8ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a8b0:	69bb      	ldr	r3, [r7, #24]
 800a8b2:	f003 0307 	and.w	r3, r3, #7
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d00a      	beq.n	800a8d0 <pvPortMalloc+0xf8>
	__asm volatile
 800a8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8be:	f383 8811 	msr	BASEPRI, r3
 800a8c2:	f3bf 8f6f 	isb	sy
 800a8c6:	f3bf 8f4f 	dsb	sy
 800a8ca:	613b      	str	r3, [r7, #16]
}
 800a8cc:	bf00      	nop
 800a8ce:	e7fe      	b.n	800a8ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d2:	685a      	ldr	r2, [r3, #4]
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	1ad2      	subs	r2, r2, r3
 800a8d8:	69bb      	ldr	r3, [r7, #24]
 800a8da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8de:	687a      	ldr	r2, [r7, #4]
 800a8e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a8e2:	69b8      	ldr	r0, [r7, #24]
 800a8e4:	f000 f908 	bl	800aaf8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a8e8:	4b1d      	ldr	r3, [pc, #116]	; (800a960 <pvPortMalloc+0x188>)
 800a8ea:	681a      	ldr	r2, [r3, #0]
 800a8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	1ad3      	subs	r3, r2, r3
 800a8f2:	4a1b      	ldr	r2, [pc, #108]	; (800a960 <pvPortMalloc+0x188>)
 800a8f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a8f6:	4b1a      	ldr	r3, [pc, #104]	; (800a960 <pvPortMalloc+0x188>)
 800a8f8:	681a      	ldr	r2, [r3, #0]
 800a8fa:	4b1b      	ldr	r3, [pc, #108]	; (800a968 <pvPortMalloc+0x190>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	429a      	cmp	r2, r3
 800a900:	d203      	bcs.n	800a90a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a902:	4b17      	ldr	r3, [pc, #92]	; (800a960 <pvPortMalloc+0x188>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	4a18      	ldr	r2, [pc, #96]	; (800a968 <pvPortMalloc+0x190>)
 800a908:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a90c:	685a      	ldr	r2, [r3, #4]
 800a90e:	4b13      	ldr	r3, [pc, #76]	; (800a95c <pvPortMalloc+0x184>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	431a      	orrs	r2, r3
 800a914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a916:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a91a:	2200      	movs	r2, #0
 800a91c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a91e:	4b13      	ldr	r3, [pc, #76]	; (800a96c <pvPortMalloc+0x194>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	3301      	adds	r3, #1
 800a924:	4a11      	ldr	r2, [pc, #68]	; (800a96c <pvPortMalloc+0x194>)
 800a926:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a928:	f7fe fcf8 	bl	800931c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a92c:	69fb      	ldr	r3, [r7, #28]
 800a92e:	f003 0307 	and.w	r3, r3, #7
 800a932:	2b00      	cmp	r3, #0
 800a934:	d00a      	beq.n	800a94c <pvPortMalloc+0x174>
	__asm volatile
 800a936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a93a:	f383 8811 	msr	BASEPRI, r3
 800a93e:	f3bf 8f6f 	isb	sy
 800a942:	f3bf 8f4f 	dsb	sy
 800a946:	60fb      	str	r3, [r7, #12]
}
 800a948:	bf00      	nop
 800a94a:	e7fe      	b.n	800a94a <pvPortMalloc+0x172>
	return pvReturn;
 800a94c:	69fb      	ldr	r3, [r7, #28]
}
 800a94e:	4618      	mov	r0, r3
 800a950:	3728      	adds	r7, #40	; 0x28
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}
 800a956:	bf00      	nop
 800a958:	20004d10 	.word	0x20004d10
 800a95c:	20004d24 	.word	0x20004d24
 800a960:	20004d14 	.word	0x20004d14
 800a964:	20004d08 	.word	0x20004d08
 800a968:	20004d18 	.word	0x20004d18
 800a96c:	20004d1c 	.word	0x20004d1c

0800a970 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b086      	sub	sp, #24
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d04d      	beq.n	800aa1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a982:	2308      	movs	r3, #8
 800a984:	425b      	negs	r3, r3
 800a986:	697a      	ldr	r2, [r7, #20]
 800a988:	4413      	add	r3, r2
 800a98a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	685a      	ldr	r2, [r3, #4]
 800a994:	4b24      	ldr	r3, [pc, #144]	; (800aa28 <vPortFree+0xb8>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	4013      	ands	r3, r2
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d10a      	bne.n	800a9b4 <vPortFree+0x44>
	__asm volatile
 800a99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a2:	f383 8811 	msr	BASEPRI, r3
 800a9a6:	f3bf 8f6f 	isb	sy
 800a9aa:	f3bf 8f4f 	dsb	sy
 800a9ae:	60fb      	str	r3, [r7, #12]
}
 800a9b0:	bf00      	nop
 800a9b2:	e7fe      	b.n	800a9b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d00a      	beq.n	800a9d2 <vPortFree+0x62>
	__asm volatile
 800a9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c0:	f383 8811 	msr	BASEPRI, r3
 800a9c4:	f3bf 8f6f 	isb	sy
 800a9c8:	f3bf 8f4f 	dsb	sy
 800a9cc:	60bb      	str	r3, [r7, #8]
}
 800a9ce:	bf00      	nop
 800a9d0:	e7fe      	b.n	800a9d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a9d2:	693b      	ldr	r3, [r7, #16]
 800a9d4:	685a      	ldr	r2, [r3, #4]
 800a9d6:	4b14      	ldr	r3, [pc, #80]	; (800aa28 <vPortFree+0xb8>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	4013      	ands	r3, r2
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d01e      	beq.n	800aa1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d11a      	bne.n	800aa1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	685a      	ldr	r2, [r3, #4]
 800a9ec:	4b0e      	ldr	r3, [pc, #56]	; (800aa28 <vPortFree+0xb8>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	43db      	mvns	r3, r3
 800a9f2:	401a      	ands	r2, r3
 800a9f4:	693b      	ldr	r3, [r7, #16]
 800a9f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a9f8:	f7fe fc82 	bl	8009300 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	685a      	ldr	r2, [r3, #4]
 800aa00:	4b0a      	ldr	r3, [pc, #40]	; (800aa2c <vPortFree+0xbc>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	4413      	add	r3, r2
 800aa06:	4a09      	ldr	r2, [pc, #36]	; (800aa2c <vPortFree+0xbc>)
 800aa08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800aa0a:	6938      	ldr	r0, [r7, #16]
 800aa0c:	f000 f874 	bl	800aaf8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800aa10:	4b07      	ldr	r3, [pc, #28]	; (800aa30 <vPortFree+0xc0>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	3301      	adds	r3, #1
 800aa16:	4a06      	ldr	r2, [pc, #24]	; (800aa30 <vPortFree+0xc0>)
 800aa18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800aa1a:	f7fe fc7f 	bl	800931c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800aa1e:	bf00      	nop
 800aa20:	3718      	adds	r7, #24
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}
 800aa26:	bf00      	nop
 800aa28:	20004d24 	.word	0x20004d24
 800aa2c:	20004d14 	.word	0x20004d14
 800aa30:	20004d20 	.word	0x20004d20

0800aa34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800aa34:	b480      	push	{r7}
 800aa36:	b085      	sub	sp, #20
 800aa38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800aa3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800aa3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800aa40:	4b27      	ldr	r3, [pc, #156]	; (800aae0 <prvHeapInit+0xac>)
 800aa42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	f003 0307 	and.w	r3, r3, #7
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d00c      	beq.n	800aa68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	3307      	adds	r3, #7
 800aa52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	f023 0307 	bic.w	r3, r3, #7
 800aa5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800aa5c:	68ba      	ldr	r2, [r7, #8]
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	1ad3      	subs	r3, r2, r3
 800aa62:	4a1f      	ldr	r2, [pc, #124]	; (800aae0 <prvHeapInit+0xac>)
 800aa64:	4413      	add	r3, r2
 800aa66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800aa6c:	4a1d      	ldr	r2, [pc, #116]	; (800aae4 <prvHeapInit+0xb0>)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aa72:	4b1c      	ldr	r3, [pc, #112]	; (800aae4 <prvHeapInit+0xb0>)
 800aa74:	2200      	movs	r2, #0
 800aa76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	68ba      	ldr	r2, [r7, #8]
 800aa7c:	4413      	add	r3, r2
 800aa7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800aa80:	2208      	movs	r2, #8
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	1a9b      	subs	r3, r3, r2
 800aa86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	f023 0307 	bic.w	r3, r3, #7
 800aa8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	4a15      	ldr	r2, [pc, #84]	; (800aae8 <prvHeapInit+0xb4>)
 800aa94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800aa96:	4b14      	ldr	r3, [pc, #80]	; (800aae8 <prvHeapInit+0xb4>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800aa9e:	4b12      	ldr	r3, [pc, #72]	; (800aae8 <prvHeapInit+0xb4>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	68fa      	ldr	r2, [r7, #12]
 800aaae:	1ad2      	subs	r2, r2, r3
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aab4:	4b0c      	ldr	r3, [pc, #48]	; (800aae8 <prvHeapInit+0xb4>)
 800aab6:	681a      	ldr	r2, [r3, #0]
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	685b      	ldr	r3, [r3, #4]
 800aac0:	4a0a      	ldr	r2, [pc, #40]	; (800aaec <prvHeapInit+0xb8>)
 800aac2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	685b      	ldr	r3, [r3, #4]
 800aac8:	4a09      	ldr	r2, [pc, #36]	; (800aaf0 <prvHeapInit+0xbc>)
 800aaca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aacc:	4b09      	ldr	r3, [pc, #36]	; (800aaf4 <prvHeapInit+0xc0>)
 800aace:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800aad2:	601a      	str	r2, [r3, #0]
}
 800aad4:	bf00      	nop
 800aad6:	3714      	adds	r7, #20
 800aad8:	46bd      	mov	sp, r7
 800aada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aade:	4770      	bx	lr
 800aae0:	20001108 	.word	0x20001108
 800aae4:	20004d08 	.word	0x20004d08
 800aae8:	20004d10 	.word	0x20004d10
 800aaec:	20004d18 	.word	0x20004d18
 800aaf0:	20004d14 	.word	0x20004d14
 800aaf4:	20004d24 	.word	0x20004d24

0800aaf8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b085      	sub	sp, #20
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ab00:	4b28      	ldr	r3, [pc, #160]	; (800aba4 <prvInsertBlockIntoFreeList+0xac>)
 800ab02:	60fb      	str	r3, [r7, #12]
 800ab04:	e002      	b.n	800ab0c <prvInsertBlockIntoFreeList+0x14>
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	60fb      	str	r3, [r7, #12]
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	687a      	ldr	r2, [r7, #4]
 800ab12:	429a      	cmp	r2, r3
 800ab14:	d8f7      	bhi.n	800ab06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	685b      	ldr	r3, [r3, #4]
 800ab1e:	68ba      	ldr	r2, [r7, #8]
 800ab20:	4413      	add	r3, r2
 800ab22:	687a      	ldr	r2, [r7, #4]
 800ab24:	429a      	cmp	r2, r3
 800ab26:	d108      	bne.n	800ab3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	685a      	ldr	r2, [r3, #4]
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	685b      	ldr	r3, [r3, #4]
 800ab30:	441a      	add	r2, r3
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	685b      	ldr	r3, [r3, #4]
 800ab42:	68ba      	ldr	r2, [r7, #8]
 800ab44:	441a      	add	r2, r3
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d118      	bne.n	800ab80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681a      	ldr	r2, [r3, #0]
 800ab52:	4b15      	ldr	r3, [pc, #84]	; (800aba8 <prvInsertBlockIntoFreeList+0xb0>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	429a      	cmp	r2, r3
 800ab58:	d00d      	beq.n	800ab76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	685a      	ldr	r2, [r3, #4]
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	685b      	ldr	r3, [r3, #4]
 800ab64:	441a      	add	r2, r3
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	681a      	ldr	r2, [r3, #0]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	601a      	str	r2, [r3, #0]
 800ab74:	e008      	b.n	800ab88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ab76:	4b0c      	ldr	r3, [pc, #48]	; (800aba8 <prvInsertBlockIntoFreeList+0xb0>)
 800ab78:	681a      	ldr	r2, [r3, #0]
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	601a      	str	r2, [r3, #0]
 800ab7e:	e003      	b.n	800ab88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	681a      	ldr	r2, [r3, #0]
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ab88:	68fa      	ldr	r2, [r7, #12]
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	d002      	beq.n	800ab96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	687a      	ldr	r2, [r7, #4]
 800ab94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab96:	bf00      	nop
 800ab98:	3714      	adds	r7, #20
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba0:	4770      	bx	lr
 800aba2:	bf00      	nop
 800aba4:	20004d08 	.word	0x20004d08
 800aba8:	20004d10 	.word	0x20004d10

0800abac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

	/* Configure and enable the USB interrupt */
	HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);  // Priority level should be >= 5 for FreeRTOS compatibility
 800abb0:	2200      	movs	r2, #0
 800abb2:	2105      	movs	r1, #5
 800abb4:	2043      	movs	r0, #67	; 0x43
 800abb6:	f7f6 faf5 	bl	80011a4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800abba:	2043      	movs	r0, #67	; 0x43
 800abbc:	f7f6 fb0e 	bl	80011dc <HAL_NVIC_EnableIRQ>
	/* USER CODE END USB_DEVICE_Init_PostTreatment */
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800abc0:	2200      	movs	r2, #0
 800abc2:	4912      	ldr	r1, [pc, #72]	; (800ac0c <MX_USB_DEVICE_Init+0x60>)
 800abc4:	4812      	ldr	r0, [pc, #72]	; (800ac10 <MX_USB_DEVICE_Init+0x64>)
 800abc6:	f7fb ff03 	bl	80069d0 <USBD_Init>
 800abca:	4603      	mov	r3, r0
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d001      	beq.n	800abd4 <MX_USB_DEVICE_Init+0x28>
  {
    Error_Handler();
 800abd0:	f7f5 ff59 	bl	8000a86 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800abd4:	490f      	ldr	r1, [pc, #60]	; (800ac14 <MX_USB_DEVICE_Init+0x68>)
 800abd6:	480e      	ldr	r0, [pc, #56]	; (800ac10 <MX_USB_DEVICE_Init+0x64>)
 800abd8:	f7fb ff2a 	bl	8006a30 <USBD_RegisterClass>
 800abdc:	4603      	mov	r3, r0
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d001      	beq.n	800abe6 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800abe2:	f7f5 ff50 	bl	8000a86 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800abe6:	490c      	ldr	r1, [pc, #48]	; (800ac18 <MX_USB_DEVICE_Init+0x6c>)
 800abe8:	4809      	ldr	r0, [pc, #36]	; (800ac10 <MX_USB_DEVICE_Init+0x64>)
 800abea:	f7fb fe61 	bl	80068b0 <USBD_CDC_RegisterInterface>
 800abee:	4603      	mov	r3, r0
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d001      	beq.n	800abf8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800abf4:	f7f5 ff47 	bl	8000a86 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800abf8:	4805      	ldr	r0, [pc, #20]	; (800ac10 <MX_USB_DEVICE_Init+0x64>)
 800abfa:	f7fb ff4f 	bl	8006a9c <USBD_Start>
 800abfe:	4603      	mov	r3, r0
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d001      	beq.n	800ac08 <MX_USB_DEVICE_Init+0x5c>
  {
    Error_Handler();
 800ac04:	f7f5 ff3f 	bl	8000a86 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ac08:	bf00      	nop
 800ac0a:	bd80      	pop	{r7, pc}
 800ac0c:	200000b0 	.word	0x200000b0
 800ac10:	20004d28 	.word	0x20004d28
 800ac14:	20000018 	.word	0x20000018
 800ac18:	2000009c 	.word	0x2000009c

0800ac1c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ac20:	2200      	movs	r2, #0
 800ac22:	4905      	ldr	r1, [pc, #20]	; (800ac38 <CDC_Init_FS+0x1c>)
 800ac24:	4805      	ldr	r0, [pc, #20]	; (800ac3c <CDC_Init_FS+0x20>)
 800ac26:	f7fb fe5d 	bl	80068e4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ac2a:	4905      	ldr	r1, [pc, #20]	; (800ac40 <CDC_Init_FS+0x24>)
 800ac2c:	4803      	ldr	r0, [pc, #12]	; (800ac3c <CDC_Init_FS+0x20>)
 800ac2e:	f7fb fe7b 	bl	8006928 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ac32:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	bd80      	pop	{r7, pc}
 800ac38:	20005888 	.word	0x20005888
 800ac3c:	20004d28 	.word	0x20004d28
 800ac40:	20005088 	.word	0x20005088

0800ac44 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ac44:	b480      	push	{r7}
 800ac46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ac48:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac52:	4770      	bx	lr

0800ac54 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b083      	sub	sp, #12
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	6039      	str	r1, [r7, #0]
 800ac5e:	71fb      	strb	r3, [r7, #7]
 800ac60:	4613      	mov	r3, r2
 800ac62:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ac64:	79fb      	ldrb	r3, [r7, #7]
 800ac66:	2b23      	cmp	r3, #35	; 0x23
 800ac68:	d84a      	bhi.n	800ad00 <CDC_Control_FS+0xac>
 800ac6a:	a201      	add	r2, pc, #4	; (adr r2, 800ac70 <CDC_Control_FS+0x1c>)
 800ac6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac70:	0800ad01 	.word	0x0800ad01
 800ac74:	0800ad01 	.word	0x0800ad01
 800ac78:	0800ad01 	.word	0x0800ad01
 800ac7c:	0800ad01 	.word	0x0800ad01
 800ac80:	0800ad01 	.word	0x0800ad01
 800ac84:	0800ad01 	.word	0x0800ad01
 800ac88:	0800ad01 	.word	0x0800ad01
 800ac8c:	0800ad01 	.word	0x0800ad01
 800ac90:	0800ad01 	.word	0x0800ad01
 800ac94:	0800ad01 	.word	0x0800ad01
 800ac98:	0800ad01 	.word	0x0800ad01
 800ac9c:	0800ad01 	.word	0x0800ad01
 800aca0:	0800ad01 	.word	0x0800ad01
 800aca4:	0800ad01 	.word	0x0800ad01
 800aca8:	0800ad01 	.word	0x0800ad01
 800acac:	0800ad01 	.word	0x0800ad01
 800acb0:	0800ad01 	.word	0x0800ad01
 800acb4:	0800ad01 	.word	0x0800ad01
 800acb8:	0800ad01 	.word	0x0800ad01
 800acbc:	0800ad01 	.word	0x0800ad01
 800acc0:	0800ad01 	.word	0x0800ad01
 800acc4:	0800ad01 	.word	0x0800ad01
 800acc8:	0800ad01 	.word	0x0800ad01
 800accc:	0800ad01 	.word	0x0800ad01
 800acd0:	0800ad01 	.word	0x0800ad01
 800acd4:	0800ad01 	.word	0x0800ad01
 800acd8:	0800ad01 	.word	0x0800ad01
 800acdc:	0800ad01 	.word	0x0800ad01
 800ace0:	0800ad01 	.word	0x0800ad01
 800ace4:	0800ad01 	.word	0x0800ad01
 800ace8:	0800ad01 	.word	0x0800ad01
 800acec:	0800ad01 	.word	0x0800ad01
 800acf0:	0800ad01 	.word	0x0800ad01
 800acf4:	0800ad01 	.word	0x0800ad01
 800acf8:	0800ad01 	.word	0x0800ad01
 800acfc:	0800ad01 	.word	0x0800ad01
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ad00:	bf00      	nop
  }

  return (USBD_OK);
 800ad02:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	370c      	adds	r7, #12
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr

0800ad10 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b084      	sub	sp, #16
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
 800ad18:	6039      	str	r1, [r7, #0]
	  /* USER CODE BEGIN 6 */
		  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ad1a:	6879      	ldr	r1, [r7, #4]
 800ad1c:	4821      	ldr	r0, [pc, #132]	; (800ada4 <CDC_Receive_FS+0x94>)
 800ad1e:	f7fb fe03 	bl	8006928 <USBD_CDC_SetRxBuffer>
		  //START CODE FOR LED ON/OFF LOGIC
		  for (uint32_t i = 0; i < *Len; ++i) {
 800ad22:	2300      	movs	r3, #0
 800ad24:	60fb      	str	r3, [r7, #12]
 800ad26:	e02f      	b.n	800ad88 <CDC_Receive_FS+0x78>
		      // Konec ukaza (npr. nova vrstica ali povratni znak)
		      if (Buf[i] == '\n' || Buf[i] == '\r') {
 800ad28:	687a      	ldr	r2, [r7, #4]
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	4413      	add	r3, r2
 800ad2e:	781b      	ldrb	r3, [r3, #0]
 800ad30:	2b0a      	cmp	r3, #10
 800ad32:	d005      	beq.n	800ad40 <CDC_Receive_FS+0x30>
 800ad34:	687a      	ldr	r2, [r7, #4]
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	4413      	add	r3, r2
 800ad3a:	781b      	ldrb	r3, [r3, #0]
 800ad3c:	2b0d      	cmp	r3, #13
 800ad3e:	d10e      	bne.n	800ad5e <CDC_Receive_FS+0x4e>
		        buffer[bufferIndex++] = '\0'; // Zaključimo niz ukaza z ničelnim znakom
 800ad40:	4b19      	ldr	r3, [pc, #100]	; (800ada8 <CDC_Receive_FS+0x98>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	1c5a      	adds	r2, r3, #1
 800ad46:	4918      	ldr	r1, [pc, #96]	; (800ada8 <CDC_Receive_FS+0x98>)
 800ad48:	600a      	str	r2, [r1, #0]
 800ad4a:	4a18      	ldr	r2, [pc, #96]	; (800adac <CDC_Receive_FS+0x9c>)
 800ad4c:	2100      	movs	r1, #0
 800ad4e:	54d1      	strb	r1, [r2, r3]
		        Opravilo_LED(buffer);       // Obdelamo prejeti ukaz
 800ad50:	4816      	ldr	r0, [pc, #88]	; (800adac <CDC_Receive_FS+0x9c>)
 800ad52:	f7f5 fbd1 	bl	80004f8 <Opravilo_LED>
		        bufferIndex = 0;              // Ponastavimo indeks za naslednji ukaz
 800ad56:	4b14      	ldr	r3, [pc, #80]	; (800ada8 <CDC_Receive_FS+0x98>)
 800ad58:	2200      	movs	r2, #0
 800ad5a:	601a      	str	r2, [r3, #0]
		        continue;
 800ad5c:	e011      	b.n	800ad82 <CDC_Receive_FS+0x72>
		      }

		      // Preprečimo prelivanje medpomnilnika
		      if (bufferIndex >= BUFFER_SIZE - 1) {
 800ad5e:	4b12      	ldr	r3, [pc, #72]	; (800ada8 <CDC_Receive_FS+0x98>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	2b7e      	cmp	r3, #126	; 0x7e
 800ad64:	d902      	bls.n	800ad6c <CDC_Receive_FS+0x5c>
		        bufferIndex = 0;  // Ponastavimo, če se preseže velikost medpomnilnika
 800ad66:	4b10      	ldr	r3, [pc, #64]	; (800ada8 <CDC_Receive_FS+0x98>)
 800ad68:	2200      	movs	r2, #0
 800ad6a:	601a      	str	r2, [r3, #0]
		      }

		      buffer[bufferIndex++] = Buf[i]; // Dodamo znak v medpomnilnik
 800ad6c:	687a      	ldr	r2, [r7, #4]
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	441a      	add	r2, r3
 800ad72:	4b0d      	ldr	r3, [pc, #52]	; (800ada8 <CDC_Receive_FS+0x98>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	1c59      	adds	r1, r3, #1
 800ad78:	480b      	ldr	r0, [pc, #44]	; (800ada8 <CDC_Receive_FS+0x98>)
 800ad7a:	6001      	str	r1, [r0, #0]
 800ad7c:	7811      	ldrb	r1, [r2, #0]
 800ad7e:	4a0b      	ldr	r2, [pc, #44]	; (800adac <CDC_Receive_FS+0x9c>)
 800ad80:	54d1      	strb	r1, [r2, r3]
		  for (uint32_t i = 0; i < *Len; ++i) {
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	3301      	adds	r3, #1
 800ad86:	60fb      	str	r3, [r7, #12]
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	68fa      	ldr	r2, [r7, #12]
 800ad8e:	429a      	cmp	r2, r3
 800ad90:	d3ca      	bcc.n	800ad28 <CDC_Receive_FS+0x18>
		    }
		  //END CODE FOR LED
		  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ad92:	4804      	ldr	r0, [pc, #16]	; (800ada4 <CDC_Receive_FS+0x94>)
 800ad94:	f7fb fde6 	bl	8006964 <USBD_CDC_ReceivePacket>
		  return (USBD_OK);
 800ad98:	2300      	movs	r3, #0
	  /* USER CODE END 6 */
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3710      	adds	r7, #16
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}
 800ada2:	bf00      	nop
 800ada4:	20004d28 	.word	0x20004d28
 800ada8:	20005084 	.word	0x20005084
 800adac:	20005004 	.word	0x20005004

0800adb0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800adb0:	b480      	push	{r7}
 800adb2:	b087      	sub	sp, #28
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	60f8      	str	r0, [r7, #12]
 800adb8:	60b9      	str	r1, [r7, #8]
 800adba:	4613      	mov	r3, r2
 800adbc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800adbe:	2300      	movs	r3, #0
 800adc0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800adc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	371c      	adds	r7, #28
 800adca:	46bd      	mov	sp, r7
 800adcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add0:	4770      	bx	lr
	...

0800add4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800add4:	b480      	push	{r7}
 800add6:	b083      	sub	sp, #12
 800add8:	af00      	add	r7, sp, #0
 800adda:	4603      	mov	r3, r0
 800addc:	6039      	str	r1, [r7, #0]
 800adde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	2212      	movs	r2, #18
 800ade4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ade6:	4b03      	ldr	r3, [pc, #12]	; (800adf4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ade8:	4618      	mov	r0, r3
 800adea:	370c      	adds	r7, #12
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr
 800adf4:	200000cc 	.word	0x200000cc

0800adf8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800adf8:	b480      	push	{r7}
 800adfa:	b083      	sub	sp, #12
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	4603      	mov	r3, r0
 800ae00:	6039      	str	r1, [r7, #0]
 800ae02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	2204      	movs	r2, #4
 800ae08:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ae0a:	4b03      	ldr	r3, [pc, #12]	; (800ae18 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	370c      	adds	r7, #12
 800ae10:	46bd      	mov	sp, r7
 800ae12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae16:	4770      	bx	lr
 800ae18:	200000e0 	.word	0x200000e0

0800ae1c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b082      	sub	sp, #8
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	4603      	mov	r3, r0
 800ae24:	6039      	str	r1, [r7, #0]
 800ae26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ae28:	79fb      	ldrb	r3, [r7, #7]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d105      	bne.n	800ae3a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ae2e:	683a      	ldr	r2, [r7, #0]
 800ae30:	4907      	ldr	r1, [pc, #28]	; (800ae50 <USBD_FS_ProductStrDescriptor+0x34>)
 800ae32:	4808      	ldr	r0, [pc, #32]	; (800ae54 <USBD_FS_ProductStrDescriptor+0x38>)
 800ae34:	f7fc ffde 	bl	8007df4 <USBD_GetString>
 800ae38:	e004      	b.n	800ae44 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ae3a:	683a      	ldr	r2, [r7, #0]
 800ae3c:	4904      	ldr	r1, [pc, #16]	; (800ae50 <USBD_FS_ProductStrDescriptor+0x34>)
 800ae3e:	4805      	ldr	r0, [pc, #20]	; (800ae54 <USBD_FS_ProductStrDescriptor+0x38>)
 800ae40:	f7fc ffd8 	bl	8007df4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ae44:	4b02      	ldr	r3, [pc, #8]	; (800ae50 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3708      	adds	r7, #8
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}
 800ae4e:	bf00      	nop
 800ae50:	20006088 	.word	0x20006088
 800ae54:	0800b874 	.word	0x0800b874

0800ae58 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b082      	sub	sp, #8
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	4603      	mov	r3, r0
 800ae60:	6039      	str	r1, [r7, #0]
 800ae62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ae64:	683a      	ldr	r2, [r7, #0]
 800ae66:	4904      	ldr	r1, [pc, #16]	; (800ae78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ae68:	4804      	ldr	r0, [pc, #16]	; (800ae7c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ae6a:	f7fc ffc3 	bl	8007df4 <USBD_GetString>
  return USBD_StrDesc;
 800ae6e:	4b02      	ldr	r3, [pc, #8]	; (800ae78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ae70:	4618      	mov	r0, r3
 800ae72:	3708      	adds	r7, #8
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}
 800ae78:	20006088 	.word	0x20006088
 800ae7c:	0800b88c 	.word	0x0800b88c

0800ae80 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b082      	sub	sp, #8
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	4603      	mov	r3, r0
 800ae88:	6039      	str	r1, [r7, #0]
 800ae8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	221a      	movs	r2, #26
 800ae90:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ae92:	f000 f843 	bl	800af1c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ae96:	4b02      	ldr	r3, [pc, #8]	; (800aea0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3708      	adds	r7, #8
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}
 800aea0:	200000e4 	.word	0x200000e4

0800aea4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b082      	sub	sp, #8
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	4603      	mov	r3, r0
 800aeac:	6039      	str	r1, [r7, #0]
 800aeae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800aeb0:	79fb      	ldrb	r3, [r7, #7]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d105      	bne.n	800aec2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aeb6:	683a      	ldr	r2, [r7, #0]
 800aeb8:	4907      	ldr	r1, [pc, #28]	; (800aed8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aeba:	4808      	ldr	r0, [pc, #32]	; (800aedc <USBD_FS_ConfigStrDescriptor+0x38>)
 800aebc:	f7fc ff9a 	bl	8007df4 <USBD_GetString>
 800aec0:	e004      	b.n	800aecc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aec2:	683a      	ldr	r2, [r7, #0]
 800aec4:	4904      	ldr	r1, [pc, #16]	; (800aed8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aec6:	4805      	ldr	r0, [pc, #20]	; (800aedc <USBD_FS_ConfigStrDescriptor+0x38>)
 800aec8:	f7fc ff94 	bl	8007df4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aecc:	4b02      	ldr	r3, [pc, #8]	; (800aed8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3708      	adds	r7, #8
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}
 800aed6:	bf00      	nop
 800aed8:	20006088 	.word	0x20006088
 800aedc:	0800b8a0 	.word	0x0800b8a0

0800aee0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b082      	sub	sp, #8
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	4603      	mov	r3, r0
 800aee8:	6039      	str	r1, [r7, #0]
 800aeea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aeec:	79fb      	ldrb	r3, [r7, #7]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d105      	bne.n	800aefe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aef2:	683a      	ldr	r2, [r7, #0]
 800aef4:	4907      	ldr	r1, [pc, #28]	; (800af14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aef6:	4808      	ldr	r0, [pc, #32]	; (800af18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aef8:	f7fc ff7c 	bl	8007df4 <USBD_GetString>
 800aefc:	e004      	b.n	800af08 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aefe:	683a      	ldr	r2, [r7, #0]
 800af00:	4904      	ldr	r1, [pc, #16]	; (800af14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800af02:	4805      	ldr	r0, [pc, #20]	; (800af18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800af04:	f7fc ff76 	bl	8007df4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800af08:	4b02      	ldr	r3, [pc, #8]	; (800af14 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3708      	adds	r7, #8
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}
 800af12:	bf00      	nop
 800af14:	20006088 	.word	0x20006088
 800af18:	0800b8ac 	.word	0x0800b8ac

0800af1c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b084      	sub	sp, #16
 800af20:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800af22:	4b0f      	ldr	r3, [pc, #60]	; (800af60 <Get_SerialNum+0x44>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800af28:	4b0e      	ldr	r3, [pc, #56]	; (800af64 <Get_SerialNum+0x48>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800af2e:	4b0e      	ldr	r3, [pc, #56]	; (800af68 <Get_SerialNum+0x4c>)
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800af34:	68fa      	ldr	r2, [r7, #12]
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	4413      	add	r3, r2
 800af3a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d009      	beq.n	800af56 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800af42:	2208      	movs	r2, #8
 800af44:	4909      	ldr	r1, [pc, #36]	; (800af6c <Get_SerialNum+0x50>)
 800af46:	68f8      	ldr	r0, [r7, #12]
 800af48:	f000 f814 	bl	800af74 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800af4c:	2204      	movs	r2, #4
 800af4e:	4908      	ldr	r1, [pc, #32]	; (800af70 <Get_SerialNum+0x54>)
 800af50:	68b8      	ldr	r0, [r7, #8]
 800af52:	f000 f80f 	bl	800af74 <IntToUnicode>
  }
}
 800af56:	bf00      	nop
 800af58:	3710      	adds	r7, #16
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}
 800af5e:	bf00      	nop
 800af60:	1fff7a10 	.word	0x1fff7a10
 800af64:	1fff7a14 	.word	0x1fff7a14
 800af68:	1fff7a18 	.word	0x1fff7a18
 800af6c:	200000e6 	.word	0x200000e6
 800af70:	200000f6 	.word	0x200000f6

0800af74 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800af74:	b480      	push	{r7}
 800af76:	b087      	sub	sp, #28
 800af78:	af00      	add	r7, sp, #0
 800af7a:	60f8      	str	r0, [r7, #12]
 800af7c:	60b9      	str	r1, [r7, #8]
 800af7e:	4613      	mov	r3, r2
 800af80:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800af82:	2300      	movs	r3, #0
 800af84:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800af86:	2300      	movs	r3, #0
 800af88:	75fb      	strb	r3, [r7, #23]
 800af8a:	e027      	b.n	800afdc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	0f1b      	lsrs	r3, r3, #28
 800af90:	2b09      	cmp	r3, #9
 800af92:	d80b      	bhi.n	800afac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	0f1b      	lsrs	r3, r3, #28
 800af98:	b2da      	uxtb	r2, r3
 800af9a:	7dfb      	ldrb	r3, [r7, #23]
 800af9c:	005b      	lsls	r3, r3, #1
 800af9e:	4619      	mov	r1, r3
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	440b      	add	r3, r1
 800afa4:	3230      	adds	r2, #48	; 0x30
 800afa6:	b2d2      	uxtb	r2, r2
 800afa8:	701a      	strb	r2, [r3, #0]
 800afaa:	e00a      	b.n	800afc2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	0f1b      	lsrs	r3, r3, #28
 800afb0:	b2da      	uxtb	r2, r3
 800afb2:	7dfb      	ldrb	r3, [r7, #23]
 800afb4:	005b      	lsls	r3, r3, #1
 800afb6:	4619      	mov	r1, r3
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	440b      	add	r3, r1
 800afbc:	3237      	adds	r2, #55	; 0x37
 800afbe:	b2d2      	uxtb	r2, r2
 800afc0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	011b      	lsls	r3, r3, #4
 800afc6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800afc8:	7dfb      	ldrb	r3, [r7, #23]
 800afca:	005b      	lsls	r3, r3, #1
 800afcc:	3301      	adds	r3, #1
 800afce:	68ba      	ldr	r2, [r7, #8]
 800afd0:	4413      	add	r3, r2
 800afd2:	2200      	movs	r2, #0
 800afd4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800afd6:	7dfb      	ldrb	r3, [r7, #23]
 800afd8:	3301      	adds	r3, #1
 800afda:	75fb      	strb	r3, [r7, #23]
 800afdc:	7dfa      	ldrb	r2, [r7, #23]
 800afde:	79fb      	ldrb	r3, [r7, #7]
 800afe0:	429a      	cmp	r2, r3
 800afe2:	d3d3      	bcc.n	800af8c <IntToUnicode+0x18>
  }
}
 800afe4:	bf00      	nop
 800afe6:	bf00      	nop
 800afe8:	371c      	adds	r7, #28
 800afea:	46bd      	mov	sp, r7
 800afec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff0:	4770      	bx	lr
	...

0800aff4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b08a      	sub	sp, #40	; 0x28
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800affc:	f107 0314 	add.w	r3, r7, #20
 800b000:	2200      	movs	r2, #0
 800b002:	601a      	str	r2, [r3, #0]
 800b004:	605a      	str	r2, [r3, #4]
 800b006:	609a      	str	r2, [r3, #8]
 800b008:	60da      	str	r2, [r3, #12]
 800b00a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b014:	d147      	bne.n	800b0a6 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b016:	2300      	movs	r3, #0
 800b018:	613b      	str	r3, [r7, #16]
 800b01a:	4b25      	ldr	r3, [pc, #148]	; (800b0b0 <HAL_PCD_MspInit+0xbc>)
 800b01c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b01e:	4a24      	ldr	r2, [pc, #144]	; (800b0b0 <HAL_PCD_MspInit+0xbc>)
 800b020:	f043 0301 	orr.w	r3, r3, #1
 800b024:	6313      	str	r3, [r2, #48]	; 0x30
 800b026:	4b22      	ldr	r3, [pc, #136]	; (800b0b0 <HAL_PCD_MspInit+0xbc>)
 800b028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b02a:	f003 0301 	and.w	r3, r3, #1
 800b02e:	613b      	str	r3, [r7, #16]
 800b030:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b032:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b038:	2300      	movs	r3, #0
 800b03a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b03c:	2300      	movs	r3, #0
 800b03e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b040:	f107 0314 	add.w	r3, r7, #20
 800b044:	4619      	mov	r1, r3
 800b046:	481b      	ldr	r0, [pc, #108]	; (800b0b4 <HAL_PCD_MspInit+0xc0>)
 800b048:	f7f6 f8d6 	bl	80011f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b04c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800b050:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b052:	2302      	movs	r3, #2
 800b054:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b056:	2300      	movs	r3, #0
 800b058:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b05a:	2303      	movs	r3, #3
 800b05c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b05e:	230a      	movs	r3, #10
 800b060:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b062:	f107 0314 	add.w	r3, r7, #20
 800b066:	4619      	mov	r1, r3
 800b068:	4812      	ldr	r0, [pc, #72]	; (800b0b4 <HAL_PCD_MspInit+0xc0>)
 800b06a:	f7f6 f8c5 	bl	80011f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b06e:	4b10      	ldr	r3, [pc, #64]	; (800b0b0 <HAL_PCD_MspInit+0xbc>)
 800b070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b072:	4a0f      	ldr	r2, [pc, #60]	; (800b0b0 <HAL_PCD_MspInit+0xbc>)
 800b074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b078:	6353      	str	r3, [r2, #52]	; 0x34
 800b07a:	2300      	movs	r3, #0
 800b07c:	60fb      	str	r3, [r7, #12]
 800b07e:	4b0c      	ldr	r3, [pc, #48]	; (800b0b0 <HAL_PCD_MspInit+0xbc>)
 800b080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b082:	4a0b      	ldr	r2, [pc, #44]	; (800b0b0 <HAL_PCD_MspInit+0xbc>)
 800b084:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b088:	6453      	str	r3, [r2, #68]	; 0x44
 800b08a:	4b09      	ldr	r3, [pc, #36]	; (800b0b0 <HAL_PCD_MspInit+0xbc>)
 800b08c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b08e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b092:	60fb      	str	r3, [r7, #12]
 800b094:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800b096:	2200      	movs	r2, #0
 800b098:	2105      	movs	r1, #5
 800b09a:	2043      	movs	r0, #67	; 0x43
 800b09c:	f7f6 f882 	bl	80011a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b0a0:	2043      	movs	r0, #67	; 0x43
 800b0a2:	f7f6 f89b 	bl	80011dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b0a6:	bf00      	nop
 800b0a8:	3728      	adds	r7, #40	; 0x28
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}
 800b0ae:	bf00      	nop
 800b0b0:	40023800 	.word	0x40023800
 800b0b4:	40020000 	.word	0x40020000

0800b0b8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b082      	sub	sp, #8
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b0cc:	4619      	mov	r1, r3
 800b0ce:	4610      	mov	r0, r2
 800b0d0:	f7fb fd31 	bl	8006b36 <USBD_LL_SetupStage>
}
 800b0d4:	bf00      	nop
 800b0d6:	3708      	adds	r7, #8
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd80      	pop	{r7, pc}

0800b0dc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b082      	sub	sp, #8
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
 800b0e4:	460b      	mov	r3, r1
 800b0e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b0ee:	78fa      	ldrb	r2, [r7, #3]
 800b0f0:	6879      	ldr	r1, [r7, #4]
 800b0f2:	4613      	mov	r3, r2
 800b0f4:	00db      	lsls	r3, r3, #3
 800b0f6:	4413      	add	r3, r2
 800b0f8:	009b      	lsls	r3, r3, #2
 800b0fa:	440b      	add	r3, r1
 800b0fc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b100:	681a      	ldr	r2, [r3, #0]
 800b102:	78fb      	ldrb	r3, [r7, #3]
 800b104:	4619      	mov	r1, r3
 800b106:	f7fb fd6b 	bl	8006be0 <USBD_LL_DataOutStage>
}
 800b10a:	bf00      	nop
 800b10c:	3708      	adds	r7, #8
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}

0800b112 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b112:	b580      	push	{r7, lr}
 800b114:	b082      	sub	sp, #8
 800b116:	af00      	add	r7, sp, #0
 800b118:	6078      	str	r0, [r7, #4]
 800b11a:	460b      	mov	r3, r1
 800b11c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b124:	78fa      	ldrb	r2, [r7, #3]
 800b126:	6879      	ldr	r1, [r7, #4]
 800b128:	4613      	mov	r3, r2
 800b12a:	00db      	lsls	r3, r3, #3
 800b12c:	4413      	add	r3, r2
 800b12e:	009b      	lsls	r3, r3, #2
 800b130:	440b      	add	r3, r1
 800b132:	334c      	adds	r3, #76	; 0x4c
 800b134:	681a      	ldr	r2, [r3, #0]
 800b136:	78fb      	ldrb	r3, [r7, #3]
 800b138:	4619      	mov	r1, r3
 800b13a:	f7fb fe04 	bl	8006d46 <USBD_LL_DataInStage>
}
 800b13e:	bf00      	nop
 800b140:	3708      	adds	r7, #8
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}

0800b146 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b146:	b580      	push	{r7, lr}
 800b148:	b082      	sub	sp, #8
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b154:	4618      	mov	r0, r3
 800b156:	f7fb ff38 	bl	8006fca <USBD_LL_SOF>
}
 800b15a:	bf00      	nop
 800b15c:	3708      	adds	r7, #8
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}

0800b162 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b162:	b580      	push	{r7, lr}
 800b164:	b084      	sub	sp, #16
 800b166:	af00      	add	r7, sp, #0
 800b168:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b16a:	2301      	movs	r3, #1
 800b16c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	68db      	ldr	r3, [r3, #12]
 800b172:	2b02      	cmp	r3, #2
 800b174:	d001      	beq.n	800b17a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b176:	f7f5 fc86 	bl	8000a86 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b180:	7bfa      	ldrb	r2, [r7, #15]
 800b182:	4611      	mov	r1, r2
 800b184:	4618      	mov	r0, r3
 800b186:	f7fb fee2 	bl	8006f4e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b190:	4618      	mov	r0, r3
 800b192:	f7fb fe8a 	bl	8006eaa <USBD_LL_Reset>
}
 800b196:	bf00      	nop
 800b198:	3710      	adds	r7, #16
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}
	...

0800b1a0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b082      	sub	sp, #8
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f7fb fedd 	bl	8006f6e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	687a      	ldr	r2, [r7, #4]
 800b1c0:	6812      	ldr	r2, [r2, #0]
 800b1c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b1c6:	f043 0301 	orr.w	r3, r3, #1
 800b1ca:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6a1b      	ldr	r3, [r3, #32]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d005      	beq.n	800b1e0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b1d4:	4b04      	ldr	r3, [pc, #16]	; (800b1e8 <HAL_PCD_SuspendCallback+0x48>)
 800b1d6:	691b      	ldr	r3, [r3, #16]
 800b1d8:	4a03      	ldr	r2, [pc, #12]	; (800b1e8 <HAL_PCD_SuspendCallback+0x48>)
 800b1da:	f043 0306 	orr.w	r3, r3, #6
 800b1de:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b1e0:	bf00      	nop
 800b1e2:	3708      	adds	r7, #8
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bd80      	pop	{r7, pc}
 800b1e8:	e000ed00 	.word	0xe000ed00

0800b1ec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b082      	sub	sp, #8
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f7fb fecd 	bl	8006f9a <USBD_LL_Resume>
}
 800b200:	bf00      	nop
 800b202:	3708      	adds	r7, #8
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}

0800b208 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b082      	sub	sp, #8
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
 800b210:	460b      	mov	r3, r1
 800b212:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b21a:	78fa      	ldrb	r2, [r7, #3]
 800b21c:	4611      	mov	r1, r2
 800b21e:	4618      	mov	r0, r3
 800b220:	f7fb ff25 	bl	800706e <USBD_LL_IsoOUTIncomplete>
}
 800b224:	bf00      	nop
 800b226:	3708      	adds	r7, #8
 800b228:	46bd      	mov	sp, r7
 800b22a:	bd80      	pop	{r7, pc}

0800b22c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b082      	sub	sp, #8
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
 800b234:	460b      	mov	r3, r1
 800b236:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b23e:	78fa      	ldrb	r2, [r7, #3]
 800b240:	4611      	mov	r1, r2
 800b242:	4618      	mov	r0, r3
 800b244:	f7fb fee1 	bl	800700a <USBD_LL_IsoINIncomplete>
}
 800b248:	bf00      	nop
 800b24a:	3708      	adds	r7, #8
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}

0800b250 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b082      	sub	sp, #8
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b25e:	4618      	mov	r0, r3
 800b260:	f7fb ff37 	bl	80070d2 <USBD_LL_DevConnected>
}
 800b264:	bf00      	nop
 800b266:	3708      	adds	r7, #8
 800b268:	46bd      	mov	sp, r7
 800b26a:	bd80      	pop	{r7, pc}

0800b26c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b082      	sub	sp, #8
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b27a:	4618      	mov	r0, r3
 800b27c:	f7fb ff34 	bl	80070e8 <USBD_LL_DevDisconnected>
}
 800b280:	bf00      	nop
 800b282:	3708      	adds	r7, #8
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}

0800b288 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b082      	sub	sp, #8
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	781b      	ldrb	r3, [r3, #0]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d13c      	bne.n	800b312 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b298:	4a20      	ldr	r2, [pc, #128]	; (800b31c <USBD_LL_Init+0x94>)
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	4a1e      	ldr	r2, [pc, #120]	; (800b31c <USBD_LL_Init+0x94>)
 800b2a4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b2a8:	4b1c      	ldr	r3, [pc, #112]	; (800b31c <USBD_LL_Init+0x94>)
 800b2aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b2ae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b2b0:	4b1a      	ldr	r3, [pc, #104]	; (800b31c <USBD_LL_Init+0x94>)
 800b2b2:	2204      	movs	r2, #4
 800b2b4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b2b6:	4b19      	ldr	r3, [pc, #100]	; (800b31c <USBD_LL_Init+0x94>)
 800b2b8:	2202      	movs	r2, #2
 800b2ba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b2bc:	4b17      	ldr	r3, [pc, #92]	; (800b31c <USBD_LL_Init+0x94>)
 800b2be:	2200      	movs	r2, #0
 800b2c0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b2c2:	4b16      	ldr	r3, [pc, #88]	; (800b31c <USBD_LL_Init+0x94>)
 800b2c4:	2202      	movs	r2, #2
 800b2c6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b2c8:	4b14      	ldr	r3, [pc, #80]	; (800b31c <USBD_LL_Init+0x94>)
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b2ce:	4b13      	ldr	r3, [pc, #76]	; (800b31c <USBD_LL_Init+0x94>)
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b2d4:	4b11      	ldr	r3, [pc, #68]	; (800b31c <USBD_LL_Init+0x94>)
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800b2da:	4b10      	ldr	r3, [pc, #64]	; (800b31c <USBD_LL_Init+0x94>)
 800b2dc:	2201      	movs	r2, #1
 800b2de:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b2e0:	4b0e      	ldr	r3, [pc, #56]	; (800b31c <USBD_LL_Init+0x94>)
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b2e6:	480d      	ldr	r0, [pc, #52]	; (800b31c <USBD_LL_Init+0x94>)
 800b2e8:	f7f6 ff08 	bl	80020fc <HAL_PCD_Init>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d001      	beq.n	800b2f6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b2f2:	f7f5 fbc8 	bl	8000a86 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b2f6:	2180      	movs	r1, #128	; 0x80
 800b2f8:	4808      	ldr	r0, [pc, #32]	; (800b31c <USBD_LL_Init+0x94>)
 800b2fa:	f7f8 f960 	bl	80035be <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b2fe:	2240      	movs	r2, #64	; 0x40
 800b300:	2100      	movs	r1, #0
 800b302:	4806      	ldr	r0, [pc, #24]	; (800b31c <USBD_LL_Init+0x94>)
 800b304:	f7f8 f914 	bl	8003530 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b308:	2280      	movs	r2, #128	; 0x80
 800b30a:	2101      	movs	r1, #1
 800b30c:	4803      	ldr	r0, [pc, #12]	; (800b31c <USBD_LL_Init+0x94>)
 800b30e:	f7f8 f90f 	bl	8003530 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b312:	2300      	movs	r3, #0
}
 800b314:	4618      	mov	r0, r3
 800b316:	3708      	adds	r7, #8
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}
 800b31c:	20006288 	.word	0x20006288

0800b320 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b084      	sub	sp, #16
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b328:	2300      	movs	r3, #0
 800b32a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b32c:	2300      	movs	r3, #0
 800b32e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b336:	4618      	mov	r0, r3
 800b338:	f7f6 fffd 	bl	8002336 <HAL_PCD_Start>
 800b33c:	4603      	mov	r3, r0
 800b33e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b340:	7bfb      	ldrb	r3, [r7, #15]
 800b342:	4618      	mov	r0, r3
 800b344:	f000 f942 	bl	800b5cc <USBD_Get_USB_Status>
 800b348:	4603      	mov	r3, r0
 800b34a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b34c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b34e:	4618      	mov	r0, r3
 800b350:	3710      	adds	r7, #16
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}

0800b356 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b356:	b580      	push	{r7, lr}
 800b358:	b084      	sub	sp, #16
 800b35a:	af00      	add	r7, sp, #0
 800b35c:	6078      	str	r0, [r7, #4]
 800b35e:	4608      	mov	r0, r1
 800b360:	4611      	mov	r1, r2
 800b362:	461a      	mov	r2, r3
 800b364:	4603      	mov	r3, r0
 800b366:	70fb      	strb	r3, [r7, #3]
 800b368:	460b      	mov	r3, r1
 800b36a:	70bb      	strb	r3, [r7, #2]
 800b36c:	4613      	mov	r3, r2
 800b36e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b370:	2300      	movs	r3, #0
 800b372:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b374:	2300      	movs	r3, #0
 800b376:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b37e:	78bb      	ldrb	r3, [r7, #2]
 800b380:	883a      	ldrh	r2, [r7, #0]
 800b382:	78f9      	ldrb	r1, [r7, #3]
 800b384:	f7f7 fcce 	bl	8002d24 <HAL_PCD_EP_Open>
 800b388:	4603      	mov	r3, r0
 800b38a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b38c:	7bfb      	ldrb	r3, [r7, #15]
 800b38e:	4618      	mov	r0, r3
 800b390:	f000 f91c 	bl	800b5cc <USBD_Get_USB_Status>
 800b394:	4603      	mov	r3, r0
 800b396:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b398:	7bbb      	ldrb	r3, [r7, #14]
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3710      	adds	r7, #16
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}

0800b3a2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b3a2:	b580      	push	{r7, lr}
 800b3a4:	b084      	sub	sp, #16
 800b3a6:	af00      	add	r7, sp, #0
 800b3a8:	6078      	str	r0, [r7, #4]
 800b3aa:	460b      	mov	r3, r1
 800b3ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b3bc:	78fa      	ldrb	r2, [r7, #3]
 800b3be:	4611      	mov	r1, r2
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f7f7 fd17 	bl	8002df4 <HAL_PCD_EP_Close>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b3ca:	7bfb      	ldrb	r3, [r7, #15]
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	f000 f8fd 	bl	800b5cc <USBD_Get_USB_Status>
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3710      	adds	r7, #16
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}

0800b3e0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b084      	sub	sp, #16
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	460b      	mov	r3, r1
 800b3ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b3fa:	78fa      	ldrb	r2, [r7, #3]
 800b3fc:	4611      	mov	r1, r2
 800b3fe:	4618      	mov	r0, r3
 800b400:	f7f7 fdef 	bl	8002fe2 <HAL_PCD_EP_SetStall>
 800b404:	4603      	mov	r3, r0
 800b406:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b408:	7bfb      	ldrb	r3, [r7, #15]
 800b40a:	4618      	mov	r0, r3
 800b40c:	f000 f8de 	bl	800b5cc <USBD_Get_USB_Status>
 800b410:	4603      	mov	r3, r0
 800b412:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b414:	7bbb      	ldrb	r3, [r7, #14]
}
 800b416:	4618      	mov	r0, r3
 800b418:	3710      	adds	r7, #16
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}

0800b41e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b41e:	b580      	push	{r7, lr}
 800b420:	b084      	sub	sp, #16
 800b422:	af00      	add	r7, sp, #0
 800b424:	6078      	str	r0, [r7, #4]
 800b426:	460b      	mov	r3, r1
 800b428:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b42a:	2300      	movs	r3, #0
 800b42c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b42e:	2300      	movs	r3, #0
 800b430:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b438:	78fa      	ldrb	r2, [r7, #3]
 800b43a:	4611      	mov	r1, r2
 800b43c:	4618      	mov	r0, r3
 800b43e:	f7f7 fe34 	bl	80030aa <HAL_PCD_EP_ClrStall>
 800b442:	4603      	mov	r3, r0
 800b444:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b446:	7bfb      	ldrb	r3, [r7, #15]
 800b448:	4618      	mov	r0, r3
 800b44a:	f000 f8bf 	bl	800b5cc <USBD_Get_USB_Status>
 800b44e:	4603      	mov	r3, r0
 800b450:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b452:	7bbb      	ldrb	r3, [r7, #14]
}
 800b454:	4618      	mov	r0, r3
 800b456:	3710      	adds	r7, #16
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}

0800b45c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b45c:	b480      	push	{r7}
 800b45e:	b085      	sub	sp, #20
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
 800b464:	460b      	mov	r3, r1
 800b466:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b46e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b470:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b474:	2b00      	cmp	r3, #0
 800b476:	da0b      	bge.n	800b490 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b478:	78fb      	ldrb	r3, [r7, #3]
 800b47a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b47e:	68f9      	ldr	r1, [r7, #12]
 800b480:	4613      	mov	r3, r2
 800b482:	00db      	lsls	r3, r3, #3
 800b484:	4413      	add	r3, r2
 800b486:	009b      	lsls	r3, r3, #2
 800b488:	440b      	add	r3, r1
 800b48a:	333e      	adds	r3, #62	; 0x3e
 800b48c:	781b      	ldrb	r3, [r3, #0]
 800b48e:	e00b      	b.n	800b4a8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b490:	78fb      	ldrb	r3, [r7, #3]
 800b492:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b496:	68f9      	ldr	r1, [r7, #12]
 800b498:	4613      	mov	r3, r2
 800b49a:	00db      	lsls	r3, r3, #3
 800b49c:	4413      	add	r3, r2
 800b49e:	009b      	lsls	r3, r3, #2
 800b4a0:	440b      	add	r3, r1
 800b4a2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800b4a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	3714      	adds	r7, #20
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b2:	4770      	bx	lr

0800b4b4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b084      	sub	sp, #16
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
 800b4bc:	460b      	mov	r3, r1
 800b4be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b4ce:	78fa      	ldrb	r2, [r7, #3]
 800b4d0:	4611      	mov	r1, r2
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f7f7 fc01 	bl	8002cda <HAL_PCD_SetAddress>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4dc:	7bfb      	ldrb	r3, [r7, #15]
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f000 f874 	bl	800b5cc <USBD_Get_USB_Status>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	3710      	adds	r7, #16
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}

0800b4f2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b4f2:	b580      	push	{r7, lr}
 800b4f4:	b086      	sub	sp, #24
 800b4f6:	af00      	add	r7, sp, #0
 800b4f8:	60f8      	str	r0, [r7, #12]
 800b4fa:	607a      	str	r2, [r7, #4]
 800b4fc:	603b      	str	r3, [r7, #0]
 800b4fe:	460b      	mov	r3, r1
 800b500:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b502:	2300      	movs	r3, #0
 800b504:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b506:	2300      	movs	r3, #0
 800b508:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b510:	7af9      	ldrb	r1, [r7, #11]
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	687a      	ldr	r2, [r7, #4]
 800b516:	f7f7 fd1a 	bl	8002f4e <HAL_PCD_EP_Transmit>
 800b51a:	4603      	mov	r3, r0
 800b51c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b51e:	7dfb      	ldrb	r3, [r7, #23]
 800b520:	4618      	mov	r0, r3
 800b522:	f000 f853 	bl	800b5cc <USBD_Get_USB_Status>
 800b526:	4603      	mov	r3, r0
 800b528:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b52a:	7dbb      	ldrb	r3, [r7, #22]
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	3718      	adds	r7, #24
 800b530:	46bd      	mov	sp, r7
 800b532:	bd80      	pop	{r7, pc}

0800b534 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b086      	sub	sp, #24
 800b538:	af00      	add	r7, sp, #0
 800b53a:	60f8      	str	r0, [r7, #12]
 800b53c:	607a      	str	r2, [r7, #4]
 800b53e:	603b      	str	r3, [r7, #0]
 800b540:	460b      	mov	r3, r1
 800b542:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b544:	2300      	movs	r3, #0
 800b546:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b548:	2300      	movs	r3, #0
 800b54a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b552:	7af9      	ldrb	r1, [r7, #11]
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	687a      	ldr	r2, [r7, #4]
 800b558:	f7f7 fc96 	bl	8002e88 <HAL_PCD_EP_Receive>
 800b55c:	4603      	mov	r3, r0
 800b55e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b560:	7dfb      	ldrb	r3, [r7, #23]
 800b562:	4618      	mov	r0, r3
 800b564:	f000 f832 	bl	800b5cc <USBD_Get_USB_Status>
 800b568:	4603      	mov	r3, r0
 800b56a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b56c:	7dbb      	ldrb	r3, [r7, #22]
}
 800b56e:	4618      	mov	r0, r3
 800b570:	3718      	adds	r7, #24
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}

0800b576 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b576:	b580      	push	{r7, lr}
 800b578:	b082      	sub	sp, #8
 800b57a:	af00      	add	r7, sp, #0
 800b57c:	6078      	str	r0, [r7, #4]
 800b57e:	460b      	mov	r3, r1
 800b580:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b588:	78fa      	ldrb	r2, [r7, #3]
 800b58a:	4611      	mov	r1, r2
 800b58c:	4618      	mov	r0, r3
 800b58e:	f7f7 fcc6 	bl	8002f1e <HAL_PCD_EP_GetRxCount>
 800b592:	4603      	mov	r3, r0
}
 800b594:	4618      	mov	r0, r3
 800b596:	3708      	adds	r7, #8
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd80      	pop	{r7, pc}

0800b59c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b59c:	b480      	push	{r7}
 800b59e:	b083      	sub	sp, #12
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b5a4:	4b03      	ldr	r3, [pc, #12]	; (800b5b4 <USBD_static_malloc+0x18>)
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	370c      	adds	r7, #12
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b0:	4770      	bx	lr
 800b5b2:	bf00      	nop
 800b5b4:	20006794 	.word	0x20006794

0800b5b8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b083      	sub	sp, #12
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]

}
 800b5c0:	bf00      	nop
 800b5c2:	370c      	adds	r7, #12
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ca:	4770      	bx	lr

0800b5cc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b085      	sub	sp, #20
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b5da:	79fb      	ldrb	r3, [r7, #7]
 800b5dc:	2b03      	cmp	r3, #3
 800b5de:	d817      	bhi.n	800b610 <USBD_Get_USB_Status+0x44>
 800b5e0:	a201      	add	r2, pc, #4	; (adr r2, 800b5e8 <USBD_Get_USB_Status+0x1c>)
 800b5e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5e6:	bf00      	nop
 800b5e8:	0800b5f9 	.word	0x0800b5f9
 800b5ec:	0800b5ff 	.word	0x0800b5ff
 800b5f0:	0800b605 	.word	0x0800b605
 800b5f4:	0800b60b 	.word	0x0800b60b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	73fb      	strb	r3, [r7, #15]
    break;
 800b5fc:	e00b      	b.n	800b616 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b5fe:	2303      	movs	r3, #3
 800b600:	73fb      	strb	r3, [r7, #15]
    break;
 800b602:	e008      	b.n	800b616 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b604:	2301      	movs	r3, #1
 800b606:	73fb      	strb	r3, [r7, #15]
    break;
 800b608:	e005      	b.n	800b616 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b60a:	2303      	movs	r3, #3
 800b60c:	73fb      	strb	r3, [r7, #15]
    break;
 800b60e:	e002      	b.n	800b616 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b610:	2303      	movs	r3, #3
 800b612:	73fb      	strb	r3, [r7, #15]
    break;
 800b614:	bf00      	nop
  }
  return usb_status;
 800b616:	7bfb      	ldrb	r3, [r7, #15]
}
 800b618:	4618      	mov	r0, r3
 800b61a:	3714      	adds	r7, #20
 800b61c:	46bd      	mov	sp, r7
 800b61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b622:	4770      	bx	lr

0800b624 <__libc_init_array>:
 800b624:	b570      	push	{r4, r5, r6, lr}
 800b626:	4d0d      	ldr	r5, [pc, #52]	; (800b65c <__libc_init_array+0x38>)
 800b628:	4c0d      	ldr	r4, [pc, #52]	; (800b660 <__libc_init_array+0x3c>)
 800b62a:	1b64      	subs	r4, r4, r5
 800b62c:	10a4      	asrs	r4, r4, #2
 800b62e:	2600      	movs	r6, #0
 800b630:	42a6      	cmp	r6, r4
 800b632:	d109      	bne.n	800b648 <__libc_init_array+0x24>
 800b634:	4d0b      	ldr	r5, [pc, #44]	; (800b664 <__libc_init_array+0x40>)
 800b636:	4c0c      	ldr	r4, [pc, #48]	; (800b668 <__libc_init_array+0x44>)
 800b638:	f000 f8f2 	bl	800b820 <_init>
 800b63c:	1b64      	subs	r4, r4, r5
 800b63e:	10a4      	asrs	r4, r4, #2
 800b640:	2600      	movs	r6, #0
 800b642:	42a6      	cmp	r6, r4
 800b644:	d105      	bne.n	800b652 <__libc_init_array+0x2e>
 800b646:	bd70      	pop	{r4, r5, r6, pc}
 800b648:	f855 3b04 	ldr.w	r3, [r5], #4
 800b64c:	4798      	blx	r3
 800b64e:	3601      	adds	r6, #1
 800b650:	e7ee      	b.n	800b630 <__libc_init_array+0xc>
 800b652:	f855 3b04 	ldr.w	r3, [r5], #4
 800b656:	4798      	blx	r3
 800b658:	3601      	adds	r6, #1
 800b65a:	e7f2      	b.n	800b642 <__libc_init_array+0x1e>
 800b65c:	0800b93c 	.word	0x0800b93c
 800b660:	0800b93c 	.word	0x0800b93c
 800b664:	0800b93c 	.word	0x0800b93c
 800b668:	0800b940 	.word	0x0800b940

0800b66c <__retarget_lock_acquire_recursive>:
 800b66c:	4770      	bx	lr

0800b66e <__retarget_lock_release_recursive>:
 800b66e:	4770      	bx	lr

0800b670 <memcpy>:
 800b670:	440a      	add	r2, r1
 800b672:	4291      	cmp	r1, r2
 800b674:	f100 33ff 	add.w	r3, r0, #4294967295
 800b678:	d100      	bne.n	800b67c <memcpy+0xc>
 800b67a:	4770      	bx	lr
 800b67c:	b510      	push	{r4, lr}
 800b67e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b682:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b686:	4291      	cmp	r1, r2
 800b688:	d1f9      	bne.n	800b67e <memcpy+0xe>
 800b68a:	bd10      	pop	{r4, pc}

0800b68c <memset>:
 800b68c:	4402      	add	r2, r0
 800b68e:	4603      	mov	r3, r0
 800b690:	4293      	cmp	r3, r2
 800b692:	d100      	bne.n	800b696 <memset+0xa>
 800b694:	4770      	bx	lr
 800b696:	f803 1b01 	strb.w	r1, [r3], #1
 800b69a:	e7f9      	b.n	800b690 <memset+0x4>

0800b69c <cleanup_glue>:
 800b69c:	b538      	push	{r3, r4, r5, lr}
 800b69e:	460c      	mov	r4, r1
 800b6a0:	6809      	ldr	r1, [r1, #0]
 800b6a2:	4605      	mov	r5, r0
 800b6a4:	b109      	cbz	r1, 800b6aa <cleanup_glue+0xe>
 800b6a6:	f7ff fff9 	bl	800b69c <cleanup_glue>
 800b6aa:	4621      	mov	r1, r4
 800b6ac:	4628      	mov	r0, r5
 800b6ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6b2:	f000 b869 	b.w	800b788 <_free_r>
	...

0800b6b8 <_reclaim_reent>:
 800b6b8:	4b2c      	ldr	r3, [pc, #176]	; (800b76c <_reclaim_reent+0xb4>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	4283      	cmp	r3, r0
 800b6be:	b570      	push	{r4, r5, r6, lr}
 800b6c0:	4604      	mov	r4, r0
 800b6c2:	d051      	beq.n	800b768 <_reclaim_reent+0xb0>
 800b6c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b6c6:	b143      	cbz	r3, 800b6da <_reclaim_reent+0x22>
 800b6c8:	68db      	ldr	r3, [r3, #12]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d14a      	bne.n	800b764 <_reclaim_reent+0xac>
 800b6ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b6d0:	6819      	ldr	r1, [r3, #0]
 800b6d2:	b111      	cbz	r1, 800b6da <_reclaim_reent+0x22>
 800b6d4:	4620      	mov	r0, r4
 800b6d6:	f000 f857 	bl	800b788 <_free_r>
 800b6da:	6961      	ldr	r1, [r4, #20]
 800b6dc:	b111      	cbz	r1, 800b6e4 <_reclaim_reent+0x2c>
 800b6de:	4620      	mov	r0, r4
 800b6e0:	f000 f852 	bl	800b788 <_free_r>
 800b6e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b6e6:	b111      	cbz	r1, 800b6ee <_reclaim_reent+0x36>
 800b6e8:	4620      	mov	r0, r4
 800b6ea:	f000 f84d 	bl	800b788 <_free_r>
 800b6ee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b6f0:	b111      	cbz	r1, 800b6f8 <_reclaim_reent+0x40>
 800b6f2:	4620      	mov	r0, r4
 800b6f4:	f000 f848 	bl	800b788 <_free_r>
 800b6f8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b6fa:	b111      	cbz	r1, 800b702 <_reclaim_reent+0x4a>
 800b6fc:	4620      	mov	r0, r4
 800b6fe:	f000 f843 	bl	800b788 <_free_r>
 800b702:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b704:	b111      	cbz	r1, 800b70c <_reclaim_reent+0x54>
 800b706:	4620      	mov	r0, r4
 800b708:	f000 f83e 	bl	800b788 <_free_r>
 800b70c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b70e:	b111      	cbz	r1, 800b716 <_reclaim_reent+0x5e>
 800b710:	4620      	mov	r0, r4
 800b712:	f000 f839 	bl	800b788 <_free_r>
 800b716:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b718:	b111      	cbz	r1, 800b720 <_reclaim_reent+0x68>
 800b71a:	4620      	mov	r0, r4
 800b71c:	f000 f834 	bl	800b788 <_free_r>
 800b720:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b722:	b111      	cbz	r1, 800b72a <_reclaim_reent+0x72>
 800b724:	4620      	mov	r0, r4
 800b726:	f000 f82f 	bl	800b788 <_free_r>
 800b72a:	69a3      	ldr	r3, [r4, #24]
 800b72c:	b1e3      	cbz	r3, 800b768 <_reclaim_reent+0xb0>
 800b72e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b730:	4620      	mov	r0, r4
 800b732:	4798      	blx	r3
 800b734:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b736:	b1b9      	cbz	r1, 800b768 <_reclaim_reent+0xb0>
 800b738:	4620      	mov	r0, r4
 800b73a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b73e:	f7ff bfad 	b.w	800b69c <cleanup_glue>
 800b742:	5949      	ldr	r1, [r1, r5]
 800b744:	b941      	cbnz	r1, 800b758 <_reclaim_reent+0xa0>
 800b746:	3504      	adds	r5, #4
 800b748:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b74a:	2d80      	cmp	r5, #128	; 0x80
 800b74c:	68d9      	ldr	r1, [r3, #12]
 800b74e:	d1f8      	bne.n	800b742 <_reclaim_reent+0x8a>
 800b750:	4620      	mov	r0, r4
 800b752:	f000 f819 	bl	800b788 <_free_r>
 800b756:	e7ba      	b.n	800b6ce <_reclaim_reent+0x16>
 800b758:	680e      	ldr	r6, [r1, #0]
 800b75a:	4620      	mov	r0, r4
 800b75c:	f000 f814 	bl	800b788 <_free_r>
 800b760:	4631      	mov	r1, r6
 800b762:	e7ef      	b.n	800b744 <_reclaim_reent+0x8c>
 800b764:	2500      	movs	r5, #0
 800b766:	e7ef      	b.n	800b748 <_reclaim_reent+0x90>
 800b768:	bd70      	pop	{r4, r5, r6, pc}
 800b76a:	bf00      	nop
 800b76c:	20000100 	.word	0x20000100

0800b770 <__malloc_lock>:
 800b770:	4801      	ldr	r0, [pc, #4]	; (800b778 <__malloc_lock+0x8>)
 800b772:	f7ff bf7b 	b.w	800b66c <__retarget_lock_acquire_recursive>
 800b776:	bf00      	nop
 800b778:	200069b4 	.word	0x200069b4

0800b77c <__malloc_unlock>:
 800b77c:	4801      	ldr	r0, [pc, #4]	; (800b784 <__malloc_unlock+0x8>)
 800b77e:	f7ff bf76 	b.w	800b66e <__retarget_lock_release_recursive>
 800b782:	bf00      	nop
 800b784:	200069b4 	.word	0x200069b4

0800b788 <_free_r>:
 800b788:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b78a:	2900      	cmp	r1, #0
 800b78c:	d044      	beq.n	800b818 <_free_r+0x90>
 800b78e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b792:	9001      	str	r0, [sp, #4]
 800b794:	2b00      	cmp	r3, #0
 800b796:	f1a1 0404 	sub.w	r4, r1, #4
 800b79a:	bfb8      	it	lt
 800b79c:	18e4      	addlt	r4, r4, r3
 800b79e:	f7ff ffe7 	bl	800b770 <__malloc_lock>
 800b7a2:	4a1e      	ldr	r2, [pc, #120]	; (800b81c <_free_r+0x94>)
 800b7a4:	9801      	ldr	r0, [sp, #4]
 800b7a6:	6813      	ldr	r3, [r2, #0]
 800b7a8:	b933      	cbnz	r3, 800b7b8 <_free_r+0x30>
 800b7aa:	6063      	str	r3, [r4, #4]
 800b7ac:	6014      	str	r4, [r2, #0]
 800b7ae:	b003      	add	sp, #12
 800b7b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b7b4:	f7ff bfe2 	b.w	800b77c <__malloc_unlock>
 800b7b8:	42a3      	cmp	r3, r4
 800b7ba:	d908      	bls.n	800b7ce <_free_r+0x46>
 800b7bc:	6825      	ldr	r5, [r4, #0]
 800b7be:	1961      	adds	r1, r4, r5
 800b7c0:	428b      	cmp	r3, r1
 800b7c2:	bf01      	itttt	eq
 800b7c4:	6819      	ldreq	r1, [r3, #0]
 800b7c6:	685b      	ldreq	r3, [r3, #4]
 800b7c8:	1949      	addeq	r1, r1, r5
 800b7ca:	6021      	streq	r1, [r4, #0]
 800b7cc:	e7ed      	b.n	800b7aa <_free_r+0x22>
 800b7ce:	461a      	mov	r2, r3
 800b7d0:	685b      	ldr	r3, [r3, #4]
 800b7d2:	b10b      	cbz	r3, 800b7d8 <_free_r+0x50>
 800b7d4:	42a3      	cmp	r3, r4
 800b7d6:	d9fa      	bls.n	800b7ce <_free_r+0x46>
 800b7d8:	6811      	ldr	r1, [r2, #0]
 800b7da:	1855      	adds	r5, r2, r1
 800b7dc:	42a5      	cmp	r5, r4
 800b7de:	d10b      	bne.n	800b7f8 <_free_r+0x70>
 800b7e0:	6824      	ldr	r4, [r4, #0]
 800b7e2:	4421      	add	r1, r4
 800b7e4:	1854      	adds	r4, r2, r1
 800b7e6:	42a3      	cmp	r3, r4
 800b7e8:	6011      	str	r1, [r2, #0]
 800b7ea:	d1e0      	bne.n	800b7ae <_free_r+0x26>
 800b7ec:	681c      	ldr	r4, [r3, #0]
 800b7ee:	685b      	ldr	r3, [r3, #4]
 800b7f0:	6053      	str	r3, [r2, #4]
 800b7f2:	4421      	add	r1, r4
 800b7f4:	6011      	str	r1, [r2, #0]
 800b7f6:	e7da      	b.n	800b7ae <_free_r+0x26>
 800b7f8:	d902      	bls.n	800b800 <_free_r+0x78>
 800b7fa:	230c      	movs	r3, #12
 800b7fc:	6003      	str	r3, [r0, #0]
 800b7fe:	e7d6      	b.n	800b7ae <_free_r+0x26>
 800b800:	6825      	ldr	r5, [r4, #0]
 800b802:	1961      	adds	r1, r4, r5
 800b804:	428b      	cmp	r3, r1
 800b806:	bf04      	itt	eq
 800b808:	6819      	ldreq	r1, [r3, #0]
 800b80a:	685b      	ldreq	r3, [r3, #4]
 800b80c:	6063      	str	r3, [r4, #4]
 800b80e:	bf04      	itt	eq
 800b810:	1949      	addeq	r1, r1, r5
 800b812:	6021      	streq	r1, [r4, #0]
 800b814:	6054      	str	r4, [r2, #4]
 800b816:	e7ca      	b.n	800b7ae <_free_r+0x26>
 800b818:	b003      	add	sp, #12
 800b81a:	bd30      	pop	{r4, r5, pc}
 800b81c:	200069b8 	.word	0x200069b8

0800b820 <_init>:
 800b820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b822:	bf00      	nop
 800b824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b826:	bc08      	pop	{r3}
 800b828:	469e      	mov	lr, r3
 800b82a:	4770      	bx	lr

0800b82c <_fini>:
 800b82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b82e:	bf00      	nop
 800b830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b832:	bc08      	pop	{r3}
 800b834:	469e      	mov	lr, r3
 800b836:	4770      	bx	lr
