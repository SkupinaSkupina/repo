
proba.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c754  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  0800c8f4  0800c8f4  0001c8f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca44  0800ca44  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca44  0800ca44  0001ca44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca4c  0800ca4c  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca4c  0800ca4c  0001ca4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca50  0800ca50  0001ca50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  0800ca54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006860  20000164  0800cbb8  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200069c4  0800cbb8  000269c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   000267a6  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000053c7  00000000  00000000  0004693a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f98  00000000  00000000  0004bd08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d88  00000000  00000000  0004dca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000774d  00000000  00000000  0004fa28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025e5e  00000000  00000000  00057175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0d0b  00000000  00000000  0007cfd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011dcde  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008918  00000000  00000000  0011dd30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000164 	.word	0x20000164
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c8dc 	.word	0x0800c8dc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000168 	.word	0x20000168
 80001dc:	0800c8dc 	.word	0x0800c8dc

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <__aeabi_uldivmod>:
 80001f4:	b953      	cbnz	r3, 800020c <__aeabi_uldivmod+0x18>
 80001f6:	b94a      	cbnz	r2, 800020c <__aeabi_uldivmod+0x18>
 80001f8:	2900      	cmp	r1, #0
 80001fa:	bf08      	it	eq
 80001fc:	2800      	cmpeq	r0, #0
 80001fe:	bf1c      	itt	ne
 8000200:	f04f 31ff 	movne.w	r1, #4294967295
 8000204:	f04f 30ff 	movne.w	r0, #4294967295
 8000208:	f000 b974 	b.w	80004f4 <__aeabi_idiv0>
 800020c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000210:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000214:	f000 f806 	bl	8000224 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4770      	bx	lr

08000224 <__udivmoddi4>:
 8000224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000228:	9d08      	ldr	r5, [sp, #32]
 800022a:	4604      	mov	r4, r0
 800022c:	468e      	mov	lr, r1
 800022e:	2b00      	cmp	r3, #0
 8000230:	d14d      	bne.n	80002ce <__udivmoddi4+0xaa>
 8000232:	428a      	cmp	r2, r1
 8000234:	4694      	mov	ip, r2
 8000236:	d969      	bls.n	800030c <__udivmoddi4+0xe8>
 8000238:	fab2 f282 	clz	r2, r2
 800023c:	b152      	cbz	r2, 8000254 <__udivmoddi4+0x30>
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	f1c2 0120 	rsb	r1, r2, #32
 8000246:	fa20 f101 	lsr.w	r1, r0, r1
 800024a:	fa0c fc02 	lsl.w	ip, ip, r2
 800024e:	ea41 0e03 	orr.w	lr, r1, r3
 8000252:	4094      	lsls	r4, r2
 8000254:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000258:	0c21      	lsrs	r1, r4, #16
 800025a:	fbbe f6f8 	udiv	r6, lr, r8
 800025e:	fa1f f78c 	uxth.w	r7, ip
 8000262:	fb08 e316 	mls	r3, r8, r6, lr
 8000266:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800026a:	fb06 f107 	mul.w	r1, r6, r7
 800026e:	4299      	cmp	r1, r3
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x64>
 8000272:	eb1c 0303 	adds.w	r3, ip, r3
 8000276:	f106 30ff 	add.w	r0, r6, #4294967295
 800027a:	f080 811f 	bcs.w	80004bc <__udivmoddi4+0x298>
 800027e:	4299      	cmp	r1, r3
 8000280:	f240 811c 	bls.w	80004bc <__udivmoddi4+0x298>
 8000284:	3e02      	subs	r6, #2
 8000286:	4463      	add	r3, ip
 8000288:	1a5b      	subs	r3, r3, r1
 800028a:	b2a4      	uxth	r4, r4
 800028c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000290:	fb08 3310 	mls	r3, r8, r0, r3
 8000294:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000298:	fb00 f707 	mul.w	r7, r0, r7
 800029c:	42a7      	cmp	r7, r4
 800029e:	d90a      	bls.n	80002b6 <__udivmoddi4+0x92>
 80002a0:	eb1c 0404 	adds.w	r4, ip, r4
 80002a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a8:	f080 810a 	bcs.w	80004c0 <__udivmoddi4+0x29c>
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	f240 8107 	bls.w	80004c0 <__udivmoddi4+0x29c>
 80002b2:	4464      	add	r4, ip
 80002b4:	3802      	subs	r0, #2
 80002b6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ba:	1be4      	subs	r4, r4, r7
 80002bc:	2600      	movs	r6, #0
 80002be:	b11d      	cbz	r5, 80002c8 <__udivmoddi4+0xa4>
 80002c0:	40d4      	lsrs	r4, r2
 80002c2:	2300      	movs	r3, #0
 80002c4:	e9c5 4300 	strd	r4, r3, [r5]
 80002c8:	4631      	mov	r1, r6
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d909      	bls.n	80002e6 <__udivmoddi4+0xc2>
 80002d2:	2d00      	cmp	r5, #0
 80002d4:	f000 80ef 	beq.w	80004b6 <__udivmoddi4+0x292>
 80002d8:	2600      	movs	r6, #0
 80002da:	e9c5 0100 	strd	r0, r1, [r5]
 80002de:	4630      	mov	r0, r6
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	fab3 f683 	clz	r6, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d14a      	bne.n	8000384 <__udivmoddi4+0x160>
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xd4>
 80002f2:	4282      	cmp	r2, r0
 80002f4:	f200 80f9 	bhi.w	80004ea <__udivmoddi4+0x2c6>
 80002f8:	1a84      	subs	r4, r0, r2
 80002fa:	eb61 0303 	sbc.w	r3, r1, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	469e      	mov	lr, r3
 8000302:	2d00      	cmp	r5, #0
 8000304:	d0e0      	beq.n	80002c8 <__udivmoddi4+0xa4>
 8000306:	e9c5 4e00 	strd	r4, lr, [r5]
 800030a:	e7dd      	b.n	80002c8 <__udivmoddi4+0xa4>
 800030c:	b902      	cbnz	r2, 8000310 <__udivmoddi4+0xec>
 800030e:	deff      	udf	#255	; 0xff
 8000310:	fab2 f282 	clz	r2, r2
 8000314:	2a00      	cmp	r2, #0
 8000316:	f040 8092 	bne.w	800043e <__udivmoddi4+0x21a>
 800031a:	eba1 010c 	sub.w	r1, r1, ip
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2601      	movs	r6, #1
 8000328:	0c20      	lsrs	r0, r4, #16
 800032a:	fbb1 f3f7 	udiv	r3, r1, r7
 800032e:	fb07 1113 	mls	r1, r7, r3, r1
 8000332:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000336:	fb0e f003 	mul.w	r0, lr, r3
 800033a:	4288      	cmp	r0, r1
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x12c>
 800033e:	eb1c 0101 	adds.w	r1, ip, r1
 8000342:	f103 38ff 	add.w	r8, r3, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x12a>
 8000348:	4288      	cmp	r0, r1
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2c0>
 800034e:	4643      	mov	r3, r8
 8000350:	1a09      	subs	r1, r1, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb1 f0f7 	udiv	r0, r1, r7
 8000358:	fb07 1110 	mls	r1, r7, r0, r1
 800035c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x156>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x154>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2ca>
 8000378:	4608      	mov	r0, r1
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000382:	e79c      	b.n	80002be <__udivmoddi4+0x9a>
 8000384:	f1c6 0720 	rsb	r7, r6, #32
 8000388:	40b3      	lsls	r3, r6
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa20 f407 	lsr.w	r4, r0, r7
 8000396:	fa01 f306 	lsl.w	r3, r1, r6
 800039a:	431c      	orrs	r4, r3
 800039c:	40f9      	lsrs	r1, r7
 800039e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a2:	fa00 f306 	lsl.w	r3, r0, r6
 80003a6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003aa:	0c20      	lsrs	r0, r4, #16
 80003ac:	fa1f fe8c 	uxth.w	lr, ip
 80003b0:	fb09 1118 	mls	r1, r9, r8, r1
 80003b4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b8:	fb08 f00e 	mul.w	r0, r8, lr
 80003bc:	4288      	cmp	r0, r1
 80003be:	fa02 f206 	lsl.w	r2, r2, r6
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b8>
 80003c4:	eb1c 0101 	adds.w	r1, ip, r1
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2bc>
 80003d0:	4288      	cmp	r0, r1
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2bc>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4461      	add	r1, ip
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e4:	fb09 1110 	mls	r1, r9, r0, r1
 80003e8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003ec:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f0:	458e      	cmp	lr, r1
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1e2>
 80003f4:	eb1c 0101 	adds.w	r1, ip, r1
 80003f8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2b4>
 80003fe:	458e      	cmp	lr, r1
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2b4>
 8000402:	3802      	subs	r0, #2
 8000404:	4461      	add	r1, ip
 8000406:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800040a:	fba0 9402 	umull	r9, r4, r0, r2
 800040e:	eba1 010e 	sub.w	r1, r1, lr
 8000412:	42a1      	cmp	r1, r4
 8000414:	46c8      	mov	r8, r9
 8000416:	46a6      	mov	lr, r4
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x2a4>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x2a0>
 800041c:	b15d      	cbz	r5, 8000436 <__udivmoddi4+0x212>
 800041e:	ebb3 0208 	subs.w	r2, r3, r8
 8000422:	eb61 010e 	sbc.w	r1, r1, lr
 8000426:	fa01 f707 	lsl.w	r7, r1, r7
 800042a:	fa22 f306 	lsr.w	r3, r2, r6
 800042e:	40f1      	lsrs	r1, r6
 8000430:	431f      	orrs	r7, r3
 8000432:	e9c5 7100 	strd	r7, r1, [r5]
 8000436:	2600      	movs	r6, #0
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	f1c2 0320 	rsb	r3, r2, #32
 8000442:	40d8      	lsrs	r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa21 f303 	lsr.w	r3, r1, r3
 800044c:	4091      	lsls	r1, r2
 800044e:	4301      	orrs	r1, r0
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb3 f0f7 	udiv	r0, r3, r7
 800045c:	fb07 3610 	mls	r6, r7, r0, r3
 8000460:	0c0b      	lsrs	r3, r1, #16
 8000462:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000466:	fb00 f60e 	mul.w	r6, r0, lr
 800046a:	429e      	cmp	r6, r3
 800046c:	fa04 f402 	lsl.w	r4, r4, r2
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x260>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b8>
 800047c:	429e      	cmp	r6, r3
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b8>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	b289      	uxth	r1, r1
 8000488:	fbb3 f6f7 	udiv	r6, r3, r7
 800048c:	fb07 3316 	mls	r3, r7, r6, r3
 8000490:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000494:	fb06 f30e 	mul.w	r3, r6, lr
 8000498:	428b      	cmp	r3, r1
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x28a>
 800049c:	eb1c 0101 	adds.w	r1, ip, r1
 80004a0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2b0>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2b0>
 80004aa:	3e02      	subs	r6, #2
 80004ac:	4461      	add	r1, ip
 80004ae:	1ac9      	subs	r1, r1, r3
 80004b0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0x104>
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e705      	b.n	80002c8 <__udivmoddi4+0xa4>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e3      	b.n	8000288 <__udivmoddi4+0x64>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6f8      	b.n	80002b6 <__udivmoddi4+0x92>
 80004c4:	454b      	cmp	r3, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f8>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f8>
 80004d4:	4646      	mov	r6, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x28a>
 80004d8:	4620      	mov	r0, r4
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1e2>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x260>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b8>
 80004e4:	3b02      	subs	r3, #2
 80004e6:	4461      	add	r1, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x12c>
 80004ea:	4630      	mov	r0, r6
 80004ec:	e709      	b.n	8000302 <__udivmoddi4+0xde>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x156>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <i2c1_pisiRegister>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t i2c1_pisiRegister(uint8_t naprava, uint8_t reg, uint8_t podatek) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b086      	sub	sp, #24
 80004fc:	af04      	add	r7, sp, #16
 80004fe:	4603      	mov	r3, r0
 8000500:	71fb      	strb	r3, [r7, #7]
 8000502:	460b      	mov	r3, r1
 8000504:	71bb      	strb	r3, [r7, #6]
 8000506:	4613      	mov	r3, r2
 8000508:	717b      	strb	r3, [r7, #5]
    naprava <<= 1;
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	005b      	lsls	r3, r3, #1
 800050e:	71fb      	strb	r3, [r7, #7]
    return HAL_I2C_Mem_Write(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, &podatek, 1, 10);
 8000510:	79fb      	ldrb	r3, [r7, #7]
 8000512:	b299      	uxth	r1, r3
 8000514:	79bb      	ldrb	r3, [r7, #6]
 8000516:	b29a      	uxth	r2, r3
 8000518:	230a      	movs	r3, #10
 800051a:	9302      	str	r3, [sp, #8]
 800051c:	2301      	movs	r3, #1
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	1d7b      	adds	r3, r7, #5
 8000522:	9300      	str	r3, [sp, #0]
 8000524:	2301      	movs	r3, #1
 8000526:	4804      	ldr	r0, [pc, #16]	; (8000538 <i2c1_pisiRegister+0x40>)
 8000528:	f001 faca 	bl	8001ac0 <HAL_I2C_Mem_Write>
 800052c:	4603      	mov	r3, r0
}
 800052e:	4618      	mov	r0, r3
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	20000180 	.word	0x20000180

0800053c <i2c1_beriRegistre>:

void i2c1_beriRegistre(uint8_t naprava, uint8_t reg, uint8_t* podatek, uint8_t dolzina) {
 800053c:	b580      	push	{r7, lr}
 800053e:	b086      	sub	sp, #24
 8000540:	af04      	add	r7, sp, #16
 8000542:	603a      	str	r2, [r7, #0]
 8000544:	461a      	mov	r2, r3
 8000546:	4603      	mov	r3, r0
 8000548:	71fb      	strb	r3, [r7, #7]
 800054a:	460b      	mov	r3, r1
 800054c:	71bb      	strb	r3, [r7, #6]
 800054e:	4613      	mov	r3, r2
 8000550:	717b      	strb	r3, [r7, #5]
    if ((dolzina>1)&&(naprava==0x19))  // ce je naprava 0x19 moramo postaviti ta bit, ce zelimo brati vec zlogov
 8000552:	797b      	ldrb	r3, [r7, #5]
 8000554:	2b01      	cmp	r3, #1
 8000556:	d906      	bls.n	8000566 <i2c1_beriRegistre+0x2a>
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	2b19      	cmp	r3, #25
 800055c:	d103      	bne.n	8000566 <i2c1_beriRegistre+0x2a>
        reg |= 0x80;
 800055e:	79bb      	ldrb	r3, [r7, #6]
 8000560:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000564:	71bb      	strb	r3, [r7, #6]
    naprava <<= 1;
 8000566:	79fb      	ldrb	r3, [r7, #7]
 8000568:	005b      	lsls	r3, r3, #1
 800056a:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Read(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, podatek, dolzina, dolzina);
 800056c:	79fb      	ldrb	r3, [r7, #7]
 800056e:	b299      	uxth	r1, r3
 8000570:	79bb      	ldrb	r3, [r7, #6]
 8000572:	b298      	uxth	r0, r3
 8000574:	797b      	ldrb	r3, [r7, #5]
 8000576:	b29b      	uxth	r3, r3
 8000578:	797a      	ldrb	r2, [r7, #5]
 800057a:	9202      	str	r2, [sp, #8]
 800057c:	9301      	str	r3, [sp, #4]
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	2301      	movs	r3, #1
 8000584:	4602      	mov	r2, r0
 8000586:	4803      	ldr	r0, [pc, #12]	; (8000594 <i2c1_beriRegistre+0x58>)
 8000588:	f001 fb94 	bl	8001cb4 <HAL_I2C_Mem_Read>
}
 800058c:	bf00      	nop
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000180 	.word	0x20000180

08000598 <initAccelerometer>:

void initAccelerometer() {
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
    // inicializiraj pospeskometer
    i2c1_pisiRegister(0x19, 0x20, 0x27);  // zbudi pospeskometer in omogoci osi
 800059c:	2227      	movs	r2, #39	; 0x27
 800059e:	2120      	movs	r1, #32
 80005a0:	2019      	movs	r0, #25
 80005a2:	f7ff ffa9 	bl	80004f8 <i2c1_pisiRegister>
    i2c1_pisiRegister(0x19, 0x23, 0x88);  // nastavi posodobitev samo ko se prebere vrednost ter visoko locljivost
 80005a6:	2288      	movs	r2, #136	; 0x88
 80005a8:	2123      	movs	r1, #35	; 0x23
 80005aa:	2019      	movs	r0, #25
 80005ac:	f7ff ffa4 	bl	80004f8 <i2c1_pisiRegister>
}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f000 fe25 	bl	8001208 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005be:	f000 f87d 	bl	80006bc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005c2:	f000 f8e3 	bl	800078c <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_USB_DEVICE_Init();  // Initialize USB before FreeRTOS
 80005c6:	f00b fb31 	bl	800bc2c <MX_USB_DEVICE_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ca:	f000 f9c3 	bl	8000954 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005ce:	f000 f8fd 	bl	80007cc <MX_I2C1_Init>
  MX_I2S2_Init();
 80005d2:	f000 f92b 	bl	800082c <MX_I2S2_Init>
  MX_I2S3_Init();
 80005d6:	f000 f957 	bl	8000888 <MX_I2S3_Init>
  MX_SPI1_Init();
 80005da:	f000 f985 	bl	80008e8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  __HAL_I2C_ENABLE(&hi2c1);
 80005de:	4b28      	ldr	r3, [pc, #160]	; (8000680 <main+0xcc>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	681a      	ldr	r2, [r3, #0]
 80005e4:	4b26      	ldr	r3, [pc, #152]	; (8000680 <main+0xcc>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f042 0201 	orr.w	r2, r2, #1
 80005ec:	601a      	str	r2, [r3, #0]

  initAccelerometer();
 80005ee:	f7ff ffd3 	bl	8000598 <initAccelerometer>

  // Ustvari queue za interakcijo med opravili
  cdcTxQueue = xQueueCreate(10, sizeof(uint32_t)); // 10 slots for 32-bit packets
 80005f2:	2200      	movs	r2, #0
 80005f4:	2104      	movs	r1, #4
 80005f6:	200a      	movs	r0, #10
 80005f8:	f009 f824 	bl	8009644 <xQueueGenericCreate>
 80005fc:	4603      	mov	r3, r0
 80005fe:	4a21      	ldr	r2, [pc, #132]	; (8000684 <main+0xd0>)
 8000600:	6013      	str	r3, [r2, #0]
  if (cdcTxQueue == NULL) {
 8000602:	4b20      	ldr	r3, [pc, #128]	; (8000684 <main+0xd0>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d101      	bne.n	800060e <main+0x5a>
	  Error_Handler(); // Handle queue creation failure
 800060a:	f000 fb8c 	bl	8000d26 <Error_Handler>
  }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800060e:	f008 fd59 	bl	80090c4 <osKernelInitialize>
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

  xTaskCreate(Opravilo_pospeskometer, "Opravilo pospeskometer", 128, NULL, 1, &Opravilo_pospeskometerHandle);
 8000612:	4b1d      	ldr	r3, [pc, #116]	; (8000688 <main+0xd4>)
 8000614:	9301      	str	r3, [sp, #4]
 8000616:	2301      	movs	r3, #1
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	2300      	movs	r3, #0
 800061c:	2280      	movs	r2, #128	; 0x80
 800061e:	491b      	ldr	r1, [pc, #108]	; (800068c <main+0xd8>)
 8000620:	481b      	ldr	r0, [pc, #108]	; (8000690 <main+0xdc>)
 8000622:	f009 fcb2 	bl	8009f8a <xTaskCreate>
  xTaskCreate(Opravilo_LED, "Opravilo LED", 128, NULL, 2, &Opravilo_LEDHandle);
 8000626:	4b1b      	ldr	r3, [pc, #108]	; (8000694 <main+0xe0>)
 8000628:	9301      	str	r3, [sp, #4]
 800062a:	2302      	movs	r3, #2
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2300      	movs	r3, #0
 8000630:	2280      	movs	r2, #128	; 0x80
 8000632:	4919      	ldr	r1, [pc, #100]	; (8000698 <main+0xe4>)
 8000634:	4819      	ldr	r0, [pc, #100]	; (800069c <main+0xe8>)
 8000636:	f009 fca8 	bl	8009f8a <xTaskCreate>

  xTaskCreate(Opravilo_CDC_Receive, "CDC Receive", 512, NULL, 2, NULL);
 800063a:	2300      	movs	r3, #0
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	2302      	movs	r3, #2
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	2300      	movs	r3, #0
 8000644:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000648:	4915      	ldr	r1, [pc, #84]	; (80006a0 <main+0xec>)
 800064a:	4816      	ldr	r0, [pc, #88]	; (80006a4 <main+0xf0>)
 800064c:	f009 fc9d 	bl	8009f8a <xTaskCreate>
  xTaskCreate(Opravilo_CDC_Transmit, "CDC Send", 512, NULL, 2, NULL);
 8000650:	2300      	movs	r3, #0
 8000652:	9301      	str	r3, [sp, #4]
 8000654:	2302      	movs	r3, #2
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	2300      	movs	r3, #0
 800065a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800065e:	4912      	ldr	r1, [pc, #72]	; (80006a8 <main+0xf4>)
 8000660:	4812      	ldr	r0, [pc, #72]	; (80006ac <main+0xf8>)
 8000662:	f009 fc92 	bl	8009f8a <xTaskCreate>

  /* Start Scheduler */
  vTaskStartScheduler();
 8000666:	f009 fe1f 	bl	800a2a8 <vTaskStartScheduler>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800066a:	4a11      	ldr	r2, [pc, #68]	; (80006b0 <main+0xfc>)
 800066c:	2100      	movs	r1, #0
 800066e:	4811      	ldr	r0, [pc, #68]	; (80006b4 <main+0x100>)
 8000670:	f008 fd72 	bl	8009158 <osThreadNew>
 8000674:	4603      	mov	r3, r0
 8000676:	4a10      	ldr	r2, [pc, #64]	; (80006b8 <main+0x104>)
 8000678:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800067a:	f008 fd47 	bl	800910c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800067e:	e7fe      	b.n	800067e <main+0xca>
 8000680:	20000180 	.word	0x20000180
 8000684:	200002c8 	.word	0x200002c8
 8000688:	200002c4 	.word	0x200002c4
 800068c:	0800c900 	.word	0x0800c900
 8000690:	08000b75 	.word	0x08000b75
 8000694:	200002c0 	.word	0x200002c0
 8000698:	0800c918 	.word	0x0800c918
 800069c:	08000b09 	.word	0x08000b09
 80006a0:	0800c928 	.word	0x0800c928
 80006a4:	08000cad 	.word	0x08000cad
 80006a8:	0800c934 	.word	0x0800c934
 80006ac:	08000cbd 	.word	0x08000cbd
 80006b0:	0800c9a8 	.word	0x0800c9a8
 80006b4:	08000cf5 	.word	0x08000cf5
 80006b8:	200002bc 	.word	0x200002bc

080006bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b094      	sub	sp, #80	; 0x50
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	f107 0320 	add.w	r3, r7, #32
 80006c6:	2230      	movs	r2, #48	; 0x30
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f00c f83c 	bl	800c748 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e0:	2300      	movs	r3, #0
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	4b27      	ldr	r3, [pc, #156]	; (8000784 <SystemClock_Config+0xc8>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	4a26      	ldr	r2, [pc, #152]	; (8000784 <SystemClock_Config+0xc8>)
 80006ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ee:	6413      	str	r3, [r2, #64]	; 0x40
 80006f0:	4b24      	ldr	r3, [pc, #144]	; (8000784 <SystemClock_Config+0xc8>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006fc:	2300      	movs	r3, #0
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <SystemClock_Config+0xcc>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a20      	ldr	r2, [pc, #128]	; (8000788 <SystemClock_Config+0xcc>)
 8000706:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800070a:	6013      	str	r3, [r2, #0]
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <SystemClock_Config+0xcc>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000718:	2301      	movs	r3, #1
 800071a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800071c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000720:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000722:	2302      	movs	r3, #2
 8000724:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000726:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800072a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800072c:	2304      	movs	r3, #4
 800072e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000730:	23c0      	movs	r3, #192	; 0xc0
 8000732:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000734:	2304      	movs	r3, #4
 8000736:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000738:	2308      	movs	r3, #8
 800073a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073c:	f107 0320 	add.w	r3, r7, #32
 8000740:	4618      	mov	r0, r3
 8000742:	f003 ff57 	bl	80045f4 <HAL_RCC_OscConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800074c:	f000 faeb 	bl	8000d26 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000750:	230f      	movs	r3, #15
 8000752:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000754:	2302      	movs	r3, #2
 8000756:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000758:	2300      	movs	r3, #0
 800075a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800075c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000760:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000762:	2300      	movs	r3, #0
 8000764:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000766:	f107 030c 	add.w	r3, r7, #12
 800076a:	2103      	movs	r1, #3
 800076c:	4618      	mov	r0, r3
 800076e:	f004 f9b9 	bl	8004ae4 <HAL_RCC_ClockConfig>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000778:	f000 fad5 	bl	8000d26 <Error_Handler>
  }
}
 800077c:	bf00      	nop
 800077e:	3750      	adds	r7, #80	; 0x50
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40023800 	.word	0x40023800
 8000788:	40007000 	.word	0x40007000

0800078c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b086      	sub	sp, #24
 8000790:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000792:	463b      	mov	r3, r7
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]
 80007a0:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80007a2:	2301      	movs	r3, #1
 80007a4:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80007a6:	23c8      	movs	r3, #200	; 0xc8
 80007a8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80007aa:	2305      	movs	r3, #5
 80007ac:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80007ae:	2302      	movs	r3, #2
 80007b0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007b2:	463b      	mov	r3, r7
 80007b4:	4618      	mov	r0, r3
 80007b6:	f004 fbd3 	bl	8004f60 <HAL_RCCEx_PeriphCLKConfig>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80007c0:	f000 fab1 	bl	8000d26 <Error_Handler>
  }
}
 80007c4:	bf00      	nop
 80007c6:	3718      	adds	r7, #24
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007d0:	4b13      	ldr	r3, [pc, #76]	; (8000820 <MX_I2C1_Init+0x54>)
 80007d2:	4a14      	ldr	r2, [pc, #80]	; (8000824 <MX_I2C1_Init+0x58>)
 80007d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80007d6:	4b12      	ldr	r3, [pc, #72]	; (8000820 <MX_I2C1_Init+0x54>)
 80007d8:	4a13      	ldr	r2, [pc, #76]	; (8000828 <MX_I2C1_Init+0x5c>)
 80007da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 80007dc:	4b10      	ldr	r3, [pc, #64]	; (8000820 <MX_I2C1_Init+0x54>)
 80007de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007e2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007e4:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_I2C1_Init+0x54>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ea:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <MX_I2C1_Init+0x54>)
 80007ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <MX_I2C1_Init+0x54>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007f8:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_I2C1_Init+0x54>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <MX_I2C1_Init+0x54>)
 8000800:	2200      	movs	r2, #0
 8000802:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_I2C1_Init+0x54>)
 8000806:	2200      	movs	r2, #0
 8000808:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800080a:	4805      	ldr	r0, [pc, #20]	; (8000820 <MX_I2C1_Init+0x54>)
 800080c:	f001 f814 	bl	8001838 <HAL_I2C_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8000816:	f000 fa86 	bl	8000d26 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000180 	.word	0x20000180
 8000824:	40005400 	.word	0x40005400
 8000828:	00061a80 	.word	0x00061a80

0800082c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <MX_I2S2_Init+0x50>)
 8000832:	4a13      	ldr	r2, [pc, #76]	; (8000880 <MX_I2S2_Init+0x54>)
 8000834:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_I2S2_Init+0x50>)
 8000838:	f44f 7200 	mov.w	r2, #512	; 0x200
 800083c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800083e:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_I2S2_Init+0x50>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000844:	4b0d      	ldr	r3, [pc, #52]	; (800087c <MX_I2S2_Init+0x50>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800084a:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_I2S2_Init+0x50>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000850:	4b0a      	ldr	r3, [pc, #40]	; (800087c <MX_I2S2_Init+0x50>)
 8000852:	4a0c      	ldr	r2, [pc, #48]	; (8000884 <MX_I2S2_Init+0x58>)
 8000854:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_I2S2_Init+0x50>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800085c:	4b07      	ldr	r3, [pc, #28]	; (800087c <MX_I2S2_Init+0x50>)
 800085e:	2200      	movs	r2, #0
 8000860:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_I2S2_Init+0x50>)
 8000864:	2201      	movs	r2, #1
 8000866:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000868:	4804      	ldr	r0, [pc, #16]	; (800087c <MX_I2S2_Init+0x50>)
 800086a:	f001 ffa5 	bl	80027b8 <HAL_I2S_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000874:	f000 fa57 	bl	8000d26 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	200001d4 	.word	0x200001d4
 8000880:	40003800 	.word	0x40003800
 8000884:	00017700 	.word	0x00017700

08000888 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800088c:	4b13      	ldr	r3, [pc, #76]	; (80008dc <MX_I2S3_Init+0x54>)
 800088e:	4a14      	ldr	r2, [pc, #80]	; (80008e0 <MX_I2S3_Init+0x58>)
 8000890:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000892:	4b12      	ldr	r3, [pc, #72]	; (80008dc <MX_I2S3_Init+0x54>)
 8000894:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000898:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800089a:	4b10      	ldr	r3, [pc, #64]	; (80008dc <MX_I2S3_Init+0x54>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80008a0:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <MX_I2S3_Init+0x54>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80008a6:	4b0d      	ldr	r3, [pc, #52]	; (80008dc <MX_I2S3_Init+0x54>)
 80008a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008ac:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <MX_I2S3_Init+0x54>)
 80008b0:	4a0c      	ldr	r2, [pc, #48]	; (80008e4 <MX_I2S3_Init+0x5c>)
 80008b2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80008b4:	4b09      	ldr	r3, [pc, #36]	; (80008dc <MX_I2S3_Init+0x54>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80008ba:	4b08      	ldr	r3, [pc, #32]	; (80008dc <MX_I2S3_Init+0x54>)
 80008bc:	2200      	movs	r2, #0
 80008be:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <MX_I2S3_Init+0x54>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_I2S3_Init+0x54>)
 80008c8:	f001 ff76 	bl	80027b8 <HAL_I2S_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80008d2:	f000 fa28 	bl	8000d26 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	2000021c 	.word	0x2000021c
 80008e0:	40003c00 	.word	0x40003c00
 80008e4:	00017700 	.word	0x00017700

080008e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008ec:	4b17      	ldr	r3, [pc, #92]	; (800094c <MX_SPI1_Init+0x64>)
 80008ee:	4a18      	ldr	r2, [pc, #96]	; (8000950 <MX_SPI1_Init+0x68>)
 80008f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008f2:	4b16      	ldr	r3, [pc, #88]	; (800094c <MX_SPI1_Init+0x64>)
 80008f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008fa:	4b14      	ldr	r3, [pc, #80]	; (800094c <MX_SPI1_Init+0x64>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000900:	4b12      	ldr	r3, [pc, #72]	; (800094c <MX_SPI1_Init+0x64>)
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000906:	4b11      	ldr	r3, [pc, #68]	; (800094c <MX_SPI1_Init+0x64>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800090c:	4b0f      	ldr	r3, [pc, #60]	; (800094c <MX_SPI1_Init+0x64>)
 800090e:	2200      	movs	r2, #0
 8000910:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <MX_SPI1_Init+0x64>)
 8000914:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000918:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800091a:	4b0c      	ldr	r3, [pc, #48]	; (800094c <MX_SPI1_Init+0x64>)
 800091c:	2200      	movs	r2, #0
 800091e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000920:	4b0a      	ldr	r3, [pc, #40]	; (800094c <MX_SPI1_Init+0x64>)
 8000922:	2200      	movs	r2, #0
 8000924:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000926:	4b09      	ldr	r3, [pc, #36]	; (800094c <MX_SPI1_Init+0x64>)
 8000928:	2200      	movs	r2, #0
 800092a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800092c:	4b07      	ldr	r3, [pc, #28]	; (800094c <MX_SPI1_Init+0x64>)
 800092e:	2200      	movs	r2, #0
 8000930:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000932:	4b06      	ldr	r3, [pc, #24]	; (800094c <MX_SPI1_Init+0x64>)
 8000934:	220a      	movs	r2, #10
 8000936:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000938:	4804      	ldr	r0, [pc, #16]	; (800094c <MX_SPI1_Init+0x64>)
 800093a:	f004 fc61 	bl	8005200 <HAL_SPI_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000944:	f000 f9ef 	bl	8000d26 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000264 	.word	0x20000264
 8000950:	40013000 	.word	0x40013000

08000954 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08c      	sub	sp, #48	; 0x30
 8000958:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
 8000966:	60da      	str	r2, [r3, #12]
 8000968:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	61bb      	str	r3, [r7, #24]
 800096e:	4b61      	ldr	r3, [pc, #388]	; (8000af4 <MX_GPIO_Init+0x1a0>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a60      	ldr	r2, [pc, #384]	; (8000af4 <MX_GPIO_Init+0x1a0>)
 8000974:	f043 0310 	orr.w	r3, r3, #16
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b5e      	ldr	r3, [pc, #376]	; (8000af4 <MX_GPIO_Init+0x1a0>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0310 	and.w	r3, r3, #16
 8000982:	61bb      	str	r3, [r7, #24]
 8000984:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	617b      	str	r3, [r7, #20]
 800098a:	4b5a      	ldr	r3, [pc, #360]	; (8000af4 <MX_GPIO_Init+0x1a0>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a59      	ldr	r2, [pc, #356]	; (8000af4 <MX_GPIO_Init+0x1a0>)
 8000990:	f043 0304 	orr.w	r3, r3, #4
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b57      	ldr	r3, [pc, #348]	; (8000af4 <MX_GPIO_Init+0x1a0>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0304 	and.w	r3, r3, #4
 800099e:	617b      	str	r3, [r7, #20]
 80009a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	613b      	str	r3, [r7, #16]
 80009a6:	4b53      	ldr	r3, [pc, #332]	; (8000af4 <MX_GPIO_Init+0x1a0>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a52      	ldr	r2, [pc, #328]	; (8000af4 <MX_GPIO_Init+0x1a0>)
 80009ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b50      	ldr	r3, [pc, #320]	; (8000af4 <MX_GPIO_Init+0x1a0>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	4b4c      	ldr	r3, [pc, #304]	; (8000af4 <MX_GPIO_Init+0x1a0>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a4b      	ldr	r2, [pc, #300]	; (8000af4 <MX_GPIO_Init+0x1a0>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b49      	ldr	r3, [pc, #292]	; (8000af4 <MX_GPIO_Init+0x1a0>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	60bb      	str	r3, [r7, #8]
 80009de:	4b45      	ldr	r3, [pc, #276]	; (8000af4 <MX_GPIO_Init+0x1a0>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a44      	ldr	r2, [pc, #272]	; (8000af4 <MX_GPIO_Init+0x1a0>)
 80009e4:	f043 0302 	orr.w	r3, r3, #2
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b42      	ldr	r3, [pc, #264]	; (8000af4 <MX_GPIO_Init+0x1a0>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0302 	and.w	r3, r3, #2
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	4b3e      	ldr	r3, [pc, #248]	; (8000af4 <MX_GPIO_Init+0x1a0>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a3d      	ldr	r2, [pc, #244]	; (8000af4 <MX_GPIO_Init+0x1a0>)
 8000a00:	f043 0308 	orr.w	r3, r3, #8
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b3b      	ldr	r3, [pc, #236]	; (8000af4 <MX_GPIO_Init+0x1a0>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0308 	and.w	r3, r3, #8
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2108      	movs	r1, #8
 8000a16:	4838      	ldr	r0, [pc, #224]	; (8000af8 <MX_GPIO_Init+0x1a4>)
 8000a18:	f000 feda 	bl	80017d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	2101      	movs	r1, #1
 8000a20:	4836      	ldr	r0, [pc, #216]	; (8000afc <MX_GPIO_Init+0x1a8>)
 8000a22:	f000 fed5 	bl	80017d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a26:	2200      	movs	r2, #0
 8000a28:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000a2c:	4834      	ldr	r0, [pc, #208]	; (8000b00 <MX_GPIO_Init+0x1ac>)
 8000a2e:	f000 fecf 	bl	80017d0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000a32:	2304      	movs	r3, #4
 8000a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a36:	2300      	movs	r3, #0
 8000a38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000a3e:	f107 031c 	add.w	r3, r7, #28
 8000a42:	4619      	mov	r1, r3
 8000a44:	482c      	ldr	r0, [pc, #176]	; (8000af8 <MX_GPIO_Init+0x1a4>)
 8000a46:	f000 fd27 	bl	8001498 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a4a:	2308      	movs	r3, #8
 8000a4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a56:	2300      	movs	r3, #0
 8000a58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a5a:	f107 031c 	add.w	r3, r7, #28
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4825      	ldr	r0, [pc, #148]	; (8000af8 <MX_GPIO_Init+0x1a4>)
 8000a62:	f000 fd19 	bl	8001498 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000a66:	2332      	movs	r3, #50	; 0x32
 8000a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a6a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a74:	f107 031c 	add.w	r3, r7, #28
 8000a78:	4619      	mov	r1, r3
 8000a7a:	481f      	ldr	r0, [pc, #124]	; (8000af8 <MX_GPIO_Init+0x1a4>)
 8000a7c:	f000 fd0c 	bl	8001498 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a80:	2301      	movs	r3, #1
 8000a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a84:	2301      	movs	r3, #1
 8000a86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a90:	f107 031c 	add.w	r3, r7, #28
 8000a94:	4619      	mov	r1, r3
 8000a96:	4819      	ldr	r0, [pc, #100]	; (8000afc <MX_GPIO_Init+0x1a8>)
 8000a98:	f000 fcfe 	bl	8001498 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000aa0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000aa4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aaa:	f107 031c 	add.w	r3, r7, #28
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4814      	ldr	r0, [pc, #80]	; (8000b04 <MX_GPIO_Init+0x1b0>)
 8000ab2:	f000 fcf1 	bl	8001498 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000ab6:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000aba:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abc:	2301      	movs	r3, #1
 8000abe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ac8:	f107 031c 	add.w	r3, r7, #28
 8000acc:	4619      	mov	r1, r3
 8000ace:	480c      	ldr	r0, [pc, #48]	; (8000b00 <MX_GPIO_Init+0x1ac>)
 8000ad0:	f000 fce2 	bl	8001498 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ad4:	2320      	movs	r3, #32
 8000ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ae0:	f107 031c 	add.w	r3, r7, #28
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4806      	ldr	r0, [pc, #24]	; (8000b00 <MX_GPIO_Init+0x1ac>)
 8000ae8:	f000 fcd6 	bl	8001498 <HAL_GPIO_Init>

}
 8000aec:	bf00      	nop
 8000aee:	3730      	adds	r7, #48	; 0x30
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40021000 	.word	0x40021000
 8000afc:	40020800 	.word	0x40020800
 8000b00:	40020c00 	.word	0x40020c00
 8000b04:	40020000 	.word	0x40020000

08000b08 <Opravilo_LED>:


/* USER CODE BEGIN 4 */

void Opravilo_LED(void *argument)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
    char *msg;
    while (1) {
        // Prejmi sporočilo iz vrste
        if (xQueueReceive(cdcRxQueue, &msg, portMAX_DELAY) == pdPASS) {
 8000b10:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <Opravilo_LED+0x5c>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f107 010c 	add.w	r1, r7, #12
 8000b18:	f04f 32ff 	mov.w	r2, #4294967295
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f008 ff89 	bl	8009a34 <xQueueReceive>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d1f3      	bne.n	8000b10 <Opravilo_LED+0x8>
            // Preveri, ali je sporočilo "ON" ali "OFF"
            if (strcmp(msg, "ON") == 0) {
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	490f      	ldr	r1, [pc, #60]	; (8000b68 <Opravilo_LED+0x60>)
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff fb57 	bl	80001e0 <strcmp>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d106      	bne.n	8000b46 <Opravilo_LED+0x3e>
                HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);  // Prizgi LED
 8000b38:	2201      	movs	r2, #1
 8000b3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b3e:	480b      	ldr	r0, [pc, #44]	; (8000b6c <Opravilo_LED+0x64>)
 8000b40:	f000 fe46 	bl	80017d0 <HAL_GPIO_WritePin>
 8000b44:	e7e4      	b.n	8000b10 <Opravilo_LED+0x8>
            } else if (strcmp(msg, "OFF") == 0) {
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	4909      	ldr	r1, [pc, #36]	; (8000b70 <Opravilo_LED+0x68>)
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff fb48 	bl	80001e0 <strcmp>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d1dc      	bne.n	8000b10 <Opravilo_LED+0x8>
                HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);  // Ugasi LED
 8000b56:	2200      	movs	r2, #0
 8000b58:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b5c:	4803      	ldr	r0, [pc, #12]	; (8000b6c <Opravilo_LED+0x64>)
 8000b5e:	f000 fe37 	bl	80017d0 <HAL_GPIO_WritePin>
        if (xQueueReceive(cdcRxQueue, &msg, portMAX_DELAY) == pdPASS) {
 8000b62:	e7d5      	b.n	8000b10 <Opravilo_LED+0x8>
 8000b64:	200002cc 	.word	0x200002cc
 8000b68:	0800c940 	.word	0x0800c940
 8000b6c:	40020c00 	.word	0x40020c00
 8000b70:	0800c944 	.word	0x0800c944

08000b74 <Opravilo_pospeskometer>:
// S prisitkom na gumb PB1 se aktivira oz. onemogoci delovanje pospeskometra (toggle)
// Kadar je omogoceno posiljanje podatkov sveti zelena LED
// Modra led nakazuje, ce se podatki posiljajo in se se niso prebrali na PC-ju
// Podatki se posljejo ob spremembi stanja
void Opravilo_pospeskometer(void *argument)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
	uint8_t gumb_stisnjen = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	75fb      	strb	r3, [r7, #23]

	bool prvi_pritisk = false;			// CDC ON
 8000b80:	2300      	movs	r3, #0
 8000b82:	75bb      	strb	r3, [r7, #22]
	bool drugi_pritisk = true;			// CDC OFF
 8000b84:	2301      	movs	r3, #1
 8000b86:	757b      	strb	r3, [r7, #21]

	int16_t meritev;					// Hrani meritev iz pospeskometra v vsaki iteraciji opravila

	int16_t paket[2];					// hrani paket, ki se bo ob vsaki spremembi smeri voznje poslal na PC
	paket[0] = 0xaaab;					// glava za zaznamek zacetek paketa
 8000b88:	f64a 23ab 	movw	r3, #43691	; 0xaaab
 8000b8c:	81bb      	strh	r3, [r7, #12]
	paket[1] = 0xcccf;					// privzeto se "premika naprej"
 8000b8e:	f64c 43cf 	movw	r3, #52431	; 0xcccf
 8000b92:	81fb      	strh	r3, [r7, #14]

	int16_t prejsnji_paket = 0x00000;	// hrani prejsnji paket, da se lahko preverja sprememba smeri voznje
 8000b94:	2300      	movs	r3, #0
 8000b96:	827b      	strh	r3, [r7, #18]

	// Neskoncna zanka, kejr se zaznavajo pritiski na gumb, izvajajo meritve senzorja ter klicejo opravila za posiljanje na PC
	while(1)
	{
		// Preverimo ce je gumb pritisnjen in ce gumb pred tem se ni bil stisnjen
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET && gumb_stisnjen == 0)
 8000b98:	2101      	movs	r1, #1
 8000b9a:	4841      	ldr	r0, [pc, #260]	; (8000ca0 <Opravilo_pospeskometer+0x12c>)
 8000b9c:	f000 fe00 	bl	80017a0 <HAL_GPIO_ReadPin>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d113      	bne.n	8000bce <Opravilo_pospeskometer+0x5a>
 8000ba6:	7dfb      	ldrb	r3, [r7, #23]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d110      	bne.n	8000bce <Opravilo_pospeskometer+0x5a>
		{
			// Gumb je sedaj stisnjen
			gumb_stisnjen = 1;
 8000bac:	2301      	movs	r3, #1
 8000bae:	75fb      	strb	r3, [r7, #23]

			if(prvi_pritisk == true){
 8000bb0:	7dbb      	ldrb	r3, [r7, #22]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d004      	beq.n	8000bc0 <Opravilo_pospeskometer+0x4c>
				drugi_pritisk = true;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	757b      	strb	r3, [r7, #21]
				prvi_pritisk = false;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	75bb      	strb	r3, [r7, #22]
 8000bbe:	e006      	b.n	8000bce <Opravilo_pospeskometer+0x5a>
			}
			else if(drugi_pritisk == true){
 8000bc0:	7d7b      	ldrb	r3, [r7, #21]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d003      	beq.n	8000bce <Opravilo_pospeskometer+0x5a>
				prvi_pritisk = true;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	75bb      	strb	r3, [r7, #22]
				drugi_pritisk = false;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	757b      	strb	r3, [r7, #21]
		}

		// Debounncing logika
		// preverimo ce je bil gumb spuscen
		// ce je bil potem sele nato dovolimo ponovni zamenjavi stanj
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET && gumb_stisnjen == 1) {
 8000bce:	2101      	movs	r1, #1
 8000bd0:	4833      	ldr	r0, [pc, #204]	; (8000ca0 <Opravilo_pospeskometer+0x12c>)
 8000bd2:	f000 fde5 	bl	80017a0 <HAL_GPIO_ReadPin>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d104      	bne.n	8000be6 <Opravilo_pospeskometer+0x72>
 8000bdc:	7dfb      	ldrb	r3, [r7, #23]
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d101      	bne.n	8000be6 <Opravilo_pospeskometer+0x72>
			// Gumb sedaj ni stisnjen
			gumb_stisnjen = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	75fb      	strb	r3, [r7, #23]
		}

		i2c1_beriRegistre(0x19, 0x28, (uint8_t*)&meritev, 2); // Izvedemo meritev Y-osi na pospeskometru
 8000be6:	f107 0210 	add.w	r2, r7, #16
 8000bea:	2302      	movs	r3, #2
 8000bec:	2128      	movs	r1, #40	; 0x28
 8000bee:	2019      	movs	r0, #25
 8000bf0:	f7ff fca4 	bl	800053c <i2c1_beriRegistre>

		// Aktiviraj/deaktiviraj CDC - LD12 (zelena LED) na ploscici nakazuje stanje CDC prenosa
		if(prvi_pritisk == true){
 8000bf4:	7dbb      	ldrb	r3, [r7, #22]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d048      	beq.n	8000c8c <Opravilo_pospeskometer+0x118>
			// CDC prenos omogocen

			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);		// Prenos preko CDC bo omogocen, zato prizgemo zeleno LED
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c00:	4828      	ldr	r0, [pc, #160]	; (8000ca4 <Opravilo_pospeskometer+0x130>)
 8000c02:	f000 fde5 	bl	80017d0 <HAL_GPIO_WritePin>

			if(meritev <= -500){
 8000c06:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000c0a:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 8000c0e:	dc09      	bgt.n	8000c24 <Opravilo_pospeskometer+0xb0>
				paket[1] = 0xfffc;
 8000c10:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8000c14:	81fb      	strh	r3, [r7, #14]
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);	// Prizgi modro? LED
 8000c16:	2201      	movs	r2, #1
 8000c18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c1c:	4821      	ldr	r0, [pc, #132]	; (8000ca4 <Opravilo_pospeskometer+0x130>)
 8000c1e:	f000 fdd7 	bl	80017d0 <HAL_GPIO_WritePin>
 8000c22:	e00e      	b.n	8000c42 <Opravilo_pospeskometer+0xce>

			}
			else if(meritev >= 1500){
 8000c24:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000c28:	f240 52db 	movw	r2, #1499	; 0x5db
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	dd08      	ble.n	8000c42 <Opravilo_pospeskometer+0xce>
				paket[1] = 0xcccf;
 8000c30:	f64c 43cf 	movw	r3, #52431	; 0xcccf
 8000c34:	81fb      	strh	r3, [r7, #14]
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);	// Ugasni modro? LED
 8000c36:	2200      	movs	r2, #0
 8000c38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c3c:	4819      	ldr	r0, [pc, #100]	; (8000ca4 <Opravilo_pospeskometer+0x130>)
 8000c3e:	f000 fdc7 	bl	80017d0 <HAL_GPIO_WritePin>
			}

			if (prejsnji_paket != paket[1]){
 8000c42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c46:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d01b      	beq.n	8000c86 <Opravilo_pospeskometer+0x112>

				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000c4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c52:	4814      	ldr	r0, [pc, #80]	; (8000ca4 <Opravilo_pospeskometer+0x130>)
 8000c54:	f000 fdd5 	bl	8001802 <HAL_GPIO_TogglePin>
				// Poslji paket v queue
				if (xQueueSend(cdcTxQueue, &paket, 0) == pdPASS) {
 8000c58:	4b13      	ldr	r3, [pc, #76]	; (8000ca8 <Opravilo_pospeskometer+0x134>)
 8000c5a:	6818      	ldr	r0, [r3, #0]
 8000c5c:	f107 010c 	add.w	r1, r7, #12
 8000c60:	2300      	movs	r3, #0
 8000c62:	2200      	movs	r2, #0
 8000c64:	f008 fd4c 	bl	8009700 <xQueueGenericSend>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d104      	bne.n	8000c78 <Opravilo_pospeskometer+0x104>
					HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000c6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c72:	480c      	ldr	r0, [pc, #48]	; (8000ca4 <Opravilo_pospeskometer+0x130>)
 8000c74:	f000 fdc5 	bl	8001802 <HAL_GPIO_TogglePin>
				}
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000c78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c7c:	4809      	ldr	r0, [pc, #36]	; (8000ca4 <Opravilo_pospeskometer+0x130>)
 8000c7e:	f000 fdc0 	bl	8001802 <HAL_GPIO_TogglePin>

				prejsnji_paket = paket[1];
 8000c82:	89fb      	ldrh	r3, [r7, #14]
 8000c84:	827b      	strh	r3, [r7, #18]
			}

			vTaskDelay(pdMS_TO_TICKS(10));
 8000c86:	200a      	movs	r0, #10
 8000c88:	f009 fada 	bl	800a240 <vTaskDelay>
		}

		if(drugi_pritisk == true){
 8000c8c:	7d7b      	ldrb	r3, [r7, #21]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d082      	beq.n	8000b98 <Opravilo_pospeskometer+0x24>
			// CDC prenos onemogocen
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);		// Prenos preko CDC ne bo omogocen, zato ugansemo zeleno LED
 8000c92:	2200      	movs	r2, #0
 8000c94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c98:	4802      	ldr	r0, [pc, #8]	; (8000ca4 <Opravilo_pospeskometer+0x130>)
 8000c9a:	f000 fd99 	bl	80017d0 <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET && gumb_stisnjen == 0)
 8000c9e:	e77b      	b.n	8000b98 <Opravilo_pospeskometer+0x24>
 8000ca0:	40020000 	.word	0x40020000
 8000ca4:	40020c00 	.word	0x40020c00
 8000ca8:	200002c8 	.word	0x200002c8

08000cac <Opravilo_CDC_Receive>:
		}
	}
}

void Opravilo_CDC_Receive(void *argument)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
//       if (len > 0) {
//           buffer[len] = '\0';  // Zaključi niz
//           xQueueSend(cdcRxQueue, &buffer, portMAX_DELAY);
//       }

        vTaskDelay(pdMS_TO_TICKS(10)); // Majhna zakasnitev
 8000cb4:	200a      	movs	r0, #10
 8000cb6:	f009 fac3 	bl	800a240 <vTaskDelay>
 8000cba:	e7fb      	b.n	8000cb4 <Opravilo_CDC_Receive+0x8>

08000cbc <Opravilo_CDC_Transmit>:
    }
}

void Opravilo_CDC_Transmit(void *argument) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
	uint32_t txPacket; // Buffer za paket, kis e bo posiljal

	while (1) {
		// Pocakamo, da paket prispe v queue
		if (xQueueReceive(cdcTxQueue, &txPacket, portMAX_DELAY) == pdPASS) {
 8000cc4:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <Opravilo_CDC_Transmit+0x34>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f107 010c 	add.w	r1, r7, #12
 8000ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f008 feaf 	bl	8009a34 <xQueueReceive>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d105      	bne.n	8000ce8 <Opravilo_CDC_Transmit+0x2c>
			// Poslji paket preko USB
			CDC_Transmit_FS((uint8_t *)&txPacket, sizeof(txPacket));
 8000cdc:	f107 030c 	add.w	r3, r7, #12
 8000ce0:	2104      	movs	r1, #4
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f00b f89c 	bl	800be20 <CDC_Transmit_FS>
		}

		vTaskDelay(pdMS_TO_TICKS(10)); // Delay za task switching
 8000ce8:	200a      	movs	r0, #10
 8000cea:	f009 faa9 	bl	800a240 <vTaskDelay>
		if (xQueueReceive(cdcTxQueue, &txPacket, portMAX_DELAY) == pdPASS) {
 8000cee:	e7e9      	b.n	8000cc4 <Opravilo_CDC_Transmit+0x8>
 8000cf0:	200002c8 	.word	0x200002c8

08000cf4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000cfc:	f00a ff96 	bl	800bc2c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d00:	2001      	movs	r0, #1
 8000d02:	f008 fabb 	bl	800927c <osDelay>
 8000d06:	e7fb      	b.n	8000d00 <StartDefaultTask+0xc>

08000d08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d18:	d101      	bne.n	8000d1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d1a:	f000 fa97 	bl	800124c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d2a:	b672      	cpsid	i
}
 8000d2c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d2e:	e7fe      	b.n	8000d2e <Error_Handler+0x8>

08000d30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	607b      	str	r3, [r7, #4]
 8000d3a:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <HAL_MspInit+0x54>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3e:	4a11      	ldr	r2, [pc, #68]	; (8000d84 <HAL_MspInit+0x54>)
 8000d40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d44:	6453      	str	r3, [r2, #68]	; 0x44
 8000d46:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <HAL_MspInit+0x54>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d4e:	607b      	str	r3, [r7, #4]
 8000d50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	603b      	str	r3, [r7, #0]
 8000d56:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <HAL_MspInit+0x54>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	4a0a      	ldr	r2, [pc, #40]	; (8000d84 <HAL_MspInit+0x54>)
 8000d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d60:	6413      	str	r3, [r2, #64]	; 0x40
 8000d62:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <HAL_MspInit+0x54>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	603b      	str	r3, [r7, #0]
 8000d6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	210f      	movs	r1, #15
 8000d72:	f06f 0001 	mvn.w	r0, #1
 8000d76:	f000 fb65 	bl	8001444 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40023800 	.word	0x40023800

08000d88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08a      	sub	sp, #40	; 0x28
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a19      	ldr	r2, [pc, #100]	; (8000e0c <HAL_I2C_MspInit+0x84>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d12c      	bne.n	8000e04 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	613b      	str	r3, [r7, #16]
 8000dae:	4b18      	ldr	r3, [pc, #96]	; (8000e10 <HAL_I2C_MspInit+0x88>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4a17      	ldr	r2, [pc, #92]	; (8000e10 <HAL_I2C_MspInit+0x88>)
 8000db4:	f043 0302 	orr.w	r3, r3, #2
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <HAL_I2C_MspInit+0x88>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	613b      	str	r3, [r7, #16]
 8000dc4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000dc6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dcc:	2312      	movs	r3, #18
 8000dce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dd8:	2304      	movs	r3, #4
 8000dda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	4619      	mov	r1, r3
 8000de2:	480c      	ldr	r0, [pc, #48]	; (8000e14 <HAL_I2C_MspInit+0x8c>)
 8000de4:	f000 fb58 	bl	8001498 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000de8:	2300      	movs	r3, #0
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <HAL_I2C_MspInit+0x88>)
 8000dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df0:	4a07      	ldr	r2, [pc, #28]	; (8000e10 <HAL_I2C_MspInit+0x88>)
 8000df2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000df6:	6413      	str	r3, [r2, #64]	; 0x40
 8000df8:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <HAL_I2C_MspInit+0x88>)
 8000dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e04:	bf00      	nop
 8000e06:	3728      	adds	r7, #40	; 0x28
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40005400 	.word	0x40005400
 8000e10:	40023800 	.word	0x40023800
 8000e14:	40020400 	.word	0x40020400

08000e18 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08e      	sub	sp, #56	; 0x38
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a59      	ldr	r2, [pc, #356]	; (8000f9c <HAL_I2S_MspInit+0x184>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d15b      	bne.n	8000ef2 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	623b      	str	r3, [r7, #32]
 8000e3e:	4b58      	ldr	r3, [pc, #352]	; (8000fa0 <HAL_I2S_MspInit+0x188>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e42:	4a57      	ldr	r2, [pc, #348]	; (8000fa0 <HAL_I2S_MspInit+0x188>)
 8000e44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e48:	6413      	str	r3, [r2, #64]	; 0x40
 8000e4a:	4b55      	ldr	r3, [pc, #340]	; (8000fa0 <HAL_I2S_MspInit+0x188>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e52:	623b      	str	r3, [r7, #32]
 8000e54:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	61fb      	str	r3, [r7, #28]
 8000e5a:	4b51      	ldr	r3, [pc, #324]	; (8000fa0 <HAL_I2S_MspInit+0x188>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a50      	ldr	r2, [pc, #320]	; (8000fa0 <HAL_I2S_MspInit+0x188>)
 8000e60:	f043 0304 	orr.w	r3, r3, #4
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b4e      	ldr	r3, [pc, #312]	; (8000fa0 <HAL_I2S_MspInit+0x188>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f003 0304 	and.w	r3, r3, #4
 8000e6e:	61fb      	str	r3, [r7, #28]
 8000e70:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	61bb      	str	r3, [r7, #24]
 8000e76:	4b4a      	ldr	r3, [pc, #296]	; (8000fa0 <HAL_I2S_MspInit+0x188>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a49      	ldr	r2, [pc, #292]	; (8000fa0 <HAL_I2S_MspInit+0x188>)
 8000e7c:	f043 0302 	orr.w	r3, r3, #2
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b47      	ldr	r3, [pc, #284]	; (8000fa0 <HAL_I2S_MspInit+0x188>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	61bb      	str	r3, [r7, #24]
 8000e8c:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e8e:	2304      	movs	r3, #4
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e92:	2302      	movs	r3, #2
 8000e94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000e9e:	2306      	movs	r3, #6
 8000ea0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	483e      	ldr	r0, [pc, #248]	; (8000fa4 <HAL_I2S_MspInit+0x18c>)
 8000eaa:	f000 faf5 	bl	8001498 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000eae:	2308      	movs	r3, #8
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ebe:	2305      	movs	r3, #5
 8000ec0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000ec2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4836      	ldr	r0, [pc, #216]	; (8000fa4 <HAL_I2S_MspInit+0x18c>)
 8000eca:	f000 fae5 	bl	8001498 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000ece:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ed2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000edc:	2300      	movs	r3, #0
 8000ede:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ee0:	2305      	movs	r3, #5
 8000ee2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee8:	4619      	mov	r1, r3
 8000eea:	482f      	ldr	r0, [pc, #188]	; (8000fa8 <HAL_I2S_MspInit+0x190>)
 8000eec:	f000 fad4 	bl	8001498 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ef0:	e04f      	b.n	8000f92 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a2d      	ldr	r2, [pc, #180]	; (8000fac <HAL_I2S_MspInit+0x194>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d14a      	bne.n	8000f92 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
 8000f00:	4b27      	ldr	r3, [pc, #156]	; (8000fa0 <HAL_I2S_MspInit+0x188>)
 8000f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f04:	4a26      	ldr	r2, [pc, #152]	; (8000fa0 <HAL_I2S_MspInit+0x188>)
 8000f06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0c:	4b24      	ldr	r3, [pc, #144]	; (8000fa0 <HAL_I2S_MspInit+0x188>)
 8000f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f14:	617b      	str	r3, [r7, #20]
 8000f16:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f18:	2300      	movs	r3, #0
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	4b20      	ldr	r3, [pc, #128]	; (8000fa0 <HAL_I2S_MspInit+0x188>)
 8000f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f20:	4a1f      	ldr	r2, [pc, #124]	; (8000fa0 <HAL_I2S_MspInit+0x188>)
 8000f22:	f043 0301 	orr.w	r3, r3, #1
 8000f26:	6313      	str	r3, [r2, #48]	; 0x30
 8000f28:	4b1d      	ldr	r3, [pc, #116]	; (8000fa0 <HAL_I2S_MspInit+0x188>)
 8000f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2c:	f003 0301 	and.w	r3, r3, #1
 8000f30:	613b      	str	r3, [r7, #16]
 8000f32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f34:	2300      	movs	r3, #0
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	4b19      	ldr	r3, [pc, #100]	; (8000fa0 <HAL_I2S_MspInit+0x188>)
 8000f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3c:	4a18      	ldr	r2, [pc, #96]	; (8000fa0 <HAL_I2S_MspInit+0x188>)
 8000f3e:	f043 0304 	orr.w	r3, r3, #4
 8000f42:	6313      	str	r3, [r2, #48]	; 0x30
 8000f44:	4b16      	ldr	r3, [pc, #88]	; (8000fa0 <HAL_I2S_MspInit+0x188>)
 8000f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f48:	f003 0304 	and.w	r3, r3, #4
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000f50:	2310      	movs	r3, #16
 8000f52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f54:	2302      	movs	r3, #2
 8000f56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f60:	2306      	movs	r3, #6
 8000f62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000f64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4811      	ldr	r0, [pc, #68]	; (8000fb0 <HAL_I2S_MspInit+0x198>)
 8000f6c:	f000 fa94 	bl	8001498 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000f70:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f76:	2302      	movs	r3, #2
 8000f78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f82:	2306      	movs	r3, #6
 8000f84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <HAL_I2S_MspInit+0x18c>)
 8000f8e:	f000 fa83 	bl	8001498 <HAL_GPIO_Init>
}
 8000f92:	bf00      	nop
 8000f94:	3738      	adds	r7, #56	; 0x38
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40003800 	.word	0x40003800
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40020800 	.word	0x40020800
 8000fa8:	40020400 	.word	0x40020400
 8000fac:	40003c00 	.word	0x40003c00
 8000fb0:	40020000 	.word	0x40020000

08000fb4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	; 0x28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a19      	ldr	r2, [pc, #100]	; (8001038 <HAL_SPI_MspInit+0x84>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d12b      	bne.n	800102e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
 8000fda:	4b18      	ldr	r3, [pc, #96]	; (800103c <HAL_SPI_MspInit+0x88>)
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fde:	4a17      	ldr	r2, [pc, #92]	; (800103c <HAL_SPI_MspInit+0x88>)
 8000fe0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fe4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fe6:	4b15      	ldr	r3, [pc, #84]	; (800103c <HAL_SPI_MspInit+0x88>)
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	4b11      	ldr	r3, [pc, #68]	; (800103c <HAL_SPI_MspInit+0x88>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	4a10      	ldr	r2, [pc, #64]	; (800103c <HAL_SPI_MspInit+0x88>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	6313      	str	r3, [r2, #48]	; 0x30
 8001002:	4b0e      	ldr	r3, [pc, #56]	; (800103c <HAL_SPI_MspInit+0x88>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800100e:	23e0      	movs	r3, #224	; 0xe0
 8001010:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001012:	2302      	movs	r3, #2
 8001014:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101a:	2303      	movs	r3, #3
 800101c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800101e:	2305      	movs	r3, #5
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001022:	f107 0314 	add.w	r3, r7, #20
 8001026:	4619      	mov	r1, r3
 8001028:	4805      	ldr	r0, [pc, #20]	; (8001040 <HAL_SPI_MspInit+0x8c>)
 800102a:	f000 fa35 	bl	8001498 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800102e:	bf00      	nop
 8001030:	3728      	adds	r7, #40	; 0x28
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40013000 	.word	0x40013000
 800103c:	40023800 	.word	0x40023800
 8001040:	40020000 	.word	0x40020000

08001044 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08e      	sub	sp, #56	; 0x38
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800104c:	2300      	movs	r3, #0
 800104e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001050:	2300      	movs	r3, #0
 8001052:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001054:	2300      	movs	r3, #0
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	4b34      	ldr	r3, [pc, #208]	; (800112c <HAL_InitTick+0xe8>)
 800105a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105c:	4a33      	ldr	r2, [pc, #204]	; (800112c <HAL_InitTick+0xe8>)
 800105e:	f043 0301 	orr.w	r3, r3, #1
 8001062:	6413      	str	r3, [r2, #64]	; 0x40
 8001064:	4b31      	ldr	r3, [pc, #196]	; (800112c <HAL_InitTick+0xe8>)
 8001066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001068:	f003 0301 	and.w	r3, r3, #1
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001070:	f107 0210 	add.w	r2, r7, #16
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	4611      	mov	r1, r2
 800107a:	4618      	mov	r0, r3
 800107c:	f003 ff3e 	bl	8004efc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001080:	6a3b      	ldr	r3, [r7, #32]
 8001082:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001086:	2b00      	cmp	r3, #0
 8001088:	d103      	bne.n	8001092 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800108a:	f003 ff23 	bl	8004ed4 <HAL_RCC_GetPCLK1Freq>
 800108e:	6378      	str	r0, [r7, #52]	; 0x34
 8001090:	e004      	b.n	800109c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001092:	f003 ff1f 	bl	8004ed4 <HAL_RCC_GetPCLK1Freq>
 8001096:	4603      	mov	r3, r0
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800109c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800109e:	4a24      	ldr	r2, [pc, #144]	; (8001130 <HAL_InitTick+0xec>)
 80010a0:	fba2 2303 	umull	r2, r3, r2, r3
 80010a4:	0c9b      	lsrs	r3, r3, #18
 80010a6:	3b01      	subs	r3, #1
 80010a8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80010aa:	4b22      	ldr	r3, [pc, #136]	; (8001134 <HAL_InitTick+0xf0>)
 80010ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80010b2:	4b20      	ldr	r3, [pc, #128]	; (8001134 <HAL_InitTick+0xf0>)
 80010b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010b8:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80010ba:	4a1e      	ldr	r2, [pc, #120]	; (8001134 <HAL_InitTick+0xf0>)
 80010bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010be:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80010c0:	4b1c      	ldr	r3, [pc, #112]	; (8001134 <HAL_InitTick+0xf0>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c6:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <HAL_InitTick+0xf0>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010cc:	4b19      	ldr	r3, [pc, #100]	; (8001134 <HAL_InitTick+0xf0>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80010d2:	4818      	ldr	r0, [pc, #96]	; (8001134 <HAL_InitTick+0xf0>)
 80010d4:	f004 f91d 	bl	8005312 <HAL_TIM_Base_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80010de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d11b      	bne.n	800111e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80010e6:	4813      	ldr	r0, [pc, #76]	; (8001134 <HAL_InitTick+0xf0>)
 80010e8:	f004 f96c 	bl	80053c4 <HAL_TIM_Base_Start_IT>
 80010ec:	4603      	mov	r3, r0
 80010ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80010f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d111      	bne.n	800111e <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010fa:	201c      	movs	r0, #28
 80010fc:	f000 f9be 	bl	800147c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b0f      	cmp	r3, #15
 8001104:	d808      	bhi.n	8001118 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001106:	2200      	movs	r2, #0
 8001108:	6879      	ldr	r1, [r7, #4]
 800110a:	201c      	movs	r0, #28
 800110c:	f000 f99a 	bl	8001444 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001110:	4a09      	ldr	r2, [pc, #36]	; (8001138 <HAL_InitTick+0xf4>)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6013      	str	r3, [r2, #0]
 8001116:	e002      	b.n	800111e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800111e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001122:	4618      	mov	r0, r3
 8001124:	3738      	adds	r7, #56	; 0x38
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40023800 	.word	0x40023800
 8001130:	431bde83 	.word	0x431bde83
 8001134:	200002d0 	.word	0x200002d0
 8001138:	20000004 	.word	0x20000004

0800113c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001140:	e7fe      	b.n	8001140 <NMI_Handler+0x4>

08001142 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001146:	e7fe      	b.n	8001146 <HardFault_Handler+0x4>

08001148 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800114c:	e7fe      	b.n	800114c <MemManage_Handler+0x4>

0800114e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800114e:	b480      	push	{r7}
 8001150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001152:	e7fe      	b.n	8001152 <BusFault_Handler+0x4>

08001154 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001158:	e7fe      	b.n	8001158 <UsageFault_Handler+0x4>

0800115a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800116c:	4802      	ldr	r0, [pc, #8]	; (8001178 <TIM2_IRQHandler+0x10>)
 800116e:	f004 f98b 	bl	8005488 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	200002d0 	.word	0x200002d0

0800117c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001180:	4802      	ldr	r0, [pc, #8]	; (800118c <OTG_FS_IRQHandler+0x10>)
 8001182:	f002 f909 	bl	8003398 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20006290 	.word	0x20006290

08001190 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <SystemInit+0x20>)
 8001196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800119a:	4a05      	ldr	r2, [pc, #20]	; (80011b0 <SystemInit+0x20>)
 800119c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80011b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011b8:	480d      	ldr	r0, [pc, #52]	; (80011f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011ba:	490e      	ldr	r1, [pc, #56]	; (80011f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011bc:	4a0e      	ldr	r2, [pc, #56]	; (80011f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c0:	e002      	b.n	80011c8 <LoopCopyDataInit>

080011c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011c6:	3304      	adds	r3, #4

080011c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011cc:	d3f9      	bcc.n	80011c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ce:	4a0b      	ldr	r2, [pc, #44]	; (80011fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011d0:	4c0b      	ldr	r4, [pc, #44]	; (8001200 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d4:	e001      	b.n	80011da <LoopFillZerobss>

080011d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d8:	3204      	adds	r2, #4

080011da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011dc:	d3fb      	bcc.n	80011d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011de:	f7ff ffd7 	bl	8001190 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011e2:	f00b fa7d 	bl	800c6e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011e6:	f7ff f9e5 	bl	80005b4 <main>
  bx  lr    
 80011ea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80011ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011f4:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 80011f8:	0800ca54 	.word	0x0800ca54
  ldr r2, =_sbss
 80011fc:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8001200:	200069c4 	.word	0x200069c4

08001204 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001204:	e7fe      	b.n	8001204 <ADC_IRQHandler>
	...

08001208 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800120c:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <HAL_Init+0x40>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a0d      	ldr	r2, [pc, #52]	; (8001248 <HAL_Init+0x40>)
 8001212:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001216:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001218:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <HAL_Init+0x40>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a0a      	ldr	r2, [pc, #40]	; (8001248 <HAL_Init+0x40>)
 800121e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001222:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001224:	4b08      	ldr	r3, [pc, #32]	; (8001248 <HAL_Init+0x40>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a07      	ldr	r2, [pc, #28]	; (8001248 <HAL_Init+0x40>)
 800122a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800122e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001230:	2003      	movs	r0, #3
 8001232:	f000 f8fc 	bl	800142e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001236:	200f      	movs	r0, #15
 8001238:	f7ff ff04 	bl	8001044 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800123c:	f7ff fd78 	bl	8000d30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40023c00 	.word	0x40023c00

0800124c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <HAL_IncTick+0x20>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	4b06      	ldr	r3, [pc, #24]	; (8001270 <HAL_IncTick+0x24>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4413      	add	r3, r2
 800125c:	4a04      	ldr	r2, [pc, #16]	; (8001270 <HAL_IncTick+0x24>)
 800125e:	6013      	str	r3, [r2, #0]
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	20000008 	.word	0x20000008
 8001270:	20000318 	.word	0x20000318

08001274 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  return uwTick;
 8001278:	4b03      	ldr	r3, [pc, #12]	; (8001288 <HAL_GetTick+0x14>)
 800127a:	681b      	ldr	r3, [r3, #0]
}
 800127c:	4618      	mov	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	20000318 	.word	0x20000318

0800128c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001294:	f7ff ffee 	bl	8001274 <HAL_GetTick>
 8001298:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a4:	d005      	beq.n	80012b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012a6:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <HAL_Delay+0x44>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	461a      	mov	r2, r3
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4413      	add	r3, r2
 80012b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012b2:	bf00      	nop
 80012b4:	f7ff ffde 	bl	8001274 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	68fa      	ldr	r2, [r7, #12]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d8f7      	bhi.n	80012b4 <HAL_Delay+0x28>
  {
  }
}
 80012c4:	bf00      	nop
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000008 	.word	0x20000008

080012d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e4:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <__NVIC_SetPriorityGrouping+0x44>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012f0:	4013      	ands	r3, r2
 80012f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001304:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001306:	4a04      	ldr	r2, [pc, #16]	; (8001318 <__NVIC_SetPriorityGrouping+0x44>)
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	60d3      	str	r3, [r2, #12]
}
 800130c:	bf00      	nop
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001320:	4b04      	ldr	r3, [pc, #16]	; (8001334 <__NVIC_GetPriorityGrouping+0x18>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	0a1b      	lsrs	r3, r3, #8
 8001326:	f003 0307 	and.w	r3, r3, #7
}
 800132a:	4618      	mov	r0, r3
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	2b00      	cmp	r3, #0
 8001348:	db0b      	blt.n	8001362 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	f003 021f 	and.w	r2, r3, #31
 8001350:	4907      	ldr	r1, [pc, #28]	; (8001370 <__NVIC_EnableIRQ+0x38>)
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	095b      	lsrs	r3, r3, #5
 8001358:	2001      	movs	r0, #1
 800135a:	fa00 f202 	lsl.w	r2, r0, r2
 800135e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000e100 	.word	0xe000e100

08001374 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	6039      	str	r1, [r7, #0]
 800137e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001384:	2b00      	cmp	r3, #0
 8001386:	db0a      	blt.n	800139e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	b2da      	uxtb	r2, r3
 800138c:	490c      	ldr	r1, [pc, #48]	; (80013c0 <__NVIC_SetPriority+0x4c>)
 800138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001392:	0112      	lsls	r2, r2, #4
 8001394:	b2d2      	uxtb	r2, r2
 8001396:	440b      	add	r3, r1
 8001398:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800139c:	e00a      	b.n	80013b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	4908      	ldr	r1, [pc, #32]	; (80013c4 <__NVIC_SetPriority+0x50>)
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	f003 030f 	and.w	r3, r3, #15
 80013aa:	3b04      	subs	r3, #4
 80013ac:	0112      	lsls	r2, r2, #4
 80013ae:	b2d2      	uxtb	r2, r2
 80013b0:	440b      	add	r3, r1
 80013b2:	761a      	strb	r2, [r3, #24]
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	e000e100 	.word	0xe000e100
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b089      	sub	sp, #36	; 0x24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	f1c3 0307 	rsb	r3, r3, #7
 80013e2:	2b04      	cmp	r3, #4
 80013e4:	bf28      	it	cs
 80013e6:	2304      	movcs	r3, #4
 80013e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3304      	adds	r3, #4
 80013ee:	2b06      	cmp	r3, #6
 80013f0:	d902      	bls.n	80013f8 <NVIC_EncodePriority+0x30>
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3b03      	subs	r3, #3
 80013f6:	e000      	b.n	80013fa <NVIC_EncodePriority+0x32>
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43da      	mvns	r2, r3
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	401a      	ands	r2, r3
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001410:	f04f 31ff 	mov.w	r1, #4294967295
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	fa01 f303 	lsl.w	r3, r1, r3
 800141a:	43d9      	mvns	r1, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001420:	4313      	orrs	r3, r2
         );
}
 8001422:	4618      	mov	r0, r3
 8001424:	3724      	adds	r7, #36	; 0x24
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b082      	sub	sp, #8
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff ff4c 	bl	80012d4 <__NVIC_SetPriorityGrouping>
}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
 8001450:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001456:	f7ff ff61 	bl	800131c <__NVIC_GetPriorityGrouping>
 800145a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	68b9      	ldr	r1, [r7, #8]
 8001460:	6978      	ldr	r0, [r7, #20]
 8001462:	f7ff ffb1 	bl	80013c8 <NVIC_EncodePriority>
 8001466:	4602      	mov	r2, r0
 8001468:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800146c:	4611      	mov	r1, r2
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff ff80 	bl	8001374 <__NVIC_SetPriority>
}
 8001474:	bf00      	nop
 8001476:	3718      	adds	r7, #24
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff ff54 	bl	8001338 <__NVIC_EnableIRQ>
}
 8001490:	bf00      	nop
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001498:	b480      	push	{r7}
 800149a:	b089      	sub	sp, #36	; 0x24
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ae:	2300      	movs	r3, #0
 80014b0:	61fb      	str	r3, [r7, #28]
 80014b2:	e159      	b.n	8001768 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014b4:	2201      	movs	r2, #1
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	697a      	ldr	r2, [r7, #20]
 80014c4:	4013      	ands	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	f040 8148 	bne.w	8001762 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f003 0303 	and.w	r3, r3, #3
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d005      	beq.n	80014ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d130      	bne.n	800154c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	2203      	movs	r2, #3
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43db      	mvns	r3, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4013      	ands	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	68da      	ldr	r2, [r3, #12]
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4313      	orrs	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001520:	2201      	movs	r2, #1
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4013      	ands	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	091b      	lsrs	r3, r3, #4
 8001536:	f003 0201 	and.w	r2, r3, #1
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4313      	orrs	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f003 0303 	and.w	r3, r3, #3
 8001554:	2b03      	cmp	r3, #3
 8001556:	d017      	beq.n	8001588 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	2203      	movs	r2, #3
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	43db      	mvns	r3, r3
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4013      	ands	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4313      	orrs	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f003 0303 	and.w	r3, r3, #3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d123      	bne.n	80015dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	08da      	lsrs	r2, r3, #3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3208      	adds	r2, #8
 800159c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	f003 0307 	and.w	r3, r3, #7
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	220f      	movs	r2, #15
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4013      	ands	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	691a      	ldr	r2, [r3, #16]
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	08da      	lsrs	r2, r3, #3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	3208      	adds	r2, #8
 80015d6:	69b9      	ldr	r1, [r7, #24]
 80015d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	2203      	movs	r2, #3
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	43db      	mvns	r3, r3
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4013      	ands	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f003 0203 	and.w	r2, r3, #3
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	4313      	orrs	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001618:	2b00      	cmp	r3, #0
 800161a:	f000 80a2 	beq.w	8001762 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	4b57      	ldr	r3, [pc, #348]	; (8001780 <HAL_GPIO_Init+0x2e8>)
 8001624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001626:	4a56      	ldr	r2, [pc, #344]	; (8001780 <HAL_GPIO_Init+0x2e8>)
 8001628:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800162c:	6453      	str	r3, [r2, #68]	; 0x44
 800162e:	4b54      	ldr	r3, [pc, #336]	; (8001780 <HAL_GPIO_Init+0x2e8>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800163a:	4a52      	ldr	r2, [pc, #328]	; (8001784 <HAL_GPIO_Init+0x2ec>)
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	089b      	lsrs	r3, r3, #2
 8001640:	3302      	adds	r3, #2
 8001642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001646:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	f003 0303 	and.w	r3, r3, #3
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	220f      	movs	r2, #15
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43db      	mvns	r3, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4013      	ands	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a49      	ldr	r2, [pc, #292]	; (8001788 <HAL_GPIO_Init+0x2f0>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d019      	beq.n	800169a <HAL_GPIO_Init+0x202>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a48      	ldr	r2, [pc, #288]	; (800178c <HAL_GPIO_Init+0x2f4>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d013      	beq.n	8001696 <HAL_GPIO_Init+0x1fe>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a47      	ldr	r2, [pc, #284]	; (8001790 <HAL_GPIO_Init+0x2f8>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d00d      	beq.n	8001692 <HAL_GPIO_Init+0x1fa>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a46      	ldr	r2, [pc, #280]	; (8001794 <HAL_GPIO_Init+0x2fc>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d007      	beq.n	800168e <HAL_GPIO_Init+0x1f6>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a45      	ldr	r2, [pc, #276]	; (8001798 <HAL_GPIO_Init+0x300>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d101      	bne.n	800168a <HAL_GPIO_Init+0x1f2>
 8001686:	2304      	movs	r3, #4
 8001688:	e008      	b.n	800169c <HAL_GPIO_Init+0x204>
 800168a:	2307      	movs	r3, #7
 800168c:	e006      	b.n	800169c <HAL_GPIO_Init+0x204>
 800168e:	2303      	movs	r3, #3
 8001690:	e004      	b.n	800169c <HAL_GPIO_Init+0x204>
 8001692:	2302      	movs	r3, #2
 8001694:	e002      	b.n	800169c <HAL_GPIO_Init+0x204>
 8001696:	2301      	movs	r3, #1
 8001698:	e000      	b.n	800169c <HAL_GPIO_Init+0x204>
 800169a:	2300      	movs	r3, #0
 800169c:	69fa      	ldr	r2, [r7, #28]
 800169e:	f002 0203 	and.w	r2, r2, #3
 80016a2:	0092      	lsls	r2, r2, #2
 80016a4:	4093      	lsls	r3, r2
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016ac:	4935      	ldr	r1, [pc, #212]	; (8001784 <HAL_GPIO_Init+0x2ec>)
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	089b      	lsrs	r3, r3, #2
 80016b2:	3302      	adds	r3, #2
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016ba:	4b38      	ldr	r3, [pc, #224]	; (800179c <HAL_GPIO_Init+0x304>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	43db      	mvns	r3, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4013      	ands	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	4313      	orrs	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016de:	4a2f      	ldr	r2, [pc, #188]	; (800179c <HAL_GPIO_Init+0x304>)
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016e4:	4b2d      	ldr	r3, [pc, #180]	; (800179c <HAL_GPIO_Init+0x304>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	43db      	mvns	r3, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4013      	ands	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d003      	beq.n	8001708 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	4313      	orrs	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001708:	4a24      	ldr	r2, [pc, #144]	; (800179c <HAL_GPIO_Init+0x304>)
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800170e:	4b23      	ldr	r3, [pc, #140]	; (800179c <HAL_GPIO_Init+0x304>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	43db      	mvns	r3, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4013      	ands	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	4313      	orrs	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001732:	4a1a      	ldr	r2, [pc, #104]	; (800179c <HAL_GPIO_Init+0x304>)
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001738:	4b18      	ldr	r3, [pc, #96]	; (800179c <HAL_GPIO_Init+0x304>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	43db      	mvns	r3, r3
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4013      	ands	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	4313      	orrs	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800175c:	4a0f      	ldr	r2, [pc, #60]	; (800179c <HAL_GPIO_Init+0x304>)
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	3301      	adds	r3, #1
 8001766:	61fb      	str	r3, [r7, #28]
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	2b0f      	cmp	r3, #15
 800176c:	f67f aea2 	bls.w	80014b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001770:	bf00      	nop
 8001772:	bf00      	nop
 8001774:	3724      	adds	r7, #36	; 0x24
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	40023800 	.word	0x40023800
 8001784:	40013800 	.word	0x40013800
 8001788:	40020000 	.word	0x40020000
 800178c:	40020400 	.word	0x40020400
 8001790:	40020800 	.word	0x40020800
 8001794:	40020c00 	.word	0x40020c00
 8001798:	40021000 	.word	0x40021000
 800179c:	40013c00 	.word	0x40013c00

080017a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	460b      	mov	r3, r1
 80017aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	691a      	ldr	r2, [r3, #16]
 80017b0:	887b      	ldrh	r3, [r7, #2]
 80017b2:	4013      	ands	r3, r2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d002      	beq.n	80017be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017b8:	2301      	movs	r3, #1
 80017ba:	73fb      	strb	r3, [r7, #15]
 80017bc:	e001      	b.n	80017c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017be:	2300      	movs	r3, #0
 80017c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	460b      	mov	r3, r1
 80017da:	807b      	strh	r3, [r7, #2]
 80017dc:	4613      	mov	r3, r2
 80017de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017e0:	787b      	ldrb	r3, [r7, #1]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d003      	beq.n	80017ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017e6:	887a      	ldrh	r2, [r7, #2]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017ec:	e003      	b.n	80017f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017ee:	887b      	ldrh	r3, [r7, #2]
 80017f0:	041a      	lsls	r2, r3, #16
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	619a      	str	r2, [r3, #24]
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001802:	b480      	push	{r7}
 8001804:	b085      	sub	sp, #20
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
 800180a:	460b      	mov	r3, r1
 800180c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001814:	887a      	ldrh	r2, [r7, #2]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	4013      	ands	r3, r2
 800181a:	041a      	lsls	r2, r3, #16
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	43d9      	mvns	r1, r3
 8001820:	887b      	ldrh	r3, [r7, #2]
 8001822:	400b      	ands	r3, r1
 8001824:	431a      	orrs	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	619a      	str	r2, [r3, #24]
}
 800182a:	bf00      	nop
 800182c:	3714      	adds	r7, #20
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
	...

08001838 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e12b      	b.n	8001aa2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2b00      	cmp	r3, #0
 8001854:	d106      	bne.n	8001864 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7ff fa92 	bl	8000d88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2224      	movs	r2, #36	; 0x24
 8001868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f022 0201 	bic.w	r2, r2, #1
 800187a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800188a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800189a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800189c:	f003 fb1a 	bl	8004ed4 <HAL_RCC_GetPCLK1Freq>
 80018a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	4a81      	ldr	r2, [pc, #516]	; (8001aac <HAL_I2C_Init+0x274>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d807      	bhi.n	80018bc <HAL_I2C_Init+0x84>
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	4a80      	ldr	r2, [pc, #512]	; (8001ab0 <HAL_I2C_Init+0x278>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	bf94      	ite	ls
 80018b4:	2301      	movls	r3, #1
 80018b6:	2300      	movhi	r3, #0
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	e006      	b.n	80018ca <HAL_I2C_Init+0x92>
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	4a7d      	ldr	r2, [pc, #500]	; (8001ab4 <HAL_I2C_Init+0x27c>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	bf94      	ite	ls
 80018c4:	2301      	movls	r3, #1
 80018c6:	2300      	movhi	r3, #0
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e0e7      	b.n	8001aa2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	4a78      	ldr	r2, [pc, #480]	; (8001ab8 <HAL_I2C_Init+0x280>)
 80018d6:	fba2 2303 	umull	r2, r3, r2, r3
 80018da:	0c9b      	lsrs	r3, r3, #18
 80018dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	68ba      	ldr	r2, [r7, #8]
 80018ee:	430a      	orrs	r2, r1
 80018f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	6a1b      	ldr	r3, [r3, #32]
 80018f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	4a6a      	ldr	r2, [pc, #424]	; (8001aac <HAL_I2C_Init+0x274>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d802      	bhi.n	800190c <HAL_I2C_Init+0xd4>
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	3301      	adds	r3, #1
 800190a:	e009      	b.n	8001920 <HAL_I2C_Init+0xe8>
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001912:	fb02 f303 	mul.w	r3, r2, r3
 8001916:	4a69      	ldr	r2, [pc, #420]	; (8001abc <HAL_I2C_Init+0x284>)
 8001918:	fba2 2303 	umull	r2, r3, r2, r3
 800191c:	099b      	lsrs	r3, r3, #6
 800191e:	3301      	adds	r3, #1
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	6812      	ldr	r2, [r2, #0]
 8001924:	430b      	orrs	r3, r1
 8001926:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	69db      	ldr	r3, [r3, #28]
 800192e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001932:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	495c      	ldr	r1, [pc, #368]	; (8001aac <HAL_I2C_Init+0x274>)
 800193c:	428b      	cmp	r3, r1
 800193e:	d819      	bhi.n	8001974 <HAL_I2C_Init+0x13c>
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	1e59      	subs	r1, r3, #1
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	fbb1 f3f3 	udiv	r3, r1, r3
 800194e:	1c59      	adds	r1, r3, #1
 8001950:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001954:	400b      	ands	r3, r1
 8001956:	2b00      	cmp	r3, #0
 8001958:	d00a      	beq.n	8001970 <HAL_I2C_Init+0x138>
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	1e59      	subs	r1, r3, #1
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	fbb1 f3f3 	udiv	r3, r1, r3
 8001968:	3301      	adds	r3, #1
 800196a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800196e:	e051      	b.n	8001a14 <HAL_I2C_Init+0x1dc>
 8001970:	2304      	movs	r3, #4
 8001972:	e04f      	b.n	8001a14 <HAL_I2C_Init+0x1dc>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d111      	bne.n	80019a0 <HAL_I2C_Init+0x168>
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	1e58      	subs	r0, r3, #1
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6859      	ldr	r1, [r3, #4]
 8001984:	460b      	mov	r3, r1
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	440b      	add	r3, r1
 800198a:	fbb0 f3f3 	udiv	r3, r0, r3
 800198e:	3301      	adds	r3, #1
 8001990:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001994:	2b00      	cmp	r3, #0
 8001996:	bf0c      	ite	eq
 8001998:	2301      	moveq	r3, #1
 800199a:	2300      	movne	r3, #0
 800199c:	b2db      	uxtb	r3, r3
 800199e:	e012      	b.n	80019c6 <HAL_I2C_Init+0x18e>
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	1e58      	subs	r0, r3, #1
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6859      	ldr	r1, [r3, #4]
 80019a8:	460b      	mov	r3, r1
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	440b      	add	r3, r1
 80019ae:	0099      	lsls	r1, r3, #2
 80019b0:	440b      	add	r3, r1
 80019b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80019b6:	3301      	adds	r3, #1
 80019b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019bc:	2b00      	cmp	r3, #0
 80019be:	bf0c      	ite	eq
 80019c0:	2301      	moveq	r3, #1
 80019c2:	2300      	movne	r3, #0
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <HAL_I2C_Init+0x196>
 80019ca:	2301      	movs	r3, #1
 80019cc:	e022      	b.n	8001a14 <HAL_I2C_Init+0x1dc>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10e      	bne.n	80019f4 <HAL_I2C_Init+0x1bc>
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	1e58      	subs	r0, r3, #1
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6859      	ldr	r1, [r3, #4]
 80019de:	460b      	mov	r3, r1
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	440b      	add	r3, r1
 80019e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80019e8:	3301      	adds	r3, #1
 80019ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019f2:	e00f      	b.n	8001a14 <HAL_I2C_Init+0x1dc>
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	1e58      	subs	r0, r3, #1
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6859      	ldr	r1, [r3, #4]
 80019fc:	460b      	mov	r3, r1
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	440b      	add	r3, r1
 8001a02:	0099      	lsls	r1, r3, #2
 8001a04:	440b      	add	r3, r1
 8001a06:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a14:	6879      	ldr	r1, [r7, #4]
 8001a16:	6809      	ldr	r1, [r1, #0]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	69da      	ldr	r2, [r3, #28]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a1b      	ldr	r3, [r3, #32]
 8001a2e:	431a      	orrs	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	430a      	orrs	r2, r1
 8001a36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001a42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	6911      	ldr	r1, [r2, #16]
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	68d2      	ldr	r2, [r2, #12]
 8001a4e:	4311      	orrs	r1, r2
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	6812      	ldr	r2, [r2, #0]
 8001a54:	430b      	orrs	r3, r1
 8001a56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	695a      	ldr	r2, [r3, #20]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	431a      	orrs	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	430a      	orrs	r2, r1
 8001a72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f042 0201 	orr.w	r2, r2, #1
 8001a82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2220      	movs	r2, #32
 8001a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	000186a0 	.word	0x000186a0
 8001ab0:	001e847f 	.word	0x001e847f
 8001ab4:	003d08ff 	.word	0x003d08ff
 8001ab8:	431bde83 	.word	0x431bde83
 8001abc:	10624dd3 	.word	0x10624dd3

08001ac0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b088      	sub	sp, #32
 8001ac4:	af02      	add	r7, sp, #8
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	4608      	mov	r0, r1
 8001aca:	4611      	mov	r1, r2
 8001acc:	461a      	mov	r2, r3
 8001ace:	4603      	mov	r3, r0
 8001ad0:	817b      	strh	r3, [r7, #10]
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	813b      	strh	r3, [r7, #8]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ada:	f7ff fbcb 	bl	8001274 <HAL_GetTick>
 8001ade:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	2b20      	cmp	r3, #32
 8001aea:	f040 80d9 	bne.w	8001ca0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	9300      	str	r3, [sp, #0]
 8001af2:	2319      	movs	r3, #25
 8001af4:	2201      	movs	r2, #1
 8001af6:	496d      	ldr	r1, [pc, #436]	; (8001cac <HAL_I2C_Mem_Write+0x1ec>)
 8001af8:	68f8      	ldr	r0, [r7, #12]
 8001afa:	f000 fc7f 	bl	80023fc <I2C_WaitOnFlagUntilTimeout>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001b04:	2302      	movs	r3, #2
 8001b06:	e0cc      	b.n	8001ca2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d101      	bne.n	8001b16 <HAL_I2C_Mem_Write+0x56>
 8001b12:	2302      	movs	r3, #2
 8001b14:	e0c5      	b.n	8001ca2 <HAL_I2C_Mem_Write+0x1e2>
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d007      	beq.n	8001b3c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f042 0201 	orr.w	r2, r2, #1
 8001b3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b4a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2221      	movs	r2, #33	; 0x21
 8001b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2240      	movs	r2, #64	; 0x40
 8001b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6a3a      	ldr	r2, [r7, #32]
 8001b66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4a4d      	ldr	r2, [pc, #308]	; (8001cb0 <HAL_I2C_Mem_Write+0x1f0>)
 8001b7c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b7e:	88f8      	ldrh	r0, [r7, #6]
 8001b80:	893a      	ldrh	r2, [r7, #8]
 8001b82:	8979      	ldrh	r1, [r7, #10]
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	9301      	str	r3, [sp, #4]
 8001b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	68f8      	ldr	r0, [r7, #12]
 8001b90:	f000 fab6 	bl	8002100 <I2C_RequestMemoryWrite>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d052      	beq.n	8001c40 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e081      	b.n	8001ca2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b9e:	697a      	ldr	r2, [r7, #20]
 8001ba0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ba2:	68f8      	ldr	r0, [r7, #12]
 8001ba4:	f000 fd00 	bl	80025a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d00d      	beq.n	8001bca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	d107      	bne.n	8001bc6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bc4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e06b      	b.n	8001ca2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bce:	781a      	ldrb	r2, [r3, #0]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bda:	1c5a      	adds	r2, r3, #1
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001be4:	3b01      	subs	r3, #1
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	695b      	ldr	r3, [r3, #20]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	d11b      	bne.n	8001c40 <HAL_I2C_Mem_Write+0x180>
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d017      	beq.n	8001c40 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c14:	781a      	ldrb	r2, [r3, #0]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c20:	1c5a      	adds	r2, r3, #1
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1aa      	bne.n	8001b9e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c48:	697a      	ldr	r2, [r7, #20]
 8001c4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c4c:	68f8      	ldr	r0, [r7, #12]
 8001c4e:	f000 fcec 	bl	800262a <I2C_WaitOnBTFFlagUntilTimeout>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d00d      	beq.n	8001c74 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5c:	2b04      	cmp	r3, #4
 8001c5e:	d107      	bne.n	8001c70 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c6e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e016      	b.n	8001ca2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2220      	movs	r2, #32
 8001c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	e000      	b.n	8001ca2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001ca0:	2302      	movs	r3, #2
  }
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3718      	adds	r7, #24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	00100002 	.word	0x00100002
 8001cb0:	ffff0000 	.word	0xffff0000

08001cb4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08c      	sub	sp, #48	; 0x30
 8001cb8:	af02      	add	r7, sp, #8
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	4608      	mov	r0, r1
 8001cbe:	4611      	mov	r1, r2
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	817b      	strh	r3, [r7, #10]
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	813b      	strh	r3, [r7, #8]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001cce:	f7ff fad1 	bl	8001274 <HAL_GetTick>
 8001cd2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b20      	cmp	r3, #32
 8001cde:	f040 8208 	bne.w	80020f2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	9300      	str	r3, [sp, #0]
 8001ce6:	2319      	movs	r3, #25
 8001ce8:	2201      	movs	r2, #1
 8001cea:	497b      	ldr	r1, [pc, #492]	; (8001ed8 <HAL_I2C_Mem_Read+0x224>)
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f000 fb85 	bl	80023fc <I2C_WaitOnFlagUntilTimeout>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	e1fb      	b.n	80020f4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d101      	bne.n	8001d0a <HAL_I2C_Mem_Read+0x56>
 8001d06:	2302      	movs	r3, #2
 8001d08:	e1f4      	b.n	80020f4 <HAL_I2C_Mem_Read+0x440>
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d007      	beq.n	8001d30 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f042 0201 	orr.w	r2, r2, #1
 8001d2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2222      	movs	r2, #34	; 0x22
 8001d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2240      	movs	r2, #64	; 0x40
 8001d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2200      	movs	r2, #0
 8001d54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001d60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	4a5b      	ldr	r2, [pc, #364]	; (8001edc <HAL_I2C_Mem_Read+0x228>)
 8001d70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d72:	88f8      	ldrh	r0, [r7, #6]
 8001d74:	893a      	ldrh	r2, [r7, #8]
 8001d76:	8979      	ldrh	r1, [r7, #10]
 8001d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7a:	9301      	str	r3, [sp, #4]
 8001d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d7e:	9300      	str	r3, [sp, #0]
 8001d80:	4603      	mov	r3, r0
 8001d82:	68f8      	ldr	r0, [r7, #12]
 8001d84:	f000 fa52 	bl	800222c <I2C_RequestMemoryRead>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e1b0      	b.n	80020f4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d113      	bne.n	8001dc2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	623b      	str	r3, [r7, #32]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	695b      	ldr	r3, [r3, #20]
 8001da4:	623b      	str	r3, [r7, #32]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	623b      	str	r3, [r7, #32]
 8001dae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	e184      	b.n	80020cc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d11b      	bne.n	8001e02 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dd8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61fb      	str	r3, [r7, #28]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	695b      	ldr	r3, [r3, #20]
 8001de4:	61fb      	str	r3, [r7, #28]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	61fb      	str	r3, [r7, #28]
 8001dee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	e164      	b.n	80020cc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d11b      	bne.n	8001e42 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e18:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61bb      	str	r3, [r7, #24]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	695b      	ldr	r3, [r3, #20]
 8001e34:	61bb      	str	r3, [r7, #24]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	61bb      	str	r3, [r7, #24]
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	e144      	b.n	80020cc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e42:	2300      	movs	r3, #0
 8001e44:	617b      	str	r3, [r7, #20]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	617b      	str	r3, [r7, #20]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	617b      	str	r3, [r7, #20]
 8001e56:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001e58:	e138      	b.n	80020cc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e5e:	2b03      	cmp	r3, #3
 8001e60:	f200 80f1 	bhi.w	8002046 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d123      	bne.n	8001eb4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f000 fc1b 	bl	80026ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e139      	b.n	80020f4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	691a      	ldr	r2, [r3, #16]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8a:	b2d2      	uxtb	r2, r2
 8001e8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e92:	1c5a      	adds	r2, r3, #1
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001eb2:	e10b      	b.n	80020cc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d14e      	bne.n	8001f5a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	4906      	ldr	r1, [pc, #24]	; (8001ee0 <HAL_I2C_Mem_Read+0x22c>)
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	f000 fa98 	bl	80023fc <I2C_WaitOnFlagUntilTimeout>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d008      	beq.n	8001ee4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e10e      	b.n	80020f4 <HAL_I2C_Mem_Read+0x440>
 8001ed6:	bf00      	nop
 8001ed8:	00100002 	.word	0x00100002
 8001edc:	ffff0000 	.word	0xffff0000
 8001ee0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ef2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	691a      	ldr	r2, [r3, #16]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efe:	b2d2      	uxtb	r2, r2
 8001f00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f06:	1c5a      	adds	r2, r3, #1
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f10:	3b01      	subs	r3, #1
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	691a      	ldr	r2, [r3, #16]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f30:	b2d2      	uxtb	r2, r2
 8001f32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f38:	1c5a      	adds	r2, r3, #1
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f42:	3b01      	subs	r3, #1
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	3b01      	subs	r3, #1
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f58:	e0b8      	b.n	80020cc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f60:	2200      	movs	r2, #0
 8001f62:	4966      	ldr	r1, [pc, #408]	; (80020fc <HAL_I2C_Mem_Read+0x448>)
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	f000 fa49 	bl	80023fc <I2C_WaitOnFlagUntilTimeout>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e0bf      	b.n	80020f4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	691a      	ldr	r2, [r3, #16]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8e:	b2d2      	uxtb	r2, r2
 8001f90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f96:	1c5a      	adds	r2, r3, #1
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	494f      	ldr	r1, [pc, #316]	; (80020fc <HAL_I2C_Mem_Read+0x448>)
 8001fc0:	68f8      	ldr	r0, [r7, #12]
 8001fc2:	f000 fa1b 	bl	80023fc <I2C_WaitOnFlagUntilTimeout>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e091      	b.n	80020f4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	691a      	ldr	r2, [r3, #16]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff2:	1c5a      	adds	r2, r3, #1
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002008:	b29b      	uxth	r3, r3
 800200a:	3b01      	subs	r3, #1
 800200c:	b29a      	uxth	r2, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	691a      	ldr	r2, [r3, #16]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201c:	b2d2      	uxtb	r2, r2
 800201e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002024:	1c5a      	adds	r2, r3, #1
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800202e:	3b01      	subs	r3, #1
 8002030:	b29a      	uxth	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800203a:	b29b      	uxth	r3, r3
 800203c:	3b01      	subs	r3, #1
 800203e:	b29a      	uxth	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002044:	e042      	b.n	80020cc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002048:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f000 fb2e 	bl	80026ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e04c      	b.n	80020f4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	691a      	ldr	r2, [r3, #16]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002064:	b2d2      	uxtb	r2, r2
 8002066:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206c:	1c5a      	adds	r2, r3, #1
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002076:	3b01      	subs	r3, #1
 8002078:	b29a      	uxth	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002082:	b29b      	uxth	r3, r3
 8002084:	3b01      	subs	r3, #1
 8002086:	b29a      	uxth	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	f003 0304 	and.w	r3, r3, #4
 8002096:	2b04      	cmp	r3, #4
 8002098:	d118      	bne.n	80020cc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	691a      	ldr	r2, [r3, #16]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a4:	b2d2      	uxtb	r2, r2
 80020a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ac:	1c5a      	adds	r2, r3, #1
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b6:	3b01      	subs	r3, #1
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	3b01      	subs	r3, #1
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f47f aec2 	bne.w	8001e5a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2220      	movs	r2, #32
 80020da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80020ee:	2300      	movs	r3, #0
 80020f0:	e000      	b.n	80020f4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80020f2:	2302      	movs	r3, #2
  }
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3728      	adds	r7, #40	; 0x28
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	00010004 	.word	0x00010004

08002100 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b088      	sub	sp, #32
 8002104:	af02      	add	r7, sp, #8
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	4608      	mov	r0, r1
 800210a:	4611      	mov	r1, r2
 800210c:	461a      	mov	r2, r3
 800210e:	4603      	mov	r3, r0
 8002110:	817b      	strh	r3, [r7, #10]
 8002112:	460b      	mov	r3, r1
 8002114:	813b      	strh	r3, [r7, #8]
 8002116:	4613      	mov	r3, r2
 8002118:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002128:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	6a3b      	ldr	r3, [r7, #32]
 8002130:	2200      	movs	r2, #0
 8002132:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	f000 f960 	bl	80023fc <I2C_WaitOnFlagUntilTimeout>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00d      	beq.n	800215e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800214c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002150:	d103      	bne.n	800215a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002158:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e05f      	b.n	800221e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800215e:	897b      	ldrh	r3, [r7, #10]
 8002160:	b2db      	uxtb	r3, r3
 8002162:	461a      	mov	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800216c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002170:	6a3a      	ldr	r2, [r7, #32]
 8002172:	492d      	ldr	r1, [pc, #180]	; (8002228 <I2C_RequestMemoryWrite+0x128>)
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f000 f998 	bl	80024aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e04c      	b.n	800221e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002184:	2300      	movs	r3, #0
 8002186:	617b      	str	r3, [r7, #20]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	617b      	str	r3, [r7, #20]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	617b      	str	r3, [r7, #20]
 8002198:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800219a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800219c:	6a39      	ldr	r1, [r7, #32]
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	f000 fa02 	bl	80025a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00d      	beq.n	80021c6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	2b04      	cmp	r3, #4
 80021b0:	d107      	bne.n	80021c2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e02b      	b.n	800221e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021c6:	88fb      	ldrh	r3, [r7, #6]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d105      	bne.n	80021d8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80021cc:	893b      	ldrh	r3, [r7, #8]
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	611a      	str	r2, [r3, #16]
 80021d6:	e021      	b.n	800221c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80021d8:	893b      	ldrh	r3, [r7, #8]
 80021da:	0a1b      	lsrs	r3, r3, #8
 80021dc:	b29b      	uxth	r3, r3
 80021de:	b2da      	uxtb	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021e8:	6a39      	ldr	r1, [r7, #32]
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f000 f9dc 	bl	80025a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00d      	beq.n	8002212 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	2b04      	cmp	r3, #4
 80021fc:	d107      	bne.n	800220e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800220c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e005      	b.n	800221e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002212:	893b      	ldrh	r3, [r7, #8]
 8002214:	b2da      	uxtb	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3718      	adds	r7, #24
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	00010002 	.word	0x00010002

0800222c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b088      	sub	sp, #32
 8002230:	af02      	add	r7, sp, #8
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	4608      	mov	r0, r1
 8002236:	4611      	mov	r1, r2
 8002238:	461a      	mov	r2, r3
 800223a:	4603      	mov	r3, r0
 800223c:	817b      	strh	r3, [r7, #10]
 800223e:	460b      	mov	r3, r1
 8002240:	813b      	strh	r3, [r7, #8]
 8002242:	4613      	mov	r3, r2
 8002244:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002254:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002264:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	6a3b      	ldr	r3, [r7, #32]
 800226c:	2200      	movs	r2, #0
 800226e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f000 f8c2 	bl	80023fc <I2C_WaitOnFlagUntilTimeout>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00d      	beq.n	800229a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002288:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800228c:	d103      	bne.n	8002296 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002294:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e0aa      	b.n	80023f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800229a:	897b      	ldrh	r3, [r7, #10]
 800229c:	b2db      	uxtb	r3, r3
 800229e:	461a      	mov	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80022a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ac:	6a3a      	ldr	r2, [r7, #32]
 80022ae:	4952      	ldr	r1, [pc, #328]	; (80023f8 <I2C_RequestMemoryRead+0x1cc>)
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f000 f8fa 	bl	80024aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e097      	b.n	80023f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022c0:	2300      	movs	r3, #0
 80022c2:	617b      	str	r3, [r7, #20]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	617b      	str	r3, [r7, #20]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	617b      	str	r3, [r7, #20]
 80022d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022d8:	6a39      	ldr	r1, [r7, #32]
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f000 f964 	bl	80025a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00d      	beq.n	8002302 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d107      	bne.n	80022fe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e076      	b.n	80023f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002302:	88fb      	ldrh	r3, [r7, #6]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d105      	bne.n	8002314 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002308:	893b      	ldrh	r3, [r7, #8]
 800230a:	b2da      	uxtb	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	611a      	str	r2, [r3, #16]
 8002312:	e021      	b.n	8002358 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002314:	893b      	ldrh	r3, [r7, #8]
 8002316:	0a1b      	lsrs	r3, r3, #8
 8002318:	b29b      	uxth	r3, r3
 800231a:	b2da      	uxtb	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002324:	6a39      	ldr	r1, [r7, #32]
 8002326:	68f8      	ldr	r0, [r7, #12]
 8002328:	f000 f93e 	bl	80025a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00d      	beq.n	800234e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	2b04      	cmp	r3, #4
 8002338:	d107      	bne.n	800234a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002348:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e050      	b.n	80023f0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800234e:	893b      	ldrh	r3, [r7, #8]
 8002350:	b2da      	uxtb	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800235a:	6a39      	ldr	r1, [r7, #32]
 800235c:	68f8      	ldr	r0, [r7, #12]
 800235e:	f000 f923 	bl	80025a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00d      	beq.n	8002384 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236c:	2b04      	cmp	r3, #4
 800236e:	d107      	bne.n	8002380 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800237e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e035      	b.n	80023f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002392:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	6a3b      	ldr	r3, [r7, #32]
 800239a:	2200      	movs	r2, #0
 800239c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023a0:	68f8      	ldr	r0, [r7, #12]
 80023a2:	f000 f82b 	bl	80023fc <I2C_WaitOnFlagUntilTimeout>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00d      	beq.n	80023c8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023ba:	d103      	bne.n	80023c4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e013      	b.n	80023f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80023c8:	897b      	ldrh	r3, [r7, #10]
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	f043 0301 	orr.w	r3, r3, #1
 80023d0:	b2da      	uxtb	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023da:	6a3a      	ldr	r2, [r7, #32]
 80023dc:	4906      	ldr	r1, [pc, #24]	; (80023f8 <I2C_RequestMemoryRead+0x1cc>)
 80023de:	68f8      	ldr	r0, [r7, #12]
 80023e0:	f000 f863 	bl	80024aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e000      	b.n	80023f0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3718      	adds	r7, #24
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	00010002 	.word	0x00010002

080023fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	603b      	str	r3, [r7, #0]
 8002408:	4613      	mov	r3, r2
 800240a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800240c:	e025      	b.n	800245a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002414:	d021      	beq.n	800245a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002416:	f7fe ff2d 	bl	8001274 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	429a      	cmp	r2, r3
 8002424:	d302      	bcc.n	800242c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d116      	bne.n	800245a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2220      	movs	r2, #32
 8002436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	f043 0220 	orr.w	r2, r3, #32
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e023      	b.n	80024a2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	0c1b      	lsrs	r3, r3, #16
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b01      	cmp	r3, #1
 8002462:	d10d      	bne.n	8002480 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	43da      	mvns	r2, r3
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	4013      	ands	r3, r2
 8002470:	b29b      	uxth	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	bf0c      	ite	eq
 8002476:	2301      	moveq	r3, #1
 8002478:	2300      	movne	r3, #0
 800247a:	b2db      	uxtb	r3, r3
 800247c:	461a      	mov	r2, r3
 800247e:	e00c      	b.n	800249a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	43da      	mvns	r2, r3
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	4013      	ands	r3, r2
 800248c:	b29b      	uxth	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	bf0c      	ite	eq
 8002492:	2301      	moveq	r3, #1
 8002494:	2300      	movne	r3, #0
 8002496:	b2db      	uxtb	r3, r3
 8002498:	461a      	mov	r2, r3
 800249a:	79fb      	ldrb	r3, [r7, #7]
 800249c:	429a      	cmp	r2, r3
 800249e:	d0b6      	beq.n	800240e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b084      	sub	sp, #16
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	60f8      	str	r0, [r7, #12]
 80024b2:	60b9      	str	r1, [r7, #8]
 80024b4:	607a      	str	r2, [r7, #4]
 80024b6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024b8:	e051      	b.n	800255e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	695b      	ldr	r3, [r3, #20]
 80024c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024c8:	d123      	bne.n	8002512 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024d8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024e2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2200      	movs	r2, #0
 80024e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2220      	movs	r2, #32
 80024ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	f043 0204 	orr.w	r2, r3, #4
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e046      	b.n	80025a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002518:	d021      	beq.n	800255e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800251a:	f7fe feab 	bl	8001274 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	429a      	cmp	r2, r3
 8002528:	d302      	bcc.n	8002530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d116      	bne.n	800255e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2220      	movs	r2, #32
 800253a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	f043 0220 	orr.w	r2, r3, #32
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e020      	b.n	80025a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	0c1b      	lsrs	r3, r3, #16
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b01      	cmp	r3, #1
 8002566:	d10c      	bne.n	8002582 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	43da      	mvns	r2, r3
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	4013      	ands	r3, r2
 8002574:	b29b      	uxth	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	bf14      	ite	ne
 800257a:	2301      	movne	r3, #1
 800257c:	2300      	moveq	r3, #0
 800257e:	b2db      	uxtb	r3, r3
 8002580:	e00b      	b.n	800259a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	43da      	mvns	r2, r3
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	4013      	ands	r3, r2
 800258e:	b29b      	uxth	r3, r3
 8002590:	2b00      	cmp	r3, #0
 8002592:	bf14      	ite	ne
 8002594:	2301      	movne	r3, #1
 8002596:	2300      	moveq	r3, #0
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d18d      	bne.n	80024ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025b4:	e02d      	b.n	8002612 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 f8ce 	bl	8002758 <I2C_IsAcknowledgeFailed>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e02d      	b.n	8002622 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025cc:	d021      	beq.n	8002612 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ce:	f7fe fe51 	bl	8001274 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	68ba      	ldr	r2, [r7, #8]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d302      	bcc.n	80025e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d116      	bne.n	8002612 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2220      	movs	r2, #32
 80025ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	f043 0220 	orr.w	r2, r3, #32
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e007      	b.n	8002622 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	695b      	ldr	r3, [r3, #20]
 8002618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800261c:	2b80      	cmp	r3, #128	; 0x80
 800261e:	d1ca      	bne.n	80025b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b084      	sub	sp, #16
 800262e:	af00      	add	r7, sp, #0
 8002630:	60f8      	str	r0, [r7, #12]
 8002632:	60b9      	str	r1, [r7, #8]
 8002634:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002636:	e02d      	b.n	8002694 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f000 f88d 	bl	8002758 <I2C_IsAcknowledgeFailed>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e02d      	b.n	80026a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800264e:	d021      	beq.n	8002694 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002650:	f7fe fe10 	bl	8001274 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	68ba      	ldr	r2, [r7, #8]
 800265c:	429a      	cmp	r2, r3
 800265e:	d302      	bcc.n	8002666 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d116      	bne.n	8002694 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2220      	movs	r2, #32
 8002670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002680:	f043 0220 	orr.w	r2, r3, #32
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e007      	b.n	80026a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	f003 0304 	and.w	r3, r3, #4
 800269e:	2b04      	cmp	r3, #4
 80026a0:	d1ca      	bne.n	8002638 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3710      	adds	r7, #16
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80026b8:	e042      	b.n	8002740 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	f003 0310 	and.w	r3, r3, #16
 80026c4:	2b10      	cmp	r3, #16
 80026c6:	d119      	bne.n	80026fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f06f 0210 	mvn.w	r2, #16
 80026d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2220      	movs	r2, #32
 80026dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e029      	b.n	8002750 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026fc:	f7fe fdba 	bl	8001274 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	68ba      	ldr	r2, [r7, #8]
 8002708:	429a      	cmp	r2, r3
 800270a:	d302      	bcc.n	8002712 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d116      	bne.n	8002740 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2220      	movs	r2, #32
 800271c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272c:	f043 0220 	orr.w	r2, r3, #32
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e007      	b.n	8002750 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800274a:	2b40      	cmp	r3, #64	; 0x40
 800274c:	d1b5      	bne.n	80026ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800276a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800276e:	d11b      	bne.n	80027a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002778:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2220      	movs	r2, #32
 8002784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002794:	f043 0204 	orr.w	r2, r3, #4
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e000      	b.n	80027aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
	...

080027b8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b088      	sub	sp, #32
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e128      	b.n	8002a1c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d109      	bne.n	80027ea <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a90      	ldr	r2, [pc, #576]	; (8002a24 <HAL_I2S_Init+0x26c>)
 80027e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f7fe fb17 	bl	8000e18 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2202      	movs	r2, #2
 80027ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	6812      	ldr	r2, [r2, #0]
 80027fc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002800:	f023 030f 	bic.w	r3, r3, #15
 8002804:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2202      	movs	r2, #2
 800280c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	2b02      	cmp	r3, #2
 8002814:	d060      	beq.n	80028d8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d102      	bne.n	8002824 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800281e:	2310      	movs	r3, #16
 8002820:	617b      	str	r3, [r7, #20]
 8002822:	e001      	b.n	8002828 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002824:	2320      	movs	r3, #32
 8002826:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	2b20      	cmp	r3, #32
 800282e:	d802      	bhi.n	8002836 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002836:	2001      	movs	r0, #1
 8002838:	f002 fc82 	bl	8005140 <HAL_RCCEx_GetPeriphCLKFreq>
 800283c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002846:	d125      	bne.n	8002894 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d010      	beq.n	8002872 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	fbb2 f2f3 	udiv	r2, r2, r3
 800285a:	4613      	mov	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4413      	add	r3, r2
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	461a      	mov	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	fbb2 f3f3 	udiv	r3, r2, r3
 800286c:	3305      	adds	r3, #5
 800286e:	613b      	str	r3, [r7, #16]
 8002870:	e01f      	b.n	80028b2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	fbb2 f2f3 	udiv	r2, r2, r3
 800287c:	4613      	mov	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	461a      	mov	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	fbb2 f3f3 	udiv	r3, r2, r3
 800288e:	3305      	adds	r3, #5
 8002890:	613b      	str	r3, [r7, #16]
 8002892:	e00e      	b.n	80028b2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	fbb2 f2f3 	udiv	r2, r2, r3
 800289c:	4613      	mov	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4413      	add	r3, r2
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	461a      	mov	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ae:	3305      	adds	r3, #5
 80028b0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	4a5c      	ldr	r2, [pc, #368]	; (8002a28 <HAL_I2S_Init+0x270>)
 80028b6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ba:	08db      	lsrs	r3, r3, #3
 80028bc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	085b      	lsrs	r3, r3, #1
 80028ce:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	021b      	lsls	r3, r3, #8
 80028d4:	61bb      	str	r3, [r7, #24]
 80028d6:	e003      	b.n	80028e0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80028d8:	2302      	movs	r3, #2
 80028da:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80028dc:	2300      	movs	r3, #0
 80028de:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d902      	bls.n	80028ec <HAL_I2S_Init+0x134>
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	2bff      	cmp	r3, #255	; 0xff
 80028ea:	d907      	bls.n	80028fc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f0:	f043 0210 	orr.w	r2, r3, #16
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e08f      	b.n	8002a1c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	691a      	ldr	r2, [r3, #16]
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	ea42 0103 	orr.w	r1, r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	69fa      	ldr	r2, [r7, #28]
 800290c:	430a      	orrs	r2, r1
 800290e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800291a:	f023 030f 	bic.w	r3, r3, #15
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	6851      	ldr	r1, [r2, #4]
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6892      	ldr	r2, [r2, #8]
 8002926:	4311      	orrs	r1, r2
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	68d2      	ldr	r2, [r2, #12]
 800292c:	4311      	orrs	r1, r2
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6992      	ldr	r2, [r2, #24]
 8002932:	430a      	orrs	r2, r1
 8002934:	431a      	orrs	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800293e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d161      	bne.n	8002a0c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a38      	ldr	r2, [pc, #224]	; (8002a2c <HAL_I2S_Init+0x274>)
 800294c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a37      	ldr	r2, [pc, #220]	; (8002a30 <HAL_I2S_Init+0x278>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d101      	bne.n	800295c <HAL_I2S_Init+0x1a4>
 8002958:	4b36      	ldr	r3, [pc, #216]	; (8002a34 <HAL_I2S_Init+0x27c>)
 800295a:	e001      	b.n	8002960 <HAL_I2S_Init+0x1a8>
 800295c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002960:	69db      	ldr	r3, [r3, #28]
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	6812      	ldr	r2, [r2, #0]
 8002966:	4932      	ldr	r1, [pc, #200]	; (8002a30 <HAL_I2S_Init+0x278>)
 8002968:	428a      	cmp	r2, r1
 800296a:	d101      	bne.n	8002970 <HAL_I2S_Init+0x1b8>
 800296c:	4a31      	ldr	r2, [pc, #196]	; (8002a34 <HAL_I2S_Init+0x27c>)
 800296e:	e001      	b.n	8002974 <HAL_I2S_Init+0x1bc>
 8002970:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002974:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002978:	f023 030f 	bic.w	r3, r3, #15
 800297c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a2b      	ldr	r2, [pc, #172]	; (8002a30 <HAL_I2S_Init+0x278>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d101      	bne.n	800298c <HAL_I2S_Init+0x1d4>
 8002988:	4b2a      	ldr	r3, [pc, #168]	; (8002a34 <HAL_I2S_Init+0x27c>)
 800298a:	e001      	b.n	8002990 <HAL_I2S_Init+0x1d8>
 800298c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002990:	2202      	movs	r2, #2
 8002992:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a25      	ldr	r2, [pc, #148]	; (8002a30 <HAL_I2S_Init+0x278>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d101      	bne.n	80029a2 <HAL_I2S_Init+0x1ea>
 800299e:	4b25      	ldr	r3, [pc, #148]	; (8002a34 <HAL_I2S_Init+0x27c>)
 80029a0:	e001      	b.n	80029a6 <HAL_I2S_Init+0x1ee>
 80029a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029a6:	69db      	ldr	r3, [r3, #28]
 80029a8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029b2:	d003      	beq.n	80029bc <HAL_I2S_Init+0x204>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d103      	bne.n	80029c4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80029bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029c0:	613b      	str	r3, [r7, #16]
 80029c2:	e001      	b.n	80029c8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80029c4:	2300      	movs	r3, #0
 80029c6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80029d2:	4313      	orrs	r3, r2
 80029d4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80029dc:	4313      	orrs	r3, r2
 80029de:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80029e6:	4313      	orrs	r3, r2
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	897b      	ldrh	r3, [r7, #10]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029f4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a0d      	ldr	r2, [pc, #52]	; (8002a30 <HAL_I2S_Init+0x278>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d101      	bne.n	8002a04 <HAL_I2S_Init+0x24c>
 8002a00:	4b0c      	ldr	r3, [pc, #48]	; (8002a34 <HAL_I2S_Init+0x27c>)
 8002a02:	e001      	b.n	8002a08 <HAL_I2S_Init+0x250>
 8002a04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a08:	897a      	ldrh	r2, [r7, #10]
 8002a0a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3720      	adds	r7, #32
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	08002b2f 	.word	0x08002b2f
 8002a28:	cccccccd 	.word	0xcccccccd
 8002a2c:	08002c45 	.word	0x08002c45
 8002a30:	40003800 	.word	0x40003800
 8002a34:	40003400 	.word	0x40003400

08002a38 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a80:	881a      	ldrh	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	1c9a      	adds	r2, r3, #2
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10e      	bne.n	8002ac8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ab8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2201      	movs	r2, #1
 8002abe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7ff ffb8 	bl	8002a38 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002ac8:	bf00      	nop
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68da      	ldr	r2, [r3, #12]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae2:	b292      	uxth	r2, r2
 8002ae4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aea:	1c9a      	adds	r2, r3, #2
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	3b01      	subs	r3, #1
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10e      	bne.n	8002b26 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b16:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f7ff ff93 	bl	8002a4c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002b26:	bf00      	nop
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b086      	sub	sp, #24
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b04      	cmp	r3, #4
 8002b48:	d13a      	bne.n	8002bc0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d109      	bne.n	8002b68 <I2S_IRQHandler+0x3a>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b5e:	2b40      	cmp	r3, #64	; 0x40
 8002b60:	d102      	bne.n	8002b68 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7ff ffb4 	bl	8002ad0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b6e:	2b40      	cmp	r3, #64	; 0x40
 8002b70:	d126      	bne.n	8002bc0 <I2S_IRQHandler+0x92>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f003 0320 	and.w	r3, r3, #32
 8002b7c:	2b20      	cmp	r3, #32
 8002b7e:	d11f      	bne.n	8002bc0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	685a      	ldr	r2, [r3, #4]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b8e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002b90:	2300      	movs	r3, #0
 8002b92:	613b      	str	r3, [r7, #16]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	613b      	str	r3, [r7, #16]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	613b      	str	r3, [r7, #16]
 8002ba4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb2:	f043 0202 	orr.w	r2, r3, #2
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7ff ff50 	bl	8002a60 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b03      	cmp	r3, #3
 8002bca:	d136      	bne.n	8002c3a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d109      	bne.n	8002bea <I2S_IRQHandler+0xbc>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be0:	2b80      	cmp	r3, #128	; 0x80
 8002be2:	d102      	bne.n	8002bea <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f7ff ff45 	bl	8002a74 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	f003 0308 	and.w	r3, r3, #8
 8002bf0:	2b08      	cmp	r3, #8
 8002bf2:	d122      	bne.n	8002c3a <I2S_IRQHandler+0x10c>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f003 0320 	and.w	r3, r3, #32
 8002bfe:	2b20      	cmp	r3, #32
 8002c00:	d11b      	bne.n	8002c3a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	685a      	ldr	r2, [r3, #4]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c10:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002c12:	2300      	movs	r3, #0
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	60fb      	str	r3, [r7, #12]
 8002c1e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2c:	f043 0204 	orr.w	r2, r3, #4
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f7ff ff13 	bl	8002a60 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002c3a:	bf00      	nop
 8002c3c:	3718      	adds	r7, #24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
	...

08002c44 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b088      	sub	sp, #32
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a92      	ldr	r2, [pc, #584]	; (8002ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d101      	bne.n	8002c62 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002c5e:	4b92      	ldr	r3, [pc, #584]	; (8002ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c60:	e001      	b.n	8002c66 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002c62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a8b      	ldr	r2, [pc, #556]	; (8002ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d101      	bne.n	8002c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002c7c:	4b8a      	ldr	r3, [pc, #552]	; (8002ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c7e:	e001      	b.n	8002c84 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002c80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c90:	d004      	beq.n	8002c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f040 8099 	bne.w	8002dce <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d107      	bne.n	8002cb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d002      	beq.n	8002cb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 f925 	bl	8002f00 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d107      	bne.n	8002cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d002      	beq.n	8002cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 f9c8 	bl	8003060 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd6:	2b40      	cmp	r3, #64	; 0x40
 8002cd8:	d13a      	bne.n	8002d50 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	f003 0320 	and.w	r3, r3, #32
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d035      	beq.n	8002d50 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a6e      	ldr	r2, [pc, #440]	; (8002ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d101      	bne.n	8002cf2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002cee:	4b6e      	ldr	r3, [pc, #440]	; (8002ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002cf0:	e001      	b.n	8002cf6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002cf2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cf6:	685a      	ldr	r2, [r3, #4]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4969      	ldr	r1, [pc, #420]	; (8002ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002cfe:	428b      	cmp	r3, r1
 8002d00:	d101      	bne.n	8002d06 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002d02:	4b69      	ldr	r3, [pc, #420]	; (8002ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d04:	e001      	b.n	8002d0a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002d06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d0a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d0e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d1e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002d20:	2300      	movs	r3, #0
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	60fb      	str	r3, [r7, #12]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d42:	f043 0202 	orr.w	r2, r3, #2
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f7ff fe88 	bl	8002a60 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	f003 0308 	and.w	r3, r3, #8
 8002d56:	2b08      	cmp	r3, #8
 8002d58:	f040 80c3 	bne.w	8002ee2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	f003 0320 	and.w	r3, r3, #32
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f000 80bd 	beq.w	8002ee2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d76:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a49      	ldr	r2, [pc, #292]	; (8002ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d101      	bne.n	8002d86 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002d82:	4b49      	ldr	r3, [pc, #292]	; (8002ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d84:	e001      	b.n	8002d8a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002d86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4944      	ldr	r1, [pc, #272]	; (8002ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d92:	428b      	cmp	r3, r1
 8002d94:	d101      	bne.n	8002d9a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002d96:	4b44      	ldr	r3, [pc, #272]	; (8002ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d98:	e001      	b.n	8002d9e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002d9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d9e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002da2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002da4:	2300      	movs	r3, #0
 8002da6:	60bb      	str	r3, [r7, #8]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	60bb      	str	r3, [r7, #8]
 8002db0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2201      	movs	r2, #1
 8002db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dbe:	f043 0204 	orr.w	r2, r3, #4
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f7ff fe4a 	bl	8002a60 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002dcc:	e089      	b.n	8002ee2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d107      	bne.n	8002de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d002      	beq.n	8002de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f8be 	bl	8002f64 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d107      	bne.n	8002e02 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d002      	beq.n	8002e02 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 f8fd 	bl	8002ffc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e08:	2b40      	cmp	r3, #64	; 0x40
 8002e0a:	d12f      	bne.n	8002e6c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	f003 0320 	and.w	r3, r3, #32
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d02a      	beq.n	8002e6c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	685a      	ldr	r2, [r3, #4]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e24:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a1e      	ldr	r2, [pc, #120]	; (8002ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d101      	bne.n	8002e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002e30:	4b1d      	ldr	r3, [pc, #116]	; (8002ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e32:	e001      	b.n	8002e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002e34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4919      	ldr	r1, [pc, #100]	; (8002ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e40:	428b      	cmp	r3, r1
 8002e42:	d101      	bne.n	8002e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002e44:	4b18      	ldr	r3, [pc, #96]	; (8002ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e46:	e001      	b.n	8002e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002e48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e4c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e50:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5e:	f043 0202 	orr.w	r2, r3, #2
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f7ff fdfa 	bl	8002a60 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	2b08      	cmp	r3, #8
 8002e74:	d136      	bne.n	8002ee4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	f003 0320 	and.w	r3, r3, #32
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d031      	beq.n	8002ee4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a07      	ldr	r2, [pc, #28]	; (8002ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d101      	bne.n	8002e8e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002e8a:	4b07      	ldr	r3, [pc, #28]	; (8002ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e8c:	e001      	b.n	8002e92 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002e8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e92:	685a      	ldr	r2, [r3, #4]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4902      	ldr	r1, [pc, #8]	; (8002ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e9a:	428b      	cmp	r3, r1
 8002e9c:	d106      	bne.n	8002eac <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002e9e:	4b02      	ldr	r3, [pc, #8]	; (8002ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ea0:	e006      	b.n	8002eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002ea2:	bf00      	nop
 8002ea4:	40003800 	.word	0x40003800
 8002ea8:	40003400 	.word	0x40003400
 8002eac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002eb0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002eb4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	685a      	ldr	r2, [r3, #4]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ec4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed2:	f043 0204 	orr.w	r2, r3, #4
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f7ff fdc0 	bl	8002a60 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002ee0:	e000      	b.n	8002ee4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002ee2:	bf00      	nop
}
 8002ee4:	bf00      	nop
 8002ee6:	3720      	adds	r7, #32
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0c:	1c99      	adds	r1, r3, #2
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	6251      	str	r1, [r2, #36]	; 0x24
 8002f12:	881a      	ldrh	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	3b01      	subs	r3, #1
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d113      	bne.n	8002f5a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	685a      	ldr	r2, [r3, #4]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f40:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d106      	bne.n	8002f5a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f7ff ffc9 	bl	8002eec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f5a:	bf00      	nop
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
	...

08002f64 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f70:	1c99      	adds	r1, r3, #2
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	6251      	str	r1, [r2, #36]	; 0x24
 8002f76:	8819      	ldrh	r1, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a1d      	ldr	r2, [pc, #116]	; (8002ff4 <I2SEx_TxISR_I2SExt+0x90>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d101      	bne.n	8002f86 <I2SEx_TxISR_I2SExt+0x22>
 8002f82:	4b1d      	ldr	r3, [pc, #116]	; (8002ff8 <I2SEx_TxISR_I2SExt+0x94>)
 8002f84:	e001      	b.n	8002f8a <I2SEx_TxISR_I2SExt+0x26>
 8002f86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f8a:	460a      	mov	r2, r1
 8002f8c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	3b01      	subs	r3, #1
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d121      	bne.n	8002fea <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a12      	ldr	r2, [pc, #72]	; (8002ff4 <I2SEx_TxISR_I2SExt+0x90>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d101      	bne.n	8002fb4 <I2SEx_TxISR_I2SExt+0x50>
 8002fb0:	4b11      	ldr	r3, [pc, #68]	; (8002ff8 <I2SEx_TxISR_I2SExt+0x94>)
 8002fb2:	e001      	b.n	8002fb8 <I2SEx_TxISR_I2SExt+0x54>
 8002fb4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	490d      	ldr	r1, [pc, #52]	; (8002ff4 <I2SEx_TxISR_I2SExt+0x90>)
 8002fc0:	428b      	cmp	r3, r1
 8002fc2:	d101      	bne.n	8002fc8 <I2SEx_TxISR_I2SExt+0x64>
 8002fc4:	4b0c      	ldr	r3, [pc, #48]	; (8002ff8 <I2SEx_TxISR_I2SExt+0x94>)
 8002fc6:	e001      	b.n	8002fcc <I2SEx_TxISR_I2SExt+0x68>
 8002fc8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fcc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002fd0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d106      	bne.n	8002fea <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f7ff ff81 	bl	8002eec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002fea:	bf00      	nop
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	40003800 	.word	0x40003800
 8002ff8:	40003400 	.word	0x40003400

08002ffc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68d8      	ldr	r0, [r3, #12]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300e:	1c99      	adds	r1, r3, #2
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003014:	b282      	uxth	r2, r0
 8003016:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800301c:	b29b      	uxth	r3, r3
 800301e:	3b01      	subs	r3, #1
 8003020:	b29a      	uxth	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800302a:	b29b      	uxth	r3, r3
 800302c:	2b00      	cmp	r3, #0
 800302e:	d113      	bne.n	8003058 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800303e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003044:	b29b      	uxth	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d106      	bne.n	8003058 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f7ff ff4a 	bl	8002eec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003058:	bf00      	nop
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a20      	ldr	r2, [pc, #128]	; (80030f0 <I2SEx_RxISR_I2SExt+0x90>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d101      	bne.n	8003076 <I2SEx_RxISR_I2SExt+0x16>
 8003072:	4b20      	ldr	r3, [pc, #128]	; (80030f4 <I2SEx_RxISR_I2SExt+0x94>)
 8003074:	e001      	b.n	800307a <I2SEx_RxISR_I2SExt+0x1a>
 8003076:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800307a:	68d8      	ldr	r0, [r3, #12]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003080:	1c99      	adds	r1, r3, #2
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003086:	b282      	uxth	r2, r0
 8003088:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800308e:	b29b      	uxth	r3, r3
 8003090:	3b01      	subs	r3, #1
 8003092:	b29a      	uxth	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800309c:	b29b      	uxth	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d121      	bne.n	80030e6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a12      	ldr	r2, [pc, #72]	; (80030f0 <I2SEx_RxISR_I2SExt+0x90>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d101      	bne.n	80030b0 <I2SEx_RxISR_I2SExt+0x50>
 80030ac:	4b11      	ldr	r3, [pc, #68]	; (80030f4 <I2SEx_RxISR_I2SExt+0x94>)
 80030ae:	e001      	b.n	80030b4 <I2SEx_RxISR_I2SExt+0x54>
 80030b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030b4:	685a      	ldr	r2, [r3, #4]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	490d      	ldr	r1, [pc, #52]	; (80030f0 <I2SEx_RxISR_I2SExt+0x90>)
 80030bc:	428b      	cmp	r3, r1
 80030be:	d101      	bne.n	80030c4 <I2SEx_RxISR_I2SExt+0x64>
 80030c0:	4b0c      	ldr	r3, [pc, #48]	; (80030f4 <I2SEx_RxISR_I2SExt+0x94>)
 80030c2:	e001      	b.n	80030c8 <I2SEx_RxISR_I2SExt+0x68>
 80030c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030c8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80030cc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d106      	bne.n	80030e6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f7ff ff03 	bl	8002eec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80030e6:	bf00      	nop
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	40003800 	.word	0x40003800
 80030f4:	40003400 	.word	0x40003400

080030f8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80030f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030fa:	b08f      	sub	sp, #60	; 0x3c
 80030fc:	af0a      	add	r7, sp, #40	; 0x28
 80030fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e10f      	b.n	800332a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b00      	cmp	r3, #0
 800311a:	d106      	bne.n	800312a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f008 ffc3 	bl	800c0b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2203      	movs	r2, #3
 800312e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313a:	2b00      	cmp	r3, #0
 800313c:	d102      	bne.n	8003144 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4618      	mov	r0, r3
 800314a:	f002 fc76 	bl	8005a3a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	603b      	str	r3, [r7, #0]
 8003154:	687e      	ldr	r6, [r7, #4]
 8003156:	466d      	mov	r5, sp
 8003158:	f106 0410 	add.w	r4, r6, #16
 800315c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800315e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003160:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003162:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003164:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003168:	e885 0003 	stmia.w	r5, {r0, r1}
 800316c:	1d33      	adds	r3, r6, #4
 800316e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003170:	6838      	ldr	r0, [r7, #0]
 8003172:	f002 fb4d 	bl	8005810 <USB_CoreInit>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d005      	beq.n	8003188 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2202      	movs	r2, #2
 8003180:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e0d0      	b.n	800332a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2100      	movs	r1, #0
 800318e:	4618      	mov	r0, r3
 8003190:	f002 fc64 	bl	8005a5c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003194:	2300      	movs	r3, #0
 8003196:	73fb      	strb	r3, [r7, #15]
 8003198:	e04a      	b.n	8003230 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800319a:	7bfa      	ldrb	r2, [r7, #15]
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	4613      	mov	r3, r2
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	4413      	add	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	440b      	add	r3, r1
 80031a8:	333d      	adds	r3, #61	; 0x3d
 80031aa:	2201      	movs	r2, #1
 80031ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80031ae:	7bfa      	ldrb	r2, [r7, #15]
 80031b0:	6879      	ldr	r1, [r7, #4]
 80031b2:	4613      	mov	r3, r2
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	4413      	add	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	440b      	add	r3, r1
 80031bc:	333c      	adds	r3, #60	; 0x3c
 80031be:	7bfa      	ldrb	r2, [r7, #15]
 80031c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80031c2:	7bfa      	ldrb	r2, [r7, #15]
 80031c4:	7bfb      	ldrb	r3, [r7, #15]
 80031c6:	b298      	uxth	r0, r3
 80031c8:	6879      	ldr	r1, [r7, #4]
 80031ca:	4613      	mov	r3, r2
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	4413      	add	r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	440b      	add	r3, r1
 80031d4:	3344      	adds	r3, #68	; 0x44
 80031d6:	4602      	mov	r2, r0
 80031d8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80031da:	7bfa      	ldrb	r2, [r7, #15]
 80031dc:	6879      	ldr	r1, [r7, #4]
 80031de:	4613      	mov	r3, r2
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	4413      	add	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	440b      	add	r3, r1
 80031e8:	3340      	adds	r3, #64	; 0x40
 80031ea:	2200      	movs	r2, #0
 80031ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80031ee:	7bfa      	ldrb	r2, [r7, #15]
 80031f0:	6879      	ldr	r1, [r7, #4]
 80031f2:	4613      	mov	r3, r2
 80031f4:	00db      	lsls	r3, r3, #3
 80031f6:	4413      	add	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	440b      	add	r3, r1
 80031fc:	3348      	adds	r3, #72	; 0x48
 80031fe:	2200      	movs	r2, #0
 8003200:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003202:	7bfa      	ldrb	r2, [r7, #15]
 8003204:	6879      	ldr	r1, [r7, #4]
 8003206:	4613      	mov	r3, r2
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	4413      	add	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	440b      	add	r3, r1
 8003210:	334c      	adds	r3, #76	; 0x4c
 8003212:	2200      	movs	r2, #0
 8003214:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003216:	7bfa      	ldrb	r2, [r7, #15]
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	4613      	mov	r3, r2
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	4413      	add	r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	440b      	add	r3, r1
 8003224:	3354      	adds	r3, #84	; 0x54
 8003226:	2200      	movs	r2, #0
 8003228:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800322a:	7bfb      	ldrb	r3, [r7, #15]
 800322c:	3301      	adds	r3, #1
 800322e:	73fb      	strb	r3, [r7, #15]
 8003230:	7bfa      	ldrb	r2, [r7, #15]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	429a      	cmp	r2, r3
 8003238:	d3af      	bcc.n	800319a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800323a:	2300      	movs	r3, #0
 800323c:	73fb      	strb	r3, [r7, #15]
 800323e:	e044      	b.n	80032ca <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003240:	7bfa      	ldrb	r2, [r7, #15]
 8003242:	6879      	ldr	r1, [r7, #4]
 8003244:	4613      	mov	r3, r2
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	4413      	add	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	440b      	add	r3, r1
 800324e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003252:	2200      	movs	r2, #0
 8003254:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003256:	7bfa      	ldrb	r2, [r7, #15]
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	4613      	mov	r3, r2
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	4413      	add	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	440b      	add	r3, r1
 8003264:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003268:	7bfa      	ldrb	r2, [r7, #15]
 800326a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800326c:	7bfa      	ldrb	r2, [r7, #15]
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	4613      	mov	r3, r2
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	4413      	add	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	440b      	add	r3, r1
 800327a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800327e:	2200      	movs	r2, #0
 8003280:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003282:	7bfa      	ldrb	r2, [r7, #15]
 8003284:	6879      	ldr	r1, [r7, #4]
 8003286:	4613      	mov	r3, r2
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	4413      	add	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	440b      	add	r3, r1
 8003290:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003298:	7bfa      	ldrb	r2, [r7, #15]
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	4613      	mov	r3, r2
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	4413      	add	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	440b      	add	r3, r1
 80032a6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80032aa:	2200      	movs	r2, #0
 80032ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80032ae:	7bfa      	ldrb	r2, [r7, #15]
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	4613      	mov	r3, r2
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	4413      	add	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	440b      	add	r3, r1
 80032bc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032c4:	7bfb      	ldrb	r3, [r7, #15]
 80032c6:	3301      	adds	r3, #1
 80032c8:	73fb      	strb	r3, [r7, #15]
 80032ca:	7bfa      	ldrb	r2, [r7, #15]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d3b5      	bcc.n	8003240 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	603b      	str	r3, [r7, #0]
 80032da:	687e      	ldr	r6, [r7, #4]
 80032dc:	466d      	mov	r5, sp
 80032de:	f106 0410 	add.w	r4, r6, #16
 80032e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80032ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80032f2:	1d33      	adds	r3, r6, #4
 80032f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032f6:	6838      	ldr	r0, [r7, #0]
 80032f8:	f002 fbfc 	bl	8005af4 <USB_DevInit>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d005      	beq.n	800330e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2202      	movs	r2, #2
 8003306:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e00d      	b.n	800332a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4618      	mov	r0, r3
 8003324:	f003 fd4b 	bl	8006dbe <USB_DevDisconnect>

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003332 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b084      	sub	sp, #16
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003346:	2b01      	cmp	r3, #1
 8003348:	d101      	bne.n	800334e <HAL_PCD_Start+0x1c>
 800334a:	2302      	movs	r3, #2
 800334c:	e020      	b.n	8003390 <HAL_PCD_Start+0x5e>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335a:	2b01      	cmp	r3, #1
 800335c:	d109      	bne.n	8003372 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003362:	2b01      	cmp	r3, #1
 8003364:	d005      	beq.n	8003372 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	f002 fb4e 	bl	8005a18 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f003 fcfb 	bl	8006d7c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003398:	b590      	push	{r4, r7, lr}
 800339a:	b08d      	sub	sp, #52	; 0x34
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033a6:	6a3b      	ldr	r3, [r7, #32]
 80033a8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f003 fdb9 	bl	8006f26 <USB_GetMode>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f040 848a 	bne.w	8003cd0 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f003 fd1d 	bl	8006e00 <USB_ReadInterrupts>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 8480 	beq.w	8003cce <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	0a1b      	lsrs	r3, r3, #8
 80033d8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f003 fd0a 	bl	8006e00 <USB_ReadInterrupts>
 80033ec:	4603      	mov	r3, r0
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d107      	bne.n	8003406 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	695a      	ldr	r2, [r3, #20]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f002 0202 	and.w	r2, r2, #2
 8003404:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4618      	mov	r0, r3
 800340c:	f003 fcf8 	bl	8006e00 <USB_ReadInterrupts>
 8003410:	4603      	mov	r3, r0
 8003412:	f003 0310 	and.w	r3, r3, #16
 8003416:	2b10      	cmp	r3, #16
 8003418:	d161      	bne.n	80034de <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	699a      	ldr	r2, [r3, #24]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0210 	bic.w	r2, r2, #16
 8003428:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800342a:	6a3b      	ldr	r3, [r7, #32]
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	f003 020f 	and.w	r2, r3, #15
 8003436:	4613      	mov	r3, r2
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	4413      	add	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	4413      	add	r3, r2
 8003446:	3304      	adds	r3, #4
 8003448:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	0c5b      	lsrs	r3, r3, #17
 800344e:	f003 030f 	and.w	r3, r3, #15
 8003452:	2b02      	cmp	r3, #2
 8003454:	d124      	bne.n	80034a0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800345c:	4013      	ands	r3, r2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d035      	beq.n	80034ce <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	091b      	lsrs	r3, r3, #4
 800346a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800346c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003470:	b29b      	uxth	r3, r3
 8003472:	461a      	mov	r2, r3
 8003474:	6a38      	ldr	r0, [r7, #32]
 8003476:	f003 fb2f 	bl	8006ad8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	691a      	ldr	r2, [r3, #16]
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	091b      	lsrs	r3, r3, #4
 8003482:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003486:	441a      	add	r2, r3
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	6a1a      	ldr	r2, [r3, #32]
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	091b      	lsrs	r3, r3, #4
 8003494:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003498:	441a      	add	r2, r3
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	621a      	str	r2, [r3, #32]
 800349e:	e016      	b.n	80034ce <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	0c5b      	lsrs	r3, r3, #17
 80034a4:	f003 030f 	and.w	r3, r3, #15
 80034a8:	2b06      	cmp	r3, #6
 80034aa:	d110      	bne.n	80034ce <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80034b2:	2208      	movs	r2, #8
 80034b4:	4619      	mov	r1, r3
 80034b6:	6a38      	ldr	r0, [r7, #32]
 80034b8:	f003 fb0e 	bl	8006ad8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	6a1a      	ldr	r2, [r3, #32]
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	091b      	lsrs	r3, r3, #4
 80034c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034c8:	441a      	add	r2, r3
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	699a      	ldr	r2, [r3, #24]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f042 0210 	orr.w	r2, r2, #16
 80034dc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f003 fc8c 	bl	8006e00 <USB_ReadInterrupts>
 80034e8:	4603      	mov	r3, r0
 80034ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034ee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80034f2:	f040 80a7 	bne.w	8003644 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80034f6:	2300      	movs	r3, #0
 80034f8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4618      	mov	r0, r3
 8003500:	f003 fc91 	bl	8006e26 <USB_ReadDevAllOutEpInterrupt>
 8003504:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003506:	e099      	b.n	800363c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b00      	cmp	r3, #0
 8003510:	f000 808e 	beq.w	8003630 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800351a:	b2d2      	uxtb	r2, r2
 800351c:	4611      	mov	r1, r2
 800351e:	4618      	mov	r0, r3
 8003520:	f003 fcb5 	bl	8006e8e <USB_ReadDevOutEPInterrupt>
 8003524:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00c      	beq.n	800354a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003532:	015a      	lsls	r2, r3, #5
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	4413      	add	r3, r2
 8003538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800353c:	461a      	mov	r2, r3
 800353e:	2301      	movs	r3, #1
 8003540:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003542:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 fec3 	bl	80042d0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	f003 0308 	and.w	r3, r3, #8
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00c      	beq.n	800356e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003556:	015a      	lsls	r2, r3, #5
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	4413      	add	r3, r2
 800355c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003560:	461a      	mov	r2, r3
 8003562:	2308      	movs	r3, #8
 8003564:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003566:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 ff99 	bl	80044a0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	f003 0310 	and.w	r3, r3, #16
 8003574:	2b00      	cmp	r3, #0
 8003576:	d008      	beq.n	800358a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357a:	015a      	lsls	r2, r3, #5
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	4413      	add	r3, r2
 8003580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003584:	461a      	mov	r2, r3
 8003586:	2310      	movs	r3, #16
 8003588:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d030      	beq.n	80035f6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003594:	6a3b      	ldr	r3, [r7, #32]
 8003596:	695b      	ldr	r3, [r3, #20]
 8003598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800359c:	2b80      	cmp	r3, #128	; 0x80
 800359e:	d109      	bne.n	80035b4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	69fa      	ldr	r2, [r7, #28]
 80035aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035b2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80035b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b6:	4613      	mov	r3, r2
 80035b8:	00db      	lsls	r3, r3, #3
 80035ba:	4413      	add	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	4413      	add	r3, r2
 80035c6:	3304      	adds	r3, #4
 80035c8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	78db      	ldrb	r3, [r3, #3]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d108      	bne.n	80035e4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	2200      	movs	r2, #0
 80035d6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80035d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	4619      	mov	r1, r3
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f008 fe70 	bl	800c2c4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80035e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e6:	015a      	lsls	r2, r3, #5
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	4413      	add	r3, r2
 80035ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035f0:	461a      	mov	r2, r3
 80035f2:	2302      	movs	r3, #2
 80035f4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	f003 0320 	and.w	r3, r3, #32
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d008      	beq.n	8003612 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003602:	015a      	lsls	r2, r3, #5
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	4413      	add	r3, r2
 8003608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800360c:	461a      	mov	r2, r3
 800360e:	2320      	movs	r3, #32
 8003610:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d009      	beq.n	8003630 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800361c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361e:	015a      	lsls	r2, r3, #5
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	4413      	add	r3, r2
 8003624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003628:	461a      	mov	r2, r3
 800362a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800362e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003632:	3301      	adds	r3, #1
 8003634:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003638:	085b      	lsrs	r3, r3, #1
 800363a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800363c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800363e:	2b00      	cmp	r3, #0
 8003640:	f47f af62 	bne.w	8003508 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4618      	mov	r0, r3
 800364a:	f003 fbd9 	bl	8006e00 <USB_ReadInterrupts>
 800364e:	4603      	mov	r3, r0
 8003650:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003654:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003658:	f040 80db 	bne.w	8003812 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4618      	mov	r0, r3
 8003662:	f003 fbfa 	bl	8006e5a <USB_ReadDevAllInEpInterrupt>
 8003666:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003668:	2300      	movs	r3, #0
 800366a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800366c:	e0cd      	b.n	800380a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800366e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003670:	f003 0301 	and.w	r3, r3, #1
 8003674:	2b00      	cmp	r3, #0
 8003676:	f000 80c2 	beq.w	80037fe <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003680:	b2d2      	uxtb	r2, r2
 8003682:	4611      	mov	r1, r2
 8003684:	4618      	mov	r0, r3
 8003686:	f003 fc20 	bl	8006eca <USB_ReadDevInEPInterrupt>
 800368a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b00      	cmp	r3, #0
 8003694:	d057      	beq.n	8003746 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	f003 030f 	and.w	r3, r3, #15
 800369c:	2201      	movs	r2, #1
 800369e:	fa02 f303 	lsl.w	r3, r2, r3
 80036a2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	43db      	mvns	r3, r3
 80036b0:	69f9      	ldr	r1, [r7, #28]
 80036b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036b6:	4013      	ands	r3, r2
 80036b8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80036ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036bc:	015a      	lsls	r2, r3, #5
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	4413      	add	r3, r2
 80036c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036c6:	461a      	mov	r2, r3
 80036c8:	2301      	movs	r3, #1
 80036ca:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d132      	bne.n	800373a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80036d4:	6879      	ldr	r1, [r7, #4]
 80036d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036d8:	4613      	mov	r3, r2
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	4413      	add	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	440b      	add	r3, r1
 80036e2:	334c      	adds	r3, #76	; 0x4c
 80036e4:	6819      	ldr	r1, [r3, #0]
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ea:	4613      	mov	r3, r2
 80036ec:	00db      	lsls	r3, r3, #3
 80036ee:	4413      	add	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4403      	add	r3, r0
 80036f4:	3348      	adds	r3, #72	; 0x48
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4419      	add	r1, r3
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036fe:	4613      	mov	r3, r2
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	4413      	add	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4403      	add	r3, r0
 8003708:	334c      	adds	r3, #76	; 0x4c
 800370a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800370c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370e:	2b00      	cmp	r3, #0
 8003710:	d113      	bne.n	800373a <HAL_PCD_IRQHandler+0x3a2>
 8003712:	6879      	ldr	r1, [r7, #4]
 8003714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003716:	4613      	mov	r3, r2
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	4413      	add	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	440b      	add	r3, r1
 8003720:	3354      	adds	r3, #84	; 0x54
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d108      	bne.n	800373a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6818      	ldr	r0, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003732:	461a      	mov	r2, r3
 8003734:	2101      	movs	r1, #1
 8003736:	f003 fc27 	bl	8006f88 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800373a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373c:	b2db      	uxtb	r3, r3
 800373e:	4619      	mov	r1, r3
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f008 fd44 	bl	800c1ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	f003 0308 	and.w	r3, r3, #8
 800374c:	2b00      	cmp	r3, #0
 800374e:	d008      	beq.n	8003762 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003752:	015a      	lsls	r2, r3, #5
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	4413      	add	r3, r2
 8003758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800375c:	461a      	mov	r2, r3
 800375e:	2308      	movs	r3, #8
 8003760:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	f003 0310 	and.w	r3, r3, #16
 8003768:	2b00      	cmp	r3, #0
 800376a:	d008      	beq.n	800377e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800376c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376e:	015a      	lsls	r2, r3, #5
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	4413      	add	r3, r2
 8003774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003778:	461a      	mov	r2, r3
 800377a:	2310      	movs	r3, #16
 800377c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003784:	2b00      	cmp	r3, #0
 8003786:	d008      	beq.n	800379a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378a:	015a      	lsls	r2, r3, #5
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	4413      	add	r3, r2
 8003790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003794:	461a      	mov	r2, r3
 8003796:	2340      	movs	r3, #64	; 0x40
 8003798:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d023      	beq.n	80037ec <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80037a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037a6:	6a38      	ldr	r0, [r7, #32]
 80037a8:	f002 fb08 	bl	8005dbc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80037ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037ae:	4613      	mov	r3, r2
 80037b0:	00db      	lsls	r3, r3, #3
 80037b2:	4413      	add	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	3338      	adds	r3, #56	; 0x38
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	4413      	add	r3, r2
 80037bc:	3304      	adds	r3, #4
 80037be:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	78db      	ldrb	r3, [r3, #3]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d108      	bne.n	80037da <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	2200      	movs	r2, #0
 80037cc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	4619      	mov	r1, r3
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f008 fd87 	bl	800c2e8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80037da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037dc:	015a      	lsls	r2, r3, #5
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	4413      	add	r3, r2
 80037e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037e6:	461a      	mov	r2, r3
 80037e8:	2302      	movs	r3, #2
 80037ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80037f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 fcdb 	bl	80041b4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80037fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003800:	3301      	adds	r3, #1
 8003802:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003806:	085b      	lsrs	r3, r3, #1
 8003808:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800380a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380c:	2b00      	cmp	r3, #0
 800380e:	f47f af2e 	bne.w	800366e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4618      	mov	r0, r3
 8003818:	f003 faf2 	bl	8006e00 <USB_ReadInterrupts>
 800381c:	4603      	mov	r3, r0
 800381e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003822:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003826:	d122      	bne.n	800386e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	69fa      	ldr	r2, [r7, #28]
 8003832:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003836:	f023 0301 	bic.w	r3, r3, #1
 800383a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003842:	2b01      	cmp	r3, #1
 8003844:	d108      	bne.n	8003858 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800384e:	2100      	movs	r1, #0
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 fec3 	bl	80045dc <HAL_PCDEx_LPM_Callback>
 8003856:	e002      	b.n	800385e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f008 fd25 	bl	800c2a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	695a      	ldr	r2, [r3, #20]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800386c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f003 fac4 	bl	8006e00 <USB_ReadInterrupts>
 8003878:	4603      	mov	r3, r0
 800387a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800387e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003882:	d112      	bne.n	80038aa <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b01      	cmp	r3, #1
 8003892:	d102      	bne.n	800389a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f008 fce1 	bl	800c25c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	695a      	ldr	r2, [r3, #20]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80038a8:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f003 faa6 	bl	8006e00 <USB_ReadInterrupts>
 80038b4:	4603      	mov	r3, r0
 80038b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038be:	f040 80b7 	bne.w	8003a30 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	69fa      	ldr	r2, [r7, #28]
 80038cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038d0:	f023 0301 	bic.w	r3, r3, #1
 80038d4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2110      	movs	r1, #16
 80038dc:	4618      	mov	r0, r3
 80038de:	f002 fa6d 	bl	8005dbc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038e2:	2300      	movs	r3, #0
 80038e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038e6:	e046      	b.n	8003976 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80038e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ea:	015a      	lsls	r2, r3, #5
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	4413      	add	r3, r2
 80038f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038f4:	461a      	mov	r2, r3
 80038f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80038fa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80038fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038fe:	015a      	lsls	r2, r3, #5
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	4413      	add	r3, r2
 8003904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800390c:	0151      	lsls	r1, r2, #5
 800390e:	69fa      	ldr	r2, [r7, #28]
 8003910:	440a      	add	r2, r1
 8003912:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003916:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800391a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800391c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800391e:	015a      	lsls	r2, r3, #5
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	4413      	add	r3, r2
 8003924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003928:	461a      	mov	r2, r3
 800392a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800392e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003932:	015a      	lsls	r2, r3, #5
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	4413      	add	r3, r2
 8003938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003940:	0151      	lsls	r1, r2, #5
 8003942:	69fa      	ldr	r2, [r7, #28]
 8003944:	440a      	add	r2, r1
 8003946:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800394a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800394e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003952:	015a      	lsls	r2, r3, #5
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	4413      	add	r3, r2
 8003958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003960:	0151      	lsls	r1, r2, #5
 8003962:	69fa      	ldr	r2, [r7, #28]
 8003964:	440a      	add	r2, r1
 8003966:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800396a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800396e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003972:	3301      	adds	r3, #1
 8003974:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800397c:	429a      	cmp	r2, r3
 800397e:	d3b3      	bcc.n	80038e8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003986:	69db      	ldr	r3, [r3, #28]
 8003988:	69fa      	ldr	r2, [r7, #28]
 800398a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800398e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003992:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003998:	2b00      	cmp	r3, #0
 800399a:	d016      	beq.n	80039ca <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039a6:	69fa      	ldr	r2, [r7, #28]
 80039a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039ac:	f043 030b 	orr.w	r3, r3, #11
 80039b0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039bc:	69fa      	ldr	r2, [r7, #28]
 80039be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039c2:	f043 030b 	orr.w	r3, r3, #11
 80039c6:	6453      	str	r3, [r2, #68]	; 0x44
 80039c8:	e015      	b.n	80039f6 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	69fa      	ldr	r2, [r7, #28]
 80039d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80039dc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80039e0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	69fa      	ldr	r2, [r7, #28]
 80039ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039f0:	f043 030b 	orr.w	r3, r3, #11
 80039f4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	69fa      	ldr	r2, [r7, #28]
 8003a00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a04:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003a08:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6818      	ldr	r0, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	f003 fab4 	bl	8006f88 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	695a      	ldr	r2, [r3, #20]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003a2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4618      	mov	r0, r3
 8003a36:	f003 f9e3 	bl	8006e00 <USB_ReadInterrupts>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a44:	d124      	bne.n	8003a90 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f003 fa79 	bl	8006f42 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f002 fa2e 	bl	8005eb6 <USB_GetDevSpeed>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681c      	ldr	r4, [r3, #0]
 8003a66:	f001 fa29 	bl	8004ebc <HAL_RCC_GetHCLKFreq>
 8003a6a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	461a      	mov	r2, r3
 8003a74:	4620      	mov	r0, r4
 8003a76:	f001 ff2d 	bl	80058d4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f008 fbcf 	bl	800c21e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	695a      	ldr	r2, [r3, #20]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003a8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f003 f9b3 	bl	8006e00 <USB_ReadInterrupts>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	f003 0308 	and.w	r3, r3, #8
 8003aa0:	2b08      	cmp	r3, #8
 8003aa2:	d10a      	bne.n	8003aba <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f008 fbac 	bl	800c202 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	695a      	ldr	r2, [r3, #20]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f002 0208 	and.w	r2, r2, #8
 8003ab8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f003 f99e 	bl	8006e00 <USB_ReadInterrupts>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aca:	2b80      	cmp	r3, #128	; 0x80
 8003acc:	d122      	bne.n	8003b14 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003ace:	6a3b      	ldr	r3, [r7, #32]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ad6:	6a3b      	ldr	r3, [r7, #32]
 8003ad8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ada:	2301      	movs	r3, #1
 8003adc:	627b      	str	r3, [r7, #36]	; 0x24
 8003ade:	e014      	b.n	8003b0a <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003ae0:	6879      	ldr	r1, [r7, #4]
 8003ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	4413      	add	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	440b      	add	r3, r1
 8003aee:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d105      	bne.n	8003b04 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	4619      	mov	r1, r3
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 fb27 	bl	8004152 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b06:	3301      	adds	r3, #1
 8003b08:	627b      	str	r3, [r7, #36]	; 0x24
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d3e5      	bcc.n	8003ae0 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f003 f971 	bl	8006e00 <USB_ReadInterrupts>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b28:	d13b      	bne.n	8003ba2 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b2e:	e02b      	b.n	8003b88 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b32:	015a      	lsls	r2, r3, #5
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	4413      	add	r3, r2
 8003b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b40:	6879      	ldr	r1, [r7, #4]
 8003b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b44:	4613      	mov	r3, r2
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	4413      	add	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	440b      	add	r3, r1
 8003b4e:	3340      	adds	r3, #64	; 0x40
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d115      	bne.n	8003b82 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003b56:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	da12      	bge.n	8003b82 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003b5c:	6879      	ldr	r1, [r7, #4]
 8003b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b60:	4613      	mov	r3, r2
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	4413      	add	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	440b      	add	r3, r1
 8003b6a:	333f      	adds	r3, #63	; 0x3f
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 fae8 	bl	8004152 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	3301      	adds	r3, #1
 8003b86:	627b      	str	r3, [r7, #36]	; 0x24
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d3ce      	bcc.n	8003b30 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	695a      	ldr	r2, [r3, #20]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003ba0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f003 f92a 	bl	8006e00 <USB_ReadInterrupts>
 8003bac:	4603      	mov	r3, r0
 8003bae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bb6:	d155      	bne.n	8003c64 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003bb8:	2301      	movs	r3, #1
 8003bba:	627b      	str	r3, [r7, #36]	; 0x24
 8003bbc:	e045      	b.n	8003c4a <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc0:	015a      	lsls	r2, r3, #5
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003bce:	6879      	ldr	r1, [r7, #4]
 8003bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	00db      	lsls	r3, r3, #3
 8003bd6:	4413      	add	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	440b      	add	r3, r1
 8003bdc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d12e      	bne.n	8003c44 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003be6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	da2b      	bge.n	8003c44 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003bf8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d121      	bne.n	8003c44 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003c00:	6879      	ldr	r1, [r7, #4]
 8003c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c04:	4613      	mov	r3, r2
 8003c06:	00db      	lsls	r3, r3, #3
 8003c08:	4413      	add	r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	440b      	add	r3, r1
 8003c0e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003c12:	2201      	movs	r2, #1
 8003c14:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003c16:	6a3b      	ldr	r3, [r7, #32]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003c1e:	6a3b      	ldr	r3, [r7, #32]
 8003c20:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003c22:	6a3b      	ldr	r3, [r7, #32]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10a      	bne.n	8003c44 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	69fa      	ldr	r2, [r7, #28]
 8003c38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c40:	6053      	str	r3, [r2, #4]
            break;
 8003c42:	e007      	b.n	8003c54 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c46:	3301      	adds	r3, #1
 8003c48:	627b      	str	r3, [r7, #36]	; 0x24
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d3b4      	bcc.n	8003bbe <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	695a      	ldr	r2, [r3, #20]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003c62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f003 f8c9 	bl	8006e00 <USB_ReadInterrupts>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c78:	d10a      	bne.n	8003c90 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f008 fb46 	bl	800c30c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	695a      	ldr	r2, [r3, #20]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003c8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f003 f8b3 	bl	8006e00 <USB_ReadInterrupts>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	f003 0304 	and.w	r3, r3, #4
 8003ca0:	2b04      	cmp	r3, #4
 8003ca2:	d115      	bne.n	8003cd0 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	f003 0304 	and.w	r3, r3, #4
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d002      	beq.n	8003cbc <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f008 fb36 	bl	800c328 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	6859      	ldr	r1, [r3, #4]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	69ba      	ldr	r2, [r7, #24]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	605a      	str	r2, [r3, #4]
 8003ccc:	e000      	b.n	8003cd0 <HAL_PCD_IRQHandler+0x938>
      return;
 8003cce:	bf00      	nop
    }
  }
}
 8003cd0:	3734      	adds	r7, #52	; 0x34
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd90      	pop	{r4, r7, pc}

08003cd6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b082      	sub	sp, #8
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
 8003cde:	460b      	mov	r3, r1
 8003ce0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d101      	bne.n	8003cf0 <HAL_PCD_SetAddress+0x1a>
 8003cec:	2302      	movs	r3, #2
 8003cee:	e013      	b.n	8003d18 <HAL_PCD_SetAddress+0x42>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	78fa      	ldrb	r2, [r7, #3]
 8003cfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	78fa      	ldrb	r2, [r7, #3]
 8003d06:	4611      	mov	r1, r2
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f003 f811 	bl	8006d30 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	4608      	mov	r0, r1
 8003d2a:	4611      	mov	r1, r2
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	4603      	mov	r3, r0
 8003d30:	70fb      	strb	r3, [r7, #3]
 8003d32:	460b      	mov	r3, r1
 8003d34:	803b      	strh	r3, [r7, #0]
 8003d36:	4613      	mov	r3, r2
 8003d38:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	da0f      	bge.n	8003d66 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d46:	78fb      	ldrb	r3, [r7, #3]
 8003d48:	f003 020f 	and.w	r2, r3, #15
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	4413      	add	r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	3338      	adds	r3, #56	; 0x38
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	4413      	add	r3, r2
 8003d5a:	3304      	adds	r3, #4
 8003d5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2201      	movs	r2, #1
 8003d62:	705a      	strb	r2, [r3, #1]
 8003d64:	e00f      	b.n	8003d86 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d66:	78fb      	ldrb	r3, [r7, #3]
 8003d68:	f003 020f 	and.w	r2, r3, #15
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	4413      	add	r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003d86:	78fb      	ldrb	r3, [r7, #3]
 8003d88:	f003 030f 	and.w	r3, r3, #15
 8003d8c:	b2da      	uxtb	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003d92:	883a      	ldrh	r2, [r7, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	78ba      	ldrb	r2, [r7, #2]
 8003d9c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	785b      	ldrb	r3, [r3, #1]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d004      	beq.n	8003db0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003db0:	78bb      	ldrb	r3, [r7, #2]
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d102      	bne.n	8003dbc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d101      	bne.n	8003dca <HAL_PCD_EP_Open+0xaa>
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	e00e      	b.n	8003de8 <HAL_PCD_EP_Open+0xc8>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68f9      	ldr	r1, [r7, #12]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f002 f891 	bl	8005f00 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003de6:	7afb      	ldrb	r3, [r7, #11]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3710      	adds	r7, #16
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	460b      	mov	r3, r1
 8003dfa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003dfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	da0f      	bge.n	8003e24 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e04:	78fb      	ldrb	r3, [r7, #3]
 8003e06:	f003 020f 	and.w	r2, r3, #15
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	00db      	lsls	r3, r3, #3
 8003e0e:	4413      	add	r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	3338      	adds	r3, #56	; 0x38
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	4413      	add	r3, r2
 8003e18:	3304      	adds	r3, #4
 8003e1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	705a      	strb	r2, [r3, #1]
 8003e22:	e00f      	b.n	8003e44 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e24:	78fb      	ldrb	r3, [r7, #3]
 8003e26:	f003 020f 	and.w	r2, r3, #15
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	00db      	lsls	r3, r3, #3
 8003e2e:	4413      	add	r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	4413      	add	r3, r2
 8003e3a:	3304      	adds	r3, #4
 8003e3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003e44:	78fb      	ldrb	r3, [r7, #3]
 8003e46:	f003 030f 	and.w	r3, r3, #15
 8003e4a:	b2da      	uxtb	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d101      	bne.n	8003e5e <HAL_PCD_EP_Close+0x6e>
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	e00e      	b.n	8003e7c <HAL_PCD_EP_Close+0x8c>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68f9      	ldr	r1, [r7, #12]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f002 f8cf 	bl	8006010 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	607a      	str	r2, [r7, #4]
 8003e8e:	603b      	str	r3, [r7, #0]
 8003e90:	460b      	mov	r3, r1
 8003e92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e94:	7afb      	ldrb	r3, [r7, #11]
 8003e96:	f003 020f 	and.w	r2, r3, #15
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	4413      	add	r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	3304      	adds	r3, #4
 8003eac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	683a      	ldr	r2, [r7, #0]
 8003eb8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ec6:	7afb      	ldrb	r3, [r7, #11]
 8003ec8:	f003 030f 	and.w	r3, r3, #15
 8003ecc:	b2da      	uxtb	r2, r3
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d102      	bne.n	8003ee0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ee0:	7afb      	ldrb	r3, [r7, #11]
 8003ee2:	f003 030f 	and.w	r3, r3, #15
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d109      	bne.n	8003efe <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6818      	ldr	r0, [r3, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	6979      	ldr	r1, [r7, #20]
 8003ef8:	f002 fbae 	bl	8006658 <USB_EP0StartXfer>
 8003efc:	e008      	b.n	8003f10 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6818      	ldr	r0, [r3, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	461a      	mov	r2, r3
 8003f0a:	6979      	ldr	r1, [r7, #20]
 8003f0c:	f002 f95c 	bl	80061c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3718      	adds	r7, #24
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
 8003f22:	460b      	mov	r3, r1
 8003f24:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003f26:	78fb      	ldrb	r3, [r7, #3]
 8003f28:	f003 020f 	and.w	r2, r3, #15
 8003f2c:	6879      	ldr	r1, [r7, #4]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	00db      	lsls	r3, r3, #3
 8003f32:	4413      	add	r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	440b      	add	r3, r1
 8003f38:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003f3c:	681b      	ldr	r3, [r3, #0]
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	370c      	adds	r7, #12
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr

08003f4a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b086      	sub	sp, #24
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	60f8      	str	r0, [r7, #12]
 8003f52:	607a      	str	r2, [r7, #4]
 8003f54:	603b      	str	r3, [r7, #0]
 8003f56:	460b      	mov	r3, r1
 8003f58:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f5a:	7afb      	ldrb	r3, [r7, #11]
 8003f5c:	f003 020f 	and.w	r2, r3, #15
 8003f60:	4613      	mov	r3, r2
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	4413      	add	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	3338      	adds	r3, #56	; 0x38
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	3304      	adds	r3, #4
 8003f70:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	683a      	ldr	r2, [r7, #0]
 8003f7c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	2200      	movs	r2, #0
 8003f82:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	2201      	movs	r2, #1
 8003f88:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f8a:	7afb      	ldrb	r3, [r7, #11]
 8003f8c:	f003 030f 	and.w	r3, r3, #15
 8003f90:	b2da      	uxtb	r2, r3
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d102      	bne.n	8003fa4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003fa4:	7afb      	ldrb	r3, [r7, #11]
 8003fa6:	f003 030f 	and.w	r3, r3, #15
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d109      	bne.n	8003fc2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6818      	ldr	r0, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	461a      	mov	r2, r3
 8003fba:	6979      	ldr	r1, [r7, #20]
 8003fbc:	f002 fb4c 	bl	8006658 <USB_EP0StartXfer>
 8003fc0:	e008      	b.n	8003fd4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6818      	ldr	r0, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	461a      	mov	r2, r3
 8003fce:	6979      	ldr	r1, [r7, #20]
 8003fd0:	f002 f8fa 	bl	80061c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3718      	adds	r7, #24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b084      	sub	sp, #16
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003fea:	78fb      	ldrb	r3, [r7, #3]
 8003fec:	f003 020f 	and.w	r2, r3, #15
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d901      	bls.n	8003ffc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e050      	b.n	800409e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ffc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004000:	2b00      	cmp	r3, #0
 8004002:	da0f      	bge.n	8004024 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004004:	78fb      	ldrb	r3, [r7, #3]
 8004006:	f003 020f 	and.w	r2, r3, #15
 800400a:	4613      	mov	r3, r2
 800400c:	00db      	lsls	r3, r3, #3
 800400e:	4413      	add	r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	3338      	adds	r3, #56	; 0x38
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	4413      	add	r3, r2
 8004018:	3304      	adds	r3, #4
 800401a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2201      	movs	r2, #1
 8004020:	705a      	strb	r2, [r3, #1]
 8004022:	e00d      	b.n	8004040 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004024:	78fa      	ldrb	r2, [r7, #3]
 8004026:	4613      	mov	r3, r2
 8004028:	00db      	lsls	r3, r3, #3
 800402a:	4413      	add	r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	4413      	add	r3, r2
 8004036:	3304      	adds	r3, #4
 8004038:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2201      	movs	r2, #1
 8004044:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004046:	78fb      	ldrb	r3, [r7, #3]
 8004048:	f003 030f 	and.w	r3, r3, #15
 800404c:	b2da      	uxtb	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004058:	2b01      	cmp	r3, #1
 800405a:	d101      	bne.n	8004060 <HAL_PCD_EP_SetStall+0x82>
 800405c:	2302      	movs	r3, #2
 800405e:	e01e      	b.n	800409e <HAL_PCD_EP_SetStall+0xc0>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68f9      	ldr	r1, [r7, #12]
 800406e:	4618      	mov	r0, r3
 8004070:	f002 fd8a 	bl	8006b88 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004074:	78fb      	ldrb	r3, [r7, #3]
 8004076:	f003 030f 	and.w	r3, r3, #15
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10a      	bne.n	8004094 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6818      	ldr	r0, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	b2d9      	uxtb	r1, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800408e:	461a      	mov	r2, r3
 8004090:	f002 ff7a 	bl	8006f88 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b084      	sub	sp, #16
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
 80040ae:	460b      	mov	r3, r1
 80040b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80040b2:	78fb      	ldrb	r3, [r7, #3]
 80040b4:	f003 020f 	and.w	r2, r3, #15
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d901      	bls.n	80040c4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e042      	b.n	800414a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80040c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	da0f      	bge.n	80040ec <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040cc:	78fb      	ldrb	r3, [r7, #3]
 80040ce:	f003 020f 	and.w	r2, r3, #15
 80040d2:	4613      	mov	r3, r2
 80040d4:	00db      	lsls	r3, r3, #3
 80040d6:	4413      	add	r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	3338      	adds	r3, #56	; 0x38
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	4413      	add	r3, r2
 80040e0:	3304      	adds	r3, #4
 80040e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2201      	movs	r2, #1
 80040e8:	705a      	strb	r2, [r3, #1]
 80040ea:	e00f      	b.n	800410c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040ec:	78fb      	ldrb	r3, [r7, #3]
 80040ee:	f003 020f 	and.w	r2, r3, #15
 80040f2:	4613      	mov	r3, r2
 80040f4:	00db      	lsls	r3, r3, #3
 80040f6:	4413      	add	r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	4413      	add	r3, r2
 8004102:	3304      	adds	r3, #4
 8004104:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004112:	78fb      	ldrb	r3, [r7, #3]
 8004114:	f003 030f 	and.w	r3, r3, #15
 8004118:	b2da      	uxtb	r2, r3
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004124:	2b01      	cmp	r3, #1
 8004126:	d101      	bne.n	800412c <HAL_PCD_EP_ClrStall+0x86>
 8004128:	2302      	movs	r3, #2
 800412a:	e00e      	b.n	800414a <HAL_PCD_EP_ClrStall+0xa4>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68f9      	ldr	r1, [r7, #12]
 800413a:	4618      	mov	r0, r3
 800413c:	f002 fd92 	bl	8006c64 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3710      	adds	r7, #16
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004152:	b580      	push	{r7, lr}
 8004154:	b084      	sub	sp, #16
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
 800415a:	460b      	mov	r3, r1
 800415c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800415e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004162:	2b00      	cmp	r3, #0
 8004164:	da0c      	bge.n	8004180 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004166:	78fb      	ldrb	r3, [r7, #3]
 8004168:	f003 020f 	and.w	r2, r3, #15
 800416c:	4613      	mov	r3, r2
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	4413      	add	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	3338      	adds	r3, #56	; 0x38
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	4413      	add	r3, r2
 800417a:	3304      	adds	r3, #4
 800417c:	60fb      	str	r3, [r7, #12]
 800417e:	e00c      	b.n	800419a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004180:	78fb      	ldrb	r3, [r7, #3]
 8004182:	f003 020f 	and.w	r2, r3, #15
 8004186:	4613      	mov	r3, r2
 8004188:	00db      	lsls	r3, r3, #3
 800418a:	4413      	add	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	4413      	add	r3, r2
 8004196:	3304      	adds	r3, #4
 8004198:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68f9      	ldr	r1, [r7, #12]
 80041a0:	4618      	mov	r0, r3
 80041a2:	f002 fbb1 	bl	8006908 <USB_EPStopXfer>
 80041a6:	4603      	mov	r3, r0
 80041a8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80041aa:	7afb      	ldrb	r3, [r7, #11]
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b08a      	sub	sp, #40	; 0x28
 80041b8:	af02      	add	r7, sp, #8
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80041c8:	683a      	ldr	r2, [r7, #0]
 80041ca:	4613      	mov	r3, r2
 80041cc:	00db      	lsls	r3, r3, #3
 80041ce:	4413      	add	r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	3338      	adds	r3, #56	; 0x38
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	4413      	add	r3, r2
 80041d8:	3304      	adds	r3, #4
 80041da:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6a1a      	ldr	r2, [r3, #32]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d901      	bls.n	80041ec <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e06c      	b.n	80042c6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	699a      	ldr	r2, [r3, #24]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6a1b      	ldr	r3, [r3, #32]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	69fa      	ldr	r2, [r7, #28]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d902      	bls.n	8004208 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	3303      	adds	r3, #3
 800420c:	089b      	lsrs	r3, r3, #2
 800420e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004210:	e02b      	b.n	800426a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	699a      	ldr	r2, [r3, #24]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	69fa      	ldr	r2, [r7, #28]
 8004224:	429a      	cmp	r2, r3
 8004226:	d902      	bls.n	800422e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	3303      	adds	r3, #3
 8004232:	089b      	lsrs	r3, r3, #2
 8004234:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6919      	ldr	r1, [r3, #16]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	b2da      	uxtb	r2, r3
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004246:	b2db      	uxtb	r3, r3
 8004248:	9300      	str	r3, [sp, #0]
 800424a:	4603      	mov	r3, r0
 800424c:	6978      	ldr	r0, [r7, #20]
 800424e:	f002 fc05 	bl	8006a5c <USB_WritePacket>

    ep->xfer_buff  += len;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	691a      	ldr	r2, [r3, #16]
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	441a      	add	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6a1a      	ldr	r2, [r3, #32]
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	441a      	add	r2, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	015a      	lsls	r2, r3, #5
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	4413      	add	r3, r2
 8004272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	b29b      	uxth	r3, r3
 800427a:	69ba      	ldr	r2, [r7, #24]
 800427c:	429a      	cmp	r2, r3
 800427e:	d809      	bhi.n	8004294 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6a1a      	ldr	r2, [r3, #32]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004288:	429a      	cmp	r2, r3
 800428a:	d203      	bcs.n	8004294 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1be      	bne.n	8004212 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	699a      	ldr	r2, [r3, #24]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6a1b      	ldr	r3, [r3, #32]
 800429c:	429a      	cmp	r2, r3
 800429e:	d811      	bhi.n	80042c4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	f003 030f 	and.w	r3, r3, #15
 80042a6:	2201      	movs	r2, #1
 80042a8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ac:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	43db      	mvns	r3, r3
 80042ba:	6939      	ldr	r1, [r7, #16]
 80042bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042c0:	4013      	ands	r3, r2
 80042c2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3720      	adds	r7, #32
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
	...

080042d0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b088      	sub	sp, #32
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	333c      	adds	r3, #60	; 0x3c
 80042e8:	3304      	adds	r3, #4
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	015a      	lsls	r2, r3, #5
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	4413      	add	r3, r2
 80042f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d17b      	bne.n	80043fe <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	f003 0308 	and.w	r3, r3, #8
 800430c:	2b00      	cmp	r3, #0
 800430e:	d015      	beq.n	800433c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	4a61      	ldr	r2, [pc, #388]	; (8004498 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004314:	4293      	cmp	r3, r2
 8004316:	f240 80b9 	bls.w	800448c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 80b3 	beq.w	800448c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	015a      	lsls	r2, r3, #5
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	4413      	add	r3, r2
 800432e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004332:	461a      	mov	r2, r3
 8004334:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004338:	6093      	str	r3, [r2, #8]
 800433a:	e0a7      	b.n	800448c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	f003 0320 	and.w	r3, r3, #32
 8004342:	2b00      	cmp	r3, #0
 8004344:	d009      	beq.n	800435a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	015a      	lsls	r2, r3, #5
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	4413      	add	r3, r2
 800434e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004352:	461a      	mov	r2, r3
 8004354:	2320      	movs	r3, #32
 8004356:	6093      	str	r3, [r2, #8]
 8004358:	e098      	b.n	800448c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004360:	2b00      	cmp	r3, #0
 8004362:	f040 8093 	bne.w	800448c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	4a4b      	ldr	r2, [pc, #300]	; (8004498 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d90f      	bls.n	800438e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00a      	beq.n	800438e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	015a      	lsls	r2, r3, #5
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	4413      	add	r3, r2
 8004380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004384:	461a      	mov	r2, r3
 8004386:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800438a:	6093      	str	r3, [r2, #8]
 800438c:	e07e      	b.n	800448c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800438e:	683a      	ldr	r2, [r7, #0]
 8004390:	4613      	mov	r3, r2
 8004392:	00db      	lsls	r3, r3, #3
 8004394:	4413      	add	r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	4413      	add	r3, r2
 80043a0:	3304      	adds	r3, #4
 80043a2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	69da      	ldr	r2, [r3, #28]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	0159      	lsls	r1, r3, #5
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	440b      	add	r3, r1
 80043b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043ba:	1ad2      	subs	r2, r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d114      	bne.n	80043f0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d109      	bne.n	80043e2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6818      	ldr	r0, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80043d8:	461a      	mov	r2, r3
 80043da:	2101      	movs	r1, #1
 80043dc:	f002 fdd4 	bl	8006f88 <USB_EP0_OutStart>
 80043e0:	e006      	b.n	80043f0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	691a      	ldr	r2, [r3, #16]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6a1b      	ldr	r3, [r3, #32]
 80043ea:	441a      	add	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	4619      	mov	r1, r3
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f007 fece 	bl	800c198 <HAL_PCD_DataOutStageCallback>
 80043fc:	e046      	b.n	800448c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	4a26      	ldr	r2, [pc, #152]	; (800449c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d124      	bne.n	8004450 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00a      	beq.n	8004426 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	015a      	lsls	r2, r3, #5
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	4413      	add	r3, r2
 8004418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800441c:	461a      	mov	r2, r3
 800441e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004422:	6093      	str	r3, [r2, #8]
 8004424:	e032      	b.n	800448c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	f003 0320 	and.w	r3, r3, #32
 800442c:	2b00      	cmp	r3, #0
 800442e:	d008      	beq.n	8004442 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	015a      	lsls	r2, r3, #5
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	4413      	add	r3, r2
 8004438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800443c:	461a      	mov	r2, r3
 800443e:	2320      	movs	r3, #32
 8004440:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	b2db      	uxtb	r3, r3
 8004446:	4619      	mov	r1, r3
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f007 fea5 	bl	800c198 <HAL_PCD_DataOutStageCallback>
 800444e:	e01d      	b.n	800448c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d114      	bne.n	8004480 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004456:	6879      	ldr	r1, [r7, #4]
 8004458:	683a      	ldr	r2, [r7, #0]
 800445a:	4613      	mov	r3, r2
 800445c:	00db      	lsls	r3, r3, #3
 800445e:	4413      	add	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	440b      	add	r3, r1
 8004464:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d108      	bne.n	8004480 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6818      	ldr	r0, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004478:	461a      	mov	r2, r3
 800447a:	2100      	movs	r1, #0
 800447c:	f002 fd84 	bl	8006f88 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	b2db      	uxtb	r3, r3
 8004484:	4619      	mov	r1, r3
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f007 fe86 	bl	800c198 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3720      	adds	r7, #32
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	4f54300a 	.word	0x4f54300a
 800449c:	4f54310a 	.word	0x4f54310a

080044a0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	333c      	adds	r3, #60	; 0x3c
 80044b8:	3304      	adds	r3, #4
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	015a      	lsls	r2, r3, #5
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	4413      	add	r3, r2
 80044c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	4a15      	ldr	r2, [pc, #84]	; (8004528 <PCD_EP_OutSetupPacket_int+0x88>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d90e      	bls.n	80044f4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d009      	beq.n	80044f4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	015a      	lsls	r2, r3, #5
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	4413      	add	r3, r2
 80044e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ec:	461a      	mov	r2, r3
 80044ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044f2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f007 fe3d 	bl	800c174 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	4a0a      	ldr	r2, [pc, #40]	; (8004528 <PCD_EP_OutSetupPacket_int+0x88>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d90c      	bls.n	800451c <PCD_EP_OutSetupPacket_int+0x7c>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d108      	bne.n	800451c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6818      	ldr	r0, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004514:	461a      	mov	r2, r3
 8004516:	2101      	movs	r1, #1
 8004518:	f002 fd36 	bl	8006f88 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3718      	adds	r7, #24
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	4f54300a 	.word	0x4f54300a

0800452c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	460b      	mov	r3, r1
 8004536:	70fb      	strb	r3, [r7, #3]
 8004538:	4613      	mov	r3, r2
 800453a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004542:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004544:	78fb      	ldrb	r3, [r7, #3]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d107      	bne.n	800455a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800454a:	883b      	ldrh	r3, [r7, #0]
 800454c:	0419      	lsls	r1, r3, #16
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68ba      	ldr	r2, [r7, #8]
 8004554:	430a      	orrs	r2, r1
 8004556:	629a      	str	r2, [r3, #40]	; 0x28
 8004558:	e028      	b.n	80045ac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004560:	0c1b      	lsrs	r3, r3, #16
 8004562:	68ba      	ldr	r2, [r7, #8]
 8004564:	4413      	add	r3, r2
 8004566:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004568:	2300      	movs	r3, #0
 800456a:	73fb      	strb	r3, [r7, #15]
 800456c:	e00d      	b.n	800458a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	7bfb      	ldrb	r3, [r7, #15]
 8004574:	3340      	adds	r3, #64	; 0x40
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4413      	add	r3, r2
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	0c1b      	lsrs	r3, r3, #16
 800457e:	68ba      	ldr	r2, [r7, #8]
 8004580:	4413      	add	r3, r2
 8004582:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004584:	7bfb      	ldrb	r3, [r7, #15]
 8004586:	3301      	adds	r3, #1
 8004588:	73fb      	strb	r3, [r7, #15]
 800458a:	7bfa      	ldrb	r2, [r7, #15]
 800458c:	78fb      	ldrb	r3, [r7, #3]
 800458e:	3b01      	subs	r3, #1
 8004590:	429a      	cmp	r2, r3
 8004592:	d3ec      	bcc.n	800456e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004594:	883b      	ldrh	r3, [r7, #0]
 8004596:	0418      	lsls	r0, r3, #16
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6819      	ldr	r1, [r3, #0]
 800459c:	78fb      	ldrb	r3, [r7, #3]
 800459e:	3b01      	subs	r3, #1
 80045a0:	68ba      	ldr	r2, [r7, #8]
 80045a2:	4302      	orrs	r2, r0
 80045a4:	3340      	adds	r3, #64	; 0x40
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	440b      	add	r3, r1
 80045aa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3714      	adds	r7, #20
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr

080045ba <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80045ba:	b480      	push	{r7}
 80045bc:	b083      	sub	sp, #12
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
 80045c2:	460b      	mov	r3, r1
 80045c4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	887a      	ldrh	r2, [r7, #2]
 80045cc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	460b      	mov	r3, r1
 80045e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80045e8:	bf00      	nop
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e267      	b.n	8004ad6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b00      	cmp	r3, #0
 8004610:	d075      	beq.n	80046fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004612:	4b88      	ldr	r3, [pc, #544]	; (8004834 <HAL_RCC_OscConfig+0x240>)
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f003 030c 	and.w	r3, r3, #12
 800461a:	2b04      	cmp	r3, #4
 800461c:	d00c      	beq.n	8004638 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800461e:	4b85      	ldr	r3, [pc, #532]	; (8004834 <HAL_RCC_OscConfig+0x240>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004626:	2b08      	cmp	r3, #8
 8004628:	d112      	bne.n	8004650 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800462a:	4b82      	ldr	r3, [pc, #520]	; (8004834 <HAL_RCC_OscConfig+0x240>)
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004632:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004636:	d10b      	bne.n	8004650 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004638:	4b7e      	ldr	r3, [pc, #504]	; (8004834 <HAL_RCC_OscConfig+0x240>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d05b      	beq.n	80046fc <HAL_RCC_OscConfig+0x108>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d157      	bne.n	80046fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e242      	b.n	8004ad6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004658:	d106      	bne.n	8004668 <HAL_RCC_OscConfig+0x74>
 800465a:	4b76      	ldr	r3, [pc, #472]	; (8004834 <HAL_RCC_OscConfig+0x240>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a75      	ldr	r2, [pc, #468]	; (8004834 <HAL_RCC_OscConfig+0x240>)
 8004660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004664:	6013      	str	r3, [r2, #0]
 8004666:	e01d      	b.n	80046a4 <HAL_RCC_OscConfig+0xb0>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004670:	d10c      	bne.n	800468c <HAL_RCC_OscConfig+0x98>
 8004672:	4b70      	ldr	r3, [pc, #448]	; (8004834 <HAL_RCC_OscConfig+0x240>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a6f      	ldr	r2, [pc, #444]	; (8004834 <HAL_RCC_OscConfig+0x240>)
 8004678:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800467c:	6013      	str	r3, [r2, #0]
 800467e:	4b6d      	ldr	r3, [pc, #436]	; (8004834 <HAL_RCC_OscConfig+0x240>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a6c      	ldr	r2, [pc, #432]	; (8004834 <HAL_RCC_OscConfig+0x240>)
 8004684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004688:	6013      	str	r3, [r2, #0]
 800468a:	e00b      	b.n	80046a4 <HAL_RCC_OscConfig+0xb0>
 800468c:	4b69      	ldr	r3, [pc, #420]	; (8004834 <HAL_RCC_OscConfig+0x240>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a68      	ldr	r2, [pc, #416]	; (8004834 <HAL_RCC_OscConfig+0x240>)
 8004692:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004696:	6013      	str	r3, [r2, #0]
 8004698:	4b66      	ldr	r3, [pc, #408]	; (8004834 <HAL_RCC_OscConfig+0x240>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a65      	ldr	r2, [pc, #404]	; (8004834 <HAL_RCC_OscConfig+0x240>)
 800469e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d013      	beq.n	80046d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ac:	f7fc fde2 	bl	8001274 <HAL_GetTick>
 80046b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046b2:	e008      	b.n	80046c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046b4:	f7fc fdde 	bl	8001274 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b64      	cmp	r3, #100	; 0x64
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e207      	b.n	8004ad6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046c6:	4b5b      	ldr	r3, [pc, #364]	; (8004834 <HAL_RCC_OscConfig+0x240>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d0f0      	beq.n	80046b4 <HAL_RCC_OscConfig+0xc0>
 80046d2:	e014      	b.n	80046fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d4:	f7fc fdce 	bl	8001274 <HAL_GetTick>
 80046d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046da:	e008      	b.n	80046ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046dc:	f7fc fdca 	bl	8001274 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b64      	cmp	r3, #100	; 0x64
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e1f3      	b.n	8004ad6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046ee:	4b51      	ldr	r3, [pc, #324]	; (8004834 <HAL_RCC_OscConfig+0x240>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1f0      	bne.n	80046dc <HAL_RCC_OscConfig+0xe8>
 80046fa:	e000      	b.n	80046fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d063      	beq.n	80047d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800470a:	4b4a      	ldr	r3, [pc, #296]	; (8004834 <HAL_RCC_OscConfig+0x240>)
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f003 030c 	and.w	r3, r3, #12
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00b      	beq.n	800472e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004716:	4b47      	ldr	r3, [pc, #284]	; (8004834 <HAL_RCC_OscConfig+0x240>)
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800471e:	2b08      	cmp	r3, #8
 8004720:	d11c      	bne.n	800475c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004722:	4b44      	ldr	r3, [pc, #272]	; (8004834 <HAL_RCC_OscConfig+0x240>)
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d116      	bne.n	800475c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800472e:	4b41      	ldr	r3, [pc, #260]	; (8004834 <HAL_RCC_OscConfig+0x240>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0302 	and.w	r3, r3, #2
 8004736:	2b00      	cmp	r3, #0
 8004738:	d005      	beq.n	8004746 <HAL_RCC_OscConfig+0x152>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	2b01      	cmp	r3, #1
 8004740:	d001      	beq.n	8004746 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e1c7      	b.n	8004ad6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004746:	4b3b      	ldr	r3, [pc, #236]	; (8004834 <HAL_RCC_OscConfig+0x240>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	00db      	lsls	r3, r3, #3
 8004754:	4937      	ldr	r1, [pc, #220]	; (8004834 <HAL_RCC_OscConfig+0x240>)
 8004756:	4313      	orrs	r3, r2
 8004758:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800475a:	e03a      	b.n	80047d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d020      	beq.n	80047a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004764:	4b34      	ldr	r3, [pc, #208]	; (8004838 <HAL_RCC_OscConfig+0x244>)
 8004766:	2201      	movs	r2, #1
 8004768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800476a:	f7fc fd83 	bl	8001274 <HAL_GetTick>
 800476e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004770:	e008      	b.n	8004784 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004772:	f7fc fd7f 	bl	8001274 <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	2b02      	cmp	r3, #2
 800477e:	d901      	bls.n	8004784 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e1a8      	b.n	8004ad6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004784:	4b2b      	ldr	r3, [pc, #172]	; (8004834 <HAL_RCC_OscConfig+0x240>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	2b00      	cmp	r3, #0
 800478e:	d0f0      	beq.n	8004772 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004790:	4b28      	ldr	r3, [pc, #160]	; (8004834 <HAL_RCC_OscConfig+0x240>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	00db      	lsls	r3, r3, #3
 800479e:	4925      	ldr	r1, [pc, #148]	; (8004834 <HAL_RCC_OscConfig+0x240>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	600b      	str	r3, [r1, #0]
 80047a4:	e015      	b.n	80047d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047a6:	4b24      	ldr	r3, [pc, #144]	; (8004838 <HAL_RCC_OscConfig+0x244>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ac:	f7fc fd62 	bl	8001274 <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047b2:	e008      	b.n	80047c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047b4:	f7fc fd5e 	bl	8001274 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e187      	b.n	8004ad6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047c6:	4b1b      	ldr	r3, [pc, #108]	; (8004834 <HAL_RCC_OscConfig+0x240>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1f0      	bne.n	80047b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0308 	and.w	r3, r3, #8
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d036      	beq.n	800484c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d016      	beq.n	8004814 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047e6:	4b15      	ldr	r3, [pc, #84]	; (800483c <HAL_RCC_OscConfig+0x248>)
 80047e8:	2201      	movs	r2, #1
 80047ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ec:	f7fc fd42 	bl	8001274 <HAL_GetTick>
 80047f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047f2:	e008      	b.n	8004806 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047f4:	f7fc fd3e 	bl	8001274 <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d901      	bls.n	8004806 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e167      	b.n	8004ad6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004806:	4b0b      	ldr	r3, [pc, #44]	; (8004834 <HAL_RCC_OscConfig+0x240>)
 8004808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d0f0      	beq.n	80047f4 <HAL_RCC_OscConfig+0x200>
 8004812:	e01b      	b.n	800484c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004814:	4b09      	ldr	r3, [pc, #36]	; (800483c <HAL_RCC_OscConfig+0x248>)
 8004816:	2200      	movs	r2, #0
 8004818:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800481a:	f7fc fd2b 	bl	8001274 <HAL_GetTick>
 800481e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004820:	e00e      	b.n	8004840 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004822:	f7fc fd27 	bl	8001274 <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	2b02      	cmp	r3, #2
 800482e:	d907      	bls.n	8004840 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e150      	b.n	8004ad6 <HAL_RCC_OscConfig+0x4e2>
 8004834:	40023800 	.word	0x40023800
 8004838:	42470000 	.word	0x42470000
 800483c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004840:	4b88      	ldr	r3, [pc, #544]	; (8004a64 <HAL_RCC_OscConfig+0x470>)
 8004842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	2b00      	cmp	r3, #0
 800484a:	d1ea      	bne.n	8004822 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0304 	and.w	r3, r3, #4
 8004854:	2b00      	cmp	r3, #0
 8004856:	f000 8097 	beq.w	8004988 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800485a:	2300      	movs	r3, #0
 800485c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800485e:	4b81      	ldr	r3, [pc, #516]	; (8004a64 <HAL_RCC_OscConfig+0x470>)
 8004860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10f      	bne.n	800488a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800486a:	2300      	movs	r3, #0
 800486c:	60bb      	str	r3, [r7, #8]
 800486e:	4b7d      	ldr	r3, [pc, #500]	; (8004a64 <HAL_RCC_OscConfig+0x470>)
 8004870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004872:	4a7c      	ldr	r2, [pc, #496]	; (8004a64 <HAL_RCC_OscConfig+0x470>)
 8004874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004878:	6413      	str	r3, [r2, #64]	; 0x40
 800487a:	4b7a      	ldr	r3, [pc, #488]	; (8004a64 <HAL_RCC_OscConfig+0x470>)
 800487c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004882:	60bb      	str	r3, [r7, #8]
 8004884:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004886:	2301      	movs	r3, #1
 8004888:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800488a:	4b77      	ldr	r3, [pc, #476]	; (8004a68 <HAL_RCC_OscConfig+0x474>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004892:	2b00      	cmp	r3, #0
 8004894:	d118      	bne.n	80048c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004896:	4b74      	ldr	r3, [pc, #464]	; (8004a68 <HAL_RCC_OscConfig+0x474>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a73      	ldr	r2, [pc, #460]	; (8004a68 <HAL_RCC_OscConfig+0x474>)
 800489c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048a2:	f7fc fce7 	bl	8001274 <HAL_GetTick>
 80048a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048a8:	e008      	b.n	80048bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048aa:	f7fc fce3 	bl	8001274 <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d901      	bls.n	80048bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e10c      	b.n	8004ad6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048bc:	4b6a      	ldr	r3, [pc, #424]	; (8004a68 <HAL_RCC_OscConfig+0x474>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d0f0      	beq.n	80048aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d106      	bne.n	80048de <HAL_RCC_OscConfig+0x2ea>
 80048d0:	4b64      	ldr	r3, [pc, #400]	; (8004a64 <HAL_RCC_OscConfig+0x470>)
 80048d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d4:	4a63      	ldr	r2, [pc, #396]	; (8004a64 <HAL_RCC_OscConfig+0x470>)
 80048d6:	f043 0301 	orr.w	r3, r3, #1
 80048da:	6713      	str	r3, [r2, #112]	; 0x70
 80048dc:	e01c      	b.n	8004918 <HAL_RCC_OscConfig+0x324>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	2b05      	cmp	r3, #5
 80048e4:	d10c      	bne.n	8004900 <HAL_RCC_OscConfig+0x30c>
 80048e6:	4b5f      	ldr	r3, [pc, #380]	; (8004a64 <HAL_RCC_OscConfig+0x470>)
 80048e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ea:	4a5e      	ldr	r2, [pc, #376]	; (8004a64 <HAL_RCC_OscConfig+0x470>)
 80048ec:	f043 0304 	orr.w	r3, r3, #4
 80048f0:	6713      	str	r3, [r2, #112]	; 0x70
 80048f2:	4b5c      	ldr	r3, [pc, #368]	; (8004a64 <HAL_RCC_OscConfig+0x470>)
 80048f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f6:	4a5b      	ldr	r2, [pc, #364]	; (8004a64 <HAL_RCC_OscConfig+0x470>)
 80048f8:	f043 0301 	orr.w	r3, r3, #1
 80048fc:	6713      	str	r3, [r2, #112]	; 0x70
 80048fe:	e00b      	b.n	8004918 <HAL_RCC_OscConfig+0x324>
 8004900:	4b58      	ldr	r3, [pc, #352]	; (8004a64 <HAL_RCC_OscConfig+0x470>)
 8004902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004904:	4a57      	ldr	r2, [pc, #348]	; (8004a64 <HAL_RCC_OscConfig+0x470>)
 8004906:	f023 0301 	bic.w	r3, r3, #1
 800490a:	6713      	str	r3, [r2, #112]	; 0x70
 800490c:	4b55      	ldr	r3, [pc, #340]	; (8004a64 <HAL_RCC_OscConfig+0x470>)
 800490e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004910:	4a54      	ldr	r2, [pc, #336]	; (8004a64 <HAL_RCC_OscConfig+0x470>)
 8004912:	f023 0304 	bic.w	r3, r3, #4
 8004916:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d015      	beq.n	800494c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004920:	f7fc fca8 	bl	8001274 <HAL_GetTick>
 8004924:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004926:	e00a      	b.n	800493e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004928:	f7fc fca4 	bl	8001274 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	f241 3288 	movw	r2, #5000	; 0x1388
 8004936:	4293      	cmp	r3, r2
 8004938:	d901      	bls.n	800493e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e0cb      	b.n	8004ad6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800493e:	4b49      	ldr	r3, [pc, #292]	; (8004a64 <HAL_RCC_OscConfig+0x470>)
 8004940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b00      	cmp	r3, #0
 8004948:	d0ee      	beq.n	8004928 <HAL_RCC_OscConfig+0x334>
 800494a:	e014      	b.n	8004976 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800494c:	f7fc fc92 	bl	8001274 <HAL_GetTick>
 8004950:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004952:	e00a      	b.n	800496a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004954:	f7fc fc8e 	bl	8001274 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004962:	4293      	cmp	r3, r2
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e0b5      	b.n	8004ad6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800496a:	4b3e      	ldr	r3, [pc, #248]	; (8004a64 <HAL_RCC_OscConfig+0x470>)
 800496c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496e:	f003 0302 	and.w	r3, r3, #2
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1ee      	bne.n	8004954 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004976:	7dfb      	ldrb	r3, [r7, #23]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d105      	bne.n	8004988 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800497c:	4b39      	ldr	r3, [pc, #228]	; (8004a64 <HAL_RCC_OscConfig+0x470>)
 800497e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004980:	4a38      	ldr	r2, [pc, #224]	; (8004a64 <HAL_RCC_OscConfig+0x470>)
 8004982:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004986:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	2b00      	cmp	r3, #0
 800498e:	f000 80a1 	beq.w	8004ad4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004992:	4b34      	ldr	r3, [pc, #208]	; (8004a64 <HAL_RCC_OscConfig+0x470>)
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f003 030c 	and.w	r3, r3, #12
 800499a:	2b08      	cmp	r3, #8
 800499c:	d05c      	beq.n	8004a58 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d141      	bne.n	8004a2a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049a6:	4b31      	ldr	r3, [pc, #196]	; (8004a6c <HAL_RCC_OscConfig+0x478>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ac:	f7fc fc62 	bl	8001274 <HAL_GetTick>
 80049b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049b2:	e008      	b.n	80049c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049b4:	f7fc fc5e 	bl	8001274 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d901      	bls.n	80049c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e087      	b.n	8004ad6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049c6:	4b27      	ldr	r3, [pc, #156]	; (8004a64 <HAL_RCC_OscConfig+0x470>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1f0      	bne.n	80049b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	69da      	ldr	r2, [r3, #28]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	431a      	orrs	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e0:	019b      	lsls	r3, r3, #6
 80049e2:	431a      	orrs	r2, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e8:	085b      	lsrs	r3, r3, #1
 80049ea:	3b01      	subs	r3, #1
 80049ec:	041b      	lsls	r3, r3, #16
 80049ee:	431a      	orrs	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f4:	061b      	lsls	r3, r3, #24
 80049f6:	491b      	ldr	r1, [pc, #108]	; (8004a64 <HAL_RCC_OscConfig+0x470>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049fc:	4b1b      	ldr	r3, [pc, #108]	; (8004a6c <HAL_RCC_OscConfig+0x478>)
 80049fe:	2201      	movs	r2, #1
 8004a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a02:	f7fc fc37 	bl	8001274 <HAL_GetTick>
 8004a06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a08:	e008      	b.n	8004a1c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a0a:	f7fc fc33 	bl	8001274 <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d901      	bls.n	8004a1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e05c      	b.n	8004ad6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a1c:	4b11      	ldr	r3, [pc, #68]	; (8004a64 <HAL_RCC_OscConfig+0x470>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d0f0      	beq.n	8004a0a <HAL_RCC_OscConfig+0x416>
 8004a28:	e054      	b.n	8004ad4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a2a:	4b10      	ldr	r3, [pc, #64]	; (8004a6c <HAL_RCC_OscConfig+0x478>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a30:	f7fc fc20 	bl	8001274 <HAL_GetTick>
 8004a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a36:	e008      	b.n	8004a4a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a38:	f7fc fc1c 	bl	8001274 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e045      	b.n	8004ad6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a4a:	4b06      	ldr	r3, [pc, #24]	; (8004a64 <HAL_RCC_OscConfig+0x470>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1f0      	bne.n	8004a38 <HAL_RCC_OscConfig+0x444>
 8004a56:	e03d      	b.n	8004ad4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	699b      	ldr	r3, [r3, #24]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d107      	bne.n	8004a70 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e038      	b.n	8004ad6 <HAL_RCC_OscConfig+0x4e2>
 8004a64:	40023800 	.word	0x40023800
 8004a68:	40007000 	.word	0x40007000
 8004a6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a70:	4b1b      	ldr	r3, [pc, #108]	; (8004ae0 <HAL_RCC_OscConfig+0x4ec>)
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d028      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d121      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d11a      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004aa6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d111      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab6:	085b      	lsrs	r3, r3, #1
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d107      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d001      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e000      	b.n	8004ad6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3718      	adds	r7, #24
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	40023800 	.word	0x40023800

08004ae4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d101      	bne.n	8004af8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e0cc      	b.n	8004c92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004af8:	4b68      	ldr	r3, [pc, #416]	; (8004c9c <HAL_RCC_ClockConfig+0x1b8>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0307 	and.w	r3, r3, #7
 8004b00:	683a      	ldr	r2, [r7, #0]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d90c      	bls.n	8004b20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b06:	4b65      	ldr	r3, [pc, #404]	; (8004c9c <HAL_RCC_ClockConfig+0x1b8>)
 8004b08:	683a      	ldr	r2, [r7, #0]
 8004b0a:	b2d2      	uxtb	r2, r2
 8004b0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b0e:	4b63      	ldr	r3, [pc, #396]	; (8004c9c <HAL_RCC_ClockConfig+0x1b8>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0307 	and.w	r3, r3, #7
 8004b16:	683a      	ldr	r2, [r7, #0]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d001      	beq.n	8004b20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e0b8      	b.n	8004c92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0302 	and.w	r3, r3, #2
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d020      	beq.n	8004b6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0304 	and.w	r3, r3, #4
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d005      	beq.n	8004b44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b38:	4b59      	ldr	r3, [pc, #356]	; (8004ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	4a58      	ldr	r2, [pc, #352]	; (8004ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0308 	and.w	r3, r3, #8
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d005      	beq.n	8004b5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b50:	4b53      	ldr	r3, [pc, #332]	; (8004ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	4a52      	ldr	r2, [pc, #328]	; (8004ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b5c:	4b50      	ldr	r3, [pc, #320]	; (8004ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	494d      	ldr	r1, [pc, #308]	; (8004ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d044      	beq.n	8004c04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d107      	bne.n	8004b92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b82:	4b47      	ldr	r3, [pc, #284]	; (8004ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d119      	bne.n	8004bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e07f      	b.n	8004c92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d003      	beq.n	8004ba2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b9e:	2b03      	cmp	r3, #3
 8004ba0:	d107      	bne.n	8004bb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ba2:	4b3f      	ldr	r3, [pc, #252]	; (8004ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d109      	bne.n	8004bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e06f      	b.n	8004c92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bb2:	4b3b      	ldr	r3, [pc, #236]	; (8004ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0302 	and.w	r3, r3, #2
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d101      	bne.n	8004bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e067      	b.n	8004c92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bc2:	4b37      	ldr	r3, [pc, #220]	; (8004ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f023 0203 	bic.w	r2, r3, #3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	4934      	ldr	r1, [pc, #208]	; (8004ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bd4:	f7fc fb4e 	bl	8001274 <HAL_GetTick>
 8004bd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bda:	e00a      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bdc:	f7fc fb4a 	bl	8001274 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e04f      	b.n	8004c92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bf2:	4b2b      	ldr	r3, [pc, #172]	; (8004ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f003 020c 	and.w	r2, r3, #12
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d1eb      	bne.n	8004bdc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c04:	4b25      	ldr	r3, [pc, #148]	; (8004c9c <HAL_RCC_ClockConfig+0x1b8>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0307 	and.w	r3, r3, #7
 8004c0c:	683a      	ldr	r2, [r7, #0]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d20c      	bcs.n	8004c2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c12:	4b22      	ldr	r3, [pc, #136]	; (8004c9c <HAL_RCC_ClockConfig+0x1b8>)
 8004c14:	683a      	ldr	r2, [r7, #0]
 8004c16:	b2d2      	uxtb	r2, r2
 8004c18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c1a:	4b20      	ldr	r3, [pc, #128]	; (8004c9c <HAL_RCC_ClockConfig+0x1b8>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0307 	and.w	r3, r3, #7
 8004c22:	683a      	ldr	r2, [r7, #0]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d001      	beq.n	8004c2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e032      	b.n	8004c92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0304 	and.w	r3, r3, #4
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d008      	beq.n	8004c4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c38:	4b19      	ldr	r3, [pc, #100]	; (8004ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	4916      	ldr	r1, [pc, #88]	; (8004ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0308 	and.w	r3, r3, #8
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d009      	beq.n	8004c6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c56:	4b12      	ldr	r3, [pc, #72]	; (8004ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	00db      	lsls	r3, r3, #3
 8004c64:	490e      	ldr	r1, [pc, #56]	; (8004ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c6a:	f000 f821 	bl	8004cb0 <HAL_RCC_GetSysClockFreq>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	4b0b      	ldr	r3, [pc, #44]	; (8004ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	091b      	lsrs	r3, r3, #4
 8004c76:	f003 030f 	and.w	r3, r3, #15
 8004c7a:	490a      	ldr	r1, [pc, #40]	; (8004ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c7c:	5ccb      	ldrb	r3, [r1, r3]
 8004c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c82:	4a09      	ldr	r2, [pc, #36]	; (8004ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c86:	4b09      	ldr	r3, [pc, #36]	; (8004cac <HAL_RCC_ClockConfig+0x1c8>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7fc f9da 	bl	8001044 <HAL_InitTick>

  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	40023c00 	.word	0x40023c00
 8004ca0:	40023800 	.word	0x40023800
 8004ca4:	0800c9cc 	.word	0x0800c9cc
 8004ca8:	20000000 	.word	0x20000000
 8004cac:	20000004 	.word	0x20000004

08004cb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cb4:	b094      	sub	sp, #80	; 0x50
 8004cb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	647b      	str	r3, [r7, #68]	; 0x44
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cc8:	4b79      	ldr	r3, [pc, #484]	; (8004eb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f003 030c 	and.w	r3, r3, #12
 8004cd0:	2b08      	cmp	r3, #8
 8004cd2:	d00d      	beq.n	8004cf0 <HAL_RCC_GetSysClockFreq+0x40>
 8004cd4:	2b08      	cmp	r3, #8
 8004cd6:	f200 80e1 	bhi.w	8004e9c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d002      	beq.n	8004ce4 <HAL_RCC_GetSysClockFreq+0x34>
 8004cde:	2b04      	cmp	r3, #4
 8004ce0:	d003      	beq.n	8004cea <HAL_RCC_GetSysClockFreq+0x3a>
 8004ce2:	e0db      	b.n	8004e9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ce4:	4b73      	ldr	r3, [pc, #460]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ce6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004ce8:	e0db      	b.n	8004ea2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004cea:	4b73      	ldr	r3, [pc, #460]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x208>)
 8004cec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004cee:	e0d8      	b.n	8004ea2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cf0:	4b6f      	ldr	r3, [pc, #444]	; (8004eb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cf8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cfa:	4b6d      	ldr	r3, [pc, #436]	; (8004eb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d063      	beq.n	8004dce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d06:	4b6a      	ldr	r3, [pc, #424]	; (8004eb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	099b      	lsrs	r3, r3, #6
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d10:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d18:	633b      	str	r3, [r7, #48]	; 0x30
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	637b      	str	r3, [r7, #52]	; 0x34
 8004d1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004d22:	4622      	mov	r2, r4
 8004d24:	462b      	mov	r3, r5
 8004d26:	f04f 0000 	mov.w	r0, #0
 8004d2a:	f04f 0100 	mov.w	r1, #0
 8004d2e:	0159      	lsls	r1, r3, #5
 8004d30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d34:	0150      	lsls	r0, r2, #5
 8004d36:	4602      	mov	r2, r0
 8004d38:	460b      	mov	r3, r1
 8004d3a:	4621      	mov	r1, r4
 8004d3c:	1a51      	subs	r1, r2, r1
 8004d3e:	6139      	str	r1, [r7, #16]
 8004d40:	4629      	mov	r1, r5
 8004d42:	eb63 0301 	sbc.w	r3, r3, r1
 8004d46:	617b      	str	r3, [r7, #20]
 8004d48:	f04f 0200 	mov.w	r2, #0
 8004d4c:	f04f 0300 	mov.w	r3, #0
 8004d50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d54:	4659      	mov	r1, fp
 8004d56:	018b      	lsls	r3, r1, #6
 8004d58:	4651      	mov	r1, sl
 8004d5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d5e:	4651      	mov	r1, sl
 8004d60:	018a      	lsls	r2, r1, #6
 8004d62:	4651      	mov	r1, sl
 8004d64:	ebb2 0801 	subs.w	r8, r2, r1
 8004d68:	4659      	mov	r1, fp
 8004d6a:	eb63 0901 	sbc.w	r9, r3, r1
 8004d6e:	f04f 0200 	mov.w	r2, #0
 8004d72:	f04f 0300 	mov.w	r3, #0
 8004d76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d82:	4690      	mov	r8, r2
 8004d84:	4699      	mov	r9, r3
 8004d86:	4623      	mov	r3, r4
 8004d88:	eb18 0303 	adds.w	r3, r8, r3
 8004d8c:	60bb      	str	r3, [r7, #8]
 8004d8e:	462b      	mov	r3, r5
 8004d90:	eb49 0303 	adc.w	r3, r9, r3
 8004d94:	60fb      	str	r3, [r7, #12]
 8004d96:	f04f 0200 	mov.w	r2, #0
 8004d9a:	f04f 0300 	mov.w	r3, #0
 8004d9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004da2:	4629      	mov	r1, r5
 8004da4:	024b      	lsls	r3, r1, #9
 8004da6:	4621      	mov	r1, r4
 8004da8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004dac:	4621      	mov	r1, r4
 8004dae:	024a      	lsls	r2, r1, #9
 8004db0:	4610      	mov	r0, r2
 8004db2:	4619      	mov	r1, r3
 8004db4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004db6:	2200      	movs	r2, #0
 8004db8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004dc0:	f7fb fa18 	bl	80001f4 <__aeabi_uldivmod>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	4613      	mov	r3, r2
 8004dca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dcc:	e058      	b.n	8004e80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dce:	4b38      	ldr	r3, [pc, #224]	; (8004eb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	099b      	lsrs	r3, r3, #6
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	4611      	mov	r1, r2
 8004dda:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004dde:	623b      	str	r3, [r7, #32]
 8004de0:	2300      	movs	r3, #0
 8004de2:	627b      	str	r3, [r7, #36]	; 0x24
 8004de4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004de8:	4642      	mov	r2, r8
 8004dea:	464b      	mov	r3, r9
 8004dec:	f04f 0000 	mov.w	r0, #0
 8004df0:	f04f 0100 	mov.w	r1, #0
 8004df4:	0159      	lsls	r1, r3, #5
 8004df6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004dfa:	0150      	lsls	r0, r2, #5
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	460b      	mov	r3, r1
 8004e00:	4641      	mov	r1, r8
 8004e02:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e06:	4649      	mov	r1, r9
 8004e08:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e0c:	f04f 0200 	mov.w	r2, #0
 8004e10:	f04f 0300 	mov.w	r3, #0
 8004e14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e20:	ebb2 040a 	subs.w	r4, r2, sl
 8004e24:	eb63 050b 	sbc.w	r5, r3, fp
 8004e28:	f04f 0200 	mov.w	r2, #0
 8004e2c:	f04f 0300 	mov.w	r3, #0
 8004e30:	00eb      	lsls	r3, r5, #3
 8004e32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e36:	00e2      	lsls	r2, r4, #3
 8004e38:	4614      	mov	r4, r2
 8004e3a:	461d      	mov	r5, r3
 8004e3c:	4643      	mov	r3, r8
 8004e3e:	18e3      	adds	r3, r4, r3
 8004e40:	603b      	str	r3, [r7, #0]
 8004e42:	464b      	mov	r3, r9
 8004e44:	eb45 0303 	adc.w	r3, r5, r3
 8004e48:	607b      	str	r3, [r7, #4]
 8004e4a:	f04f 0200 	mov.w	r2, #0
 8004e4e:	f04f 0300 	mov.w	r3, #0
 8004e52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e56:	4629      	mov	r1, r5
 8004e58:	028b      	lsls	r3, r1, #10
 8004e5a:	4621      	mov	r1, r4
 8004e5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e60:	4621      	mov	r1, r4
 8004e62:	028a      	lsls	r2, r1, #10
 8004e64:	4610      	mov	r0, r2
 8004e66:	4619      	mov	r1, r3
 8004e68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	61bb      	str	r3, [r7, #24]
 8004e6e:	61fa      	str	r2, [r7, #28]
 8004e70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e74:	f7fb f9be 	bl	80001f4 <__aeabi_uldivmod>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e80:	4b0b      	ldr	r3, [pc, #44]	; (8004eb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	0c1b      	lsrs	r3, r3, #16
 8004e86:	f003 0303 	and.w	r3, r3, #3
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	005b      	lsls	r3, r3, #1
 8004e8e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004e90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e9a:	e002      	b.n	8004ea2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e9c:	4b05      	ldr	r3, [pc, #20]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e9e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ea0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ea2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3750      	adds	r7, #80	; 0x50
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004eae:	bf00      	nop
 8004eb0:	40023800 	.word	0x40023800
 8004eb4:	00f42400 	.word	0x00f42400
 8004eb8:	007a1200 	.word	0x007a1200

08004ebc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ec0:	4b03      	ldr	r3, [pc, #12]	; (8004ed0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	20000000 	.word	0x20000000

08004ed4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ed8:	f7ff fff0 	bl	8004ebc <HAL_RCC_GetHCLKFreq>
 8004edc:	4602      	mov	r2, r0
 8004ede:	4b05      	ldr	r3, [pc, #20]	; (8004ef4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	0a9b      	lsrs	r3, r3, #10
 8004ee4:	f003 0307 	and.w	r3, r3, #7
 8004ee8:	4903      	ldr	r1, [pc, #12]	; (8004ef8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004eea:	5ccb      	ldrb	r3, [r1, r3]
 8004eec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	40023800 	.word	0x40023800
 8004ef8:	0800c9dc 	.word	0x0800c9dc

08004efc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	220f      	movs	r2, #15
 8004f0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004f0c:	4b12      	ldr	r3, [pc, #72]	; (8004f58 <HAL_RCC_GetClockConfig+0x5c>)
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f003 0203 	and.w	r2, r3, #3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004f18:	4b0f      	ldr	r3, [pc, #60]	; (8004f58 <HAL_RCC_GetClockConfig+0x5c>)
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004f24:	4b0c      	ldr	r3, [pc, #48]	; (8004f58 <HAL_RCC_GetClockConfig+0x5c>)
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004f30:	4b09      	ldr	r3, [pc, #36]	; (8004f58 <HAL_RCC_GetClockConfig+0x5c>)
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	08db      	lsrs	r3, r3, #3
 8004f36:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004f3e:	4b07      	ldr	r3, [pc, #28]	; (8004f5c <HAL_RCC_GetClockConfig+0x60>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0207 	and.w	r2, r3, #7
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	601a      	str	r2, [r3, #0]
}
 8004f4a:	bf00      	nop
 8004f4c:	370c      	adds	r7, #12
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr
 8004f56:	bf00      	nop
 8004f58:	40023800 	.word	0x40023800
 8004f5c:	40023c00 	.word	0x40023c00

08004f60 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0301 	and.w	r3, r3, #1
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d105      	bne.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d038      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f88:	4b68      	ldr	r3, [pc, #416]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f8e:	f7fc f971 	bl	8001274 <HAL_GetTick>
 8004f92:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f94:	e008      	b.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f96:	f7fc f96d 	bl	8001274 <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d901      	bls.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e0bd      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fa8:	4b61      	ldr	r3, [pc, #388]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1f0      	bne.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685a      	ldr	r2, [r3, #4]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	019b      	lsls	r3, r3, #6
 8004fbe:	431a      	orrs	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	071b      	lsls	r3, r3, #28
 8004fc6:	495a      	ldr	r1, [pc, #360]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004fce:	4b57      	ldr	r3, [pc, #348]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fd4:	f7fc f94e 	bl	8001274 <HAL_GetTick>
 8004fd8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fda:	e008      	b.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004fdc:	f7fc f94a 	bl	8001274 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d901      	bls.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e09a      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fee:	4b50      	ldr	r3, [pc, #320]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d0f0      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	2b00      	cmp	r3, #0
 8005004:	f000 8083 	beq.w	800510e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005008:	2300      	movs	r3, #0
 800500a:	60fb      	str	r3, [r7, #12]
 800500c:	4b48      	ldr	r3, [pc, #288]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800500e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005010:	4a47      	ldr	r2, [pc, #284]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005016:	6413      	str	r3, [r2, #64]	; 0x40
 8005018:	4b45      	ldr	r3, [pc, #276]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800501a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005020:	60fb      	str	r3, [r7, #12]
 8005022:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005024:	4b43      	ldr	r3, [pc, #268]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a42      	ldr	r2, [pc, #264]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800502a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800502e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005030:	f7fc f920 	bl	8001274 <HAL_GetTick>
 8005034:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005036:	e008      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005038:	f7fc f91c 	bl	8001274 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	2b02      	cmp	r3, #2
 8005044:	d901      	bls.n	800504a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e06c      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800504a:	4b3a      	ldr	r3, [pc, #232]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005052:	2b00      	cmp	r3, #0
 8005054:	d0f0      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005056:	4b36      	ldr	r3, [pc, #216]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800505a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800505e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d02f      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	429a      	cmp	r2, r3
 8005072:	d028      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005074:	4b2e      	ldr	r3, [pc, #184]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005078:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800507c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800507e:	4b2e      	ldr	r3, [pc, #184]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005080:	2201      	movs	r2, #1
 8005082:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005084:	4b2c      	ldr	r3, [pc, #176]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005086:	2200      	movs	r2, #0
 8005088:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800508a:	4a29      	ldr	r2, [pc, #164]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005090:	4b27      	ldr	r3, [pc, #156]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005094:	f003 0301 	and.w	r3, r3, #1
 8005098:	2b01      	cmp	r3, #1
 800509a:	d114      	bne.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800509c:	f7fc f8ea 	bl	8001274 <HAL_GetTick>
 80050a0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050a2:	e00a      	b.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050a4:	f7fc f8e6 	bl	8001274 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d901      	bls.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e034      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050ba:	4b1d      	ldr	r3, [pc, #116]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d0ee      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050d2:	d10d      	bne.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80050d4:	4b16      	ldr	r3, [pc, #88]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80050e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050e8:	4911      	ldr	r1, [pc, #68]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	608b      	str	r3, [r1, #8]
 80050ee:	e005      	b.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80050f0:	4b0f      	ldr	r3, [pc, #60]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	4a0e      	ldr	r2, [pc, #56]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050f6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80050fa:	6093      	str	r3, [r2, #8]
 80050fc:	4b0c      	ldr	r3, [pc, #48]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005108:	4909      	ldr	r1, [pc, #36]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800510a:	4313      	orrs	r3, r2
 800510c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0308 	and.w	r3, r3, #8
 8005116:	2b00      	cmp	r3, #0
 8005118:	d003      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	7d1a      	ldrb	r2, [r3, #20]
 800511e:	4b07      	ldr	r3, [pc, #28]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005120:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3718      	adds	r7, #24
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	42470068 	.word	0x42470068
 8005130:	40023800 	.word	0x40023800
 8005134:	40007000 	.word	0x40007000
 8005138:	42470e40 	.word	0x42470e40
 800513c:	424711e0 	.word	0x424711e0

08005140 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005140:	b480      	push	{r7}
 8005142:	b087      	sub	sp, #28
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005148:	2300      	movs	r3, #0
 800514a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800514c:	2300      	movs	r3, #0
 800514e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005150:	2300      	movs	r3, #0
 8005152:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005154:	2300      	movs	r3, #0
 8005156:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2b01      	cmp	r3, #1
 800515c:	d140      	bne.n	80051e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800515e:	4b24      	ldr	r3, [pc, #144]	; (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005166:	60fb      	str	r3, [r7, #12]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d005      	beq.n	800517a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d131      	bne.n	80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005174:	4b1f      	ldr	r3, [pc, #124]	; (80051f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005176:	617b      	str	r3, [r7, #20]
          break;
 8005178:	e031      	b.n	80051de <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800517a:	4b1d      	ldr	r3, [pc, #116]	; (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005182:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005186:	d109      	bne.n	800519c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005188:	4b19      	ldr	r3, [pc, #100]	; (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800518a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800518e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005192:	4a19      	ldr	r2, [pc, #100]	; (80051f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005194:	fbb2 f3f3 	udiv	r3, r2, r3
 8005198:	613b      	str	r3, [r7, #16]
 800519a:	e008      	b.n	80051ae <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800519c:	4b14      	ldr	r3, [pc, #80]	; (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800519e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051a6:	4a15      	ldr	r2, [pc, #84]	; (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80051a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ac:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80051ae:	4b10      	ldr	r3, [pc, #64]	; (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80051b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051b4:	099b      	lsrs	r3, r3, #6
 80051b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	fb02 f303 	mul.w	r3, r2, r3
 80051c0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80051c2:	4b0b      	ldr	r3, [pc, #44]	; (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80051c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051c8:	0f1b      	lsrs	r3, r3, #28
 80051ca:	f003 0307 	and.w	r3, r3, #7
 80051ce:	68ba      	ldr	r2, [r7, #8]
 80051d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d4:	617b      	str	r3, [r7, #20]
          break;
 80051d6:	e002      	b.n	80051de <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80051d8:	2300      	movs	r3, #0
 80051da:	617b      	str	r3, [r7, #20]
          break;
 80051dc:	bf00      	nop
        }
      }
      break;
 80051de:	bf00      	nop
    }
  }
  return frequency;
 80051e0:	697b      	ldr	r3, [r7, #20]
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	371c      	adds	r7, #28
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	40023800 	.word	0x40023800
 80051f4:	00bb8000 	.word	0x00bb8000
 80051f8:	007a1200 	.word	0x007a1200
 80051fc:	00f42400 	.word	0x00f42400

08005200 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d101      	bne.n	8005212 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e07b      	b.n	800530a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005216:	2b00      	cmp	r3, #0
 8005218:	d108      	bne.n	800522c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005222:	d009      	beq.n	8005238 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	61da      	str	r2, [r3, #28]
 800522a:	e005      	b.n	8005238 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d106      	bne.n	8005258 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f7fb feae 	bl	8000fb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2202      	movs	r2, #2
 800525c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800526e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005280:	431a      	orrs	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800528a:	431a      	orrs	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	f003 0302 	and.w	r3, r3, #2
 8005294:	431a      	orrs	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	431a      	orrs	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052a8:	431a      	orrs	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	69db      	ldr	r3, [r3, #28]
 80052ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052b2:	431a      	orrs	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a1b      	ldr	r3, [r3, #32]
 80052b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052bc:	ea42 0103 	orr.w	r1, r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	430a      	orrs	r2, r1
 80052ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	699b      	ldr	r3, [r3, #24]
 80052d4:	0c1b      	lsrs	r3, r3, #16
 80052d6:	f003 0104 	and.w	r1, r3, #4
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052de:	f003 0210 	and.w	r2, r3, #16
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	430a      	orrs	r2, r1
 80052e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	69da      	ldr	r2, [r3, #28]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3708      	adds	r7, #8
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005312:	b580      	push	{r7, lr}
 8005314:	b082      	sub	sp, #8
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d101      	bne.n	8005324 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e041      	b.n	80053a8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800532a:	b2db      	uxtb	r3, r3
 800532c:	2b00      	cmp	r3, #0
 800532e:	d106      	bne.n	800533e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 f839 	bl	80053b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2202      	movs	r2, #2
 8005342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	3304      	adds	r3, #4
 800534e:	4619      	mov	r1, r3
 8005350:	4610      	mov	r0, r2
 8005352:	f000 f9c9 	bl	80056e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2201      	movs	r2, #1
 800535a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2201      	movs	r2, #1
 8005362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2201      	movs	r2, #1
 8005372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2201      	movs	r2, #1
 800537a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053a6:	2300      	movs	r3, #0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3708      	adds	r7, #8
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80053b8:	bf00      	nop
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d001      	beq.n	80053dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e044      	b.n	8005466 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2202      	movs	r2, #2
 80053e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68da      	ldr	r2, [r3, #12]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f042 0201 	orr.w	r2, r2, #1
 80053f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a1e      	ldr	r2, [pc, #120]	; (8005474 <HAL_TIM_Base_Start_IT+0xb0>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d018      	beq.n	8005430 <HAL_TIM_Base_Start_IT+0x6c>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005406:	d013      	beq.n	8005430 <HAL_TIM_Base_Start_IT+0x6c>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a1a      	ldr	r2, [pc, #104]	; (8005478 <HAL_TIM_Base_Start_IT+0xb4>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d00e      	beq.n	8005430 <HAL_TIM_Base_Start_IT+0x6c>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a19      	ldr	r2, [pc, #100]	; (800547c <HAL_TIM_Base_Start_IT+0xb8>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d009      	beq.n	8005430 <HAL_TIM_Base_Start_IT+0x6c>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a17      	ldr	r2, [pc, #92]	; (8005480 <HAL_TIM_Base_Start_IT+0xbc>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d004      	beq.n	8005430 <HAL_TIM_Base_Start_IT+0x6c>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a16      	ldr	r2, [pc, #88]	; (8005484 <HAL_TIM_Base_Start_IT+0xc0>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d111      	bne.n	8005454 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f003 0307 	and.w	r3, r3, #7
 800543a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2b06      	cmp	r3, #6
 8005440:	d010      	beq.n	8005464 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f042 0201 	orr.w	r2, r2, #1
 8005450:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005452:	e007      	b.n	8005464 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f042 0201 	orr.w	r2, r2, #1
 8005462:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3714      	adds	r7, #20
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	40010000 	.word	0x40010000
 8005478:	40000400 	.word	0x40000400
 800547c:	40000800 	.word	0x40000800
 8005480:	40000c00 	.word	0x40000c00
 8005484:	40014000 	.word	0x40014000

08005488 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	f003 0302 	and.w	r3, r3, #2
 800549a:	2b02      	cmp	r3, #2
 800549c:	d122      	bne.n	80054e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	f003 0302 	and.w	r3, r3, #2
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d11b      	bne.n	80054e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f06f 0202 	mvn.w	r2, #2
 80054b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2201      	movs	r2, #1
 80054ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	f003 0303 	and.w	r3, r3, #3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d003      	beq.n	80054d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f8ee 	bl	80056ac <HAL_TIM_IC_CaptureCallback>
 80054d0:	e005      	b.n	80054de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 f8e0 	bl	8005698 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 f8f1 	bl	80056c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	f003 0304 	and.w	r3, r3, #4
 80054ee:	2b04      	cmp	r3, #4
 80054f0:	d122      	bne.n	8005538 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	f003 0304 	and.w	r3, r3, #4
 80054fc:	2b04      	cmp	r3, #4
 80054fe:	d11b      	bne.n	8005538 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f06f 0204 	mvn.w	r2, #4
 8005508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2202      	movs	r2, #2
 800550e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800551a:	2b00      	cmp	r3, #0
 800551c:	d003      	beq.n	8005526 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 f8c4 	bl	80056ac <HAL_TIM_IC_CaptureCallback>
 8005524:	e005      	b.n	8005532 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 f8b6 	bl	8005698 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 f8c7 	bl	80056c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	f003 0308 	and.w	r3, r3, #8
 8005542:	2b08      	cmp	r3, #8
 8005544:	d122      	bne.n	800558c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	f003 0308 	and.w	r3, r3, #8
 8005550:	2b08      	cmp	r3, #8
 8005552:	d11b      	bne.n	800558c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f06f 0208 	mvn.w	r2, #8
 800555c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2204      	movs	r2, #4
 8005562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	69db      	ldr	r3, [r3, #28]
 800556a:	f003 0303 	and.w	r3, r3, #3
 800556e:	2b00      	cmp	r3, #0
 8005570:	d003      	beq.n	800557a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 f89a 	bl	80056ac <HAL_TIM_IC_CaptureCallback>
 8005578:	e005      	b.n	8005586 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 f88c 	bl	8005698 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 f89d 	bl	80056c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	f003 0310 	and.w	r3, r3, #16
 8005596:	2b10      	cmp	r3, #16
 8005598:	d122      	bne.n	80055e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	f003 0310 	and.w	r3, r3, #16
 80055a4:	2b10      	cmp	r3, #16
 80055a6:	d11b      	bne.n	80055e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f06f 0210 	mvn.w	r2, #16
 80055b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2208      	movs	r2, #8
 80055b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	69db      	ldr	r3, [r3, #28]
 80055be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d003      	beq.n	80055ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 f870 	bl	80056ac <HAL_TIM_IC_CaptureCallback>
 80055cc:	e005      	b.n	80055da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 f862 	bl	8005698 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 f873 	bl	80056c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d10e      	bne.n	800560c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	f003 0301 	and.w	r3, r3, #1
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d107      	bne.n	800560c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f06f 0201 	mvn.w	r2, #1
 8005604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f7fb fb7e 	bl	8000d08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005616:	2b80      	cmp	r3, #128	; 0x80
 8005618:	d10e      	bne.n	8005638 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005624:	2b80      	cmp	r3, #128	; 0x80
 8005626:	d107      	bne.n	8005638 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 f8e2 	bl	80057fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005642:	2b40      	cmp	r3, #64	; 0x40
 8005644:	d10e      	bne.n	8005664 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005650:	2b40      	cmp	r3, #64	; 0x40
 8005652:	d107      	bne.n	8005664 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800565c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 f838 	bl	80056d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	f003 0320 	and.w	r3, r3, #32
 800566e:	2b20      	cmp	r3, #32
 8005670:	d10e      	bne.n	8005690 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	f003 0320 	and.w	r3, r3, #32
 800567c:	2b20      	cmp	r3, #32
 800567e:	d107      	bne.n	8005690 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f06f 0220 	mvn.w	r2, #32
 8005688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 f8ac 	bl	80057e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005690:	bf00      	nop
 8005692:	3708      	adds	r7, #8
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056a0:	bf00      	nop
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056dc:	bf00      	nop
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a34      	ldr	r2, [pc, #208]	; (80057cc <TIM_Base_SetConfig+0xe4>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d00f      	beq.n	8005720 <TIM_Base_SetConfig+0x38>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005706:	d00b      	beq.n	8005720 <TIM_Base_SetConfig+0x38>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a31      	ldr	r2, [pc, #196]	; (80057d0 <TIM_Base_SetConfig+0xe8>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d007      	beq.n	8005720 <TIM_Base_SetConfig+0x38>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a30      	ldr	r2, [pc, #192]	; (80057d4 <TIM_Base_SetConfig+0xec>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d003      	beq.n	8005720 <TIM_Base_SetConfig+0x38>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a2f      	ldr	r2, [pc, #188]	; (80057d8 <TIM_Base_SetConfig+0xf0>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d108      	bne.n	8005732 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005726:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	4313      	orrs	r3, r2
 8005730:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a25      	ldr	r2, [pc, #148]	; (80057cc <TIM_Base_SetConfig+0xe4>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d01b      	beq.n	8005772 <TIM_Base_SetConfig+0x8a>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005740:	d017      	beq.n	8005772 <TIM_Base_SetConfig+0x8a>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a22      	ldr	r2, [pc, #136]	; (80057d0 <TIM_Base_SetConfig+0xe8>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d013      	beq.n	8005772 <TIM_Base_SetConfig+0x8a>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a21      	ldr	r2, [pc, #132]	; (80057d4 <TIM_Base_SetConfig+0xec>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d00f      	beq.n	8005772 <TIM_Base_SetConfig+0x8a>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a20      	ldr	r2, [pc, #128]	; (80057d8 <TIM_Base_SetConfig+0xf0>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d00b      	beq.n	8005772 <TIM_Base_SetConfig+0x8a>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a1f      	ldr	r2, [pc, #124]	; (80057dc <TIM_Base_SetConfig+0xf4>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d007      	beq.n	8005772 <TIM_Base_SetConfig+0x8a>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a1e      	ldr	r2, [pc, #120]	; (80057e0 <TIM_Base_SetConfig+0xf8>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d003      	beq.n	8005772 <TIM_Base_SetConfig+0x8a>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a1d      	ldr	r2, [pc, #116]	; (80057e4 <TIM_Base_SetConfig+0xfc>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d108      	bne.n	8005784 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005778:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	4313      	orrs	r3, r2
 8005782:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	4313      	orrs	r3, r2
 8005790:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	689a      	ldr	r2, [r3, #8]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a08      	ldr	r2, [pc, #32]	; (80057cc <TIM_Base_SetConfig+0xe4>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d103      	bne.n	80057b8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	691a      	ldr	r2, [r3, #16]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	615a      	str	r2, [r3, #20]
}
 80057be:	bf00      	nop
 80057c0:	3714      	adds	r7, #20
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	40010000 	.word	0x40010000
 80057d0:	40000400 	.word	0x40000400
 80057d4:	40000800 	.word	0x40000800
 80057d8:	40000c00 	.word	0x40000c00
 80057dc:	40014000 	.word	0x40014000
 80057e0:	40014400 	.word	0x40014400
 80057e4:	40014800 	.word	0x40014800

080057e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005810:	b084      	sub	sp, #16
 8005812:	b580      	push	{r7, lr}
 8005814:	b084      	sub	sp, #16
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
 800581a:	f107 001c 	add.w	r0, r7, #28
 800581e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005824:	2b01      	cmp	r3, #1
 8005826:	d122      	bne.n	800586e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800583c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005852:	2b01      	cmp	r3, #1
 8005854:	d105      	bne.n	8005862 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f001 fbee 	bl	8007044 <USB_CoreReset>
 8005868:	4603      	mov	r3, r0
 800586a:	73fb      	strb	r3, [r7, #15]
 800586c:	e01a      	b.n	80058a4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f001 fbe2 	bl	8007044 <USB_CoreReset>
 8005880:	4603      	mov	r3, r0
 8005882:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005886:	2b00      	cmp	r3, #0
 8005888:	d106      	bne.n	8005898 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	639a      	str	r2, [r3, #56]	; 0x38
 8005896:	e005      	b.n	80058a4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80058a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d10b      	bne.n	80058c2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f043 0206 	orr.w	r2, r3, #6
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f043 0220 	orr.w	r2, r3, #32
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80058c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3710      	adds	r7, #16
 80058c8:	46bd      	mov	sp, r7
 80058ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058ce:	b004      	add	sp, #16
 80058d0:	4770      	bx	lr
	...

080058d4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b087      	sub	sp, #28
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	4613      	mov	r3, r2
 80058e0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80058e2:	79fb      	ldrb	r3, [r7, #7]
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	d165      	bne.n	80059b4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	4a41      	ldr	r2, [pc, #260]	; (80059f0 <USB_SetTurnaroundTime+0x11c>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d906      	bls.n	80058fe <USB_SetTurnaroundTime+0x2a>
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	4a40      	ldr	r2, [pc, #256]	; (80059f4 <USB_SetTurnaroundTime+0x120>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d202      	bcs.n	80058fe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80058f8:	230f      	movs	r3, #15
 80058fa:	617b      	str	r3, [r7, #20]
 80058fc:	e062      	b.n	80059c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	4a3c      	ldr	r2, [pc, #240]	; (80059f4 <USB_SetTurnaroundTime+0x120>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d306      	bcc.n	8005914 <USB_SetTurnaroundTime+0x40>
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	4a3b      	ldr	r2, [pc, #236]	; (80059f8 <USB_SetTurnaroundTime+0x124>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d202      	bcs.n	8005914 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800590e:	230e      	movs	r3, #14
 8005910:	617b      	str	r3, [r7, #20]
 8005912:	e057      	b.n	80059c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	4a38      	ldr	r2, [pc, #224]	; (80059f8 <USB_SetTurnaroundTime+0x124>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d306      	bcc.n	800592a <USB_SetTurnaroundTime+0x56>
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	4a37      	ldr	r2, [pc, #220]	; (80059fc <USB_SetTurnaroundTime+0x128>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d202      	bcs.n	800592a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005924:	230d      	movs	r3, #13
 8005926:	617b      	str	r3, [r7, #20]
 8005928:	e04c      	b.n	80059c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	4a33      	ldr	r2, [pc, #204]	; (80059fc <USB_SetTurnaroundTime+0x128>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d306      	bcc.n	8005940 <USB_SetTurnaroundTime+0x6c>
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	4a32      	ldr	r2, [pc, #200]	; (8005a00 <USB_SetTurnaroundTime+0x12c>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d802      	bhi.n	8005940 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800593a:	230c      	movs	r3, #12
 800593c:	617b      	str	r3, [r7, #20]
 800593e:	e041      	b.n	80059c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	4a2f      	ldr	r2, [pc, #188]	; (8005a00 <USB_SetTurnaroundTime+0x12c>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d906      	bls.n	8005956 <USB_SetTurnaroundTime+0x82>
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	4a2e      	ldr	r2, [pc, #184]	; (8005a04 <USB_SetTurnaroundTime+0x130>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d802      	bhi.n	8005956 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005950:	230b      	movs	r3, #11
 8005952:	617b      	str	r3, [r7, #20]
 8005954:	e036      	b.n	80059c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	4a2a      	ldr	r2, [pc, #168]	; (8005a04 <USB_SetTurnaroundTime+0x130>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d906      	bls.n	800596c <USB_SetTurnaroundTime+0x98>
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	4a29      	ldr	r2, [pc, #164]	; (8005a08 <USB_SetTurnaroundTime+0x134>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d802      	bhi.n	800596c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005966:	230a      	movs	r3, #10
 8005968:	617b      	str	r3, [r7, #20]
 800596a:	e02b      	b.n	80059c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	4a26      	ldr	r2, [pc, #152]	; (8005a08 <USB_SetTurnaroundTime+0x134>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d906      	bls.n	8005982 <USB_SetTurnaroundTime+0xae>
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	4a25      	ldr	r2, [pc, #148]	; (8005a0c <USB_SetTurnaroundTime+0x138>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d202      	bcs.n	8005982 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800597c:	2309      	movs	r3, #9
 800597e:	617b      	str	r3, [r7, #20]
 8005980:	e020      	b.n	80059c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	4a21      	ldr	r2, [pc, #132]	; (8005a0c <USB_SetTurnaroundTime+0x138>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d306      	bcc.n	8005998 <USB_SetTurnaroundTime+0xc4>
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	4a20      	ldr	r2, [pc, #128]	; (8005a10 <USB_SetTurnaroundTime+0x13c>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d802      	bhi.n	8005998 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005992:	2308      	movs	r3, #8
 8005994:	617b      	str	r3, [r7, #20]
 8005996:	e015      	b.n	80059c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	4a1d      	ldr	r2, [pc, #116]	; (8005a10 <USB_SetTurnaroundTime+0x13c>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d906      	bls.n	80059ae <USB_SetTurnaroundTime+0xda>
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	4a1c      	ldr	r2, [pc, #112]	; (8005a14 <USB_SetTurnaroundTime+0x140>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d202      	bcs.n	80059ae <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80059a8:	2307      	movs	r3, #7
 80059aa:	617b      	str	r3, [r7, #20]
 80059ac:	e00a      	b.n	80059c4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80059ae:	2306      	movs	r3, #6
 80059b0:	617b      	str	r3, [r7, #20]
 80059b2:	e007      	b.n	80059c4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80059b4:	79fb      	ldrb	r3, [r7, #7]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d102      	bne.n	80059c0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80059ba:	2309      	movs	r3, #9
 80059bc:	617b      	str	r3, [r7, #20]
 80059be:	e001      	b.n	80059c4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80059c0:	2309      	movs	r3, #9
 80059c2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	68da      	ldr	r2, [r3, #12]
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	029b      	lsls	r3, r3, #10
 80059d8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80059dc:	431a      	orrs	r2, r3
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	371c      	adds	r7, #28
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr
 80059f0:	00d8acbf 	.word	0x00d8acbf
 80059f4:	00e4e1c0 	.word	0x00e4e1c0
 80059f8:	00f42400 	.word	0x00f42400
 80059fc:	01067380 	.word	0x01067380
 8005a00:	011a499f 	.word	0x011a499f
 8005a04:	01312cff 	.word	0x01312cff
 8005a08:	014ca43f 	.word	0x014ca43f
 8005a0c:	016e3600 	.word	0x016e3600
 8005a10:	01a6ab1f 	.word	0x01a6ab1f
 8005a14:	01e84800 	.word	0x01e84800

08005a18 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	f043 0201 	orr.w	r2, r3, #1
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	370c      	adds	r7, #12
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr

08005a3a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a3a:	b480      	push	{r7}
 8005a3c:	b083      	sub	sp, #12
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f023 0201 	bic.w	r2, r3, #1
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	460b      	mov	r3, r1
 8005a66:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a78:	78fb      	ldrb	r3, [r7, #3]
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d115      	bne.n	8005aaa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005a8a:	2001      	movs	r0, #1
 8005a8c:	f7fb fbfe 	bl	800128c <HAL_Delay>
      ms++;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	3301      	adds	r3, #1
 8005a94:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f001 fa45 	bl	8006f26 <USB_GetMode>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d01e      	beq.n	8005ae0 <USB_SetCurrentMode+0x84>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2b31      	cmp	r3, #49	; 0x31
 8005aa6:	d9f0      	bls.n	8005a8a <USB_SetCurrentMode+0x2e>
 8005aa8:	e01a      	b.n	8005ae0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005aaa:	78fb      	ldrb	r3, [r7, #3]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d115      	bne.n	8005adc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005abc:	2001      	movs	r0, #1
 8005abe:	f7fb fbe5 	bl	800128c <HAL_Delay>
      ms++;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f001 fa2c 	bl	8006f26 <USB_GetMode>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d005      	beq.n	8005ae0 <USB_SetCurrentMode+0x84>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2b31      	cmp	r3, #49	; 0x31
 8005ad8:	d9f0      	bls.n	8005abc <USB_SetCurrentMode+0x60>
 8005ada:	e001      	b.n	8005ae0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e005      	b.n	8005aec <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2b32      	cmp	r3, #50	; 0x32
 8005ae4:	d101      	bne.n	8005aea <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e000      	b.n	8005aec <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005af4:	b084      	sub	sp, #16
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b086      	sub	sp, #24
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
 8005afe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005b02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005b06:	2300      	movs	r3, #0
 8005b08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005b0e:	2300      	movs	r3, #0
 8005b10:	613b      	str	r3, [r7, #16]
 8005b12:	e009      	b.n	8005b28 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	3340      	adds	r3, #64	; 0x40
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	4413      	add	r3, r2
 8005b1e:	2200      	movs	r2, #0
 8005b20:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	3301      	adds	r3, #1
 8005b26:	613b      	str	r3, [r7, #16]
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	2b0e      	cmp	r3, #14
 8005b2c:	d9f2      	bls.n	8005b14 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005b2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d11c      	bne.n	8005b6e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b42:	f043 0302 	orr.w	r3, r3, #2
 8005b46:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b58:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b64:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	639a      	str	r2, [r3, #56]	; 0x38
 8005b6c:	e00b      	b.n	8005b86 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b72:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	2300      	movs	r3, #0
 8005b90:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b98:	4619      	mov	r1, r3
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	680b      	ldr	r3, [r1, #0]
 8005ba4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d10c      	bne.n	8005bc6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d104      	bne.n	8005bbc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005bb2:	2100      	movs	r1, #0
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 f965 	bl	8005e84 <USB_SetDevSpeed>
 8005bba:	e008      	b.n	8005bce <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005bbc:	2101      	movs	r1, #1
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f960 	bl	8005e84 <USB_SetDevSpeed>
 8005bc4:	e003      	b.n	8005bce <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005bc6:	2103      	movs	r1, #3
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 f95b 	bl	8005e84 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005bce:	2110      	movs	r1, #16
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 f8f3 	bl	8005dbc <USB_FlushTxFifo>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d001      	beq.n	8005be0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f000 f91f 	bl	8005e24 <USB_FlushRxFifo>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d001      	beq.n	8005bf0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c02:	461a      	mov	r2, r3
 8005c04:	2300      	movs	r3, #0
 8005c06:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c0e:	461a      	mov	r2, r3
 8005c10:	2300      	movs	r3, #0
 8005c12:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c14:	2300      	movs	r3, #0
 8005c16:	613b      	str	r3, [r7, #16]
 8005c18:	e043      	b.n	8005ca2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	015a      	lsls	r2, r3, #5
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	4413      	add	r3, r2
 8005c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c30:	d118      	bne.n	8005c64 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d10a      	bne.n	8005c4e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	015a      	lsls	r2, r3, #5
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	4413      	add	r3, r2
 8005c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c44:	461a      	mov	r2, r3
 8005c46:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c4a:	6013      	str	r3, [r2, #0]
 8005c4c:	e013      	b.n	8005c76 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	015a      	lsls	r2, r3, #5
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	4413      	add	r3, r2
 8005c56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005c60:	6013      	str	r3, [r2, #0]
 8005c62:	e008      	b.n	8005c76 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	015a      	lsls	r2, r3, #5
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c70:	461a      	mov	r2, r3
 8005c72:	2300      	movs	r3, #0
 8005c74:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	015a      	lsls	r2, r3, #5
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c82:	461a      	mov	r2, r3
 8005c84:	2300      	movs	r3, #0
 8005c86:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	015a      	lsls	r2, r3, #5
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	4413      	add	r3, r2
 8005c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c94:	461a      	mov	r2, r3
 8005c96:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c9a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	613b      	str	r3, [r7, #16]
 8005ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d3b7      	bcc.n	8005c1a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005caa:	2300      	movs	r3, #0
 8005cac:	613b      	str	r3, [r7, #16]
 8005cae:	e043      	b.n	8005d38 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	015a      	lsls	r2, r3, #5
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cc6:	d118      	bne.n	8005cfa <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10a      	bne.n	8005ce4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	015a      	lsls	r2, r3, #5
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cda:	461a      	mov	r2, r3
 8005cdc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005ce0:	6013      	str	r3, [r2, #0]
 8005ce2:	e013      	b.n	8005d0c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	015a      	lsls	r2, r3, #5
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	4413      	add	r3, r2
 8005cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005cf6:	6013      	str	r3, [r2, #0]
 8005cf8:	e008      	b.n	8005d0c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	015a      	lsls	r2, r3, #5
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	4413      	add	r3, r2
 8005d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d06:	461a      	mov	r2, r3
 8005d08:	2300      	movs	r3, #0
 8005d0a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	015a      	lsls	r2, r3, #5
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	4413      	add	r3, r2
 8005d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d18:	461a      	mov	r2, r3
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	015a      	lsls	r2, r3, #5
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	4413      	add	r3, r2
 8005d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d30:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	3301      	adds	r3, #1
 8005d36:	613b      	str	r3, [r7, #16]
 8005d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3a:	693a      	ldr	r2, [r7, #16]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d3b7      	bcc.n	8005cb0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d52:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005d60:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d105      	bne.n	8005d74 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	f043 0210 	orr.w	r2, r3, #16
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	699a      	ldr	r2, [r3, #24]
 8005d78:	4b0f      	ldr	r3, [pc, #60]	; (8005db8 <USB_DevInit+0x2c4>)
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d005      	beq.n	8005d92 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	f043 0208 	orr.w	r2, r3, #8
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005d92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d107      	bne.n	8005da8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	699b      	ldr	r3, [r3, #24]
 8005d9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005da0:	f043 0304 	orr.w	r3, r3, #4
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005da8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3718      	adds	r7, #24
 8005dae:	46bd      	mov	sp, r7
 8005db0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005db4:	b004      	add	sp, #16
 8005db6:	4770      	bx	lr
 8005db8:	803c3800 	.word	0x803c3800

08005dbc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	3301      	adds	r3, #1
 8005dce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	4a13      	ldr	r2, [pc, #76]	; (8005e20 <USB_FlushTxFifo+0x64>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d901      	bls.n	8005ddc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e01b      	b.n	8005e14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	daf2      	bge.n	8005dca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005de4:	2300      	movs	r3, #0
 8005de6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	019b      	lsls	r3, r3, #6
 8005dec:	f043 0220 	orr.w	r2, r3, #32
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	3301      	adds	r3, #1
 8005df8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	4a08      	ldr	r2, [pc, #32]	; (8005e20 <USB_FlushTxFifo+0x64>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d901      	bls.n	8005e06 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e006      	b.n	8005e14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	f003 0320 	and.w	r3, r3, #32
 8005e0e:	2b20      	cmp	r3, #32
 8005e10:	d0f0      	beq.n	8005df4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3714      	adds	r7, #20
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr
 8005e20:	00030d40 	.word	0x00030d40

08005e24 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	3301      	adds	r3, #1
 8005e34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	4a11      	ldr	r2, [pc, #68]	; (8005e80 <USB_FlushRxFifo+0x5c>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d901      	bls.n	8005e42 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e018      	b.n	8005e74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	daf2      	bge.n	8005e30 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2210      	movs	r2, #16
 8005e52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	3301      	adds	r3, #1
 8005e58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	4a08      	ldr	r2, [pc, #32]	; (8005e80 <USB_FlushRxFifo+0x5c>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d901      	bls.n	8005e66 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e006      	b.n	8005e74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	f003 0310 	and.w	r3, r3, #16
 8005e6e:	2b10      	cmp	r3, #16
 8005e70:	d0f0      	beq.n	8005e54 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3714      	adds	r7, #20
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr
 8005e80:	00030d40 	.word	0x00030d40

08005e84 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	78fb      	ldrb	r3, [r7, #3]
 8005e9e:	68f9      	ldr	r1, [r7, #12]
 8005ea0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3714      	adds	r7, #20
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr

08005eb6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005eb6:	b480      	push	{r7}
 8005eb8:	b087      	sub	sp, #28
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	f003 0306 	and.w	r3, r3, #6
 8005ece:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d102      	bne.n	8005edc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	75fb      	strb	r3, [r7, #23]
 8005eda:	e00a      	b.n	8005ef2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d002      	beq.n	8005ee8 <USB_GetDevSpeed+0x32>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2b06      	cmp	r3, #6
 8005ee6:	d102      	bne.n	8005eee <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005ee8:	2302      	movs	r3, #2
 8005eea:	75fb      	strb	r3, [r7, #23]
 8005eec:	e001      	b.n	8005ef2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005eee:	230f      	movs	r3, #15
 8005ef0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	371c      	adds	r7, #28
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b085      	sub	sp, #20
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	785b      	ldrb	r3, [r3, #1]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d13a      	bne.n	8005f92 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f22:	69da      	ldr	r2, [r3, #28]
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	f003 030f 	and.w	r3, r3, #15
 8005f2c:	2101      	movs	r1, #1
 8005f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	68f9      	ldr	r1, [r7, #12]
 8005f36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	015a      	lsls	r2, r3, #5
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	4413      	add	r3, r2
 8005f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d155      	bne.n	8006000 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	015a      	lsls	r2, r3, #5
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	791b      	ldrb	r3, [r3, #4]
 8005f6e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f70:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	059b      	lsls	r3, r3, #22
 8005f76:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	68ba      	ldr	r2, [r7, #8]
 8005f7c:	0151      	lsls	r1, r2, #5
 8005f7e:	68fa      	ldr	r2, [r7, #12]
 8005f80:	440a      	add	r2, r1
 8005f82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f8e:	6013      	str	r3, [r2, #0]
 8005f90:	e036      	b.n	8006000 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f98:	69da      	ldr	r2, [r3, #28]
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	f003 030f 	and.w	r3, r3, #15
 8005fa2:	2101      	movs	r1, #1
 8005fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8005fa8:	041b      	lsls	r3, r3, #16
 8005faa:	68f9      	ldr	r1, [r7, #12]
 8005fac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	015a      	lsls	r2, r3, #5
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d11a      	bne.n	8006000 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	015a      	lsls	r2, r3, #5
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	791b      	ldrb	r3, [r3, #4]
 8005fe4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005fe6:	430b      	orrs	r3, r1
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	68ba      	ldr	r2, [r7, #8]
 8005fec:	0151      	lsls	r1, r2, #5
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	440a      	add	r2, r1
 8005ff2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ff6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ffa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ffe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	3714      	adds	r7, #20
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr
	...

08006010 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	785b      	ldrb	r3, [r3, #1]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d161      	bne.n	80060f0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	015a      	lsls	r2, r3, #5
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	4413      	add	r3, r2
 8006034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800603e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006042:	d11f      	bne.n	8006084 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	015a      	lsls	r2, r3, #5
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	4413      	add	r3, r2
 800604c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68ba      	ldr	r2, [r7, #8]
 8006054:	0151      	lsls	r1, r2, #5
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	440a      	add	r2, r1
 800605a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800605e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006062:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	015a      	lsls	r2, r3, #5
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	4413      	add	r3, r2
 800606c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68ba      	ldr	r2, [r7, #8]
 8006074:	0151      	lsls	r1, r2, #5
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	440a      	add	r2, r1
 800607a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800607e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006082:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800608a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	f003 030f 	and.w	r3, r3, #15
 8006094:	2101      	movs	r1, #1
 8006096:	fa01 f303 	lsl.w	r3, r1, r3
 800609a:	b29b      	uxth	r3, r3
 800609c:	43db      	mvns	r3, r3
 800609e:	68f9      	ldr	r1, [r7, #12]
 80060a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060a4:	4013      	ands	r3, r2
 80060a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ae:	69da      	ldr	r2, [r3, #28]
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	f003 030f 	and.w	r3, r3, #15
 80060b8:	2101      	movs	r1, #1
 80060ba:	fa01 f303 	lsl.w	r3, r1, r3
 80060be:	b29b      	uxth	r3, r3
 80060c0:	43db      	mvns	r3, r3
 80060c2:	68f9      	ldr	r1, [r7, #12]
 80060c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060c8:	4013      	ands	r3, r2
 80060ca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	015a      	lsls	r2, r3, #5
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	4413      	add	r3, r2
 80060d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	0159      	lsls	r1, r3, #5
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	440b      	add	r3, r1
 80060e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e6:	4619      	mov	r1, r3
 80060e8:	4b35      	ldr	r3, [pc, #212]	; (80061c0 <USB_DeactivateEndpoint+0x1b0>)
 80060ea:	4013      	ands	r3, r2
 80060ec:	600b      	str	r3, [r1, #0]
 80060ee:	e060      	b.n	80061b2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	015a      	lsls	r2, r3, #5
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	4413      	add	r3, r2
 80060f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006102:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006106:	d11f      	bne.n	8006148 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	015a      	lsls	r2, r3, #5
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	4413      	add	r3, r2
 8006110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68ba      	ldr	r2, [r7, #8]
 8006118:	0151      	lsls	r1, r2, #5
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	440a      	add	r2, r1
 800611e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006122:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006126:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	015a      	lsls	r2, r3, #5
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	4413      	add	r3, r2
 8006130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68ba      	ldr	r2, [r7, #8]
 8006138:	0151      	lsls	r1, r2, #5
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	440a      	add	r2, r1
 800613e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006142:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006146:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800614e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	f003 030f 	and.w	r3, r3, #15
 8006158:	2101      	movs	r1, #1
 800615a:	fa01 f303 	lsl.w	r3, r1, r3
 800615e:	041b      	lsls	r3, r3, #16
 8006160:	43db      	mvns	r3, r3
 8006162:	68f9      	ldr	r1, [r7, #12]
 8006164:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006168:	4013      	ands	r3, r2
 800616a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006172:	69da      	ldr	r2, [r3, #28]
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	f003 030f 	and.w	r3, r3, #15
 800617c:	2101      	movs	r1, #1
 800617e:	fa01 f303 	lsl.w	r3, r1, r3
 8006182:	041b      	lsls	r3, r3, #16
 8006184:	43db      	mvns	r3, r3
 8006186:	68f9      	ldr	r1, [r7, #12]
 8006188:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800618c:	4013      	ands	r3, r2
 800618e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	015a      	lsls	r2, r3, #5
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	4413      	add	r3, r2
 8006198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	0159      	lsls	r1, r3, #5
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	440b      	add	r3, r1
 80061a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061aa:	4619      	mov	r1, r3
 80061ac:	4b05      	ldr	r3, [pc, #20]	; (80061c4 <USB_DeactivateEndpoint+0x1b4>)
 80061ae:	4013      	ands	r3, r2
 80061b0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80061b2:	2300      	movs	r3, #0
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3714      	adds	r7, #20
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr
 80061c0:	ec337800 	.word	0xec337800
 80061c4:	eff37800 	.word	0xeff37800

080061c8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b08a      	sub	sp, #40	; 0x28
 80061cc:	af02      	add	r7, sp, #8
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	4613      	mov	r3, r2
 80061d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	785b      	ldrb	r3, [r3, #1]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	f040 815c 	bne.w	80064a2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	699b      	ldr	r3, [r3, #24]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d132      	bne.n	8006258 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	015a      	lsls	r2, r3, #5
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	4413      	add	r3, r2
 80061fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	69ba      	ldr	r2, [r7, #24]
 8006202:	0151      	lsls	r1, r2, #5
 8006204:	69fa      	ldr	r2, [r7, #28]
 8006206:	440a      	add	r2, r1
 8006208:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800620c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006210:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006214:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	015a      	lsls	r2, r3, #5
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	4413      	add	r3, r2
 800621e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006222:	691b      	ldr	r3, [r3, #16]
 8006224:	69ba      	ldr	r2, [r7, #24]
 8006226:	0151      	lsls	r1, r2, #5
 8006228:	69fa      	ldr	r2, [r7, #28]
 800622a:	440a      	add	r2, r1
 800622c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006230:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006234:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	015a      	lsls	r2, r3, #5
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	4413      	add	r3, r2
 800623e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	69ba      	ldr	r2, [r7, #24]
 8006246:	0151      	lsls	r1, r2, #5
 8006248:	69fa      	ldr	r2, [r7, #28]
 800624a:	440a      	add	r2, r1
 800624c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006250:	0cdb      	lsrs	r3, r3, #19
 8006252:	04db      	lsls	r3, r3, #19
 8006254:	6113      	str	r3, [r2, #16]
 8006256:	e074      	b.n	8006342 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	015a      	lsls	r2, r3, #5
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	4413      	add	r3, r2
 8006260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	69ba      	ldr	r2, [r7, #24]
 8006268:	0151      	lsls	r1, r2, #5
 800626a:	69fa      	ldr	r2, [r7, #28]
 800626c:	440a      	add	r2, r1
 800626e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006272:	0cdb      	lsrs	r3, r3, #19
 8006274:	04db      	lsls	r3, r3, #19
 8006276:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	015a      	lsls	r2, r3, #5
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	4413      	add	r3, r2
 8006280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	69ba      	ldr	r2, [r7, #24]
 8006288:	0151      	lsls	r1, r2, #5
 800628a:	69fa      	ldr	r2, [r7, #28]
 800628c:	440a      	add	r2, r1
 800628e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006292:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006296:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800629a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	015a      	lsls	r2, r3, #5
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	4413      	add	r3, r2
 80062a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062a8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	6999      	ldr	r1, [r3, #24]
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	440b      	add	r3, r1
 80062b4:	1e59      	subs	r1, r3, #1
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80062be:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80062c0:	4b9d      	ldr	r3, [pc, #628]	; (8006538 <USB_EPStartXfer+0x370>)
 80062c2:	400b      	ands	r3, r1
 80062c4:	69b9      	ldr	r1, [r7, #24]
 80062c6:	0148      	lsls	r0, r1, #5
 80062c8:	69f9      	ldr	r1, [r7, #28]
 80062ca:	4401      	add	r1, r0
 80062cc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80062d0:	4313      	orrs	r3, r2
 80062d2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	015a      	lsls	r2, r3, #5
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	4413      	add	r3, r2
 80062dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062e0:	691a      	ldr	r2, [r3, #16]
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	699b      	ldr	r3, [r3, #24]
 80062e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062ea:	69b9      	ldr	r1, [r7, #24]
 80062ec:	0148      	lsls	r0, r1, #5
 80062ee:	69f9      	ldr	r1, [r7, #28]
 80062f0:	4401      	add	r1, r0
 80062f2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80062f6:	4313      	orrs	r3, r2
 80062f8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	791b      	ldrb	r3, [r3, #4]
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d11f      	bne.n	8006342 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	015a      	lsls	r2, r3, #5
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	4413      	add	r3, r2
 800630a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	69ba      	ldr	r2, [r7, #24]
 8006312:	0151      	lsls	r1, r2, #5
 8006314:	69fa      	ldr	r2, [r7, #28]
 8006316:	440a      	add	r2, r1
 8006318:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800631c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006320:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	015a      	lsls	r2, r3, #5
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	4413      	add	r3, r2
 800632a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800632e:	691b      	ldr	r3, [r3, #16]
 8006330:	69ba      	ldr	r2, [r7, #24]
 8006332:	0151      	lsls	r1, r2, #5
 8006334:	69fa      	ldr	r2, [r7, #28]
 8006336:	440a      	add	r2, r1
 8006338:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800633c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006340:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006342:	79fb      	ldrb	r3, [r7, #7]
 8006344:	2b01      	cmp	r3, #1
 8006346:	d14b      	bne.n	80063e0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	695b      	ldr	r3, [r3, #20]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d009      	beq.n	8006364 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	015a      	lsls	r2, r3, #5
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	4413      	add	r3, r2
 8006358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800635c:	461a      	mov	r2, r3
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	791b      	ldrb	r3, [r3, #4]
 8006368:	2b01      	cmp	r3, #1
 800636a:	d128      	bne.n	80063be <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006378:	2b00      	cmp	r3, #0
 800637a:	d110      	bne.n	800639e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	015a      	lsls	r2, r3, #5
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	4413      	add	r3, r2
 8006384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	69ba      	ldr	r2, [r7, #24]
 800638c:	0151      	lsls	r1, r2, #5
 800638e:	69fa      	ldr	r2, [r7, #28]
 8006390:	440a      	add	r2, r1
 8006392:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006396:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800639a:	6013      	str	r3, [r2, #0]
 800639c:	e00f      	b.n	80063be <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	015a      	lsls	r2, r3, #5
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	4413      	add	r3, r2
 80063a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	69ba      	ldr	r2, [r7, #24]
 80063ae:	0151      	lsls	r1, r2, #5
 80063b0:	69fa      	ldr	r2, [r7, #28]
 80063b2:	440a      	add	r2, r1
 80063b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063bc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	015a      	lsls	r2, r3, #5
 80063c2:	69fb      	ldr	r3, [r7, #28]
 80063c4:	4413      	add	r3, r2
 80063c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	69ba      	ldr	r2, [r7, #24]
 80063ce:	0151      	lsls	r1, r2, #5
 80063d0:	69fa      	ldr	r2, [r7, #28]
 80063d2:	440a      	add	r2, r1
 80063d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063dc:	6013      	str	r3, [r2, #0]
 80063de:	e133      	b.n	8006648 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	015a      	lsls	r2, r3, #5
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	4413      	add	r3, r2
 80063e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	69ba      	ldr	r2, [r7, #24]
 80063f0:	0151      	lsls	r1, r2, #5
 80063f2:	69fa      	ldr	r2, [r7, #28]
 80063f4:	440a      	add	r2, r1
 80063f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063fe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	791b      	ldrb	r3, [r3, #4]
 8006404:	2b01      	cmp	r3, #1
 8006406:	d015      	beq.n	8006434 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	699b      	ldr	r3, [r3, #24]
 800640c:	2b00      	cmp	r3, #0
 800640e:	f000 811b 	beq.w	8006648 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006418:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	f003 030f 	and.w	r3, r3, #15
 8006422:	2101      	movs	r1, #1
 8006424:	fa01 f303 	lsl.w	r3, r1, r3
 8006428:	69f9      	ldr	r1, [r7, #28]
 800642a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800642e:	4313      	orrs	r3, r2
 8006430:	634b      	str	r3, [r1, #52]	; 0x34
 8006432:	e109      	b.n	8006648 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006440:	2b00      	cmp	r3, #0
 8006442:	d110      	bne.n	8006466 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	015a      	lsls	r2, r3, #5
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	4413      	add	r3, r2
 800644c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	69ba      	ldr	r2, [r7, #24]
 8006454:	0151      	lsls	r1, r2, #5
 8006456:	69fa      	ldr	r2, [r7, #28]
 8006458:	440a      	add	r2, r1
 800645a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800645e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006462:	6013      	str	r3, [r2, #0]
 8006464:	e00f      	b.n	8006486 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	015a      	lsls	r2, r3, #5
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	4413      	add	r3, r2
 800646e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	69ba      	ldr	r2, [r7, #24]
 8006476:	0151      	lsls	r1, r2, #5
 8006478:	69fa      	ldr	r2, [r7, #28]
 800647a:	440a      	add	r2, r1
 800647c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006484:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	6919      	ldr	r1, [r3, #16]
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	781a      	ldrb	r2, [r3, #0]
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	699b      	ldr	r3, [r3, #24]
 8006492:	b298      	uxth	r0, r3
 8006494:	79fb      	ldrb	r3, [r7, #7]
 8006496:	9300      	str	r3, [sp, #0]
 8006498:	4603      	mov	r3, r0
 800649a:	68f8      	ldr	r0, [r7, #12]
 800649c:	f000 fade 	bl	8006a5c <USB_WritePacket>
 80064a0:	e0d2      	b.n	8006648 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	015a      	lsls	r2, r3, #5
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	4413      	add	r3, r2
 80064aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	69ba      	ldr	r2, [r7, #24]
 80064b2:	0151      	lsls	r1, r2, #5
 80064b4:	69fa      	ldr	r2, [r7, #28]
 80064b6:	440a      	add	r2, r1
 80064b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064bc:	0cdb      	lsrs	r3, r3, #19
 80064be:	04db      	lsls	r3, r3, #19
 80064c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	015a      	lsls	r2, r3, #5
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	4413      	add	r3, r2
 80064ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	69ba      	ldr	r2, [r7, #24]
 80064d2:	0151      	lsls	r1, r2, #5
 80064d4:	69fa      	ldr	r2, [r7, #28]
 80064d6:	440a      	add	r2, r1
 80064d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80064e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80064e4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	699b      	ldr	r3, [r3, #24]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d126      	bne.n	800653c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	015a      	lsls	r2, r3, #5
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	4413      	add	r3, r2
 80064f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064fa:	691a      	ldr	r2, [r3, #16]
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006504:	69b9      	ldr	r1, [r7, #24]
 8006506:	0148      	lsls	r0, r1, #5
 8006508:	69f9      	ldr	r1, [r7, #28]
 800650a:	4401      	add	r1, r0
 800650c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006510:	4313      	orrs	r3, r2
 8006512:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	015a      	lsls	r2, r3, #5
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	4413      	add	r3, r2
 800651c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	69ba      	ldr	r2, [r7, #24]
 8006524:	0151      	lsls	r1, r2, #5
 8006526:	69fa      	ldr	r2, [r7, #28]
 8006528:	440a      	add	r2, r1
 800652a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800652e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006532:	6113      	str	r3, [r2, #16]
 8006534:	e03a      	b.n	80065ac <USB_EPStartXfer+0x3e4>
 8006536:	bf00      	nop
 8006538:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	699a      	ldr	r2, [r3, #24]
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	4413      	add	r3, r2
 8006546:	1e5a      	subs	r2, r3, #1
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006550:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	8afa      	ldrh	r2, [r7, #22]
 8006558:	fb03 f202 	mul.w	r2, r3, r2
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	015a      	lsls	r2, r3, #5
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	4413      	add	r3, r2
 8006568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800656c:	691a      	ldr	r2, [r3, #16]
 800656e:	8afb      	ldrh	r3, [r7, #22]
 8006570:	04d9      	lsls	r1, r3, #19
 8006572:	4b38      	ldr	r3, [pc, #224]	; (8006654 <USB_EPStartXfer+0x48c>)
 8006574:	400b      	ands	r3, r1
 8006576:	69b9      	ldr	r1, [r7, #24]
 8006578:	0148      	lsls	r0, r1, #5
 800657a:	69f9      	ldr	r1, [r7, #28]
 800657c:	4401      	add	r1, r0
 800657e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006582:	4313      	orrs	r3, r2
 8006584:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	015a      	lsls	r2, r3, #5
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	4413      	add	r3, r2
 800658e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006592:	691a      	ldr	r2, [r3, #16]
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	69db      	ldr	r3, [r3, #28]
 8006598:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800659c:	69b9      	ldr	r1, [r7, #24]
 800659e:	0148      	lsls	r0, r1, #5
 80065a0:	69f9      	ldr	r1, [r7, #28]
 80065a2:	4401      	add	r1, r0
 80065a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80065a8:	4313      	orrs	r3, r2
 80065aa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80065ac:	79fb      	ldrb	r3, [r7, #7]
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d10d      	bne.n	80065ce <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d009      	beq.n	80065ce <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	6919      	ldr	r1, [r3, #16]
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	015a      	lsls	r2, r3, #5
 80065c2:	69fb      	ldr	r3, [r7, #28]
 80065c4:	4413      	add	r3, r2
 80065c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ca:	460a      	mov	r2, r1
 80065cc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	791b      	ldrb	r3, [r3, #4]
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d128      	bne.n	8006628 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d110      	bne.n	8006608 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	015a      	lsls	r2, r3, #5
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	4413      	add	r3, r2
 80065ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	69ba      	ldr	r2, [r7, #24]
 80065f6:	0151      	lsls	r1, r2, #5
 80065f8:	69fa      	ldr	r2, [r7, #28]
 80065fa:	440a      	add	r2, r1
 80065fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006600:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006604:	6013      	str	r3, [r2, #0]
 8006606:	e00f      	b.n	8006628 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	015a      	lsls	r2, r3, #5
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	4413      	add	r3, r2
 8006610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	69ba      	ldr	r2, [r7, #24]
 8006618:	0151      	lsls	r1, r2, #5
 800661a:	69fa      	ldr	r2, [r7, #28]
 800661c:	440a      	add	r2, r1
 800661e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006626:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	015a      	lsls	r2, r3, #5
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	4413      	add	r3, r2
 8006630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	69ba      	ldr	r2, [r7, #24]
 8006638:	0151      	lsls	r1, r2, #5
 800663a:	69fa      	ldr	r2, [r7, #28]
 800663c:	440a      	add	r2, r1
 800663e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006642:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006646:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3720      	adds	r7, #32
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	1ff80000 	.word	0x1ff80000

08006658 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006658:	b480      	push	{r7}
 800665a:	b087      	sub	sp, #28
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	4613      	mov	r3, r2
 8006664:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	785b      	ldrb	r3, [r3, #1]
 8006674:	2b01      	cmp	r3, #1
 8006676:	f040 80ce 	bne.w	8006816 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	699b      	ldr	r3, [r3, #24]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d132      	bne.n	80066e8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	015a      	lsls	r2, r3, #5
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	4413      	add	r3, r2
 800668a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	693a      	ldr	r2, [r7, #16]
 8006692:	0151      	lsls	r1, r2, #5
 8006694:	697a      	ldr	r2, [r7, #20]
 8006696:	440a      	add	r2, r1
 8006698:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800669c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80066a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80066a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	015a      	lsls	r2, r3, #5
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	4413      	add	r3, r2
 80066ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	693a      	ldr	r2, [r7, #16]
 80066b6:	0151      	lsls	r1, r2, #5
 80066b8:	697a      	ldr	r2, [r7, #20]
 80066ba:	440a      	add	r2, r1
 80066bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80066c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	015a      	lsls	r2, r3, #5
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	4413      	add	r3, r2
 80066ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066d2:	691b      	ldr	r3, [r3, #16]
 80066d4:	693a      	ldr	r2, [r7, #16]
 80066d6:	0151      	lsls	r1, r2, #5
 80066d8:	697a      	ldr	r2, [r7, #20]
 80066da:	440a      	add	r2, r1
 80066dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066e0:	0cdb      	lsrs	r3, r3, #19
 80066e2:	04db      	lsls	r3, r3, #19
 80066e4:	6113      	str	r3, [r2, #16]
 80066e6:	e04e      	b.n	8006786 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	015a      	lsls	r2, r3, #5
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	4413      	add	r3, r2
 80066f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	693a      	ldr	r2, [r7, #16]
 80066f8:	0151      	lsls	r1, r2, #5
 80066fa:	697a      	ldr	r2, [r7, #20]
 80066fc:	440a      	add	r2, r1
 80066fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006702:	0cdb      	lsrs	r3, r3, #19
 8006704:	04db      	lsls	r3, r3, #19
 8006706:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	015a      	lsls	r2, r3, #5
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	4413      	add	r3, r2
 8006710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	0151      	lsls	r1, r2, #5
 800671a:	697a      	ldr	r2, [r7, #20]
 800671c:	440a      	add	r2, r1
 800671e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006722:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006726:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800672a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	699a      	ldr	r2, [r3, #24]
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	429a      	cmp	r2, r3
 8006736:	d903      	bls.n	8006740 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	68da      	ldr	r2, [r3, #12]
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	015a      	lsls	r2, r3, #5
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	4413      	add	r3, r2
 8006748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	693a      	ldr	r2, [r7, #16]
 8006750:	0151      	lsls	r1, r2, #5
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	440a      	add	r2, r1
 8006756:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800675a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800675e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	015a      	lsls	r2, r3, #5
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	4413      	add	r3, r2
 8006768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800676c:	691a      	ldr	r2, [r3, #16]
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	699b      	ldr	r3, [r3, #24]
 8006772:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006776:	6939      	ldr	r1, [r7, #16]
 8006778:	0148      	lsls	r0, r1, #5
 800677a:	6979      	ldr	r1, [r7, #20]
 800677c:	4401      	add	r1, r0
 800677e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006782:	4313      	orrs	r3, r2
 8006784:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006786:	79fb      	ldrb	r3, [r7, #7]
 8006788:	2b01      	cmp	r3, #1
 800678a:	d11e      	bne.n	80067ca <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	695b      	ldr	r3, [r3, #20]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d009      	beq.n	80067a8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	015a      	lsls	r2, r3, #5
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	4413      	add	r3, r2
 800679c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067a0:	461a      	mov	r2, r3
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	695b      	ldr	r3, [r3, #20]
 80067a6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	015a      	lsls	r2, r3, #5
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	4413      	add	r3, r2
 80067b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	693a      	ldr	r2, [r7, #16]
 80067b8:	0151      	lsls	r1, r2, #5
 80067ba:	697a      	ldr	r2, [r7, #20]
 80067bc:	440a      	add	r2, r1
 80067be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80067c6:	6013      	str	r3, [r2, #0]
 80067c8:	e097      	b.n	80068fa <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	015a      	lsls	r2, r3, #5
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	4413      	add	r3, r2
 80067d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	693a      	ldr	r2, [r7, #16]
 80067da:	0151      	lsls	r1, r2, #5
 80067dc:	697a      	ldr	r2, [r7, #20]
 80067de:	440a      	add	r2, r1
 80067e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80067e8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	699b      	ldr	r3, [r3, #24]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	f000 8083 	beq.w	80068fa <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	f003 030f 	and.w	r3, r3, #15
 8006804:	2101      	movs	r1, #1
 8006806:	fa01 f303 	lsl.w	r3, r1, r3
 800680a:	6979      	ldr	r1, [r7, #20]
 800680c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006810:	4313      	orrs	r3, r2
 8006812:	634b      	str	r3, [r1, #52]	; 0x34
 8006814:	e071      	b.n	80068fa <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	015a      	lsls	r2, r3, #5
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	4413      	add	r3, r2
 800681e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	693a      	ldr	r2, [r7, #16]
 8006826:	0151      	lsls	r1, r2, #5
 8006828:	697a      	ldr	r2, [r7, #20]
 800682a:	440a      	add	r2, r1
 800682c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006830:	0cdb      	lsrs	r3, r3, #19
 8006832:	04db      	lsls	r3, r3, #19
 8006834:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	015a      	lsls	r2, r3, #5
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	4413      	add	r3, r2
 800683e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006842:	691b      	ldr	r3, [r3, #16]
 8006844:	693a      	ldr	r2, [r7, #16]
 8006846:	0151      	lsls	r1, r2, #5
 8006848:	697a      	ldr	r2, [r7, #20]
 800684a:	440a      	add	r2, r1
 800684c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006850:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006854:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006858:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	699b      	ldr	r3, [r3, #24]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d003      	beq.n	800686a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	68da      	ldr	r2, [r3, #12]
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	68da      	ldr	r2, [r3, #12]
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	015a      	lsls	r2, r3, #5
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	4413      	add	r3, r2
 800687a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800687e:	691b      	ldr	r3, [r3, #16]
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	0151      	lsls	r1, r2, #5
 8006884:	697a      	ldr	r2, [r7, #20]
 8006886:	440a      	add	r2, r1
 8006888:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800688c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006890:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	015a      	lsls	r2, r3, #5
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	4413      	add	r3, r2
 800689a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800689e:	691a      	ldr	r2, [r3, #16]
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	69db      	ldr	r3, [r3, #28]
 80068a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068a8:	6939      	ldr	r1, [r7, #16]
 80068aa:	0148      	lsls	r0, r1, #5
 80068ac:	6979      	ldr	r1, [r7, #20]
 80068ae:	4401      	add	r1, r0
 80068b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80068b4:	4313      	orrs	r3, r2
 80068b6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80068b8:	79fb      	ldrb	r3, [r7, #7]
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d10d      	bne.n	80068da <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d009      	beq.n	80068da <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	6919      	ldr	r1, [r3, #16]
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	015a      	lsls	r2, r3, #5
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	4413      	add	r3, r2
 80068d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068d6:	460a      	mov	r2, r1
 80068d8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	015a      	lsls	r2, r3, #5
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	4413      	add	r3, r2
 80068e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	693a      	ldr	r2, [r7, #16]
 80068ea:	0151      	lsls	r1, r2, #5
 80068ec:	697a      	ldr	r2, [r7, #20]
 80068ee:	440a      	add	r2, r1
 80068f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80068f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80068fa:	2300      	movs	r3, #0
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	371c      	adds	r7, #28
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006908:	b480      	push	{r7}
 800690a:	b087      	sub	sp, #28
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006912:	2300      	movs	r3, #0
 8006914:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006916:	2300      	movs	r3, #0
 8006918:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	785b      	ldrb	r3, [r3, #1]
 8006922:	2b01      	cmp	r3, #1
 8006924:	d14a      	bne.n	80069bc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	015a      	lsls	r2, r3, #5
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	4413      	add	r3, r2
 8006930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800693a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800693e:	f040 8086 	bne.w	8006a4e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	015a      	lsls	r2, r3, #5
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	4413      	add	r3, r2
 800694c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	683a      	ldr	r2, [r7, #0]
 8006954:	7812      	ldrb	r2, [r2, #0]
 8006956:	0151      	lsls	r1, r2, #5
 8006958:	693a      	ldr	r2, [r7, #16]
 800695a:	440a      	add	r2, r1
 800695c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006960:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006964:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	015a      	lsls	r2, r3, #5
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	4413      	add	r3, r2
 8006970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	683a      	ldr	r2, [r7, #0]
 8006978:	7812      	ldrb	r2, [r2, #0]
 800697a:	0151      	lsls	r1, r2, #5
 800697c:	693a      	ldr	r2, [r7, #16]
 800697e:	440a      	add	r2, r1
 8006980:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006984:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006988:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	3301      	adds	r3, #1
 800698e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f242 7210 	movw	r2, #10000	; 0x2710
 8006996:	4293      	cmp	r3, r2
 8006998:	d902      	bls.n	80069a0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	75fb      	strb	r3, [r7, #23]
          break;
 800699e:	e056      	b.n	8006a4e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	015a      	lsls	r2, r3, #5
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	4413      	add	r3, r2
 80069aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069b8:	d0e7      	beq.n	800698a <USB_EPStopXfer+0x82>
 80069ba:	e048      	b.n	8006a4e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	015a      	lsls	r2, r3, #5
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	4413      	add	r3, r2
 80069c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069d4:	d13b      	bne.n	8006a4e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	015a      	lsls	r2, r3, #5
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	4413      	add	r3, r2
 80069e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	683a      	ldr	r2, [r7, #0]
 80069e8:	7812      	ldrb	r2, [r2, #0]
 80069ea:	0151      	lsls	r1, r2, #5
 80069ec:	693a      	ldr	r2, [r7, #16]
 80069ee:	440a      	add	r2, r1
 80069f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80069f8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	015a      	lsls	r2, r3, #5
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	4413      	add	r3, r2
 8006a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	683a      	ldr	r2, [r7, #0]
 8006a0c:	7812      	ldrb	r2, [r2, #0]
 8006a0e:	0151      	lsls	r1, r2, #5
 8006a10:	693a      	ldr	r2, [r7, #16]
 8006a12:	440a      	add	r2, r1
 8006a14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a1c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	3301      	adds	r3, #1
 8006a22:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f242 7210 	movw	r2, #10000	; 0x2710
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d902      	bls.n	8006a34 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	75fb      	strb	r3, [r7, #23]
          break;
 8006a32:	e00c      	b.n	8006a4e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	015a      	lsls	r2, r3, #5
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a4c:	d0e7      	beq.n	8006a1e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006a4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	371c      	adds	r7, #28
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b089      	sub	sp, #36	; 0x24
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	4611      	mov	r1, r2
 8006a68:	461a      	mov	r2, r3
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	71fb      	strb	r3, [r7, #7]
 8006a6e:	4613      	mov	r3, r2
 8006a70:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006a7a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d123      	bne.n	8006aca <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006a82:	88bb      	ldrh	r3, [r7, #4]
 8006a84:	3303      	adds	r3, #3
 8006a86:	089b      	lsrs	r3, r3, #2
 8006a88:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	61bb      	str	r3, [r7, #24]
 8006a8e:	e018      	b.n	8006ac2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006a90:	79fb      	ldrb	r3, [r7, #7]
 8006a92:	031a      	lsls	r2, r3, #12
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	4413      	add	r3, r2
 8006a98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	3301      	adds	r3, #1
 8006aae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	3301      	adds	r3, #1
 8006aba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	3301      	adds	r3, #1
 8006ac0:	61bb      	str	r3, [r7, #24]
 8006ac2:	69ba      	ldr	r2, [r7, #24]
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d3e2      	bcc.n	8006a90 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3724      	adds	r7, #36	; 0x24
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b08b      	sub	sp, #44	; 0x2c
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006aee:	88fb      	ldrh	r3, [r7, #6]
 8006af0:	089b      	lsrs	r3, r3, #2
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006af6:	88fb      	ldrh	r3, [r7, #6]
 8006af8:	f003 0303 	and.w	r3, r3, #3
 8006afc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006afe:	2300      	movs	r3, #0
 8006b00:	623b      	str	r3, [r7, #32]
 8006b02:	e014      	b.n	8006b2e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b12:	3301      	adds	r3, #1
 8006b14:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b18:	3301      	adds	r3, #1
 8006b1a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1e:	3301      	adds	r3, #1
 8006b20:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b24:	3301      	adds	r3, #1
 8006b26:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006b28:	6a3b      	ldr	r3, [r7, #32]
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	623b      	str	r3, [r7, #32]
 8006b2e:	6a3a      	ldr	r2, [r7, #32]
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d3e6      	bcc.n	8006b04 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006b36:	8bfb      	ldrh	r3, [r7, #30]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d01e      	beq.n	8006b7a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b46:	461a      	mov	r2, r3
 8006b48:	f107 0310 	add.w	r3, r7, #16
 8006b4c:	6812      	ldr	r2, [r2, #0]
 8006b4e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006b50:	693a      	ldr	r2, [r7, #16]
 8006b52:	6a3b      	ldr	r3, [r7, #32]
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	00db      	lsls	r3, r3, #3
 8006b58:	fa22 f303 	lsr.w	r3, r2, r3
 8006b5c:	b2da      	uxtb	r2, r3
 8006b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b60:	701a      	strb	r2, [r3, #0]
      i++;
 8006b62:	6a3b      	ldr	r3, [r7, #32]
 8006b64:	3301      	adds	r3, #1
 8006b66:	623b      	str	r3, [r7, #32]
      pDest++;
 8006b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006b6e:	8bfb      	ldrh	r3, [r7, #30]
 8006b70:	3b01      	subs	r3, #1
 8006b72:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006b74:	8bfb      	ldrh	r3, [r7, #30]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d1ea      	bne.n	8006b50 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	372c      	adds	r7, #44	; 0x2c
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	785b      	ldrb	r3, [r3, #1]
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d12c      	bne.n	8006bfe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	015a      	lsls	r2, r3, #5
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	4413      	add	r3, r2
 8006bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	db12      	blt.n	8006bdc <USB_EPSetStall+0x54>
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d00f      	beq.n	8006bdc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	015a      	lsls	r2, r3, #5
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	4413      	add	r3, r2
 8006bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	68ba      	ldr	r2, [r7, #8]
 8006bcc:	0151      	lsls	r1, r2, #5
 8006bce:	68fa      	ldr	r2, [r7, #12]
 8006bd0:	440a      	add	r2, r1
 8006bd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bd6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006bda:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	015a      	lsls	r2, r3, #5
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	4413      	add	r3, r2
 8006be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68ba      	ldr	r2, [r7, #8]
 8006bec:	0151      	lsls	r1, r2, #5
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	440a      	add	r2, r1
 8006bf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bf6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006bfa:	6013      	str	r3, [r2, #0]
 8006bfc:	e02b      	b.n	8006c56 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	015a      	lsls	r2, r3, #5
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	4413      	add	r3, r2
 8006c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	db12      	blt.n	8006c36 <USB_EPSetStall+0xae>
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d00f      	beq.n	8006c36 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	015a      	lsls	r2, r3, #5
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	68ba      	ldr	r2, [r7, #8]
 8006c26:	0151      	lsls	r1, r2, #5
 8006c28:	68fa      	ldr	r2, [r7, #12]
 8006c2a:	440a      	add	r2, r1
 8006c2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c30:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006c34:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	015a      	lsls	r2, r3, #5
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68ba      	ldr	r2, [r7, #8]
 8006c46:	0151      	lsls	r1, r2, #5
 8006c48:	68fa      	ldr	r2, [r7, #12]
 8006c4a:	440a      	add	r2, r1
 8006c4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006c54:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3714      	adds	r7, #20
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	785b      	ldrb	r3, [r3, #1]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d128      	bne.n	8006cd2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	015a      	lsls	r2, r3, #5
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	4413      	add	r3, r2
 8006c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	68ba      	ldr	r2, [r7, #8]
 8006c90:	0151      	lsls	r1, r2, #5
 8006c92:	68fa      	ldr	r2, [r7, #12]
 8006c94:	440a      	add	r2, r1
 8006c96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006c9e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	791b      	ldrb	r3, [r3, #4]
 8006ca4:	2b03      	cmp	r3, #3
 8006ca6:	d003      	beq.n	8006cb0 <USB_EPClearStall+0x4c>
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	791b      	ldrb	r3, [r3, #4]
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	d138      	bne.n	8006d22 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	015a      	lsls	r2, r3, #5
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	68ba      	ldr	r2, [r7, #8]
 8006cc0:	0151      	lsls	r1, r2, #5
 8006cc2:	68fa      	ldr	r2, [r7, #12]
 8006cc4:	440a      	add	r2, r1
 8006cc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cce:	6013      	str	r3, [r2, #0]
 8006cd0:	e027      	b.n	8006d22 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	015a      	lsls	r2, r3, #5
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	4413      	add	r3, r2
 8006cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	68ba      	ldr	r2, [r7, #8]
 8006ce2:	0151      	lsls	r1, r2, #5
 8006ce4:	68fa      	ldr	r2, [r7, #12]
 8006ce6:	440a      	add	r2, r1
 8006ce8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006cf0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	791b      	ldrb	r3, [r3, #4]
 8006cf6:	2b03      	cmp	r3, #3
 8006cf8:	d003      	beq.n	8006d02 <USB_EPClearStall+0x9e>
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	791b      	ldrb	r3, [r3, #4]
 8006cfe:	2b02      	cmp	r3, #2
 8006d00:	d10f      	bne.n	8006d22 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	015a      	lsls	r2, r3, #5
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	4413      	add	r3, r2
 8006d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	68ba      	ldr	r2, [r7, #8]
 8006d12:	0151      	lsls	r1, r2, #5
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	440a      	add	r2, r1
 8006d18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d20:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006d22:	2300      	movs	r3, #0
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3714      	adds	r7, #20
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b085      	sub	sp, #20
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	460b      	mov	r3, r1
 8006d3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d4e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006d52:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	78fb      	ldrb	r3, [r7, #3]
 8006d5e:	011b      	lsls	r3, r3, #4
 8006d60:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006d64:	68f9      	ldr	r1, [r7, #12]
 8006d66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006d6e:	2300      	movs	r3, #0
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3714      	adds	r7, #20
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b085      	sub	sp, #20
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68fa      	ldr	r2, [r7, #12]
 8006d92:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006d96:	f023 0303 	bic.w	r3, r3, #3
 8006d9a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006daa:	f023 0302 	bic.w	r3, r3, #2
 8006dae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3714      	adds	r7, #20
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr

08006dbe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006dbe:	b480      	push	{r7}
 8006dc0:	b085      	sub	sp, #20
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006dd8:	f023 0303 	bic.w	r3, r3, #3
 8006ddc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	68fa      	ldr	r2, [r7, #12]
 8006de8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006dec:	f043 0302 	orr.w	r3, r3, #2
 8006df0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3714      	adds	r7, #20
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b085      	sub	sp, #20
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	695b      	ldr	r3, [r3, #20]
 8006e0c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	699b      	ldr	r3, [r3, #24]
 8006e12:	68fa      	ldr	r2, [r7, #12]
 8006e14:	4013      	ands	r3, r2
 8006e16:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006e18:	68fb      	ldr	r3, [r7, #12]
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3714      	adds	r7, #20
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr

08006e26 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e26:	b480      	push	{r7}
 8006e28:	b085      	sub	sp, #20
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e38:	699b      	ldr	r3, [r3, #24]
 8006e3a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e42:	69db      	ldr	r3, [r3, #28]
 8006e44:	68ba      	ldr	r2, [r7, #8]
 8006e46:	4013      	ands	r3, r2
 8006e48:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	0c1b      	lsrs	r3, r3, #16
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3714      	adds	r7, #20
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr

08006e5a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e5a:	b480      	push	{r7}
 8006e5c:	b085      	sub	sp, #20
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e6c:	699b      	ldr	r3, [r3, #24]
 8006e6e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e76:	69db      	ldr	r3, [r3, #28]
 8006e78:	68ba      	ldr	r2, [r7, #8]
 8006e7a:	4013      	ands	r3, r2
 8006e7c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	b29b      	uxth	r3, r3
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3714      	adds	r7, #20
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr

08006e8e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006e8e:	b480      	push	{r7}
 8006e90:	b085      	sub	sp, #20
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
 8006e96:	460b      	mov	r3, r1
 8006e98:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006e9e:	78fb      	ldrb	r3, [r7, #3]
 8006ea0:	015a      	lsls	r2, r3, #5
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eb4:	695b      	ldr	r3, [r3, #20]
 8006eb6:	68ba      	ldr	r2, [r7, #8]
 8006eb8:	4013      	ands	r3, r2
 8006eba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006ebc:	68bb      	ldr	r3, [r7, #8]
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3714      	adds	r7, #20
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr

08006eca <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006eca:	b480      	push	{r7}
 8006ecc:	b087      	sub	sp, #28
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
 8006ed2:	460b      	mov	r3, r1
 8006ed4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ee0:	691b      	ldr	r3, [r3, #16]
 8006ee2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eec:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006eee:	78fb      	ldrb	r3, [r7, #3]
 8006ef0:	f003 030f 	and.w	r3, r3, #15
 8006ef4:	68fa      	ldr	r2, [r7, #12]
 8006ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8006efa:	01db      	lsls	r3, r3, #7
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	693a      	ldr	r2, [r7, #16]
 8006f00:	4313      	orrs	r3, r2
 8006f02:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006f04:	78fb      	ldrb	r3, [r7, #3]
 8006f06:	015a      	lsls	r2, r3, #5
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	693a      	ldr	r2, [r7, #16]
 8006f14:	4013      	ands	r3, r2
 8006f16:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006f18:	68bb      	ldr	r3, [r7, #8]
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	371c      	adds	r7, #28
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr

08006f26 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006f26:	b480      	push	{r7}
 8006f28:	b083      	sub	sp, #12
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	695b      	ldr	r3, [r3, #20]
 8006f32:	f003 0301 	and.w	r3, r3, #1
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	370c      	adds	r7, #12
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr

08006f42 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006f42:	b480      	push	{r7}
 8006f44:	b085      	sub	sp, #20
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	68fa      	ldr	r2, [r7, #12]
 8006f58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f5c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006f60:	f023 0307 	bic.w	r3, r3, #7
 8006f64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	68fa      	ldr	r2, [r7, #12]
 8006f70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3714      	adds	r7, #20
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b087      	sub	sp, #28
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	460b      	mov	r3, r1
 8006f92:	607a      	str	r2, [r7, #4]
 8006f94:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	333c      	adds	r3, #60	; 0x3c
 8006f9e:	3304      	adds	r3, #4
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	4a26      	ldr	r2, [pc, #152]	; (8007040 <USB_EP0_OutStart+0xb8>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d90a      	bls.n	8006fc2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fbc:	d101      	bne.n	8006fc2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	e037      	b.n	8007032 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fc8:	461a      	mov	r2, r3
 8006fca:	2300      	movs	r3, #0
 8006fcc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	697a      	ldr	r2, [r7, #20]
 8006fd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fdc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006fe0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	697a      	ldr	r2, [r7, #20]
 8006fec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ff0:	f043 0318 	orr.w	r3, r3, #24
 8006ff4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ffc:	691b      	ldr	r3, [r3, #16]
 8006ffe:	697a      	ldr	r2, [r7, #20]
 8007000:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007004:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007008:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800700a:	7afb      	ldrb	r3, [r7, #11]
 800700c:	2b01      	cmp	r3, #1
 800700e:	d10f      	bne.n	8007030 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007016:	461a      	mov	r2, r3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	697a      	ldr	r2, [r7, #20]
 8007026:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800702a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800702e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007030:	2300      	movs	r3, #0
}
 8007032:	4618      	mov	r0, r3
 8007034:	371c      	adds	r7, #28
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop
 8007040:	4f54300a 	.word	0x4f54300a

08007044 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007044:	b480      	push	{r7}
 8007046:	b085      	sub	sp, #20
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800704c:	2300      	movs	r3, #0
 800704e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	3301      	adds	r3, #1
 8007054:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	4a13      	ldr	r2, [pc, #76]	; (80070a8 <USB_CoreReset+0x64>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d901      	bls.n	8007062 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800705e:	2303      	movs	r3, #3
 8007060:	e01b      	b.n	800709a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	691b      	ldr	r3, [r3, #16]
 8007066:	2b00      	cmp	r3, #0
 8007068:	daf2      	bge.n	8007050 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800706a:	2300      	movs	r3, #0
 800706c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	f043 0201 	orr.w	r2, r3, #1
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	3301      	adds	r3, #1
 800707e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	4a09      	ldr	r2, [pc, #36]	; (80070a8 <USB_CoreReset+0x64>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d901      	bls.n	800708c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007088:	2303      	movs	r3, #3
 800708a:	e006      	b.n	800709a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	f003 0301 	and.w	r3, r3, #1
 8007094:	2b01      	cmp	r3, #1
 8007096:	d0f0      	beq.n	800707a <USB_CoreReset+0x36>

  return HAL_OK;
 8007098:	2300      	movs	r3, #0
}
 800709a:	4618      	mov	r0, r3
 800709c:	3714      	adds	r7, #20
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr
 80070a6:	bf00      	nop
 80070a8:	00030d40 	.word	0x00030d40

080070ac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	460b      	mov	r3, r1
 80070b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80070b8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80070bc:	f005 facc 	bl	800c658 <USBD_static_malloc>
 80070c0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d109      	bne.n	80070dc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	32b0      	adds	r2, #176	; 0xb0
 80070d2:	2100      	movs	r1, #0
 80070d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80070d8:	2302      	movs	r3, #2
 80070da:	e0d4      	b.n	8007286 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80070dc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80070e0:	2100      	movs	r1, #0
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	f005 fb30 	bl	800c748 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	32b0      	adds	r2, #176	; 0xb0
 80070f2:	68f9      	ldr	r1, [r7, #12]
 80070f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	32b0      	adds	r2, #176	; 0xb0
 8007102:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	7c1b      	ldrb	r3, [r3, #16]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d138      	bne.n	8007186 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007114:	4b5e      	ldr	r3, [pc, #376]	; (8007290 <USBD_CDC_Init+0x1e4>)
 8007116:	7819      	ldrb	r1, [r3, #0]
 8007118:	f44f 7300 	mov.w	r3, #512	; 0x200
 800711c:	2202      	movs	r2, #2
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f005 f977 	bl	800c412 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007124:	4b5a      	ldr	r3, [pc, #360]	; (8007290 <USBD_CDC_Init+0x1e4>)
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	f003 020f 	and.w	r2, r3, #15
 800712c:	6879      	ldr	r1, [r7, #4]
 800712e:	4613      	mov	r3, r2
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	4413      	add	r3, r2
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	440b      	add	r3, r1
 8007138:	3324      	adds	r3, #36	; 0x24
 800713a:	2201      	movs	r2, #1
 800713c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800713e:	4b55      	ldr	r3, [pc, #340]	; (8007294 <USBD_CDC_Init+0x1e8>)
 8007140:	7819      	ldrb	r1, [r3, #0]
 8007142:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007146:	2202      	movs	r2, #2
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f005 f962 	bl	800c412 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800714e:	4b51      	ldr	r3, [pc, #324]	; (8007294 <USBD_CDC_Init+0x1e8>)
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	f003 020f 	and.w	r2, r3, #15
 8007156:	6879      	ldr	r1, [r7, #4]
 8007158:	4613      	mov	r3, r2
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	4413      	add	r3, r2
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	440b      	add	r3, r1
 8007162:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007166:	2201      	movs	r2, #1
 8007168:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800716a:	4b4b      	ldr	r3, [pc, #300]	; (8007298 <USBD_CDC_Init+0x1ec>)
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	f003 020f 	and.w	r2, r3, #15
 8007172:	6879      	ldr	r1, [r7, #4]
 8007174:	4613      	mov	r3, r2
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	4413      	add	r3, r2
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	440b      	add	r3, r1
 800717e:	3326      	adds	r3, #38	; 0x26
 8007180:	2210      	movs	r2, #16
 8007182:	801a      	strh	r2, [r3, #0]
 8007184:	e035      	b.n	80071f2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007186:	4b42      	ldr	r3, [pc, #264]	; (8007290 <USBD_CDC_Init+0x1e4>)
 8007188:	7819      	ldrb	r1, [r3, #0]
 800718a:	2340      	movs	r3, #64	; 0x40
 800718c:	2202      	movs	r2, #2
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f005 f93f 	bl	800c412 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007194:	4b3e      	ldr	r3, [pc, #248]	; (8007290 <USBD_CDC_Init+0x1e4>)
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	f003 020f 	and.w	r2, r3, #15
 800719c:	6879      	ldr	r1, [r7, #4]
 800719e:	4613      	mov	r3, r2
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	4413      	add	r3, r2
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	440b      	add	r3, r1
 80071a8:	3324      	adds	r3, #36	; 0x24
 80071aa:	2201      	movs	r2, #1
 80071ac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80071ae:	4b39      	ldr	r3, [pc, #228]	; (8007294 <USBD_CDC_Init+0x1e8>)
 80071b0:	7819      	ldrb	r1, [r3, #0]
 80071b2:	2340      	movs	r3, #64	; 0x40
 80071b4:	2202      	movs	r2, #2
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f005 f92b 	bl	800c412 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80071bc:	4b35      	ldr	r3, [pc, #212]	; (8007294 <USBD_CDC_Init+0x1e8>)
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	f003 020f 	and.w	r2, r3, #15
 80071c4:	6879      	ldr	r1, [r7, #4]
 80071c6:	4613      	mov	r3, r2
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	4413      	add	r3, r2
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	440b      	add	r3, r1
 80071d0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80071d4:	2201      	movs	r2, #1
 80071d6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80071d8:	4b2f      	ldr	r3, [pc, #188]	; (8007298 <USBD_CDC_Init+0x1ec>)
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	f003 020f 	and.w	r2, r3, #15
 80071e0:	6879      	ldr	r1, [r7, #4]
 80071e2:	4613      	mov	r3, r2
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	4413      	add	r3, r2
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	440b      	add	r3, r1
 80071ec:	3326      	adds	r3, #38	; 0x26
 80071ee:	2210      	movs	r2, #16
 80071f0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80071f2:	4b29      	ldr	r3, [pc, #164]	; (8007298 <USBD_CDC_Init+0x1ec>)
 80071f4:	7819      	ldrb	r1, [r3, #0]
 80071f6:	2308      	movs	r3, #8
 80071f8:	2203      	movs	r2, #3
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f005 f909 	bl	800c412 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007200:	4b25      	ldr	r3, [pc, #148]	; (8007298 <USBD_CDC_Init+0x1ec>)
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	f003 020f 	and.w	r2, r3, #15
 8007208:	6879      	ldr	r1, [r7, #4]
 800720a:	4613      	mov	r3, r2
 800720c:	009b      	lsls	r3, r3, #2
 800720e:	4413      	add	r3, r2
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	440b      	add	r3, r1
 8007214:	3324      	adds	r3, #36	; 0x24
 8007216:	2201      	movs	r2, #1
 8007218:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2200      	movs	r2, #0
 800721e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	33b0      	adds	r3, #176	; 0xb0
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	4413      	add	r3, r2
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2200      	movs	r2, #0
 800723a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2200      	movs	r2, #0
 8007242:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800724c:	2b00      	cmp	r3, #0
 800724e:	d101      	bne.n	8007254 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007250:	2302      	movs	r3, #2
 8007252:	e018      	b.n	8007286 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	7c1b      	ldrb	r3, [r3, #16]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d10a      	bne.n	8007272 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800725c:	4b0d      	ldr	r3, [pc, #52]	; (8007294 <USBD_CDC_Init+0x1e8>)
 800725e:	7819      	ldrb	r1, [r3, #0]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007266:	f44f 7300 	mov.w	r3, #512	; 0x200
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f005 f9c0 	bl	800c5f0 <USBD_LL_PrepareReceive>
 8007270:	e008      	b.n	8007284 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007272:	4b08      	ldr	r3, [pc, #32]	; (8007294 <USBD_CDC_Init+0x1e8>)
 8007274:	7819      	ldrb	r1, [r3, #0]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800727c:	2340      	movs	r3, #64	; 0x40
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f005 f9b6 	bl	800c5f0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007284:	2300      	movs	r3, #0
}
 8007286:	4618      	mov	r0, r3
 8007288:	3710      	adds	r7, #16
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	20000093 	.word	0x20000093
 8007294:	20000094 	.word	0x20000094
 8007298:	20000095 	.word	0x20000095

0800729c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b082      	sub	sp, #8
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	460b      	mov	r3, r1
 80072a6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80072a8:	4b3a      	ldr	r3, [pc, #232]	; (8007394 <USBD_CDC_DeInit+0xf8>)
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	4619      	mov	r1, r3
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f005 f8d5 	bl	800c45e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80072b4:	4b37      	ldr	r3, [pc, #220]	; (8007394 <USBD_CDC_DeInit+0xf8>)
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	f003 020f 	and.w	r2, r3, #15
 80072bc:	6879      	ldr	r1, [r7, #4]
 80072be:	4613      	mov	r3, r2
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	4413      	add	r3, r2
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	440b      	add	r3, r1
 80072c8:	3324      	adds	r3, #36	; 0x24
 80072ca:	2200      	movs	r2, #0
 80072cc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80072ce:	4b32      	ldr	r3, [pc, #200]	; (8007398 <USBD_CDC_DeInit+0xfc>)
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	4619      	mov	r1, r3
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f005 f8c2 	bl	800c45e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80072da:	4b2f      	ldr	r3, [pc, #188]	; (8007398 <USBD_CDC_DeInit+0xfc>)
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	f003 020f 	and.w	r2, r3, #15
 80072e2:	6879      	ldr	r1, [r7, #4]
 80072e4:	4613      	mov	r3, r2
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	4413      	add	r3, r2
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	440b      	add	r3, r1
 80072ee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80072f2:	2200      	movs	r2, #0
 80072f4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80072f6:	4b29      	ldr	r3, [pc, #164]	; (800739c <USBD_CDC_DeInit+0x100>)
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	4619      	mov	r1, r3
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f005 f8ae 	bl	800c45e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007302:	4b26      	ldr	r3, [pc, #152]	; (800739c <USBD_CDC_DeInit+0x100>)
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	f003 020f 	and.w	r2, r3, #15
 800730a:	6879      	ldr	r1, [r7, #4]
 800730c:	4613      	mov	r3, r2
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	4413      	add	r3, r2
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	440b      	add	r3, r1
 8007316:	3324      	adds	r3, #36	; 0x24
 8007318:	2200      	movs	r2, #0
 800731a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800731c:	4b1f      	ldr	r3, [pc, #124]	; (800739c <USBD_CDC_DeInit+0x100>)
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	f003 020f 	and.w	r2, r3, #15
 8007324:	6879      	ldr	r1, [r7, #4]
 8007326:	4613      	mov	r3, r2
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	4413      	add	r3, r2
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	440b      	add	r3, r1
 8007330:	3326      	adds	r3, #38	; 0x26
 8007332:	2200      	movs	r2, #0
 8007334:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	32b0      	adds	r2, #176	; 0xb0
 8007340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d01f      	beq.n	8007388 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	33b0      	adds	r3, #176	; 0xb0
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	4413      	add	r3, r2
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	32b0      	adds	r2, #176	; 0xb0
 8007366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800736a:	4618      	mov	r0, r3
 800736c:	f005 f982 	bl	800c674 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	32b0      	adds	r2, #176	; 0xb0
 800737a:	2100      	movs	r1, #0
 800737c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007388:	2300      	movs	r3, #0
}
 800738a:	4618      	mov	r0, r3
 800738c:	3708      	adds	r7, #8
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop
 8007394:	20000093 	.word	0x20000093
 8007398:	20000094 	.word	0x20000094
 800739c:	20000095 	.word	0x20000095

080073a0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b086      	sub	sp, #24
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	32b0      	adds	r2, #176	; 0xb0
 80073b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073b8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80073ba:	2300      	movs	r3, #0
 80073bc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80073be:	2300      	movs	r3, #0
 80073c0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80073c2:	2300      	movs	r3, #0
 80073c4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d101      	bne.n	80073d0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80073cc:	2303      	movs	r3, #3
 80073ce:	e0bf      	b.n	8007550 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d050      	beq.n	800747e <USBD_CDC_Setup+0xde>
 80073dc:	2b20      	cmp	r3, #32
 80073de:	f040 80af 	bne.w	8007540 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	88db      	ldrh	r3, [r3, #6]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d03a      	beq.n	8007460 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	b25b      	sxtb	r3, r3
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	da1b      	bge.n	800742c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	33b0      	adds	r3, #176	; 0xb0
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	4413      	add	r3, r2
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	683a      	ldr	r2, [r7, #0]
 8007408:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800740a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800740c:	683a      	ldr	r2, [r7, #0]
 800740e:	88d2      	ldrh	r2, [r2, #6]
 8007410:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	88db      	ldrh	r3, [r3, #6]
 8007416:	2b07      	cmp	r3, #7
 8007418:	bf28      	it	cs
 800741a:	2307      	movcs	r3, #7
 800741c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	89fa      	ldrh	r2, [r7, #14]
 8007422:	4619      	mov	r1, r3
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f001 fd89 	bl	8008f3c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800742a:	e090      	b.n	800754e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	785a      	ldrb	r2, [r3, #1]
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	88db      	ldrh	r3, [r3, #6]
 800743a:	2b3f      	cmp	r3, #63	; 0x3f
 800743c:	d803      	bhi.n	8007446 <USBD_CDC_Setup+0xa6>
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	88db      	ldrh	r3, [r3, #6]
 8007442:	b2da      	uxtb	r2, r3
 8007444:	e000      	b.n	8007448 <USBD_CDC_Setup+0xa8>
 8007446:	2240      	movs	r2, #64	; 0x40
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800744e:	6939      	ldr	r1, [r7, #16]
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007456:	461a      	mov	r2, r3
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f001 fd9b 	bl	8008f94 <USBD_CtlPrepareRx>
      break;
 800745e:	e076      	b.n	800754e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	33b0      	adds	r3, #176	; 0xb0
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	4413      	add	r3, r2
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	683a      	ldr	r2, [r7, #0]
 8007474:	7850      	ldrb	r0, [r2, #1]
 8007476:	2200      	movs	r2, #0
 8007478:	6839      	ldr	r1, [r7, #0]
 800747a:	4798      	blx	r3
      break;
 800747c:	e067      	b.n	800754e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	785b      	ldrb	r3, [r3, #1]
 8007482:	2b0b      	cmp	r3, #11
 8007484:	d851      	bhi.n	800752a <USBD_CDC_Setup+0x18a>
 8007486:	a201      	add	r2, pc, #4	; (adr r2, 800748c <USBD_CDC_Setup+0xec>)
 8007488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800748c:	080074bd 	.word	0x080074bd
 8007490:	08007539 	.word	0x08007539
 8007494:	0800752b 	.word	0x0800752b
 8007498:	0800752b 	.word	0x0800752b
 800749c:	0800752b 	.word	0x0800752b
 80074a0:	0800752b 	.word	0x0800752b
 80074a4:	0800752b 	.word	0x0800752b
 80074a8:	0800752b 	.word	0x0800752b
 80074ac:	0800752b 	.word	0x0800752b
 80074b0:	0800752b 	.word	0x0800752b
 80074b4:	080074e7 	.word	0x080074e7
 80074b8:	08007511 	.word	0x08007511
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	2b03      	cmp	r3, #3
 80074c6:	d107      	bne.n	80074d8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80074c8:	f107 030a 	add.w	r3, r7, #10
 80074cc:	2202      	movs	r2, #2
 80074ce:	4619      	mov	r1, r3
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f001 fd33 	bl	8008f3c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80074d6:	e032      	b.n	800753e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80074d8:	6839      	ldr	r1, [r7, #0]
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f001 fcbd 	bl	8008e5a <USBD_CtlError>
            ret = USBD_FAIL;
 80074e0:	2303      	movs	r3, #3
 80074e2:	75fb      	strb	r3, [r7, #23]
          break;
 80074e4:	e02b      	b.n	800753e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	2b03      	cmp	r3, #3
 80074f0:	d107      	bne.n	8007502 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80074f2:	f107 030d 	add.w	r3, r7, #13
 80074f6:	2201      	movs	r2, #1
 80074f8:	4619      	mov	r1, r3
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f001 fd1e 	bl	8008f3c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007500:	e01d      	b.n	800753e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007502:	6839      	ldr	r1, [r7, #0]
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f001 fca8 	bl	8008e5a <USBD_CtlError>
            ret = USBD_FAIL;
 800750a:	2303      	movs	r3, #3
 800750c:	75fb      	strb	r3, [r7, #23]
          break;
 800750e:	e016      	b.n	800753e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007516:	b2db      	uxtb	r3, r3
 8007518:	2b03      	cmp	r3, #3
 800751a:	d00f      	beq.n	800753c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800751c:	6839      	ldr	r1, [r7, #0]
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f001 fc9b 	bl	8008e5a <USBD_CtlError>
            ret = USBD_FAIL;
 8007524:	2303      	movs	r3, #3
 8007526:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007528:	e008      	b.n	800753c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800752a:	6839      	ldr	r1, [r7, #0]
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f001 fc94 	bl	8008e5a <USBD_CtlError>
          ret = USBD_FAIL;
 8007532:	2303      	movs	r3, #3
 8007534:	75fb      	strb	r3, [r7, #23]
          break;
 8007536:	e002      	b.n	800753e <USBD_CDC_Setup+0x19e>
          break;
 8007538:	bf00      	nop
 800753a:	e008      	b.n	800754e <USBD_CDC_Setup+0x1ae>
          break;
 800753c:	bf00      	nop
      }
      break;
 800753e:	e006      	b.n	800754e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007540:	6839      	ldr	r1, [r7, #0]
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f001 fc89 	bl	8008e5a <USBD_CtlError>
      ret = USBD_FAIL;
 8007548:	2303      	movs	r3, #3
 800754a:	75fb      	strb	r3, [r7, #23]
      break;
 800754c:	bf00      	nop
  }

  return (uint8_t)ret;
 800754e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007550:	4618      	mov	r0, r3
 8007552:	3718      	adds	r7, #24
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b084      	sub	sp, #16
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	460b      	mov	r3, r1
 8007562:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800756a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	32b0      	adds	r2, #176	; 0xb0
 8007576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d101      	bne.n	8007582 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800757e:	2303      	movs	r3, #3
 8007580:	e065      	b.n	800764e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	32b0      	adds	r2, #176	; 0xb0
 800758c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007590:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007592:	78fb      	ldrb	r3, [r7, #3]
 8007594:	f003 020f 	and.w	r2, r3, #15
 8007598:	6879      	ldr	r1, [r7, #4]
 800759a:	4613      	mov	r3, r2
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	4413      	add	r3, r2
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	440b      	add	r3, r1
 80075a4:	3318      	adds	r3, #24
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d02f      	beq.n	800760c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80075ac:	78fb      	ldrb	r3, [r7, #3]
 80075ae:	f003 020f 	and.w	r2, r3, #15
 80075b2:	6879      	ldr	r1, [r7, #4]
 80075b4:	4613      	mov	r3, r2
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	4413      	add	r3, r2
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	440b      	add	r3, r1
 80075be:	3318      	adds	r3, #24
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	78fb      	ldrb	r3, [r7, #3]
 80075c4:	f003 010f 	and.w	r1, r3, #15
 80075c8:	68f8      	ldr	r0, [r7, #12]
 80075ca:	460b      	mov	r3, r1
 80075cc:	00db      	lsls	r3, r3, #3
 80075ce:	440b      	add	r3, r1
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	4403      	add	r3, r0
 80075d4:	3348      	adds	r3, #72	; 0x48
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	fbb2 f1f3 	udiv	r1, r2, r3
 80075dc:	fb01 f303 	mul.w	r3, r1, r3
 80075e0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d112      	bne.n	800760c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80075e6:	78fb      	ldrb	r3, [r7, #3]
 80075e8:	f003 020f 	and.w	r2, r3, #15
 80075ec:	6879      	ldr	r1, [r7, #4]
 80075ee:	4613      	mov	r3, r2
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	4413      	add	r3, r2
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	440b      	add	r3, r1
 80075f8:	3318      	adds	r3, #24
 80075fa:	2200      	movs	r2, #0
 80075fc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80075fe:	78f9      	ldrb	r1, [r7, #3]
 8007600:	2300      	movs	r3, #0
 8007602:	2200      	movs	r2, #0
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f004 ffd2 	bl	800c5ae <USBD_LL_Transmit>
 800760a:	e01f      	b.n	800764c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	2200      	movs	r2, #0
 8007610:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	33b0      	adds	r3, #176	; 0xb0
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	4413      	add	r3, r2
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d010      	beq.n	800764c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	33b0      	adds	r3, #176	; 0xb0
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	4413      	add	r3, r2
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	691b      	ldr	r3, [r3, #16]
 800763c:	68ba      	ldr	r2, [r7, #8]
 800763e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007642:	68ba      	ldr	r2, [r7, #8]
 8007644:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007648:	78fa      	ldrb	r2, [r7, #3]
 800764a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800764c:	2300      	movs	r3, #0
}
 800764e:	4618      	mov	r0, r3
 8007650:	3710      	adds	r7, #16
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}

08007656 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007656:	b580      	push	{r7, lr}
 8007658:	b084      	sub	sp, #16
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
 800765e:	460b      	mov	r3, r1
 8007660:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	32b0      	adds	r2, #176	; 0xb0
 800766c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007670:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	32b0      	adds	r2, #176	; 0xb0
 800767c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d101      	bne.n	8007688 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007684:	2303      	movs	r3, #3
 8007686:	e01a      	b.n	80076be <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007688:	78fb      	ldrb	r3, [r7, #3]
 800768a:	4619      	mov	r1, r3
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f004 ffd0 	bl	800c632 <USBD_LL_GetRxDataSize>
 8007692:	4602      	mov	r2, r0
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	33b0      	adds	r3, #176	; 0xb0
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	4413      	add	r3, r2
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	68fa      	ldr	r2, [r7, #12]
 80076ae:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80076b2:	68fa      	ldr	r2, [r7, #12]
 80076b4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80076b8:	4611      	mov	r1, r2
 80076ba:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b084      	sub	sp, #16
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	32b0      	adds	r2, #176	; 0xb0
 80076d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076dc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d101      	bne.n	80076e8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80076e4:	2303      	movs	r3, #3
 80076e6:	e025      	b.n	8007734 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	33b0      	adds	r3, #176	; 0xb0
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	4413      	add	r3, r2
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d01a      	beq.n	8007732 <USBD_CDC_EP0_RxReady+0x6c>
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007702:	2bff      	cmp	r3, #255	; 0xff
 8007704:	d015      	beq.n	8007732 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	33b0      	adds	r3, #176	; 0xb0
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	4413      	add	r3, r2
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	68fa      	ldr	r2, [r7, #12]
 800771a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800771e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007720:	68fa      	ldr	r2, [r7, #12]
 8007722:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007726:	b292      	uxth	r2, r2
 8007728:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	22ff      	movs	r2, #255	; 0xff
 800772e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007732:	2300      	movs	r3, #0
}
 8007734:	4618      	mov	r0, r3
 8007736:	3710      	adds	r7, #16
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b086      	sub	sp, #24
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007744:	2182      	movs	r1, #130	; 0x82
 8007746:	4818      	ldr	r0, [pc, #96]	; (80077a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007748:	f000 fd4f 	bl	80081ea <USBD_GetEpDesc>
 800774c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800774e:	2101      	movs	r1, #1
 8007750:	4815      	ldr	r0, [pc, #84]	; (80077a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007752:	f000 fd4a 	bl	80081ea <USBD_GetEpDesc>
 8007756:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007758:	2181      	movs	r1, #129	; 0x81
 800775a:	4813      	ldr	r0, [pc, #76]	; (80077a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800775c:	f000 fd45 	bl	80081ea <USBD_GetEpDesc>
 8007760:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d002      	beq.n	800776e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	2210      	movs	r2, #16
 800776c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d006      	beq.n	8007782 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	2200      	movs	r2, #0
 8007778:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800777c:	711a      	strb	r2, [r3, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d006      	beq.n	8007796 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2200      	movs	r2, #0
 800778c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007790:	711a      	strb	r2, [r3, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2243      	movs	r2, #67	; 0x43
 800779a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800779c:	4b02      	ldr	r3, [pc, #8]	; (80077a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3718      	adds	r7, #24
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	20000050 	.word	0x20000050

080077ac <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b086      	sub	sp, #24
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80077b4:	2182      	movs	r1, #130	; 0x82
 80077b6:	4818      	ldr	r0, [pc, #96]	; (8007818 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80077b8:	f000 fd17 	bl	80081ea <USBD_GetEpDesc>
 80077bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80077be:	2101      	movs	r1, #1
 80077c0:	4815      	ldr	r0, [pc, #84]	; (8007818 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80077c2:	f000 fd12 	bl	80081ea <USBD_GetEpDesc>
 80077c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80077c8:	2181      	movs	r1, #129	; 0x81
 80077ca:	4813      	ldr	r0, [pc, #76]	; (8007818 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80077cc:	f000 fd0d 	bl	80081ea <USBD_GetEpDesc>
 80077d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d002      	beq.n	80077de <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	2210      	movs	r2, #16
 80077dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d006      	beq.n	80077f2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	2200      	movs	r2, #0
 80077e8:	711a      	strb	r2, [r3, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f042 0202 	orr.w	r2, r2, #2
 80077f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d006      	beq.n	8007806 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2200      	movs	r2, #0
 80077fc:	711a      	strb	r2, [r3, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	f042 0202 	orr.w	r2, r2, #2
 8007804:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2243      	movs	r2, #67	; 0x43
 800780a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800780c:	4b02      	ldr	r3, [pc, #8]	; (8007818 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800780e:	4618      	mov	r0, r3
 8007810:	3718      	adds	r7, #24
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	20000050 	.word	0x20000050

0800781c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b086      	sub	sp, #24
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007824:	2182      	movs	r1, #130	; 0x82
 8007826:	4818      	ldr	r0, [pc, #96]	; (8007888 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007828:	f000 fcdf 	bl	80081ea <USBD_GetEpDesc>
 800782c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800782e:	2101      	movs	r1, #1
 8007830:	4815      	ldr	r0, [pc, #84]	; (8007888 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007832:	f000 fcda 	bl	80081ea <USBD_GetEpDesc>
 8007836:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007838:	2181      	movs	r1, #129	; 0x81
 800783a:	4813      	ldr	r0, [pc, #76]	; (8007888 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800783c:	f000 fcd5 	bl	80081ea <USBD_GetEpDesc>
 8007840:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d002      	beq.n	800784e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	2210      	movs	r2, #16
 800784c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d006      	beq.n	8007862 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	2200      	movs	r2, #0
 8007858:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800785c:	711a      	strb	r2, [r3, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d006      	beq.n	8007876 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2200      	movs	r2, #0
 800786c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007870:	711a      	strb	r2, [r3, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2243      	movs	r2, #67	; 0x43
 800787a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800787c:	4b02      	ldr	r3, [pc, #8]	; (8007888 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800787e:	4618      	mov	r0, r3
 8007880:	3718      	adds	r7, #24
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop
 8007888:	20000050 	.word	0x20000050

0800788c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	220a      	movs	r2, #10
 8007898:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800789a:	4b03      	ldr	r3, [pc, #12]	; (80078a8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800789c:	4618      	mov	r0, r3
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr
 80078a8:	2000000c 	.word	0x2000000c

080078ac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b083      	sub	sp, #12
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d101      	bne.n	80078c0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80078bc:	2303      	movs	r3, #3
 80078be:	e009      	b.n	80078d4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	33b0      	adds	r3, #176	; 0xb0
 80078ca:	009b      	lsls	r3, r3, #2
 80078cc:	4413      	add	r3, r2
 80078ce:	683a      	ldr	r2, [r7, #0]
 80078d0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80078d2:	2300      	movs	r3, #0
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b087      	sub	sp, #28
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	32b0      	adds	r2, #176	; 0xb0
 80078f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078fa:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d101      	bne.n	8007906 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007902:	2303      	movs	r3, #3
 8007904:	e008      	b.n	8007918 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	68ba      	ldr	r2, [r7, #8]
 800790a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007916:	2300      	movs	r3, #0
}
 8007918:	4618      	mov	r0, r3
 800791a:	371c      	adds	r7, #28
 800791c:	46bd      	mov	sp, r7
 800791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007922:	4770      	bx	lr

08007924 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007924:	b480      	push	{r7}
 8007926:	b085      	sub	sp, #20
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	32b0      	adds	r2, #176	; 0xb0
 8007938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800793c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d101      	bne.n	8007948 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007944:	2303      	movs	r3, #3
 8007946:	e004      	b.n	8007952 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	683a      	ldr	r2, [r7, #0]
 800794c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007950:	2300      	movs	r3, #0
}
 8007952:	4618      	mov	r0, r3
 8007954:	3714      	adds	r7, #20
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr
	...

08007960 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	32b0      	adds	r2, #176	; 0xb0
 8007972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007976:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007978:	2301      	movs	r3, #1
 800797a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	32b0      	adds	r2, #176	; 0xb0
 8007986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d101      	bne.n	8007992 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800798e:	2303      	movs	r3, #3
 8007990:	e025      	b.n	80079de <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007998:	2b00      	cmp	r3, #0
 800799a:	d11f      	bne.n	80079dc <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	2201      	movs	r2, #1
 80079a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80079a4:	4b10      	ldr	r3, [pc, #64]	; (80079e8 <USBD_CDC_TransmitPacket+0x88>)
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	f003 020f 	and.w	r2, r3, #15
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	4613      	mov	r3, r2
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	4413      	add	r3, r2
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	4403      	add	r3, r0
 80079be:	3318      	adds	r3, #24
 80079c0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80079c2:	4b09      	ldr	r3, [pc, #36]	; (80079e8 <USBD_CDC_TransmitPacket+0x88>)
 80079c4:	7819      	ldrb	r1, [r3, #0]
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f004 fdeb 	bl	800c5ae <USBD_LL_Transmit>

    ret = USBD_OK;
 80079d8:	2300      	movs	r3, #0
 80079da:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80079dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3710      	adds	r7, #16
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	bf00      	nop
 80079e8:	20000093 	.word	0x20000093

080079ec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	32b0      	adds	r2, #176	; 0xb0
 80079fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a02:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	32b0      	adds	r2, #176	; 0xb0
 8007a0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d101      	bne.n	8007a1a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007a16:	2303      	movs	r3, #3
 8007a18:	e018      	b.n	8007a4c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	7c1b      	ldrb	r3, [r3, #16]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d10a      	bne.n	8007a38 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007a22:	4b0c      	ldr	r3, [pc, #48]	; (8007a54 <USBD_CDC_ReceivePacket+0x68>)
 8007a24:	7819      	ldrb	r1, [r3, #0]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f004 fddd 	bl	800c5f0 <USBD_LL_PrepareReceive>
 8007a36:	e008      	b.n	8007a4a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007a38:	4b06      	ldr	r3, [pc, #24]	; (8007a54 <USBD_CDC_ReceivePacket+0x68>)
 8007a3a:	7819      	ldrb	r1, [r3, #0]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a42:	2340      	movs	r3, #64	; 0x40
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f004 fdd3 	bl	800c5f0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007a4a:	2300      	movs	r3, #0
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3710      	adds	r7, #16
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}
 8007a54:	20000094 	.word	0x20000094

08007a58 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b086      	sub	sp, #24
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	60b9      	str	r1, [r7, #8]
 8007a62:	4613      	mov	r3, r2
 8007a64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d101      	bne.n	8007a70 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007a6c:	2303      	movs	r3, #3
 8007a6e:	e01f      	b.n	8007ab0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2200      	movs	r2, #0
 8007a74:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2200      	movs	r2, #0
 8007a84:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d003      	beq.n	8007a96 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	68ba      	ldr	r2, [r7, #8]
 8007a92:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2201      	movs	r2, #1
 8007a9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	79fa      	ldrb	r2, [r7, #7]
 8007aa2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007aa4:	68f8      	ldr	r0, [r7, #12]
 8007aa6:	f004 fc4d 	bl	800c344 <USBD_LL_Init>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007aae:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3718      	adds	r7, #24
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d101      	bne.n	8007ad0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007acc:	2303      	movs	r3, #3
 8007ace:	e025      	b.n	8007b1c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	683a      	ldr	r2, [r7, #0]
 8007ad4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	32ae      	adds	r2, #174	; 0xae
 8007ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d00f      	beq.n	8007b0c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	32ae      	adds	r2, #174	; 0xae
 8007af6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007afc:	f107 020e 	add.w	r2, r7, #14
 8007b00:	4610      	mov	r0, r2
 8007b02:	4798      	blx	r3
 8007b04:	4602      	mov	r2, r0
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007b12:	1c5a      	adds	r2, r3, #1
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007b1a:	2300      	movs	r3, #0
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3710      	adds	r7, #16
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f004 fc55 	bl	800c3dc <USBD_LL_Start>
 8007b32:	4603      	mov	r3, r0
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3708      	adds	r7, #8
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b083      	sub	sp, #12
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b44:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	370c      	adds	r7, #12
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr

08007b52 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b52:	b580      	push	{r7, lr}
 8007b54:	b084      	sub	sp, #16
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d009      	beq.n	8007b80 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	78fa      	ldrb	r2, [r7, #3]
 8007b76:	4611      	mov	r1, r2
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	4798      	blx	r3
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3710      	adds	r7, #16
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}

08007b8a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b8a:	b580      	push	{r7, lr}
 8007b8c:	b084      	sub	sp, #16
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
 8007b92:	460b      	mov	r3, r1
 8007b94:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b96:	2300      	movs	r3, #0
 8007b98:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	78fa      	ldrb	r2, [r7, #3]
 8007ba4:	4611      	mov	r1, r2
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	4798      	blx	r3
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d001      	beq.n	8007bb4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007bb0:	2303      	movs	r3, #3
 8007bb2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3710      	adds	r7, #16
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}

08007bbe <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007bbe:	b580      	push	{r7, lr}
 8007bc0:	b084      	sub	sp, #16
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
 8007bc6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007bce:	6839      	ldr	r1, [r7, #0]
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f001 f908 	bl	8008de6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2201      	movs	r2, #1
 8007bda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007be4:	461a      	mov	r2, r3
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007bf2:	f003 031f 	and.w	r3, r3, #31
 8007bf6:	2b02      	cmp	r3, #2
 8007bf8:	d01a      	beq.n	8007c30 <USBD_LL_SetupStage+0x72>
 8007bfa:	2b02      	cmp	r3, #2
 8007bfc:	d822      	bhi.n	8007c44 <USBD_LL_SetupStage+0x86>
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d002      	beq.n	8007c08 <USBD_LL_SetupStage+0x4a>
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	d00a      	beq.n	8007c1c <USBD_LL_SetupStage+0x5e>
 8007c06:	e01d      	b.n	8007c44 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c0e:	4619      	mov	r1, r3
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 fb5f 	bl	80082d4 <USBD_StdDevReq>
 8007c16:	4603      	mov	r3, r0
 8007c18:	73fb      	strb	r3, [r7, #15]
      break;
 8007c1a:	e020      	b.n	8007c5e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c22:	4619      	mov	r1, r3
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 fbc7 	bl	80083b8 <USBD_StdItfReq>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	73fb      	strb	r3, [r7, #15]
      break;
 8007c2e:	e016      	b.n	8007c5e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c36:	4619      	mov	r1, r3
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 fc29 	bl	8008490 <USBD_StdEPReq>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	73fb      	strb	r3, [r7, #15]
      break;
 8007c42:	e00c      	b.n	8007c5e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007c4a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007c4e:	b2db      	uxtb	r3, r3
 8007c50:	4619      	mov	r1, r3
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f004 fc22 	bl	800c49c <USBD_LL_StallEP>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	73fb      	strb	r3, [r7, #15]
      break;
 8007c5c:	bf00      	nop
  }

  return ret;
 8007c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3710      	adds	r7, #16
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b086      	sub	sp, #24
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	460b      	mov	r3, r1
 8007c72:	607a      	str	r2, [r7, #4]
 8007c74:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007c76:	2300      	movs	r3, #0
 8007c78:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007c7a:	7afb      	ldrb	r3, [r7, #11]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d16e      	bne.n	8007d5e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007c86:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c8e:	2b03      	cmp	r3, #3
 8007c90:	f040 8098 	bne.w	8007dc4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	689a      	ldr	r2, [r3, #8]
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d913      	bls.n	8007cc8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	689a      	ldr	r2, [r3, #8]
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	1ad2      	subs	r2, r2, r3
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	68da      	ldr	r2, [r3, #12]
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	bf28      	it	cs
 8007cba:	4613      	movcs	r3, r2
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	6879      	ldr	r1, [r7, #4]
 8007cc0:	68f8      	ldr	r0, [r7, #12]
 8007cc2:	f001 f984 	bl	8008fce <USBD_CtlContinueRx>
 8007cc6:	e07d      	b.n	8007dc4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007cce:	f003 031f 	and.w	r3, r3, #31
 8007cd2:	2b02      	cmp	r3, #2
 8007cd4:	d014      	beq.n	8007d00 <USBD_LL_DataOutStage+0x98>
 8007cd6:	2b02      	cmp	r3, #2
 8007cd8:	d81d      	bhi.n	8007d16 <USBD_LL_DataOutStage+0xae>
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d002      	beq.n	8007ce4 <USBD_LL_DataOutStage+0x7c>
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d003      	beq.n	8007cea <USBD_LL_DataOutStage+0x82>
 8007ce2:	e018      	b.n	8007d16 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	75bb      	strb	r3, [r7, #22]
            break;
 8007ce8:	e018      	b.n	8007d1c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	68f8      	ldr	r0, [r7, #12]
 8007cf6:	f000 fa5e 	bl	80081b6 <USBD_CoreFindIF>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	75bb      	strb	r3, [r7, #22]
            break;
 8007cfe:	e00d      	b.n	8007d1c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	4619      	mov	r1, r3
 8007d0a:	68f8      	ldr	r0, [r7, #12]
 8007d0c:	f000 fa60 	bl	80081d0 <USBD_CoreFindEP>
 8007d10:	4603      	mov	r3, r0
 8007d12:	75bb      	strb	r3, [r7, #22]
            break;
 8007d14:	e002      	b.n	8007d1c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007d16:	2300      	movs	r3, #0
 8007d18:	75bb      	strb	r3, [r7, #22]
            break;
 8007d1a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007d1c:	7dbb      	ldrb	r3, [r7, #22]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d119      	bne.n	8007d56 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	2b03      	cmp	r3, #3
 8007d2c:	d113      	bne.n	8007d56 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007d2e:	7dba      	ldrb	r2, [r7, #22]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	32ae      	adds	r2, #174	; 0xae
 8007d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d38:	691b      	ldr	r3, [r3, #16]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00b      	beq.n	8007d56 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007d3e:	7dba      	ldrb	r2, [r7, #22]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007d46:	7dba      	ldrb	r2, [r7, #22]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	32ae      	adds	r2, #174	; 0xae
 8007d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d50:	691b      	ldr	r3, [r3, #16]
 8007d52:	68f8      	ldr	r0, [r7, #12]
 8007d54:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007d56:	68f8      	ldr	r0, [r7, #12]
 8007d58:	f001 f94a 	bl	8008ff0 <USBD_CtlSendStatus>
 8007d5c:	e032      	b.n	8007dc4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007d5e:	7afb      	ldrb	r3, [r7, #11]
 8007d60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	4619      	mov	r1, r3
 8007d68:	68f8      	ldr	r0, [r7, #12]
 8007d6a:	f000 fa31 	bl	80081d0 <USBD_CoreFindEP>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d72:	7dbb      	ldrb	r3, [r7, #22]
 8007d74:	2bff      	cmp	r3, #255	; 0xff
 8007d76:	d025      	beq.n	8007dc4 <USBD_LL_DataOutStage+0x15c>
 8007d78:	7dbb      	ldrb	r3, [r7, #22]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d122      	bne.n	8007dc4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	2b03      	cmp	r3, #3
 8007d88:	d117      	bne.n	8007dba <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007d8a:	7dba      	ldrb	r2, [r7, #22]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	32ae      	adds	r2, #174	; 0xae
 8007d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d94:	699b      	ldr	r3, [r3, #24]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d00f      	beq.n	8007dba <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007d9a:	7dba      	ldrb	r2, [r7, #22]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007da2:	7dba      	ldrb	r2, [r7, #22]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	32ae      	adds	r2, #174	; 0xae
 8007da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dac:	699b      	ldr	r3, [r3, #24]
 8007dae:	7afa      	ldrb	r2, [r7, #11]
 8007db0:	4611      	mov	r1, r2
 8007db2:	68f8      	ldr	r0, [r7, #12]
 8007db4:	4798      	blx	r3
 8007db6:	4603      	mov	r3, r0
 8007db8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007dba:	7dfb      	ldrb	r3, [r7, #23]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d001      	beq.n	8007dc4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007dc0:	7dfb      	ldrb	r3, [r7, #23]
 8007dc2:	e000      	b.n	8007dc6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3718      	adds	r7, #24
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}

08007dce <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007dce:	b580      	push	{r7, lr}
 8007dd0:	b086      	sub	sp, #24
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	60f8      	str	r0, [r7, #12]
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	607a      	str	r2, [r7, #4]
 8007dda:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007ddc:	7afb      	ldrb	r3, [r7, #11]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d16f      	bne.n	8007ec2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	3314      	adds	r3, #20
 8007de6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007dee:	2b02      	cmp	r3, #2
 8007df0:	d15a      	bne.n	8007ea8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	689a      	ldr	r2, [r3, #8]
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d914      	bls.n	8007e28 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	689a      	ldr	r2, [r3, #8]
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	68db      	ldr	r3, [r3, #12]
 8007e06:	1ad2      	subs	r2, r2, r3
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	461a      	mov	r2, r3
 8007e12:	6879      	ldr	r1, [r7, #4]
 8007e14:	68f8      	ldr	r0, [r7, #12]
 8007e16:	f001 f8ac 	bl	8008f72 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	2100      	movs	r1, #0
 8007e20:	68f8      	ldr	r0, [r7, #12]
 8007e22:	f004 fbe5 	bl	800c5f0 <USBD_LL_PrepareReceive>
 8007e26:	e03f      	b.n	8007ea8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	68da      	ldr	r2, [r3, #12]
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d11c      	bne.n	8007e6e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	685a      	ldr	r2, [r3, #4]
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d316      	bcc.n	8007e6e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	685a      	ldr	r2, [r3, #4]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d20f      	bcs.n	8007e6e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007e4e:	2200      	movs	r2, #0
 8007e50:	2100      	movs	r1, #0
 8007e52:	68f8      	ldr	r0, [r7, #12]
 8007e54:	f001 f88d 	bl	8008f72 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e60:	2300      	movs	r3, #0
 8007e62:	2200      	movs	r2, #0
 8007e64:	2100      	movs	r1, #0
 8007e66:	68f8      	ldr	r0, [r7, #12]
 8007e68:	f004 fbc2 	bl	800c5f0 <USBD_LL_PrepareReceive>
 8007e6c:	e01c      	b.n	8007ea8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	2b03      	cmp	r3, #3
 8007e78:	d10f      	bne.n	8007e9a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e80:	68db      	ldr	r3, [r3, #12]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d009      	beq.n	8007e9a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	68f8      	ldr	r0, [r7, #12]
 8007e98:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e9a:	2180      	movs	r1, #128	; 0x80
 8007e9c:	68f8      	ldr	r0, [r7, #12]
 8007e9e:	f004 fafd 	bl	800c49c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007ea2:	68f8      	ldr	r0, [r7, #12]
 8007ea4:	f001 f8b7 	bl	8009016 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d03a      	beq.n	8007f28 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007eb2:	68f8      	ldr	r0, [r7, #12]
 8007eb4:	f7ff fe42 	bl	8007b3c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007ec0:	e032      	b.n	8007f28 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007ec2:	7afb      	ldrb	r3, [r7, #11]
 8007ec4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	4619      	mov	r1, r3
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f000 f97f 	bl	80081d0 <USBD_CoreFindEP>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ed6:	7dfb      	ldrb	r3, [r7, #23]
 8007ed8:	2bff      	cmp	r3, #255	; 0xff
 8007eda:	d025      	beq.n	8007f28 <USBD_LL_DataInStage+0x15a>
 8007edc:	7dfb      	ldrb	r3, [r7, #23]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d122      	bne.n	8007f28 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ee8:	b2db      	uxtb	r3, r3
 8007eea:	2b03      	cmp	r3, #3
 8007eec:	d11c      	bne.n	8007f28 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007eee:	7dfa      	ldrb	r2, [r7, #23]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	32ae      	adds	r2, #174	; 0xae
 8007ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ef8:	695b      	ldr	r3, [r3, #20]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d014      	beq.n	8007f28 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007efe:	7dfa      	ldrb	r2, [r7, #23]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007f06:	7dfa      	ldrb	r2, [r7, #23]
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	32ae      	adds	r2, #174	; 0xae
 8007f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f10:	695b      	ldr	r3, [r3, #20]
 8007f12:	7afa      	ldrb	r2, [r7, #11]
 8007f14:	4611      	mov	r1, r2
 8007f16:	68f8      	ldr	r0, [r7, #12]
 8007f18:	4798      	blx	r3
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007f1e:	7dbb      	ldrb	r3, [r7, #22]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d001      	beq.n	8007f28 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007f24:	7dbb      	ldrb	r3, [r7, #22]
 8007f26:	e000      	b.n	8007f2a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007f28:	2300      	movs	r3, #0
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3718      	adds	r7, #24
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}

08007f32 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007f32:	b580      	push	{r7, lr}
 8007f34:	b084      	sub	sp, #16
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2201      	movs	r2, #1
 8007f42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2200      	movs	r2, #0
 8007f52:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2200      	movs	r2, #0
 8007f58:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d014      	beq.n	8007f98 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d00e      	beq.n	8007f98 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	6852      	ldr	r2, [r2, #4]
 8007f86:	b2d2      	uxtb	r2, r2
 8007f88:	4611      	mov	r1, r2
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	4798      	blx	r3
 8007f8e:	4603      	mov	r3, r0
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d001      	beq.n	8007f98 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007f94:	2303      	movs	r3, #3
 8007f96:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f98:	2340      	movs	r3, #64	; 0x40
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	2100      	movs	r1, #0
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f004 fa37 	bl	800c412 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2240      	movs	r2, #64	; 0x40
 8007fb0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007fb4:	2340      	movs	r3, #64	; 0x40
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	2180      	movs	r1, #128	; 0x80
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f004 fa29 	bl	800c412 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2240      	movs	r2, #64	; 0x40
 8007fca:	621a      	str	r2, [r3, #32]

  return ret;
 8007fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3710      	adds	r7, #16
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}

08007fd6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007fd6:	b480      	push	{r7}
 8007fd8:	b083      	sub	sp, #12
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
 8007fde:	460b      	mov	r3, r1
 8007fe0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	78fa      	ldrb	r2, [r7, #3]
 8007fe6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007fe8:	2300      	movs	r3, #0
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	370c      	adds	r7, #12
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr

08007ff6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007ff6:	b480      	push	{r7}
 8007ff8:	b083      	sub	sp, #12
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008004:	b2da      	uxtb	r2, r3
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2204      	movs	r2, #4
 8008010:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008014:	2300      	movs	r3, #0
}
 8008016:	4618      	mov	r0, r3
 8008018:	370c      	adds	r7, #12
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr

08008022 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008022:	b480      	push	{r7}
 8008024:	b083      	sub	sp, #12
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008030:	b2db      	uxtb	r3, r3
 8008032:	2b04      	cmp	r3, #4
 8008034:	d106      	bne.n	8008044 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800803c:	b2da      	uxtb	r2, r3
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008044:	2300      	movs	r3, #0
}
 8008046:	4618      	mov	r0, r3
 8008048:	370c      	adds	r7, #12
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr

08008052 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008052:	b580      	push	{r7, lr}
 8008054:	b082      	sub	sp, #8
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008060:	b2db      	uxtb	r3, r3
 8008062:	2b03      	cmp	r3, #3
 8008064:	d110      	bne.n	8008088 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800806c:	2b00      	cmp	r3, #0
 800806e:	d00b      	beq.n	8008088 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008076:	69db      	ldr	r3, [r3, #28]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d005      	beq.n	8008088 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008082:	69db      	ldr	r3, [r3, #28]
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008088:	2300      	movs	r3, #0
}
 800808a:	4618      	mov	r0, r3
 800808c:	3708      	adds	r7, #8
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008092:	b580      	push	{r7, lr}
 8008094:	b082      	sub	sp, #8
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
 800809a:	460b      	mov	r3, r1
 800809c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	32ae      	adds	r2, #174	; 0xae
 80080a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d101      	bne.n	80080b4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80080b0:	2303      	movs	r3, #3
 80080b2:	e01c      	b.n	80080ee <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	2b03      	cmp	r3, #3
 80080be:	d115      	bne.n	80080ec <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	32ae      	adds	r2, #174	; 0xae
 80080ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080ce:	6a1b      	ldr	r3, [r3, #32]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d00b      	beq.n	80080ec <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	32ae      	adds	r2, #174	; 0xae
 80080de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080e2:	6a1b      	ldr	r3, [r3, #32]
 80080e4:	78fa      	ldrb	r2, [r7, #3]
 80080e6:	4611      	mov	r1, r2
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80080ec:	2300      	movs	r3, #0
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3708      	adds	r7, #8
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}

080080f6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80080f6:	b580      	push	{r7, lr}
 80080f8:	b082      	sub	sp, #8
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
 80080fe:	460b      	mov	r3, r1
 8008100:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	32ae      	adds	r2, #174	; 0xae
 800810c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d101      	bne.n	8008118 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008114:	2303      	movs	r3, #3
 8008116:	e01c      	b.n	8008152 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800811e:	b2db      	uxtb	r3, r3
 8008120:	2b03      	cmp	r3, #3
 8008122:	d115      	bne.n	8008150 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	32ae      	adds	r2, #174	; 0xae
 800812e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008134:	2b00      	cmp	r3, #0
 8008136:	d00b      	beq.n	8008150 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	32ae      	adds	r2, #174	; 0xae
 8008142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008148:	78fa      	ldrb	r2, [r7, #3]
 800814a:	4611      	mov	r1, r2
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008150:	2300      	movs	r3, #0
}
 8008152:	4618      	mov	r0, r3
 8008154:	3708      	adds	r7, #8
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}

0800815a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800815a:	b480      	push	{r7}
 800815c:	b083      	sub	sp, #12
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008162:	2300      	movs	r3, #0
}
 8008164:	4618      	mov	r0, r3
 8008166:	370c      	adds	r7, #12
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr

08008170 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008178:	2300      	movs	r3, #0
 800817a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800818a:	2b00      	cmp	r3, #0
 800818c:	d00e      	beq.n	80081ac <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	6852      	ldr	r2, [r2, #4]
 800819a:	b2d2      	uxtb	r2, r2
 800819c:	4611      	mov	r1, r2
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	4798      	blx	r3
 80081a2:	4603      	mov	r3, r0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d001      	beq.n	80081ac <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80081a8:	2303      	movs	r3, #3
 80081aa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80081ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3710      	adds	r7, #16
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}

080081b6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80081b6:	b480      	push	{r7}
 80081b8:	b083      	sub	sp, #12
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]
 80081be:	460b      	mov	r3, r1
 80081c0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80081c2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	460b      	mov	r3, r1
 80081da:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80081dc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80081de:	4618      	mov	r0, r3
 80081e0:	370c      	adds	r7, #12
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr

080081ea <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80081ea:	b580      	push	{r7, lr}
 80081ec:	b086      	sub	sp, #24
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
 80081f2:	460b      	mov	r3, r1
 80081f4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80081fe:	2300      	movs	r3, #0
 8008200:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	885b      	ldrh	r3, [r3, #2]
 8008206:	b29a      	uxth	r2, r3
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	b29b      	uxth	r3, r3
 800820e:	429a      	cmp	r2, r3
 8008210:	d920      	bls.n	8008254 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	b29b      	uxth	r3, r3
 8008218:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800821a:	e013      	b.n	8008244 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800821c:	f107 030a 	add.w	r3, r7, #10
 8008220:	4619      	mov	r1, r3
 8008222:	6978      	ldr	r0, [r7, #20]
 8008224:	f000 f81b 	bl	800825e <USBD_GetNextDesc>
 8008228:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	785b      	ldrb	r3, [r3, #1]
 800822e:	2b05      	cmp	r3, #5
 8008230:	d108      	bne.n	8008244 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	789b      	ldrb	r3, [r3, #2]
 800823a:	78fa      	ldrb	r2, [r7, #3]
 800823c:	429a      	cmp	r2, r3
 800823e:	d008      	beq.n	8008252 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008240:	2300      	movs	r3, #0
 8008242:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	885b      	ldrh	r3, [r3, #2]
 8008248:	b29a      	uxth	r2, r3
 800824a:	897b      	ldrh	r3, [r7, #10]
 800824c:	429a      	cmp	r2, r3
 800824e:	d8e5      	bhi.n	800821c <USBD_GetEpDesc+0x32>
 8008250:	e000      	b.n	8008254 <USBD_GetEpDesc+0x6a>
          break;
 8008252:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008254:	693b      	ldr	r3, [r7, #16]
}
 8008256:	4618      	mov	r0, r3
 8008258:	3718      	adds	r7, #24
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800825e:	b480      	push	{r7}
 8008260:	b085      	sub	sp, #20
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
 8008266:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	881a      	ldrh	r2, [r3, #0]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	b29b      	uxth	r3, r3
 8008276:	4413      	add	r3, r2
 8008278:	b29a      	uxth	r2, r3
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	461a      	mov	r2, r3
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	4413      	add	r3, r2
 8008288:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800828a:	68fb      	ldr	r3, [r7, #12]
}
 800828c:	4618      	mov	r0, r3
 800828e:	3714      	adds	r7, #20
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr

08008298 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008298:	b480      	push	{r7}
 800829a:	b087      	sub	sp, #28
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	3301      	adds	r3, #1
 80082ae:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80082b6:	8a3b      	ldrh	r3, [r7, #16]
 80082b8:	021b      	lsls	r3, r3, #8
 80082ba:	b21a      	sxth	r2, r3
 80082bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80082c0:	4313      	orrs	r3, r2
 80082c2:	b21b      	sxth	r3, r3
 80082c4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80082c6:	89fb      	ldrh	r3, [r7, #14]
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	371c      	adds	r7, #28
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b084      	sub	sp, #16
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80082de:	2300      	movs	r3, #0
 80082e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082ea:	2b40      	cmp	r3, #64	; 0x40
 80082ec:	d005      	beq.n	80082fa <USBD_StdDevReq+0x26>
 80082ee:	2b40      	cmp	r3, #64	; 0x40
 80082f0:	d857      	bhi.n	80083a2 <USBD_StdDevReq+0xce>
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d00f      	beq.n	8008316 <USBD_StdDevReq+0x42>
 80082f6:	2b20      	cmp	r3, #32
 80082f8:	d153      	bne.n	80083a2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	32ae      	adds	r2, #174	; 0xae
 8008304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	6839      	ldr	r1, [r7, #0]
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	4798      	blx	r3
 8008310:	4603      	mov	r3, r0
 8008312:	73fb      	strb	r3, [r7, #15]
      break;
 8008314:	e04a      	b.n	80083ac <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	785b      	ldrb	r3, [r3, #1]
 800831a:	2b09      	cmp	r3, #9
 800831c:	d83b      	bhi.n	8008396 <USBD_StdDevReq+0xc2>
 800831e:	a201      	add	r2, pc, #4	; (adr r2, 8008324 <USBD_StdDevReq+0x50>)
 8008320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008324:	08008379 	.word	0x08008379
 8008328:	0800838d 	.word	0x0800838d
 800832c:	08008397 	.word	0x08008397
 8008330:	08008383 	.word	0x08008383
 8008334:	08008397 	.word	0x08008397
 8008338:	08008357 	.word	0x08008357
 800833c:	0800834d 	.word	0x0800834d
 8008340:	08008397 	.word	0x08008397
 8008344:	0800836f 	.word	0x0800836f
 8008348:	08008361 	.word	0x08008361
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800834c:	6839      	ldr	r1, [r7, #0]
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 fa3c 	bl	80087cc <USBD_GetDescriptor>
          break;
 8008354:	e024      	b.n	80083a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008356:	6839      	ldr	r1, [r7, #0]
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f000 fba1 	bl	8008aa0 <USBD_SetAddress>
          break;
 800835e:	e01f      	b.n	80083a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008360:	6839      	ldr	r1, [r7, #0]
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 fbe0 	bl	8008b28 <USBD_SetConfig>
 8008368:	4603      	mov	r3, r0
 800836a:	73fb      	strb	r3, [r7, #15]
          break;
 800836c:	e018      	b.n	80083a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800836e:	6839      	ldr	r1, [r7, #0]
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f000 fc83 	bl	8008c7c <USBD_GetConfig>
          break;
 8008376:	e013      	b.n	80083a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008378:	6839      	ldr	r1, [r7, #0]
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f000 fcb4 	bl	8008ce8 <USBD_GetStatus>
          break;
 8008380:	e00e      	b.n	80083a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008382:	6839      	ldr	r1, [r7, #0]
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 fce3 	bl	8008d50 <USBD_SetFeature>
          break;
 800838a:	e009      	b.n	80083a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800838c:	6839      	ldr	r1, [r7, #0]
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 fd07 	bl	8008da2 <USBD_ClrFeature>
          break;
 8008394:	e004      	b.n	80083a0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008396:	6839      	ldr	r1, [r7, #0]
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 fd5e 	bl	8008e5a <USBD_CtlError>
          break;
 800839e:	bf00      	nop
      }
      break;
 80083a0:	e004      	b.n	80083ac <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80083a2:	6839      	ldr	r1, [r7, #0]
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 fd58 	bl	8008e5a <USBD_CtlError>
      break;
 80083aa:	bf00      	nop
  }

  return ret;
 80083ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3710      	adds	r7, #16
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop

080083b8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80083c2:	2300      	movs	r3, #0
 80083c4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	781b      	ldrb	r3, [r3, #0]
 80083ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083ce:	2b40      	cmp	r3, #64	; 0x40
 80083d0:	d005      	beq.n	80083de <USBD_StdItfReq+0x26>
 80083d2:	2b40      	cmp	r3, #64	; 0x40
 80083d4:	d852      	bhi.n	800847c <USBD_StdItfReq+0xc4>
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d001      	beq.n	80083de <USBD_StdItfReq+0x26>
 80083da:	2b20      	cmp	r3, #32
 80083dc:	d14e      	bne.n	800847c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083e4:	b2db      	uxtb	r3, r3
 80083e6:	3b01      	subs	r3, #1
 80083e8:	2b02      	cmp	r3, #2
 80083ea:	d840      	bhi.n	800846e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	889b      	ldrh	r3, [r3, #4]
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d836      	bhi.n	8008464 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	889b      	ldrh	r3, [r3, #4]
 80083fa:	b2db      	uxtb	r3, r3
 80083fc:	4619      	mov	r1, r3
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f7ff fed9 	bl	80081b6 <USBD_CoreFindIF>
 8008404:	4603      	mov	r3, r0
 8008406:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008408:	7bbb      	ldrb	r3, [r7, #14]
 800840a:	2bff      	cmp	r3, #255	; 0xff
 800840c:	d01d      	beq.n	800844a <USBD_StdItfReq+0x92>
 800840e:	7bbb      	ldrb	r3, [r7, #14]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d11a      	bne.n	800844a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008414:	7bba      	ldrb	r2, [r7, #14]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	32ae      	adds	r2, #174	; 0xae
 800841a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d00f      	beq.n	8008444 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008424:	7bba      	ldrb	r2, [r7, #14]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800842c:	7bba      	ldrb	r2, [r7, #14]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	32ae      	adds	r2, #174	; 0xae
 8008432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008436:	689b      	ldr	r3, [r3, #8]
 8008438:	6839      	ldr	r1, [r7, #0]
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	4798      	blx	r3
 800843e:	4603      	mov	r3, r0
 8008440:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008442:	e004      	b.n	800844e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008444:	2303      	movs	r3, #3
 8008446:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008448:	e001      	b.n	800844e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800844a:	2303      	movs	r3, #3
 800844c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	88db      	ldrh	r3, [r3, #6]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d110      	bne.n	8008478 <USBD_StdItfReq+0xc0>
 8008456:	7bfb      	ldrb	r3, [r7, #15]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d10d      	bne.n	8008478 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 fdc7 	bl	8008ff0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008462:	e009      	b.n	8008478 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008464:	6839      	ldr	r1, [r7, #0]
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 fcf7 	bl	8008e5a <USBD_CtlError>
          break;
 800846c:	e004      	b.n	8008478 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800846e:	6839      	ldr	r1, [r7, #0]
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 fcf2 	bl	8008e5a <USBD_CtlError>
          break;
 8008476:	e000      	b.n	800847a <USBD_StdItfReq+0xc2>
          break;
 8008478:	bf00      	nop
      }
      break;
 800847a:	e004      	b.n	8008486 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800847c:	6839      	ldr	r1, [r7, #0]
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 fceb 	bl	8008e5a <USBD_CtlError>
      break;
 8008484:	bf00      	nop
  }

  return ret;
 8008486:	7bfb      	ldrb	r3, [r7, #15]
}
 8008488:	4618      	mov	r0, r3
 800848a:	3710      	adds	r7, #16
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b084      	sub	sp, #16
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800849a:	2300      	movs	r3, #0
 800849c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	889b      	ldrh	r3, [r3, #4]
 80084a2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80084ac:	2b40      	cmp	r3, #64	; 0x40
 80084ae:	d007      	beq.n	80084c0 <USBD_StdEPReq+0x30>
 80084b0:	2b40      	cmp	r3, #64	; 0x40
 80084b2:	f200 817f 	bhi.w	80087b4 <USBD_StdEPReq+0x324>
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d02a      	beq.n	8008510 <USBD_StdEPReq+0x80>
 80084ba:	2b20      	cmp	r3, #32
 80084bc:	f040 817a 	bne.w	80087b4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80084c0:	7bbb      	ldrb	r3, [r7, #14]
 80084c2:	4619      	mov	r1, r3
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f7ff fe83 	bl	80081d0 <USBD_CoreFindEP>
 80084ca:	4603      	mov	r3, r0
 80084cc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80084ce:	7b7b      	ldrb	r3, [r7, #13]
 80084d0:	2bff      	cmp	r3, #255	; 0xff
 80084d2:	f000 8174 	beq.w	80087be <USBD_StdEPReq+0x32e>
 80084d6:	7b7b      	ldrb	r3, [r7, #13]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	f040 8170 	bne.w	80087be <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80084de:	7b7a      	ldrb	r2, [r7, #13]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80084e6:	7b7a      	ldrb	r2, [r7, #13]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	32ae      	adds	r2, #174	; 0xae
 80084ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	f000 8163 	beq.w	80087be <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80084f8:	7b7a      	ldrb	r2, [r7, #13]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	32ae      	adds	r2, #174	; 0xae
 80084fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	6839      	ldr	r1, [r7, #0]
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	4798      	blx	r3
 800850a:	4603      	mov	r3, r0
 800850c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800850e:	e156      	b.n	80087be <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	785b      	ldrb	r3, [r3, #1]
 8008514:	2b03      	cmp	r3, #3
 8008516:	d008      	beq.n	800852a <USBD_StdEPReq+0x9a>
 8008518:	2b03      	cmp	r3, #3
 800851a:	f300 8145 	bgt.w	80087a8 <USBD_StdEPReq+0x318>
 800851e:	2b00      	cmp	r3, #0
 8008520:	f000 809b 	beq.w	800865a <USBD_StdEPReq+0x1ca>
 8008524:	2b01      	cmp	r3, #1
 8008526:	d03c      	beq.n	80085a2 <USBD_StdEPReq+0x112>
 8008528:	e13e      	b.n	80087a8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008530:	b2db      	uxtb	r3, r3
 8008532:	2b02      	cmp	r3, #2
 8008534:	d002      	beq.n	800853c <USBD_StdEPReq+0xac>
 8008536:	2b03      	cmp	r3, #3
 8008538:	d016      	beq.n	8008568 <USBD_StdEPReq+0xd8>
 800853a:	e02c      	b.n	8008596 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800853c:	7bbb      	ldrb	r3, [r7, #14]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d00d      	beq.n	800855e <USBD_StdEPReq+0xce>
 8008542:	7bbb      	ldrb	r3, [r7, #14]
 8008544:	2b80      	cmp	r3, #128	; 0x80
 8008546:	d00a      	beq.n	800855e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008548:	7bbb      	ldrb	r3, [r7, #14]
 800854a:	4619      	mov	r1, r3
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f003 ffa5 	bl	800c49c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008552:	2180      	movs	r1, #128	; 0x80
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f003 ffa1 	bl	800c49c <USBD_LL_StallEP>
 800855a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800855c:	e020      	b.n	80085a0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800855e:	6839      	ldr	r1, [r7, #0]
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 fc7a 	bl	8008e5a <USBD_CtlError>
              break;
 8008566:	e01b      	b.n	80085a0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	885b      	ldrh	r3, [r3, #2]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d10e      	bne.n	800858e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008570:	7bbb      	ldrb	r3, [r7, #14]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d00b      	beq.n	800858e <USBD_StdEPReq+0xfe>
 8008576:	7bbb      	ldrb	r3, [r7, #14]
 8008578:	2b80      	cmp	r3, #128	; 0x80
 800857a:	d008      	beq.n	800858e <USBD_StdEPReq+0xfe>
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	88db      	ldrh	r3, [r3, #6]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d104      	bne.n	800858e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008584:	7bbb      	ldrb	r3, [r7, #14]
 8008586:	4619      	mov	r1, r3
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f003 ff87 	bl	800c49c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 fd2e 	bl	8008ff0 <USBD_CtlSendStatus>

              break;
 8008594:	e004      	b.n	80085a0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008596:	6839      	ldr	r1, [r7, #0]
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 fc5e 	bl	8008e5a <USBD_CtlError>
              break;
 800859e:	bf00      	nop
          }
          break;
 80085a0:	e107      	b.n	80087b2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085a8:	b2db      	uxtb	r3, r3
 80085aa:	2b02      	cmp	r3, #2
 80085ac:	d002      	beq.n	80085b4 <USBD_StdEPReq+0x124>
 80085ae:	2b03      	cmp	r3, #3
 80085b0:	d016      	beq.n	80085e0 <USBD_StdEPReq+0x150>
 80085b2:	e04b      	b.n	800864c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085b4:	7bbb      	ldrb	r3, [r7, #14]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d00d      	beq.n	80085d6 <USBD_StdEPReq+0x146>
 80085ba:	7bbb      	ldrb	r3, [r7, #14]
 80085bc:	2b80      	cmp	r3, #128	; 0x80
 80085be:	d00a      	beq.n	80085d6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80085c0:	7bbb      	ldrb	r3, [r7, #14]
 80085c2:	4619      	mov	r1, r3
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f003 ff69 	bl	800c49c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80085ca:	2180      	movs	r1, #128	; 0x80
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f003 ff65 	bl	800c49c <USBD_LL_StallEP>
 80085d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80085d4:	e040      	b.n	8008658 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80085d6:	6839      	ldr	r1, [r7, #0]
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 fc3e 	bl	8008e5a <USBD_CtlError>
              break;
 80085de:	e03b      	b.n	8008658 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	885b      	ldrh	r3, [r3, #2]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d136      	bne.n	8008656 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80085e8:	7bbb      	ldrb	r3, [r7, #14]
 80085ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d004      	beq.n	80085fc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80085f2:	7bbb      	ldrb	r3, [r7, #14]
 80085f4:	4619      	mov	r1, r3
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f003 ff6f 	bl	800c4da <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 fcf7 	bl	8008ff0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008602:	7bbb      	ldrb	r3, [r7, #14]
 8008604:	4619      	mov	r1, r3
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f7ff fde2 	bl	80081d0 <USBD_CoreFindEP>
 800860c:	4603      	mov	r3, r0
 800860e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008610:	7b7b      	ldrb	r3, [r7, #13]
 8008612:	2bff      	cmp	r3, #255	; 0xff
 8008614:	d01f      	beq.n	8008656 <USBD_StdEPReq+0x1c6>
 8008616:	7b7b      	ldrb	r3, [r7, #13]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d11c      	bne.n	8008656 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800861c:	7b7a      	ldrb	r2, [r7, #13]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008624:	7b7a      	ldrb	r2, [r7, #13]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	32ae      	adds	r2, #174	; 0xae
 800862a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d010      	beq.n	8008656 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008634:	7b7a      	ldrb	r2, [r7, #13]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	32ae      	adds	r2, #174	; 0xae
 800863a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	6839      	ldr	r1, [r7, #0]
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	4798      	blx	r3
 8008646:	4603      	mov	r3, r0
 8008648:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800864a:	e004      	b.n	8008656 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800864c:	6839      	ldr	r1, [r7, #0]
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 fc03 	bl	8008e5a <USBD_CtlError>
              break;
 8008654:	e000      	b.n	8008658 <USBD_StdEPReq+0x1c8>
              break;
 8008656:	bf00      	nop
          }
          break;
 8008658:	e0ab      	b.n	80087b2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008660:	b2db      	uxtb	r3, r3
 8008662:	2b02      	cmp	r3, #2
 8008664:	d002      	beq.n	800866c <USBD_StdEPReq+0x1dc>
 8008666:	2b03      	cmp	r3, #3
 8008668:	d032      	beq.n	80086d0 <USBD_StdEPReq+0x240>
 800866a:	e097      	b.n	800879c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800866c:	7bbb      	ldrb	r3, [r7, #14]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d007      	beq.n	8008682 <USBD_StdEPReq+0x1f2>
 8008672:	7bbb      	ldrb	r3, [r7, #14]
 8008674:	2b80      	cmp	r3, #128	; 0x80
 8008676:	d004      	beq.n	8008682 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008678:	6839      	ldr	r1, [r7, #0]
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 fbed 	bl	8008e5a <USBD_CtlError>
                break;
 8008680:	e091      	b.n	80087a6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008682:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008686:	2b00      	cmp	r3, #0
 8008688:	da0b      	bge.n	80086a2 <USBD_StdEPReq+0x212>
 800868a:	7bbb      	ldrb	r3, [r7, #14]
 800868c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008690:	4613      	mov	r3, r2
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	4413      	add	r3, r2
 8008696:	009b      	lsls	r3, r3, #2
 8008698:	3310      	adds	r3, #16
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	4413      	add	r3, r2
 800869e:	3304      	adds	r3, #4
 80086a0:	e00b      	b.n	80086ba <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80086a2:	7bbb      	ldrb	r3, [r7, #14]
 80086a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086a8:	4613      	mov	r3, r2
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	4413      	add	r3, r2
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	4413      	add	r3, r2
 80086b8:	3304      	adds	r3, #4
 80086ba:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	2200      	movs	r2, #0
 80086c0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	2202      	movs	r2, #2
 80086c6:	4619      	mov	r1, r3
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 fc37 	bl	8008f3c <USBD_CtlSendData>
              break;
 80086ce:	e06a      	b.n	80087a6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80086d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	da11      	bge.n	80086fc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80086d8:	7bbb      	ldrb	r3, [r7, #14]
 80086da:	f003 020f 	and.w	r2, r3, #15
 80086de:	6879      	ldr	r1, [r7, #4]
 80086e0:	4613      	mov	r3, r2
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	4413      	add	r3, r2
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	440b      	add	r3, r1
 80086ea:	3324      	adds	r3, #36	; 0x24
 80086ec:	881b      	ldrh	r3, [r3, #0]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d117      	bne.n	8008722 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80086f2:	6839      	ldr	r1, [r7, #0]
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 fbb0 	bl	8008e5a <USBD_CtlError>
                  break;
 80086fa:	e054      	b.n	80087a6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80086fc:	7bbb      	ldrb	r3, [r7, #14]
 80086fe:	f003 020f 	and.w	r2, r3, #15
 8008702:	6879      	ldr	r1, [r7, #4]
 8008704:	4613      	mov	r3, r2
 8008706:	009b      	lsls	r3, r3, #2
 8008708:	4413      	add	r3, r2
 800870a:	009b      	lsls	r3, r3, #2
 800870c:	440b      	add	r3, r1
 800870e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008712:	881b      	ldrh	r3, [r3, #0]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d104      	bne.n	8008722 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008718:	6839      	ldr	r1, [r7, #0]
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 fb9d 	bl	8008e5a <USBD_CtlError>
                  break;
 8008720:	e041      	b.n	80087a6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008722:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008726:	2b00      	cmp	r3, #0
 8008728:	da0b      	bge.n	8008742 <USBD_StdEPReq+0x2b2>
 800872a:	7bbb      	ldrb	r3, [r7, #14]
 800872c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008730:	4613      	mov	r3, r2
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	4413      	add	r3, r2
 8008736:	009b      	lsls	r3, r3, #2
 8008738:	3310      	adds	r3, #16
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	4413      	add	r3, r2
 800873e:	3304      	adds	r3, #4
 8008740:	e00b      	b.n	800875a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008742:	7bbb      	ldrb	r3, [r7, #14]
 8008744:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008748:	4613      	mov	r3, r2
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	4413      	add	r3, r2
 800874e:	009b      	lsls	r3, r3, #2
 8008750:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	4413      	add	r3, r2
 8008758:	3304      	adds	r3, #4
 800875a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800875c:	7bbb      	ldrb	r3, [r7, #14]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d002      	beq.n	8008768 <USBD_StdEPReq+0x2d8>
 8008762:	7bbb      	ldrb	r3, [r7, #14]
 8008764:	2b80      	cmp	r3, #128	; 0x80
 8008766:	d103      	bne.n	8008770 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	2200      	movs	r2, #0
 800876c:	601a      	str	r2, [r3, #0]
 800876e:	e00e      	b.n	800878e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008770:	7bbb      	ldrb	r3, [r7, #14]
 8008772:	4619      	mov	r1, r3
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f003 fecf 	bl	800c518 <USBD_LL_IsStallEP>
 800877a:	4603      	mov	r3, r0
 800877c:	2b00      	cmp	r3, #0
 800877e:	d003      	beq.n	8008788 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	2201      	movs	r2, #1
 8008784:	601a      	str	r2, [r3, #0]
 8008786:	e002      	b.n	800878e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	2200      	movs	r2, #0
 800878c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	2202      	movs	r2, #2
 8008792:	4619      	mov	r1, r3
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 fbd1 	bl	8008f3c <USBD_CtlSendData>
              break;
 800879a:	e004      	b.n	80087a6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800879c:	6839      	ldr	r1, [r7, #0]
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 fb5b 	bl	8008e5a <USBD_CtlError>
              break;
 80087a4:	bf00      	nop
          }
          break;
 80087a6:	e004      	b.n	80087b2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80087a8:	6839      	ldr	r1, [r7, #0]
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 fb55 	bl	8008e5a <USBD_CtlError>
          break;
 80087b0:	bf00      	nop
      }
      break;
 80087b2:	e005      	b.n	80087c0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80087b4:	6839      	ldr	r1, [r7, #0]
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 fb4f 	bl	8008e5a <USBD_CtlError>
      break;
 80087bc:	e000      	b.n	80087c0 <USBD_StdEPReq+0x330>
      break;
 80087be:	bf00      	nop
  }

  return ret;
 80087c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3710      	adds	r7, #16
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
	...

080087cc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80087d6:	2300      	movs	r3, #0
 80087d8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80087da:	2300      	movs	r3, #0
 80087dc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80087de:	2300      	movs	r3, #0
 80087e0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	885b      	ldrh	r3, [r3, #2]
 80087e6:	0a1b      	lsrs	r3, r3, #8
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	3b01      	subs	r3, #1
 80087ec:	2b06      	cmp	r3, #6
 80087ee:	f200 8128 	bhi.w	8008a42 <USBD_GetDescriptor+0x276>
 80087f2:	a201      	add	r2, pc, #4	; (adr r2, 80087f8 <USBD_GetDescriptor+0x2c>)
 80087f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087f8:	08008815 	.word	0x08008815
 80087fc:	0800882d 	.word	0x0800882d
 8008800:	0800886d 	.word	0x0800886d
 8008804:	08008a43 	.word	0x08008a43
 8008808:	08008a43 	.word	0x08008a43
 800880c:	080089e3 	.word	0x080089e3
 8008810:	08008a0f 	.word	0x08008a0f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	7c12      	ldrb	r2, [r2, #16]
 8008820:	f107 0108 	add.w	r1, r7, #8
 8008824:	4610      	mov	r0, r2
 8008826:	4798      	blx	r3
 8008828:	60f8      	str	r0, [r7, #12]
      break;
 800882a:	e112      	b.n	8008a52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	7c1b      	ldrb	r3, [r3, #16]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d10d      	bne.n	8008850 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800883a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800883c:	f107 0208 	add.w	r2, r7, #8
 8008840:	4610      	mov	r0, r2
 8008842:	4798      	blx	r3
 8008844:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	3301      	adds	r3, #1
 800884a:	2202      	movs	r2, #2
 800884c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800884e:	e100      	b.n	8008a52 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008858:	f107 0208 	add.w	r2, r7, #8
 800885c:	4610      	mov	r0, r2
 800885e:	4798      	blx	r3
 8008860:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	3301      	adds	r3, #1
 8008866:	2202      	movs	r2, #2
 8008868:	701a      	strb	r2, [r3, #0]
      break;
 800886a:	e0f2      	b.n	8008a52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	885b      	ldrh	r3, [r3, #2]
 8008870:	b2db      	uxtb	r3, r3
 8008872:	2b05      	cmp	r3, #5
 8008874:	f200 80ac 	bhi.w	80089d0 <USBD_GetDescriptor+0x204>
 8008878:	a201      	add	r2, pc, #4	; (adr r2, 8008880 <USBD_GetDescriptor+0xb4>)
 800887a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800887e:	bf00      	nop
 8008880:	08008899 	.word	0x08008899
 8008884:	080088cd 	.word	0x080088cd
 8008888:	08008901 	.word	0x08008901
 800888c:	08008935 	.word	0x08008935
 8008890:	08008969 	.word	0x08008969
 8008894:	0800899d 	.word	0x0800899d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d00b      	beq.n	80088bc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	687a      	ldr	r2, [r7, #4]
 80088ae:	7c12      	ldrb	r2, [r2, #16]
 80088b0:	f107 0108 	add.w	r1, r7, #8
 80088b4:	4610      	mov	r0, r2
 80088b6:	4798      	blx	r3
 80088b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088ba:	e091      	b.n	80089e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088bc:	6839      	ldr	r1, [r7, #0]
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 facb 	bl	8008e5a <USBD_CtlError>
            err++;
 80088c4:	7afb      	ldrb	r3, [r7, #11]
 80088c6:	3301      	adds	r3, #1
 80088c8:	72fb      	strb	r3, [r7, #11]
          break;
 80088ca:	e089      	b.n	80089e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d00b      	beq.n	80088f0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	687a      	ldr	r2, [r7, #4]
 80088e2:	7c12      	ldrb	r2, [r2, #16]
 80088e4:	f107 0108 	add.w	r1, r7, #8
 80088e8:	4610      	mov	r0, r2
 80088ea:	4798      	blx	r3
 80088ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088ee:	e077      	b.n	80089e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088f0:	6839      	ldr	r1, [r7, #0]
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 fab1 	bl	8008e5a <USBD_CtlError>
            err++;
 80088f8:	7afb      	ldrb	r3, [r7, #11]
 80088fa:	3301      	adds	r3, #1
 80088fc:	72fb      	strb	r3, [r7, #11]
          break;
 80088fe:	e06f      	b.n	80089e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008906:	68db      	ldr	r3, [r3, #12]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d00b      	beq.n	8008924 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008912:	68db      	ldr	r3, [r3, #12]
 8008914:	687a      	ldr	r2, [r7, #4]
 8008916:	7c12      	ldrb	r2, [r2, #16]
 8008918:	f107 0108 	add.w	r1, r7, #8
 800891c:	4610      	mov	r0, r2
 800891e:	4798      	blx	r3
 8008920:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008922:	e05d      	b.n	80089e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008924:	6839      	ldr	r1, [r7, #0]
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 fa97 	bl	8008e5a <USBD_CtlError>
            err++;
 800892c:	7afb      	ldrb	r3, [r7, #11]
 800892e:	3301      	adds	r3, #1
 8008930:	72fb      	strb	r3, [r7, #11]
          break;
 8008932:	e055      	b.n	80089e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800893a:	691b      	ldr	r3, [r3, #16]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d00b      	beq.n	8008958 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008946:	691b      	ldr	r3, [r3, #16]
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	7c12      	ldrb	r2, [r2, #16]
 800894c:	f107 0108 	add.w	r1, r7, #8
 8008950:	4610      	mov	r0, r2
 8008952:	4798      	blx	r3
 8008954:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008956:	e043      	b.n	80089e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008958:	6839      	ldr	r1, [r7, #0]
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f000 fa7d 	bl	8008e5a <USBD_CtlError>
            err++;
 8008960:	7afb      	ldrb	r3, [r7, #11]
 8008962:	3301      	adds	r3, #1
 8008964:	72fb      	strb	r3, [r7, #11]
          break;
 8008966:	e03b      	b.n	80089e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800896e:	695b      	ldr	r3, [r3, #20]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d00b      	beq.n	800898c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800897a:	695b      	ldr	r3, [r3, #20]
 800897c:	687a      	ldr	r2, [r7, #4]
 800897e:	7c12      	ldrb	r2, [r2, #16]
 8008980:	f107 0108 	add.w	r1, r7, #8
 8008984:	4610      	mov	r0, r2
 8008986:	4798      	blx	r3
 8008988:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800898a:	e029      	b.n	80089e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800898c:	6839      	ldr	r1, [r7, #0]
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 fa63 	bl	8008e5a <USBD_CtlError>
            err++;
 8008994:	7afb      	ldrb	r3, [r7, #11]
 8008996:	3301      	adds	r3, #1
 8008998:	72fb      	strb	r3, [r7, #11]
          break;
 800899a:	e021      	b.n	80089e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089a2:	699b      	ldr	r3, [r3, #24]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d00b      	beq.n	80089c0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ae:	699b      	ldr	r3, [r3, #24]
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	7c12      	ldrb	r2, [r2, #16]
 80089b4:	f107 0108 	add.w	r1, r7, #8
 80089b8:	4610      	mov	r0, r2
 80089ba:	4798      	blx	r3
 80089bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089be:	e00f      	b.n	80089e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089c0:	6839      	ldr	r1, [r7, #0]
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 fa49 	bl	8008e5a <USBD_CtlError>
            err++;
 80089c8:	7afb      	ldrb	r3, [r7, #11]
 80089ca:	3301      	adds	r3, #1
 80089cc:	72fb      	strb	r3, [r7, #11]
          break;
 80089ce:	e007      	b.n	80089e0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80089d0:	6839      	ldr	r1, [r7, #0]
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 fa41 	bl	8008e5a <USBD_CtlError>
          err++;
 80089d8:	7afb      	ldrb	r3, [r7, #11]
 80089da:	3301      	adds	r3, #1
 80089dc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80089de:	bf00      	nop
      }
      break;
 80089e0:	e037      	b.n	8008a52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	7c1b      	ldrb	r3, [r3, #16]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d109      	bne.n	80089fe <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089f2:	f107 0208 	add.w	r2, r7, #8
 80089f6:	4610      	mov	r0, r2
 80089f8:	4798      	blx	r3
 80089fa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089fc:	e029      	b.n	8008a52 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80089fe:	6839      	ldr	r1, [r7, #0]
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 fa2a 	bl	8008e5a <USBD_CtlError>
        err++;
 8008a06:	7afb      	ldrb	r3, [r7, #11]
 8008a08:	3301      	adds	r3, #1
 8008a0a:	72fb      	strb	r3, [r7, #11]
      break;
 8008a0c:	e021      	b.n	8008a52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	7c1b      	ldrb	r3, [r3, #16]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d10d      	bne.n	8008a32 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a1e:	f107 0208 	add.w	r2, r7, #8
 8008a22:	4610      	mov	r0, r2
 8008a24:	4798      	blx	r3
 8008a26:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	2207      	movs	r2, #7
 8008a2e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a30:	e00f      	b.n	8008a52 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008a32:	6839      	ldr	r1, [r7, #0]
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f000 fa10 	bl	8008e5a <USBD_CtlError>
        err++;
 8008a3a:	7afb      	ldrb	r3, [r7, #11]
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	72fb      	strb	r3, [r7, #11]
      break;
 8008a40:	e007      	b.n	8008a52 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008a42:	6839      	ldr	r1, [r7, #0]
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f000 fa08 	bl	8008e5a <USBD_CtlError>
      err++;
 8008a4a:	7afb      	ldrb	r3, [r7, #11]
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	72fb      	strb	r3, [r7, #11]
      break;
 8008a50:	bf00      	nop
  }

  if (err != 0U)
 8008a52:	7afb      	ldrb	r3, [r7, #11]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d11e      	bne.n	8008a96 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	88db      	ldrh	r3, [r3, #6]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d016      	beq.n	8008a8e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008a60:	893b      	ldrh	r3, [r7, #8]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d00e      	beq.n	8008a84 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	88da      	ldrh	r2, [r3, #6]
 8008a6a:	893b      	ldrh	r3, [r7, #8]
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	bf28      	it	cs
 8008a70:	4613      	movcs	r3, r2
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008a76:	893b      	ldrh	r3, [r7, #8]
 8008a78:	461a      	mov	r2, r3
 8008a7a:	68f9      	ldr	r1, [r7, #12]
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 fa5d 	bl	8008f3c <USBD_CtlSendData>
 8008a82:	e009      	b.n	8008a98 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008a84:	6839      	ldr	r1, [r7, #0]
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 f9e7 	bl	8008e5a <USBD_CtlError>
 8008a8c:	e004      	b.n	8008a98 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f000 faae 	bl	8008ff0 <USBD_CtlSendStatus>
 8008a94:	e000      	b.n	8008a98 <USBD_GetDescriptor+0x2cc>
    return;
 8008a96:	bf00      	nop
  }
}
 8008a98:	3710      	adds	r7, #16
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	bf00      	nop

08008aa0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	889b      	ldrh	r3, [r3, #4]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d131      	bne.n	8008b16 <USBD_SetAddress+0x76>
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	88db      	ldrh	r3, [r3, #6]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d12d      	bne.n	8008b16 <USBD_SetAddress+0x76>
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	885b      	ldrh	r3, [r3, #2]
 8008abe:	2b7f      	cmp	r3, #127	; 0x7f
 8008ac0:	d829      	bhi.n	8008b16 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	885b      	ldrh	r3, [r3, #2]
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008acc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ad4:	b2db      	uxtb	r3, r3
 8008ad6:	2b03      	cmp	r3, #3
 8008ad8:	d104      	bne.n	8008ae4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008ada:	6839      	ldr	r1, [r7, #0]
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f000 f9bc 	bl	8008e5a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ae2:	e01d      	b.n	8008b20 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	7bfa      	ldrb	r2, [r7, #15]
 8008ae8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008aec:	7bfb      	ldrb	r3, [r7, #15]
 8008aee:	4619      	mov	r1, r3
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f003 fd3d 	bl	800c570 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 fa7a 	bl	8008ff0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008afc:	7bfb      	ldrb	r3, [r7, #15]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d004      	beq.n	8008b0c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2202      	movs	r2, #2
 8008b06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b0a:	e009      	b.n	8008b20 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2201      	movs	r2, #1
 8008b10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b14:	e004      	b.n	8008b20 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008b16:	6839      	ldr	r1, [r7, #0]
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 f99e 	bl	8008e5a <USBD_CtlError>
  }
}
 8008b1e:	bf00      	nop
 8008b20:	bf00      	nop
 8008b22:	3710      	adds	r7, #16
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b32:	2300      	movs	r3, #0
 8008b34:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	885b      	ldrh	r3, [r3, #2]
 8008b3a:	b2da      	uxtb	r2, r3
 8008b3c:	4b4e      	ldr	r3, [pc, #312]	; (8008c78 <USBD_SetConfig+0x150>)
 8008b3e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008b40:	4b4d      	ldr	r3, [pc, #308]	; (8008c78 <USBD_SetConfig+0x150>)
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	d905      	bls.n	8008b54 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008b48:	6839      	ldr	r1, [r7, #0]
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f000 f985 	bl	8008e5a <USBD_CtlError>
    return USBD_FAIL;
 8008b50:	2303      	movs	r3, #3
 8008b52:	e08c      	b.n	8008c6e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b5a:	b2db      	uxtb	r3, r3
 8008b5c:	2b02      	cmp	r3, #2
 8008b5e:	d002      	beq.n	8008b66 <USBD_SetConfig+0x3e>
 8008b60:	2b03      	cmp	r3, #3
 8008b62:	d029      	beq.n	8008bb8 <USBD_SetConfig+0x90>
 8008b64:	e075      	b.n	8008c52 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008b66:	4b44      	ldr	r3, [pc, #272]	; (8008c78 <USBD_SetConfig+0x150>)
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d020      	beq.n	8008bb0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008b6e:	4b42      	ldr	r3, [pc, #264]	; (8008c78 <USBD_SetConfig+0x150>)
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	461a      	mov	r2, r3
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008b78:	4b3f      	ldr	r3, [pc, #252]	; (8008c78 <USBD_SetConfig+0x150>)
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f7fe ffe7 	bl	8007b52 <USBD_SetClassConfig>
 8008b84:	4603      	mov	r3, r0
 8008b86:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008b88:	7bfb      	ldrb	r3, [r7, #15]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d008      	beq.n	8008ba0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008b8e:	6839      	ldr	r1, [r7, #0]
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 f962 	bl	8008e5a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2202      	movs	r2, #2
 8008b9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008b9e:	e065      	b.n	8008c6c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f000 fa25 	bl	8008ff0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2203      	movs	r2, #3
 8008baa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008bae:	e05d      	b.n	8008c6c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 fa1d 	bl	8008ff0 <USBD_CtlSendStatus>
      break;
 8008bb6:	e059      	b.n	8008c6c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008bb8:	4b2f      	ldr	r3, [pc, #188]	; (8008c78 <USBD_SetConfig+0x150>)
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d112      	bne.n	8008be6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2202      	movs	r2, #2
 8008bc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008bc8:	4b2b      	ldr	r3, [pc, #172]	; (8008c78 <USBD_SetConfig+0x150>)
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	461a      	mov	r2, r3
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008bd2:	4b29      	ldr	r3, [pc, #164]	; (8008c78 <USBD_SetConfig+0x150>)
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f7fe ffd6 	bl	8007b8a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 fa06 	bl	8008ff0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008be4:	e042      	b.n	8008c6c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008be6:	4b24      	ldr	r3, [pc, #144]	; (8008c78 <USBD_SetConfig+0x150>)
 8008be8:	781b      	ldrb	r3, [r3, #0]
 8008bea:	461a      	mov	r2, r3
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d02a      	beq.n	8008c4a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	b2db      	uxtb	r3, r3
 8008bfa:	4619      	mov	r1, r3
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f7fe ffc4 	bl	8007b8a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008c02:	4b1d      	ldr	r3, [pc, #116]	; (8008c78 <USBD_SetConfig+0x150>)
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	461a      	mov	r2, r3
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c0c:	4b1a      	ldr	r3, [pc, #104]	; (8008c78 <USBD_SetConfig+0x150>)
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	4619      	mov	r1, r3
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f7fe ff9d 	bl	8007b52 <USBD_SetClassConfig>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008c1c:	7bfb      	ldrb	r3, [r7, #15]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d00f      	beq.n	8008c42 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008c22:	6839      	ldr	r1, [r7, #0]
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f000 f918 	bl	8008e5a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	b2db      	uxtb	r3, r3
 8008c30:	4619      	mov	r1, r3
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f7fe ffa9 	bl	8007b8a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2202      	movs	r2, #2
 8008c3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008c40:	e014      	b.n	8008c6c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 f9d4 	bl	8008ff0 <USBD_CtlSendStatus>
      break;
 8008c48:	e010      	b.n	8008c6c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 f9d0 	bl	8008ff0 <USBD_CtlSendStatus>
      break;
 8008c50:	e00c      	b.n	8008c6c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008c52:	6839      	ldr	r1, [r7, #0]
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 f900 	bl	8008e5a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c5a:	4b07      	ldr	r3, [pc, #28]	; (8008c78 <USBD_SetConfig+0x150>)
 8008c5c:	781b      	ldrb	r3, [r3, #0]
 8008c5e:	4619      	mov	r1, r3
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f7fe ff92 	bl	8007b8a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008c66:	2303      	movs	r3, #3
 8008c68:	73fb      	strb	r3, [r7, #15]
      break;
 8008c6a:	bf00      	nop
  }

  return ret;
 8008c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3710      	adds	r7, #16
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
 8008c76:	bf00      	nop
 8008c78:	2000031c 	.word	0x2000031c

08008c7c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b082      	sub	sp, #8
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	88db      	ldrh	r3, [r3, #6]
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d004      	beq.n	8008c98 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008c8e:	6839      	ldr	r1, [r7, #0]
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f000 f8e2 	bl	8008e5a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008c96:	e023      	b.n	8008ce0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	2b02      	cmp	r3, #2
 8008ca2:	dc02      	bgt.n	8008caa <USBD_GetConfig+0x2e>
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	dc03      	bgt.n	8008cb0 <USBD_GetConfig+0x34>
 8008ca8:	e015      	b.n	8008cd6 <USBD_GetConfig+0x5a>
 8008caa:	2b03      	cmp	r3, #3
 8008cac:	d00b      	beq.n	8008cc6 <USBD_GetConfig+0x4a>
 8008cae:	e012      	b.n	8008cd6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	3308      	adds	r3, #8
 8008cba:	2201      	movs	r2, #1
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f000 f93c 	bl	8008f3c <USBD_CtlSendData>
        break;
 8008cc4:	e00c      	b.n	8008ce0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	3304      	adds	r3, #4
 8008cca:	2201      	movs	r2, #1
 8008ccc:	4619      	mov	r1, r3
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 f934 	bl	8008f3c <USBD_CtlSendData>
        break;
 8008cd4:	e004      	b.n	8008ce0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008cd6:	6839      	ldr	r1, [r7, #0]
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 f8be 	bl	8008e5a <USBD_CtlError>
        break;
 8008cde:	bf00      	nop
}
 8008ce0:	bf00      	nop
 8008ce2:	3708      	adds	r7, #8
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b082      	sub	sp, #8
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cf8:	b2db      	uxtb	r3, r3
 8008cfa:	3b01      	subs	r3, #1
 8008cfc:	2b02      	cmp	r3, #2
 8008cfe:	d81e      	bhi.n	8008d3e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	88db      	ldrh	r3, [r3, #6]
 8008d04:	2b02      	cmp	r3, #2
 8008d06:	d004      	beq.n	8008d12 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008d08:	6839      	ldr	r1, [r7, #0]
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 f8a5 	bl	8008e5a <USBD_CtlError>
        break;
 8008d10:	e01a      	b.n	8008d48 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2201      	movs	r2, #1
 8008d16:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d005      	beq.n	8008d2e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	68db      	ldr	r3, [r3, #12]
 8008d26:	f043 0202 	orr.w	r2, r3, #2
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	330c      	adds	r3, #12
 8008d32:	2202      	movs	r2, #2
 8008d34:	4619      	mov	r1, r3
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 f900 	bl	8008f3c <USBD_CtlSendData>
      break;
 8008d3c:	e004      	b.n	8008d48 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008d3e:	6839      	ldr	r1, [r7, #0]
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 f88a 	bl	8008e5a <USBD_CtlError>
      break;
 8008d46:	bf00      	nop
  }
}
 8008d48:	bf00      	nop
 8008d4a:	3708      	adds	r7, #8
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b082      	sub	sp, #8
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	885b      	ldrh	r3, [r3, #2]
 8008d5e:	2b01      	cmp	r3, #1
 8008d60:	d107      	bne.n	8008d72 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2201      	movs	r2, #1
 8008d66:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 f940 	bl	8008ff0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008d70:	e013      	b.n	8008d9a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	885b      	ldrh	r3, [r3, #2]
 8008d76:	2b02      	cmp	r3, #2
 8008d78:	d10b      	bne.n	8008d92 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	889b      	ldrh	r3, [r3, #4]
 8008d7e:	0a1b      	lsrs	r3, r3, #8
 8008d80:	b29b      	uxth	r3, r3
 8008d82:	b2da      	uxtb	r2, r3
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 f930 	bl	8008ff0 <USBD_CtlSendStatus>
}
 8008d90:	e003      	b.n	8008d9a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008d92:	6839      	ldr	r1, [r7, #0]
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f000 f860 	bl	8008e5a <USBD_CtlError>
}
 8008d9a:	bf00      	nop
 8008d9c:	3708      	adds	r7, #8
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}

08008da2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008da2:	b580      	push	{r7, lr}
 8008da4:	b082      	sub	sp, #8
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
 8008daa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008db2:	b2db      	uxtb	r3, r3
 8008db4:	3b01      	subs	r3, #1
 8008db6:	2b02      	cmp	r3, #2
 8008db8:	d80b      	bhi.n	8008dd2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	885b      	ldrh	r3, [r3, #2]
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	d10c      	bne.n	8008ddc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 f910 	bl	8008ff0 <USBD_CtlSendStatus>
      }
      break;
 8008dd0:	e004      	b.n	8008ddc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008dd2:	6839      	ldr	r1, [r7, #0]
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 f840 	bl	8008e5a <USBD_CtlError>
      break;
 8008dda:	e000      	b.n	8008dde <USBD_ClrFeature+0x3c>
      break;
 8008ddc:	bf00      	nop
  }
}
 8008dde:	bf00      	nop
 8008de0:	3708      	adds	r7, #8
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}

08008de6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008de6:	b580      	push	{r7, lr}
 8008de8:	b084      	sub	sp, #16
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6078      	str	r0, [r7, #4]
 8008dee:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	781a      	ldrb	r2, [r3, #0]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	3301      	adds	r3, #1
 8008e00:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	781a      	ldrb	r2, [r3, #0]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008e10:	68f8      	ldr	r0, [r7, #12]
 8008e12:	f7ff fa41 	bl	8008298 <SWAPBYTE>
 8008e16:	4603      	mov	r3, r0
 8008e18:	461a      	mov	r2, r3
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	3301      	adds	r3, #1
 8008e22:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	3301      	adds	r3, #1
 8008e28:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008e2a:	68f8      	ldr	r0, [r7, #12]
 8008e2c:	f7ff fa34 	bl	8008298 <SWAPBYTE>
 8008e30:	4603      	mov	r3, r0
 8008e32:	461a      	mov	r2, r3
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	3301      	adds	r3, #1
 8008e42:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008e44:	68f8      	ldr	r0, [r7, #12]
 8008e46:	f7ff fa27 	bl	8008298 <SWAPBYTE>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	80da      	strh	r2, [r3, #6]
}
 8008e52:	bf00      	nop
 8008e54:	3710      	adds	r7, #16
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}

08008e5a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e5a:	b580      	push	{r7, lr}
 8008e5c:	b082      	sub	sp, #8
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
 8008e62:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e64:	2180      	movs	r1, #128	; 0x80
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f003 fb18 	bl	800c49c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008e6c:	2100      	movs	r1, #0
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f003 fb14 	bl	800c49c <USBD_LL_StallEP>
}
 8008e74:	bf00      	nop
 8008e76:	3708      	adds	r7, #8
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b086      	sub	sp, #24
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	60f8      	str	r0, [r7, #12]
 8008e84:	60b9      	str	r1, [r7, #8]
 8008e86:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d036      	beq.n	8008f00 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008e96:	6938      	ldr	r0, [r7, #16]
 8008e98:	f000 f836 	bl	8008f08 <USBD_GetLen>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	b29b      	uxth	r3, r3
 8008ea2:	005b      	lsls	r3, r3, #1
 8008ea4:	b29a      	uxth	r2, r3
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008eaa:	7dfb      	ldrb	r3, [r7, #23]
 8008eac:	68ba      	ldr	r2, [r7, #8]
 8008eae:	4413      	add	r3, r2
 8008eb0:	687a      	ldr	r2, [r7, #4]
 8008eb2:	7812      	ldrb	r2, [r2, #0]
 8008eb4:	701a      	strb	r2, [r3, #0]
  idx++;
 8008eb6:	7dfb      	ldrb	r3, [r7, #23]
 8008eb8:	3301      	adds	r3, #1
 8008eba:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008ebc:	7dfb      	ldrb	r3, [r7, #23]
 8008ebe:	68ba      	ldr	r2, [r7, #8]
 8008ec0:	4413      	add	r3, r2
 8008ec2:	2203      	movs	r2, #3
 8008ec4:	701a      	strb	r2, [r3, #0]
  idx++;
 8008ec6:	7dfb      	ldrb	r3, [r7, #23]
 8008ec8:	3301      	adds	r3, #1
 8008eca:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008ecc:	e013      	b.n	8008ef6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008ece:	7dfb      	ldrb	r3, [r7, #23]
 8008ed0:	68ba      	ldr	r2, [r7, #8]
 8008ed2:	4413      	add	r3, r2
 8008ed4:	693a      	ldr	r2, [r7, #16]
 8008ed6:	7812      	ldrb	r2, [r2, #0]
 8008ed8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	3301      	adds	r3, #1
 8008ede:	613b      	str	r3, [r7, #16]
    idx++;
 8008ee0:	7dfb      	ldrb	r3, [r7, #23]
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008ee6:	7dfb      	ldrb	r3, [r7, #23]
 8008ee8:	68ba      	ldr	r2, [r7, #8]
 8008eea:	4413      	add	r3, r2
 8008eec:	2200      	movs	r2, #0
 8008eee:	701a      	strb	r2, [r3, #0]
    idx++;
 8008ef0:	7dfb      	ldrb	r3, [r7, #23]
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d1e7      	bne.n	8008ece <USBD_GetString+0x52>
 8008efe:	e000      	b.n	8008f02 <USBD_GetString+0x86>
    return;
 8008f00:	bf00      	nop
  }
}
 8008f02:	3718      	adds	r7, #24
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b085      	sub	sp, #20
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008f10:	2300      	movs	r3, #0
 8008f12:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008f18:	e005      	b.n	8008f26 <USBD_GetLen+0x1e>
  {
    len++;
 8008f1a:	7bfb      	ldrb	r3, [r7, #15]
 8008f1c:	3301      	adds	r3, #1
 8008f1e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	3301      	adds	r3, #1
 8008f24:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d1f5      	bne.n	8008f1a <USBD_GetLen+0x12>
  }

  return len;
 8008f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3714      	adds	r7, #20
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr

08008f3c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b084      	sub	sp, #16
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	60f8      	str	r0, [r7, #12]
 8008f44:	60b9      	str	r1, [r7, #8]
 8008f46:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2202      	movs	r2, #2
 8008f4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	687a      	ldr	r2, [r7, #4]
 8008f54:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	68ba      	ldr	r2, [r7, #8]
 8008f60:	2100      	movs	r1, #0
 8008f62:	68f8      	ldr	r0, [r7, #12]
 8008f64:	f003 fb23 	bl	800c5ae <USBD_LL_Transmit>

  return USBD_OK;
 8008f68:	2300      	movs	r3, #0
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3710      	adds	r7, #16
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}

08008f72 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008f72:	b580      	push	{r7, lr}
 8008f74:	b084      	sub	sp, #16
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	60f8      	str	r0, [r7, #12]
 8008f7a:	60b9      	str	r1, [r7, #8]
 8008f7c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	68ba      	ldr	r2, [r7, #8]
 8008f82:	2100      	movs	r1, #0
 8008f84:	68f8      	ldr	r0, [r7, #12]
 8008f86:	f003 fb12 	bl	800c5ae <USBD_LL_Transmit>

  return USBD_OK;
 8008f8a:	2300      	movs	r3, #0
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3710      	adds	r7, #16
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	60f8      	str	r0, [r7, #12]
 8008f9c:	60b9      	str	r1, [r7, #8]
 8008f9e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2203      	movs	r2, #3
 8008fa4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	687a      	ldr	r2, [r7, #4]
 8008fac:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	68ba      	ldr	r2, [r7, #8]
 8008fbc:	2100      	movs	r1, #0
 8008fbe:	68f8      	ldr	r0, [r7, #12]
 8008fc0:	f003 fb16 	bl	800c5f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008fc4:	2300      	movs	r3, #0
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3710      	adds	r7, #16
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}

08008fce <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008fce:	b580      	push	{r7, lr}
 8008fd0:	b084      	sub	sp, #16
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	60f8      	str	r0, [r7, #12]
 8008fd6:	60b9      	str	r1, [r7, #8]
 8008fd8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	68ba      	ldr	r2, [r7, #8]
 8008fde:	2100      	movs	r1, #0
 8008fe0:	68f8      	ldr	r0, [r7, #12]
 8008fe2:	f003 fb05 	bl	800c5f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008fe6:	2300      	movs	r3, #0
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3710      	adds	r7, #16
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b082      	sub	sp, #8
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2204      	movs	r2, #4
 8008ffc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009000:	2300      	movs	r3, #0
 8009002:	2200      	movs	r2, #0
 8009004:	2100      	movs	r1, #0
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f003 fad1 	bl	800c5ae <USBD_LL_Transmit>

  return USBD_OK;
 800900c:	2300      	movs	r3, #0
}
 800900e:	4618      	mov	r0, r3
 8009010:	3708      	adds	r7, #8
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}

08009016 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009016:	b580      	push	{r7, lr}
 8009018:	b082      	sub	sp, #8
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2205      	movs	r2, #5
 8009022:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009026:	2300      	movs	r3, #0
 8009028:	2200      	movs	r2, #0
 800902a:	2100      	movs	r1, #0
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f003 fadf 	bl	800c5f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009032:	2300      	movs	r3, #0
}
 8009034:	4618      	mov	r0, r3
 8009036:	3708      	adds	r7, #8
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}

0800903c <__NVIC_SetPriority>:
{
 800903c:	b480      	push	{r7}
 800903e:	b083      	sub	sp, #12
 8009040:	af00      	add	r7, sp, #0
 8009042:	4603      	mov	r3, r0
 8009044:	6039      	str	r1, [r7, #0]
 8009046:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800904c:	2b00      	cmp	r3, #0
 800904e:	db0a      	blt.n	8009066 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	b2da      	uxtb	r2, r3
 8009054:	490c      	ldr	r1, [pc, #48]	; (8009088 <__NVIC_SetPriority+0x4c>)
 8009056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800905a:	0112      	lsls	r2, r2, #4
 800905c:	b2d2      	uxtb	r2, r2
 800905e:	440b      	add	r3, r1
 8009060:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009064:	e00a      	b.n	800907c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	b2da      	uxtb	r2, r3
 800906a:	4908      	ldr	r1, [pc, #32]	; (800908c <__NVIC_SetPriority+0x50>)
 800906c:	79fb      	ldrb	r3, [r7, #7]
 800906e:	f003 030f 	and.w	r3, r3, #15
 8009072:	3b04      	subs	r3, #4
 8009074:	0112      	lsls	r2, r2, #4
 8009076:	b2d2      	uxtb	r2, r2
 8009078:	440b      	add	r3, r1
 800907a:	761a      	strb	r2, [r3, #24]
}
 800907c:	bf00      	nop
 800907e:	370c      	adds	r7, #12
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr
 8009088:	e000e100 	.word	0xe000e100
 800908c:	e000ed00 	.word	0xe000ed00

08009090 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009090:	b580      	push	{r7, lr}
 8009092:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009094:	4b05      	ldr	r3, [pc, #20]	; (80090ac <SysTick_Handler+0x1c>)
 8009096:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009098:	f001 fd62 	bl	800ab60 <xTaskGetSchedulerState>
 800909c:	4603      	mov	r3, r0
 800909e:	2b01      	cmp	r3, #1
 80090a0:	d001      	beq.n	80090a6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80090a2:	f002 fb49 	bl	800b738 <xPortSysTickHandler>
  }
}
 80090a6:	bf00      	nop
 80090a8:	bd80      	pop	{r7, pc}
 80090aa:	bf00      	nop
 80090ac:	e000e010 	.word	0xe000e010

080090b0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80090b0:	b580      	push	{r7, lr}
 80090b2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80090b4:	2100      	movs	r1, #0
 80090b6:	f06f 0004 	mvn.w	r0, #4
 80090ba:	f7ff ffbf 	bl	800903c <__NVIC_SetPriority>
#endif
}
 80090be:	bf00      	nop
 80090c0:	bd80      	pop	{r7, pc}
	...

080090c4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80090c4:	b480      	push	{r7}
 80090c6:	b083      	sub	sp, #12
 80090c8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090ca:	f3ef 8305 	mrs	r3, IPSR
 80090ce:	603b      	str	r3, [r7, #0]
  return(result);
 80090d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d003      	beq.n	80090de <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80090d6:	f06f 0305 	mvn.w	r3, #5
 80090da:	607b      	str	r3, [r7, #4]
 80090dc:	e00c      	b.n	80090f8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80090de:	4b0a      	ldr	r3, [pc, #40]	; (8009108 <osKernelInitialize+0x44>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d105      	bne.n	80090f2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80090e6:	4b08      	ldr	r3, [pc, #32]	; (8009108 <osKernelInitialize+0x44>)
 80090e8:	2201      	movs	r2, #1
 80090ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80090ec:	2300      	movs	r3, #0
 80090ee:	607b      	str	r3, [r7, #4]
 80090f0:	e002      	b.n	80090f8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80090f2:	f04f 33ff 	mov.w	r3, #4294967295
 80090f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80090f8:	687b      	ldr	r3, [r7, #4]
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	370c      	adds	r7, #12
 80090fe:	46bd      	mov	sp, r7
 8009100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009104:	4770      	bx	lr
 8009106:	bf00      	nop
 8009108:	20000320 	.word	0x20000320

0800910c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800910c:	b580      	push	{r7, lr}
 800910e:	b082      	sub	sp, #8
 8009110:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009112:	f3ef 8305 	mrs	r3, IPSR
 8009116:	603b      	str	r3, [r7, #0]
  return(result);
 8009118:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800911a:	2b00      	cmp	r3, #0
 800911c:	d003      	beq.n	8009126 <osKernelStart+0x1a>
    stat = osErrorISR;
 800911e:	f06f 0305 	mvn.w	r3, #5
 8009122:	607b      	str	r3, [r7, #4]
 8009124:	e010      	b.n	8009148 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009126:	4b0b      	ldr	r3, [pc, #44]	; (8009154 <osKernelStart+0x48>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	2b01      	cmp	r3, #1
 800912c:	d109      	bne.n	8009142 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800912e:	f7ff ffbf 	bl	80090b0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009132:	4b08      	ldr	r3, [pc, #32]	; (8009154 <osKernelStart+0x48>)
 8009134:	2202      	movs	r2, #2
 8009136:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009138:	f001 f8b6 	bl	800a2a8 <vTaskStartScheduler>
      stat = osOK;
 800913c:	2300      	movs	r3, #0
 800913e:	607b      	str	r3, [r7, #4]
 8009140:	e002      	b.n	8009148 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009142:	f04f 33ff 	mov.w	r3, #4294967295
 8009146:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009148:	687b      	ldr	r3, [r7, #4]
}
 800914a:	4618      	mov	r0, r3
 800914c:	3708      	adds	r7, #8
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
 8009152:	bf00      	nop
 8009154:	20000320 	.word	0x20000320

08009158 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009158:	b580      	push	{r7, lr}
 800915a:	b08e      	sub	sp, #56	; 0x38
 800915c:	af04      	add	r7, sp, #16
 800915e:	60f8      	str	r0, [r7, #12]
 8009160:	60b9      	str	r1, [r7, #8]
 8009162:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009164:	2300      	movs	r3, #0
 8009166:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009168:	f3ef 8305 	mrs	r3, IPSR
 800916c:	617b      	str	r3, [r7, #20]
  return(result);
 800916e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009170:	2b00      	cmp	r3, #0
 8009172:	d17e      	bne.n	8009272 <osThreadNew+0x11a>
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d07b      	beq.n	8009272 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800917a:	2380      	movs	r3, #128	; 0x80
 800917c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800917e:	2318      	movs	r3, #24
 8009180:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009182:	2300      	movs	r3, #0
 8009184:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009186:	f04f 33ff 	mov.w	r3, #4294967295
 800918a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d045      	beq.n	800921e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d002      	beq.n	80091a0 <osThreadNew+0x48>
        name = attr->name;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	699b      	ldr	r3, [r3, #24]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d002      	beq.n	80091ae <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	699b      	ldr	r3, [r3, #24]
 80091ac:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80091ae:	69fb      	ldr	r3, [r7, #28]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d008      	beq.n	80091c6 <osThreadNew+0x6e>
 80091b4:	69fb      	ldr	r3, [r7, #28]
 80091b6:	2b38      	cmp	r3, #56	; 0x38
 80091b8:	d805      	bhi.n	80091c6 <osThreadNew+0x6e>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	f003 0301 	and.w	r3, r3, #1
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d001      	beq.n	80091ca <osThreadNew+0x72>
        return (NULL);
 80091c6:	2300      	movs	r3, #0
 80091c8:	e054      	b.n	8009274 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	695b      	ldr	r3, [r3, #20]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d003      	beq.n	80091da <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	695b      	ldr	r3, [r3, #20]
 80091d6:	089b      	lsrs	r3, r3, #2
 80091d8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	689b      	ldr	r3, [r3, #8]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d00e      	beq.n	8009200 <osThreadNew+0xa8>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	68db      	ldr	r3, [r3, #12]
 80091e6:	2bbb      	cmp	r3, #187	; 0xbb
 80091e8:	d90a      	bls.n	8009200 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d006      	beq.n	8009200 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	695b      	ldr	r3, [r3, #20]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d002      	beq.n	8009200 <osThreadNew+0xa8>
        mem = 1;
 80091fa:	2301      	movs	r3, #1
 80091fc:	61bb      	str	r3, [r7, #24]
 80091fe:	e010      	b.n	8009222 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	689b      	ldr	r3, [r3, #8]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d10c      	bne.n	8009222 <osThreadNew+0xca>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	68db      	ldr	r3, [r3, #12]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d108      	bne.n	8009222 <osThreadNew+0xca>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	691b      	ldr	r3, [r3, #16]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d104      	bne.n	8009222 <osThreadNew+0xca>
          mem = 0;
 8009218:	2300      	movs	r3, #0
 800921a:	61bb      	str	r3, [r7, #24]
 800921c:	e001      	b.n	8009222 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800921e:	2300      	movs	r3, #0
 8009220:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009222:	69bb      	ldr	r3, [r7, #24]
 8009224:	2b01      	cmp	r3, #1
 8009226:	d110      	bne.n	800924a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800922c:	687a      	ldr	r2, [r7, #4]
 800922e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009230:	9202      	str	r2, [sp, #8]
 8009232:	9301      	str	r3, [sp, #4]
 8009234:	69fb      	ldr	r3, [r7, #28]
 8009236:	9300      	str	r3, [sp, #0]
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	6a3a      	ldr	r2, [r7, #32]
 800923c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800923e:	68f8      	ldr	r0, [r7, #12]
 8009240:	f000 fe46 	bl	8009ed0 <xTaskCreateStatic>
 8009244:	4603      	mov	r3, r0
 8009246:	613b      	str	r3, [r7, #16]
 8009248:	e013      	b.n	8009272 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800924a:	69bb      	ldr	r3, [r7, #24]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d110      	bne.n	8009272 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009250:	6a3b      	ldr	r3, [r7, #32]
 8009252:	b29a      	uxth	r2, r3
 8009254:	f107 0310 	add.w	r3, r7, #16
 8009258:	9301      	str	r3, [sp, #4]
 800925a:	69fb      	ldr	r3, [r7, #28]
 800925c:	9300      	str	r3, [sp, #0]
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009262:	68f8      	ldr	r0, [r7, #12]
 8009264:	f000 fe91 	bl	8009f8a <xTaskCreate>
 8009268:	4603      	mov	r3, r0
 800926a:	2b01      	cmp	r3, #1
 800926c:	d001      	beq.n	8009272 <osThreadNew+0x11a>
            hTask = NULL;
 800926e:	2300      	movs	r3, #0
 8009270:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009272:	693b      	ldr	r3, [r7, #16]
}
 8009274:	4618      	mov	r0, r3
 8009276:	3728      	adds	r7, #40	; 0x28
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}

0800927c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800927c:	b580      	push	{r7, lr}
 800927e:	b084      	sub	sp, #16
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009284:	f3ef 8305 	mrs	r3, IPSR
 8009288:	60bb      	str	r3, [r7, #8]
  return(result);
 800928a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800928c:	2b00      	cmp	r3, #0
 800928e:	d003      	beq.n	8009298 <osDelay+0x1c>
    stat = osErrorISR;
 8009290:	f06f 0305 	mvn.w	r3, #5
 8009294:	60fb      	str	r3, [r7, #12]
 8009296:	e007      	b.n	80092a8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009298:	2300      	movs	r3, #0
 800929a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d002      	beq.n	80092a8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f000 ffcc 	bl	800a240 <vTaskDelay>
    }
  }

  return (stat);
 80092a8:	68fb      	ldr	r3, [r7, #12]
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3710      	adds	r7, #16
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
	...

080092b4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80092b4:	b480      	push	{r7}
 80092b6:	b085      	sub	sp, #20
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	60f8      	str	r0, [r7, #12]
 80092bc:	60b9      	str	r1, [r7, #8]
 80092be:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	4a07      	ldr	r2, [pc, #28]	; (80092e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80092c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	4a06      	ldr	r2, [pc, #24]	; (80092e4 <vApplicationGetIdleTaskMemory+0x30>)
 80092ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2280      	movs	r2, #128	; 0x80
 80092d0:	601a      	str	r2, [r3, #0]
}
 80092d2:	bf00      	nop
 80092d4:	3714      	adds	r7, #20
 80092d6:	46bd      	mov	sp, r7
 80092d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092dc:	4770      	bx	lr
 80092de:	bf00      	nop
 80092e0:	20000324 	.word	0x20000324
 80092e4:	200003e0 	.word	0x200003e0

080092e8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80092e8:	b480      	push	{r7}
 80092ea:	b085      	sub	sp, #20
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	60b9      	str	r1, [r7, #8]
 80092f2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	4a07      	ldr	r2, [pc, #28]	; (8009314 <vApplicationGetTimerTaskMemory+0x2c>)
 80092f8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	4a06      	ldr	r2, [pc, #24]	; (8009318 <vApplicationGetTimerTaskMemory+0x30>)
 80092fe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009306:	601a      	str	r2, [r3, #0]
}
 8009308:	bf00      	nop
 800930a:	3714      	adds	r7, #20
 800930c:	46bd      	mov	sp, r7
 800930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009312:	4770      	bx	lr
 8009314:	200005e0 	.word	0x200005e0
 8009318:	2000069c 	.word	0x2000069c

0800931c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800931c:	b480      	push	{r7}
 800931e:	b083      	sub	sp, #12
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f103 0208 	add.w	r2, r3, #8
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f04f 32ff 	mov.w	r2, #4294967295
 8009334:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f103 0208 	add.w	r2, r3, #8
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f103 0208 	add.w	r2, r3, #8
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2200      	movs	r2, #0
 800934e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009350:	bf00      	nop
 8009352:	370c      	adds	r7, #12
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr

0800935c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800935c:	b480      	push	{r7}
 800935e:	b083      	sub	sp, #12
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2200      	movs	r2, #0
 8009368:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800936a:	bf00      	nop
 800936c:	370c      	adds	r7, #12
 800936e:	46bd      	mov	sp, r7
 8009370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009374:	4770      	bx	lr

08009376 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009376:	b480      	push	{r7}
 8009378:	b085      	sub	sp, #20
 800937a:	af00      	add	r7, sp, #0
 800937c:	6078      	str	r0, [r7, #4]
 800937e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	685b      	ldr	r3, [r3, #4]
 8009384:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	68fa      	ldr	r2, [r7, #12]
 800938a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	689a      	ldr	r2, [r3, #8]
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	689b      	ldr	r3, [r3, #8]
 8009398:	683a      	ldr	r2, [r7, #0]
 800939a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	683a      	ldr	r2, [r7, #0]
 80093a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	687a      	ldr	r2, [r7, #4]
 80093a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	1c5a      	adds	r2, r3, #1
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	601a      	str	r2, [r3, #0]
}
 80093b2:	bf00      	nop
 80093b4:	3714      	adds	r7, #20
 80093b6:	46bd      	mov	sp, r7
 80093b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093bc:	4770      	bx	lr

080093be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80093be:	b480      	push	{r7}
 80093c0:	b085      	sub	sp, #20
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	6078      	str	r0, [r7, #4]
 80093c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093d4:	d103      	bne.n	80093de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	691b      	ldr	r3, [r3, #16]
 80093da:	60fb      	str	r3, [r7, #12]
 80093dc:	e00c      	b.n	80093f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	3308      	adds	r3, #8
 80093e2:	60fb      	str	r3, [r7, #12]
 80093e4:	e002      	b.n	80093ec <vListInsert+0x2e>
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	685b      	ldr	r3, [r3, #4]
 80093ea:	60fb      	str	r3, [r7, #12]
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	68ba      	ldr	r2, [r7, #8]
 80093f4:	429a      	cmp	r2, r3
 80093f6:	d2f6      	bcs.n	80093e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	685a      	ldr	r2, [r3, #4]
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	683a      	ldr	r2, [r7, #0]
 8009406:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	68fa      	ldr	r2, [r7, #12]
 800940c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	683a      	ldr	r2, [r7, #0]
 8009412:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	687a      	ldr	r2, [r7, #4]
 8009418:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	1c5a      	adds	r2, r3, #1
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	601a      	str	r2, [r3, #0]
}
 8009424:	bf00      	nop
 8009426:	3714      	adds	r7, #20
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr

08009430 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009430:	b480      	push	{r7}
 8009432:	b085      	sub	sp, #20
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	691b      	ldr	r3, [r3, #16]
 800943c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	6892      	ldr	r2, [r2, #8]
 8009446:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	689b      	ldr	r3, [r3, #8]
 800944c:	687a      	ldr	r2, [r7, #4]
 800944e:	6852      	ldr	r2, [r2, #4]
 8009450:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	687a      	ldr	r2, [r7, #4]
 8009458:	429a      	cmp	r2, r3
 800945a:	d103      	bne.n	8009464 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	689a      	ldr	r2, [r3, #8]
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2200      	movs	r2, #0
 8009468:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	1e5a      	subs	r2, r3, #1
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
}
 8009478:	4618      	mov	r0, r3
 800947a:	3714      	adds	r7, #20
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr

08009484 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b084      	sub	sp, #16
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d10a      	bne.n	80094ae <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800949c:	f383 8811 	msr	BASEPRI, r3
 80094a0:	f3bf 8f6f 	isb	sy
 80094a4:	f3bf 8f4f 	dsb	sy
 80094a8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80094aa:	bf00      	nop
 80094ac:	e7fe      	b.n	80094ac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80094ae:	f002 f8b1 	bl	800b614 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681a      	ldr	r2, [r3, #0]
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094ba:	68f9      	ldr	r1, [r7, #12]
 80094bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80094be:	fb01 f303 	mul.w	r3, r1, r3
 80094c2:	441a      	add	r2, r3
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2200      	movs	r2, #0
 80094cc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681a      	ldr	r2, [r3, #0]
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094de:	3b01      	subs	r3, #1
 80094e0:	68f9      	ldr	r1, [r7, #12]
 80094e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80094e4:	fb01 f303 	mul.w	r3, r1, r3
 80094e8:	441a      	add	r2, r3
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	22ff      	movs	r2, #255	; 0xff
 80094f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	22ff      	movs	r2, #255	; 0xff
 80094fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d114      	bne.n	800952e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	691b      	ldr	r3, [r3, #16]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d01a      	beq.n	8009542 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	3310      	adds	r3, #16
 8009510:	4618      	mov	r0, r3
 8009512:	f001 f963 	bl	800a7dc <xTaskRemoveFromEventList>
 8009516:	4603      	mov	r3, r0
 8009518:	2b00      	cmp	r3, #0
 800951a:	d012      	beq.n	8009542 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800951c:	4b0c      	ldr	r3, [pc, #48]	; (8009550 <xQueueGenericReset+0xcc>)
 800951e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009522:	601a      	str	r2, [r3, #0]
 8009524:	f3bf 8f4f 	dsb	sy
 8009528:	f3bf 8f6f 	isb	sy
 800952c:	e009      	b.n	8009542 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	3310      	adds	r3, #16
 8009532:	4618      	mov	r0, r3
 8009534:	f7ff fef2 	bl	800931c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	3324      	adds	r3, #36	; 0x24
 800953c:	4618      	mov	r0, r3
 800953e:	f7ff feed 	bl	800931c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009542:	f002 f897 	bl	800b674 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009546:	2301      	movs	r3, #1
}
 8009548:	4618      	mov	r0, r3
 800954a:	3710      	adds	r7, #16
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}
 8009550:	e000ed04 	.word	0xe000ed04

08009554 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009554:	b580      	push	{r7, lr}
 8009556:	b08e      	sub	sp, #56	; 0x38
 8009558:	af02      	add	r7, sp, #8
 800955a:	60f8      	str	r0, [r7, #12]
 800955c:	60b9      	str	r1, [r7, #8]
 800955e:	607a      	str	r2, [r7, #4]
 8009560:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d10a      	bne.n	800957e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800956c:	f383 8811 	msr	BASEPRI, r3
 8009570:	f3bf 8f6f 	isb	sy
 8009574:	f3bf 8f4f 	dsb	sy
 8009578:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800957a:	bf00      	nop
 800957c:	e7fe      	b.n	800957c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d10a      	bne.n	800959a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009588:	f383 8811 	msr	BASEPRI, r3
 800958c:	f3bf 8f6f 	isb	sy
 8009590:	f3bf 8f4f 	dsb	sy
 8009594:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009596:	bf00      	nop
 8009598:	e7fe      	b.n	8009598 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d002      	beq.n	80095a6 <xQueueGenericCreateStatic+0x52>
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d001      	beq.n	80095aa <xQueueGenericCreateStatic+0x56>
 80095a6:	2301      	movs	r3, #1
 80095a8:	e000      	b.n	80095ac <xQueueGenericCreateStatic+0x58>
 80095aa:	2300      	movs	r3, #0
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d10a      	bne.n	80095c6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80095b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b4:	f383 8811 	msr	BASEPRI, r3
 80095b8:	f3bf 8f6f 	isb	sy
 80095bc:	f3bf 8f4f 	dsb	sy
 80095c0:	623b      	str	r3, [r7, #32]
}
 80095c2:	bf00      	nop
 80095c4:	e7fe      	b.n	80095c4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d102      	bne.n	80095d2 <xQueueGenericCreateStatic+0x7e>
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d101      	bne.n	80095d6 <xQueueGenericCreateStatic+0x82>
 80095d2:	2301      	movs	r3, #1
 80095d4:	e000      	b.n	80095d8 <xQueueGenericCreateStatic+0x84>
 80095d6:	2300      	movs	r3, #0
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d10a      	bne.n	80095f2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80095dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e0:	f383 8811 	msr	BASEPRI, r3
 80095e4:	f3bf 8f6f 	isb	sy
 80095e8:	f3bf 8f4f 	dsb	sy
 80095ec:	61fb      	str	r3, [r7, #28]
}
 80095ee:	bf00      	nop
 80095f0:	e7fe      	b.n	80095f0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80095f2:	2350      	movs	r3, #80	; 0x50
 80095f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	2b50      	cmp	r3, #80	; 0x50
 80095fa:	d00a      	beq.n	8009612 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80095fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009600:	f383 8811 	msr	BASEPRI, r3
 8009604:	f3bf 8f6f 	isb	sy
 8009608:	f3bf 8f4f 	dsb	sy
 800960c:	61bb      	str	r3, [r7, #24]
}
 800960e:	bf00      	nop
 8009610:	e7fe      	b.n	8009610 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009612:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800961a:	2b00      	cmp	r3, #0
 800961c:	d00d      	beq.n	800963a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800961e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009620:	2201      	movs	r2, #1
 8009622:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009626:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800962a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800962c:	9300      	str	r3, [sp, #0]
 800962e:	4613      	mov	r3, r2
 8009630:	687a      	ldr	r2, [r7, #4]
 8009632:	68b9      	ldr	r1, [r7, #8]
 8009634:	68f8      	ldr	r0, [r7, #12]
 8009636:	f000 f83f 	bl	80096b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800963a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800963c:	4618      	mov	r0, r3
 800963e:	3730      	adds	r7, #48	; 0x30
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}

08009644 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009644:	b580      	push	{r7, lr}
 8009646:	b08a      	sub	sp, #40	; 0x28
 8009648:	af02      	add	r7, sp, #8
 800964a:	60f8      	str	r0, [r7, #12]
 800964c:	60b9      	str	r1, [r7, #8]
 800964e:	4613      	mov	r3, r2
 8009650:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d10a      	bne.n	800966e <xQueueGenericCreate+0x2a>
	__asm volatile
 8009658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800965c:	f383 8811 	msr	BASEPRI, r3
 8009660:	f3bf 8f6f 	isb	sy
 8009664:	f3bf 8f4f 	dsb	sy
 8009668:	613b      	str	r3, [r7, #16]
}
 800966a:	bf00      	nop
 800966c:	e7fe      	b.n	800966c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	68ba      	ldr	r2, [r7, #8]
 8009672:	fb02 f303 	mul.w	r3, r2, r3
 8009676:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009678:	69fb      	ldr	r3, [r7, #28]
 800967a:	3350      	adds	r3, #80	; 0x50
 800967c:	4618      	mov	r0, r3
 800967e:	f002 f8eb 	bl	800b858 <pvPortMalloc>
 8009682:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009684:	69bb      	ldr	r3, [r7, #24]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d011      	beq.n	80096ae <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800968a:	69bb      	ldr	r3, [r7, #24]
 800968c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	3350      	adds	r3, #80	; 0x50
 8009692:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009694:	69bb      	ldr	r3, [r7, #24]
 8009696:	2200      	movs	r2, #0
 8009698:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800969c:	79fa      	ldrb	r2, [r7, #7]
 800969e:	69bb      	ldr	r3, [r7, #24]
 80096a0:	9300      	str	r3, [sp, #0]
 80096a2:	4613      	mov	r3, r2
 80096a4:	697a      	ldr	r2, [r7, #20]
 80096a6:	68b9      	ldr	r1, [r7, #8]
 80096a8:	68f8      	ldr	r0, [r7, #12]
 80096aa:	f000 f805 	bl	80096b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80096ae:	69bb      	ldr	r3, [r7, #24]
	}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3720      	adds	r7, #32
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b084      	sub	sp, #16
 80096bc:	af00      	add	r7, sp, #0
 80096be:	60f8      	str	r0, [r7, #12]
 80096c0:	60b9      	str	r1, [r7, #8]
 80096c2:	607a      	str	r2, [r7, #4]
 80096c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d103      	bne.n	80096d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80096cc:	69bb      	ldr	r3, [r7, #24]
 80096ce:	69ba      	ldr	r2, [r7, #24]
 80096d0:	601a      	str	r2, [r3, #0]
 80096d2:	e002      	b.n	80096da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80096d4:	69bb      	ldr	r3, [r7, #24]
 80096d6:	687a      	ldr	r2, [r7, #4]
 80096d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80096da:	69bb      	ldr	r3, [r7, #24]
 80096dc:	68fa      	ldr	r2, [r7, #12]
 80096de:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80096e0:	69bb      	ldr	r3, [r7, #24]
 80096e2:	68ba      	ldr	r2, [r7, #8]
 80096e4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80096e6:	2101      	movs	r1, #1
 80096e8:	69b8      	ldr	r0, [r7, #24]
 80096ea:	f7ff fecb 	bl	8009484 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80096ee:	69bb      	ldr	r3, [r7, #24]
 80096f0:	78fa      	ldrb	r2, [r7, #3]
 80096f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80096f6:	bf00      	nop
 80096f8:	3710      	adds	r7, #16
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
	...

08009700 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b08e      	sub	sp, #56	; 0x38
 8009704:	af00      	add	r7, sp, #0
 8009706:	60f8      	str	r0, [r7, #12]
 8009708:	60b9      	str	r1, [r7, #8]
 800970a:	607a      	str	r2, [r7, #4]
 800970c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800970e:	2300      	movs	r3, #0
 8009710:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009718:	2b00      	cmp	r3, #0
 800971a:	d10a      	bne.n	8009732 <xQueueGenericSend+0x32>
	__asm volatile
 800971c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009720:	f383 8811 	msr	BASEPRI, r3
 8009724:	f3bf 8f6f 	isb	sy
 8009728:	f3bf 8f4f 	dsb	sy
 800972c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800972e:	bf00      	nop
 8009730:	e7fe      	b.n	8009730 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d103      	bne.n	8009740 <xQueueGenericSend+0x40>
 8009738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800973a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800973c:	2b00      	cmp	r3, #0
 800973e:	d101      	bne.n	8009744 <xQueueGenericSend+0x44>
 8009740:	2301      	movs	r3, #1
 8009742:	e000      	b.n	8009746 <xQueueGenericSend+0x46>
 8009744:	2300      	movs	r3, #0
 8009746:	2b00      	cmp	r3, #0
 8009748:	d10a      	bne.n	8009760 <xQueueGenericSend+0x60>
	__asm volatile
 800974a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800974e:	f383 8811 	msr	BASEPRI, r3
 8009752:	f3bf 8f6f 	isb	sy
 8009756:	f3bf 8f4f 	dsb	sy
 800975a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800975c:	bf00      	nop
 800975e:	e7fe      	b.n	800975e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	2b02      	cmp	r3, #2
 8009764:	d103      	bne.n	800976e <xQueueGenericSend+0x6e>
 8009766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800976a:	2b01      	cmp	r3, #1
 800976c:	d101      	bne.n	8009772 <xQueueGenericSend+0x72>
 800976e:	2301      	movs	r3, #1
 8009770:	e000      	b.n	8009774 <xQueueGenericSend+0x74>
 8009772:	2300      	movs	r3, #0
 8009774:	2b00      	cmp	r3, #0
 8009776:	d10a      	bne.n	800978e <xQueueGenericSend+0x8e>
	__asm volatile
 8009778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800977c:	f383 8811 	msr	BASEPRI, r3
 8009780:	f3bf 8f6f 	isb	sy
 8009784:	f3bf 8f4f 	dsb	sy
 8009788:	623b      	str	r3, [r7, #32]
}
 800978a:	bf00      	nop
 800978c:	e7fe      	b.n	800978c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800978e:	f001 f9e7 	bl	800ab60 <xTaskGetSchedulerState>
 8009792:	4603      	mov	r3, r0
 8009794:	2b00      	cmp	r3, #0
 8009796:	d102      	bne.n	800979e <xQueueGenericSend+0x9e>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d101      	bne.n	80097a2 <xQueueGenericSend+0xa2>
 800979e:	2301      	movs	r3, #1
 80097a0:	e000      	b.n	80097a4 <xQueueGenericSend+0xa4>
 80097a2:	2300      	movs	r3, #0
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d10a      	bne.n	80097be <xQueueGenericSend+0xbe>
	__asm volatile
 80097a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ac:	f383 8811 	msr	BASEPRI, r3
 80097b0:	f3bf 8f6f 	isb	sy
 80097b4:	f3bf 8f4f 	dsb	sy
 80097b8:	61fb      	str	r3, [r7, #28]
}
 80097ba:	bf00      	nop
 80097bc:	e7fe      	b.n	80097bc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80097be:	f001 ff29 	bl	800b614 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80097c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097ca:	429a      	cmp	r2, r3
 80097cc:	d302      	bcc.n	80097d4 <xQueueGenericSend+0xd4>
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	2b02      	cmp	r3, #2
 80097d2:	d129      	bne.n	8009828 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80097d4:	683a      	ldr	r2, [r7, #0]
 80097d6:	68b9      	ldr	r1, [r7, #8]
 80097d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097da:	f000 fa0b 	bl	8009bf4 <prvCopyDataToQueue>
 80097de:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80097e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d010      	beq.n	800980a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80097e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ea:	3324      	adds	r3, #36	; 0x24
 80097ec:	4618      	mov	r0, r3
 80097ee:	f000 fff5 	bl	800a7dc <xTaskRemoveFromEventList>
 80097f2:	4603      	mov	r3, r0
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d013      	beq.n	8009820 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80097f8:	4b3f      	ldr	r3, [pc, #252]	; (80098f8 <xQueueGenericSend+0x1f8>)
 80097fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097fe:	601a      	str	r2, [r3, #0]
 8009800:	f3bf 8f4f 	dsb	sy
 8009804:	f3bf 8f6f 	isb	sy
 8009808:	e00a      	b.n	8009820 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800980a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800980c:	2b00      	cmp	r3, #0
 800980e:	d007      	beq.n	8009820 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009810:	4b39      	ldr	r3, [pc, #228]	; (80098f8 <xQueueGenericSend+0x1f8>)
 8009812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009816:	601a      	str	r2, [r3, #0]
 8009818:	f3bf 8f4f 	dsb	sy
 800981c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009820:	f001 ff28 	bl	800b674 <vPortExitCritical>
				return pdPASS;
 8009824:	2301      	movs	r3, #1
 8009826:	e063      	b.n	80098f0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d103      	bne.n	8009836 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800982e:	f001 ff21 	bl	800b674 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009832:	2300      	movs	r3, #0
 8009834:	e05c      	b.n	80098f0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009838:	2b00      	cmp	r3, #0
 800983a:	d106      	bne.n	800984a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800983c:	f107 0314 	add.w	r3, r7, #20
 8009840:	4618      	mov	r0, r3
 8009842:	f001 f82f 	bl	800a8a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009846:	2301      	movs	r3, #1
 8009848:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800984a:	f001 ff13 	bl	800b674 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800984e:	f000 fd9b 	bl	800a388 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009852:	f001 fedf 	bl	800b614 <vPortEnterCritical>
 8009856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009858:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800985c:	b25b      	sxtb	r3, r3
 800985e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009862:	d103      	bne.n	800986c <xQueueGenericSend+0x16c>
 8009864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009866:	2200      	movs	r2, #0
 8009868:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800986c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800986e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009872:	b25b      	sxtb	r3, r3
 8009874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009878:	d103      	bne.n	8009882 <xQueueGenericSend+0x182>
 800987a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800987c:	2200      	movs	r2, #0
 800987e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009882:	f001 fef7 	bl	800b674 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009886:	1d3a      	adds	r2, r7, #4
 8009888:	f107 0314 	add.w	r3, r7, #20
 800988c:	4611      	mov	r1, r2
 800988e:	4618      	mov	r0, r3
 8009890:	f001 f81e 	bl	800a8d0 <xTaskCheckForTimeOut>
 8009894:	4603      	mov	r3, r0
 8009896:	2b00      	cmp	r3, #0
 8009898:	d124      	bne.n	80098e4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800989a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800989c:	f000 faa2 	bl	8009de4 <prvIsQueueFull>
 80098a0:	4603      	mov	r3, r0
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d018      	beq.n	80098d8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80098a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a8:	3310      	adds	r3, #16
 80098aa:	687a      	ldr	r2, [r7, #4]
 80098ac:	4611      	mov	r1, r2
 80098ae:	4618      	mov	r0, r3
 80098b0:	f000 ff44 	bl	800a73c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80098b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098b6:	f000 fa2d 	bl	8009d14 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80098ba:	f000 fd73 	bl	800a3a4 <xTaskResumeAll>
 80098be:	4603      	mov	r3, r0
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	f47f af7c 	bne.w	80097be <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80098c6:	4b0c      	ldr	r3, [pc, #48]	; (80098f8 <xQueueGenericSend+0x1f8>)
 80098c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098cc:	601a      	str	r2, [r3, #0]
 80098ce:	f3bf 8f4f 	dsb	sy
 80098d2:	f3bf 8f6f 	isb	sy
 80098d6:	e772      	b.n	80097be <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80098d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098da:	f000 fa1b 	bl	8009d14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80098de:	f000 fd61 	bl	800a3a4 <xTaskResumeAll>
 80098e2:	e76c      	b.n	80097be <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80098e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098e6:	f000 fa15 	bl	8009d14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80098ea:	f000 fd5b 	bl	800a3a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80098ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	3738      	adds	r7, #56	; 0x38
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}
 80098f8:	e000ed04 	.word	0xe000ed04

080098fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b090      	sub	sp, #64	; 0x40
 8009900:	af00      	add	r7, sp, #0
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	60b9      	str	r1, [r7, #8]
 8009906:	607a      	str	r2, [r7, #4]
 8009908:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800990e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009910:	2b00      	cmp	r3, #0
 8009912:	d10a      	bne.n	800992a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009918:	f383 8811 	msr	BASEPRI, r3
 800991c:	f3bf 8f6f 	isb	sy
 8009920:	f3bf 8f4f 	dsb	sy
 8009924:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009926:	bf00      	nop
 8009928:	e7fe      	b.n	8009928 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d103      	bne.n	8009938 <xQueueGenericSendFromISR+0x3c>
 8009930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009934:	2b00      	cmp	r3, #0
 8009936:	d101      	bne.n	800993c <xQueueGenericSendFromISR+0x40>
 8009938:	2301      	movs	r3, #1
 800993a:	e000      	b.n	800993e <xQueueGenericSendFromISR+0x42>
 800993c:	2300      	movs	r3, #0
 800993e:	2b00      	cmp	r3, #0
 8009940:	d10a      	bne.n	8009958 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009946:	f383 8811 	msr	BASEPRI, r3
 800994a:	f3bf 8f6f 	isb	sy
 800994e:	f3bf 8f4f 	dsb	sy
 8009952:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009954:	bf00      	nop
 8009956:	e7fe      	b.n	8009956 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	2b02      	cmp	r3, #2
 800995c:	d103      	bne.n	8009966 <xQueueGenericSendFromISR+0x6a>
 800995e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009962:	2b01      	cmp	r3, #1
 8009964:	d101      	bne.n	800996a <xQueueGenericSendFromISR+0x6e>
 8009966:	2301      	movs	r3, #1
 8009968:	e000      	b.n	800996c <xQueueGenericSendFromISR+0x70>
 800996a:	2300      	movs	r3, #0
 800996c:	2b00      	cmp	r3, #0
 800996e:	d10a      	bne.n	8009986 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009974:	f383 8811 	msr	BASEPRI, r3
 8009978:	f3bf 8f6f 	isb	sy
 800997c:	f3bf 8f4f 	dsb	sy
 8009980:	623b      	str	r3, [r7, #32]
}
 8009982:	bf00      	nop
 8009984:	e7fe      	b.n	8009984 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009986:	f001 ff27 	bl	800b7d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800998a:	f3ef 8211 	mrs	r2, BASEPRI
 800998e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009992:	f383 8811 	msr	BASEPRI, r3
 8009996:	f3bf 8f6f 	isb	sy
 800999a:	f3bf 8f4f 	dsb	sy
 800999e:	61fa      	str	r2, [r7, #28]
 80099a0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80099a2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80099a4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80099a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d302      	bcc.n	80099b8 <xQueueGenericSendFromISR+0xbc>
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	2b02      	cmp	r3, #2
 80099b6:	d12f      	bne.n	8009a18 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80099b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80099c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099c6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80099c8:	683a      	ldr	r2, [r7, #0]
 80099ca:	68b9      	ldr	r1, [r7, #8]
 80099cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80099ce:	f000 f911 	bl	8009bf4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80099d2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80099d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099da:	d112      	bne.n	8009a02 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80099dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d016      	beq.n	8009a12 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80099e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099e6:	3324      	adds	r3, #36	; 0x24
 80099e8:	4618      	mov	r0, r3
 80099ea:	f000 fef7 	bl	800a7dc <xTaskRemoveFromEventList>
 80099ee:	4603      	mov	r3, r0
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d00e      	beq.n	8009a12 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d00b      	beq.n	8009a12 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2201      	movs	r2, #1
 80099fe:	601a      	str	r2, [r3, #0]
 8009a00:	e007      	b.n	8009a12 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009a02:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009a06:	3301      	adds	r3, #1
 8009a08:	b2db      	uxtb	r3, r3
 8009a0a:	b25a      	sxtb	r2, r3
 8009a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009a12:	2301      	movs	r3, #1
 8009a14:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009a16:	e001      	b.n	8009a1c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a1e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009a26:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3740      	adds	r7, #64	; 0x40
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
	...

08009a34 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b08c      	sub	sp, #48	; 0x30
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	60f8      	str	r0, [r7, #12]
 8009a3c:	60b9      	str	r1, [r7, #8]
 8009a3e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009a40:	2300      	movs	r3, #0
 8009a42:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d10a      	bne.n	8009a64 <xQueueReceive+0x30>
	__asm volatile
 8009a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a52:	f383 8811 	msr	BASEPRI, r3
 8009a56:	f3bf 8f6f 	isb	sy
 8009a5a:	f3bf 8f4f 	dsb	sy
 8009a5e:	623b      	str	r3, [r7, #32]
}
 8009a60:	bf00      	nop
 8009a62:	e7fe      	b.n	8009a62 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d103      	bne.n	8009a72 <xQueueReceive+0x3e>
 8009a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d101      	bne.n	8009a76 <xQueueReceive+0x42>
 8009a72:	2301      	movs	r3, #1
 8009a74:	e000      	b.n	8009a78 <xQueueReceive+0x44>
 8009a76:	2300      	movs	r3, #0
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d10a      	bne.n	8009a92 <xQueueReceive+0x5e>
	__asm volatile
 8009a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a80:	f383 8811 	msr	BASEPRI, r3
 8009a84:	f3bf 8f6f 	isb	sy
 8009a88:	f3bf 8f4f 	dsb	sy
 8009a8c:	61fb      	str	r3, [r7, #28]
}
 8009a8e:	bf00      	nop
 8009a90:	e7fe      	b.n	8009a90 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009a92:	f001 f865 	bl	800ab60 <xTaskGetSchedulerState>
 8009a96:	4603      	mov	r3, r0
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d102      	bne.n	8009aa2 <xQueueReceive+0x6e>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d101      	bne.n	8009aa6 <xQueueReceive+0x72>
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	e000      	b.n	8009aa8 <xQueueReceive+0x74>
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d10a      	bne.n	8009ac2 <xQueueReceive+0x8e>
	__asm volatile
 8009aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab0:	f383 8811 	msr	BASEPRI, r3
 8009ab4:	f3bf 8f6f 	isb	sy
 8009ab8:	f3bf 8f4f 	dsb	sy
 8009abc:	61bb      	str	r3, [r7, #24]
}
 8009abe:	bf00      	nop
 8009ac0:	e7fe      	b.n	8009ac0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009ac2:	f001 fda7 	bl	800b614 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d01f      	beq.n	8009b12 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009ad2:	68b9      	ldr	r1, [r7, #8]
 8009ad4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ad6:	f000 f8f7 	bl	8009cc8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009adc:	1e5a      	subs	r2, r3, #1
 8009ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae4:	691b      	ldr	r3, [r3, #16]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d00f      	beq.n	8009b0a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aec:	3310      	adds	r3, #16
 8009aee:	4618      	mov	r0, r3
 8009af0:	f000 fe74 	bl	800a7dc <xTaskRemoveFromEventList>
 8009af4:	4603      	mov	r3, r0
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d007      	beq.n	8009b0a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009afa:	4b3d      	ldr	r3, [pc, #244]	; (8009bf0 <xQueueReceive+0x1bc>)
 8009afc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b00:	601a      	str	r2, [r3, #0]
 8009b02:	f3bf 8f4f 	dsb	sy
 8009b06:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009b0a:	f001 fdb3 	bl	800b674 <vPortExitCritical>
				return pdPASS;
 8009b0e:	2301      	movs	r3, #1
 8009b10:	e069      	b.n	8009be6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d103      	bne.n	8009b20 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009b18:	f001 fdac 	bl	800b674 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	e062      	b.n	8009be6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d106      	bne.n	8009b34 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009b26:	f107 0310 	add.w	r3, r7, #16
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f000 feba 	bl	800a8a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009b30:	2301      	movs	r3, #1
 8009b32:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009b34:	f001 fd9e 	bl	800b674 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009b38:	f000 fc26 	bl	800a388 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009b3c:	f001 fd6a 	bl	800b614 <vPortEnterCritical>
 8009b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b46:	b25b      	sxtb	r3, r3
 8009b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b4c:	d103      	bne.n	8009b56 <xQueueReceive+0x122>
 8009b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b50:	2200      	movs	r2, #0
 8009b52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b5c:	b25b      	sxtb	r3, r3
 8009b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b62:	d103      	bne.n	8009b6c <xQueueReceive+0x138>
 8009b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b66:	2200      	movs	r2, #0
 8009b68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b6c:	f001 fd82 	bl	800b674 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009b70:	1d3a      	adds	r2, r7, #4
 8009b72:	f107 0310 	add.w	r3, r7, #16
 8009b76:	4611      	mov	r1, r2
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f000 fea9 	bl	800a8d0 <xTaskCheckForTimeOut>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d123      	bne.n	8009bcc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b86:	f000 f917 	bl	8009db8 <prvIsQueueEmpty>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d017      	beq.n	8009bc0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b92:	3324      	adds	r3, #36	; 0x24
 8009b94:	687a      	ldr	r2, [r7, #4]
 8009b96:	4611      	mov	r1, r2
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f000 fdcf 	bl	800a73c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009b9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ba0:	f000 f8b8 	bl	8009d14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009ba4:	f000 fbfe 	bl	800a3a4 <xTaskResumeAll>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d189      	bne.n	8009ac2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009bae:	4b10      	ldr	r3, [pc, #64]	; (8009bf0 <xQueueReceive+0x1bc>)
 8009bb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bb4:	601a      	str	r2, [r3, #0]
 8009bb6:	f3bf 8f4f 	dsb	sy
 8009bba:	f3bf 8f6f 	isb	sy
 8009bbe:	e780      	b.n	8009ac2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009bc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bc2:	f000 f8a7 	bl	8009d14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009bc6:	f000 fbed 	bl	800a3a4 <xTaskResumeAll>
 8009bca:	e77a      	b.n	8009ac2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009bcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bce:	f000 f8a1 	bl	8009d14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009bd2:	f000 fbe7 	bl	800a3a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009bd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bd8:	f000 f8ee 	bl	8009db8 <prvIsQueueEmpty>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	f43f af6f 	beq.w	8009ac2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009be4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3730      	adds	r7, #48	; 0x30
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
 8009bee:	bf00      	nop
 8009bf0:	e000ed04 	.word	0xe000ed04

08009bf4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b086      	sub	sp, #24
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	60f8      	str	r0, [r7, #12]
 8009bfc:	60b9      	str	r1, [r7, #8]
 8009bfe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009c00:	2300      	movs	r3, #0
 8009c02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d10d      	bne.n	8009c2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d14d      	bne.n	8009cb6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	689b      	ldr	r3, [r3, #8]
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f000 ffbc 	bl	800ab9c <xTaskPriorityDisinherit>
 8009c24:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	609a      	str	r2, [r3, #8]
 8009c2c:	e043      	b.n	8009cb6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d119      	bne.n	8009c68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	6858      	ldr	r0, [r3, #4]
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c3c:	461a      	mov	r2, r3
 8009c3e:	68b9      	ldr	r1, [r7, #8]
 8009c40:	f002 fd74 	bl	800c72c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	685a      	ldr	r2, [r3, #4]
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c4c:	441a      	add	r2, r3
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	685a      	ldr	r2, [r3, #4]
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	689b      	ldr	r3, [r3, #8]
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d32b      	bcc.n	8009cb6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681a      	ldr	r2, [r3, #0]
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	605a      	str	r2, [r3, #4]
 8009c66:	e026      	b.n	8009cb6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	68d8      	ldr	r0, [r3, #12]
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c70:	461a      	mov	r2, r3
 8009c72:	68b9      	ldr	r1, [r7, #8]
 8009c74:	f002 fd5a 	bl	800c72c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	68da      	ldr	r2, [r3, #12]
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c80:	425b      	negs	r3, r3
 8009c82:	441a      	add	r2, r3
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	68da      	ldr	r2, [r3, #12]
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d207      	bcs.n	8009ca4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	689a      	ldr	r2, [r3, #8]
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c9c:	425b      	negs	r3, r3
 8009c9e:	441a      	add	r2, r3
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2b02      	cmp	r3, #2
 8009ca8:	d105      	bne.n	8009cb6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d002      	beq.n	8009cb6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	3b01      	subs	r3, #1
 8009cb4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	1c5a      	adds	r2, r3, #1
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009cbe:	697b      	ldr	r3, [r7, #20]
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3718      	adds	r7, #24
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}

08009cc8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b082      	sub	sp, #8
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d018      	beq.n	8009d0c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	68da      	ldr	r2, [r3, #12]
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ce2:	441a      	add	r2, r3
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	68da      	ldr	r2, [r3, #12]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	689b      	ldr	r3, [r3, #8]
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	d303      	bcc.n	8009cfc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681a      	ldr	r2, [r3, #0]
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	68d9      	ldr	r1, [r3, #12]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d04:	461a      	mov	r2, r3
 8009d06:	6838      	ldr	r0, [r7, #0]
 8009d08:	f002 fd10 	bl	800c72c <memcpy>
	}
}
 8009d0c:	bf00      	nop
 8009d0e:	3708      	adds	r7, #8
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}

08009d14 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b084      	sub	sp, #16
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009d1c:	f001 fc7a 	bl	800b614 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d26:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009d28:	e011      	b.n	8009d4e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d012      	beq.n	8009d58 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	3324      	adds	r3, #36	; 0x24
 8009d36:	4618      	mov	r0, r3
 8009d38:	f000 fd50 	bl	800a7dc <xTaskRemoveFromEventList>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d001      	beq.n	8009d46 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009d42:	f000 fe27 	bl	800a994 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009d46:	7bfb      	ldrb	r3, [r7, #15]
 8009d48:	3b01      	subs	r3, #1
 8009d4a:	b2db      	uxtb	r3, r3
 8009d4c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	dce9      	bgt.n	8009d2a <prvUnlockQueue+0x16>
 8009d56:	e000      	b.n	8009d5a <prvUnlockQueue+0x46>
					break;
 8009d58:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	22ff      	movs	r2, #255	; 0xff
 8009d5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009d62:	f001 fc87 	bl	800b674 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009d66:	f001 fc55 	bl	800b614 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d70:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009d72:	e011      	b.n	8009d98 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	691b      	ldr	r3, [r3, #16]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d012      	beq.n	8009da2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	3310      	adds	r3, #16
 8009d80:	4618      	mov	r0, r3
 8009d82:	f000 fd2b 	bl	800a7dc <xTaskRemoveFromEventList>
 8009d86:	4603      	mov	r3, r0
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d001      	beq.n	8009d90 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009d8c:	f000 fe02 	bl	800a994 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009d90:	7bbb      	ldrb	r3, [r7, #14]
 8009d92:	3b01      	subs	r3, #1
 8009d94:	b2db      	uxtb	r3, r3
 8009d96:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009d98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	dce9      	bgt.n	8009d74 <prvUnlockQueue+0x60>
 8009da0:	e000      	b.n	8009da4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009da2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	22ff      	movs	r2, #255	; 0xff
 8009da8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009dac:	f001 fc62 	bl	800b674 <vPortExitCritical>
}
 8009db0:	bf00      	nop
 8009db2:	3710      	adds	r7, #16
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}

08009db8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b084      	sub	sp, #16
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009dc0:	f001 fc28 	bl	800b614 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d102      	bne.n	8009dd2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009dcc:	2301      	movs	r3, #1
 8009dce:	60fb      	str	r3, [r7, #12]
 8009dd0:	e001      	b.n	8009dd6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009dd6:	f001 fc4d 	bl	800b674 <vPortExitCritical>

	return xReturn;
 8009dda:	68fb      	ldr	r3, [r7, #12]
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3710      	adds	r7, #16
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}

08009de4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b084      	sub	sp, #16
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009dec:	f001 fc12 	bl	800b614 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	d102      	bne.n	8009e02 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	60fb      	str	r3, [r7, #12]
 8009e00:	e001      	b.n	8009e06 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009e02:	2300      	movs	r3, #0
 8009e04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009e06:	f001 fc35 	bl	800b674 <vPortExitCritical>

	return xReturn;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3710      	adds	r7, #16
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}

08009e14 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009e14:	b480      	push	{r7}
 8009e16:	b085      	sub	sp, #20
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
 8009e1c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009e1e:	2300      	movs	r3, #0
 8009e20:	60fb      	str	r3, [r7, #12]
 8009e22:	e014      	b.n	8009e4e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009e24:	4a0f      	ldr	r2, [pc, #60]	; (8009e64 <vQueueAddToRegistry+0x50>)
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d10b      	bne.n	8009e48 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009e30:	490c      	ldr	r1, [pc, #48]	; (8009e64 <vQueueAddToRegistry+0x50>)
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	683a      	ldr	r2, [r7, #0]
 8009e36:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009e3a:	4a0a      	ldr	r2, [pc, #40]	; (8009e64 <vQueueAddToRegistry+0x50>)
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	00db      	lsls	r3, r3, #3
 8009e40:	4413      	add	r3, r2
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009e46:	e006      	b.n	8009e56 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	60fb      	str	r3, [r7, #12]
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	2b07      	cmp	r3, #7
 8009e52:	d9e7      	bls.n	8009e24 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009e54:	bf00      	nop
 8009e56:	bf00      	nop
 8009e58:	3714      	adds	r7, #20
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e60:	4770      	bx	lr
 8009e62:	bf00      	nop
 8009e64:	20000a9c 	.word	0x20000a9c

08009e68 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b086      	sub	sp, #24
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	60f8      	str	r0, [r7, #12]
 8009e70:	60b9      	str	r1, [r7, #8]
 8009e72:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009e78:	f001 fbcc 	bl	800b614 <vPortEnterCritical>
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e82:	b25b      	sxtb	r3, r3
 8009e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e88:	d103      	bne.n	8009e92 <vQueueWaitForMessageRestricted+0x2a>
 8009e8a:	697b      	ldr	r3, [r7, #20]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e98:	b25b      	sxtb	r3, r3
 8009e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e9e:	d103      	bne.n	8009ea8 <vQueueWaitForMessageRestricted+0x40>
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ea8:	f001 fbe4 	bl	800b674 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d106      	bne.n	8009ec2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	3324      	adds	r3, #36	; 0x24
 8009eb8:	687a      	ldr	r2, [r7, #4]
 8009eba:	68b9      	ldr	r1, [r7, #8]
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f000 fc61 	bl	800a784 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009ec2:	6978      	ldr	r0, [r7, #20]
 8009ec4:	f7ff ff26 	bl	8009d14 <prvUnlockQueue>
	}
 8009ec8:	bf00      	nop
 8009eca:	3718      	adds	r7, #24
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}

08009ed0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b08e      	sub	sp, #56	; 0x38
 8009ed4:	af04      	add	r7, sp, #16
 8009ed6:	60f8      	str	r0, [r7, #12]
 8009ed8:	60b9      	str	r1, [r7, #8]
 8009eda:	607a      	str	r2, [r7, #4]
 8009edc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d10a      	bne.n	8009efa <xTaskCreateStatic+0x2a>
	__asm volatile
 8009ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee8:	f383 8811 	msr	BASEPRI, r3
 8009eec:	f3bf 8f6f 	isb	sy
 8009ef0:	f3bf 8f4f 	dsb	sy
 8009ef4:	623b      	str	r3, [r7, #32]
}
 8009ef6:	bf00      	nop
 8009ef8:	e7fe      	b.n	8009ef8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d10a      	bne.n	8009f16 <xTaskCreateStatic+0x46>
	__asm volatile
 8009f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f04:	f383 8811 	msr	BASEPRI, r3
 8009f08:	f3bf 8f6f 	isb	sy
 8009f0c:	f3bf 8f4f 	dsb	sy
 8009f10:	61fb      	str	r3, [r7, #28]
}
 8009f12:	bf00      	nop
 8009f14:	e7fe      	b.n	8009f14 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009f16:	23bc      	movs	r3, #188	; 0xbc
 8009f18:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	2bbc      	cmp	r3, #188	; 0xbc
 8009f1e:	d00a      	beq.n	8009f36 <xTaskCreateStatic+0x66>
	__asm volatile
 8009f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f24:	f383 8811 	msr	BASEPRI, r3
 8009f28:	f3bf 8f6f 	isb	sy
 8009f2c:	f3bf 8f4f 	dsb	sy
 8009f30:	61bb      	str	r3, [r7, #24]
}
 8009f32:	bf00      	nop
 8009f34:	e7fe      	b.n	8009f34 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009f36:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d01e      	beq.n	8009f7c <xTaskCreateStatic+0xac>
 8009f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d01b      	beq.n	8009f7c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f46:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f4c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f50:	2202      	movs	r2, #2
 8009f52:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009f56:	2300      	movs	r3, #0
 8009f58:	9303      	str	r3, [sp, #12]
 8009f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f5c:	9302      	str	r3, [sp, #8]
 8009f5e:	f107 0314 	add.w	r3, r7, #20
 8009f62:	9301      	str	r3, [sp, #4]
 8009f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f66:	9300      	str	r3, [sp, #0]
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	687a      	ldr	r2, [r7, #4]
 8009f6c:	68b9      	ldr	r1, [r7, #8]
 8009f6e:	68f8      	ldr	r0, [r7, #12]
 8009f70:	f000 f850 	bl	800a014 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009f74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f76:	f000 f8f3 	bl	800a160 <prvAddNewTaskToReadyList>
 8009f7a:	e001      	b.n	8009f80 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009f80:	697b      	ldr	r3, [r7, #20]
	}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3728      	adds	r7, #40	; 0x28
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}

08009f8a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009f8a:	b580      	push	{r7, lr}
 8009f8c:	b08c      	sub	sp, #48	; 0x30
 8009f8e:	af04      	add	r7, sp, #16
 8009f90:	60f8      	str	r0, [r7, #12]
 8009f92:	60b9      	str	r1, [r7, #8]
 8009f94:	603b      	str	r3, [r7, #0]
 8009f96:	4613      	mov	r3, r2
 8009f98:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009f9a:	88fb      	ldrh	r3, [r7, #6]
 8009f9c:	009b      	lsls	r3, r3, #2
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f001 fc5a 	bl	800b858 <pvPortMalloc>
 8009fa4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009fa6:	697b      	ldr	r3, [r7, #20]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d00e      	beq.n	8009fca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009fac:	20bc      	movs	r0, #188	; 0xbc
 8009fae:	f001 fc53 	bl	800b858 <pvPortMalloc>
 8009fb2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009fb4:	69fb      	ldr	r3, [r7, #28]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d003      	beq.n	8009fc2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009fba:	69fb      	ldr	r3, [r7, #28]
 8009fbc:	697a      	ldr	r2, [r7, #20]
 8009fbe:	631a      	str	r2, [r3, #48]	; 0x30
 8009fc0:	e005      	b.n	8009fce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009fc2:	6978      	ldr	r0, [r7, #20]
 8009fc4:	f001 fd14 	bl	800b9f0 <vPortFree>
 8009fc8:	e001      	b.n	8009fce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009fce:	69fb      	ldr	r3, [r7, #28]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d017      	beq.n	800a004 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009fd4:	69fb      	ldr	r3, [r7, #28]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009fdc:	88fa      	ldrh	r2, [r7, #6]
 8009fde:	2300      	movs	r3, #0
 8009fe0:	9303      	str	r3, [sp, #12]
 8009fe2:	69fb      	ldr	r3, [r7, #28]
 8009fe4:	9302      	str	r3, [sp, #8]
 8009fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fe8:	9301      	str	r3, [sp, #4]
 8009fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fec:	9300      	str	r3, [sp, #0]
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	68b9      	ldr	r1, [r7, #8]
 8009ff2:	68f8      	ldr	r0, [r7, #12]
 8009ff4:	f000 f80e 	bl	800a014 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009ff8:	69f8      	ldr	r0, [r7, #28]
 8009ffa:	f000 f8b1 	bl	800a160 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009ffe:	2301      	movs	r3, #1
 800a000:	61bb      	str	r3, [r7, #24]
 800a002:	e002      	b.n	800a00a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a004:	f04f 33ff 	mov.w	r3, #4294967295
 800a008:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a00a:	69bb      	ldr	r3, [r7, #24]
	}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3720      	adds	r7, #32
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}

0800a014 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b088      	sub	sp, #32
 800a018:	af00      	add	r7, sp, #0
 800a01a:	60f8      	str	r0, [r7, #12]
 800a01c:	60b9      	str	r1, [r7, #8]
 800a01e:	607a      	str	r2, [r7, #4]
 800a020:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a024:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	009b      	lsls	r3, r3, #2
 800a02a:	461a      	mov	r2, r3
 800a02c:	21a5      	movs	r1, #165	; 0xa5
 800a02e:	f002 fb8b 	bl	800c748 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a034:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a03c:	3b01      	subs	r3, #1
 800a03e:	009b      	lsls	r3, r3, #2
 800a040:	4413      	add	r3, r2
 800a042:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a044:	69bb      	ldr	r3, [r7, #24]
 800a046:	f023 0307 	bic.w	r3, r3, #7
 800a04a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a04c:	69bb      	ldr	r3, [r7, #24]
 800a04e:	f003 0307 	and.w	r3, r3, #7
 800a052:	2b00      	cmp	r3, #0
 800a054:	d00a      	beq.n	800a06c <prvInitialiseNewTask+0x58>
	__asm volatile
 800a056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a05a:	f383 8811 	msr	BASEPRI, r3
 800a05e:	f3bf 8f6f 	isb	sy
 800a062:	f3bf 8f4f 	dsb	sy
 800a066:	617b      	str	r3, [r7, #20]
}
 800a068:	bf00      	nop
 800a06a:	e7fe      	b.n	800a06a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d01f      	beq.n	800a0b2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a072:	2300      	movs	r3, #0
 800a074:	61fb      	str	r3, [r7, #28]
 800a076:	e012      	b.n	800a09e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a078:	68ba      	ldr	r2, [r7, #8]
 800a07a:	69fb      	ldr	r3, [r7, #28]
 800a07c:	4413      	add	r3, r2
 800a07e:	7819      	ldrb	r1, [r3, #0]
 800a080:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a082:	69fb      	ldr	r3, [r7, #28]
 800a084:	4413      	add	r3, r2
 800a086:	3334      	adds	r3, #52	; 0x34
 800a088:	460a      	mov	r2, r1
 800a08a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a08c:	68ba      	ldr	r2, [r7, #8]
 800a08e:	69fb      	ldr	r3, [r7, #28]
 800a090:	4413      	add	r3, r2
 800a092:	781b      	ldrb	r3, [r3, #0]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d006      	beq.n	800a0a6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a098:	69fb      	ldr	r3, [r7, #28]
 800a09a:	3301      	adds	r3, #1
 800a09c:	61fb      	str	r3, [r7, #28]
 800a09e:	69fb      	ldr	r3, [r7, #28]
 800a0a0:	2b0f      	cmp	r3, #15
 800a0a2:	d9e9      	bls.n	800a078 <prvInitialiseNewTask+0x64>
 800a0a4:	e000      	b.n	800a0a8 <prvInitialiseNewTask+0x94>
			{
				break;
 800a0a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a0a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a0b0:	e003      	b.n	800a0ba <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a0ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0bc:	2b37      	cmp	r3, #55	; 0x37
 800a0be:	d901      	bls.n	800a0c4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a0c0:	2337      	movs	r3, #55	; 0x37
 800a0c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0ce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a0d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d8:	3304      	adds	r3, #4
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f7ff f93e 	bl	800935c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a0e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e2:	3318      	adds	r3, #24
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f7ff f939 	bl	800935c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a102:	2200      	movs	r2, #0
 800a104:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a10a:	2200      	movs	r2, #0
 800a10c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a112:	3354      	adds	r3, #84	; 0x54
 800a114:	2260      	movs	r2, #96	; 0x60
 800a116:	2100      	movs	r1, #0
 800a118:	4618      	mov	r0, r3
 800a11a:	f002 fb15 	bl	800c748 <memset>
 800a11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a120:	4a0c      	ldr	r2, [pc, #48]	; (800a154 <prvInitialiseNewTask+0x140>)
 800a122:	659a      	str	r2, [r3, #88]	; 0x58
 800a124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a126:	4a0c      	ldr	r2, [pc, #48]	; (800a158 <prvInitialiseNewTask+0x144>)
 800a128:	65da      	str	r2, [r3, #92]	; 0x5c
 800a12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a12c:	4a0b      	ldr	r2, [pc, #44]	; (800a15c <prvInitialiseNewTask+0x148>)
 800a12e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a130:	683a      	ldr	r2, [r7, #0]
 800a132:	68f9      	ldr	r1, [r7, #12]
 800a134:	69b8      	ldr	r0, [r7, #24]
 800a136:	f001 f941 	bl	800b3bc <pxPortInitialiseStack>
 800a13a:	4602      	mov	r2, r0
 800a13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a13e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a142:	2b00      	cmp	r3, #0
 800a144:	d002      	beq.n	800a14c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a148:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a14a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a14c:	bf00      	nop
 800a14e:	3720      	adds	r7, #32
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}
 800a154:	0800ca04 	.word	0x0800ca04
 800a158:	0800ca24 	.word	0x0800ca24
 800a15c:	0800c9e4 	.word	0x0800c9e4

0800a160 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b082      	sub	sp, #8
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a168:	f001 fa54 	bl	800b614 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a16c:	4b2d      	ldr	r3, [pc, #180]	; (800a224 <prvAddNewTaskToReadyList+0xc4>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	3301      	adds	r3, #1
 800a172:	4a2c      	ldr	r2, [pc, #176]	; (800a224 <prvAddNewTaskToReadyList+0xc4>)
 800a174:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a176:	4b2c      	ldr	r3, [pc, #176]	; (800a228 <prvAddNewTaskToReadyList+0xc8>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d109      	bne.n	800a192 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a17e:	4a2a      	ldr	r2, [pc, #168]	; (800a228 <prvAddNewTaskToReadyList+0xc8>)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a184:	4b27      	ldr	r3, [pc, #156]	; (800a224 <prvAddNewTaskToReadyList+0xc4>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	2b01      	cmp	r3, #1
 800a18a:	d110      	bne.n	800a1ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a18c:	f000 fc26 	bl	800a9dc <prvInitialiseTaskLists>
 800a190:	e00d      	b.n	800a1ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a192:	4b26      	ldr	r3, [pc, #152]	; (800a22c <prvAddNewTaskToReadyList+0xcc>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d109      	bne.n	800a1ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a19a:	4b23      	ldr	r3, [pc, #140]	; (800a228 <prvAddNewTaskToReadyList+0xc8>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d802      	bhi.n	800a1ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a1a8:	4a1f      	ldr	r2, [pc, #124]	; (800a228 <prvAddNewTaskToReadyList+0xc8>)
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a1ae:	4b20      	ldr	r3, [pc, #128]	; (800a230 <prvAddNewTaskToReadyList+0xd0>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	4a1e      	ldr	r2, [pc, #120]	; (800a230 <prvAddNewTaskToReadyList+0xd0>)
 800a1b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a1b8:	4b1d      	ldr	r3, [pc, #116]	; (800a230 <prvAddNewTaskToReadyList+0xd0>)
 800a1ba:	681a      	ldr	r2, [r3, #0]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1c4:	4b1b      	ldr	r3, [pc, #108]	; (800a234 <prvAddNewTaskToReadyList+0xd4>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d903      	bls.n	800a1d4 <prvAddNewTaskToReadyList+0x74>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1d0:	4a18      	ldr	r2, [pc, #96]	; (800a234 <prvAddNewTaskToReadyList+0xd4>)
 800a1d2:	6013      	str	r3, [r2, #0]
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1d8:	4613      	mov	r3, r2
 800a1da:	009b      	lsls	r3, r3, #2
 800a1dc:	4413      	add	r3, r2
 800a1de:	009b      	lsls	r3, r3, #2
 800a1e0:	4a15      	ldr	r2, [pc, #84]	; (800a238 <prvAddNewTaskToReadyList+0xd8>)
 800a1e2:	441a      	add	r2, r3
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	3304      	adds	r3, #4
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	4610      	mov	r0, r2
 800a1ec:	f7ff f8c3 	bl	8009376 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a1f0:	f001 fa40 	bl	800b674 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a1f4:	4b0d      	ldr	r3, [pc, #52]	; (800a22c <prvAddNewTaskToReadyList+0xcc>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d00e      	beq.n	800a21a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a1fc:	4b0a      	ldr	r3, [pc, #40]	; (800a228 <prvAddNewTaskToReadyList+0xc8>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a206:	429a      	cmp	r2, r3
 800a208:	d207      	bcs.n	800a21a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a20a:	4b0c      	ldr	r3, [pc, #48]	; (800a23c <prvAddNewTaskToReadyList+0xdc>)
 800a20c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a210:	601a      	str	r2, [r3, #0]
 800a212:	f3bf 8f4f 	dsb	sy
 800a216:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a21a:	bf00      	nop
 800a21c:	3708      	adds	r7, #8
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}
 800a222:	bf00      	nop
 800a224:	20000fb0 	.word	0x20000fb0
 800a228:	20000adc 	.word	0x20000adc
 800a22c:	20000fbc 	.word	0x20000fbc
 800a230:	20000fcc 	.word	0x20000fcc
 800a234:	20000fb8 	.word	0x20000fb8
 800a238:	20000ae0 	.word	0x20000ae0
 800a23c:	e000ed04 	.word	0xe000ed04

0800a240 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a240:	b580      	push	{r7, lr}
 800a242:	b084      	sub	sp, #16
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a248:	2300      	movs	r3, #0
 800a24a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d017      	beq.n	800a282 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a252:	4b13      	ldr	r3, [pc, #76]	; (800a2a0 <vTaskDelay+0x60>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d00a      	beq.n	800a270 <vTaskDelay+0x30>
	__asm volatile
 800a25a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a25e:	f383 8811 	msr	BASEPRI, r3
 800a262:	f3bf 8f6f 	isb	sy
 800a266:	f3bf 8f4f 	dsb	sy
 800a26a:	60bb      	str	r3, [r7, #8]
}
 800a26c:	bf00      	nop
 800a26e:	e7fe      	b.n	800a26e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a270:	f000 f88a 	bl	800a388 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a274:	2100      	movs	r1, #0
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f000 fcfe 	bl	800ac78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a27c:	f000 f892 	bl	800a3a4 <xTaskResumeAll>
 800a280:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d107      	bne.n	800a298 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a288:	4b06      	ldr	r3, [pc, #24]	; (800a2a4 <vTaskDelay+0x64>)
 800a28a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a28e:	601a      	str	r2, [r3, #0]
 800a290:	f3bf 8f4f 	dsb	sy
 800a294:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a298:	bf00      	nop
 800a29a:	3710      	adds	r7, #16
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}
 800a2a0:	20000fd8 	.word	0x20000fd8
 800a2a4:	e000ed04 	.word	0xe000ed04

0800a2a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b08a      	sub	sp, #40	; 0x28
 800a2ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a2b6:	463a      	mov	r2, r7
 800a2b8:	1d39      	adds	r1, r7, #4
 800a2ba:	f107 0308 	add.w	r3, r7, #8
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f7fe fff8 	bl	80092b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a2c4:	6839      	ldr	r1, [r7, #0]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	68ba      	ldr	r2, [r7, #8]
 800a2ca:	9202      	str	r2, [sp, #8]
 800a2cc:	9301      	str	r3, [sp, #4]
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	9300      	str	r3, [sp, #0]
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	460a      	mov	r2, r1
 800a2d6:	4924      	ldr	r1, [pc, #144]	; (800a368 <vTaskStartScheduler+0xc0>)
 800a2d8:	4824      	ldr	r0, [pc, #144]	; (800a36c <vTaskStartScheduler+0xc4>)
 800a2da:	f7ff fdf9 	bl	8009ed0 <xTaskCreateStatic>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	4a23      	ldr	r2, [pc, #140]	; (800a370 <vTaskStartScheduler+0xc8>)
 800a2e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a2e4:	4b22      	ldr	r3, [pc, #136]	; (800a370 <vTaskStartScheduler+0xc8>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d002      	beq.n	800a2f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	617b      	str	r3, [r7, #20]
 800a2f0:	e001      	b.n	800a2f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	2b01      	cmp	r3, #1
 800a2fa:	d102      	bne.n	800a302 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a2fc:	f000 fd10 	bl	800ad20 <xTimerCreateTimerTask>
 800a300:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	2b01      	cmp	r3, #1
 800a306:	d11b      	bne.n	800a340 <vTaskStartScheduler+0x98>
	__asm volatile
 800a308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a30c:	f383 8811 	msr	BASEPRI, r3
 800a310:	f3bf 8f6f 	isb	sy
 800a314:	f3bf 8f4f 	dsb	sy
 800a318:	613b      	str	r3, [r7, #16]
}
 800a31a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a31c:	4b15      	ldr	r3, [pc, #84]	; (800a374 <vTaskStartScheduler+0xcc>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	3354      	adds	r3, #84	; 0x54
 800a322:	4a15      	ldr	r2, [pc, #84]	; (800a378 <vTaskStartScheduler+0xd0>)
 800a324:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a326:	4b15      	ldr	r3, [pc, #84]	; (800a37c <vTaskStartScheduler+0xd4>)
 800a328:	f04f 32ff 	mov.w	r2, #4294967295
 800a32c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a32e:	4b14      	ldr	r3, [pc, #80]	; (800a380 <vTaskStartScheduler+0xd8>)
 800a330:	2201      	movs	r2, #1
 800a332:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a334:	4b13      	ldr	r3, [pc, #76]	; (800a384 <vTaskStartScheduler+0xdc>)
 800a336:	2200      	movs	r2, #0
 800a338:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a33a:	f001 f8c9 	bl	800b4d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a33e:	e00e      	b.n	800a35e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a346:	d10a      	bne.n	800a35e <vTaskStartScheduler+0xb6>
	__asm volatile
 800a348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a34c:	f383 8811 	msr	BASEPRI, r3
 800a350:	f3bf 8f6f 	isb	sy
 800a354:	f3bf 8f4f 	dsb	sy
 800a358:	60fb      	str	r3, [r7, #12]
}
 800a35a:	bf00      	nop
 800a35c:	e7fe      	b.n	800a35c <vTaskStartScheduler+0xb4>
}
 800a35e:	bf00      	nop
 800a360:	3718      	adds	r7, #24
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}
 800a366:	bf00      	nop
 800a368:	0800c948 	.word	0x0800c948
 800a36c:	0800a9ad 	.word	0x0800a9ad
 800a370:	20000fd4 	.word	0x20000fd4
 800a374:	20000adc 	.word	0x20000adc
 800a378:	20000100 	.word	0x20000100
 800a37c:	20000fd0 	.word	0x20000fd0
 800a380:	20000fbc 	.word	0x20000fbc
 800a384:	20000fb4 	.word	0x20000fb4

0800a388 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a388:	b480      	push	{r7}
 800a38a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a38c:	4b04      	ldr	r3, [pc, #16]	; (800a3a0 <vTaskSuspendAll+0x18>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	3301      	adds	r3, #1
 800a392:	4a03      	ldr	r2, [pc, #12]	; (800a3a0 <vTaskSuspendAll+0x18>)
 800a394:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a396:	bf00      	nop
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr
 800a3a0:	20000fd8 	.word	0x20000fd8

0800a3a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b084      	sub	sp, #16
 800a3a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a3b2:	4b42      	ldr	r3, [pc, #264]	; (800a4bc <xTaskResumeAll+0x118>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d10a      	bne.n	800a3d0 <xTaskResumeAll+0x2c>
	__asm volatile
 800a3ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3be:	f383 8811 	msr	BASEPRI, r3
 800a3c2:	f3bf 8f6f 	isb	sy
 800a3c6:	f3bf 8f4f 	dsb	sy
 800a3ca:	603b      	str	r3, [r7, #0]
}
 800a3cc:	bf00      	nop
 800a3ce:	e7fe      	b.n	800a3ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a3d0:	f001 f920 	bl	800b614 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a3d4:	4b39      	ldr	r3, [pc, #228]	; (800a4bc <xTaskResumeAll+0x118>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	3b01      	subs	r3, #1
 800a3da:	4a38      	ldr	r2, [pc, #224]	; (800a4bc <xTaskResumeAll+0x118>)
 800a3dc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3de:	4b37      	ldr	r3, [pc, #220]	; (800a4bc <xTaskResumeAll+0x118>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d162      	bne.n	800a4ac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a3e6:	4b36      	ldr	r3, [pc, #216]	; (800a4c0 <xTaskResumeAll+0x11c>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d05e      	beq.n	800a4ac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a3ee:	e02f      	b.n	800a450 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3f0:	4b34      	ldr	r3, [pc, #208]	; (800a4c4 <xTaskResumeAll+0x120>)
 800a3f2:	68db      	ldr	r3, [r3, #12]
 800a3f4:	68db      	ldr	r3, [r3, #12]
 800a3f6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	3318      	adds	r3, #24
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f7ff f817 	bl	8009430 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	3304      	adds	r3, #4
 800a406:	4618      	mov	r0, r3
 800a408:	f7ff f812 	bl	8009430 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a410:	4b2d      	ldr	r3, [pc, #180]	; (800a4c8 <xTaskResumeAll+0x124>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	429a      	cmp	r2, r3
 800a416:	d903      	bls.n	800a420 <xTaskResumeAll+0x7c>
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a41c:	4a2a      	ldr	r2, [pc, #168]	; (800a4c8 <xTaskResumeAll+0x124>)
 800a41e:	6013      	str	r3, [r2, #0]
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a424:	4613      	mov	r3, r2
 800a426:	009b      	lsls	r3, r3, #2
 800a428:	4413      	add	r3, r2
 800a42a:	009b      	lsls	r3, r3, #2
 800a42c:	4a27      	ldr	r2, [pc, #156]	; (800a4cc <xTaskResumeAll+0x128>)
 800a42e:	441a      	add	r2, r3
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	3304      	adds	r3, #4
 800a434:	4619      	mov	r1, r3
 800a436:	4610      	mov	r0, r2
 800a438:	f7fe ff9d 	bl	8009376 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a440:	4b23      	ldr	r3, [pc, #140]	; (800a4d0 <xTaskResumeAll+0x12c>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a446:	429a      	cmp	r2, r3
 800a448:	d302      	bcc.n	800a450 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a44a:	4b22      	ldr	r3, [pc, #136]	; (800a4d4 <xTaskResumeAll+0x130>)
 800a44c:	2201      	movs	r2, #1
 800a44e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a450:	4b1c      	ldr	r3, [pc, #112]	; (800a4c4 <xTaskResumeAll+0x120>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d1cb      	bne.n	800a3f0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d001      	beq.n	800a462 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a45e:	f000 fb5f 	bl	800ab20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a462:	4b1d      	ldr	r3, [pc, #116]	; (800a4d8 <xTaskResumeAll+0x134>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d010      	beq.n	800a490 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a46e:	f000 f847 	bl	800a500 <xTaskIncrementTick>
 800a472:	4603      	mov	r3, r0
 800a474:	2b00      	cmp	r3, #0
 800a476:	d002      	beq.n	800a47e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a478:	4b16      	ldr	r3, [pc, #88]	; (800a4d4 <xTaskResumeAll+0x130>)
 800a47a:	2201      	movs	r2, #1
 800a47c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	3b01      	subs	r3, #1
 800a482:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d1f1      	bne.n	800a46e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a48a:	4b13      	ldr	r3, [pc, #76]	; (800a4d8 <xTaskResumeAll+0x134>)
 800a48c:	2200      	movs	r2, #0
 800a48e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a490:	4b10      	ldr	r3, [pc, #64]	; (800a4d4 <xTaskResumeAll+0x130>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d009      	beq.n	800a4ac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a498:	2301      	movs	r3, #1
 800a49a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a49c:	4b0f      	ldr	r3, [pc, #60]	; (800a4dc <xTaskResumeAll+0x138>)
 800a49e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4a2:	601a      	str	r2, [r3, #0]
 800a4a4:	f3bf 8f4f 	dsb	sy
 800a4a8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a4ac:	f001 f8e2 	bl	800b674 <vPortExitCritical>

	return xAlreadyYielded;
 800a4b0:	68bb      	ldr	r3, [r7, #8]
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3710      	adds	r7, #16
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}
 800a4ba:	bf00      	nop
 800a4bc:	20000fd8 	.word	0x20000fd8
 800a4c0:	20000fb0 	.word	0x20000fb0
 800a4c4:	20000f70 	.word	0x20000f70
 800a4c8:	20000fb8 	.word	0x20000fb8
 800a4cc:	20000ae0 	.word	0x20000ae0
 800a4d0:	20000adc 	.word	0x20000adc
 800a4d4:	20000fc4 	.word	0x20000fc4
 800a4d8:	20000fc0 	.word	0x20000fc0
 800a4dc:	e000ed04 	.word	0xe000ed04

0800a4e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b083      	sub	sp, #12
 800a4e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a4e6:	4b05      	ldr	r3, [pc, #20]	; (800a4fc <xTaskGetTickCount+0x1c>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a4ec:	687b      	ldr	r3, [r7, #4]
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	370c      	adds	r7, #12
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr
 800a4fa:	bf00      	nop
 800a4fc:	20000fb4 	.word	0x20000fb4

0800a500 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b086      	sub	sp, #24
 800a504:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a506:	2300      	movs	r3, #0
 800a508:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a50a:	4b4f      	ldr	r3, [pc, #316]	; (800a648 <xTaskIncrementTick+0x148>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	f040 808f 	bne.w	800a632 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a514:	4b4d      	ldr	r3, [pc, #308]	; (800a64c <xTaskIncrementTick+0x14c>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	3301      	adds	r3, #1
 800a51a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a51c:	4a4b      	ldr	r2, [pc, #300]	; (800a64c <xTaskIncrementTick+0x14c>)
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d120      	bne.n	800a56a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a528:	4b49      	ldr	r3, [pc, #292]	; (800a650 <xTaskIncrementTick+0x150>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d00a      	beq.n	800a548 <xTaskIncrementTick+0x48>
	__asm volatile
 800a532:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a536:	f383 8811 	msr	BASEPRI, r3
 800a53a:	f3bf 8f6f 	isb	sy
 800a53e:	f3bf 8f4f 	dsb	sy
 800a542:	603b      	str	r3, [r7, #0]
}
 800a544:	bf00      	nop
 800a546:	e7fe      	b.n	800a546 <xTaskIncrementTick+0x46>
 800a548:	4b41      	ldr	r3, [pc, #260]	; (800a650 <xTaskIncrementTick+0x150>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	60fb      	str	r3, [r7, #12]
 800a54e:	4b41      	ldr	r3, [pc, #260]	; (800a654 <xTaskIncrementTick+0x154>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	4a3f      	ldr	r2, [pc, #252]	; (800a650 <xTaskIncrementTick+0x150>)
 800a554:	6013      	str	r3, [r2, #0]
 800a556:	4a3f      	ldr	r2, [pc, #252]	; (800a654 <xTaskIncrementTick+0x154>)
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	6013      	str	r3, [r2, #0]
 800a55c:	4b3e      	ldr	r3, [pc, #248]	; (800a658 <xTaskIncrementTick+0x158>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	3301      	adds	r3, #1
 800a562:	4a3d      	ldr	r2, [pc, #244]	; (800a658 <xTaskIncrementTick+0x158>)
 800a564:	6013      	str	r3, [r2, #0]
 800a566:	f000 fadb 	bl	800ab20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a56a:	4b3c      	ldr	r3, [pc, #240]	; (800a65c <xTaskIncrementTick+0x15c>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	693a      	ldr	r2, [r7, #16]
 800a570:	429a      	cmp	r2, r3
 800a572:	d349      	bcc.n	800a608 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a574:	4b36      	ldr	r3, [pc, #216]	; (800a650 <xTaskIncrementTick+0x150>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d104      	bne.n	800a588 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a57e:	4b37      	ldr	r3, [pc, #220]	; (800a65c <xTaskIncrementTick+0x15c>)
 800a580:	f04f 32ff 	mov.w	r2, #4294967295
 800a584:	601a      	str	r2, [r3, #0]
					break;
 800a586:	e03f      	b.n	800a608 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a588:	4b31      	ldr	r3, [pc, #196]	; (800a650 <xTaskIncrementTick+0x150>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	68db      	ldr	r3, [r3, #12]
 800a58e:	68db      	ldr	r3, [r3, #12]
 800a590:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	685b      	ldr	r3, [r3, #4]
 800a596:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a598:	693a      	ldr	r2, [r7, #16]
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d203      	bcs.n	800a5a8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a5a0:	4a2e      	ldr	r2, [pc, #184]	; (800a65c <xTaskIncrementTick+0x15c>)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a5a6:	e02f      	b.n	800a608 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	3304      	adds	r3, #4
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f7fe ff3f 	bl	8009430 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d004      	beq.n	800a5c4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	3318      	adds	r3, #24
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f7fe ff36 	bl	8009430 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5c8:	4b25      	ldr	r3, [pc, #148]	; (800a660 <xTaskIncrementTick+0x160>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	429a      	cmp	r2, r3
 800a5ce:	d903      	bls.n	800a5d8 <xTaskIncrementTick+0xd8>
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5d4:	4a22      	ldr	r2, [pc, #136]	; (800a660 <xTaskIncrementTick+0x160>)
 800a5d6:	6013      	str	r3, [r2, #0]
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5dc:	4613      	mov	r3, r2
 800a5de:	009b      	lsls	r3, r3, #2
 800a5e0:	4413      	add	r3, r2
 800a5e2:	009b      	lsls	r3, r3, #2
 800a5e4:	4a1f      	ldr	r2, [pc, #124]	; (800a664 <xTaskIncrementTick+0x164>)
 800a5e6:	441a      	add	r2, r3
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	3304      	adds	r3, #4
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	4610      	mov	r0, r2
 800a5f0:	f7fe fec1 	bl	8009376 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5f8:	4b1b      	ldr	r3, [pc, #108]	; (800a668 <xTaskIncrementTick+0x168>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5fe:	429a      	cmp	r2, r3
 800a600:	d3b8      	bcc.n	800a574 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a602:	2301      	movs	r3, #1
 800a604:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a606:	e7b5      	b.n	800a574 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a608:	4b17      	ldr	r3, [pc, #92]	; (800a668 <xTaskIncrementTick+0x168>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a60e:	4915      	ldr	r1, [pc, #84]	; (800a664 <xTaskIncrementTick+0x164>)
 800a610:	4613      	mov	r3, r2
 800a612:	009b      	lsls	r3, r3, #2
 800a614:	4413      	add	r3, r2
 800a616:	009b      	lsls	r3, r3, #2
 800a618:	440b      	add	r3, r1
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	2b01      	cmp	r3, #1
 800a61e:	d901      	bls.n	800a624 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a620:	2301      	movs	r3, #1
 800a622:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a624:	4b11      	ldr	r3, [pc, #68]	; (800a66c <xTaskIncrementTick+0x16c>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d007      	beq.n	800a63c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a62c:	2301      	movs	r3, #1
 800a62e:	617b      	str	r3, [r7, #20]
 800a630:	e004      	b.n	800a63c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a632:	4b0f      	ldr	r3, [pc, #60]	; (800a670 <xTaskIncrementTick+0x170>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	3301      	adds	r3, #1
 800a638:	4a0d      	ldr	r2, [pc, #52]	; (800a670 <xTaskIncrementTick+0x170>)
 800a63a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a63c:	697b      	ldr	r3, [r7, #20]
}
 800a63e:	4618      	mov	r0, r3
 800a640:	3718      	adds	r7, #24
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}
 800a646:	bf00      	nop
 800a648:	20000fd8 	.word	0x20000fd8
 800a64c:	20000fb4 	.word	0x20000fb4
 800a650:	20000f68 	.word	0x20000f68
 800a654:	20000f6c 	.word	0x20000f6c
 800a658:	20000fc8 	.word	0x20000fc8
 800a65c:	20000fd0 	.word	0x20000fd0
 800a660:	20000fb8 	.word	0x20000fb8
 800a664:	20000ae0 	.word	0x20000ae0
 800a668:	20000adc 	.word	0x20000adc
 800a66c:	20000fc4 	.word	0x20000fc4
 800a670:	20000fc0 	.word	0x20000fc0

0800a674 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a674:	b480      	push	{r7}
 800a676:	b085      	sub	sp, #20
 800a678:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a67a:	4b2a      	ldr	r3, [pc, #168]	; (800a724 <vTaskSwitchContext+0xb0>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d003      	beq.n	800a68a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a682:	4b29      	ldr	r3, [pc, #164]	; (800a728 <vTaskSwitchContext+0xb4>)
 800a684:	2201      	movs	r2, #1
 800a686:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a688:	e046      	b.n	800a718 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a68a:	4b27      	ldr	r3, [pc, #156]	; (800a728 <vTaskSwitchContext+0xb4>)
 800a68c:	2200      	movs	r2, #0
 800a68e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a690:	4b26      	ldr	r3, [pc, #152]	; (800a72c <vTaskSwitchContext+0xb8>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	60fb      	str	r3, [r7, #12]
 800a696:	e010      	b.n	800a6ba <vTaskSwitchContext+0x46>
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d10a      	bne.n	800a6b4 <vTaskSwitchContext+0x40>
	__asm volatile
 800a69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a2:	f383 8811 	msr	BASEPRI, r3
 800a6a6:	f3bf 8f6f 	isb	sy
 800a6aa:	f3bf 8f4f 	dsb	sy
 800a6ae:	607b      	str	r3, [r7, #4]
}
 800a6b0:	bf00      	nop
 800a6b2:	e7fe      	b.n	800a6b2 <vTaskSwitchContext+0x3e>
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	3b01      	subs	r3, #1
 800a6b8:	60fb      	str	r3, [r7, #12]
 800a6ba:	491d      	ldr	r1, [pc, #116]	; (800a730 <vTaskSwitchContext+0xbc>)
 800a6bc:	68fa      	ldr	r2, [r7, #12]
 800a6be:	4613      	mov	r3, r2
 800a6c0:	009b      	lsls	r3, r3, #2
 800a6c2:	4413      	add	r3, r2
 800a6c4:	009b      	lsls	r3, r3, #2
 800a6c6:	440b      	add	r3, r1
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d0e4      	beq.n	800a698 <vTaskSwitchContext+0x24>
 800a6ce:	68fa      	ldr	r2, [r7, #12]
 800a6d0:	4613      	mov	r3, r2
 800a6d2:	009b      	lsls	r3, r3, #2
 800a6d4:	4413      	add	r3, r2
 800a6d6:	009b      	lsls	r3, r3, #2
 800a6d8:	4a15      	ldr	r2, [pc, #84]	; (800a730 <vTaskSwitchContext+0xbc>)
 800a6da:	4413      	add	r3, r2
 800a6dc:	60bb      	str	r3, [r7, #8]
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	685b      	ldr	r3, [r3, #4]
 800a6e2:	685a      	ldr	r2, [r3, #4]
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	605a      	str	r2, [r3, #4]
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	685a      	ldr	r2, [r3, #4]
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	3308      	adds	r3, #8
 800a6f0:	429a      	cmp	r2, r3
 800a6f2:	d104      	bne.n	800a6fe <vTaskSwitchContext+0x8a>
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	685b      	ldr	r3, [r3, #4]
 800a6f8:	685a      	ldr	r2, [r3, #4]
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	605a      	str	r2, [r3, #4]
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	685b      	ldr	r3, [r3, #4]
 800a702:	68db      	ldr	r3, [r3, #12]
 800a704:	4a0b      	ldr	r2, [pc, #44]	; (800a734 <vTaskSwitchContext+0xc0>)
 800a706:	6013      	str	r3, [r2, #0]
 800a708:	4a08      	ldr	r2, [pc, #32]	; (800a72c <vTaskSwitchContext+0xb8>)
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a70e:	4b09      	ldr	r3, [pc, #36]	; (800a734 <vTaskSwitchContext+0xc0>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	3354      	adds	r3, #84	; 0x54
 800a714:	4a08      	ldr	r2, [pc, #32]	; (800a738 <vTaskSwitchContext+0xc4>)
 800a716:	6013      	str	r3, [r2, #0]
}
 800a718:	bf00      	nop
 800a71a:	3714      	adds	r7, #20
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr
 800a724:	20000fd8 	.word	0x20000fd8
 800a728:	20000fc4 	.word	0x20000fc4
 800a72c:	20000fb8 	.word	0x20000fb8
 800a730:	20000ae0 	.word	0x20000ae0
 800a734:	20000adc 	.word	0x20000adc
 800a738:	20000100 	.word	0x20000100

0800a73c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b084      	sub	sp, #16
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d10a      	bne.n	800a762 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a74c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a750:	f383 8811 	msr	BASEPRI, r3
 800a754:	f3bf 8f6f 	isb	sy
 800a758:	f3bf 8f4f 	dsb	sy
 800a75c:	60fb      	str	r3, [r7, #12]
}
 800a75e:	bf00      	nop
 800a760:	e7fe      	b.n	800a760 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a762:	4b07      	ldr	r3, [pc, #28]	; (800a780 <vTaskPlaceOnEventList+0x44>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	3318      	adds	r3, #24
 800a768:	4619      	mov	r1, r3
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f7fe fe27 	bl	80093be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a770:	2101      	movs	r1, #1
 800a772:	6838      	ldr	r0, [r7, #0]
 800a774:	f000 fa80 	bl	800ac78 <prvAddCurrentTaskToDelayedList>
}
 800a778:	bf00      	nop
 800a77a:	3710      	adds	r7, #16
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}
 800a780:	20000adc 	.word	0x20000adc

0800a784 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a784:	b580      	push	{r7, lr}
 800a786:	b086      	sub	sp, #24
 800a788:	af00      	add	r7, sp, #0
 800a78a:	60f8      	str	r0, [r7, #12]
 800a78c:	60b9      	str	r1, [r7, #8]
 800a78e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d10a      	bne.n	800a7ac <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a79a:	f383 8811 	msr	BASEPRI, r3
 800a79e:	f3bf 8f6f 	isb	sy
 800a7a2:	f3bf 8f4f 	dsb	sy
 800a7a6:	617b      	str	r3, [r7, #20]
}
 800a7a8:	bf00      	nop
 800a7aa:	e7fe      	b.n	800a7aa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a7ac:	4b0a      	ldr	r3, [pc, #40]	; (800a7d8 <vTaskPlaceOnEventListRestricted+0x54>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	3318      	adds	r3, #24
 800a7b2:	4619      	mov	r1, r3
 800a7b4:	68f8      	ldr	r0, [r7, #12]
 800a7b6:	f7fe fdde 	bl	8009376 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d002      	beq.n	800a7c6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a7c0:	f04f 33ff 	mov.w	r3, #4294967295
 800a7c4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a7c6:	6879      	ldr	r1, [r7, #4]
 800a7c8:	68b8      	ldr	r0, [r7, #8]
 800a7ca:	f000 fa55 	bl	800ac78 <prvAddCurrentTaskToDelayedList>
	}
 800a7ce:	bf00      	nop
 800a7d0:	3718      	adds	r7, #24
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}
 800a7d6:	bf00      	nop
 800a7d8:	20000adc 	.word	0x20000adc

0800a7dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b086      	sub	sp, #24
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	68db      	ldr	r3, [r3, #12]
 800a7e8:	68db      	ldr	r3, [r3, #12]
 800a7ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d10a      	bne.n	800a808 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a7f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f6:	f383 8811 	msr	BASEPRI, r3
 800a7fa:	f3bf 8f6f 	isb	sy
 800a7fe:	f3bf 8f4f 	dsb	sy
 800a802:	60fb      	str	r3, [r7, #12]
}
 800a804:	bf00      	nop
 800a806:	e7fe      	b.n	800a806 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	3318      	adds	r3, #24
 800a80c:	4618      	mov	r0, r3
 800a80e:	f7fe fe0f 	bl	8009430 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a812:	4b1e      	ldr	r3, [pc, #120]	; (800a88c <xTaskRemoveFromEventList+0xb0>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d11d      	bne.n	800a856 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a81a:	693b      	ldr	r3, [r7, #16]
 800a81c:	3304      	adds	r3, #4
 800a81e:	4618      	mov	r0, r3
 800a820:	f7fe fe06 	bl	8009430 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a828:	4b19      	ldr	r3, [pc, #100]	; (800a890 <xTaskRemoveFromEventList+0xb4>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	429a      	cmp	r2, r3
 800a82e:	d903      	bls.n	800a838 <xTaskRemoveFromEventList+0x5c>
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a834:	4a16      	ldr	r2, [pc, #88]	; (800a890 <xTaskRemoveFromEventList+0xb4>)
 800a836:	6013      	str	r3, [r2, #0]
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a83c:	4613      	mov	r3, r2
 800a83e:	009b      	lsls	r3, r3, #2
 800a840:	4413      	add	r3, r2
 800a842:	009b      	lsls	r3, r3, #2
 800a844:	4a13      	ldr	r2, [pc, #76]	; (800a894 <xTaskRemoveFromEventList+0xb8>)
 800a846:	441a      	add	r2, r3
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	3304      	adds	r3, #4
 800a84c:	4619      	mov	r1, r3
 800a84e:	4610      	mov	r0, r2
 800a850:	f7fe fd91 	bl	8009376 <vListInsertEnd>
 800a854:	e005      	b.n	800a862 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a856:	693b      	ldr	r3, [r7, #16]
 800a858:	3318      	adds	r3, #24
 800a85a:	4619      	mov	r1, r3
 800a85c:	480e      	ldr	r0, [pc, #56]	; (800a898 <xTaskRemoveFromEventList+0xbc>)
 800a85e:	f7fe fd8a 	bl	8009376 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a866:	4b0d      	ldr	r3, [pc, #52]	; (800a89c <xTaskRemoveFromEventList+0xc0>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a86c:	429a      	cmp	r2, r3
 800a86e:	d905      	bls.n	800a87c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a870:	2301      	movs	r3, #1
 800a872:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a874:	4b0a      	ldr	r3, [pc, #40]	; (800a8a0 <xTaskRemoveFromEventList+0xc4>)
 800a876:	2201      	movs	r2, #1
 800a878:	601a      	str	r2, [r3, #0]
 800a87a:	e001      	b.n	800a880 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a87c:	2300      	movs	r3, #0
 800a87e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a880:	697b      	ldr	r3, [r7, #20]
}
 800a882:	4618      	mov	r0, r3
 800a884:	3718      	adds	r7, #24
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}
 800a88a:	bf00      	nop
 800a88c:	20000fd8 	.word	0x20000fd8
 800a890:	20000fb8 	.word	0x20000fb8
 800a894:	20000ae0 	.word	0x20000ae0
 800a898:	20000f70 	.word	0x20000f70
 800a89c:	20000adc 	.word	0x20000adc
 800a8a0:	20000fc4 	.word	0x20000fc4

0800a8a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b083      	sub	sp, #12
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a8ac:	4b06      	ldr	r3, [pc, #24]	; (800a8c8 <vTaskInternalSetTimeOutState+0x24>)
 800a8ae:	681a      	ldr	r2, [r3, #0]
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a8b4:	4b05      	ldr	r3, [pc, #20]	; (800a8cc <vTaskInternalSetTimeOutState+0x28>)
 800a8b6:	681a      	ldr	r2, [r3, #0]
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	605a      	str	r2, [r3, #4]
}
 800a8bc:	bf00      	nop
 800a8be:	370c      	adds	r7, #12
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c6:	4770      	bx	lr
 800a8c8:	20000fc8 	.word	0x20000fc8
 800a8cc:	20000fb4 	.word	0x20000fb4

0800a8d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b088      	sub	sp, #32
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
 800a8d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d10a      	bne.n	800a8f6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e4:	f383 8811 	msr	BASEPRI, r3
 800a8e8:	f3bf 8f6f 	isb	sy
 800a8ec:	f3bf 8f4f 	dsb	sy
 800a8f0:	613b      	str	r3, [r7, #16]
}
 800a8f2:	bf00      	nop
 800a8f4:	e7fe      	b.n	800a8f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d10a      	bne.n	800a912 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a900:	f383 8811 	msr	BASEPRI, r3
 800a904:	f3bf 8f6f 	isb	sy
 800a908:	f3bf 8f4f 	dsb	sy
 800a90c:	60fb      	str	r3, [r7, #12]
}
 800a90e:	bf00      	nop
 800a910:	e7fe      	b.n	800a910 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a912:	f000 fe7f 	bl	800b614 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a916:	4b1d      	ldr	r3, [pc, #116]	; (800a98c <xTaskCheckForTimeOut+0xbc>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	685b      	ldr	r3, [r3, #4]
 800a920:	69ba      	ldr	r2, [r7, #24]
 800a922:	1ad3      	subs	r3, r2, r3
 800a924:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a92e:	d102      	bne.n	800a936 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a930:	2300      	movs	r3, #0
 800a932:	61fb      	str	r3, [r7, #28]
 800a934:	e023      	b.n	800a97e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681a      	ldr	r2, [r3, #0]
 800a93a:	4b15      	ldr	r3, [pc, #84]	; (800a990 <xTaskCheckForTimeOut+0xc0>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	429a      	cmp	r2, r3
 800a940:	d007      	beq.n	800a952 <xTaskCheckForTimeOut+0x82>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	685b      	ldr	r3, [r3, #4]
 800a946:	69ba      	ldr	r2, [r7, #24]
 800a948:	429a      	cmp	r2, r3
 800a94a:	d302      	bcc.n	800a952 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a94c:	2301      	movs	r3, #1
 800a94e:	61fb      	str	r3, [r7, #28]
 800a950:	e015      	b.n	800a97e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	697a      	ldr	r2, [r7, #20]
 800a958:	429a      	cmp	r2, r3
 800a95a:	d20b      	bcs.n	800a974 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	681a      	ldr	r2, [r3, #0]
 800a960:	697b      	ldr	r3, [r7, #20]
 800a962:	1ad2      	subs	r2, r2, r3
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f7ff ff9b 	bl	800a8a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a96e:	2300      	movs	r3, #0
 800a970:	61fb      	str	r3, [r7, #28]
 800a972:	e004      	b.n	800a97e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	2200      	movs	r2, #0
 800a978:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a97a:	2301      	movs	r3, #1
 800a97c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a97e:	f000 fe79 	bl	800b674 <vPortExitCritical>

	return xReturn;
 800a982:	69fb      	ldr	r3, [r7, #28]
}
 800a984:	4618      	mov	r0, r3
 800a986:	3720      	adds	r7, #32
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}
 800a98c:	20000fb4 	.word	0x20000fb4
 800a990:	20000fc8 	.word	0x20000fc8

0800a994 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a994:	b480      	push	{r7}
 800a996:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a998:	4b03      	ldr	r3, [pc, #12]	; (800a9a8 <vTaskMissedYield+0x14>)
 800a99a:	2201      	movs	r2, #1
 800a99c:	601a      	str	r2, [r3, #0]
}
 800a99e:	bf00      	nop
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a6:	4770      	bx	lr
 800a9a8:	20000fc4 	.word	0x20000fc4

0800a9ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b082      	sub	sp, #8
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a9b4:	f000 f852 	bl	800aa5c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a9b8:	4b06      	ldr	r3, [pc, #24]	; (800a9d4 <prvIdleTask+0x28>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	2b01      	cmp	r3, #1
 800a9be:	d9f9      	bls.n	800a9b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a9c0:	4b05      	ldr	r3, [pc, #20]	; (800a9d8 <prvIdleTask+0x2c>)
 800a9c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9c6:	601a      	str	r2, [r3, #0]
 800a9c8:	f3bf 8f4f 	dsb	sy
 800a9cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a9d0:	e7f0      	b.n	800a9b4 <prvIdleTask+0x8>
 800a9d2:	bf00      	nop
 800a9d4:	20000ae0 	.word	0x20000ae0
 800a9d8:	e000ed04 	.word	0xe000ed04

0800a9dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b082      	sub	sp, #8
 800a9e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	607b      	str	r3, [r7, #4]
 800a9e6:	e00c      	b.n	800aa02 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a9e8:	687a      	ldr	r2, [r7, #4]
 800a9ea:	4613      	mov	r3, r2
 800a9ec:	009b      	lsls	r3, r3, #2
 800a9ee:	4413      	add	r3, r2
 800a9f0:	009b      	lsls	r3, r3, #2
 800a9f2:	4a12      	ldr	r2, [pc, #72]	; (800aa3c <prvInitialiseTaskLists+0x60>)
 800a9f4:	4413      	add	r3, r2
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f7fe fc90 	bl	800931c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	3301      	adds	r3, #1
 800aa00:	607b      	str	r3, [r7, #4]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2b37      	cmp	r3, #55	; 0x37
 800aa06:	d9ef      	bls.n	800a9e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800aa08:	480d      	ldr	r0, [pc, #52]	; (800aa40 <prvInitialiseTaskLists+0x64>)
 800aa0a:	f7fe fc87 	bl	800931c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800aa0e:	480d      	ldr	r0, [pc, #52]	; (800aa44 <prvInitialiseTaskLists+0x68>)
 800aa10:	f7fe fc84 	bl	800931c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800aa14:	480c      	ldr	r0, [pc, #48]	; (800aa48 <prvInitialiseTaskLists+0x6c>)
 800aa16:	f7fe fc81 	bl	800931c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800aa1a:	480c      	ldr	r0, [pc, #48]	; (800aa4c <prvInitialiseTaskLists+0x70>)
 800aa1c:	f7fe fc7e 	bl	800931c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800aa20:	480b      	ldr	r0, [pc, #44]	; (800aa50 <prvInitialiseTaskLists+0x74>)
 800aa22:	f7fe fc7b 	bl	800931c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800aa26:	4b0b      	ldr	r3, [pc, #44]	; (800aa54 <prvInitialiseTaskLists+0x78>)
 800aa28:	4a05      	ldr	r2, [pc, #20]	; (800aa40 <prvInitialiseTaskLists+0x64>)
 800aa2a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800aa2c:	4b0a      	ldr	r3, [pc, #40]	; (800aa58 <prvInitialiseTaskLists+0x7c>)
 800aa2e:	4a05      	ldr	r2, [pc, #20]	; (800aa44 <prvInitialiseTaskLists+0x68>)
 800aa30:	601a      	str	r2, [r3, #0]
}
 800aa32:	bf00      	nop
 800aa34:	3708      	adds	r7, #8
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}
 800aa3a:	bf00      	nop
 800aa3c:	20000ae0 	.word	0x20000ae0
 800aa40:	20000f40 	.word	0x20000f40
 800aa44:	20000f54 	.word	0x20000f54
 800aa48:	20000f70 	.word	0x20000f70
 800aa4c:	20000f84 	.word	0x20000f84
 800aa50:	20000f9c 	.word	0x20000f9c
 800aa54:	20000f68 	.word	0x20000f68
 800aa58:	20000f6c 	.word	0x20000f6c

0800aa5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b082      	sub	sp, #8
 800aa60:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa62:	e019      	b.n	800aa98 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800aa64:	f000 fdd6 	bl	800b614 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa68:	4b10      	ldr	r3, [pc, #64]	; (800aaac <prvCheckTasksWaitingTermination+0x50>)
 800aa6a:	68db      	ldr	r3, [r3, #12]
 800aa6c:	68db      	ldr	r3, [r3, #12]
 800aa6e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	3304      	adds	r3, #4
 800aa74:	4618      	mov	r0, r3
 800aa76:	f7fe fcdb 	bl	8009430 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800aa7a:	4b0d      	ldr	r3, [pc, #52]	; (800aab0 <prvCheckTasksWaitingTermination+0x54>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	3b01      	subs	r3, #1
 800aa80:	4a0b      	ldr	r2, [pc, #44]	; (800aab0 <prvCheckTasksWaitingTermination+0x54>)
 800aa82:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800aa84:	4b0b      	ldr	r3, [pc, #44]	; (800aab4 <prvCheckTasksWaitingTermination+0x58>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	3b01      	subs	r3, #1
 800aa8a:	4a0a      	ldr	r2, [pc, #40]	; (800aab4 <prvCheckTasksWaitingTermination+0x58>)
 800aa8c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800aa8e:	f000 fdf1 	bl	800b674 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f000 f810 	bl	800aab8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa98:	4b06      	ldr	r3, [pc, #24]	; (800aab4 <prvCheckTasksWaitingTermination+0x58>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d1e1      	bne.n	800aa64 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800aaa0:	bf00      	nop
 800aaa2:	bf00      	nop
 800aaa4:	3708      	adds	r7, #8
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}
 800aaaa:	bf00      	nop
 800aaac:	20000f84 	.word	0x20000f84
 800aab0:	20000fb0 	.word	0x20000fb0
 800aab4:	20000f98 	.word	0x20000f98

0800aab8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b084      	sub	sp, #16
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	3354      	adds	r3, #84	; 0x54
 800aac4:	4618      	mov	r0, r3
 800aac6:	f001 fe55 	bl	800c774 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d108      	bne.n	800aae6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aad8:	4618      	mov	r0, r3
 800aada:	f000 ff89 	bl	800b9f0 <vPortFree>
				vPortFree( pxTCB );
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f000 ff86 	bl	800b9f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aae4:	e018      	b.n	800ab18 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800aaec:	2b01      	cmp	r3, #1
 800aaee:	d103      	bne.n	800aaf8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f000 ff7d 	bl	800b9f0 <vPortFree>
	}
 800aaf6:	e00f      	b.n	800ab18 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800aafe:	2b02      	cmp	r3, #2
 800ab00:	d00a      	beq.n	800ab18 <prvDeleteTCB+0x60>
	__asm volatile
 800ab02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab06:	f383 8811 	msr	BASEPRI, r3
 800ab0a:	f3bf 8f6f 	isb	sy
 800ab0e:	f3bf 8f4f 	dsb	sy
 800ab12:	60fb      	str	r3, [r7, #12]
}
 800ab14:	bf00      	nop
 800ab16:	e7fe      	b.n	800ab16 <prvDeleteTCB+0x5e>
	}
 800ab18:	bf00      	nop
 800ab1a:	3710      	adds	r7, #16
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}

0800ab20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ab20:	b480      	push	{r7}
 800ab22:	b083      	sub	sp, #12
 800ab24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab26:	4b0c      	ldr	r3, [pc, #48]	; (800ab58 <prvResetNextTaskUnblockTime+0x38>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d104      	bne.n	800ab3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ab30:	4b0a      	ldr	r3, [pc, #40]	; (800ab5c <prvResetNextTaskUnblockTime+0x3c>)
 800ab32:	f04f 32ff 	mov.w	r2, #4294967295
 800ab36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ab38:	e008      	b.n	800ab4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab3a:	4b07      	ldr	r3, [pc, #28]	; (800ab58 <prvResetNextTaskUnblockTime+0x38>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	68db      	ldr	r3, [r3, #12]
 800ab40:	68db      	ldr	r3, [r3, #12]
 800ab42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	685b      	ldr	r3, [r3, #4]
 800ab48:	4a04      	ldr	r2, [pc, #16]	; (800ab5c <prvResetNextTaskUnblockTime+0x3c>)
 800ab4a:	6013      	str	r3, [r2, #0]
}
 800ab4c:	bf00      	nop
 800ab4e:	370c      	adds	r7, #12
 800ab50:	46bd      	mov	sp, r7
 800ab52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab56:	4770      	bx	lr
 800ab58:	20000f68 	.word	0x20000f68
 800ab5c:	20000fd0 	.word	0x20000fd0

0800ab60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ab60:	b480      	push	{r7}
 800ab62:	b083      	sub	sp, #12
 800ab64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ab66:	4b0b      	ldr	r3, [pc, #44]	; (800ab94 <xTaskGetSchedulerState+0x34>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d102      	bne.n	800ab74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ab6e:	2301      	movs	r3, #1
 800ab70:	607b      	str	r3, [r7, #4]
 800ab72:	e008      	b.n	800ab86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab74:	4b08      	ldr	r3, [pc, #32]	; (800ab98 <xTaskGetSchedulerState+0x38>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d102      	bne.n	800ab82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ab7c:	2302      	movs	r3, #2
 800ab7e:	607b      	str	r3, [r7, #4]
 800ab80:	e001      	b.n	800ab86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ab82:	2300      	movs	r3, #0
 800ab84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ab86:	687b      	ldr	r3, [r7, #4]
	}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	370c      	adds	r7, #12
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab92:	4770      	bx	lr
 800ab94:	20000fbc 	.word	0x20000fbc
 800ab98:	20000fd8 	.word	0x20000fd8

0800ab9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b086      	sub	sp, #24
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800aba8:	2300      	movs	r3, #0
 800abaa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d056      	beq.n	800ac60 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800abb2:	4b2e      	ldr	r3, [pc, #184]	; (800ac6c <xTaskPriorityDisinherit+0xd0>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	693a      	ldr	r2, [r7, #16]
 800abb8:	429a      	cmp	r2, r3
 800abba:	d00a      	beq.n	800abd2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800abbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc0:	f383 8811 	msr	BASEPRI, r3
 800abc4:	f3bf 8f6f 	isb	sy
 800abc8:	f3bf 8f4f 	dsb	sy
 800abcc:	60fb      	str	r3, [r7, #12]
}
 800abce:	bf00      	nop
 800abd0:	e7fe      	b.n	800abd0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d10a      	bne.n	800abf0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800abda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abde:	f383 8811 	msr	BASEPRI, r3
 800abe2:	f3bf 8f6f 	isb	sy
 800abe6:	f3bf 8f4f 	dsb	sy
 800abea:	60bb      	str	r3, [r7, #8]
}
 800abec:	bf00      	nop
 800abee:	e7fe      	b.n	800abee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abf4:	1e5a      	subs	r2, r3, #1
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abfe:	693b      	ldr	r3, [r7, #16]
 800ac00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac02:	429a      	cmp	r2, r3
 800ac04:	d02c      	beq.n	800ac60 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d128      	bne.n	800ac60 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	3304      	adds	r3, #4
 800ac12:	4618      	mov	r0, r3
 800ac14:	f7fe fc0c 	bl	8009430 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ac18:	693b      	ldr	r3, [r7, #16]
 800ac1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac24:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ac2c:	693b      	ldr	r3, [r7, #16]
 800ac2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac30:	4b0f      	ldr	r3, [pc, #60]	; (800ac70 <xTaskPriorityDisinherit+0xd4>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	429a      	cmp	r2, r3
 800ac36:	d903      	bls.n	800ac40 <xTaskPriorityDisinherit+0xa4>
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac3c:	4a0c      	ldr	r2, [pc, #48]	; (800ac70 <xTaskPriorityDisinherit+0xd4>)
 800ac3e:	6013      	str	r3, [r2, #0]
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac44:	4613      	mov	r3, r2
 800ac46:	009b      	lsls	r3, r3, #2
 800ac48:	4413      	add	r3, r2
 800ac4a:	009b      	lsls	r3, r3, #2
 800ac4c:	4a09      	ldr	r2, [pc, #36]	; (800ac74 <xTaskPriorityDisinherit+0xd8>)
 800ac4e:	441a      	add	r2, r3
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	3304      	adds	r3, #4
 800ac54:	4619      	mov	r1, r3
 800ac56:	4610      	mov	r0, r2
 800ac58:	f7fe fb8d 	bl	8009376 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ac60:	697b      	ldr	r3, [r7, #20]
	}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3718      	adds	r7, #24
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}
 800ac6a:	bf00      	nop
 800ac6c:	20000adc 	.word	0x20000adc
 800ac70:	20000fb8 	.word	0x20000fb8
 800ac74:	20000ae0 	.word	0x20000ae0

0800ac78 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b084      	sub	sp, #16
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
 800ac80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ac82:	4b21      	ldr	r3, [pc, #132]	; (800ad08 <prvAddCurrentTaskToDelayedList+0x90>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac88:	4b20      	ldr	r3, [pc, #128]	; (800ad0c <prvAddCurrentTaskToDelayedList+0x94>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	3304      	adds	r3, #4
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f7fe fbce 	bl	8009430 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac9a:	d10a      	bne.n	800acb2 <prvAddCurrentTaskToDelayedList+0x3a>
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d007      	beq.n	800acb2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aca2:	4b1a      	ldr	r3, [pc, #104]	; (800ad0c <prvAddCurrentTaskToDelayedList+0x94>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	3304      	adds	r3, #4
 800aca8:	4619      	mov	r1, r3
 800acaa:	4819      	ldr	r0, [pc, #100]	; (800ad10 <prvAddCurrentTaskToDelayedList+0x98>)
 800acac:	f7fe fb63 	bl	8009376 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800acb0:	e026      	b.n	800ad00 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800acb2:	68fa      	ldr	r2, [r7, #12]
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	4413      	add	r3, r2
 800acb8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800acba:	4b14      	ldr	r3, [pc, #80]	; (800ad0c <prvAddCurrentTaskToDelayedList+0x94>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	68ba      	ldr	r2, [r7, #8]
 800acc0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800acc2:	68ba      	ldr	r2, [r7, #8]
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	429a      	cmp	r2, r3
 800acc8:	d209      	bcs.n	800acde <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800acca:	4b12      	ldr	r3, [pc, #72]	; (800ad14 <prvAddCurrentTaskToDelayedList+0x9c>)
 800accc:	681a      	ldr	r2, [r3, #0]
 800acce:	4b0f      	ldr	r3, [pc, #60]	; (800ad0c <prvAddCurrentTaskToDelayedList+0x94>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	3304      	adds	r3, #4
 800acd4:	4619      	mov	r1, r3
 800acd6:	4610      	mov	r0, r2
 800acd8:	f7fe fb71 	bl	80093be <vListInsert>
}
 800acdc:	e010      	b.n	800ad00 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800acde:	4b0e      	ldr	r3, [pc, #56]	; (800ad18 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ace0:	681a      	ldr	r2, [r3, #0]
 800ace2:	4b0a      	ldr	r3, [pc, #40]	; (800ad0c <prvAddCurrentTaskToDelayedList+0x94>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	3304      	adds	r3, #4
 800ace8:	4619      	mov	r1, r3
 800acea:	4610      	mov	r0, r2
 800acec:	f7fe fb67 	bl	80093be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800acf0:	4b0a      	ldr	r3, [pc, #40]	; (800ad1c <prvAddCurrentTaskToDelayedList+0xa4>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	68ba      	ldr	r2, [r7, #8]
 800acf6:	429a      	cmp	r2, r3
 800acf8:	d202      	bcs.n	800ad00 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800acfa:	4a08      	ldr	r2, [pc, #32]	; (800ad1c <prvAddCurrentTaskToDelayedList+0xa4>)
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	6013      	str	r3, [r2, #0]
}
 800ad00:	bf00      	nop
 800ad02:	3710      	adds	r7, #16
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}
 800ad08:	20000fb4 	.word	0x20000fb4
 800ad0c:	20000adc 	.word	0x20000adc
 800ad10:	20000f9c 	.word	0x20000f9c
 800ad14:	20000f6c 	.word	0x20000f6c
 800ad18:	20000f68 	.word	0x20000f68
 800ad1c:	20000fd0 	.word	0x20000fd0

0800ad20 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b08a      	sub	sp, #40	; 0x28
 800ad24:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ad26:	2300      	movs	r3, #0
 800ad28:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ad2a:	f000 fb07 	bl	800b33c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ad2e:	4b1c      	ldr	r3, [pc, #112]	; (800ada0 <xTimerCreateTimerTask+0x80>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d021      	beq.n	800ad7a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ad36:	2300      	movs	r3, #0
 800ad38:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ad3e:	1d3a      	adds	r2, r7, #4
 800ad40:	f107 0108 	add.w	r1, r7, #8
 800ad44:	f107 030c 	add.w	r3, r7, #12
 800ad48:	4618      	mov	r0, r3
 800ad4a:	f7fe facd 	bl	80092e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ad4e:	6879      	ldr	r1, [r7, #4]
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	68fa      	ldr	r2, [r7, #12]
 800ad54:	9202      	str	r2, [sp, #8]
 800ad56:	9301      	str	r3, [sp, #4]
 800ad58:	2302      	movs	r3, #2
 800ad5a:	9300      	str	r3, [sp, #0]
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	460a      	mov	r2, r1
 800ad60:	4910      	ldr	r1, [pc, #64]	; (800ada4 <xTimerCreateTimerTask+0x84>)
 800ad62:	4811      	ldr	r0, [pc, #68]	; (800ada8 <xTimerCreateTimerTask+0x88>)
 800ad64:	f7ff f8b4 	bl	8009ed0 <xTaskCreateStatic>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	4a10      	ldr	r2, [pc, #64]	; (800adac <xTimerCreateTimerTask+0x8c>)
 800ad6c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ad6e:	4b0f      	ldr	r3, [pc, #60]	; (800adac <xTimerCreateTimerTask+0x8c>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d001      	beq.n	800ad7a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ad76:	2301      	movs	r3, #1
 800ad78:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d10a      	bne.n	800ad96 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ad80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad84:	f383 8811 	msr	BASEPRI, r3
 800ad88:	f3bf 8f6f 	isb	sy
 800ad8c:	f3bf 8f4f 	dsb	sy
 800ad90:	613b      	str	r3, [r7, #16]
}
 800ad92:	bf00      	nop
 800ad94:	e7fe      	b.n	800ad94 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ad96:	697b      	ldr	r3, [r7, #20]
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	3718      	adds	r7, #24
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd80      	pop	{r7, pc}
 800ada0:	2000100c 	.word	0x2000100c
 800ada4:	0800c950 	.word	0x0800c950
 800ada8:	0800aee5 	.word	0x0800aee5
 800adac:	20001010 	.word	0x20001010

0800adb0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b08a      	sub	sp, #40	; 0x28
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	60f8      	str	r0, [r7, #12]
 800adb8:	60b9      	str	r1, [r7, #8]
 800adba:	607a      	str	r2, [r7, #4]
 800adbc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800adbe:	2300      	movs	r3, #0
 800adc0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d10a      	bne.n	800adde <xTimerGenericCommand+0x2e>
	__asm volatile
 800adc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adcc:	f383 8811 	msr	BASEPRI, r3
 800add0:	f3bf 8f6f 	isb	sy
 800add4:	f3bf 8f4f 	dsb	sy
 800add8:	623b      	str	r3, [r7, #32]
}
 800adda:	bf00      	nop
 800addc:	e7fe      	b.n	800addc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800adde:	4b1a      	ldr	r3, [pc, #104]	; (800ae48 <xTimerGenericCommand+0x98>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d02a      	beq.n	800ae3c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	2b05      	cmp	r3, #5
 800adf6:	dc18      	bgt.n	800ae2a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800adf8:	f7ff feb2 	bl	800ab60 <xTaskGetSchedulerState>
 800adfc:	4603      	mov	r3, r0
 800adfe:	2b02      	cmp	r3, #2
 800ae00:	d109      	bne.n	800ae16 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ae02:	4b11      	ldr	r3, [pc, #68]	; (800ae48 <xTimerGenericCommand+0x98>)
 800ae04:	6818      	ldr	r0, [r3, #0]
 800ae06:	f107 0110 	add.w	r1, r7, #16
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae0e:	f7fe fc77 	bl	8009700 <xQueueGenericSend>
 800ae12:	6278      	str	r0, [r7, #36]	; 0x24
 800ae14:	e012      	b.n	800ae3c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ae16:	4b0c      	ldr	r3, [pc, #48]	; (800ae48 <xTimerGenericCommand+0x98>)
 800ae18:	6818      	ldr	r0, [r3, #0]
 800ae1a:	f107 0110 	add.w	r1, r7, #16
 800ae1e:	2300      	movs	r3, #0
 800ae20:	2200      	movs	r2, #0
 800ae22:	f7fe fc6d 	bl	8009700 <xQueueGenericSend>
 800ae26:	6278      	str	r0, [r7, #36]	; 0x24
 800ae28:	e008      	b.n	800ae3c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ae2a:	4b07      	ldr	r3, [pc, #28]	; (800ae48 <xTimerGenericCommand+0x98>)
 800ae2c:	6818      	ldr	r0, [r3, #0]
 800ae2e:	f107 0110 	add.w	r1, r7, #16
 800ae32:	2300      	movs	r3, #0
 800ae34:	683a      	ldr	r2, [r7, #0]
 800ae36:	f7fe fd61 	bl	80098fc <xQueueGenericSendFromISR>
 800ae3a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ae3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3728      	adds	r7, #40	; 0x28
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}
 800ae46:	bf00      	nop
 800ae48:	2000100c 	.word	0x2000100c

0800ae4c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b088      	sub	sp, #32
 800ae50:	af02      	add	r7, sp, #8
 800ae52:	6078      	str	r0, [r7, #4]
 800ae54:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae56:	4b22      	ldr	r3, [pc, #136]	; (800aee0 <prvProcessExpiredTimer+0x94>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	68db      	ldr	r3, [r3, #12]
 800ae5c:	68db      	ldr	r3, [r3, #12]
 800ae5e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	3304      	adds	r3, #4
 800ae64:	4618      	mov	r0, r3
 800ae66:	f7fe fae3 	bl	8009430 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae70:	f003 0304 	and.w	r3, r3, #4
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d022      	beq.n	800aebe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	699a      	ldr	r2, [r3, #24]
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	18d1      	adds	r1, r2, r3
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	683a      	ldr	r2, [r7, #0]
 800ae84:	6978      	ldr	r0, [r7, #20]
 800ae86:	f000 f8d1 	bl	800b02c <prvInsertTimerInActiveList>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d01f      	beq.n	800aed0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ae90:	2300      	movs	r3, #0
 800ae92:	9300      	str	r3, [sp, #0]
 800ae94:	2300      	movs	r3, #0
 800ae96:	687a      	ldr	r2, [r7, #4]
 800ae98:	2100      	movs	r1, #0
 800ae9a:	6978      	ldr	r0, [r7, #20]
 800ae9c:	f7ff ff88 	bl	800adb0 <xTimerGenericCommand>
 800aea0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800aea2:	693b      	ldr	r3, [r7, #16]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d113      	bne.n	800aed0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800aea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeac:	f383 8811 	msr	BASEPRI, r3
 800aeb0:	f3bf 8f6f 	isb	sy
 800aeb4:	f3bf 8f4f 	dsb	sy
 800aeb8:	60fb      	str	r3, [r7, #12]
}
 800aeba:	bf00      	nop
 800aebc:	e7fe      	b.n	800aebc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aebe:	697b      	ldr	r3, [r7, #20]
 800aec0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aec4:	f023 0301 	bic.w	r3, r3, #1
 800aec8:	b2da      	uxtb	r2, r3
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	6a1b      	ldr	r3, [r3, #32]
 800aed4:	6978      	ldr	r0, [r7, #20]
 800aed6:	4798      	blx	r3
}
 800aed8:	bf00      	nop
 800aeda:	3718      	adds	r7, #24
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}
 800aee0:	20001004 	.word	0x20001004

0800aee4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b084      	sub	sp, #16
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aeec:	f107 0308 	add.w	r3, r7, #8
 800aef0:	4618      	mov	r0, r3
 800aef2:	f000 f857 	bl	800afa4 <prvGetNextExpireTime>
 800aef6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	4619      	mov	r1, r3
 800aefc:	68f8      	ldr	r0, [r7, #12]
 800aefe:	f000 f803 	bl	800af08 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800af02:	f000 f8d5 	bl	800b0b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800af06:	e7f1      	b.n	800aeec <prvTimerTask+0x8>

0800af08 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b084      	sub	sp, #16
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800af12:	f7ff fa39 	bl	800a388 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800af16:	f107 0308 	add.w	r3, r7, #8
 800af1a:	4618      	mov	r0, r3
 800af1c:	f000 f866 	bl	800afec <prvSampleTimeNow>
 800af20:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d130      	bne.n	800af8a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d10a      	bne.n	800af44 <prvProcessTimerOrBlockTask+0x3c>
 800af2e:	687a      	ldr	r2, [r7, #4]
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	429a      	cmp	r2, r3
 800af34:	d806      	bhi.n	800af44 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800af36:	f7ff fa35 	bl	800a3a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800af3a:	68f9      	ldr	r1, [r7, #12]
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f7ff ff85 	bl	800ae4c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800af42:	e024      	b.n	800af8e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d008      	beq.n	800af5c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800af4a:	4b13      	ldr	r3, [pc, #76]	; (800af98 <prvProcessTimerOrBlockTask+0x90>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d101      	bne.n	800af58 <prvProcessTimerOrBlockTask+0x50>
 800af54:	2301      	movs	r3, #1
 800af56:	e000      	b.n	800af5a <prvProcessTimerOrBlockTask+0x52>
 800af58:	2300      	movs	r3, #0
 800af5a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800af5c:	4b0f      	ldr	r3, [pc, #60]	; (800af9c <prvProcessTimerOrBlockTask+0x94>)
 800af5e:	6818      	ldr	r0, [r3, #0]
 800af60:	687a      	ldr	r2, [r7, #4]
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	1ad3      	subs	r3, r2, r3
 800af66:	683a      	ldr	r2, [r7, #0]
 800af68:	4619      	mov	r1, r3
 800af6a:	f7fe ff7d 	bl	8009e68 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800af6e:	f7ff fa19 	bl	800a3a4 <xTaskResumeAll>
 800af72:	4603      	mov	r3, r0
 800af74:	2b00      	cmp	r3, #0
 800af76:	d10a      	bne.n	800af8e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800af78:	4b09      	ldr	r3, [pc, #36]	; (800afa0 <prvProcessTimerOrBlockTask+0x98>)
 800af7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af7e:	601a      	str	r2, [r3, #0]
 800af80:	f3bf 8f4f 	dsb	sy
 800af84:	f3bf 8f6f 	isb	sy
}
 800af88:	e001      	b.n	800af8e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800af8a:	f7ff fa0b 	bl	800a3a4 <xTaskResumeAll>
}
 800af8e:	bf00      	nop
 800af90:	3710      	adds	r7, #16
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}
 800af96:	bf00      	nop
 800af98:	20001008 	.word	0x20001008
 800af9c:	2000100c 	.word	0x2000100c
 800afa0:	e000ed04 	.word	0xe000ed04

0800afa4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800afa4:	b480      	push	{r7}
 800afa6:	b085      	sub	sp, #20
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800afac:	4b0e      	ldr	r3, [pc, #56]	; (800afe8 <prvGetNextExpireTime+0x44>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d101      	bne.n	800afba <prvGetNextExpireTime+0x16>
 800afb6:	2201      	movs	r2, #1
 800afb8:	e000      	b.n	800afbc <prvGetNextExpireTime+0x18>
 800afba:	2200      	movs	r2, #0
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d105      	bne.n	800afd4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800afc8:	4b07      	ldr	r3, [pc, #28]	; (800afe8 <prvGetNextExpireTime+0x44>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	68db      	ldr	r3, [r3, #12]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	60fb      	str	r3, [r7, #12]
 800afd2:	e001      	b.n	800afd8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800afd4:	2300      	movs	r3, #0
 800afd6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800afd8:	68fb      	ldr	r3, [r7, #12]
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3714      	adds	r7, #20
 800afde:	46bd      	mov	sp, r7
 800afe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe4:	4770      	bx	lr
 800afe6:	bf00      	nop
 800afe8:	20001004 	.word	0x20001004

0800afec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b084      	sub	sp, #16
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800aff4:	f7ff fa74 	bl	800a4e0 <xTaskGetTickCount>
 800aff8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800affa:	4b0b      	ldr	r3, [pc, #44]	; (800b028 <prvSampleTimeNow+0x3c>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	68fa      	ldr	r2, [r7, #12]
 800b000:	429a      	cmp	r2, r3
 800b002:	d205      	bcs.n	800b010 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b004:	f000 f936 	bl	800b274 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2201      	movs	r2, #1
 800b00c:	601a      	str	r2, [r3, #0]
 800b00e:	e002      	b.n	800b016 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2200      	movs	r2, #0
 800b014:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b016:	4a04      	ldr	r2, [pc, #16]	; (800b028 <prvSampleTimeNow+0x3c>)
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b01c:	68fb      	ldr	r3, [r7, #12]
}
 800b01e:	4618      	mov	r0, r3
 800b020:	3710      	adds	r7, #16
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}
 800b026:	bf00      	nop
 800b028:	20001014 	.word	0x20001014

0800b02c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b086      	sub	sp, #24
 800b030:	af00      	add	r7, sp, #0
 800b032:	60f8      	str	r0, [r7, #12]
 800b034:	60b9      	str	r1, [r7, #8]
 800b036:	607a      	str	r2, [r7, #4]
 800b038:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b03a:	2300      	movs	r3, #0
 800b03c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	68ba      	ldr	r2, [r7, #8]
 800b042:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	68fa      	ldr	r2, [r7, #12]
 800b048:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b04a:	68ba      	ldr	r2, [r7, #8]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	429a      	cmp	r2, r3
 800b050:	d812      	bhi.n	800b078 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b052:	687a      	ldr	r2, [r7, #4]
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	1ad2      	subs	r2, r2, r3
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	699b      	ldr	r3, [r3, #24]
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d302      	bcc.n	800b066 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b060:	2301      	movs	r3, #1
 800b062:	617b      	str	r3, [r7, #20]
 800b064:	e01b      	b.n	800b09e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b066:	4b10      	ldr	r3, [pc, #64]	; (800b0a8 <prvInsertTimerInActiveList+0x7c>)
 800b068:	681a      	ldr	r2, [r3, #0]
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	3304      	adds	r3, #4
 800b06e:	4619      	mov	r1, r3
 800b070:	4610      	mov	r0, r2
 800b072:	f7fe f9a4 	bl	80093be <vListInsert>
 800b076:	e012      	b.n	800b09e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b078:	687a      	ldr	r2, [r7, #4]
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	429a      	cmp	r2, r3
 800b07e:	d206      	bcs.n	800b08e <prvInsertTimerInActiveList+0x62>
 800b080:	68ba      	ldr	r2, [r7, #8]
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	429a      	cmp	r2, r3
 800b086:	d302      	bcc.n	800b08e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b088:	2301      	movs	r3, #1
 800b08a:	617b      	str	r3, [r7, #20]
 800b08c:	e007      	b.n	800b09e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b08e:	4b07      	ldr	r3, [pc, #28]	; (800b0ac <prvInsertTimerInActiveList+0x80>)
 800b090:	681a      	ldr	r2, [r3, #0]
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	3304      	adds	r3, #4
 800b096:	4619      	mov	r1, r3
 800b098:	4610      	mov	r0, r2
 800b09a:	f7fe f990 	bl	80093be <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b09e:	697b      	ldr	r3, [r7, #20]
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	3718      	adds	r7, #24
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}
 800b0a8:	20001008 	.word	0x20001008
 800b0ac:	20001004 	.word	0x20001004

0800b0b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b08e      	sub	sp, #56	; 0x38
 800b0b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b0b6:	e0ca      	b.n	800b24e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	da18      	bge.n	800b0f0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b0be:	1d3b      	adds	r3, r7, #4
 800b0c0:	3304      	adds	r3, #4
 800b0c2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d10a      	bne.n	800b0e0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ce:	f383 8811 	msr	BASEPRI, r3
 800b0d2:	f3bf 8f6f 	isb	sy
 800b0d6:	f3bf 8f4f 	dsb	sy
 800b0da:	61fb      	str	r3, [r7, #28]
}
 800b0dc:	bf00      	nop
 800b0de:	e7fe      	b.n	800b0de <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0e6:	6850      	ldr	r0, [r2, #4]
 800b0e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0ea:	6892      	ldr	r2, [r2, #8]
 800b0ec:	4611      	mov	r1, r2
 800b0ee:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	f2c0 80aa 	blt.w	800b24c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0fe:	695b      	ldr	r3, [r3, #20]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d004      	beq.n	800b10e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b106:	3304      	adds	r3, #4
 800b108:	4618      	mov	r0, r3
 800b10a:	f7fe f991 	bl	8009430 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b10e:	463b      	mov	r3, r7
 800b110:	4618      	mov	r0, r3
 800b112:	f7ff ff6b 	bl	800afec <prvSampleTimeNow>
 800b116:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2b09      	cmp	r3, #9
 800b11c:	f200 8097 	bhi.w	800b24e <prvProcessReceivedCommands+0x19e>
 800b120:	a201      	add	r2, pc, #4	; (adr r2, 800b128 <prvProcessReceivedCommands+0x78>)
 800b122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b126:	bf00      	nop
 800b128:	0800b151 	.word	0x0800b151
 800b12c:	0800b151 	.word	0x0800b151
 800b130:	0800b151 	.word	0x0800b151
 800b134:	0800b1c5 	.word	0x0800b1c5
 800b138:	0800b1d9 	.word	0x0800b1d9
 800b13c:	0800b223 	.word	0x0800b223
 800b140:	0800b151 	.word	0x0800b151
 800b144:	0800b151 	.word	0x0800b151
 800b148:	0800b1c5 	.word	0x0800b1c5
 800b14c:	0800b1d9 	.word	0x0800b1d9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b152:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b156:	f043 0301 	orr.w	r3, r3, #1
 800b15a:	b2da      	uxtb	r2, r3
 800b15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b15e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b162:	68ba      	ldr	r2, [r7, #8]
 800b164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b166:	699b      	ldr	r3, [r3, #24]
 800b168:	18d1      	adds	r1, r2, r3
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b16e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b170:	f7ff ff5c 	bl	800b02c <prvInsertTimerInActiveList>
 800b174:	4603      	mov	r3, r0
 800b176:	2b00      	cmp	r3, #0
 800b178:	d069      	beq.n	800b24e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b17a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b17c:	6a1b      	ldr	r3, [r3, #32]
 800b17e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b180:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b184:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b188:	f003 0304 	and.w	r3, r3, #4
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d05e      	beq.n	800b24e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b190:	68ba      	ldr	r2, [r7, #8]
 800b192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b194:	699b      	ldr	r3, [r3, #24]
 800b196:	441a      	add	r2, r3
 800b198:	2300      	movs	r3, #0
 800b19a:	9300      	str	r3, [sp, #0]
 800b19c:	2300      	movs	r3, #0
 800b19e:	2100      	movs	r1, #0
 800b1a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1a2:	f7ff fe05 	bl	800adb0 <xTimerGenericCommand>
 800b1a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b1a8:	6a3b      	ldr	r3, [r7, #32]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d14f      	bne.n	800b24e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b1ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b2:	f383 8811 	msr	BASEPRI, r3
 800b1b6:	f3bf 8f6f 	isb	sy
 800b1ba:	f3bf 8f4f 	dsb	sy
 800b1be:	61bb      	str	r3, [r7, #24]
}
 800b1c0:	bf00      	nop
 800b1c2:	e7fe      	b.n	800b1c2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1ca:	f023 0301 	bic.w	r3, r3, #1
 800b1ce:	b2da      	uxtb	r2, r3
 800b1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b1d6:	e03a      	b.n	800b24e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1de:	f043 0301 	orr.w	r3, r3, #1
 800b1e2:	b2da      	uxtb	r2, r3
 800b1e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b1ea:	68ba      	ldr	r2, [r7, #8]
 800b1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ee:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f2:	699b      	ldr	r3, [r3, #24]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d10a      	bne.n	800b20e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b1f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1fc:	f383 8811 	msr	BASEPRI, r3
 800b200:	f3bf 8f6f 	isb	sy
 800b204:	f3bf 8f4f 	dsb	sy
 800b208:	617b      	str	r3, [r7, #20]
}
 800b20a:	bf00      	nop
 800b20c:	e7fe      	b.n	800b20c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b210:	699a      	ldr	r2, [r3, #24]
 800b212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b214:	18d1      	adds	r1, r2, r3
 800b216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b21a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b21c:	f7ff ff06 	bl	800b02c <prvInsertTimerInActiveList>
					break;
 800b220:	e015      	b.n	800b24e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b224:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b228:	f003 0302 	and.w	r3, r3, #2
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d103      	bne.n	800b238 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b230:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b232:	f000 fbdd 	bl	800b9f0 <vPortFree>
 800b236:	e00a      	b.n	800b24e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b23a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b23e:	f023 0301 	bic.w	r3, r3, #1
 800b242:	b2da      	uxtb	r2, r3
 800b244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b246:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b24a:	e000      	b.n	800b24e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b24c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b24e:	4b08      	ldr	r3, [pc, #32]	; (800b270 <prvProcessReceivedCommands+0x1c0>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	1d39      	adds	r1, r7, #4
 800b254:	2200      	movs	r2, #0
 800b256:	4618      	mov	r0, r3
 800b258:	f7fe fbec 	bl	8009a34 <xQueueReceive>
 800b25c:	4603      	mov	r3, r0
 800b25e:	2b00      	cmp	r3, #0
 800b260:	f47f af2a 	bne.w	800b0b8 <prvProcessReceivedCommands+0x8>
	}
}
 800b264:	bf00      	nop
 800b266:	bf00      	nop
 800b268:	3730      	adds	r7, #48	; 0x30
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}
 800b26e:	bf00      	nop
 800b270:	2000100c 	.word	0x2000100c

0800b274 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b088      	sub	sp, #32
 800b278:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b27a:	e048      	b.n	800b30e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b27c:	4b2d      	ldr	r3, [pc, #180]	; (800b334 <prvSwitchTimerLists+0xc0>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	68db      	ldr	r3, [r3, #12]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b286:	4b2b      	ldr	r3, [pc, #172]	; (800b334 <prvSwitchTimerLists+0xc0>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	68db      	ldr	r3, [r3, #12]
 800b28c:	68db      	ldr	r3, [r3, #12]
 800b28e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	3304      	adds	r3, #4
 800b294:	4618      	mov	r0, r3
 800b296:	f7fe f8cb 	bl	8009430 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	6a1b      	ldr	r3, [r3, #32]
 800b29e:	68f8      	ldr	r0, [r7, #12]
 800b2a0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2a8:	f003 0304 	and.w	r3, r3, #4
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d02e      	beq.n	800b30e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	699b      	ldr	r3, [r3, #24]
 800b2b4:	693a      	ldr	r2, [r7, #16]
 800b2b6:	4413      	add	r3, r2
 800b2b8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b2ba:	68ba      	ldr	r2, [r7, #8]
 800b2bc:	693b      	ldr	r3, [r7, #16]
 800b2be:	429a      	cmp	r2, r3
 800b2c0:	d90e      	bls.n	800b2e0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	68ba      	ldr	r2, [r7, #8]
 800b2c6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	68fa      	ldr	r2, [r7, #12]
 800b2cc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b2ce:	4b19      	ldr	r3, [pc, #100]	; (800b334 <prvSwitchTimerLists+0xc0>)
 800b2d0:	681a      	ldr	r2, [r3, #0]
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	3304      	adds	r3, #4
 800b2d6:	4619      	mov	r1, r3
 800b2d8:	4610      	mov	r0, r2
 800b2da:	f7fe f870 	bl	80093be <vListInsert>
 800b2de:	e016      	b.n	800b30e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	9300      	str	r3, [sp, #0]
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	693a      	ldr	r2, [r7, #16]
 800b2e8:	2100      	movs	r1, #0
 800b2ea:	68f8      	ldr	r0, [r7, #12]
 800b2ec:	f7ff fd60 	bl	800adb0 <xTimerGenericCommand>
 800b2f0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d10a      	bne.n	800b30e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b2f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2fc:	f383 8811 	msr	BASEPRI, r3
 800b300:	f3bf 8f6f 	isb	sy
 800b304:	f3bf 8f4f 	dsb	sy
 800b308:	603b      	str	r3, [r7, #0]
}
 800b30a:	bf00      	nop
 800b30c:	e7fe      	b.n	800b30c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b30e:	4b09      	ldr	r3, [pc, #36]	; (800b334 <prvSwitchTimerLists+0xc0>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d1b1      	bne.n	800b27c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b318:	4b06      	ldr	r3, [pc, #24]	; (800b334 <prvSwitchTimerLists+0xc0>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b31e:	4b06      	ldr	r3, [pc, #24]	; (800b338 <prvSwitchTimerLists+0xc4>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	4a04      	ldr	r2, [pc, #16]	; (800b334 <prvSwitchTimerLists+0xc0>)
 800b324:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b326:	4a04      	ldr	r2, [pc, #16]	; (800b338 <prvSwitchTimerLists+0xc4>)
 800b328:	697b      	ldr	r3, [r7, #20]
 800b32a:	6013      	str	r3, [r2, #0]
}
 800b32c:	bf00      	nop
 800b32e:	3718      	adds	r7, #24
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}
 800b334:	20001004 	.word	0x20001004
 800b338:	20001008 	.word	0x20001008

0800b33c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b082      	sub	sp, #8
 800b340:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b342:	f000 f967 	bl	800b614 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b346:	4b15      	ldr	r3, [pc, #84]	; (800b39c <prvCheckForValidListAndQueue+0x60>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d120      	bne.n	800b390 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b34e:	4814      	ldr	r0, [pc, #80]	; (800b3a0 <prvCheckForValidListAndQueue+0x64>)
 800b350:	f7fd ffe4 	bl	800931c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b354:	4813      	ldr	r0, [pc, #76]	; (800b3a4 <prvCheckForValidListAndQueue+0x68>)
 800b356:	f7fd ffe1 	bl	800931c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b35a:	4b13      	ldr	r3, [pc, #76]	; (800b3a8 <prvCheckForValidListAndQueue+0x6c>)
 800b35c:	4a10      	ldr	r2, [pc, #64]	; (800b3a0 <prvCheckForValidListAndQueue+0x64>)
 800b35e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b360:	4b12      	ldr	r3, [pc, #72]	; (800b3ac <prvCheckForValidListAndQueue+0x70>)
 800b362:	4a10      	ldr	r2, [pc, #64]	; (800b3a4 <prvCheckForValidListAndQueue+0x68>)
 800b364:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b366:	2300      	movs	r3, #0
 800b368:	9300      	str	r3, [sp, #0]
 800b36a:	4b11      	ldr	r3, [pc, #68]	; (800b3b0 <prvCheckForValidListAndQueue+0x74>)
 800b36c:	4a11      	ldr	r2, [pc, #68]	; (800b3b4 <prvCheckForValidListAndQueue+0x78>)
 800b36e:	2110      	movs	r1, #16
 800b370:	200a      	movs	r0, #10
 800b372:	f7fe f8ef 	bl	8009554 <xQueueGenericCreateStatic>
 800b376:	4603      	mov	r3, r0
 800b378:	4a08      	ldr	r2, [pc, #32]	; (800b39c <prvCheckForValidListAndQueue+0x60>)
 800b37a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b37c:	4b07      	ldr	r3, [pc, #28]	; (800b39c <prvCheckForValidListAndQueue+0x60>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d005      	beq.n	800b390 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b384:	4b05      	ldr	r3, [pc, #20]	; (800b39c <prvCheckForValidListAndQueue+0x60>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	490b      	ldr	r1, [pc, #44]	; (800b3b8 <prvCheckForValidListAndQueue+0x7c>)
 800b38a:	4618      	mov	r0, r3
 800b38c:	f7fe fd42 	bl	8009e14 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b390:	f000 f970 	bl	800b674 <vPortExitCritical>
}
 800b394:	bf00      	nop
 800b396:	46bd      	mov	sp, r7
 800b398:	bd80      	pop	{r7, pc}
 800b39a:	bf00      	nop
 800b39c:	2000100c 	.word	0x2000100c
 800b3a0:	20000fdc 	.word	0x20000fdc
 800b3a4:	20000ff0 	.word	0x20000ff0
 800b3a8:	20001004 	.word	0x20001004
 800b3ac:	20001008 	.word	0x20001008
 800b3b0:	200010b8 	.word	0x200010b8
 800b3b4:	20001018 	.word	0x20001018
 800b3b8:	0800c958 	.word	0x0800c958

0800b3bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b085      	sub	sp, #20
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	60f8      	str	r0, [r7, #12]
 800b3c4:	60b9      	str	r1, [r7, #8]
 800b3c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	3b04      	subs	r3, #4
 800b3cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b3d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	3b04      	subs	r3, #4
 800b3da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	f023 0201 	bic.w	r2, r3, #1
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	3b04      	subs	r3, #4
 800b3ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b3ec:	4a0c      	ldr	r2, [pc, #48]	; (800b420 <pxPortInitialiseStack+0x64>)
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	3b14      	subs	r3, #20
 800b3f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b3f8:	687a      	ldr	r2, [r7, #4]
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	3b04      	subs	r3, #4
 800b402:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	f06f 0202 	mvn.w	r2, #2
 800b40a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	3b20      	subs	r3, #32
 800b410:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b412:	68fb      	ldr	r3, [r7, #12]
}
 800b414:	4618      	mov	r0, r3
 800b416:	3714      	adds	r7, #20
 800b418:	46bd      	mov	sp, r7
 800b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41e:	4770      	bx	lr
 800b420:	0800b425 	.word	0x0800b425

0800b424 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b424:	b480      	push	{r7}
 800b426:	b085      	sub	sp, #20
 800b428:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b42a:	2300      	movs	r3, #0
 800b42c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b42e:	4b12      	ldr	r3, [pc, #72]	; (800b478 <prvTaskExitError+0x54>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b436:	d00a      	beq.n	800b44e <prvTaskExitError+0x2a>
	__asm volatile
 800b438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b43c:	f383 8811 	msr	BASEPRI, r3
 800b440:	f3bf 8f6f 	isb	sy
 800b444:	f3bf 8f4f 	dsb	sy
 800b448:	60fb      	str	r3, [r7, #12]
}
 800b44a:	bf00      	nop
 800b44c:	e7fe      	b.n	800b44c <prvTaskExitError+0x28>
	__asm volatile
 800b44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b452:	f383 8811 	msr	BASEPRI, r3
 800b456:	f3bf 8f6f 	isb	sy
 800b45a:	f3bf 8f4f 	dsb	sy
 800b45e:	60bb      	str	r3, [r7, #8]
}
 800b460:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b462:	bf00      	nop
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d0fc      	beq.n	800b464 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b46a:	bf00      	nop
 800b46c:	bf00      	nop
 800b46e:	3714      	adds	r7, #20
 800b470:	46bd      	mov	sp, r7
 800b472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b476:	4770      	bx	lr
 800b478:	20000098 	.word	0x20000098
 800b47c:	00000000 	.word	0x00000000

0800b480 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b480:	4b07      	ldr	r3, [pc, #28]	; (800b4a0 <pxCurrentTCBConst2>)
 800b482:	6819      	ldr	r1, [r3, #0]
 800b484:	6808      	ldr	r0, [r1, #0]
 800b486:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b48a:	f380 8809 	msr	PSP, r0
 800b48e:	f3bf 8f6f 	isb	sy
 800b492:	f04f 0000 	mov.w	r0, #0
 800b496:	f380 8811 	msr	BASEPRI, r0
 800b49a:	4770      	bx	lr
 800b49c:	f3af 8000 	nop.w

0800b4a0 <pxCurrentTCBConst2>:
 800b4a0:	20000adc 	.word	0x20000adc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b4a4:	bf00      	nop
 800b4a6:	bf00      	nop

0800b4a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b4a8:	4808      	ldr	r0, [pc, #32]	; (800b4cc <prvPortStartFirstTask+0x24>)
 800b4aa:	6800      	ldr	r0, [r0, #0]
 800b4ac:	6800      	ldr	r0, [r0, #0]
 800b4ae:	f380 8808 	msr	MSP, r0
 800b4b2:	f04f 0000 	mov.w	r0, #0
 800b4b6:	f380 8814 	msr	CONTROL, r0
 800b4ba:	b662      	cpsie	i
 800b4bc:	b661      	cpsie	f
 800b4be:	f3bf 8f4f 	dsb	sy
 800b4c2:	f3bf 8f6f 	isb	sy
 800b4c6:	df00      	svc	0
 800b4c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b4ca:	bf00      	nop
 800b4cc:	e000ed08 	.word	0xe000ed08

0800b4d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b086      	sub	sp, #24
 800b4d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b4d6:	4b46      	ldr	r3, [pc, #280]	; (800b5f0 <xPortStartScheduler+0x120>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	4a46      	ldr	r2, [pc, #280]	; (800b5f4 <xPortStartScheduler+0x124>)
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	d10a      	bne.n	800b4f6 <xPortStartScheduler+0x26>
	__asm volatile
 800b4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e4:	f383 8811 	msr	BASEPRI, r3
 800b4e8:	f3bf 8f6f 	isb	sy
 800b4ec:	f3bf 8f4f 	dsb	sy
 800b4f0:	613b      	str	r3, [r7, #16]
}
 800b4f2:	bf00      	nop
 800b4f4:	e7fe      	b.n	800b4f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b4f6:	4b3e      	ldr	r3, [pc, #248]	; (800b5f0 <xPortStartScheduler+0x120>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	4a3f      	ldr	r2, [pc, #252]	; (800b5f8 <xPortStartScheduler+0x128>)
 800b4fc:	4293      	cmp	r3, r2
 800b4fe:	d10a      	bne.n	800b516 <xPortStartScheduler+0x46>
	__asm volatile
 800b500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b504:	f383 8811 	msr	BASEPRI, r3
 800b508:	f3bf 8f6f 	isb	sy
 800b50c:	f3bf 8f4f 	dsb	sy
 800b510:	60fb      	str	r3, [r7, #12]
}
 800b512:	bf00      	nop
 800b514:	e7fe      	b.n	800b514 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b516:	4b39      	ldr	r3, [pc, #228]	; (800b5fc <xPortStartScheduler+0x12c>)
 800b518:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b51a:	697b      	ldr	r3, [r7, #20]
 800b51c:	781b      	ldrb	r3, [r3, #0]
 800b51e:	b2db      	uxtb	r3, r3
 800b520:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	22ff      	movs	r2, #255	; 0xff
 800b526:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b528:	697b      	ldr	r3, [r7, #20]
 800b52a:	781b      	ldrb	r3, [r3, #0]
 800b52c:	b2db      	uxtb	r3, r3
 800b52e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b530:	78fb      	ldrb	r3, [r7, #3]
 800b532:	b2db      	uxtb	r3, r3
 800b534:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b538:	b2da      	uxtb	r2, r3
 800b53a:	4b31      	ldr	r3, [pc, #196]	; (800b600 <xPortStartScheduler+0x130>)
 800b53c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b53e:	4b31      	ldr	r3, [pc, #196]	; (800b604 <xPortStartScheduler+0x134>)
 800b540:	2207      	movs	r2, #7
 800b542:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b544:	e009      	b.n	800b55a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b546:	4b2f      	ldr	r3, [pc, #188]	; (800b604 <xPortStartScheduler+0x134>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	3b01      	subs	r3, #1
 800b54c:	4a2d      	ldr	r2, [pc, #180]	; (800b604 <xPortStartScheduler+0x134>)
 800b54e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b550:	78fb      	ldrb	r3, [r7, #3]
 800b552:	b2db      	uxtb	r3, r3
 800b554:	005b      	lsls	r3, r3, #1
 800b556:	b2db      	uxtb	r3, r3
 800b558:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b55a:	78fb      	ldrb	r3, [r7, #3]
 800b55c:	b2db      	uxtb	r3, r3
 800b55e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b562:	2b80      	cmp	r3, #128	; 0x80
 800b564:	d0ef      	beq.n	800b546 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b566:	4b27      	ldr	r3, [pc, #156]	; (800b604 <xPortStartScheduler+0x134>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f1c3 0307 	rsb	r3, r3, #7
 800b56e:	2b04      	cmp	r3, #4
 800b570:	d00a      	beq.n	800b588 <xPortStartScheduler+0xb8>
	__asm volatile
 800b572:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b576:	f383 8811 	msr	BASEPRI, r3
 800b57a:	f3bf 8f6f 	isb	sy
 800b57e:	f3bf 8f4f 	dsb	sy
 800b582:	60bb      	str	r3, [r7, #8]
}
 800b584:	bf00      	nop
 800b586:	e7fe      	b.n	800b586 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b588:	4b1e      	ldr	r3, [pc, #120]	; (800b604 <xPortStartScheduler+0x134>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	021b      	lsls	r3, r3, #8
 800b58e:	4a1d      	ldr	r2, [pc, #116]	; (800b604 <xPortStartScheduler+0x134>)
 800b590:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b592:	4b1c      	ldr	r3, [pc, #112]	; (800b604 <xPortStartScheduler+0x134>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b59a:	4a1a      	ldr	r2, [pc, #104]	; (800b604 <xPortStartScheduler+0x134>)
 800b59c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	b2da      	uxtb	r2, r3
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b5a6:	4b18      	ldr	r3, [pc, #96]	; (800b608 <xPortStartScheduler+0x138>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	4a17      	ldr	r2, [pc, #92]	; (800b608 <xPortStartScheduler+0x138>)
 800b5ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b5b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b5b2:	4b15      	ldr	r3, [pc, #84]	; (800b608 <xPortStartScheduler+0x138>)
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	4a14      	ldr	r2, [pc, #80]	; (800b608 <xPortStartScheduler+0x138>)
 800b5b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b5bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b5be:	f000 f8dd 	bl	800b77c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b5c2:	4b12      	ldr	r3, [pc, #72]	; (800b60c <xPortStartScheduler+0x13c>)
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b5c8:	f000 f8fc 	bl	800b7c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b5cc:	4b10      	ldr	r3, [pc, #64]	; (800b610 <xPortStartScheduler+0x140>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	4a0f      	ldr	r2, [pc, #60]	; (800b610 <xPortStartScheduler+0x140>)
 800b5d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b5d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b5d8:	f7ff ff66 	bl	800b4a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b5dc:	f7ff f84a 	bl	800a674 <vTaskSwitchContext>
	prvTaskExitError();
 800b5e0:	f7ff ff20 	bl	800b424 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b5e4:	2300      	movs	r3, #0
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	3718      	adds	r7, #24
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}
 800b5ee:	bf00      	nop
 800b5f0:	e000ed00 	.word	0xe000ed00
 800b5f4:	410fc271 	.word	0x410fc271
 800b5f8:	410fc270 	.word	0x410fc270
 800b5fc:	e000e400 	.word	0xe000e400
 800b600:	20001108 	.word	0x20001108
 800b604:	2000110c 	.word	0x2000110c
 800b608:	e000ed20 	.word	0xe000ed20
 800b60c:	20000098 	.word	0x20000098
 800b610:	e000ef34 	.word	0xe000ef34

0800b614 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b614:	b480      	push	{r7}
 800b616:	b083      	sub	sp, #12
 800b618:	af00      	add	r7, sp, #0
	__asm volatile
 800b61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b61e:	f383 8811 	msr	BASEPRI, r3
 800b622:	f3bf 8f6f 	isb	sy
 800b626:	f3bf 8f4f 	dsb	sy
 800b62a:	607b      	str	r3, [r7, #4]
}
 800b62c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b62e:	4b0f      	ldr	r3, [pc, #60]	; (800b66c <vPortEnterCritical+0x58>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	3301      	adds	r3, #1
 800b634:	4a0d      	ldr	r2, [pc, #52]	; (800b66c <vPortEnterCritical+0x58>)
 800b636:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b638:	4b0c      	ldr	r3, [pc, #48]	; (800b66c <vPortEnterCritical+0x58>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	2b01      	cmp	r3, #1
 800b63e:	d10f      	bne.n	800b660 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b640:	4b0b      	ldr	r3, [pc, #44]	; (800b670 <vPortEnterCritical+0x5c>)
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	b2db      	uxtb	r3, r3
 800b646:	2b00      	cmp	r3, #0
 800b648:	d00a      	beq.n	800b660 <vPortEnterCritical+0x4c>
	__asm volatile
 800b64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b64e:	f383 8811 	msr	BASEPRI, r3
 800b652:	f3bf 8f6f 	isb	sy
 800b656:	f3bf 8f4f 	dsb	sy
 800b65a:	603b      	str	r3, [r7, #0]
}
 800b65c:	bf00      	nop
 800b65e:	e7fe      	b.n	800b65e <vPortEnterCritical+0x4a>
	}
}
 800b660:	bf00      	nop
 800b662:	370c      	adds	r7, #12
 800b664:	46bd      	mov	sp, r7
 800b666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66a:	4770      	bx	lr
 800b66c:	20000098 	.word	0x20000098
 800b670:	e000ed04 	.word	0xe000ed04

0800b674 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b674:	b480      	push	{r7}
 800b676:	b083      	sub	sp, #12
 800b678:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b67a:	4b12      	ldr	r3, [pc, #72]	; (800b6c4 <vPortExitCritical+0x50>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d10a      	bne.n	800b698 <vPortExitCritical+0x24>
	__asm volatile
 800b682:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b686:	f383 8811 	msr	BASEPRI, r3
 800b68a:	f3bf 8f6f 	isb	sy
 800b68e:	f3bf 8f4f 	dsb	sy
 800b692:	607b      	str	r3, [r7, #4]
}
 800b694:	bf00      	nop
 800b696:	e7fe      	b.n	800b696 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b698:	4b0a      	ldr	r3, [pc, #40]	; (800b6c4 <vPortExitCritical+0x50>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	3b01      	subs	r3, #1
 800b69e:	4a09      	ldr	r2, [pc, #36]	; (800b6c4 <vPortExitCritical+0x50>)
 800b6a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b6a2:	4b08      	ldr	r3, [pc, #32]	; (800b6c4 <vPortExitCritical+0x50>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d105      	bne.n	800b6b6 <vPortExitCritical+0x42>
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	f383 8811 	msr	BASEPRI, r3
}
 800b6b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b6b6:	bf00      	nop
 800b6b8:	370c      	adds	r7, #12
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c0:	4770      	bx	lr
 800b6c2:	bf00      	nop
 800b6c4:	20000098 	.word	0x20000098
	...

0800b6d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b6d0:	f3ef 8009 	mrs	r0, PSP
 800b6d4:	f3bf 8f6f 	isb	sy
 800b6d8:	4b15      	ldr	r3, [pc, #84]	; (800b730 <pxCurrentTCBConst>)
 800b6da:	681a      	ldr	r2, [r3, #0]
 800b6dc:	f01e 0f10 	tst.w	lr, #16
 800b6e0:	bf08      	it	eq
 800b6e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b6e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6ea:	6010      	str	r0, [r2, #0]
 800b6ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b6f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b6f4:	f380 8811 	msr	BASEPRI, r0
 800b6f8:	f3bf 8f4f 	dsb	sy
 800b6fc:	f3bf 8f6f 	isb	sy
 800b700:	f7fe ffb8 	bl	800a674 <vTaskSwitchContext>
 800b704:	f04f 0000 	mov.w	r0, #0
 800b708:	f380 8811 	msr	BASEPRI, r0
 800b70c:	bc09      	pop	{r0, r3}
 800b70e:	6819      	ldr	r1, [r3, #0]
 800b710:	6808      	ldr	r0, [r1, #0]
 800b712:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b716:	f01e 0f10 	tst.w	lr, #16
 800b71a:	bf08      	it	eq
 800b71c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b720:	f380 8809 	msr	PSP, r0
 800b724:	f3bf 8f6f 	isb	sy
 800b728:	4770      	bx	lr
 800b72a:	bf00      	nop
 800b72c:	f3af 8000 	nop.w

0800b730 <pxCurrentTCBConst>:
 800b730:	20000adc 	.word	0x20000adc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b734:	bf00      	nop
 800b736:	bf00      	nop

0800b738 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b082      	sub	sp, #8
 800b73c:	af00      	add	r7, sp, #0
	__asm volatile
 800b73e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b742:	f383 8811 	msr	BASEPRI, r3
 800b746:	f3bf 8f6f 	isb	sy
 800b74a:	f3bf 8f4f 	dsb	sy
 800b74e:	607b      	str	r3, [r7, #4]
}
 800b750:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b752:	f7fe fed5 	bl	800a500 <xTaskIncrementTick>
 800b756:	4603      	mov	r3, r0
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d003      	beq.n	800b764 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b75c:	4b06      	ldr	r3, [pc, #24]	; (800b778 <xPortSysTickHandler+0x40>)
 800b75e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b762:	601a      	str	r2, [r3, #0]
 800b764:	2300      	movs	r3, #0
 800b766:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	f383 8811 	msr	BASEPRI, r3
}
 800b76e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b770:	bf00      	nop
 800b772:	3708      	adds	r7, #8
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}
 800b778:	e000ed04 	.word	0xe000ed04

0800b77c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b77c:	b480      	push	{r7}
 800b77e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b780:	4b0b      	ldr	r3, [pc, #44]	; (800b7b0 <vPortSetupTimerInterrupt+0x34>)
 800b782:	2200      	movs	r2, #0
 800b784:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b786:	4b0b      	ldr	r3, [pc, #44]	; (800b7b4 <vPortSetupTimerInterrupt+0x38>)
 800b788:	2200      	movs	r2, #0
 800b78a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b78c:	4b0a      	ldr	r3, [pc, #40]	; (800b7b8 <vPortSetupTimerInterrupt+0x3c>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	4a0a      	ldr	r2, [pc, #40]	; (800b7bc <vPortSetupTimerInterrupt+0x40>)
 800b792:	fba2 2303 	umull	r2, r3, r2, r3
 800b796:	099b      	lsrs	r3, r3, #6
 800b798:	4a09      	ldr	r2, [pc, #36]	; (800b7c0 <vPortSetupTimerInterrupt+0x44>)
 800b79a:	3b01      	subs	r3, #1
 800b79c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b79e:	4b04      	ldr	r3, [pc, #16]	; (800b7b0 <vPortSetupTimerInterrupt+0x34>)
 800b7a0:	2207      	movs	r2, #7
 800b7a2:	601a      	str	r2, [r3, #0]
}
 800b7a4:	bf00      	nop
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ac:	4770      	bx	lr
 800b7ae:	bf00      	nop
 800b7b0:	e000e010 	.word	0xe000e010
 800b7b4:	e000e018 	.word	0xe000e018
 800b7b8:	20000000 	.word	0x20000000
 800b7bc:	10624dd3 	.word	0x10624dd3
 800b7c0:	e000e014 	.word	0xe000e014

0800b7c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b7c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b7d4 <vPortEnableVFP+0x10>
 800b7c8:	6801      	ldr	r1, [r0, #0]
 800b7ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b7ce:	6001      	str	r1, [r0, #0]
 800b7d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b7d2:	bf00      	nop
 800b7d4:	e000ed88 	.word	0xe000ed88

0800b7d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b7d8:	b480      	push	{r7}
 800b7da:	b085      	sub	sp, #20
 800b7dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b7de:	f3ef 8305 	mrs	r3, IPSR
 800b7e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	2b0f      	cmp	r3, #15
 800b7e8:	d914      	bls.n	800b814 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b7ea:	4a17      	ldr	r2, [pc, #92]	; (800b848 <vPortValidateInterruptPriority+0x70>)
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	4413      	add	r3, r2
 800b7f0:	781b      	ldrb	r3, [r3, #0]
 800b7f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b7f4:	4b15      	ldr	r3, [pc, #84]	; (800b84c <vPortValidateInterruptPriority+0x74>)
 800b7f6:	781b      	ldrb	r3, [r3, #0]
 800b7f8:	7afa      	ldrb	r2, [r7, #11]
 800b7fa:	429a      	cmp	r2, r3
 800b7fc:	d20a      	bcs.n	800b814 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b802:	f383 8811 	msr	BASEPRI, r3
 800b806:	f3bf 8f6f 	isb	sy
 800b80a:	f3bf 8f4f 	dsb	sy
 800b80e:	607b      	str	r3, [r7, #4]
}
 800b810:	bf00      	nop
 800b812:	e7fe      	b.n	800b812 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b814:	4b0e      	ldr	r3, [pc, #56]	; (800b850 <vPortValidateInterruptPriority+0x78>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b81c:	4b0d      	ldr	r3, [pc, #52]	; (800b854 <vPortValidateInterruptPriority+0x7c>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	429a      	cmp	r2, r3
 800b822:	d90a      	bls.n	800b83a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b824:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b828:	f383 8811 	msr	BASEPRI, r3
 800b82c:	f3bf 8f6f 	isb	sy
 800b830:	f3bf 8f4f 	dsb	sy
 800b834:	603b      	str	r3, [r7, #0]
}
 800b836:	bf00      	nop
 800b838:	e7fe      	b.n	800b838 <vPortValidateInterruptPriority+0x60>
	}
 800b83a:	bf00      	nop
 800b83c:	3714      	adds	r7, #20
 800b83e:	46bd      	mov	sp, r7
 800b840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b844:	4770      	bx	lr
 800b846:	bf00      	nop
 800b848:	e000e3f0 	.word	0xe000e3f0
 800b84c:	20001108 	.word	0x20001108
 800b850:	e000ed0c 	.word	0xe000ed0c
 800b854:	2000110c 	.word	0x2000110c

0800b858 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b08a      	sub	sp, #40	; 0x28
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b860:	2300      	movs	r3, #0
 800b862:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b864:	f7fe fd90 	bl	800a388 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b868:	4b5b      	ldr	r3, [pc, #364]	; (800b9d8 <pvPortMalloc+0x180>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d101      	bne.n	800b874 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b870:	f000 f920 	bl	800bab4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b874:	4b59      	ldr	r3, [pc, #356]	; (800b9dc <pvPortMalloc+0x184>)
 800b876:	681a      	ldr	r2, [r3, #0]
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	4013      	ands	r3, r2
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	f040 8093 	bne.w	800b9a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d01d      	beq.n	800b8c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b888:	2208      	movs	r2, #8
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	4413      	add	r3, r2
 800b88e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f003 0307 	and.w	r3, r3, #7
 800b896:	2b00      	cmp	r3, #0
 800b898:	d014      	beq.n	800b8c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f023 0307 	bic.w	r3, r3, #7
 800b8a0:	3308      	adds	r3, #8
 800b8a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f003 0307 	and.w	r3, r3, #7
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d00a      	beq.n	800b8c4 <pvPortMalloc+0x6c>
	__asm volatile
 800b8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b2:	f383 8811 	msr	BASEPRI, r3
 800b8b6:	f3bf 8f6f 	isb	sy
 800b8ba:	f3bf 8f4f 	dsb	sy
 800b8be:	617b      	str	r3, [r7, #20]
}
 800b8c0:	bf00      	nop
 800b8c2:	e7fe      	b.n	800b8c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d06e      	beq.n	800b9a8 <pvPortMalloc+0x150>
 800b8ca:	4b45      	ldr	r3, [pc, #276]	; (800b9e0 <pvPortMalloc+0x188>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	687a      	ldr	r2, [r7, #4]
 800b8d0:	429a      	cmp	r2, r3
 800b8d2:	d869      	bhi.n	800b9a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b8d4:	4b43      	ldr	r3, [pc, #268]	; (800b9e4 <pvPortMalloc+0x18c>)
 800b8d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b8d8:	4b42      	ldr	r3, [pc, #264]	; (800b9e4 <pvPortMalloc+0x18c>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b8de:	e004      	b.n	800b8ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ec:	685b      	ldr	r3, [r3, #4]
 800b8ee:	687a      	ldr	r2, [r7, #4]
 800b8f0:	429a      	cmp	r2, r3
 800b8f2:	d903      	bls.n	800b8fc <pvPortMalloc+0xa4>
 800b8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d1f1      	bne.n	800b8e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b8fc:	4b36      	ldr	r3, [pc, #216]	; (800b9d8 <pvPortMalloc+0x180>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b902:	429a      	cmp	r2, r3
 800b904:	d050      	beq.n	800b9a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b906:	6a3b      	ldr	r3, [r7, #32]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	2208      	movs	r2, #8
 800b90c:	4413      	add	r3, r2
 800b90e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b912:	681a      	ldr	r2, [r3, #0]
 800b914:	6a3b      	ldr	r3, [r7, #32]
 800b916:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b91a:	685a      	ldr	r2, [r3, #4]
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	1ad2      	subs	r2, r2, r3
 800b920:	2308      	movs	r3, #8
 800b922:	005b      	lsls	r3, r3, #1
 800b924:	429a      	cmp	r2, r3
 800b926:	d91f      	bls.n	800b968 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	4413      	add	r3, r2
 800b92e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b930:	69bb      	ldr	r3, [r7, #24]
 800b932:	f003 0307 	and.w	r3, r3, #7
 800b936:	2b00      	cmp	r3, #0
 800b938:	d00a      	beq.n	800b950 <pvPortMalloc+0xf8>
	__asm volatile
 800b93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b93e:	f383 8811 	msr	BASEPRI, r3
 800b942:	f3bf 8f6f 	isb	sy
 800b946:	f3bf 8f4f 	dsb	sy
 800b94a:	613b      	str	r3, [r7, #16]
}
 800b94c:	bf00      	nop
 800b94e:	e7fe      	b.n	800b94e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b952:	685a      	ldr	r2, [r3, #4]
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	1ad2      	subs	r2, r2, r3
 800b958:	69bb      	ldr	r3, [r7, #24]
 800b95a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b95e:	687a      	ldr	r2, [r7, #4]
 800b960:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b962:	69b8      	ldr	r0, [r7, #24]
 800b964:	f000 f908 	bl	800bb78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b968:	4b1d      	ldr	r3, [pc, #116]	; (800b9e0 <pvPortMalloc+0x188>)
 800b96a:	681a      	ldr	r2, [r3, #0]
 800b96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b96e:	685b      	ldr	r3, [r3, #4]
 800b970:	1ad3      	subs	r3, r2, r3
 800b972:	4a1b      	ldr	r2, [pc, #108]	; (800b9e0 <pvPortMalloc+0x188>)
 800b974:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b976:	4b1a      	ldr	r3, [pc, #104]	; (800b9e0 <pvPortMalloc+0x188>)
 800b978:	681a      	ldr	r2, [r3, #0]
 800b97a:	4b1b      	ldr	r3, [pc, #108]	; (800b9e8 <pvPortMalloc+0x190>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	429a      	cmp	r2, r3
 800b980:	d203      	bcs.n	800b98a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b982:	4b17      	ldr	r3, [pc, #92]	; (800b9e0 <pvPortMalloc+0x188>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	4a18      	ldr	r2, [pc, #96]	; (800b9e8 <pvPortMalloc+0x190>)
 800b988:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b98c:	685a      	ldr	r2, [r3, #4]
 800b98e:	4b13      	ldr	r3, [pc, #76]	; (800b9dc <pvPortMalloc+0x184>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	431a      	orrs	r2, r3
 800b994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b996:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b99a:	2200      	movs	r2, #0
 800b99c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b99e:	4b13      	ldr	r3, [pc, #76]	; (800b9ec <pvPortMalloc+0x194>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	4a11      	ldr	r2, [pc, #68]	; (800b9ec <pvPortMalloc+0x194>)
 800b9a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b9a8:	f7fe fcfc 	bl	800a3a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b9ac:	69fb      	ldr	r3, [r7, #28]
 800b9ae:	f003 0307 	and.w	r3, r3, #7
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d00a      	beq.n	800b9cc <pvPortMalloc+0x174>
	__asm volatile
 800b9b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ba:	f383 8811 	msr	BASEPRI, r3
 800b9be:	f3bf 8f6f 	isb	sy
 800b9c2:	f3bf 8f4f 	dsb	sy
 800b9c6:	60fb      	str	r3, [r7, #12]
}
 800b9c8:	bf00      	nop
 800b9ca:	e7fe      	b.n	800b9ca <pvPortMalloc+0x172>
	return pvReturn;
 800b9cc:	69fb      	ldr	r3, [r7, #28]
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	3728      	adds	r7, #40	; 0x28
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bd80      	pop	{r7, pc}
 800b9d6:	bf00      	nop
 800b9d8:	20004d18 	.word	0x20004d18
 800b9dc:	20004d2c 	.word	0x20004d2c
 800b9e0:	20004d1c 	.word	0x20004d1c
 800b9e4:	20004d10 	.word	0x20004d10
 800b9e8:	20004d20 	.word	0x20004d20
 800b9ec:	20004d24 	.word	0x20004d24

0800b9f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b086      	sub	sp, #24
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d04d      	beq.n	800ba9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ba02:	2308      	movs	r3, #8
 800ba04:	425b      	negs	r3, r3
 800ba06:	697a      	ldr	r2, [r7, #20]
 800ba08:	4413      	add	r3, r2
 800ba0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ba10:	693b      	ldr	r3, [r7, #16]
 800ba12:	685a      	ldr	r2, [r3, #4]
 800ba14:	4b24      	ldr	r3, [pc, #144]	; (800baa8 <vPortFree+0xb8>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	4013      	ands	r3, r2
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d10a      	bne.n	800ba34 <vPortFree+0x44>
	__asm volatile
 800ba1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba22:	f383 8811 	msr	BASEPRI, r3
 800ba26:	f3bf 8f6f 	isb	sy
 800ba2a:	f3bf 8f4f 	dsb	sy
 800ba2e:	60fb      	str	r3, [r7, #12]
}
 800ba30:	bf00      	nop
 800ba32:	e7fe      	b.n	800ba32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ba34:	693b      	ldr	r3, [r7, #16]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d00a      	beq.n	800ba52 <vPortFree+0x62>
	__asm volatile
 800ba3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba40:	f383 8811 	msr	BASEPRI, r3
 800ba44:	f3bf 8f6f 	isb	sy
 800ba48:	f3bf 8f4f 	dsb	sy
 800ba4c:	60bb      	str	r3, [r7, #8]
}
 800ba4e:	bf00      	nop
 800ba50:	e7fe      	b.n	800ba50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ba52:	693b      	ldr	r3, [r7, #16]
 800ba54:	685a      	ldr	r2, [r3, #4]
 800ba56:	4b14      	ldr	r3, [pc, #80]	; (800baa8 <vPortFree+0xb8>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	4013      	ands	r3, r2
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d01e      	beq.n	800ba9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ba60:	693b      	ldr	r3, [r7, #16]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d11a      	bne.n	800ba9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	685a      	ldr	r2, [r3, #4]
 800ba6c:	4b0e      	ldr	r3, [pc, #56]	; (800baa8 <vPortFree+0xb8>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	43db      	mvns	r3, r3
 800ba72:	401a      	ands	r2, r3
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ba78:	f7fe fc86 	bl	800a388 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ba7c:	693b      	ldr	r3, [r7, #16]
 800ba7e:	685a      	ldr	r2, [r3, #4]
 800ba80:	4b0a      	ldr	r3, [pc, #40]	; (800baac <vPortFree+0xbc>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	4413      	add	r3, r2
 800ba86:	4a09      	ldr	r2, [pc, #36]	; (800baac <vPortFree+0xbc>)
 800ba88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ba8a:	6938      	ldr	r0, [r7, #16]
 800ba8c:	f000 f874 	bl	800bb78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ba90:	4b07      	ldr	r3, [pc, #28]	; (800bab0 <vPortFree+0xc0>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	3301      	adds	r3, #1
 800ba96:	4a06      	ldr	r2, [pc, #24]	; (800bab0 <vPortFree+0xc0>)
 800ba98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ba9a:	f7fe fc83 	bl	800a3a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ba9e:	bf00      	nop
 800baa0:	3718      	adds	r7, #24
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}
 800baa6:	bf00      	nop
 800baa8:	20004d2c 	.word	0x20004d2c
 800baac:	20004d1c 	.word	0x20004d1c
 800bab0:	20004d28 	.word	0x20004d28

0800bab4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bab4:	b480      	push	{r7}
 800bab6:	b085      	sub	sp, #20
 800bab8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800baba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800babe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bac0:	4b27      	ldr	r3, [pc, #156]	; (800bb60 <prvHeapInit+0xac>)
 800bac2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	f003 0307 	and.w	r3, r3, #7
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d00c      	beq.n	800bae8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	3307      	adds	r3, #7
 800bad2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	f023 0307 	bic.w	r3, r3, #7
 800bada:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800badc:	68ba      	ldr	r2, [r7, #8]
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	1ad3      	subs	r3, r2, r3
 800bae2:	4a1f      	ldr	r2, [pc, #124]	; (800bb60 <prvHeapInit+0xac>)
 800bae4:	4413      	add	r3, r2
 800bae6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800baec:	4a1d      	ldr	r2, [pc, #116]	; (800bb64 <prvHeapInit+0xb0>)
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800baf2:	4b1c      	ldr	r3, [pc, #112]	; (800bb64 <prvHeapInit+0xb0>)
 800baf4:	2200      	movs	r2, #0
 800baf6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	68ba      	ldr	r2, [r7, #8]
 800bafc:	4413      	add	r3, r2
 800bafe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bb00:	2208      	movs	r2, #8
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	1a9b      	subs	r3, r3, r2
 800bb06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	f023 0307 	bic.w	r3, r3, #7
 800bb0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	4a15      	ldr	r2, [pc, #84]	; (800bb68 <prvHeapInit+0xb4>)
 800bb14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bb16:	4b14      	ldr	r3, [pc, #80]	; (800bb68 <prvHeapInit+0xb4>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bb1e:	4b12      	ldr	r3, [pc, #72]	; (800bb68 <prvHeapInit+0xb4>)
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	2200      	movs	r2, #0
 800bb24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	68fa      	ldr	r2, [r7, #12]
 800bb2e:	1ad2      	subs	r2, r2, r3
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bb34:	4b0c      	ldr	r3, [pc, #48]	; (800bb68 <prvHeapInit+0xb4>)
 800bb36:	681a      	ldr	r2, [r3, #0]
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	685b      	ldr	r3, [r3, #4]
 800bb40:	4a0a      	ldr	r2, [pc, #40]	; (800bb6c <prvHeapInit+0xb8>)
 800bb42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	685b      	ldr	r3, [r3, #4]
 800bb48:	4a09      	ldr	r2, [pc, #36]	; (800bb70 <prvHeapInit+0xbc>)
 800bb4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bb4c:	4b09      	ldr	r3, [pc, #36]	; (800bb74 <prvHeapInit+0xc0>)
 800bb4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bb52:	601a      	str	r2, [r3, #0]
}
 800bb54:	bf00      	nop
 800bb56:	3714      	adds	r7, #20
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5e:	4770      	bx	lr
 800bb60:	20001110 	.word	0x20001110
 800bb64:	20004d10 	.word	0x20004d10
 800bb68:	20004d18 	.word	0x20004d18
 800bb6c:	20004d20 	.word	0x20004d20
 800bb70:	20004d1c 	.word	0x20004d1c
 800bb74:	20004d2c 	.word	0x20004d2c

0800bb78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bb78:	b480      	push	{r7}
 800bb7a:	b085      	sub	sp, #20
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bb80:	4b28      	ldr	r3, [pc, #160]	; (800bc24 <prvInsertBlockIntoFreeList+0xac>)
 800bb82:	60fb      	str	r3, [r7, #12]
 800bb84:	e002      	b.n	800bb8c <prvInsertBlockIntoFreeList+0x14>
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	60fb      	str	r3, [r7, #12]
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	687a      	ldr	r2, [r7, #4]
 800bb92:	429a      	cmp	r2, r3
 800bb94:	d8f7      	bhi.n	800bb86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	685b      	ldr	r3, [r3, #4]
 800bb9e:	68ba      	ldr	r2, [r7, #8]
 800bba0:	4413      	add	r3, r2
 800bba2:	687a      	ldr	r2, [r7, #4]
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d108      	bne.n	800bbba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	685a      	ldr	r2, [r3, #4]
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	685b      	ldr	r3, [r3, #4]
 800bbb0:	441a      	add	r2, r3
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	685b      	ldr	r3, [r3, #4]
 800bbc2:	68ba      	ldr	r2, [r7, #8]
 800bbc4:	441a      	add	r2, r3
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	429a      	cmp	r2, r3
 800bbcc:	d118      	bne.n	800bc00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	681a      	ldr	r2, [r3, #0]
 800bbd2:	4b15      	ldr	r3, [pc, #84]	; (800bc28 <prvInsertBlockIntoFreeList+0xb0>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d00d      	beq.n	800bbf6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	685a      	ldr	r2, [r3, #4]
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	685b      	ldr	r3, [r3, #4]
 800bbe4:	441a      	add	r2, r3
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	681a      	ldr	r2, [r3, #0]
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	601a      	str	r2, [r3, #0]
 800bbf4:	e008      	b.n	800bc08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bbf6:	4b0c      	ldr	r3, [pc, #48]	; (800bc28 <prvInsertBlockIntoFreeList+0xb0>)
 800bbf8:	681a      	ldr	r2, [r3, #0]
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	601a      	str	r2, [r3, #0]
 800bbfe:	e003      	b.n	800bc08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	681a      	ldr	r2, [r3, #0]
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bc08:	68fa      	ldr	r2, [r7, #12]
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	429a      	cmp	r2, r3
 800bc0e:	d002      	beq.n	800bc16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	687a      	ldr	r2, [r7, #4]
 800bc14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bc16:	bf00      	nop
 800bc18:	3714      	adds	r7, #20
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc20:	4770      	bx	lr
 800bc22:	bf00      	nop
 800bc24:	20004d10 	.word	0x20004d10
 800bc28:	20004d18 	.word	0x20004d18

0800bc2c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bc30:	2200      	movs	r2, #0
 800bc32:	4912      	ldr	r1, [pc, #72]	; (800bc7c <MX_USB_DEVICE_Init+0x50>)
 800bc34:	4812      	ldr	r0, [pc, #72]	; (800bc80 <MX_USB_DEVICE_Init+0x54>)
 800bc36:	f7fb ff0f 	bl	8007a58 <USBD_Init>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d001      	beq.n	800bc44 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bc40:	f7f5 f871 	bl	8000d26 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bc44:	490f      	ldr	r1, [pc, #60]	; (800bc84 <MX_USB_DEVICE_Init+0x58>)
 800bc46:	480e      	ldr	r0, [pc, #56]	; (800bc80 <MX_USB_DEVICE_Init+0x54>)
 800bc48:	f7fb ff36 	bl	8007ab8 <USBD_RegisterClass>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d001      	beq.n	800bc56 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bc52:	f7f5 f868 	bl	8000d26 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bc56:	490c      	ldr	r1, [pc, #48]	; (800bc88 <MX_USB_DEVICE_Init+0x5c>)
 800bc58:	4809      	ldr	r0, [pc, #36]	; (800bc80 <MX_USB_DEVICE_Init+0x54>)
 800bc5a:	f7fb fe27 	bl	80078ac <USBD_CDC_RegisterInterface>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d001      	beq.n	800bc68 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bc64:	f7f5 f85f 	bl	8000d26 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bc68:	4805      	ldr	r0, [pc, #20]	; (800bc80 <MX_USB_DEVICE_Init+0x54>)
 800bc6a:	f7fb ff5b 	bl	8007b24 <USBD_Start>
 800bc6e:	4603      	mov	r3, r0
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d001      	beq.n	800bc78 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bc74:	f7f5 f857 	bl	8000d26 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bc78:	bf00      	nop
 800bc7a:	bd80      	pop	{r7, pc}
 800bc7c:	200000b0 	.word	0x200000b0
 800bc80:	20004d30 	.word	0x20004d30
 800bc84:	20000018 	.word	0x20000018
 800bc88:	2000009c 	.word	0x2000009c

0800bc8c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bc90:	2200      	movs	r2, #0
 800bc92:	4905      	ldr	r1, [pc, #20]	; (800bca8 <CDC_Init_FS+0x1c>)
 800bc94:	4805      	ldr	r0, [pc, #20]	; (800bcac <CDC_Init_FS+0x20>)
 800bc96:	f7fb fe23 	bl	80078e0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bc9a:	4905      	ldr	r1, [pc, #20]	; (800bcb0 <CDC_Init_FS+0x24>)
 800bc9c:	4803      	ldr	r0, [pc, #12]	; (800bcac <CDC_Init_FS+0x20>)
 800bc9e:	f7fb fe41 	bl	8007924 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bca2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	bd80      	pop	{r7, pc}
 800bca8:	20005890 	.word	0x20005890
 800bcac:	20004d30 	.word	0x20004d30
 800bcb0:	20005090 	.word	0x20005090

0800bcb4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bcb8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc2:	4770      	bx	lr

0800bcc4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b083      	sub	sp, #12
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	4603      	mov	r3, r0
 800bccc:	6039      	str	r1, [r7, #0]
 800bcce:	71fb      	strb	r3, [r7, #7]
 800bcd0:	4613      	mov	r3, r2
 800bcd2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bcd4:	79fb      	ldrb	r3, [r7, #7]
 800bcd6:	2b23      	cmp	r3, #35	; 0x23
 800bcd8:	d84a      	bhi.n	800bd70 <CDC_Control_FS+0xac>
 800bcda:	a201      	add	r2, pc, #4	; (adr r2, 800bce0 <CDC_Control_FS+0x1c>)
 800bcdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bce0:	0800bd71 	.word	0x0800bd71
 800bce4:	0800bd71 	.word	0x0800bd71
 800bce8:	0800bd71 	.word	0x0800bd71
 800bcec:	0800bd71 	.word	0x0800bd71
 800bcf0:	0800bd71 	.word	0x0800bd71
 800bcf4:	0800bd71 	.word	0x0800bd71
 800bcf8:	0800bd71 	.word	0x0800bd71
 800bcfc:	0800bd71 	.word	0x0800bd71
 800bd00:	0800bd71 	.word	0x0800bd71
 800bd04:	0800bd71 	.word	0x0800bd71
 800bd08:	0800bd71 	.word	0x0800bd71
 800bd0c:	0800bd71 	.word	0x0800bd71
 800bd10:	0800bd71 	.word	0x0800bd71
 800bd14:	0800bd71 	.word	0x0800bd71
 800bd18:	0800bd71 	.word	0x0800bd71
 800bd1c:	0800bd71 	.word	0x0800bd71
 800bd20:	0800bd71 	.word	0x0800bd71
 800bd24:	0800bd71 	.word	0x0800bd71
 800bd28:	0800bd71 	.word	0x0800bd71
 800bd2c:	0800bd71 	.word	0x0800bd71
 800bd30:	0800bd71 	.word	0x0800bd71
 800bd34:	0800bd71 	.word	0x0800bd71
 800bd38:	0800bd71 	.word	0x0800bd71
 800bd3c:	0800bd71 	.word	0x0800bd71
 800bd40:	0800bd71 	.word	0x0800bd71
 800bd44:	0800bd71 	.word	0x0800bd71
 800bd48:	0800bd71 	.word	0x0800bd71
 800bd4c:	0800bd71 	.word	0x0800bd71
 800bd50:	0800bd71 	.word	0x0800bd71
 800bd54:	0800bd71 	.word	0x0800bd71
 800bd58:	0800bd71 	.word	0x0800bd71
 800bd5c:	0800bd71 	.word	0x0800bd71
 800bd60:	0800bd71 	.word	0x0800bd71
 800bd64:	0800bd71 	.word	0x0800bd71
 800bd68:	0800bd71 	.word	0x0800bd71
 800bd6c:	0800bd71 	.word	0x0800bd71
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bd70:	bf00      	nop
  }

  return (USBD_OK);
 800bd72:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	370c      	adds	r7, #12
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7e:	4770      	bx	lr

0800bd80 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b084      	sub	sp, #16
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
 800bd88:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bd8a:	6879      	ldr	r1, [r7, #4]
 800bd8c:	4821      	ldr	r0, [pc, #132]	; (800be14 <CDC_Receive_FS+0x94>)
 800bd8e:	f7fb fdc9 	bl	8007924 <USBD_CDC_SetRxBuffer>
	  //START CODE FOR LED ON/OFF LOGIC
	  for (uint32_t i = 0; i < *Len; ++i) {
 800bd92:	2300      	movs	r3, #0
 800bd94:	60fb      	str	r3, [r7, #12]
 800bd96:	e02f      	b.n	800bdf8 <CDC_Receive_FS+0x78>
	      // Konec ukaza (npr. nova vrstica ali povratni znak)
	      if (Buf[i] == '\n' || Buf[i] == '\r') {
 800bd98:	687a      	ldr	r2, [r7, #4]
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	4413      	add	r3, r2
 800bd9e:	781b      	ldrb	r3, [r3, #0]
 800bda0:	2b0a      	cmp	r3, #10
 800bda2:	d005      	beq.n	800bdb0 <CDC_Receive_FS+0x30>
 800bda4:	687a      	ldr	r2, [r7, #4]
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	4413      	add	r3, r2
 800bdaa:	781b      	ldrb	r3, [r3, #0]
 800bdac:	2b0d      	cmp	r3, #13
 800bdae:	d10e      	bne.n	800bdce <CDC_Receive_FS+0x4e>
	        buffer[bufferIndex++] = '\0'; // Zaključimo niz ukaza z ničelnim znakom
 800bdb0:	4b19      	ldr	r3, [pc, #100]	; (800be18 <CDC_Receive_FS+0x98>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	1c5a      	adds	r2, r3, #1
 800bdb6:	4918      	ldr	r1, [pc, #96]	; (800be18 <CDC_Receive_FS+0x98>)
 800bdb8:	600a      	str	r2, [r1, #0]
 800bdba:	4a18      	ldr	r2, [pc, #96]	; (800be1c <CDC_Receive_FS+0x9c>)
 800bdbc:	2100      	movs	r1, #0
 800bdbe:	54d1      	strb	r1, [r2, r3]
	        Opravilo_LED(buffer);       // Obdelamo prejeti ukaz
 800bdc0:	4816      	ldr	r0, [pc, #88]	; (800be1c <CDC_Receive_FS+0x9c>)
 800bdc2:	f7f4 fea1 	bl	8000b08 <Opravilo_LED>
	        bufferIndex = 0;              // Ponastavimo indeks za naslednji ukaz
 800bdc6:	4b14      	ldr	r3, [pc, #80]	; (800be18 <CDC_Receive_FS+0x98>)
 800bdc8:	2200      	movs	r2, #0
 800bdca:	601a      	str	r2, [r3, #0]
	        continue;
 800bdcc:	e011      	b.n	800bdf2 <CDC_Receive_FS+0x72>
	      }

	      // Preprečimo prelivanje medpomnilnika
	      if (bufferIndex >= BUFFER_SIZE - 1) {
 800bdce:	4b12      	ldr	r3, [pc, #72]	; (800be18 <CDC_Receive_FS+0x98>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	2b7e      	cmp	r3, #126	; 0x7e
 800bdd4:	d902      	bls.n	800bddc <CDC_Receive_FS+0x5c>
	        bufferIndex = 0;  // Ponastavimo, če se preseže velikost medpomnilnika
 800bdd6:	4b10      	ldr	r3, [pc, #64]	; (800be18 <CDC_Receive_FS+0x98>)
 800bdd8:	2200      	movs	r2, #0
 800bdda:	601a      	str	r2, [r3, #0]
	      }

	      buffer[bufferIndex++] = Buf[i]; // Dodamo znak v medpomnilnik
 800bddc:	687a      	ldr	r2, [r7, #4]
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	441a      	add	r2, r3
 800bde2:	4b0d      	ldr	r3, [pc, #52]	; (800be18 <CDC_Receive_FS+0x98>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	1c59      	adds	r1, r3, #1
 800bde8:	480b      	ldr	r0, [pc, #44]	; (800be18 <CDC_Receive_FS+0x98>)
 800bdea:	6001      	str	r1, [r0, #0]
 800bdec:	7811      	ldrb	r1, [r2, #0]
 800bdee:	4a0b      	ldr	r2, [pc, #44]	; (800be1c <CDC_Receive_FS+0x9c>)
 800bdf0:	54d1      	strb	r1, [r2, r3]
	  for (uint32_t i = 0; i < *Len; ++i) {
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	3301      	adds	r3, #1
 800bdf6:	60fb      	str	r3, [r7, #12]
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	68fa      	ldr	r2, [r7, #12]
 800bdfe:	429a      	cmp	r2, r3
 800be00:	d3ca      	bcc.n	800bd98 <CDC_Receive_FS+0x18>
	    }
	  //END CODE FOR LED
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800be02:	4804      	ldr	r0, [pc, #16]	; (800be14 <CDC_Receive_FS+0x94>)
 800be04:	f7fb fdf2 	bl	80079ec <USBD_CDC_ReceivePacket>
	  return (USBD_OK);
 800be08:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3710      	adds	r7, #16
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}
 800be12:	bf00      	nop
 800be14:	20004d30 	.word	0x20004d30
 800be18:	2000508c 	.word	0x2000508c
 800be1c:	2000500c 	.word	0x2000500c

0800be20 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b084      	sub	sp, #16
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
 800be28:	460b      	mov	r3, r1
 800be2a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800be2c:	2300      	movs	r3, #0
 800be2e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800be30:	4b0d      	ldr	r3, [pc, #52]	; (800be68 <CDC_Transmit_FS+0x48>)
 800be32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be36:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d001      	beq.n	800be46 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800be42:	2301      	movs	r3, #1
 800be44:	e00b      	b.n	800be5e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800be46:	887b      	ldrh	r3, [r7, #2]
 800be48:	461a      	mov	r2, r3
 800be4a:	6879      	ldr	r1, [r7, #4]
 800be4c:	4806      	ldr	r0, [pc, #24]	; (800be68 <CDC_Transmit_FS+0x48>)
 800be4e:	f7fb fd47 	bl	80078e0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800be52:	4805      	ldr	r0, [pc, #20]	; (800be68 <CDC_Transmit_FS+0x48>)
 800be54:	f7fb fd84 	bl	8007960 <USBD_CDC_TransmitPacket>
 800be58:	4603      	mov	r3, r0
 800be5a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800be5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800be5e:	4618      	mov	r0, r3
 800be60:	3710      	adds	r7, #16
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}
 800be66:	bf00      	nop
 800be68:	20004d30 	.word	0x20004d30

0800be6c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800be6c:	b480      	push	{r7}
 800be6e:	b087      	sub	sp, #28
 800be70:	af00      	add	r7, sp, #0
 800be72:	60f8      	str	r0, [r7, #12]
 800be74:	60b9      	str	r1, [r7, #8]
 800be76:	4613      	mov	r3, r2
 800be78:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800be7a:	2300      	movs	r3, #0
 800be7c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800be7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800be82:	4618      	mov	r0, r3
 800be84:	371c      	adds	r7, #28
 800be86:	46bd      	mov	sp, r7
 800be88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8c:	4770      	bx	lr
	...

0800be90 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be90:	b480      	push	{r7}
 800be92:	b083      	sub	sp, #12
 800be94:	af00      	add	r7, sp, #0
 800be96:	4603      	mov	r3, r0
 800be98:	6039      	str	r1, [r7, #0]
 800be9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	2212      	movs	r2, #18
 800bea0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bea2:	4b03      	ldr	r3, [pc, #12]	; (800beb0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bea4:	4618      	mov	r0, r3
 800bea6:	370c      	adds	r7, #12
 800bea8:	46bd      	mov	sp, r7
 800beaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beae:	4770      	bx	lr
 800beb0:	200000cc 	.word	0x200000cc

0800beb4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800beb4:	b480      	push	{r7}
 800beb6:	b083      	sub	sp, #12
 800beb8:	af00      	add	r7, sp, #0
 800beba:	4603      	mov	r3, r0
 800bebc:	6039      	str	r1, [r7, #0]
 800bebe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	2204      	movs	r2, #4
 800bec4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bec6:	4b03      	ldr	r3, [pc, #12]	; (800bed4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bec8:	4618      	mov	r0, r3
 800beca:	370c      	adds	r7, #12
 800becc:	46bd      	mov	sp, r7
 800bece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed2:	4770      	bx	lr
 800bed4:	200000e0 	.word	0x200000e0

0800bed8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b082      	sub	sp, #8
 800bedc:	af00      	add	r7, sp, #0
 800bede:	4603      	mov	r3, r0
 800bee0:	6039      	str	r1, [r7, #0]
 800bee2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bee4:	79fb      	ldrb	r3, [r7, #7]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d105      	bne.n	800bef6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800beea:	683a      	ldr	r2, [r7, #0]
 800beec:	4907      	ldr	r1, [pc, #28]	; (800bf0c <USBD_FS_ProductStrDescriptor+0x34>)
 800beee:	4808      	ldr	r0, [pc, #32]	; (800bf10 <USBD_FS_ProductStrDescriptor+0x38>)
 800bef0:	f7fc ffc4 	bl	8008e7c <USBD_GetString>
 800bef4:	e004      	b.n	800bf00 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bef6:	683a      	ldr	r2, [r7, #0]
 800bef8:	4904      	ldr	r1, [pc, #16]	; (800bf0c <USBD_FS_ProductStrDescriptor+0x34>)
 800befa:	4805      	ldr	r0, [pc, #20]	; (800bf10 <USBD_FS_ProductStrDescriptor+0x38>)
 800befc:	f7fc ffbe 	bl	8008e7c <USBD_GetString>
  }
  return USBD_StrDesc;
 800bf00:	4b02      	ldr	r3, [pc, #8]	; (800bf0c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bf02:	4618      	mov	r0, r3
 800bf04:	3708      	adds	r7, #8
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}
 800bf0a:	bf00      	nop
 800bf0c:	20006090 	.word	0x20006090
 800bf10:	0800c960 	.word	0x0800c960

0800bf14 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b082      	sub	sp, #8
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	6039      	str	r1, [r7, #0]
 800bf1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bf20:	683a      	ldr	r2, [r7, #0]
 800bf22:	4904      	ldr	r1, [pc, #16]	; (800bf34 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bf24:	4804      	ldr	r0, [pc, #16]	; (800bf38 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bf26:	f7fc ffa9 	bl	8008e7c <USBD_GetString>
  return USBD_StrDesc;
 800bf2a:	4b02      	ldr	r3, [pc, #8]	; (800bf34 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	3708      	adds	r7, #8
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}
 800bf34:	20006090 	.word	0x20006090
 800bf38:	0800c978 	.word	0x0800c978

0800bf3c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b082      	sub	sp, #8
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	4603      	mov	r3, r0
 800bf44:	6039      	str	r1, [r7, #0]
 800bf46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	221a      	movs	r2, #26
 800bf4c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bf4e:	f000 f843 	bl	800bfd8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bf52:	4b02      	ldr	r3, [pc, #8]	; (800bf5c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	3708      	adds	r7, #8
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bd80      	pop	{r7, pc}
 800bf5c:	200000e4 	.word	0x200000e4

0800bf60 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b082      	sub	sp, #8
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	4603      	mov	r3, r0
 800bf68:	6039      	str	r1, [r7, #0]
 800bf6a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bf6c:	79fb      	ldrb	r3, [r7, #7]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d105      	bne.n	800bf7e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bf72:	683a      	ldr	r2, [r7, #0]
 800bf74:	4907      	ldr	r1, [pc, #28]	; (800bf94 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bf76:	4808      	ldr	r0, [pc, #32]	; (800bf98 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bf78:	f7fc ff80 	bl	8008e7c <USBD_GetString>
 800bf7c:	e004      	b.n	800bf88 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bf7e:	683a      	ldr	r2, [r7, #0]
 800bf80:	4904      	ldr	r1, [pc, #16]	; (800bf94 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bf82:	4805      	ldr	r0, [pc, #20]	; (800bf98 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bf84:	f7fc ff7a 	bl	8008e7c <USBD_GetString>
  }
  return USBD_StrDesc;
 800bf88:	4b02      	ldr	r3, [pc, #8]	; (800bf94 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	3708      	adds	r7, #8
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	bd80      	pop	{r7, pc}
 800bf92:	bf00      	nop
 800bf94:	20006090 	.word	0x20006090
 800bf98:	0800c98c 	.word	0x0800c98c

0800bf9c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b082      	sub	sp, #8
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	4603      	mov	r3, r0
 800bfa4:	6039      	str	r1, [r7, #0]
 800bfa6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bfa8:	79fb      	ldrb	r3, [r7, #7]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d105      	bne.n	800bfba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bfae:	683a      	ldr	r2, [r7, #0]
 800bfb0:	4907      	ldr	r1, [pc, #28]	; (800bfd0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bfb2:	4808      	ldr	r0, [pc, #32]	; (800bfd4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bfb4:	f7fc ff62 	bl	8008e7c <USBD_GetString>
 800bfb8:	e004      	b.n	800bfc4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bfba:	683a      	ldr	r2, [r7, #0]
 800bfbc:	4904      	ldr	r1, [pc, #16]	; (800bfd0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bfbe:	4805      	ldr	r0, [pc, #20]	; (800bfd4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bfc0:	f7fc ff5c 	bl	8008e7c <USBD_GetString>
  }
  return USBD_StrDesc;
 800bfc4:	4b02      	ldr	r3, [pc, #8]	; (800bfd0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	3708      	adds	r7, #8
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}
 800bfce:	bf00      	nop
 800bfd0:	20006090 	.word	0x20006090
 800bfd4:	0800c998 	.word	0x0800c998

0800bfd8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b084      	sub	sp, #16
 800bfdc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bfde:	4b0f      	ldr	r3, [pc, #60]	; (800c01c <Get_SerialNum+0x44>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bfe4:	4b0e      	ldr	r3, [pc, #56]	; (800c020 <Get_SerialNum+0x48>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bfea:	4b0e      	ldr	r3, [pc, #56]	; (800c024 <Get_SerialNum+0x4c>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bff0:	68fa      	ldr	r2, [r7, #12]
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	4413      	add	r3, r2
 800bff6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d009      	beq.n	800c012 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bffe:	2208      	movs	r2, #8
 800c000:	4909      	ldr	r1, [pc, #36]	; (800c028 <Get_SerialNum+0x50>)
 800c002:	68f8      	ldr	r0, [r7, #12]
 800c004:	f000 f814 	bl	800c030 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c008:	2204      	movs	r2, #4
 800c00a:	4908      	ldr	r1, [pc, #32]	; (800c02c <Get_SerialNum+0x54>)
 800c00c:	68b8      	ldr	r0, [r7, #8]
 800c00e:	f000 f80f 	bl	800c030 <IntToUnicode>
  }
}
 800c012:	bf00      	nop
 800c014:	3710      	adds	r7, #16
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}
 800c01a:	bf00      	nop
 800c01c:	1fff7a10 	.word	0x1fff7a10
 800c020:	1fff7a14 	.word	0x1fff7a14
 800c024:	1fff7a18 	.word	0x1fff7a18
 800c028:	200000e6 	.word	0x200000e6
 800c02c:	200000f6 	.word	0x200000f6

0800c030 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c030:	b480      	push	{r7}
 800c032:	b087      	sub	sp, #28
 800c034:	af00      	add	r7, sp, #0
 800c036:	60f8      	str	r0, [r7, #12]
 800c038:	60b9      	str	r1, [r7, #8]
 800c03a:	4613      	mov	r3, r2
 800c03c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c03e:	2300      	movs	r3, #0
 800c040:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c042:	2300      	movs	r3, #0
 800c044:	75fb      	strb	r3, [r7, #23]
 800c046:	e027      	b.n	800c098 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	0f1b      	lsrs	r3, r3, #28
 800c04c:	2b09      	cmp	r3, #9
 800c04e:	d80b      	bhi.n	800c068 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	0f1b      	lsrs	r3, r3, #28
 800c054:	b2da      	uxtb	r2, r3
 800c056:	7dfb      	ldrb	r3, [r7, #23]
 800c058:	005b      	lsls	r3, r3, #1
 800c05a:	4619      	mov	r1, r3
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	440b      	add	r3, r1
 800c060:	3230      	adds	r2, #48	; 0x30
 800c062:	b2d2      	uxtb	r2, r2
 800c064:	701a      	strb	r2, [r3, #0]
 800c066:	e00a      	b.n	800c07e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	0f1b      	lsrs	r3, r3, #28
 800c06c:	b2da      	uxtb	r2, r3
 800c06e:	7dfb      	ldrb	r3, [r7, #23]
 800c070:	005b      	lsls	r3, r3, #1
 800c072:	4619      	mov	r1, r3
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	440b      	add	r3, r1
 800c078:	3237      	adds	r2, #55	; 0x37
 800c07a:	b2d2      	uxtb	r2, r2
 800c07c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	011b      	lsls	r3, r3, #4
 800c082:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c084:	7dfb      	ldrb	r3, [r7, #23]
 800c086:	005b      	lsls	r3, r3, #1
 800c088:	3301      	adds	r3, #1
 800c08a:	68ba      	ldr	r2, [r7, #8]
 800c08c:	4413      	add	r3, r2
 800c08e:	2200      	movs	r2, #0
 800c090:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c092:	7dfb      	ldrb	r3, [r7, #23]
 800c094:	3301      	adds	r3, #1
 800c096:	75fb      	strb	r3, [r7, #23]
 800c098:	7dfa      	ldrb	r2, [r7, #23]
 800c09a:	79fb      	ldrb	r3, [r7, #7]
 800c09c:	429a      	cmp	r2, r3
 800c09e:	d3d3      	bcc.n	800c048 <IntToUnicode+0x18>
  }
}
 800c0a0:	bf00      	nop
 800c0a2:	bf00      	nop
 800c0a4:	371c      	adds	r7, #28
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ac:	4770      	bx	lr
	...

0800c0b0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b08a      	sub	sp, #40	; 0x28
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c0b8:	f107 0314 	add.w	r3, r7, #20
 800c0bc:	2200      	movs	r2, #0
 800c0be:	601a      	str	r2, [r3, #0]
 800c0c0:	605a      	str	r2, [r3, #4]
 800c0c2:	609a      	str	r2, [r3, #8]
 800c0c4:	60da      	str	r2, [r3, #12]
 800c0c6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c0d0:	d147      	bne.n	800c162 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	613b      	str	r3, [r7, #16]
 800c0d6:	4b25      	ldr	r3, [pc, #148]	; (800c16c <HAL_PCD_MspInit+0xbc>)
 800c0d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0da:	4a24      	ldr	r2, [pc, #144]	; (800c16c <HAL_PCD_MspInit+0xbc>)
 800c0dc:	f043 0301 	orr.w	r3, r3, #1
 800c0e0:	6313      	str	r3, [r2, #48]	; 0x30
 800c0e2:	4b22      	ldr	r3, [pc, #136]	; (800c16c <HAL_PCD_MspInit+0xbc>)
 800c0e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0e6:	f003 0301 	and.w	r3, r3, #1
 800c0ea:	613b      	str	r3, [r7, #16]
 800c0ec:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800c0ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c0f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800c0fc:	f107 0314 	add.w	r3, r7, #20
 800c100:	4619      	mov	r1, r3
 800c102:	481b      	ldr	r0, [pc, #108]	; (800c170 <HAL_PCD_MspInit+0xc0>)
 800c104:	f7f5 f9c8 	bl	8001498 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800c108:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800c10c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c10e:	2302      	movs	r3, #2
 800c110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c112:	2300      	movs	r3, #0
 800c114:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c116:	2303      	movs	r3, #3
 800c118:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c11a:	230a      	movs	r3, #10
 800c11c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c11e:	f107 0314 	add.w	r3, r7, #20
 800c122:	4619      	mov	r1, r3
 800c124:	4812      	ldr	r0, [pc, #72]	; (800c170 <HAL_PCD_MspInit+0xc0>)
 800c126:	f7f5 f9b7 	bl	8001498 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c12a:	4b10      	ldr	r3, [pc, #64]	; (800c16c <HAL_PCD_MspInit+0xbc>)
 800c12c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c12e:	4a0f      	ldr	r2, [pc, #60]	; (800c16c <HAL_PCD_MspInit+0xbc>)
 800c130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c134:	6353      	str	r3, [r2, #52]	; 0x34
 800c136:	2300      	movs	r3, #0
 800c138:	60fb      	str	r3, [r7, #12]
 800c13a:	4b0c      	ldr	r3, [pc, #48]	; (800c16c <HAL_PCD_MspInit+0xbc>)
 800c13c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c13e:	4a0b      	ldr	r2, [pc, #44]	; (800c16c <HAL_PCD_MspInit+0xbc>)
 800c140:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c144:	6453      	str	r3, [r2, #68]	; 0x44
 800c146:	4b09      	ldr	r3, [pc, #36]	; (800c16c <HAL_PCD_MspInit+0xbc>)
 800c148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c14a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c14e:	60fb      	str	r3, [r7, #12]
 800c150:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800c152:	2200      	movs	r2, #0
 800c154:	2105      	movs	r1, #5
 800c156:	2043      	movs	r0, #67	; 0x43
 800c158:	f7f5 f974 	bl	8001444 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c15c:	2043      	movs	r0, #67	; 0x43
 800c15e:	f7f5 f98d 	bl	800147c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c162:	bf00      	nop
 800c164:	3728      	adds	r7, #40	; 0x28
 800c166:	46bd      	mov	sp, r7
 800c168:	bd80      	pop	{r7, pc}
 800c16a:	bf00      	nop
 800c16c:	40023800 	.word	0x40023800
 800c170:	40020000 	.word	0x40020000

0800c174 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b082      	sub	sp, #8
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c188:	4619      	mov	r1, r3
 800c18a:	4610      	mov	r0, r2
 800c18c:	f7fb fd17 	bl	8007bbe <USBD_LL_SetupStage>
}
 800c190:	bf00      	nop
 800c192:	3708      	adds	r7, #8
 800c194:	46bd      	mov	sp, r7
 800c196:	bd80      	pop	{r7, pc}

0800c198 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b082      	sub	sp, #8
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
 800c1a0:	460b      	mov	r3, r1
 800c1a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c1aa:	78fa      	ldrb	r2, [r7, #3]
 800c1ac:	6879      	ldr	r1, [r7, #4]
 800c1ae:	4613      	mov	r3, r2
 800c1b0:	00db      	lsls	r3, r3, #3
 800c1b2:	4413      	add	r3, r2
 800c1b4:	009b      	lsls	r3, r3, #2
 800c1b6:	440b      	add	r3, r1
 800c1b8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800c1bc:	681a      	ldr	r2, [r3, #0]
 800c1be:	78fb      	ldrb	r3, [r7, #3]
 800c1c0:	4619      	mov	r1, r3
 800c1c2:	f7fb fd51 	bl	8007c68 <USBD_LL_DataOutStage>
}
 800c1c6:	bf00      	nop
 800c1c8:	3708      	adds	r7, #8
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}

0800c1ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1ce:	b580      	push	{r7, lr}
 800c1d0:	b082      	sub	sp, #8
 800c1d2:	af00      	add	r7, sp, #0
 800c1d4:	6078      	str	r0, [r7, #4]
 800c1d6:	460b      	mov	r3, r1
 800c1d8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c1e0:	78fa      	ldrb	r2, [r7, #3]
 800c1e2:	6879      	ldr	r1, [r7, #4]
 800c1e4:	4613      	mov	r3, r2
 800c1e6:	00db      	lsls	r3, r3, #3
 800c1e8:	4413      	add	r3, r2
 800c1ea:	009b      	lsls	r3, r3, #2
 800c1ec:	440b      	add	r3, r1
 800c1ee:	334c      	adds	r3, #76	; 0x4c
 800c1f0:	681a      	ldr	r2, [r3, #0]
 800c1f2:	78fb      	ldrb	r3, [r7, #3]
 800c1f4:	4619      	mov	r1, r3
 800c1f6:	f7fb fdea 	bl	8007dce <USBD_LL_DataInStage>
}
 800c1fa:	bf00      	nop
 800c1fc:	3708      	adds	r7, #8
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}

0800c202 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c202:	b580      	push	{r7, lr}
 800c204:	b082      	sub	sp, #8
 800c206:	af00      	add	r7, sp, #0
 800c208:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c210:	4618      	mov	r0, r3
 800c212:	f7fb ff1e 	bl	8008052 <USBD_LL_SOF>
}
 800c216:	bf00      	nop
 800c218:	3708      	adds	r7, #8
 800c21a:	46bd      	mov	sp, r7
 800c21c:	bd80      	pop	{r7, pc}

0800c21e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c21e:	b580      	push	{r7, lr}
 800c220:	b084      	sub	sp, #16
 800c222:	af00      	add	r7, sp, #0
 800c224:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c226:	2301      	movs	r3, #1
 800c228:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	68db      	ldr	r3, [r3, #12]
 800c22e:	2b02      	cmp	r3, #2
 800c230:	d001      	beq.n	800c236 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c232:	f7f4 fd78 	bl	8000d26 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c23c:	7bfa      	ldrb	r2, [r7, #15]
 800c23e:	4611      	mov	r1, r2
 800c240:	4618      	mov	r0, r3
 800c242:	f7fb fec8 	bl	8007fd6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c24c:	4618      	mov	r0, r3
 800c24e:	f7fb fe70 	bl	8007f32 <USBD_LL_Reset>
}
 800c252:	bf00      	nop
 800c254:	3710      	adds	r7, #16
 800c256:	46bd      	mov	sp, r7
 800c258:	bd80      	pop	{r7, pc}
	...

0800c25c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b082      	sub	sp, #8
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c26a:	4618      	mov	r0, r3
 800c26c:	f7fb fec3 	bl	8007ff6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	687a      	ldr	r2, [r7, #4]
 800c27c:	6812      	ldr	r2, [r2, #0]
 800c27e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c282:	f043 0301 	orr.w	r3, r3, #1
 800c286:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	6a1b      	ldr	r3, [r3, #32]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d005      	beq.n	800c29c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c290:	4b04      	ldr	r3, [pc, #16]	; (800c2a4 <HAL_PCD_SuspendCallback+0x48>)
 800c292:	691b      	ldr	r3, [r3, #16]
 800c294:	4a03      	ldr	r2, [pc, #12]	; (800c2a4 <HAL_PCD_SuspendCallback+0x48>)
 800c296:	f043 0306 	orr.w	r3, r3, #6
 800c29a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c29c:	bf00      	nop
 800c29e:	3708      	adds	r7, #8
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	bd80      	pop	{r7, pc}
 800c2a4:	e000ed00 	.word	0xe000ed00

0800c2a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b082      	sub	sp, #8
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	f7fb feb3 	bl	8008022 <USBD_LL_Resume>
}
 800c2bc:	bf00      	nop
 800c2be:	3708      	adds	r7, #8
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	bd80      	pop	{r7, pc}

0800c2c4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b082      	sub	sp, #8
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
 800c2cc:	460b      	mov	r3, r1
 800c2ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c2d6:	78fa      	ldrb	r2, [r7, #3]
 800c2d8:	4611      	mov	r1, r2
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f7fb ff0b 	bl	80080f6 <USBD_LL_IsoOUTIncomplete>
}
 800c2e0:	bf00      	nop
 800c2e2:	3708      	adds	r7, #8
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	bd80      	pop	{r7, pc}

0800c2e8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b082      	sub	sp, #8
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
 800c2f0:	460b      	mov	r3, r1
 800c2f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c2fa:	78fa      	ldrb	r2, [r7, #3]
 800c2fc:	4611      	mov	r1, r2
 800c2fe:	4618      	mov	r0, r3
 800c300:	f7fb fec7 	bl	8008092 <USBD_LL_IsoINIncomplete>
}
 800c304:	bf00      	nop
 800c306:	3708      	adds	r7, #8
 800c308:	46bd      	mov	sp, r7
 800c30a:	bd80      	pop	{r7, pc}

0800c30c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b082      	sub	sp, #8
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c31a:	4618      	mov	r0, r3
 800c31c:	f7fb ff1d 	bl	800815a <USBD_LL_DevConnected>
}
 800c320:	bf00      	nop
 800c322:	3708      	adds	r7, #8
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}

0800c328 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b082      	sub	sp, #8
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c336:	4618      	mov	r0, r3
 800c338:	f7fb ff1a 	bl	8008170 <USBD_LL_DevDisconnected>
}
 800c33c:	bf00      	nop
 800c33e:	3708      	adds	r7, #8
 800c340:	46bd      	mov	sp, r7
 800c342:	bd80      	pop	{r7, pc}

0800c344 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b082      	sub	sp, #8
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	781b      	ldrb	r3, [r3, #0]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d13c      	bne.n	800c3ce <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c354:	4a20      	ldr	r2, [pc, #128]	; (800c3d8 <USBD_LL_Init+0x94>)
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	4a1e      	ldr	r2, [pc, #120]	; (800c3d8 <USBD_LL_Init+0x94>)
 800c360:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c364:	4b1c      	ldr	r3, [pc, #112]	; (800c3d8 <USBD_LL_Init+0x94>)
 800c366:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c36a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c36c:	4b1a      	ldr	r3, [pc, #104]	; (800c3d8 <USBD_LL_Init+0x94>)
 800c36e:	2204      	movs	r2, #4
 800c370:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c372:	4b19      	ldr	r3, [pc, #100]	; (800c3d8 <USBD_LL_Init+0x94>)
 800c374:	2202      	movs	r2, #2
 800c376:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c378:	4b17      	ldr	r3, [pc, #92]	; (800c3d8 <USBD_LL_Init+0x94>)
 800c37a:	2200      	movs	r2, #0
 800c37c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c37e:	4b16      	ldr	r3, [pc, #88]	; (800c3d8 <USBD_LL_Init+0x94>)
 800c380:	2202      	movs	r2, #2
 800c382:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c384:	4b14      	ldr	r3, [pc, #80]	; (800c3d8 <USBD_LL_Init+0x94>)
 800c386:	2200      	movs	r2, #0
 800c388:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c38a:	4b13      	ldr	r3, [pc, #76]	; (800c3d8 <USBD_LL_Init+0x94>)
 800c38c:	2200      	movs	r2, #0
 800c38e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c390:	4b11      	ldr	r3, [pc, #68]	; (800c3d8 <USBD_LL_Init+0x94>)
 800c392:	2200      	movs	r2, #0
 800c394:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800c396:	4b10      	ldr	r3, [pc, #64]	; (800c3d8 <USBD_LL_Init+0x94>)
 800c398:	2201      	movs	r2, #1
 800c39a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c39c:	4b0e      	ldr	r3, [pc, #56]	; (800c3d8 <USBD_LL_Init+0x94>)
 800c39e:	2200      	movs	r2, #0
 800c3a0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c3a2:	480d      	ldr	r0, [pc, #52]	; (800c3d8 <USBD_LL_Init+0x94>)
 800c3a4:	f7f6 fea8 	bl	80030f8 <HAL_PCD_Init>
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d001      	beq.n	800c3b2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c3ae:	f7f4 fcba 	bl	8000d26 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c3b2:	2180      	movs	r1, #128	; 0x80
 800c3b4:	4808      	ldr	r0, [pc, #32]	; (800c3d8 <USBD_LL_Init+0x94>)
 800c3b6:	f7f8 f900 	bl	80045ba <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c3ba:	2240      	movs	r2, #64	; 0x40
 800c3bc:	2100      	movs	r1, #0
 800c3be:	4806      	ldr	r0, [pc, #24]	; (800c3d8 <USBD_LL_Init+0x94>)
 800c3c0:	f7f8 f8b4 	bl	800452c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c3c4:	2280      	movs	r2, #128	; 0x80
 800c3c6:	2101      	movs	r1, #1
 800c3c8:	4803      	ldr	r0, [pc, #12]	; (800c3d8 <USBD_LL_Init+0x94>)
 800c3ca:	f7f8 f8af 	bl	800452c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c3ce:	2300      	movs	r3, #0
}
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	3708      	adds	r7, #8
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}
 800c3d8:	20006290 	.word	0x20006290

0800c3dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b084      	sub	sp, #16
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	f7f6 ff9d 	bl	8003332 <HAL_PCD_Start>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3fc:	7bfb      	ldrb	r3, [r7, #15]
 800c3fe:	4618      	mov	r0, r3
 800c400:	f000 f942 	bl	800c688 <USBD_Get_USB_Status>
 800c404:	4603      	mov	r3, r0
 800c406:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c408:	7bbb      	ldrb	r3, [r7, #14]
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	3710      	adds	r7, #16
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}

0800c412 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c412:	b580      	push	{r7, lr}
 800c414:	b084      	sub	sp, #16
 800c416:	af00      	add	r7, sp, #0
 800c418:	6078      	str	r0, [r7, #4]
 800c41a:	4608      	mov	r0, r1
 800c41c:	4611      	mov	r1, r2
 800c41e:	461a      	mov	r2, r3
 800c420:	4603      	mov	r3, r0
 800c422:	70fb      	strb	r3, [r7, #3]
 800c424:	460b      	mov	r3, r1
 800c426:	70bb      	strb	r3, [r7, #2]
 800c428:	4613      	mov	r3, r2
 800c42a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c42c:	2300      	movs	r3, #0
 800c42e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c430:	2300      	movs	r3, #0
 800c432:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c43a:	78bb      	ldrb	r3, [r7, #2]
 800c43c:	883a      	ldrh	r2, [r7, #0]
 800c43e:	78f9      	ldrb	r1, [r7, #3]
 800c440:	f7f7 fc6e 	bl	8003d20 <HAL_PCD_EP_Open>
 800c444:	4603      	mov	r3, r0
 800c446:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c448:	7bfb      	ldrb	r3, [r7, #15]
 800c44a:	4618      	mov	r0, r3
 800c44c:	f000 f91c 	bl	800c688 <USBD_Get_USB_Status>
 800c450:	4603      	mov	r3, r0
 800c452:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c454:	7bbb      	ldrb	r3, [r7, #14]
}
 800c456:	4618      	mov	r0, r3
 800c458:	3710      	adds	r7, #16
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bd80      	pop	{r7, pc}

0800c45e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c45e:	b580      	push	{r7, lr}
 800c460:	b084      	sub	sp, #16
 800c462:	af00      	add	r7, sp, #0
 800c464:	6078      	str	r0, [r7, #4]
 800c466:	460b      	mov	r3, r1
 800c468:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c46a:	2300      	movs	r3, #0
 800c46c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c46e:	2300      	movs	r3, #0
 800c470:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c478:	78fa      	ldrb	r2, [r7, #3]
 800c47a:	4611      	mov	r1, r2
 800c47c:	4618      	mov	r0, r3
 800c47e:	f7f7 fcb7 	bl	8003df0 <HAL_PCD_EP_Close>
 800c482:	4603      	mov	r3, r0
 800c484:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c486:	7bfb      	ldrb	r3, [r7, #15]
 800c488:	4618      	mov	r0, r3
 800c48a:	f000 f8fd 	bl	800c688 <USBD_Get_USB_Status>
 800c48e:	4603      	mov	r3, r0
 800c490:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c492:	7bbb      	ldrb	r3, [r7, #14]
}
 800c494:	4618      	mov	r0, r3
 800c496:	3710      	adds	r7, #16
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}

0800c49c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b084      	sub	sp, #16
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
 800c4a4:	460b      	mov	r3, r1
 800c4a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c4b6:	78fa      	ldrb	r2, [r7, #3]
 800c4b8:	4611      	mov	r1, r2
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f7f7 fd8f 	bl	8003fde <HAL_PCD_EP_SetStall>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4c4:	7bfb      	ldrb	r3, [r7, #15]
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f000 f8de 	bl	800c688 <USBD_Get_USB_Status>
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	3710      	adds	r7, #16
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	bd80      	pop	{r7, pc}

0800c4da <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c4da:	b580      	push	{r7, lr}
 800c4dc:	b084      	sub	sp, #16
 800c4de:	af00      	add	r7, sp, #0
 800c4e0:	6078      	str	r0, [r7, #4]
 800c4e2:	460b      	mov	r3, r1
 800c4e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c4f4:	78fa      	ldrb	r2, [r7, #3]
 800c4f6:	4611      	mov	r1, r2
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	f7f7 fdd4 	bl	80040a6 <HAL_PCD_EP_ClrStall>
 800c4fe:	4603      	mov	r3, r0
 800c500:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c502:	7bfb      	ldrb	r3, [r7, #15]
 800c504:	4618      	mov	r0, r3
 800c506:	f000 f8bf 	bl	800c688 <USBD_Get_USB_Status>
 800c50a:	4603      	mov	r3, r0
 800c50c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c50e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c510:	4618      	mov	r0, r3
 800c512:	3710      	adds	r7, #16
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}

0800c518 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c518:	b480      	push	{r7}
 800c51a:	b085      	sub	sp, #20
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
 800c520:	460b      	mov	r3, r1
 800c522:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c52a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c52c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c530:	2b00      	cmp	r3, #0
 800c532:	da0b      	bge.n	800c54c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c534:	78fb      	ldrb	r3, [r7, #3]
 800c536:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c53a:	68f9      	ldr	r1, [r7, #12]
 800c53c:	4613      	mov	r3, r2
 800c53e:	00db      	lsls	r3, r3, #3
 800c540:	4413      	add	r3, r2
 800c542:	009b      	lsls	r3, r3, #2
 800c544:	440b      	add	r3, r1
 800c546:	333e      	adds	r3, #62	; 0x3e
 800c548:	781b      	ldrb	r3, [r3, #0]
 800c54a:	e00b      	b.n	800c564 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c54c:	78fb      	ldrb	r3, [r7, #3]
 800c54e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c552:	68f9      	ldr	r1, [r7, #12]
 800c554:	4613      	mov	r3, r2
 800c556:	00db      	lsls	r3, r3, #3
 800c558:	4413      	add	r3, r2
 800c55a:	009b      	lsls	r3, r3, #2
 800c55c:	440b      	add	r3, r1
 800c55e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c562:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c564:	4618      	mov	r0, r3
 800c566:	3714      	adds	r7, #20
 800c568:	46bd      	mov	sp, r7
 800c56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56e:	4770      	bx	lr

0800c570 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b084      	sub	sp, #16
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
 800c578:	460b      	mov	r3, r1
 800c57a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c57c:	2300      	movs	r3, #0
 800c57e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c580:	2300      	movs	r3, #0
 800c582:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c58a:	78fa      	ldrb	r2, [r7, #3]
 800c58c:	4611      	mov	r1, r2
 800c58e:	4618      	mov	r0, r3
 800c590:	f7f7 fba1 	bl	8003cd6 <HAL_PCD_SetAddress>
 800c594:	4603      	mov	r3, r0
 800c596:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c598:	7bfb      	ldrb	r3, [r7, #15]
 800c59a:	4618      	mov	r0, r3
 800c59c:	f000 f874 	bl	800c688 <USBD_Get_USB_Status>
 800c5a0:	4603      	mov	r3, r0
 800c5a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c5a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	3710      	adds	r7, #16
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}

0800c5ae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c5ae:	b580      	push	{r7, lr}
 800c5b0:	b086      	sub	sp, #24
 800c5b2:	af00      	add	r7, sp, #0
 800c5b4:	60f8      	str	r0, [r7, #12]
 800c5b6:	607a      	str	r2, [r7, #4]
 800c5b8:	603b      	str	r3, [r7, #0]
 800c5ba:	460b      	mov	r3, r1
 800c5bc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5be:	2300      	movs	r3, #0
 800c5c0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c5cc:	7af9      	ldrb	r1, [r7, #11]
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	687a      	ldr	r2, [r7, #4]
 800c5d2:	f7f7 fcba 	bl	8003f4a <HAL_PCD_EP_Transmit>
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c5da:	7dfb      	ldrb	r3, [r7, #23]
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f000 f853 	bl	800c688 <USBD_Get_USB_Status>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c5e6:	7dbb      	ldrb	r3, [r7, #22]
}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	3718      	adds	r7, #24
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd80      	pop	{r7, pc}

0800c5f0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b086      	sub	sp, #24
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	60f8      	str	r0, [r7, #12]
 800c5f8:	607a      	str	r2, [r7, #4]
 800c5fa:	603b      	str	r3, [r7, #0]
 800c5fc:	460b      	mov	r3, r1
 800c5fe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c600:	2300      	movs	r3, #0
 800c602:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c604:	2300      	movs	r3, #0
 800c606:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c60e:	7af9      	ldrb	r1, [r7, #11]
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	687a      	ldr	r2, [r7, #4]
 800c614:	f7f7 fc36 	bl	8003e84 <HAL_PCD_EP_Receive>
 800c618:	4603      	mov	r3, r0
 800c61a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c61c:	7dfb      	ldrb	r3, [r7, #23]
 800c61e:	4618      	mov	r0, r3
 800c620:	f000 f832 	bl	800c688 <USBD_Get_USB_Status>
 800c624:	4603      	mov	r3, r0
 800c626:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c628:	7dbb      	ldrb	r3, [r7, #22]
}
 800c62a:	4618      	mov	r0, r3
 800c62c:	3718      	adds	r7, #24
 800c62e:	46bd      	mov	sp, r7
 800c630:	bd80      	pop	{r7, pc}

0800c632 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c632:	b580      	push	{r7, lr}
 800c634:	b082      	sub	sp, #8
 800c636:	af00      	add	r7, sp, #0
 800c638:	6078      	str	r0, [r7, #4]
 800c63a:	460b      	mov	r3, r1
 800c63c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c644:	78fa      	ldrb	r2, [r7, #3]
 800c646:	4611      	mov	r1, r2
 800c648:	4618      	mov	r0, r3
 800c64a:	f7f7 fc66 	bl	8003f1a <HAL_PCD_EP_GetRxCount>
 800c64e:	4603      	mov	r3, r0
}
 800c650:	4618      	mov	r0, r3
 800c652:	3708      	adds	r7, #8
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}

0800c658 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c658:	b480      	push	{r7}
 800c65a:	b083      	sub	sp, #12
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c660:	4b03      	ldr	r3, [pc, #12]	; (800c670 <USBD_static_malloc+0x18>)
}
 800c662:	4618      	mov	r0, r3
 800c664:	370c      	adds	r7, #12
 800c666:	46bd      	mov	sp, r7
 800c668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66c:	4770      	bx	lr
 800c66e:	bf00      	nop
 800c670:	2000679c 	.word	0x2000679c

0800c674 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c674:	b480      	push	{r7}
 800c676:	b083      	sub	sp, #12
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]

}
 800c67c:	bf00      	nop
 800c67e:	370c      	adds	r7, #12
 800c680:	46bd      	mov	sp, r7
 800c682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c686:	4770      	bx	lr

0800c688 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c688:	b480      	push	{r7}
 800c68a:	b085      	sub	sp, #20
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	4603      	mov	r3, r0
 800c690:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c692:	2300      	movs	r3, #0
 800c694:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c696:	79fb      	ldrb	r3, [r7, #7]
 800c698:	2b03      	cmp	r3, #3
 800c69a:	d817      	bhi.n	800c6cc <USBD_Get_USB_Status+0x44>
 800c69c:	a201      	add	r2, pc, #4	; (adr r2, 800c6a4 <USBD_Get_USB_Status+0x1c>)
 800c69e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6a2:	bf00      	nop
 800c6a4:	0800c6b5 	.word	0x0800c6b5
 800c6a8:	0800c6bb 	.word	0x0800c6bb
 800c6ac:	0800c6c1 	.word	0x0800c6c1
 800c6b0:	0800c6c7 	.word	0x0800c6c7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	73fb      	strb	r3, [r7, #15]
    break;
 800c6b8:	e00b      	b.n	800c6d2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c6ba:	2303      	movs	r3, #3
 800c6bc:	73fb      	strb	r3, [r7, #15]
    break;
 800c6be:	e008      	b.n	800c6d2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	73fb      	strb	r3, [r7, #15]
    break;
 800c6c4:	e005      	b.n	800c6d2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c6c6:	2303      	movs	r3, #3
 800c6c8:	73fb      	strb	r3, [r7, #15]
    break;
 800c6ca:	e002      	b.n	800c6d2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c6cc:	2303      	movs	r3, #3
 800c6ce:	73fb      	strb	r3, [r7, #15]
    break;
 800c6d0:	bf00      	nop
  }
  return usb_status;
 800c6d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	3714      	adds	r7, #20
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6de:	4770      	bx	lr

0800c6e0 <__libc_init_array>:
 800c6e0:	b570      	push	{r4, r5, r6, lr}
 800c6e2:	4d0d      	ldr	r5, [pc, #52]	; (800c718 <__libc_init_array+0x38>)
 800c6e4:	4c0d      	ldr	r4, [pc, #52]	; (800c71c <__libc_init_array+0x3c>)
 800c6e6:	1b64      	subs	r4, r4, r5
 800c6e8:	10a4      	asrs	r4, r4, #2
 800c6ea:	2600      	movs	r6, #0
 800c6ec:	42a6      	cmp	r6, r4
 800c6ee:	d109      	bne.n	800c704 <__libc_init_array+0x24>
 800c6f0:	4d0b      	ldr	r5, [pc, #44]	; (800c720 <__libc_init_array+0x40>)
 800c6f2:	4c0c      	ldr	r4, [pc, #48]	; (800c724 <__libc_init_array+0x44>)
 800c6f4:	f000 f8f2 	bl	800c8dc <_init>
 800c6f8:	1b64      	subs	r4, r4, r5
 800c6fa:	10a4      	asrs	r4, r4, #2
 800c6fc:	2600      	movs	r6, #0
 800c6fe:	42a6      	cmp	r6, r4
 800c700:	d105      	bne.n	800c70e <__libc_init_array+0x2e>
 800c702:	bd70      	pop	{r4, r5, r6, pc}
 800c704:	f855 3b04 	ldr.w	r3, [r5], #4
 800c708:	4798      	blx	r3
 800c70a:	3601      	adds	r6, #1
 800c70c:	e7ee      	b.n	800c6ec <__libc_init_array+0xc>
 800c70e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c712:	4798      	blx	r3
 800c714:	3601      	adds	r6, #1
 800c716:	e7f2      	b.n	800c6fe <__libc_init_array+0x1e>
 800c718:	0800ca4c 	.word	0x0800ca4c
 800c71c:	0800ca4c 	.word	0x0800ca4c
 800c720:	0800ca4c 	.word	0x0800ca4c
 800c724:	0800ca50 	.word	0x0800ca50

0800c728 <__retarget_lock_acquire_recursive>:
 800c728:	4770      	bx	lr

0800c72a <__retarget_lock_release_recursive>:
 800c72a:	4770      	bx	lr

0800c72c <memcpy>:
 800c72c:	440a      	add	r2, r1
 800c72e:	4291      	cmp	r1, r2
 800c730:	f100 33ff 	add.w	r3, r0, #4294967295
 800c734:	d100      	bne.n	800c738 <memcpy+0xc>
 800c736:	4770      	bx	lr
 800c738:	b510      	push	{r4, lr}
 800c73a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c73e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c742:	4291      	cmp	r1, r2
 800c744:	d1f9      	bne.n	800c73a <memcpy+0xe>
 800c746:	bd10      	pop	{r4, pc}

0800c748 <memset>:
 800c748:	4402      	add	r2, r0
 800c74a:	4603      	mov	r3, r0
 800c74c:	4293      	cmp	r3, r2
 800c74e:	d100      	bne.n	800c752 <memset+0xa>
 800c750:	4770      	bx	lr
 800c752:	f803 1b01 	strb.w	r1, [r3], #1
 800c756:	e7f9      	b.n	800c74c <memset+0x4>

0800c758 <cleanup_glue>:
 800c758:	b538      	push	{r3, r4, r5, lr}
 800c75a:	460c      	mov	r4, r1
 800c75c:	6809      	ldr	r1, [r1, #0]
 800c75e:	4605      	mov	r5, r0
 800c760:	b109      	cbz	r1, 800c766 <cleanup_glue+0xe>
 800c762:	f7ff fff9 	bl	800c758 <cleanup_glue>
 800c766:	4621      	mov	r1, r4
 800c768:	4628      	mov	r0, r5
 800c76a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c76e:	f000 b869 	b.w	800c844 <_free_r>
	...

0800c774 <_reclaim_reent>:
 800c774:	4b2c      	ldr	r3, [pc, #176]	; (800c828 <_reclaim_reent+0xb4>)
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	4283      	cmp	r3, r0
 800c77a:	b570      	push	{r4, r5, r6, lr}
 800c77c:	4604      	mov	r4, r0
 800c77e:	d051      	beq.n	800c824 <_reclaim_reent+0xb0>
 800c780:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c782:	b143      	cbz	r3, 800c796 <_reclaim_reent+0x22>
 800c784:	68db      	ldr	r3, [r3, #12]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d14a      	bne.n	800c820 <_reclaim_reent+0xac>
 800c78a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c78c:	6819      	ldr	r1, [r3, #0]
 800c78e:	b111      	cbz	r1, 800c796 <_reclaim_reent+0x22>
 800c790:	4620      	mov	r0, r4
 800c792:	f000 f857 	bl	800c844 <_free_r>
 800c796:	6961      	ldr	r1, [r4, #20]
 800c798:	b111      	cbz	r1, 800c7a0 <_reclaim_reent+0x2c>
 800c79a:	4620      	mov	r0, r4
 800c79c:	f000 f852 	bl	800c844 <_free_r>
 800c7a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c7a2:	b111      	cbz	r1, 800c7aa <_reclaim_reent+0x36>
 800c7a4:	4620      	mov	r0, r4
 800c7a6:	f000 f84d 	bl	800c844 <_free_r>
 800c7aa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c7ac:	b111      	cbz	r1, 800c7b4 <_reclaim_reent+0x40>
 800c7ae:	4620      	mov	r0, r4
 800c7b0:	f000 f848 	bl	800c844 <_free_r>
 800c7b4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c7b6:	b111      	cbz	r1, 800c7be <_reclaim_reent+0x4a>
 800c7b8:	4620      	mov	r0, r4
 800c7ba:	f000 f843 	bl	800c844 <_free_r>
 800c7be:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c7c0:	b111      	cbz	r1, 800c7c8 <_reclaim_reent+0x54>
 800c7c2:	4620      	mov	r0, r4
 800c7c4:	f000 f83e 	bl	800c844 <_free_r>
 800c7c8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c7ca:	b111      	cbz	r1, 800c7d2 <_reclaim_reent+0x5e>
 800c7cc:	4620      	mov	r0, r4
 800c7ce:	f000 f839 	bl	800c844 <_free_r>
 800c7d2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c7d4:	b111      	cbz	r1, 800c7dc <_reclaim_reent+0x68>
 800c7d6:	4620      	mov	r0, r4
 800c7d8:	f000 f834 	bl	800c844 <_free_r>
 800c7dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c7de:	b111      	cbz	r1, 800c7e6 <_reclaim_reent+0x72>
 800c7e0:	4620      	mov	r0, r4
 800c7e2:	f000 f82f 	bl	800c844 <_free_r>
 800c7e6:	69a3      	ldr	r3, [r4, #24]
 800c7e8:	b1e3      	cbz	r3, 800c824 <_reclaim_reent+0xb0>
 800c7ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c7ec:	4620      	mov	r0, r4
 800c7ee:	4798      	blx	r3
 800c7f0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c7f2:	b1b9      	cbz	r1, 800c824 <_reclaim_reent+0xb0>
 800c7f4:	4620      	mov	r0, r4
 800c7f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c7fa:	f7ff bfad 	b.w	800c758 <cleanup_glue>
 800c7fe:	5949      	ldr	r1, [r1, r5]
 800c800:	b941      	cbnz	r1, 800c814 <_reclaim_reent+0xa0>
 800c802:	3504      	adds	r5, #4
 800c804:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c806:	2d80      	cmp	r5, #128	; 0x80
 800c808:	68d9      	ldr	r1, [r3, #12]
 800c80a:	d1f8      	bne.n	800c7fe <_reclaim_reent+0x8a>
 800c80c:	4620      	mov	r0, r4
 800c80e:	f000 f819 	bl	800c844 <_free_r>
 800c812:	e7ba      	b.n	800c78a <_reclaim_reent+0x16>
 800c814:	680e      	ldr	r6, [r1, #0]
 800c816:	4620      	mov	r0, r4
 800c818:	f000 f814 	bl	800c844 <_free_r>
 800c81c:	4631      	mov	r1, r6
 800c81e:	e7ef      	b.n	800c800 <_reclaim_reent+0x8c>
 800c820:	2500      	movs	r5, #0
 800c822:	e7ef      	b.n	800c804 <_reclaim_reent+0x90>
 800c824:	bd70      	pop	{r4, r5, r6, pc}
 800c826:	bf00      	nop
 800c828:	20000100 	.word	0x20000100

0800c82c <__malloc_lock>:
 800c82c:	4801      	ldr	r0, [pc, #4]	; (800c834 <__malloc_lock+0x8>)
 800c82e:	f7ff bf7b 	b.w	800c728 <__retarget_lock_acquire_recursive>
 800c832:	bf00      	nop
 800c834:	200069bc 	.word	0x200069bc

0800c838 <__malloc_unlock>:
 800c838:	4801      	ldr	r0, [pc, #4]	; (800c840 <__malloc_unlock+0x8>)
 800c83a:	f7ff bf76 	b.w	800c72a <__retarget_lock_release_recursive>
 800c83e:	bf00      	nop
 800c840:	200069bc 	.word	0x200069bc

0800c844 <_free_r>:
 800c844:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c846:	2900      	cmp	r1, #0
 800c848:	d044      	beq.n	800c8d4 <_free_r+0x90>
 800c84a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c84e:	9001      	str	r0, [sp, #4]
 800c850:	2b00      	cmp	r3, #0
 800c852:	f1a1 0404 	sub.w	r4, r1, #4
 800c856:	bfb8      	it	lt
 800c858:	18e4      	addlt	r4, r4, r3
 800c85a:	f7ff ffe7 	bl	800c82c <__malloc_lock>
 800c85e:	4a1e      	ldr	r2, [pc, #120]	; (800c8d8 <_free_r+0x94>)
 800c860:	9801      	ldr	r0, [sp, #4]
 800c862:	6813      	ldr	r3, [r2, #0]
 800c864:	b933      	cbnz	r3, 800c874 <_free_r+0x30>
 800c866:	6063      	str	r3, [r4, #4]
 800c868:	6014      	str	r4, [r2, #0]
 800c86a:	b003      	add	sp, #12
 800c86c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c870:	f7ff bfe2 	b.w	800c838 <__malloc_unlock>
 800c874:	42a3      	cmp	r3, r4
 800c876:	d908      	bls.n	800c88a <_free_r+0x46>
 800c878:	6825      	ldr	r5, [r4, #0]
 800c87a:	1961      	adds	r1, r4, r5
 800c87c:	428b      	cmp	r3, r1
 800c87e:	bf01      	itttt	eq
 800c880:	6819      	ldreq	r1, [r3, #0]
 800c882:	685b      	ldreq	r3, [r3, #4]
 800c884:	1949      	addeq	r1, r1, r5
 800c886:	6021      	streq	r1, [r4, #0]
 800c888:	e7ed      	b.n	800c866 <_free_r+0x22>
 800c88a:	461a      	mov	r2, r3
 800c88c:	685b      	ldr	r3, [r3, #4]
 800c88e:	b10b      	cbz	r3, 800c894 <_free_r+0x50>
 800c890:	42a3      	cmp	r3, r4
 800c892:	d9fa      	bls.n	800c88a <_free_r+0x46>
 800c894:	6811      	ldr	r1, [r2, #0]
 800c896:	1855      	adds	r5, r2, r1
 800c898:	42a5      	cmp	r5, r4
 800c89a:	d10b      	bne.n	800c8b4 <_free_r+0x70>
 800c89c:	6824      	ldr	r4, [r4, #0]
 800c89e:	4421      	add	r1, r4
 800c8a0:	1854      	adds	r4, r2, r1
 800c8a2:	42a3      	cmp	r3, r4
 800c8a4:	6011      	str	r1, [r2, #0]
 800c8a6:	d1e0      	bne.n	800c86a <_free_r+0x26>
 800c8a8:	681c      	ldr	r4, [r3, #0]
 800c8aa:	685b      	ldr	r3, [r3, #4]
 800c8ac:	6053      	str	r3, [r2, #4]
 800c8ae:	4421      	add	r1, r4
 800c8b0:	6011      	str	r1, [r2, #0]
 800c8b2:	e7da      	b.n	800c86a <_free_r+0x26>
 800c8b4:	d902      	bls.n	800c8bc <_free_r+0x78>
 800c8b6:	230c      	movs	r3, #12
 800c8b8:	6003      	str	r3, [r0, #0]
 800c8ba:	e7d6      	b.n	800c86a <_free_r+0x26>
 800c8bc:	6825      	ldr	r5, [r4, #0]
 800c8be:	1961      	adds	r1, r4, r5
 800c8c0:	428b      	cmp	r3, r1
 800c8c2:	bf04      	itt	eq
 800c8c4:	6819      	ldreq	r1, [r3, #0]
 800c8c6:	685b      	ldreq	r3, [r3, #4]
 800c8c8:	6063      	str	r3, [r4, #4]
 800c8ca:	bf04      	itt	eq
 800c8cc:	1949      	addeq	r1, r1, r5
 800c8ce:	6021      	streq	r1, [r4, #0]
 800c8d0:	6054      	str	r4, [r2, #4]
 800c8d2:	e7ca      	b.n	800c86a <_free_r+0x26>
 800c8d4:	b003      	add	sp, #12
 800c8d6:	bd30      	pop	{r4, r5, pc}
 800c8d8:	200069c0 	.word	0x200069c0

0800c8dc <_init>:
 800c8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8de:	bf00      	nop
 800c8e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8e2:	bc08      	pop	{r3}
 800c8e4:	469e      	mov	lr, r3
 800c8e6:	4770      	bx	lr

0800c8e8 <_fini>:
 800c8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8ea:	bf00      	nop
 800c8ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8ee:	bc08      	pop	{r3}
 800c8f0:	469e      	mov	lr, r3
 800c8f2:	4770      	bx	lr
